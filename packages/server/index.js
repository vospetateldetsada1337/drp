// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"mgLX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SET_RAGE_BETA = exports.RAGE_BETA = void 0;
let RAGE_BETA = false;
exports.RAGE_BETA = RAGE_BETA;

const SET_RAGE_BETA = () => {
  exports.RAGE_BETA = RAGE_BETA = true;
};

exports.SET_RAGE_BETA = SET_RAGE_BETA;
},{}],"r9AO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enabledHackTimeout = exports.enableHackTimeout = void 0;
let hack = setInterval(() => {}, 0);

const enabledHackTimeout = () => {
  return !!hack;
};

exports.enabledHackTimeout = enabledHackTimeout;

const enableHackTimeout = () => {
  if (hack) {
    clearInterval(hack);
    hack = null;
    return;
  } else {
    hack = setInterval(() => {}, 0);
  }
};

exports.enableHackTimeout = enableHackTimeout;
},{}],"Qkcg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixString = fixString;
exports.getColor = getColor;
exports.getFirstColor = getFirstColor;
exports.gtaStrToHtml = gtaStrToHtml;

String.prototype.regexIndexOf = function (regex, startpos) {
  var indexOf = this.substring(startpos || 0).search(regex);
  return indexOf >= 0 ? indexOf + (startpos || 0) : indexOf;
};

String.prototype.isNumberOnly = function () {
  let nm = String(parseInt(this));
  return nm == this;
};

Object.defineProperty(Array.prototype, 'chunk_inefficient', {
  value: function (chunkSize) {
    var array = this;
    return [].concat.apply([], array.map(function (elem, i) {
      return i % chunkSize ? [] : [array.slice(i, i + chunkSize)];
    }));
  }
});

function fixString(string) {
  if (!string) return string;
  string = string.replace(/\(/g, '[').replace(/\)/g, ']');
  string = string.replace(/\`/g, '');
  string = string.replace(/\'/g, '');
  string = string.replace(/\"/g, '');
  string = string.replace(/\\/g, '');
  return string;
}

function gtaStrToHtml(message) {
  if (!message) message = "";
  let str = message;
  let regex = /~[a-z]~/g,
      result,
      indices = [];
  let startColor = false;

  while (result = regex.exec(str)) {
    let replaceString = "";
    let color = getColor(result[0]);

    if (color) {
      if (startColor) replaceString += "</font>";
      if (color != "white") replaceString += `<font color="${color}">`, startColor = true;else startColor = false;
    } else {
      if (result[0] == "~n~") replaceString += "<br/>";
    }

    str = str.replace(result[0], replaceString);
  }

  str = str.replace(/\n/g, "<br/>");
  str = str.replace(/~[a-zA-Z]~/g, "");
  if (startColor) str += "</font>";
  return str;
}

function getFirstColor(message) {
  let fnd = message.substr(0, 3);
  let color = getColor(fnd);
  let string = color ? message.slice(3) : message;
  return {
    string,
    color
  };
}

function getColor(fnd) {
  switch (fnd) {
    case "~r~":
      return "#f51d1d";
      break;

    case "~g~":
      return "#7FFF00";
      break;

    case "~b~":
      return "#1E90FF";
      break;

    case "~y~":
      return "#FFD700";
      break;

    case "~p~":
      return "purple";
      break;

    case "~o~":
      return "orange";
      break;

    case "~c~":
      return "grey";
      break;

    case "~m~":
      return "grey";
      break;

    case "~u~":
      return "black";
      break;

    case "~s~":
      return "white";
      break;

    case "~w~":
      return "white";
      break;

    default:
      return null;
      break;
  }
}
},{}],"Z8LL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MainEvent = void 0;

class MainEvent {
  constructor() {
    this.eventRemoteRequestId = 0;
    this.eventRemoteRequestData = new Map();
    this.eventID = 0;
    this.containerLocal = new Map();
    this.container = new Map();
    this.eventRemoteRequestId = 1;
    this.eventRemoteRequestData = new Map();
    this.eventID = 1;
    this.containerLocal = new Map();
  }

  registerLocal(name, func) {
    console.log(`REGISTER Local Event \`${name}\``);
    const id = this.eventID;
    const self = {
      destroy: () => {
        this.containerLocal.delete(id);
      },
      eventId: id,
      eventName: name,
      env: 'local'
    };
    Object.defineProperties(self, {
      eventName: {
        writable: false
      },
      eventId: {
        writable: false
      },
      destroy: {
        writable: false
      }
    });
    this.containerLocal.set(id, func.bind(self));
    this.eventID++;
    return {
      id,
      destroy: self.destroy,
      name,
      env: 'local'
    };
  }

  triggerLocal(name, ...args) {
    this.containerLocal.forEach(item => {
      if (item.eventName == name) {
        item.bind(item.prototype)(...args);
      }
    });
  }

  async callLocal(name, ...args) {
    try {
      const values = await Promise.all([...this.containerLocal].map(([_, item]) => {
        if (item.prototype.eventName == name) {
          return new Promise((resolve, reject) => {
            resolve(item.bind(item.prototype)(...args));
          });
        }
      }));

      if (!values.length) {
        return Promise.reject(new Error(`Local Event \`${name}\` not found`));
      } else if (values.length == 1) {
        return values[0];
      } else {
        return values;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }

}

exports.MainEvent = MainEvent;
},{}],"Z5QB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTime = void 0;
exports.getRandomInt = getRandomInt;
exports.wait = exports.testJSON = exports.sleep = exports.randomArrayEl = exports.getTime = void 0;

const testJSON = text => {
  if (typeof text !== 'string') {
    return false;
  }

  try {
    JSON.parse(text);
    return true;
  } catch (error) {
    return false;
  }
};

exports.testJSON = testJSON;

const sleep = (ms = 500) => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

exports.sleep = sleep;

const wait = (ms = 500) => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

exports.wait = wait;

const getTime = function (from = null) {
  let time;
  if (from == null) time = new Date();else time = new Date(from);
  let hours = time.getHours();
  let minutes = time.getMinutes();
  let seconds = time.getSeconds();
  let ms = time.getMilliseconds();
  let m = time.getTime();
  let full = ms + seconds * 1000 + minutes * 60 * 1000 + hours * 60 * 60 * 1000;
  let res = {
    hour: hours,
    minutes: minutes,
    seconds: seconds,
    ms: ms,
    m: m,
    full: full,
    index: time
  };
  return res;
};

exports.getTime = getTime;

function randEl(arr, length = 0) {
  if (arr.length == 0) return null;
  const newArr = [...arr];

  if (length > 1) {
    let resArr = [];

    for (let id = 0; id < length; id++) {
      let id = getRandomInt(0, newArr.length - 1);
      resArr.push(newArr[id]);
      newArr.splice(id, 1);
    }
  } else {
    return newArr[getRandomInt(0, newArr.length - 1)];
  }
}

const randomArrayEl = randEl;
exports.randomArrayEl = randomArrayEl;

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const formatTime = time => {
  let minutes = Math.floor(time / 60);
  let seconds = time % 60;
  let minutes_str = String(minutes);
  let seconds_str = String(seconds);
  if (minutes < 10) minutes_str = `0${minutes}`;
  if (seconds < 10) seconds_str = `0${seconds}`;
  return `${minutes_str}:${seconds_str}`;
};

exports.formatTime = formatTime;
},{}],"ARQI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerEvent = void 0;

var _event = require("../util/event");

var _methods = require("../util/methods");

const formatArgs = args => {
  return args.map(arg => {
    if (typeof arg == 'string') {
      if ((0, _methods.testJSON)(arg)) {
        return JSON.parse(arg);
      }
    }

    return arg;
  });
};

class ServerEventClass extends _event.MainEvent {
  constructor() {
    super();
  }

  async get(name, type = "all", ...args) {
    try {
      let fncs = [];
      this.container.forEach(itm => {
        let access = true;
        if (itm.name != name) access = false;
        if (type != "all" && itm.type != "all" && type != itm.type) access = false;
        if (access) fncs.push(itm.func);
      });
      const values = [];

      for (let q in fncs) {
        let func = fncs[q];
        values.push(await func.bind(func.prototype)(...args));
      }

      if (!values.length) {
        return Promise.reject(new Error(`Remote Server Event \`${name}\` not found`));
      } else if (values.length == 1) {
        return values[0];
      } else {
        return values;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }

  registerClient(name, func) {
    return this.register(name, func, "client");
  }

  registerCEF(name, func) {
    return this.register(name, func, "CEF");
  }

  register(name, func, type = "all") {
    console.log(`REGISTER Remote Server Event \`${name}\` ${type}`);
    const id = this.eventID;
    const self = {
      destroy: () => {
        this.container.delete(id);
      },
      eventId: id,
      eventName: name,
      env: 'server',
      type
    };
    Object.defineProperties(self, {
      eventName: {
        writable: false
      },
      eventId: {
        writable: false
      },
      destroy: {
        writable: false
      },
      env: {
        writable: false
      },
      type: {
        writable: false
      }
    });
    this.container.set(id, {
      id,
      name,
      func: func.bind(self),
      type
    });
    this.eventID++;
    return {
      id,
      destroy: self.destroy,
      name
    };
  }

  triggerClient(player, name, ...args) {
    player.call('__customTriggerClient__', [name, [...args]]);
  }

  triggerBrowser(player, name, ...args) {
    player.call('__customTriggerCef__', [name, [...args]]);
  }

  callClient(player, name, ...args) {
    this.eventRemoteRequestId += 1;
    const id = this.eventRemoteRequestId;
    return new Promise((resolve, reject) => {
      player.call('__customCallClient__', [name, id, ...args]);
      this.eventRemoteRequestData.set(id, resolve);
    });
  }

  callBrowser(player, name, ...args) {
    const id = this.eventRemoteRequestId++;
    return new Promise((resolve, reject) => {
      player.call('__customCallCefFromServer', [name, id, ...args]);
      this.eventRemoteRequestData.set(id, resolve);
    });
  }

}

let ServerEvent = new ServerEventClass();
exports.ServerEvent = ServerEvent;
mp.events.add('__customRemoteAnswer__', (player, id, result) => {
  let f = ServerEvent.eventRemoteRequestData.get(id);

  if ((0, _methods.testJSON)(result)) {
    result = JSON.parse(result);
  }

  if (typeof f == "function") f(result);
  ServerEvent.eventRemoteRequestData.delete(id);
});
mp.events.add('__customTriggerServer__', async (player, type, name, ...args) => {
  args = formatArgs(args);
  await ServerEvent.get(name, type, player, ...args);
});
mp.events.add('__customCallServer__', (player, type, name, id, args) => {
  ServerEvent.get(name, type, player, args).then(result => {
    if (mp.players.exists(player)) player.call('__customRemoteAnswer__', [id, result]);
  }).catch(err => {
    if (mp.players.exists(player)) console.error(`[${player.ip}] call not exists event "${name}" from client`);
    console.error(err);
  });
});
mp.events.add('__customCallServerFromClientToCef__', (player, name, id, ...args) => {
  ServerEvent.get(name, "CEF", player, ...args).then(result => {
    if (mp.players.exists(player)) player.call('__customRemoteAnswerToCef__', [id, result]);
  }).catch(err => {
    if (mp.players.exists(player)) console.error(`[${player.ip}] call not exists event "${name}" from CEF`);
    console.error(err);
  });
});
Object.defineProperties(mp, {
  events: {
    writable: true
  }
});
mp.events.container = ServerEvent.container;
mp.events.eventRemoteRequestId = ServerEvent.eventRemoteRequestId;
mp.events.eventRemoteRequestData = ServerEvent.eventRemoteRequestData;
mp.events.eventID = ServerEvent.eventID;
mp.events.containerLocal = ServerEvent.containerLocal;
mp.events.register = ServerEvent.register.bind(mp.events);
mp.events.registerLocal = ServerEvent.registerLocal.bind(mp.events);
mp.events.triggerLocal = ServerEvent.triggerLocal.bind(mp.events);
mp.events.triggerClient = ServerEvent.triggerClient.bind(mp.events);
mp.events.triggerBrowser = ServerEvent.triggerBrowser.bind(mp.events);
mp.events.callLocal = ServerEvent.callLocal.bind(mp.events);
mp.events.callClient = ServerEvent.callClient.bind(mp.events);
mp.events.callBrowser = ServerEvent.callBrowser.bind(mp.events);
},{"../util/event":"Z8LL","../util/methods":"Z5QB"}],"bNis":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weaponCost = exports.stockSize = exports.mafiaCarsUnlockCdtimer = exports.mafiaCarsCdtimer = exports.mafiaCars = exports.kitchenIntDataUtil = exports.itemCosts = exports.businessNalog = exports.PillBoxCost = void 0;
const kitchenIntDataUtil = [[349.8293, -932.1685, 45.36568, 20000], [-1909.91, -575.0604, 18.09722, 20000], [-1282.89, 446.3326, 96.89471, 20000], [-1153.151, -1521.806, 9.642298, 20000], [-897.9225, -441.7401, 93.05853, 20000], [-852.9263, 688.3412, 151.8529, 20000], [-782.1923, 330.5791, 186.3132, 20000], [-758.5352, 610.5003, 143.1406, 20000], [-674.4797, 595.6437, 144.3797, 20000], [-618.301, 42.6407, 96.60004, 20000], [-566.1242, 656.9935, 144.832, 20000], [-111.3519, -6.549356, 69.51958, 20000], [-10.52031, -1428.414, 30.10148, 20000], [124.1809, 557.1547, 183.2971, 20000], [265.3231, -995.9853, -100.0086, 20000], [343.0825, 429.4016, 148.3808, 20000], [343.7529, -1002.998, -100.1962, 20000], [379.4201, 418.8586, 144.9001, 20000], [1395.23, 1145.007, 113.3336, 20000], [1975.355, 3818.645, 32.43632, 20000], [-9.682148, 520.001, 173.628, 30000], [-797.776, 187.5312, 71.60544, 30000], [-1440.387, 6759.043, 7.98046, 30000], [-769.8837, 340.0439, 210.397, 20000], [-787.7949, 330.3934, 157.599, 20000], [-782.215, 329.8719, 216.0382, 20000], [-778.6613, 327.9729, 195.086, 20000], [-1459.873, -534.1923, 54.52639, 20000], [-1473.994, -537.3419, 72.44417, 20000], [-31.02146, -587.9935, 87.71225, 20000], [-11.44843, -584.9959, 78.43073, 20000], [-896.725, -446.5864, 124.1319, 20000], [-912.0232, -371.7621, 83.07791, 20000], [-917.9376, -379.2882, 107.0377, 20000], [-918.7728, -386.1582, 112.6746, 20000], [-468.6447, -695.6874, 74.68432, 20000], [120.4625, -884.7316, 123.2703, 20000], [-674.1874, -858.9833, 40.64307, 20000], [-440.8985, 6274.877, 10.75166, 20000], [-57.75088, -620.3068, 75.99939, 20000], [930.5132, -548.4226, 42.63166, 20000]];
exports.kitchenIntDataUtil = kitchenIntDataUtil;
const mafiaCars = {
  EasyWeapon: 16300,
  MediumWeapon: 41200,
  HardWeapon: 78600,
  LightDrugs: 5000,
  HardDrugs: 21000,
  Ammo: 12800,
  Special: 10000,
  Bomb: 80000
};
exports.mafiaCars = mafiaCars;
const mafiaCarsCdtimer = 30 * 60 * 1000;
exports.mafiaCarsCdtimer = mafiaCarsCdtimer;
const mafiaCarsUnlockCdtimer = 15 * 60 * 1000;
exports.mafiaCarsUnlockCdtimer = mafiaCarsUnlockCdtimer;
const stockSize = {
  PlayerBase: 45100,
  House: 200000,
  Apartment: 200000,
  Bag: 40000,
  BagSmall: 10000,
  BagFull: 30000,
  BagTransfer: 500000,
  StockFraction: 21000000,
  Fridge: 100000,
  PrivateSafe: 75000,
  BigWoodBox: 250000,
  SmallWoodBox: 150000
};
exports.stockSize = stockSize;
const businessNalog = {
  GunShop: 10,
  PillBox: 40
};
exports.businessNalog = businessNalog;
const weaponCost = {
  Knife: 750,
  Knife2: 1000,
  Machete: 2000,
  Taurus: 1000,
  P99: 1250,
  Obrez: 4000,
  BenelliM3: 6000,
  P90: 7000,
  MP5A3: 5000,
  G36C: 15000,
  QBZ97: 14000,
  box127: 1800,
  box9smg: 500,
  box9pistol: 250,
  box185: 1500,
  box556: 1250,
  box762: 3000,
  armour: 500,
  armourMiddle: 2500
};
exports.weaponCost = weaponCost;
const itemCosts = {
  Bag: 1000,
  BagSmall: 25000
};
exports.itemCosts = itemCosts;
const PillBoxCost = {
  healer1: 350,
  healer2: 150,
  antipohmelin1x10: 3000,
  antipohmelin2x10: 1500,
  marih1x10: 300,
  marih2x10: 200
};
exports.PillBoxCost = PillBoxCost;
},{}],"Jhu1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propMutil = exports.propFutil = exports.printListUtil = exports.maxAmountTransferItem = exports.itemsUtil = exports.itemsChoise = exports.isWeapon = exports.isAmmoBox = exports.inventoryTypesUtil = exports.houseFridgeCost = exports.houseFridgeAmount = exports.healItemCost3 = exports.healItemCost2 = exports.healItemCost = exports.groupItems = exports.getItemWeightInKGById = exports.getItemWeightById = exports.getItemNameHashById = exports.getItemNameById = exports.getItemName = exports.getItemHashById = exports.getItemChoises = exports.getDefaultCount = exports.convertInventoryItemObjectToArray = exports.convertInventoryItemArrayToObject = exports.clothMutil = exports.clothFutil = exports.canEquip = exports.ammoItemIdToMaxCountUtil = void 0;
const maxAmountTransferItem = 10;
exports.maxAmountTransferItem = maxAmountTransferItem;

const getItemWeightById = id => {
  try {
    return itemsUtil[id][5];
  } catch (_unused) {
    return -1;
  }
};

exports.getItemWeightById = getItemWeightById;

const getItemWeightInKGById = id => {
  return getItemWeightById(id) / 1000;
};

exports.getItemWeightInKGById = getItemWeightInKGById;

const isAmmoBox = item_id => {
  let itm = getItemNameById(item_id);
  if (!itm) return false;
  return itm.toLowerCase().indexOf('коробка патронов') == 0;
};

exports.isAmmoBox = isAmmoBox;

const getItemName = item => {
  let name = getItemNameById(item.item_id);
  let label = ``;

  if ([inventoryTypesUtil.BagTransfer, inventoryTypesUtil.Bag, inventoryTypesUtil.BagFull, inventoryTypesUtil.BagSmall].includes(item.item_id)) {
    name += ' #' + item.id;
  }

  if (isAmmoBox(item.item_id)) {
    name += ` (${item.count} шт.)`;
  }

  if ([142, 143, 144, 145].includes(item.item_id) || item.item_id >= 154 && item.item_id <= 180) {
    name += ` (${item.count} г.)`;
  }

  if ([275, 276].includes(item.item_id)) {
    name += ` (${item.count} шт.)`;
  }

  if (item.item_id == 277) {
    name += `На $${item.prefix} №${item.id}`;
    if (item.key == -1) name += ' (Использован)';else if (item.key == 0) name += ' (Ожидает розыгрыша)';else if (item.key == 1) name += ' (ПОБЕДА!)';
  }

  if (item.prefix > 0 && item.number > 0 && item.key <= 0) {
    label = item.prefix + "-" + item.number;
  } else if (item.key > 0) {
    if (item.item_id >= 265 && item.item_id <= 268) {
      if (item.prefix == 1) name = clothFutil[item.key][9];else name = clothMutil[item.key][9];
    } else if (item.item_id >= 269 && item.item_id <= 273) {
      if (item.prefix == 1) name = propFutil[item.key][5];else name = propMutil[item.key][5];
    } else {
      label = "#" + item.key;
    }
  }

  return name + " " + label;
};

exports.getItemName = getItemName;

const getItemNameById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][0];
};

exports.getItemNameById = getItemNameById;

const getItemHashById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][3];
};

exports.getItemHashById = getItemHashById;

const getItemNameHashById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][1];
};

exports.getItemNameHashById = getItemNameHashById;

const canEquip = id => {
  if (!itemsUtil[id]) return false;
  return itemsUtil[id][2];
};

exports.canEquip = canEquip;

const isWeapon = item_id => {
  if (!itemsUtil[item_id]) return false;
  return !!itemsUtil[item_id][1];
};

exports.isWeapon = isWeapon;

const groupItems = datas => {
  let data = [];
  datas.forEach(item => {
    let fnd = data.find(itm => getItemName(convertInventoryItemArrayToObject(itm)) == getItemName(convertInventoryItemArrayToObject(item)));
    if (!fnd || [265].includes(item[1])) return data.push(item);
    fnd[2] += item[2];
  });
  return data;
};

exports.groupItems = groupItems;

const convertInventoryItemArrayToObject = data => {
  return {
    id: data[0],
    item_id: data[1],
    amount: data[2],
    count: data[3],
    number: data[4],
    prefix: data[5],
    key: data[6]
  };
};

exports.convertInventoryItemArrayToObject = convertInventoryItemArrayToObject;

const convertInventoryItemObjectToArray = item => {
  return [item.id, item.item_id, item.amount, item.count, item.number, item.prefix, item.key];
};

exports.convertInventoryItemObjectToArray = convertInventoryItemObjectToArray;

const getItemChoises = (id, count, fraction) => {
  let m = itemsChoise.filter(list => {
    if (list.ids.indexOf(id) > -1) {
      if (!list.check || list.check(count, id, fraction)) return list;
    }
  });
  return m;
};

exports.getItemChoises = getItemChoises;

const ammoItemIdToMaxCountUtil = type => {
  switch (type) {
    case 147:
      return 10;

    case 148:
      return 1;

    case 149:
      return 1;

    case 150:
      return 10;

    case -152:
      return 1;

    case 151:
      return 10;

    case 146:
      return 60;

    case 28:
      return 120;

    case 30:
      return 260;

    case 27:
      return 140;

    case 153:
      return 140;

    case 29:
      return 130;

    default:
      return 1;
  }
};

exports.ammoItemIdToMaxCountUtil = ammoItemIdToMaxCountUtil;

function range(start, end) {
  let ids = [];

  for (let id = start; id < end + 1; id++) ids.push(id);

  return ids;
}

const getDefaultCount = item_id => {
  if (!itemsUtil[item_id]) return 0;
  if (isAmmoBox(item_id)) return ammoItemIdToMaxCountUtil(item_id);
  return itemsUtil[item_id][6] ? itemsUtil[item_id][6] : 1;
};

exports.getDefaultCount = getDefaultCount;
const itemsUtil = [["Верёвка", "", false, -1145063624, 1000, 4000], ["Мешок", "", false, -1194335261, 100, 2400], ["Кокаин", "", false, 1808635348, 1, 1], ["Лечебная марихуана", "", false, 671777952, 1, 5], ["Отмычка", "", false, -1803909274, 50, 6], ["Масло", "", false, -1532806025, 3000, 10000], ["Набор инструментов", "", false, 648185618, 4500, 12800], ["Электронные часы", "", true, 1169295068, 190, 110], ["Телефон", "", true, -1038739674, 120, 156], ["Канистра", "PetrolCan", false, 1069395324, 10000, 11300], ["Жвачка", "", false, 936464539, 20, 20], ["Баттончик \"Pluto\"", "", false, 936464539, 60, 30], ["Чипсы \"AppiPot\"", "", false, 936464539, 100, 1500], ["Упаковка Роллов", "", false, 936464539, 290, 2000], ["Гамбургер", "", false, 936464539, 190, 500], ["Салат Цезарь", "", false, 936464539, 200, 2000], ["Пицца", "", false, 936464539, 550, 7000], ["Жаркое", "", false, 936464539, 450, 2000], ["Кесадилья", "", false, 936464539, 2000, 2000], ["Фрикасе из кролика", "", false, 936464539, 575, 2000], ["Фрукты", "", false, 936464539, 180, 1000], ["Вода", "", false, 746336278, 330, 3500], ["Кофе", "", false, 746336278, 400, 4000], ["Чай", "", false, 746336278, 330, 3500], ["Лимонад", "", false, 746336278, 330, 3500], ["Кока-Кола", "", false, 746336278, 250, 2500], ["Энергетик", "", false, 746336278, 250, 2500], ["Коробка патронов 9mm (Пистолет)", "", true, 190687980, 1140, 432], ["Коробка патронов 18.5mm", "", true, 1560006187, 2420, 1024], ["Коробка патронов 7.62mm", "", true, 669213687, 2580, 686], ["Коробка патронов 5.56mm", "", true, 1843823183, 3620, 1568], ["Адреналин", "", false, -1282296755, 50, 6], ["Сухпаек", "", false, 9168982, 2000, 5800], ["Уголь", "", false, -756465278, 40, 6], ["Сироп", "", false, -756465278, 75, 3], ["Cосудосуживающий таблетка", "", false, -756465278, 30, 6], ["Таблетка от кашля", "", false, -756465278, 40, 6], ["Витаминки", "", false, -756465278, 55, 6], ["Жаропонижающий", "", false, -756465278, 35, 6], ["Антибиотик", "", false, -756465278, 35, 6], ["Наручники", "", false, -1281059971, 340, 120], ["Ключ от тс", "", false, 977923025, 6, 3], ["Ключ от офиса", "", true, -331172978, 6, 3], ["Ключ от дома", "", true, -331172978, 6, 3], ["Ключ от квартиры", "", true, -331172978, 6, 3], ["Маска", "", true, 9168982, 650, 2800], ["Одежда", "", false, 9168982, 650, 3800], ["Рация", "", false, -1964402432, 250, 170], ["Кошелёк", "", false, -34897201, 120, 150], ["Письма", "", false, 406712611, 80, 410], ["Банковская карта", "", true, -1282513796, 15, 8], ["Паспорт", "", false, -1750183478, 40, 16], ["Лицензия", "", false, -925658112, 30, 116], ["Удостоверение", "", false, -1595369626, 15, 8], ["Кавалерийский кинжал", "Dagger", true, 1725061196, 400, 450], ["Бейсбольная бита", "Bat", true, 1742452667, 1500, 2000], ["Боевой топор", "BattleAxe", true, 2133533553, 2200, 2400], ["Розочка", "Bottle", true, -789123952, 110, 540], ["Лом", "Crowbar", true, 1862268168, 3200, 1050], ["Фонарик", "Flashlight", true, 211760048, 340, 400], ["Клюшка для гольфа", "GolfClub", true, -580196246, 2900, 1150], ["Молоток", "Hammer", true, 64104227, 860, 430], ["Топорик", "Hatchet", true, 1653948529, 930, 860], ["Нож", "Knife", true, -1982443329, 560, 520], ["Кастет", "KnuckleDuster", true, -1803909274, 450, 80], ["Мачете", "Machete", true, -2055486531, 1120, 525], ["Полицейская дубинка", "Nightstick", true, -1634978236, 880, 970], ["Разводной ключ", "Wrench", true, 10555072, 1760, 1490], ["Бильярдный кий", "PoolCue", true, -1982443329, 470, 160], ["Выкидной нож", "SwitchBlade", true, 1653948529, 130, 60], ["Сolt SCAMP", "APPistol", true, 905830540, 1500, 950], ["P99", "CombatPistol", true, 403140669, 800, 660], ["Сигнальный пистолет", "FlareGun", true, 1349014803, 440, 270], ["Enterprise Wide Body 1911", "HeavyPistol", true, 1927398017, 1120, 850], ["Raging Bull", "Revolver", true, 1430410579, 1440, 1080], ["Raging Bull Mk II", "Revolver_Mk2", true, 1430410579, 1990, 1080], ["Contender G2", "MarksmanPistol", true, 1430410579, 1360, 1800], ["Taurus PT92", "Pistol", true, 1467525553, 950, 1230], ["Beretta 90Two", "PistolMk2", true, 1430410579, 920, 1050], ["Desert Eagle", "Pistol50", true, -178484015, 1700, 1720], ["HK P7M10", "SNSPistol", true, 339962010, 785, 660], ["Colt Junior", "SNSPistol_Mk2", true, 1430410579, 365, 310], ["Шокер", "StunGun", true, 1609356763, 760, 680], ["FN Model 1922", "VintagePistol", true, -1124046276, 700, 720], ["Colt New Service", "DoubleAction", true, 1430410579, 1450, 1170], ["UTS-15", "AssaultShotgun", true, 1255410010, 2800, 11500], ["KSG 12", "BullpupShotgun", true, -1598212834, 3100, 9500], ["Обрез", "DoubleBarrelShotgun", true, -1920611843, 1410, 1800], ["Сайга-12К", "HeavyShotgun", true, -1209868881, 3500, 10900], ["Land Pattern Musket", "Musket", true, 1652015642, 4300, 14400], ["Benelli M3", "PumpShotgun", true, 689760839, 4500, 16100], ["Benelli M4", "PumpShotgun_Mk2", true, 798951501, 3500, 17600], ["Mossberg 500", "SawnOffShotgun", true, -675841386, 2100, 3800], ["Protecta", "SweeperShotgun", true, -1920611843, 2900, 6800], ["P-90", "AssaultSMG", true, -473574177, 2800, 8800], ["Mk 48", "CombatMG", true, -739394447, 8000, 16000], ["HK MG4", "CombatMG_Mk2", true, 798951501, 8150, 17600], ["SIG MPX-SD", "CombatPDW", true, -1393014804, 2700, 5000], ["Thompson M1918A1", "Gusenberg", true, 574348740, 8400, 18400], ["Intratec TEC-9", "MachinePistol", true, 1430410579, 1500, 1660], ["ПКП «Печенег»", "MG", true, -2056364402, 8200, 17250], ["Mini Uzi", "MicroSMG", true, -1056713654, 2650, 2500], ["Scorpion vz.61", "MiniSMG", true, 1430410579, 2000, 1900], ["MP5A3", "SMG", true, -500057996, 3200, 7800], ["MP5K", "SMG_Mk2", true, -1920611843, 3350, 8100], ["Tavor CTar-21", "AdvancedRifle", true, -1707584974, 3270, 12400], ["AK-102", "AssaultRifle", true, 273925117, 3200, 14700], ["AK-103", "AssaultRifle_Mk2", true, 798951501, 3600, 16200], ["QBZ-97", "BullpupRifle", true, -1288559573, 3250, 13500], ["QBZ-95", "BullpupRifle_Mk2", true, 798951501, 3350, 13900], ["HK-416", "CarbineRifle", true, 1026431720, 3490, 8500], ["HK-416A5", "CarbineRifle_Mk2", true, 798951501, 3560, 8500], ["AKS-47u", "CompactRifle", true, -1920611843, 2400, 5700], ["G36C", "SpecialCarbine", true, -1745643757, 2980, 12000], ["G36KV", "SpecialCarbine_Mk2", true, 798951501, 3370, 13900], ["M107", "HeavySniper", true, -746966080, 13500, 21000], ["XM109", "HeavySniper_Mk2", true, 798951501, 14000, 24500], ["M14 EBR", "MarksmanRifle", true, -1711248638, 5100, 17800], ["SOCOM 16", "MarksmanRifle_Mk2", true, 798951501, 5900, 18200], ["L115A3", "SniperRifle", true, 346403307, 6600, 14400], ["M79", "CompactGrenadeLauncher", true, -1920611843, 50, 2050], ["Пиротехническая установка", "Firework", true, 491091384, 8500, 29000], ["M32 MGL", "GrenadeLauncher", true, -606683246, 5300, 19500], ["FIM 92 Stinger", "HomingLauncher", true, 1901887007, 13500, 29000], ["M134", "Minigun", true, 422658457, 30000, 50000], ["Рельсовое оружие", "Railgun", true, -1876506235, 14900, 22500], ["РПГ-7", "RPG", true, -218858073, 6000, 46000], ["Мяч", "Ball", true, -383950123, 250, 310], ["Дымовая гранта", "SmokeGrenade", true, -1936212109, 690, 485], ["Сигнальный огонь", "Flare", true, -1564193152, 250, 180], ["Граната", "Grenade", true, 290600267, 890, 410], ["Коктейль Молотова", "Molotov", true, -880609331, 660, 720], ["Неконтактная мина", "ProximityMine", true, 1876445962, 850, 1200], ["Самодельная бомба", "PipeBomb", true, 848107085, 430, 180], ["Снежок", "Snowball", true, 1297482736, 250, 310], ["Бомба-липучка", "StickyBomb", true, -1110203649, 750, 1200], ["Слезоточивый газ", "BZGas", true, 1591549914, 690, 485], ["Парашют", "Parachute", true, -1679378668, 3200, 7500], ["Купюра 1$", "", true, 1814532926, 1, 1], ["Купюра 100$", "", true, 1597489407, 1, 1], ["Маленькая пачка 100$", "", true, -1170050911, 100, 100], ["Большая пачка 100$", "", true, -1448063107, 300, 300], ["Упаковка кокаина", "", false, 525896218, 1000, 1000, 1000], ["Упаковка марихуаны", "", false, -395076527, 200, 1000, 200], ["Упаковка кокаина", "", false, -1688127, 5000, 5000, 5000], ["Упаковка марихуаны", "", false, -680115871, 800, 4000, 800], ["Коробка патронов 12.7mm", "", true, 1843823183, 8900, 1568], ["Коробка патронов сингального пистолета", "", true, 1843823183, 1600, 1568], ["Коробка патронов феерверка", "", true, 1843823183, 1600, 1568], ["Коробка патронов RPG", "", true, 1843823183, 2200, 1568], ["Коробка патронов", "", true, 1843823183, 3800, 1568], ["Коробка подствольных гранат", "", true, 1843823183, 3800, 1568], ["Коробка патронов Stinger", "", true, 1843823183, 1500, 1568], ["Коробка патронов 9mm (SMG)", "", true, 190687980, 1140, 432], ["Кокаин", "", false, 1808635348, 10, 10, 10], ["Лечебная марихуана", "", false, 671777952, 10, 10, 10], ["Кокаин", "", false, 1808635348, 50, 50, 50], ["Лечебная марихуана", "", false, 671777952, 50, 50, 50], ["Амфетамин", "", false, 1808635348, 1, 1, 10], ["DMT", "", false, 1808635348, 1, 1, 10], ["Мефедрон", "", false, 1808635348, 1, 1, 10], ["Кетамин", "", false, 671777952, 1, 5, 5], ["LSD", "", false, 671777952, 1, 5, 5], ["Упаковка амфетамина", "", false, 525896218, 1000, 1000, 1000], ["Упаковка амфетамина", "", false, -1688127, 5000, 5000, 5000], ["Упаковка DMT", "", false, 525896218, 1000, 1000, 1000], ["Упаковка DMT", "", false, -1688127, 5000, 5000, 5000], ["Упаковка мефедрона", "", false, 525896218, 1000, 1000, 1000], ["Упаковка мефедрона", "", false, -1688127, 5000, 5000, 5000], ["Упаковка кетамина", "", false, 1430410579, 1000, 3000, 1000], ["Упаковка LSD", "", false, 1430410579, 1000, 3000, 1000], ["Амфетамин", "", false, 1808635348, 10, 10, 10], ["DMT", "", false, 1808635348, 10, 10, 10], ["Мефедрон", "", false, 1808635348, 10, 10, 10], ["Кетамин", "", false, 671777952, 10, 50, 10], ["LSD", "", false, 671777952, 10, 50, 10], ["Амфетамин", "", false, 1808635348, 50, 50, 50], ["DMT", "", false, 1808635348, 50, 50, 50], ["Мефедрон", "", false, 1808635348, 50, 50, 50], ["Кетамин", "", false, 671777952, 50, 250, 50], ["LSD", "", false, 671777952, 50, 250, 50], ["Деревянный ящик Gray Tea", "", false, -1147461795, 15000, 500000], ["Коробка Листов A4", "", false, 1465830963, 2500, 40000], ["Коробка Redwood", "", false, 1465830963, 2500, 35000], ["Коробка Clucking Bell", "", false, 250374685, 15000, 70000], ["Коробка Jo Jo diet Cola", "", false, -1244905398, 8000, 25000], ["Коробка Craft", "", false, -517243780, 40000, 70000], ["Коробка Fish and Roll", "", false, -1563678327, 60000, 450000], ["Деревянный ящик GoPostal", "", false, -1649986476, 19000, 300000], ["Огромная деревянный ящик", "", false, 1955876122, 420000, 5000000], ["Важная деревянный ящик", "", false, 307713837, 120000, 1250000], ["Коробка из китая", "", false, -1513883840, 35000, 450000], ["Важная коробка", "", false, -1438964996, 12000, 250000], ["Маленькая коробка", "", false, -721895765, 4000, 55000], ["Полосатая бочка", "", false, 546252211, 30000, 5000], ["Ограждение со стрелкой", "", false, 1867879106, 8000, 5000], ["Длинное ограждение", "", false, -205311355, 10000, 5000], ["Деревянное ограждение", "", false, 1072616162, 5000, 5000], ["Деревянное ограждение с огнём", "", false, 1329951119, 5000, 5000], ["Полицейское огорождение", "", false, -143315610, 9000, 5000], ["Длинный полосатый конус", "", false, 939377219, 1000, 3000], ["Полосатый конус", "", false, 1245865676, 1000, 3000], ["Красный конус", "", false, 862664990, 1000, 3000], ["Длинный конус с огнями", "", false, -1587301201, 1000, 3000], ["Капсула с таблетками", "", false, -2127785247, 50, 25], ["Огромная стекляная бутыль", "", false, -1382355819, 3000, 6750], ["Капсула с таблетками", "", false, -756465278, 50, 30], ["Бутыль", "", false, 393961710, 250, 250], ["Сироп", "", false, 1648892290, 120, 170], ["Большая стекляная банка", "", false, 566302905, 1500, 4200], ["Стекляная банка", "", false, -2034834785, 500, 1400], ["Контейнер с пробирками", "", false, -330775550, 4500, 6000], ["Контейнер для пробирок", "", false, -192665395, 2000, 6000], ["Пробирка", "", false, -2022085894, 500, 60], ["Шприц", "", false, -61966571, 50, 6], ["Аптечка", "", false, 678958360, 500, 880], ["Бинт", "", false, 546339338, 70, 280], ["Большой бинт", "", false, 580223600, 120, 410], ["Таблетки", "", false, -1129328507, 20, 10], ["Бутыль с перекисью водорода", "", false, 1254553771, 3000, 8000], ["Упаковка таблеток", "", false, 1787587532, 50, 130], ["Антипохмелин", "", false, 1547095841, 12, 130], ["Упаковка таблеток", "", false, 1174512311, 50, 130], ["Сырое мясо кабана", "", false, 936464539, 4000, 10000], ["Сырое мясо ястреба", "", false, 936464539, 300, 2000], ["Сырое мясо коровы", "", false, 936464539, 4000, 10000], ["Сырое мясо баклана", "", false, 936464539, 290, 1500], ["Сырое мясо оленя", "", false, 936464539, 4000, 15000], ["Сырое мясо курицы", "", false, 936464539, 290, 1500], ["Сырое мясо свиньи", "", false, 936464539, 4000, 10000], ["Сырое мясо кролика", "", false, 936464539, 500, 3000], ["Сырое мясо крысы", "", false, 936464539, 50, 500], ["Мясо кабана", "", false, 936464539, 4000, 10000], ["Мясо ястреба", "", false, 936464539, 300, 2000], ["Мясо коровы", "", false, 936464539, 4000, 10000], ["Мясо баклана", "", false, 936464539, 290, 1500], ["Мясо оленя", "", false, 936464539, 4000, 12000], ["Мясо курицы", "", false, 936464539, 290, 1500], ["Мясо свиньи", "", false, 936464539, 4000, 10000], ["Мясо кролика", "", false, 936464539, 500, 3000], ["Мясо крысы", "", false, 936464539, 100, 1000], ["Сырое мясо тунца", "", false, 936464539, 1000, 3000], ["Сырое мясо окуня", "", false, 936464539, 300, 800], ["Сырое мясо краба", "", false, 936464539, 600, 4000], ["Сырое мясо лосося", "", false, 936464539, 290, 1000], ["Сырое мясо креветок", "", false, 936464539, 290, 600], ["Мясо тунца", "", false, 936464539, 1000, 3000], ["Мясо окуня", "", false, 936464539, 300, 800], ["Мясо краба", "", false, 936464539, 600, 4000], ["Мясо лосося", "", false, 936464539, 290, 1000], ["Мясо креветок", "", false, 936464539, 290, 600], ["Удочка", "", false, 1338703913, 3560, 5500], ["Бронежилет", "", false, 701173564, 3560, 5000], ["Игральные кости", "", false, -1803909274, 50, 6], ["Маленький розовый член", "", false, -422877666, 250, 195], ["Красный вибратор ", "", false, -463441113, 450, 440], ["Фиолетовый член", "", false, -731262150, 330, 290], ["Кожаный член", "", false, -1980613044, 320, 285], ["Позолоченный член", "", false, 2009373169, 390, 180], ["Металлический член", "", false, -1921596075, 390, 180], ["Большой резиновый член", "", false, 1333481871, 950, 2100], ["Анальная смазка", "", false, 1553232197, 250, 540], ["C4 (Мощная)", "StickyBomb", false, -1110203649, 750, 1200], ["Специальная отмычка", "", false, -1803909274, 50, 6], ["Маска", "", true, -1211793417, 400, 1350], ["Одежда", "", true, -1158162337, 2000, 2500], ["Штаны", "", true, -1158162337, 2000, 2500], ["Обувь", "", true, 101151147, 1500, 3000], ["Аксессуар", "", true, 1267833770, 400, 1200], ["Головной убор", "", true, 1267833770, 500, 1500], ["Очки", "", true, 1298569174, 200, 350], ["Серьги", "", true, 1267833770, 150, 90], ["Часы", "", true, 1267833770, 250, 300], ["Браслет", "", true, 1267833770, 250, 300], ["Маска", "", true, 1267833770, 400, 1200], ["Коробка отмычек", "", false, 1267833770, 500, 60, 10], ["Коробка спец. отмычек", "", false, 1267833770, 1500, 180, 30], ["Лот. билет", "", false, 406712611, 80, 410], ["Спец. Аптечка", "", false, 678958360, 500, 880], ["Сноуборд", "", false, 3328693117, 500, 880], ["Пакет", "", false, -1158162337, 1000, 1000], ["Тяжёлая сумка", "", false, -1158162337, 1000, 1000], ["Планшет", "", true, 1943210810, 300, 300], ["Чемодан для перевозки", "", false, -1158162337, 1000, 1000], ["Лёгкая сумка", "", false, -1158162337, 1000, 1000], ["Дорожные шипы", "", false, -596599738, 10000, 10000]];
exports.itemsUtil = itemsUtil;
const inventoryTypesUtil = {
  World: 0,
  Player: 1,
  VehicleOwner: 2,
  VehicleServer: 3,
  VehicleNpc: 4,
  House: 5,
  Apartment: 6,
  Vehicle: 8,
  StockFraction: 9,
  Fridge: 10,
  UserStock: 11,
  UserStockMax: 22,
  Bag: 280,
  BagFull: 281,
  BagSmall: 284,
  BagTransfer: 283
};
exports.inventoryTypesUtil = inventoryTypesUtil;
const healItemCost = 250;
exports.healItemCost = healItemCost;
const healItemCost2 = 500;
exports.healItemCost2 = healItemCost2;
const healItemCost3 = 250;
exports.healItemCost3 = healItemCost3;
const itemsChoise = [{
  ids: [279],
  task: "skate",
  name: "Прокатиться"
}, {
  ids: [215],
  task: "upNearest10",
  name: "Реанимировать человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [278],
  task: "upNearest100",
  name: "Реанимировать человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215, 278],
  task: "healNearest",
  name: "Вылечить человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215, 278],
  task: "healNearestPay",
  name: "Вылечить человека рядом ($" + healItemCost3 + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215],
  task: "upNearestPay10",
  name: "Реанимировать человека рядом ($" + healItemCost + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [278],
  task: "upNearestPay100",
  name: "Реанимировать человека рядом ($" + healItemCost2 + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [275, 276],
  task: "countPlayerItemButton",
  name: "Посчитать"
}, {
  ids: [140, 141],
  task: "countMoneyPlayerItemButton",
  name: "Посчитать"
}, {
  ids: [146, 147, 148, 149, 150, 151, 152, 153, 27, 28, 29, 30],
  task: "countBulletsPlayerItemButton",
  name: "Посчитать"
}, {
  ids: range(0, 9999),
  task: "usePlayerItemButton",
  name: "Использовать",
  check: (count, itemid) => {
    if (canEquip(itemid)) {
      if (itemid == 7 || itemid == 63) return true;
    } else {
      if (itemid != 275 && itemid != 276 && itemid != 277) return true;
    }

    return false;
  }
}, {
  ids: [277],
  task: "transferLotoItemButton",
  name: "Обменять в любом 24/7"
}, {
  ids: [277],
  task: "infoLotoItemButton",
  name: "Информация о билете"
}, {
  ids: range(0, 9999),
  task: "equipItemButton",
  name: "Экипировать",
  check: (count, item) => {
    return canEquip(item);
  }
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeOneGrammPlayerItemButton",
  name: "Взять 1гр."
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeTenGrammPlayerItemButton",
  name: "Взять 10гр.",
  check: count => count >= 10
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeFiftyGrammPlayerItemButton",
  name: "Взять 50гр.",
  check: count => count >= 50
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "weighPlayerItemButton",
  name: "Взвесить"
}, {
  ids: [275, 276],
  task: "takeOneItemPlayerItemButton",
  name: "Взять 1шт."
}];
exports.itemsChoise = itemsChoise;
const clothFutil = [[0, 4, 45, 2, -1, -1, -1, -1, 75, "Свободные штаны с карманами", -20, 30], [0, 4, 3, 14, -1, -1, -1, -1, 80, "Мятые штаны", -20, 30], [0, 4, 58, 2, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [0, 4, 66, 9, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [0, 4, 71, 16, -1, -1, -1, -1, 115, "Шаровары", -25, 30], [0, 4, 104, 12, -1, -1, -1, -1, 125, "Заказные Шаровары", -25, 30], [0, 4, 80, 6, -1, -1, -1, -1, 90, "Спортивные штаны", -10, 35], [0, 4, 84, 8, -1, -1, -1, -1, 105, "Низкие джинсы", -10, 40], [0, 4, 101, 24, -1, -1, -1, -1, 90, "Штаны с карманами", -25, 30], [0, 4, 82, 6, -1, -1, -1, -1, 65, "Спортивные бриджи", 10, 50], [0, 4, 2, 1, -1, -1, -1, -1, 55, "Спортивные бриджи", 15, 50], [0, 4, 10, 1, -1, -1, -1, -1, 25, "Спортивные шорты", 15, 60], [0, 4, 14, 0, -1, -1, -1, -1, 35, "Шорты", 20, 60], [0, 4, 16, 10, -1, -1, -1, -1, 35, "Шорты", 20, 60], [0, 4, 78, 2, -1, -1, -1, -1, 45, "Шорты с чулками", 15, 45], [0, 4, 17, 10, -1, -1, -1, -1, 15, "Низ от бикини", 25, 99], [0, 4, 21, -1, -1, -1, -1, -1, 5, "Низ от Мини-Бикини", 25, 99], [0, 4, 57, 6, -1, -1, -1, -1, 60, "Низ от халата", 10, 50], [0, 11, 0, 14, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [0, 11, 1, 1, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [0, 11, 3, 3, 3, -1, -1, -1, 140, "Толстовка", 5, 30], [0, 11, 10, 1, 0, -1, 21, 0, 135, "Спортивная ветровка", 5, 30], [0, 11, 11, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 16, 5, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 17, -1, 14, -1, -1, -1, 80, "Гавайская рубашка", 15, 45], [0, 11, 18, 10, 15, -1, -1, -1, 50, "Верх бикини", 25, 99], [0, 11, 19, 2, 12, -1, -1, -1, 75, "Новогодняя футболк с вырезом", 15, 50], [0, 11, 23, 1, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [0, 11, 31, 5, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [0, 11, 32, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 33, 7, 4, -1, -1, -1, 60, "Кроп-Майка", 25, 60], [0, 11, 36, 3, 4, -1, -1, -1, 75, "Фирменный верх купальника", 20, 60], [0, 11, 37, 4, 4, -1, -1, -1, 180, "Сарафан", 15, 45], [0, 11, 49, 0, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 54, 2, 3, -1, -1, -1, 175, "Старая Мото-Куртка", -15, 30], [0, 11, 55, -1, 3, -1, -1, -1, 135, "Старая тёплая куртка", -20, 25], [0, 11, 73, 1, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 74, 1, 4, -1, -1, -1, 30, "Майка", 20, 60], [0, 11, 75, 2, 9, -1, -1, -1, 85, "Задраный джемпер", 10, 40], [0, 11, 76, 3, 9, -1, -1, -1, 90, "Бейбсбольная рубашка", 15, 50], [0, 11, 77, -1, 9, -1, -1, -1, 95, "Рабочая куртка", -5, 30], [0, 11, 96, -1, 14, -1, -1, -1, 80, "Гавайская рубашка", 15, 45], [0, 11, 97, -1, 3, -1, 67, 2, 135, "Старая ветровка", -15, 30], [0, 11, 102, -1, 3, -1, -1, -1, 210, "Старая кожаная куртка", -20, 30], [0, 11, 105, 6, 4, -1, -1, -1, 90, "Верх от халата", 15, 50], [0, 11, 106, 2, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [0, 11, 107, -1, 2, -1, 67, 2, 250, "Старое пальто", -20, 30], [0, 11, 108, 1, 3, -1, 67, 2, 110, "Старая куртка Санты", -5, 30], [0, 11, 120, 15, 5, -1, 60, 0, 80, "Открытая винтажная рубашка", 15, 40], [0, 11, 121, 15, 3, -1, -1, -1, 80, "Закрытая винтажная рубашка", 10, 35], [0, 11, 123, 10, 3, -1, -1, -1, 115, "Старый свитшот", 5, 30], [0, 11, 125, 8, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 126, 1, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 132, 5, 14, -1, -1, -1, 80, "Рубашка с рисунком", 15, 45], [0, 11, 138, 9, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [0, 11, 141, 4, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 146, 8, 7, -1, 44, 0, 125, "Старая Шоу-Куртка", -5, 30], [0, 11, 148, 4, 7, -1, 51, 0, 85, "Потёртая кожаная куртка", -10, 30], [0, 11, 152, 2, 7, -1, 44, 0, 125, "Старая Мото-Куртка", -1, 30], [0, 11, 154, 2, 4, -1, 60, 0, 80, "Кожаный жилет", 15, 40], [0, 11, 161, 0, 2, -1, -1, -1, 35, "Бейсбольная рубашка", 15, 50], [0, 11, 163, 4, 2, -1, 26, 0, 145, "Кожаная куртка", -15, 30], [0, 11, 166, 2, 2, -1, 26, 0, 105, "Джинсовая куртка", -10, 30], [0, 11, 167, 2, 4, -1, 60, 0, 75, "Джинсовый жилет", 15, 40], [0, 11, 168, 4, 4, -1, -1, -1, 25, "Рваная майка", 20, 60], [0, 11, 169, 4, 4, -1, -1, -1, 30, "Рваная футболка", 20, 60], [0, 11, 170, 4, 4, -1, -1, -1, 20, "Рваный топик", 20, 60], [0, 11, 171, 6, 4, -1, -1, -1, 55, "Завязанная рубашка", 15, 50], [0, 11, 172, 0, 3, -1, -1, -1, 85, "Худи", 5, 30], [0, 11, 173, -1, 4, -1, -1, -1, 65, "Кожаный Кроп-Жилет", 20, 55], [0, 11, 242, 8, 6, -1, 51, 0, 180, "Закрытая охотничья куртка", -20, 25], [0, 11, 243, 8, 6, -1, 51, 0, 180, "Открытая охотничья куртка", -5, 30], [0, 11, 247, 24, 15, -1, -1, -1, 40, "Спортивная майка", 20, 60], [0, 6, 5, 0, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 10, 2, -1, -1, -1, -1, 55, "Кросовки", -10, 50], [0, 6, 16, 10, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 17, -1, -1, -1, -1, -1, 40, "Ботинки Эльфа", -5, 50], [0, 6, 30, -1, -1, -1, -1, -1, 145, "Поношеные высокие туфли", -30, 30], [0, 6, 59, 0, -1, -1, -1, -1, 85, "Поношеные ботинки", -30, 30], [0, 6, 60, 10, -1, -1, -1, -1, 60, "Старые патрули", -10, 50], [0, 6, 67, 12, -1, -1, -1, -1, 80, "Старые фирменные кеды", -10, 50], [0, 6, 83, 0, -1, -1, -1, -1, 90, "Покрашенные высокие ботинки", -30, 30], [0, 6, 84, 0, -1, -1, -1, -1, 65, "Покрашенные низкие ботинки", -30, 30], [0, 6, 85, 1, -1, -1, -1, -1, 95, "Винтажные высокие ботинки", -30, 30], [0, 6, 86, 1, -1, -1, -1, -1, 70, "Винтажные низкие ботинки", -30, 30], [0, 7, 9, -1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 15, 3, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 83, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 84, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [0, 7, 93, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [1, 4, 0, 14, -1, -1, -1, -1, 320, "Джинсы в обтяжку", -15, 40], [1, 4, 1, 14, -1, -1, -1, -1, 250, "Потёртые джинсы", -20, 35], [1, 4, 4, 14, -1, -1, -1, -1, 255, "Джинсы с подворотами", 10, 40], [1, 4, 8, 14, -1, -1, -1, -1, 210, "Мини-Юбка в обтяжку", 15, 50], [1, 4, 9, 14, -1, -1, -1, -1, 220, "Мини-Юбка с пайетками", 15, 50], [1, 4, 11, 14, -1, -1, -1, -1, 335, "Штаны с карманами", 10, 40], [1, 4, 12, 14, -1, -1, -1, -1, 190, "Расклешённая Мини-Юбка", 15, 50], [1, 4, 24, 11, -1, -1, -1, -1, 330, "Юбка до колена", 15, 50], [1, 4, 25, 11, -1, -1, -1, -1, 210, "Джинсовые шорты", 15, 50], [1, 4, 27, 14, -1, -1, -1, -1, 225, "Глянцовые леггинсы", -10, 40], [1, 4, 28, -1, -1, -1, -1, -1, 210, "Полосатя Мини-Юбка", 15, 50], [1, 4, 31, 2, -1, -1, -1, -1, 245, "Новогоднии леггинсы", -5, 40], [1, 4, 43, 3, -1, -1, -1, -1, 370, "Джинсы с разрезами на молниях", 5, 40], [1, 4, 106, 6, -1, -1, -1, -1, 380, "Фирменные джинсы с раз. на молниях", 5, 40], [1, 4, 44, 3, -1, -1, -1, -1, 355, "Джинсы с разрезами", 5, 40], [1, 4, 112, 10, -1, -1, -1, -1, 390, "Джинсы на прошиве", -15, 35], [1, 4, 47, 5, -1, -1, -1, -1, 260, "Пижамные штаны", 10, 35], [1, 4, 51, 3, -1, -1, -1, -1, 200, "Матовые лосины", 10, 40], [1, 4, 54, 2, -1, -1, -1, -1, 210, "Глянцевые лосины", -5, 40], [1, 4, 55, -1, -1, -1, -1, -1, 370, "Эксклюзивные леггинсы", -10, 40], [1, 4, 56, 4, -1, -1, -1, -1, 105, "Заказной низ от бикини", 25, 99], [1, 4, 60, 14, -1, -1, -1, -1, 150, "Новогоднии пижамные штаны", 10, 35], [1, 4, 67, 12, -1, -1, -1, -1, 140, "Пижамные штаны", 10, 35], [1, 4, 73, 4, -1, -1, -1, -1, 285, "Джеггинсы", -15, 35], [1, 4, 74, 4, -1, -1, -1, -1, 275, "Рваные джеггинсы", -5, 40], [1, 4, 75, 1, -1, -1, -1, -1, 345, "Глянцевые джинсы", -15, 35], [1, 4, 76, 1, -1, -1, -1, -1, 350, "Рельефные глянцевые джинсы", -15, 35], [1, 4, 77, 1, -1, -1, -1, -1, 360, "Заказные глянцевые джинсы", -15, 35], [1, 4, 81, 1, -1, -1, -1, -1, 160, "Глянцевые спортивные штаны", -10, 40], [1, 4, 83, 1, -1, -1, -1, -1, 125, "Глянцевые спортивные бриджи", 15, 50], [1, 4, 85, 2, -1, -1, -1, -1, 190, "Глянцевые низкие джинсы", -10, 40], [1, 4, 87, 14, -1, -1, -1, -1, 225, "Заказные леггинсы", -10, 40], [1, 4, 102, 19, -1, -1, -1, -1, 380, "Глянцевые легинсы с ремнями", -15, 30], [1, 4, 108, 14, -1, -1, -1, -1, 220, "Фирменная расклешённая Мини-Юбка", 15, 50], [1, 11, 2, 14, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 8, 1, 1, -1, 20, 0, 690, "Кожаная куртка", 10, 35], [1, 11, 14, 14, 14, -1, -1, -1, 210, "Поло", 15, 50], [1, 11, 30, 1, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 35, 10, 1, -1, 20, 0, 690, "Кожаная куртка", 10, 35], [1, 11, 38, 2, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 40, 0, 2, -1, -1, -1, 180, "Патриотичная футболка на плечо", 15, 50], [1, 11, 44, 1, 3, -1, -1, -1, 285, "Новогодний свитер", 10, 40], [1, 11, 45, 2, -1, -1, -1, -1, 285, "Новогодний свитер", 10, 40], [1, 11, 63, 4, 3, -1, 44, 0, 590, "Куртка с капюшоном", -15, 30], [1, 11, 67, -1, 2, -1, -1, -1, 380, "Золотая футболка на плечо", 15, 50], [1, 11, 68, 18, 14, -1, -1, -1, 155, "Заказная футболка", 15, 50], [1, 11, 71, 14, 4, -1, -1, -1, 245, "Задранный свитер", 10, 40], [1, 11, 72, -1, 3, -1, -1, -1, 510, "Бомбер Wolf", -5, 35], [1, 11, 78, 6, 9, -1, -1, -1, 425, "Свитшот", 5, 30], [1, 11, 79, 2, 1, -1, -1, -1, 245, "Задранный свитер", 10, 40], [1, 11, 81, 10, 3, -1, -1, -1, 525, "Фирменный бомбер", -10, 35], [1, 11, 83, 5, 9, -1, -1, -1, 190, "Пижамная рубашка", 10, 35], [1, 11, 84, 1, 14, -1, -1, -1, 225, "Фирменное поло", 15, 50], [1, 11, 98, 3, 3, -1, -1, -1, 415, "Китайская рубашка", -5, 35], [1, 11, 101, 4, 15, -1, -1, -1, 155, "Заказной верх от бикини", 25, 99], [1, 11, 109, 14, 1, -1, -1, -1, 210, "Новогодняя пижамная рубашка", 10, 35], [1, 11, 110, 8, 3, -1, -1, -1, 490, "Мото-Куртка", -15, 35], [1, 11, 117, 1, 11, -1, -1, -1, 260, "Заправленная задранная футболка", 20, 60], [1, 11, 195, 24, 4, -1, -1, -1, 120, "Фирменная рваная футболка", 20, 60], [1, 11, 118, 1, 11, -1, -1, -1, 160, "Задранная футболка", 20, 60], [1, 11, 119, 1, 11, -1, -1, -1, 285, "Рубашка с карманами", 15, 50], [1, 11, 140, 8, 3, -1, -1, -1, 390, "Бомбер", -10, 35], [1, 11, 142, 12, 9, -1, -1, -1, 190, "Пижамная рубашка", 10, 35], [1, 11, 145, 10, 3, -1, -1, -1, 490, "Мото-Куртка", -10, 30], [1, 11, 149, 14, 3, -1, -1, -1, 265, "Мото-Свитер", 10, 35], [1, 11, 155, 1, 4, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 162, 5, 2, -1, -1, -1, 310, "Мото-Жилет со свитером", -5, 35], [1, 11, 164, 14, 4, -1, 52, 0, 590, "Пуховик", -25, 25], [1, 11, 165, 1, 4, -1, 51, 0, 425, "Кожаное худи", -10, 30], [1, 11, 179, 5, 11, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 186, 2, 3, -1, -1, -1, 650, "Заказная закрытая парка", -20, 25], [1, 11, 187, 2, 9, -1, 52, 0, 650, "Заказная открытая парка", -5, 30], [1, 11, 189, 11, 1, -1, 55, 0, 515, "Длинное худи", -15, 35], [1, 11, 190, 9, 3, -1, -1, -1, 650, "Закрытая парка", -20, 25], [1, 11, 191, 9, 9, -1, 52, 0, 650, "Открытая парка", -5, 30], [1, 11, 192, 24, 5, -1, -1, -1, 370, "Заказной свитер", 10, 30], [1, 11, 193, 24, 4, -1, 52, 0, 590, "Заказной пуховик", -25, 25], [1, 11, 194, 10, 4, -1, 52, 0, 790, "Заканое пальто", -15, 25], [1, 11, 196, 1, 3, -1, -1, -1, 620, "Новогодний неоновый свитер", 10, 30], [1, 11, 197, 1, 3, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 198, 14, 9, -1, -1, -1, 620, "Рождественский неоновый свитер", 10, 30], [1, 11, 198, 14, 9, -1, -1, -1, 320, "Рождественский свитер", 10, 30], [1, 11, 200, 6, 9, -1, -1, -1, 590, "Новогодняя неоновая теп. кофта", -5, 25], [1, 11, 201, 6, 9, -1, -1, -1, 290, "Новогодняя теплая кофта", -5, 25], [1, 11, 202, 24, 3, -1, -1, -1, 310, "Заказное худи", 5, 30], [1, 11, 207, 3, 4, -1, -1, -1, 250, "Жилет с капюшоном", 15, 45], [1, 11, 208, 15, 11, -1, -1, -1, 90, "Заправленная майка", 20, 60], [1, 11, 209, 15, 11, -1, -1, -1, 90, "Майка", 20, 60], [1, 11, 227, 13, 3, -1, -1, -1, 435, "Заказная куртка", -25, 25], [1, 11, 147, 10, 3, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 150, 24, 3, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 233, 11, 4, -1, -1, -1, 330, "Фирменный тёплый жилет", 10, 30], [1, 11, 234, 14, 6, -1, -1, -1, 460, "Фирменная тёплая куртка", -20, 30], [1, 11, 239, 10, 3, -1, -1, -1, 425, "Закрытый бомбер", -10, 30], [1, 11, 240, 10, 1, -1, 52, 0, 425, "Открытый бомбер", -5, 35], [1, 11, 246, 10, 14, -1, -1, -1, 250, "Фирменное поло", 15, 50], [1, 11, 249, 4, 14, -1, -1, -1, 270, "Заказное поло", 15, 50], [1, 11, 252, 24, 14, -1, 51, 0, 710, "Модная куртка с карманами", -25, 30], [1, 11, 253, 8, 14, -1, -1, -1, 220, "Новогодний свитер", 10, 40], [1, 11, 255, 24, 11, -1, -1, -1, 320, "Модный жилет с карманами", 15, 35], [1, 11, 259, 24, 3, -1, -1, -1, 880, "Анорак", -25, 30], [1, 6, 1, 14, -1, -1, -1, -1, 220, "Скейтерские кеды", 5, 50], [1, 6, 2, 14, -1, -1, -1, -1, 290, "Угги", -30, 30], [1, 6, 3, 14, -1, -1, -1, -1, 205, "Низкие кеды", -10, 50], [1, 6, 4, 2, -1, -1, -1, -1, 210, "Кросовки ProLaps", -10, 50], [1, 6, 11, 2, -1, -1, -1, -1, 275, "Патрули", -10, 50], [1, 6, 31, -1, -1, -1, -1, -1, 575, "Золотые патрули", -10, 50], [1, 6, 32, 3, -1, -1, -1, -1, 215, "Фирменные кросовки", -10, 50], [1, 6, 33, 6, -1, -1, -1, -1, 255, "Теплые кеды", -20, 50], [1, 6, 47, 8, -1, -1, -1, -1, 225, "Мото-Кросовки", -10, 50], [1, 6, 49, 0, -1, -1, -1, -1, 285, "Кеды", -10, 50], [1, 6, 50, 0, -1, -1, -1, -1, 285, "Кеды", -10, 50], [1, 6, 58, 8, -1, -1, -1, -1, 640, "Неоновые кеды", -10, 50], [1, 6, 73, 24, -1, -1, -1, -1, 415, "Фирменные сапоги", -30, 30], [1, 6, 74, 24, -1, -1, -1, -1, 345, "Фирменные ботинки", -30, 30], [1, 6, 75, 24, -1, -1, -1, -1, 400, "Фирменные высокие кроссовки", -30, 30], [1, 6, 76, 24, -1, -1, -1, -1, 330, "Фирменные кроссовки", -10, 50], [1, 6, 77, 7, -1, -1, -1, -1, 450, "Модные ботинки на каблуке", -30, 30], [1, 6, 81, 24, -1, -1, -1, -1, 440, "Светодиодные кроссовки", -10, 50], [2, 4, 6, 1, -1, -1, -1, -1, 960, "Кожаные брюки", -15, 40], [2, 4, 7, 0, -1, -1, -1, -1, 1090, "Кожаная юбка", 15, 40], [2, 4, 18, 0, -1, -1, -1, -1, 1190, "Офисная юбка", 15, 40], [2, 4, 19, 3, -1, -1, -1, -1, 450, "Кружевные шорты", 25, 99], [2, 4, 20, 1, -1, -1, -1, -1, 750, "Трусы с чулками", 25, 99], [2, 4, 23, 11, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 26, -1, -1, -1, -1, -1, 550, "Леопардовая Мини-Юбка", 15, 60], [2, 4, 34, -1, -1, -1, -1, -1, 810, "Брюки на ремне", -15, 40], [2, 4, 36, 2, -1, -1, -1, -1, 1190, "Офисная юбка", 15, 40], [2, 4, 37, 5, -1, -1, -1, -1, 545, "Прямые брюки", -15, 40], [2, 4, 41, 2, -1, -1, -1, -1, 585, "Свободные штаны на ремне", -15, 40], [2, 4, 50, 2, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 52, 2, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 53, -1, -1, -1, -1, -1, 1160, "Эксклюзивные брюки", -15, 40], [2, 4, 62, 10, -1, -1, -1, -1, 450, "Кружевные шорты", 25, 99], [2, 4, 63, 10, -1, -1, -1, -1, 750, "Трусы с чулками", 25, 99], [2, 4, 64, 2, -1, -1, -1, -1, 725, "Брюки с карманами", -15, 40], [2, 11, 6, 1, 1, -1, 20, 0, 1290, "Жакет", 5, 35], [2, 11, 7, 1, 6, -1, 20, 0, 1890, "Открытый пиджак", 5, 35], [2, 11, 9, 13, -1, -1, -1, -1, 1190, "Задранная рубашка", 15, 45], [2, 11, 244, 24, 9, -1, -1, -1, 1490, "Заказная задранная рубашка", 15, 45], [2, 11, 13, 14, 4, -1, -1, -1, 650, "Корсет", 20, 60], [2, 11, 20, 0, 1, -1, 18, 0, 1390, "Новогодний жакет", 5, 35], [2, 11, 21, 4, 4, -1, -1, -1, 2490, "Винтажное платье", 20, 50], [2, 11, 22, 3, 4, -1, -1, -1, 790, "Кружевной корсет", 20, 60], [2, 11, 24, 10, 1, -1, 20, 0, 1290, "Жакет", 5, 35], [2, 11, 25, 9, 6, -1, 20, 0, 1890, "Открытый пиджак", 5, 35], [2, 11, 26, 11, 12, -1, -1, -1, 490, "Плиссированная майка", 20, 60], [2, 11, 28, 14, 0, -1, 24, 3, 890, "Жилетка с рубашкой", 15, 45], [2, 11, 39, -1, 5, -1, -1, -1, 1790, "Патриотичный фрак", 5, 35], [2, 11, 51, -1, 3, -1, 41, 1, 1690, "Фрак", 5, 35], [2, 11, 52, 2, 3, -1, 41, 1, 860, "Открытый мятый пиджак", 5, 35], [2, 11, 53, 2, 1, -1, 41, 1, 860, "Закрытый мятый пиджак", 5, 35], [2, 11, 57, 7, 3, -1, 41, 1, 2690, "Открытый пиджак с жилетом", -5, 35], [2, 11, 58, 7, 1, -1, 41, 1, 2690, "Закрытый пиджак с жилетом", -5, 35], [2, 11, 64, 3, 3, -1, 67, 2, 4250, "Пальто", -25, 30], [2, 11, 65, 10, 6, -1, 53, 0, 7990, "Куртка с мехом", -30, 25], [2, 11, 248, 4, 6, -1, 53, 0, 7990, "Куртка с мехом", -30, 25], [0, 11, 135, 1, 3, -1, -1, -1, 4500, "Кожаная куртка", -20, 30], [0, 11, 133, 5, 3, -1, 67, 2, 3100, "Ветровка", -15, 30], [0, 11, 139, 1, 3, -1, 67, 2, 250, "Пальто", -25, 30], [2, 11, 66, 2, 1, -1, 60, 0, 3490, "Кожаный пиджак на поясе", -5, 30], [2, 11, 69, -1, 1, -1, 53, 0, 2780, "Заказная кожаная куртка", -15, 30], [2, 11, 70, 3, -1, -1, 53, 0, 3090, "Пальто на поясе", -25, 30], [2, 11, 90, 3, 6, -1, 0, 1, 2690, "Заказной открытый пиджак", 5, 35], [2, 11, 91, 3, 6, -1, 1, 1, 2690, "Заказной закрытый пиджак", 5, 35], [2, 11, 92, 2, 5, -1, 0, 1, 3190, "Открытый глянцевый пидждак", 5, 35], [2, 11, 93, 2, 5, -1, 1, 1, 3190, "Закрытый глянцевый пиджак", 5, 35], [2, 11, 94, -1, 5, -1, 0, 1, 5290, "Элитный закрытый пиджак", 5, 35], [2, 11, 95, -1, 5, -1, 1, 1, 5290, "Элитный открытый пиджак", 5, 35], [2, 11, 99, 9, 4, -1, 60, 0, 3590, "Раритетный пиджак", -5, 35], [2, 11, 143, 12, 4, -1, 60, 0, 3590, "Раритетный пиджак", -5, 35], [2, 11, 111, 10, 4, -1, -1, -1, 790, "Заказной корсет", 20, 60], [2, 11, 112, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #1", 20, 50], [2, 11, 113, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #2", 20, 50], [2, 11, 114, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #3", 20, 50], [2, 11, 115, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #4", 20, 50], [2, 11, 116, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #5", 20, 50], [2, 11, 137, 13, 3, -1, 66, 4, 2890, "Пиджак на пуговицах", -5, 35], [2, 11, 185, 4, 6, -1, 21, 0, 2250, "Праздничный пиджак", 5, 35], [2, 6, 0, 2, -1, -1, -1, -1, 880, "Высокие туфли", 10, 50], [2, 6, 6, 2, -1, -1, -1, -1, 960, "Острые высокие туфли", 10, 50], [2, 6, 7, 14, -1, -1, -1, -1, 1150, "Ботинки на каблуке", -30, 30], [2, 6, 8, 14, -1, -1, -1, -1, 1020, "Закрытые высокие туфли", -10, 30], [2, 6, 9, 2, -1, -1, -1, -1, 1420, "Сапоги", -25, 30], [2, 6, 13, 14, -1, -1, -1, -1, 320, "Балетки", 10, 50], [2, 6, 14, 14, -1, -1, -1, -1, 1290, "Открытые высокие туфли", 10, 50], [2, 6, 15, 14, -1, -1, -1, -1, 590, "Заказные сандали", 20, 60], [2, 6, 18, 1, -1, -1, -1, -1, 975, "Заказные туфли с подложкой", 5, 50], [2, 6, 19, 10, -1, -1, -1, -1, 880, "Высокие туфли", 10, 50], [2, 6, 20, 10, -1, -1, -1, -1, 960, "Острые выоские туфли", 10, 50], [2, 6, 21, 8, -1, -1, -1, -1, 1420, "Сапоги", -25, 30], [2, 6, 22, 14, -1, -1, -1, -1, 1320, "Закрытые выоские туфли", -25, 30], [2, 6, 23, 1, -1, -1, -1, -1, 1100, "Фирменные высокие туфли", 10, 50], [2, 6, 29, 1, -1, -1, -1, -1, 780, "Туфли", -15, 50], [2, 6, 37, 2, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 50], [2, 6, 38, 0, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 39, 0, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 41, 10, -1, -1, -1, -1, 975, "Заказные туфли с подложкой", 5, 50], [2, 6, 42, 10, -1, -1, -1, -1, 950, "Заказные высокие туфли", 10, 50], [2, 6, 43, 6, -1, -1, -1, -1, 780, "Туфли на толстом каблуке", -20, 30], [2, 6, 44, 6, -1, -1, -1, -1, 770, "Туфли на шнурках", -15, 30], [2, 6, 45, 9, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 46, 9, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 51, 4, -1, -1, -1, -1, 1295, "Кожаные сапоги", -25, 25], [2, 6, 52, 4, -1, -1, -1, -1, 1075, "Кожаные ботинки", -20, 30], [2, 6, 53, 0, -1, -1, -1, -1, 620, "Зимние ботикнки", -30, 20], [2, 6, 56, 1, -1, -1, -1, -1, 950, "Сапоги на застёжках", -25, 25], [2, 6, 55, 1, -1, -1, -1, -1, 650, "Ботинки на застёжках", -20, 30], [2, 6, 92, 10, -1, -1, -1, -1, 820, "Меховые сапоги", -30, 20], [2, 7, 13, 4, -1, -1, -1, -1, 260, "Дамский галстук", -99, 99], [2, 7, 19, -1, -1, -1, -1, -1, 170, "Свободная бабочка", -99, 99], [2, 7, 20, 14, -1, -1, -1, -1, 195, "Свободный галстук", -99, 99], [2, 7, 21, 1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 22, 14, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 23, 1, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [2, 7, 26, 14, -1, -1, -1, -1, 195, "Свободный галстук (под)", -99, 99], [2, 7, 27, 1, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 28, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [3, 4, 30, 3, -1, -1, -1, -1, 285, "Камуфляжные бриджи", 5, 35], [3, 4, 89, 22, -1, -1, -1, -1, 320, "Камуфляжные карго-штаны", -30, 30], [3, 4, 91, 22, -1, -1, -1, -1, 115, "Камуфляжные карго-шорты", 15, 50], [3, 4, 109, 16, -1, -1, -1, -1, 150, "Камуфляжные штаны", -25, 25], [3, 4, 110, 16, -1, -1, -1, -1, 110, "Камуфляжные шорты", -25, 25], [3, 11, 43, 3, 3, -1, -1, -1, 390, "Свитер с накладками", 5, 30], [3, 11, 210, 22, 4, -1, -1, -1, 250, "Камуфляжный жилет с капюшоном", 15, 35], [3, 11, 212, 22, 14, -1, -1, -1, 135, "Камуфляжная футболка", 15, 50], [3, 11, 213, 22, 3, -1, -1, -1, 465, "Камуфялжная заказная куртка", -20, 30], [3, 11, 214, 22, 3, -1, -1, -1, 675, "Камуфляжная закрытая парка", -25, 25], [3, 11, 216, 22, 9, -1, 52, 0, 675, "Камуфляжная открытая парка", -5, 30], [3, 11, 217, 22, 4, -1, -1, -1, 325, "Камуфляжный Мото-Жилет", 10, 35], [3, 11, 218, 22, 2, -1, -1, -1, 325, "Камуфляжная Мото-Кофта", -10, 30], [3, 11, 219, 22, 2, -1, 26, 0, 125, "Камуфляжная джинсовая куртка", -10, 30], [3, 11, 220, 22, 4, -1, 60, 0, 125, "Камуфляжный джинсовый жилет", 15, 40], [3, 11, 221, 22, 4, -1, -1, -1, 35, "Камуфляжная рваная майка", 20, 60], [3, 11, 222, 22, 4, -1, -1, -1, 40, "Камуфляжная рваная футболка", 20, 60], [3, 11, 223, 22, 4, -1, -1, -1, 30, "Камуфляжный рваная топик", 20, 60], [3, 11, 224, 22, 14, -1, -1, -1, 135, "Камуфляжная заправленная футболка", 16, 50], [3, 11, 225, 22, 15, -1, -1, -1, 100, "Камуфляжная майка", 20, 60], [3, 11, 226, 22, 15, -1, -1, -1, 100, "Камуфляжная заправленная майка", 20, 60], [3, 11, 229, 24, 15, -1, -1, -1, 145, "Камуфляжная рубашка без рук", 20, 60], [3, 11, 230, 24, 3, -1, -1, -1, 225, "Камуфляжная кофта с карманами", -5, 30], [3, 11, 231, 24, 3, -1, -1, -1, 290, "Камуфляжная куртка с карманами", -20, 25], [3, 11, 232, 24, 2, -1, -1, -1, 290, "Камуфляжная задранная рубашка", 10, 30], [3, 6, 54, 4, -1, -1, -1, -1, 190, "Охотничьи сапоги", -30, 25], [3, 6, 55, 4, -1, -1, -1, -1, 170, "Охотничьи ботинки", -25, 30], [3, 6, 62, 24, -1, -1, -1, -1, 115, "Камуфляжные кросовки", -10, 50], [3, 6, 63, 6, -1, -1, -1, -1, 210, "Камуфляжные сапоги", -30, 25], [3, 6, 64, 6, -1, -1, -1, -1, 170, "Камуфляжные ботинки", -25, 30], [3, 6, 65, 6, -1, -1, -1, -1, 195, "Камуфляжные высокие ботинки", -30, 25], [3, 6, 66, 6, -1, -1, -1, -1, 155, "Камуфляжные низкие кросовки", -10, 50], [4, 7, 6, 4, -1, -1, -1, -1, 2550, "Ожерелье с камнем", -99, 99], [4, 7, 7, 0, -1, -1, -1, -1, 450, "Ожерелье с сердцем", -99, 99], [4, 7, 11, 2, -1, -1, -1, -1, 450, "Ожерелье с сердцем", -99, 99], [4, 7, 12, 1, -1, -1, -1, -1, 2100, "Жемчужные бусы", -99, 99], [4, 7, 29, 0, -1, -1, -1, -1, 1200, "Цепь SN", -99, 99], [4, 7, 30, 0, -1, -1, -1, -1, 1350, "Цепь Череп", -99, 99], [4, 7, 31, -1, -1, -1, -1, -1, 1300, "Цепь Маска", -99, 99], [4, 7, 32, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE", -99, 99], [4, 7, 33, 0, -1, -1, -1, -1, 1550, "Цепь LC", -99, 99], [4, 7, 34, 0, -1, -1, -1, -1, 1500, "Цепь Dix", -99, 99], [4, 7, 35, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen", -99, 99], [4, 7, 36, 0, -1, -1, -1, -1, 1200, "Цепь SN (над)", -99, 99], [4, 7, 37, 0, -1, -1, -1, -1, 1350, "Цепь Череп (над)", -99, 99], [4, 7, 38, -1, -1, -1, -1, -1, 1300, "Цепь Маска (над)", -99, 99], [4, 7, 39, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE (над)", -99, 99], [4, 7, 40, 0, -1, -1, -1, -1, 1550, "Цепь LC (над)", -99, 99], [4, 7, 41, 0, -1, -1, -1, -1, 1500, "Цепь Dix (над)", -99, 99], [4, 7, 42, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen (над)", -99, 99], [4, 7, 53, 0, -1, -1, -1, -1, 450, "Тонкая цепь", -99, 99], [4, 7, 54, 0, -1, -1, -1, -1, 475, "Толстая цепь", -99, 99], [4, 7, 55, 0, -1, -1, -1, -1, 500, "Плотная цепь", -99, 99], [4, 7, 56, 0, -1, -1, -1, -1, 580, "Ребристая цепь", -99, 99], [4, 7, 57, 0, -1, -1, -1, -1, 540, "Наружная цепь", -99, 99], [4, 7, 58, 0, -1, -1, -1, -1, 560, "Клёсткая цепь", -99, 99], [4, 7, 59, 0, -1, -1, -1, -1, 890, "Винтажная цепь", -99, 99], [4, 7, 60, 0, -1, -1, -1, -1, 320, "Лёгкая цепь", -99, 99], [4, 7, 61, 0, -1, -1, -1, -1, 350, "Сплошная цепь", -99, 99], [4, 7, 62, 0, -1, -1, -1, -1, 345, "Тряпичная цепь", -99, 99], [4, 7, 64, 0, -1, -1, -1, -1, 450, "Тонкая цепь (над)", -99, 99], [4, 7, 65, 0, -1, -1, -1, -1, 475, "Толстая цепь (над)", -99, 99], [4, 7, 66, 0, -1, -1, -1, -1, 500, "Плотная цепь (над)", -99, 99], [4, 7, 67, 0, -1, -1, -1, -1, 580, "Ребристая цепь (над)", -99, 99], [4, 7, 68, 0, -1, -1, -1, -1, 540, "Наружная цепь (над)", -99, 99], [4, 7, 69, 0, -1, -1, -1, -1, 560, "Клёсткая цепь (над)", -99, 99], [4, 7, 70, 0, -1, -1, -1, -1, 890, "Винтажная цепь (над)", -99, 99], [4, 7, 71, 0, -1, -1, -1, -1, 320, "Лёгкая цепь (над)", -99, 99], [4, 7, 72, 0, -1, -1, -1, -1, 350, "Сплошная цепь (над)", -99, 99], [4, 7, 73, 0, -1, -1, -1, -1, 345, "Тряпичная цепь (над)", -99, 99], [4, 7, 81, 0, -1, -1, -1, -1, 1100, "Цепь M", -99, 99], [4, 7, 82, 0, -1, -1, -1, -1, 1100, "Цепь M (над)", -99, 99], [4, 7, 89, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M", -99, 99], [4, 7, 90, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M (над)", -99, 99], [4, 7, 91, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S", -99, 99], [4, 7, 92, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S (над)", -99, 99], [5, 4, 45, 2, -1, -1, -1, -1, 75, "Свободные штаны с карманами", -20, 30], [5, 4, 3, 14, -1, -1, -1, -1, 80, "Мятые штаны", -20, 30], [5, 4, 58, 2, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [5, 4, 66, 9, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [5, 4, 71, 16, -1, -1, -1, -1, 115, "Шаровары", -25, 30], [5, 4, 80, 6, -1, -1, -1, -1, 90, "Спортивные штаны", -10, 35], [5, 4, 84, 8, -1, -1, -1, -1, 105, "Низкие джинсы", -10, 40], [5, 4, 101, 24, -1, -1, -1, -1, 90, "Штаны с карманами", -25, 30], [5, 4, 82, 6, -1, -1, -1, -1, 65, "Спортивные бриджи", 10, 50], [5, 4, 2, 1, -1, -1, -1, -1, 55, "Спортивные бриджи", 15, 50], [5, 4, 10, 1, -1, -1, -1, -1, 25, "Спортивные шорты", 15, 60], [5, 4, 14, 0, -1, -1, -1, -1, 35, "Шорты", 20, 60], [5, 4, 16, 10, -1, -1, -1, -1, 35, "Шорты", 20, 60], [5, 4, 78, 2, -1, -1, -1, -1, 45, "Шорты с чулками", 15, 45], [5, 4, 17, 10, -1, -1, -1, -1, 15, "Низ от бикини", 25, 99], [5, 4, 21, -1, -1, -1, -1, -1, 5, "Низ от Мини-Бикини", 25, 99], [5, 4, 57, 6, -1, -1, -1, -1, 60, "Низ от халата", 10, 50], [5, 4, 107, 10, -1, -1, -1, -1, 35, "Заказные спортивные шорты", 15, 60], [5, 11, 0, 14, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [5, 11, 1, 1, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [5, 11, 3, 3, 3, -1, -1, -1, 140, "Толстовка", 5, 30], [5, 11, 10, 1, 0, -1, 21, 0, 135, "Спортивная ветровка", 5, 30], [5, 11, 11, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 16, 5, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 18, 10, 15, -1, -1, -1, 50, "Верх бикини", 25, 99], [5, 11, 19, 2, 12, -1, -1, -1, 75, "Новогодняя футболк с вырезом", 15, 50], [5, 11, 23, 1, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [5, 11, 31, 5, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [5, 11, 32, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 33, 7, 4, -1, -1, -1, 60, "Кроп-Майка", 25, 60], [5, 11, 36, 3, 4, -1, -1, -1, 75, "Фирменный верх купальника", 20, 60], [5, 11, 37, 4, 4, -1, -1, -1, 180, "Сарафан", 15, 45], [5, 11, 49, 0, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 54, 2, 3, -1, -1, -1, 175, "Старая Мото-Куртка", -15, 30], [5, 11, 73, 1, 14, -1, -1, -1, 55, "Футболка", 15, 50], [5, 11, 74, 1, 4, -1, -1, -1, 30, "Майка", 20, 60], [5, 11, 75, 2, 9, -1, -1, -1, 85, "Задраный джемпер", 10, 40], [5, 11, 76, 3, 9, -1, -1, -1, 90, "Бейбсбольная рубашка", 15, 50], [5, 11, 105, 6, 4, -1, -1, -1, 90, "Верх от халата", 15, 50], [5, 11, 106, 2, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [5, 11, 125, 8, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 126, 1, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 132, 5, 14, -1, -1, -1, 80, "Рубашка с рисунком", 15, 45], [5, 11, 138, 9, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [5, 11, 141, 4, 14, -1, -1, -1, 55, "Футболка", 15, 50], [5, 11, 148, 4, 7, -1, 51, 0, 85, "Потёртая кожаная куртка", -10, 30], [5, 11, 154, 2, 4, -1, 60, 0, 80, "Кожаный жилет", 15, 40], [5, 11, 156, 0, 4, -1, 60, 0, 80, "Байкерский жилет", 15, 40], [5, 11, 157, 0, 4, -1, 60, 0, 80, "Байкерский жилет", 15, 40], [5, 11, 158, 2, 5, -1, -1, -1, 110, "Байкерская куртка", -15, 30], [5, 11, 159, 2, 4, -1, -1, -1, 80, "Байкерский жилет", 15, 35], [5, 11, 160, -1, 2, -1, 26, 0, 95, "Старая байкерская куртка", -15, 35], [5, 11, 161, 0, 2, -1, -1, -1, 35, "Бейсбольная рубашка", 15, 50], [5, 11, 163, 4, 2, -1, 26, 0, 145, "Кожаная куртка", -15, 35], [5, 11, 166, 2, 2, -1, 26, 0, 105, "Джинсовая куртка", -10, 30], [5, 11, 167, 2, 4, -1, 60, 0, 75, "Джинсовый жилет", 15, 40], [5, 11, 168, 4, 4, -1, -1, -1, 25, "Рваная майка", 20, 60], [5, 11, 169, 4, 4, -1, -1, -1, 30, "Рваная футболка", 20, 60], [5, 11, 170, 4, 4, -1, -1, -1, 20, "Рваный топик", 20, 60], [5, 11, 171, 6, 4, -1, -1, -1, 55, "Завязанная рубашка", 15, 50], [5, 11, 172, 0, 3, -1, -1, -1, 85, "Худи", 5, 30], [5, 11, 173, -1, 4, -1, -1, -1, 65, "Кожаный Кроп-Жилет", 20, 55], [5, 11, 174, 2, 2, -1, 26, 0, 135, "Байкерская джинсовая куртка", -10, 30], [5, 11, 175, 2, 4, -1, 60, 0, 105, "Байкерский джинсовый жилет", 15, 40], [5, 11, 176, 2, 5, -1, -1, -1, 135, "Байкерская кожаная куртка", -15, 30], [5, 11, 177, 2, 4, -1, -1, -1, 115, "Байкерский кожаный жилет", 15, 35], [5, 11, 242, 8, 6, -1, 51, 0, 180, "Закрытая охотничья куртка", -25, 25], [5, 11, 242, 8, 6, -1, 51, 0, 180, "Открытая охотничья куртка", -5, 30], [5, 11, 247, 24, 15, -1, -1, -1, 40, "Спортивная майка", 20, 60], [5, 11, 266, 22, 7, -1, -1, -1, 120, "Фирменная спортивная куртка", -5, 30], [5, 11, 286, 20, 14, -1, -1, -1, 90, "Коллекционная классическая футболка", 15, 50], [5, 6, 5, 0, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 10, 2, -1, -1, -1, -1, 55, "Кросовки", -10, 50], [5, 6, 16, 10, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 17, -1, -1, -1, -1, -1, 40, "Ботинки Эльфа", -5, 50], [5, 6, 68, 0, -1, -1, -1, -1, 110, "Винтажные ботинки", -30, 30], [5, 6, 69, 0, -1, -1, -1, -1, 60, "Винтажные кросовки", -10, 50], [5, 6, 78, 0, -1, -1, -1, -1, 90, "ProLaps фирменный кеды", -10, 50], [5, 6, 79, 24, -1, -1, -1, -1, 150, "Беговые высокие кроссовки", -10, 50], [5, 6, 80, 24, -1, -1, -1, -1, 150, "Беговые низкие кроссовки", -10, 50], [5, 7, 9, -1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 15, 3, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 17, 2, -1, -1, -1, -1, 55, "Новогодний шарф", -99, 99], [5, 7, 18, 2, -1, -1, -1, -1, 55, "Новогодний шарф (над)", -99, 99], [5, 7, 83, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 84, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [5, 7, 93, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [9999, 11, 347, 7, 14, -1, -1, -1, 60, "Майки", 10, 40], [9999, 11, 348, 2, 12, -1, -1, -1, 60, "Майки2", 10, 40], [9999, 11, 349, 7, 4, -1, -1, -1, 60, "Майки3", 10, 40], [9999, 11, 350, 1, 15, -1, -1, -1, 60, "Майки4", 10, 40]];
exports.clothFutil = clothFutil;
const clothMutil = [[0, 4, 0, 14, -1, -1, -1, -1, 80, "Классические джинсы", -20, 35], [0, 4, 43, 0, -1, -1, -1, -1, 75, "Рабочие джинсы", -25, 30], [0, 4, 63, -1, -1, -1, -1, -1, 60, "Старые джинсы", -20, 35], [0, 4, 1, 14, -1, -1, -1, -1, 95, "Широкие джинсы", -20, 35], [0, 4, 3, 14, -1, -1, -1, -1, 35, "Домашние штаны", -5, 35], [0, 4, 29, 1, -1, -1, -1, -1, 80, "Патриот-Карго штаны", -25, 25], [0, 4, 47, 0, -1, -1, -1, -1, 20, "Рабочие-Карго штаны", -25, 25], [0, 4, 8, -1, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -30, 20], [0, 4, 9, 14, -1, -1, -1, -1, 80, "Рабочие-Карго штаны", -25, 25], [0, 4, 7, 14, -1, -1, -1, -1, 70, "Рабочие штаны", -25, 25], [0, 4, 27, 10, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -20, 30], [0, 4, 5, 14, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 55, 2, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 64, 9, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 98, 24, -1, -1, -1, -1, 100, "Фирменные-Карго штаны", -25, 25], [0, 4, 15, 14, -1, -1, -1, -1, 55, "Карго шорты", 20, 50], [0, 4, 100, 12, -1, -1, -1, -1, 125, "Заказные шаровары", -25, 30], [0, 4, 14, 0, -1, -1, -1, -1, 25, "Спортивные шорты", 25, 60], [0, 4, 18, 10, -1, -1, -1, -1, 20, "Спортивные шорты", 25, 60], [0, 4, 42, 6, -1, -1, -1, -1, 45, "Повседневные шорты", 15, 55], [0, 4, 62, 2, -1, -1, -1, -1, 30, "Рабочие шорты", 15, 55], [0, 4, 21, -1, -1, -1, -1, -1, 5, "Трусы", 25, 99], [0, 4, 61, 12, -1, -1, -1, -1, 5, "Трусы", 25, 99], [0, 11, 123, 1, 11, -1, -1, -1, 50, "Бейсбольное поло", 15, 50], [0, 11, 83, 3, 11, -1, -1, -1, 45, "Бейсбольная рубашка", 15, 50], [0, 11, 84, 4, 4, -1, -1, -1, 80, "Бейсбольный свитер", -5, 35], [0, 11, 81, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [0, 11, 128, 8, 0, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 164, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [0, 11, 111, 4, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [0, 11, 139, 6, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [0, 11, 97, 0, -1, -1, -1, -1, 5, "Грязная футболка", 15, 50], [0, 11, 17, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 36, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 237, 24, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 1, 0, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 16, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 22, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 33, -1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 34, 0, 0, -1, -1, -1, 10, "Классическая футболка", 15, 50], [0, 11, 44, 2, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 146, 7, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 14, 14, 1, -1, -1, -1, 30, "Кофта под рубашкой", 5, 35], [0, 11, 89, 2, 6, -1, -1, -1, 30, "Свитер", 5, 35], [0, 11, 238, 4, 5, -1, -1, -1, 15, "Старая майка", 20, 60], [0, 11, 169, 2, 4, -1, 0, 1, 105, "Джинсовая куртка", -10, 30], [0, 11, 170, 2, 5, -1, 0, 1, 75, "Джинсовый жилет", 15, 35], [0, 11, 87, 10, 4, -1, -1, -1, 130, "Закрытый бейсбольный бомбер", -10, 30], [0, 11, 88, 10, 4, -1, 0, 1, 130, "Открытый бейсбольный бомбер", 5, 35], [0, 11, 125, -1, 4, -1, -1, -1, 80, "Старая бейсбольная куртка", -20, 25], [0, 11, 126, 13, 4, -1, -1, -1, 45, "Закрытая винтажная рубашка", 10, 30], [0, 11, 127, 13, 4, -1, 0, 1, 45, "Открытая винтажная рубашка", 15, 35], [0, 11, 6, 0, 4, -1, 2, 1, 110, "Кожанная куртка", -10, 30], [0, 11, 37, 1, 4, -1, 2, 1, 30, "Кожанная куртка", -10, 30], [0, 11, 166, 4, 4, -1, 0, 1, 145, "Кожаная куртка", -10, 30], [0, 11, 157, 2, 15, -1, 0, 1, 80, "Кожаный жилет", 15, 35], [0, 11, 232, 8, 4, -1, 0, 1, 180, "Закрытая охотничья куртка", -15, 30], [0, 11, 233, 8, 4, -1, 0, 1, 180, "Открытая охотничья куртка", -5, 30], [0, 11, 3, 14, 1, -1, 38, 0, 80, "Открытая спортивная куртка", 5, 30], [0, 11, 141, 9, 6, -1, -1, -1, 80, "Спортивная куртка", -10, 30], [0, 11, 113, 2, 6, -1, -1, -1, 30, "Старая спортивная куртка", -10, 30], [0, 11, 7, 14, 4, -1, 0, 1, 90, "Спортивный толстовка", 5, 30], [0, 11, 86, 3, 4, -1, -1, -1, 30, "Спортивная толстовка", 5, 30], [0, 11, 249, 0, 6, -1, -1, -1, 70, "Старая бейсбольная куртка", 5, 30], [0, 11, 110, -1, 4, -1, -1, -1, 220, "Старая кожаная куртка", -20, 25], [0, 11, 138, 1, 4, -1, -1, -1, 180, "Старая кожаная куртка", -20, 25], [0, 11, 151, 4, 4, -1, 0, 1, 95, "Старая потёртая куртка", -10, 30], [0, 11, 156, 4, 4, -1, 0, 1, 95, "Старая потёртая куртка", -10, 30], [0, 11, 116, 1, 6, -1, 5, 1, 110, "Старая куртка санты", -5, 30], [0, 11, 115, -1, 4, -1, 75, 2, 155, "Старое пальто", -25, 25], [0, 11, 121, 10, 4, -1, -1, -1, 95, "Старая толстовка", 5, 30], [0, 11, 171, 0, 4, -1, -1, -1, 85, "Толстовка", 5, 30], [0, 6, 5, 2, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 16, 10, -1, -1, -1, -1, 10, "Модные сланцы", 25, 99], [0, 6, 6, 0, -1, -1, -1, -1, 5, "Тапочки с носками", 20, 99], [0, 6, 8, 14, -1, -1, -1, -1, 50, "Беговые кеды с носками", -10, 50], [0, 6, 46, 8, -1, -1, -1, -1, 60, "Старые спортивные кеды", -10, 50], [0, 6, 23, 14, -1, -1, -1, -1, 40, "Классические кеды", -10, 50], [0, 6, 64, 12, -1, -1, -1, -1, 80, "Старые фирменные кеды", -10, 50], [0, 6, 7, 14, -1, -1, -1, -1, 30, "Старые кросовки с носками", -10, 50], [0, 6, 9, 14, -1, -1, -1, -1, 65, "Кросовки с носками", -10, 50], [0, 6, 17, -1, -1, -1, -1, -1, 45, "Ботинки Эльфа", -5, 50], [0, 6, 35, 0, -1, -1, -1, -1, 50, "Высокие ботинки", -30, 30], [0, 6, 79, 0, -1, -1, -1, -1, 90, "Покрашенные высокие ботинки", -30, 30], [0, 6, 80, 0, -1, -1, -1, -1, 65, "Покрашенные низкие ботинки", -30, 30], [0, 6, 81, 1, -1, -1, -1, -1, 95, "Винтажные высокие ботинки", -30, 30], [0, 6, 82, 1, -1, -1, -1, -1, 70, "Винтажные низкие ботинки", -30, 30], [0, 7, 30, -1, -1, -1, -1, -1, 35, "Шарф", -99, 99], [0, 7, 31, -1, -1, -1, -1, -1, 35, "Шарф (над)", -99, 99], [0, 7, 112, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 113, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [0, 7, 123, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [1, 4, 4, 1, -1, -1, -1, -1, 390, "Зауженные джинсы", -15, 40], [1, 4, 26, 10, -1, -1, -1, -1, 390, "Зауженные джинсы", -15, 40], [1, 4, 82, 8, -1, -1, -1, -1, 460, "Фирменные зауженные джинсы", -10, 40], [1, 4, 83, 2, -1, -1, -1, -1, 20, "Кожанные зауженные джинсы", -20, 40], [1, 4, 75, 6, -1, -1, -1, -1, 290, "Фирменные джинсы", -20, 35], [1, 4, 76, 6, -1, -1, -1, -1, 310, "Фирменные рваные джинсы", -5, 35], [1, 4, 105, 10, -1, -1, -1, -1, 390, "Джинсы на прошиве", -15, 35], [1, 4, 32, 2, -1, -1, -1, -1, 225, "Новогодние легенсы", -1, 40], [1, 4, 45, 5, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 58, 14, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 65, 12, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 69, 16, -1, -1, -1, -1, 230, "Фирменные-Карго штаны", -20, 30], [1, 4, 71, 4, -1, -1, -1, -1, 370, "Кожанные штаны", -20, 30], [1, 4, 73, 4, -1, -1, -1, -1, 370, "Кожанные штаны", -20, 30], [1, 4, 6, 1, -1, -1, -1, -1, 145, "Пляжные шорты", 15, 60], [1, 4, 16, 10, -1, -1, -1, -1, 145, "Пляжные шорты", 15, 60], [1, 4, 54, 5, -1, -1, -1, -1, 245, "Заказные пляжные шорты", 15, 60], [1, 4, 12, -1, -1, -1, -1, -1, 210, "Стильные шорты", 15, 60], [1, 4, 17, 9, -1, -1, -1, -1, 210, "Стильные шорты", 15, 60], [1, 4, 78, 6, -1, -1, -1, -1, 380, "Фирменные спортивные штаны", -10, 35], [1, 4, 79, 1, -1, -1, -1, -1, 410, "Кожанные спортивные штаны", -10, 35], [1, 4, 80, 6, -1, -1, -1, -1, 250, "Фирменные спортивные шорты", 10, 50], [1, 4, 81, 1, -1, -1, -1, -1, 280, "Кожанные спортивные шорты", 10, 50], [1, 11, 82, 14, 11, -1, -1, -1, 220, "Рубашка поло", 15, 50], [1, 11, 93, 1, 0, -1, -1, -1, 250, "Спортивное поло", 15, 50], [1, 11, 94, 1, 0, -1, -1, -1, 250, "Заправленное спортивное поло", 15, 50], [1, 11, 18, 2, 0, -1, -1, -1, 140, "Новогодняя футболка", 15, 50], [1, 11, 8, -1, 8, -1, -1, -1, 270, "Задранный джемпер", 10, 40], [1, 11, 38, 3, 8, -1, -1, -1, 270, "Задранный джемпер", 10, 40], [1, 11, 50, 3, 4, -1, -1, -1, 390, "Свитер с накладками", -5, 30], [1, 11, 51, 1, 4, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 52, 2, 4, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 53, 2, 4, -1, -1, -1, 380, "Заправленный свитер", -5, 30], [1, 11, 71, -1, 0, -1, -1, -1, 620, "Заказная футболка", 15, 50], [1, 11, 73, 17, 0, -1, -1, -1, 320, "Заказная футболка", 15, 50], [1, 11, 78, 14, 6, -1, -1, -1, 390, "Заказной свитер", 10, 30], [1, 11, 80, 1, 11, -1, -1, -1, 20, "Стильная футболка", 15, 50], [1, 11, 92, 5, 6, -1, -1, -1, 150, "Пижамная рубашка", 10, 35], [1, 11, 144, 12, 6, -1, -1, -1, 150, "Пижамная рубашка", 10, 35], [1, 11, 117, 14, 6, -1, -1, -1, 150, "Новогодняя пижамная рубашка", 10, 35], [1, 11, 105, -1, 5, -1, -1, -1, 85, "Гавайская рубашка", 15, 40], [1, 11, 107, 3, 4, -1, -1, -1, 20, "Китайская рубашка", -5, 35], [1, 11, 61, 2, 4, -1, -1, -1, 490, "Мото-Куртка", -15, 30], [1, 11, 62, -1, 4, -1, 0, 1, 490, "Открытая Мото-Куртка", -1, 30], [1, 11, 64, -1, 4, -1, 2, 1, 490, "Мото-Куртка", -5, 30], [1, 11, 118, 8, 4, -1, 0, 1, 490, "Мото-Куртка", -5, 30], [1, 11, 155, 2, 14, -1, -1, -1, 270, "Шоу-Куртка", 10, 35], [1, 11, 148, 10, 4, -1, -1, -1, 245, "Мото-Кофта", -5, 30], [1, 11, 152, 14, 4, -1, -1, -1, 265, "Мото-Свитер", 10, 35], [1, 11, 147, 8, 4, -1, -1, -1, 295, "Мото-Жилет", -5, 30], [1, 11, 158, 1, 15, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 165, 5, 6, -1, -1, -1, 310, "Мото-Жилет со свитером", -5, 30], [1, 11, 177, 5, 15, -1, -1, -1, 310, "Мото-Жилет", 15, 30], [1, 11, 69, 4, 4, -1, 2, 1, 420, "Куртка с капюшоном", -10, 30], [1, 11, 74, 9, 4, -1, 0, 1, 565, "Открытый заказной бомбер", -1, 35], [1, 11, 75, 9, 4, -1, -1, -1, 565, "Закрытый заказной бомбер", -5, 35], [1, 11, 79, -1, 4, -1, -1, -1, 510, "Бомбер Wolf", -5, 35], [1, 11, 106, -1, 4, -1, 0, 1, 20, "Куртка на пуговицах", -20, 25], [1, 11, 134, 1, 4, -1, -1, -1, 310, "Фирменная толстовка", 5, 35], [1, 11, 135, 5, 5, -1, -1, -1, 85, "Гавайская рубашка", 15, 45], [1, 11, 143, 8, 4, -1, -1, -1, 410, "Кожаный бомбер", 5, 35], [1, 11, 149, 8, 14, -1, -1, -1, 270, "Шоу-Куртка", 10, 35], [1, 11, 150, 10, 4, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 153, 24, 6, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 154, 6, 6, -1, -1, -1, 425, "Фирменная спортивная куртка", -10, 35], [1, 11, 167, 14, 4, -1, 0, 1, 590, "Пуховик", -25, 25], [1, 11, 168, 1, 4, -1, 2, 1, 425, "Кожаное худи", -10, 30], [1, 11, 184, 2, 4, -1, -1, -1, 650, "Заказная закрытая парка", -20, 25], [1, 11, 185, 2, 4, -1, 0, 1, 650, "Заказная открытая парка", -5, 30], [1, 11, 187, 11, 4, -1, 2, 1, 515, "Длинное худи", -15, 35], [1, 11, 188, 9, 4, -1, -1, -1, 610, "Закрытая парка", -20, 25], [1, 11, 189, 9, 4, -1, 0, 1, 610, "Открытая парка", -5, 30], [1, 11, 190, 24, 6, -1, -1, -1, 370, "Заказной свитер", 10, 30], [1, 11, 191, 24, 4, -1, 0, 1, 590, "Заказной пуховик", -25, 25], [1, 11, 192, 10, 4, -1, 75, 2, 790, "Заказное пальто", -25, 25], [1, 11, 193, 24, 11, -1, -1, -1, 320, "Заказная футболка", 15, 50], [1, 11, 194, 1, 6, -1, -1, -1, 620, "Новогодний неоновый свитер", 10, 30], [1, 11, 195, 1, 6, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 196, 14, 6, -1, -1, -1, 620, "Рождественский неоновый свитер", 10, 30], [1, 11, 197, 14, 6, -1, -1, -1, 320, "Рождественский свитер", 10, 30], [1, 11, 198, 6, 6, -1, -1, -1, 590, "Новогодняя неоновая теп. кофта", -5, 25], [1, 11, 199, 6, 6, -1, -1, -1, 290, "Новогодняя теплая кофта", -5, 25], [1, 11, 200, 24, 4, -1, -1, -1, 310, "Заказное худи", 5, 30], [1, 11, 205, 3, 5, -1, -1, -1, 250, "Жилет с капюшоном", 15, 35], [1, 11, 217, 13, 4, -1, -1, -1, 445, "Заказная куртка", -25, 25], [1, 11, 223, 14, 2, -1, -1, -1, 330, "Фирменный тёплый жилет", 10, 30], [1, 11, 224, 14, 11, -1, -1, -1, 460, "Фирменная тёплая куртка", -20, 30], [1, 11, 225, 0, 8, -1, -1, -1, 270, "Коллекционный задранный джемпер", 10, 40], [1, 11, 227, 12, 4, -1, -1, -1, 315, "Фирменный жилет", -5, 30], [1, 11, 229, 10, 4, -1, -1, -1, 425, "Закрытый бомбер", -10, 30], [1, 11, 230, 10, 4, -1, 0, 1, 425, "Открытый бомбер", -5, 35], [1, 11, 235, 10, 0, -1, -1, -1, 250, "Фирменное поло", 15, 50], [1, 11, 236, 10, 0, -1, -1, -1, 250, "Заправленное фирменное поло", 15, 50], [1, 11, 241, 4, 0, -1, -1, -1, 270, "Заказное поло", 15, 50], [1, 11, 242, 4, 0, -1, -1, -1, 270, "Заправленное заказное поло", 15, 50], [1, 11, 244, 24, 4, -1, 2, 1, 710, "Модная куртка с карманами", -25, 30], [1, 11, 245, 8, 4, -1, -1, -1, 220, "Новогодний свитер", 10, 30], [1, 11, 247, 24, 5, -1, -1, -1, 320, "Модный жилет с карманами", 10, 35], [1, 11, 248, 24, 14, -1, -1, -1, 740, "Плотная куртка с карманами", -25, 30], [1, 11, 251, 24, 4, -1, -1, -1, 880, "Анорак", -25, 30], [1, 11, 255, 24, 4, -1, -1, -1, 370, "Эксклюзивный свитер Bigness", 10, 30], [1, 6, 1, 14, -1, -1, -1, -1, 220, "Скейтерские кеды", -10, 50], [1, 6, 4, 1, -1, -1, -1, -1, 250, "Высокие кеды", -10, 50], [1, 6, 12, 14, -1, -1, -1, -1, 320, "Заказные ботинки", -30, 30], [1, 6, 14, 14, -1, -1, -1, -1, 225, "Винтажные ботинки", -30, 30], [1, 6, 22, 10, -1, -1, -1, -1, 270, "Заказные высокие кеды", -10, 50], [1, 6, 26, 14, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 28, 4, -1, -1, -1, -1, 290, "Модные кеды", -10, 50], [1, 6, 29, -1, -1, -1, -1, -1, 750, "Золотые кеды", -10, 50], [1, 6, 31, 3, -1, -1, -1, -1, 345, "Заказные кросовки", -10, 50], [1, 6, 32, 14, -1, -1, -1, -1, 375, "Высокие кросовки", -10, 50], [1, 6, 42, 8, -1, -1, -1, -1, 190, "Модные низкие кеды", -10, 50], [1, 6, 43, 6, -1, -1, -1, -1, 325, "Заказные ботинки на шнурках", -30, 30], [1, 6, 48, 0, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 49, 0, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 55, 8, -1, -1, -1, -1, 640, "Неоновые кеды", -10, 50], [1, 6, 57, 10, -1, -1, -1, -1, 390, "Фирменные кеды", -10, 50], [1, 6, 70, 24, -1, -1, -1, -1, 415, "Фирменные сапоги", -35, 30], [1, 6, 71, 24, -1, -1, -1, -1, 345, "Фирменные ботинки", -30, 30], [1, 6, 72, 24, -1, -1, -1, -1, 400, "Фирменные высокие кроссовки", -30, 30], [1, 6, 73, 24, -1, -1, -1, -1, 330, "Фирменные кроссовки", -10, 50], [1, 6, 77, 24, -1, -1, -1, -1, 440, "Светодиодные кроссовки", -10, 50], [2, 4, 10, 1, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 13, 1, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 19, 0, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 20, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 22, 11, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 23, 11, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 24, 5, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 25, 5, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 28, 14, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 35, -1, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 37, 2, -1, -1, -1, -1, 650, "Мятые брюки", -15, 40], [2, 4, 48, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 49, 3, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 50, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 51, -1, -1, -1, -1, -1, 2990, "Заказные широкие брюки", -15, 40], [2, 4, 52, 2, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 50], [2, 4, 53, -1, -1, -1, -1, -1, 3290, "Заказные зауженные брюки", -10, 40], [2, 4, 60, 10, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 96, 0, -1, -1, -1, 1, 990, "Широкие брюки", -15, 40], [2, 11, 11, 0, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 45], [2, 11, 21, 2, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 25, 8, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 120, 10, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 45, 1, 11, -1, 50, 0, 1190, "Патриотичный жилет", 10, 40], [2, 11, 11, 0, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 45], [2, 11, 21, 2, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 25, 8, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 120, 10, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 12, -1, 12, -1, -1, -1, 1190, "Расправленная рубашка", 10, 45], [2, 11, 13, 2, 11, -1, -1, -1, 1190, "Заправленная рубашка", 10, 45], [2, 11, 26, 8, 11, -1, -1, -1, 1190, "Заправленная рубашка", 10, 45], [2, 11, 41, 2, 12, -1, -1, -1, 1190, "Расправленная рубашка", 10, 45], [2, 11, 4, -1, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 10, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 19, 0, 1, -1, 20, 1, 2390, "Новогодний пиджак", -5, 35], [2, 11, 20, 2, 4, -1, 21, 3, 3990, "Стильный пиджак", -5, 35], [2, 11, 23, 2, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 24, 11, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 27, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 28, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 29, 6, 4, -1, 31, 1, 1990, "Открытый пиджак", -5, 35], [2, 11, 30, 6, 4, -1, 31, 1, 1990, "Закрытый пиджак", -5, 35], [2, 11, 95, 1, 11, -1, -1, -1, 1190, "Задранная рубашка", 10, 45], [2, 11, 234, 24, 11, -1, -1, -1, 1490, "Заказная задранная рубашка", 10, 45], [2, 11, 31, 6, 4, -1, 31, 1, 1990, "Приталенный открытый пиджак", -5, 35], [2, 11, 32, 6, 4, -1, 31, 1, 1990, "Приталенный закрытый пиджак", -5, 35], [2, 11, 35, 5, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 46, 1, 4, -1, 21, 3, 2490, "Патриотичный фрак", -5, 35], [2, 11, 58, -1, 1, -1, 63, 1, 2490, "Фрак", -5, 35], [2, 11, 59, 2, 1, -1, 63, 1, 990, "Мятый открытый пиджак", -5, 35], [2, 11, 60, 2, 0, -1, 64, 1, 990, "Мятый задранный пиджак", -5, 35], [2, 11, 99, 3, 4, -1, 31, 1, 1990, "Приталенный открытый пиджак", -5, 35], [2, 11, 100, 3, 4, -1, 31, 1, 1990, "Приталенный закрытый пиджак", -5, 35], [2, 11, 101, 2, 4, -1, 31, 1, 2990, "Кожаный открытый пиджак", -5, 35], [2, 11, 102, 2, 4, -1, 31, 1, 2990, "Кожаный закрытый пиджак", -5, 35], [2, 11, 103, -1, 4, -1, 31, 1, 3590, "Заказной открытый пиджак", -5, 35], [2, 11, 104, -1, 4, -1, 31, 1, 3590, "Заказной закрытый пиджак", -5, 35], [2, 11, 108, 9, 4, -1, 31, 1, 2690, "Раритетный пиджак", -5, 35], [2, 11, 119, 10, 4, -1, 21, 3, 2490, "Пиджак на пуговицах", -5, 35], [2, 11, 145, 12, 4, -1, 31, 1, 2690, "Раритетный пиджак", -5, 35], [2, 11, 183, 4, 4, -1, 31, 1, 2250, "Праздничный пиджак", -5, 35], [2, 11, 70, 10, 1, -1, 12, 1, 5990, "Кожаная куртка с мехом", -30, 25], [2, 11, 240, 4, 1, -1, 12, 1, 5990, "Кожаная куртка с мехом", -30, 25], [2, 11, 140, 13, 4, -1, 31, 1, 4490, "Пиджачное пальто на пуговицах", -15, 35], [2, 11, 72, 2, 1, -1, 12, 1, 4790, "Пальто", -25, 25], [2, 11, 76, 3, 4, -1, 71, 2, 5490, "Пальто на пуговицах", -25, 25], [2, 11, 77, 2, 1, -1, 12, 1, 6190, "Открытое пальто", -25, 25], [2, 11, 142, 1, 4, -1, 31, 10, 3390, "Открытое пальто", -20, 30], [2, 11, 136, 5, 4, -1, 0, 1, 1690, "Фирменная куртка", -15, 30], [2, 6, 10, -1, -1, -1, -1, -1, 790, "Туфли с носками", -15, 45], [2, 6, 15, 14, -1, -1, -1, -1, 1990, "Кожаные ботинки", -30, 30], [2, 6, 18, 0, -1, -1, -1, -1, 790, "Заказные туфли с носками", -15, 45], [2, 6, 19, -1, -1, -1, -1, -1, 840, "Высокие туфли", -15, 45], [2, 6, 20, 10, -1, -1, -1, -1, 790, "Кожаные туфли с носками", -15, 45], [2, 6, 21, 10, -1, -1, -1, -1, 760, "Кожаные туфли", -15, 45], [2, 6, 30, 0, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 45], [2, 6, 36, 2, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 45], [2, 6, 37, 3, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 38, 3, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 40, 10, -1, -1, -1, -1, 790, "Кожаные туфли с носками", -15, 45], [2, 6, 44, 9, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 45, 9, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 50, 4, -1, -1, -1, -1, 1290, "Кожаные сапоги", -25, 25], [2, 6, 51, 4, -1, -1, -1, -1, 1050, "Кожаные ботинки", -20, 30], [2, 6, 52, 0, -1, -1, -1, -1, 620, "Зимние ботикнки", -30, 20], [2, 6, 56, 0, -1, -1, -1, -1, 510, "Низкие зимние ботинки", -25, 25], [2, 6, 88, 10, -1, -1, -1, -1, 820, "Меховые сапоги", -30, 20], [2, 7, 10, 1, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 12, 1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 18, -1, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 19, -1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 20, 3, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 21, 11, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 22, 13, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [2, 7, 23, 11, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 24, 14, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 25, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 26, 14, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 27, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 28, 14, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 29, 14, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 32, 1, -1, -1, -1, -1, 180, "Патриотичная бабочка", -99, 99], [2, 7, 36, -1, -1, -1, -1, -1, 170, "Свободная бабочка", -99, 99], [2, 7, 37, 14, -1, -1, -1, -1, 195, "Свободный галстук", -99, 99], [2, 7, 38, 14, -1, -1, -1, -1, 220, "Толстый галстук (над)", -99, 99], [2, 7, 39, 14, -1, -1, -1, -1, 195, "Очень свободный галстук", -99, 99], [2, 7, 116, 8, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 117, 8, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 118, -1, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [3, 4, 86, 22, -1, -1, -1, -1, 100, "Камуфляжные-Карго штаны", -25, 25], [3, 4, 88, 22, -1, -1, -1, -1, 70, "Камуфляжные-Карго шорты", 10, 65], [3, 4, 102, 16, -1, -1, -1, -1, 150, "Камуфляжные штаны", -25, 25], [3, 4, 102, 16, -1, -1, -1, -1, 110, "Камуфляжные шорты", -25, 25], [3, 11, 239, 22, 5, -1, -1, -1, 35, "Камуфляжная старая майка", 20, 60], [3, 11, 219, 24, 2, -1, -1, -1, 60, "Старая камуфляжная жилетка", 10, 40], [3, 11, 215, 22, 4, -1, 0, 1, 125, "Камуфляжная джинсовая куртка", -10, 30], [3, 11, 216, 22, 5, -1, 0, 1, 95, "Камуфляжный джинсовый жилет", 15, 35], [3, 11, 220, 24, 4, -1, -1, -1, 110, "Камуфляжная кофтка с карманами", -5, 30], [3, 11, 221, 24, 4, -1, -1, -1, 175, "Камуфляжная куртка с карманами", -20, 25], [3, 11, 222, 24, 11, -1, -1, -1, 175, "Камуфляжная рубашка с карманами", 10, 30], [3, 11, 206, 22, 5, -1, -1, -1, 275, "Камуфляжный жилет с капюшоном", 10, 35], [3, 11, 208, 22, 0, -1, -1, -1, 135, "Камуфляжная футболка", 15, 50], [3, 11, 209, 22, 4, -1, -1, -1, 465, "Камуфялжная заказная куртка", -20, 30], [3, 11, 210, 22, 4, -1, -1, -1, 675, "Камуфляжная закрытая парка", -25, 25], [3, 11, 212, 22, 4, -1, 0, 1, 675, "Камуфляжная открытая парка", -5, 30], [3, 11, 213, 22, 5, -1, -1, -1, 325, "Камуфляжный Мото-Жилет", 10, 35], [3, 11, 214, 22, 4, -1, -1, -1, 325, "Камуфляжная Мото-Кофта", -5, 30], [3, 6, 53, 4, -1, -1, -1, -1, 190, "Охотничьи сапоги", -30, 25], [3, 6, 54, 4, -1, -1, -1, -1, 170, "Охотничьи ботинки", -25, 30], [3, 6, 59, 24, -1, -1, -1, -1, 115, "Камфуляжные кросовки", -10, 50], [3, 6, 60, 6, -1, -1, -1, -1, 210, "Камуфляжные сапоги", -30, 25], [3, 6, 61, 6, -1, -1, -1, -1, 170, "Камуфляжные ботинки", -25, 30], [3, 6, 62, 6, -1, -1, -1, -1, 195, "Камуфляжные высокие кросовки", -30, 25], [3, 6, 63, 6, -1, -1, -1, -1, 155, "Камуфляжные низкие кросовки", -10, 50], [4, 7, 16, 1, -1, -1, -1, -1, 450, "Цепь", -99, 99], [4, 7, 17, 1, -1, -1, -1, -1, 450, "Цепь (над)", -99, 99], [4, 7, 42, 0, -1, -1, -1, -1, 1200, "Цепь SN", -99, 99], [4, 7, 43, 0, -1, -1, -1, -1, 1350, "Цепь Череп", -99, 99], [4, 7, 44, -1, -1, -1, -1, -1, 1300, "Цепь Маска", -99, 99], [4, 7, 45, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE", -99, 99], [4, 7, 46, 0, -1, -1, -1, -1, 1550, "Цепь LC", -99, 99], [4, 7, 47, 0, -1, -1, -1, -1, 1500, "Цепь Dix", -99, 99], [4, 7, 48, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen", -99, 99], [4, 7, 49, 0, -1, -1, -1, -1, 1200, "Цепь SN (над)", -99, 99], [4, 7, 50, 0, -1, -1, -1, -1, 1350, "Цепь Череп (над)", -99, 99], [4, 7, 51, -1, -1, -1, -1, -1, 1300, "Цепь Маска (над)", -99, 99], [4, 7, 52, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE (над)", -99, 99], [4, 7, 53, 0, -1, -1, -1, -1, 1550, "Цепь LC (над)", -99, 99], [4, 7, 54, 0, -1, -1, -1, -1, 1500, "Цепь Dix (над)", -99, 99], [4, 7, 55, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen (над)", -99, 99], [4, 7, 74, 0, -1, -1, -1, -1, 450, "Тонкая цепь", -99, 99], [4, 7, 75, 0, -1, -1, -1, -1, 475, "Толстая цепь", -99, 99], [4, 7, 76, 0, -1, -1, -1, -1, 500, "Плотная цепь", -99, 99], [4, 7, 77, 0, -1, -1, -1, -1, 580, "Ребристая цепь", -99, 99], [4, 7, 78, 0, -1, -1, -1, -1, 540, "Наружная цепь", -99, 99], [4, 7, 79, 0, -1, -1, -1, -1, 560, "Клёсткая цепь", -99, 99], [4, 7, 80, 0, -1, -1, -1, -1, 890, "Винтажная цепь", -99, 99], [4, 7, 81, 0, -1, -1, -1, -1, 320, "Лёгкая цепь", -99, 99], [4, 7, 82, 0, -1, -1, -1, -1, 350, "Сплошная цепь", -99, 99], [4, 7, 83, 0, -1, -1, -1, -1, 345, "Тряпичная цепь", -99, 99], [4, 7, 85, 0, -1, -1, -1, -1, 450, "Тонкая цепь (над)", -99, 99], [4, 7, 86, 0, -1, -1, -1, -1, 475, "Толстая цепь (над)", -99, 99], [4, 7, 87, 0, -1, -1, -1, -1, 500, "Плотная цепь (над)", -99, 99], [4, 7, 88, 0, -1, -1, -1, -1, 580, "Ребристая цепь (над)", -99, 99], [4, 7, 89, 0, -1, -1, -1, -1, 540, "Наружная цепь (над)", -99, 99], [4, 7, 90, 0, -1, -1, -1, -1, 560, "Клёсткая цепь (над)", -99, 99], [4, 7, 91, 0, -1, -1, -1, -1, 890, "Винтажная цепь (над)", -99, 99], [4, 7, 92, 0, -1, -1, -1, -1, 320, "Лёгкая цепь (над)", -99, 99], [4, 7, 93, 0, -1, -1, -1, -1, 350, "Сплошная цепь (над)", -99, 99], [4, 7, 94, 0, -1, -1, -1, -1, 345, "Тряпичная цепь (над)", -99, 99], [4, 7, 110, 0, -1, -1, -1, -1, 1100, "Цепь M", -99, 99], [4, 7, 111, 0, -1, -1, -1, -1, 1100, "Цепь M (над)", -99, 99], [4, 7, 119, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M", -99, 99], [4, 7, 120, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M (над)", -99, 99], [4, 7, 121, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S", -99, 99], [4, 7, 122, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S (над)", -99, 99], [5, 4, 0, 14, -1, -1, -1, -1, 80, "Классические джинсы", -20, 35], [5, 4, 43, 0, -1, -1, -1, -1, 75, "Рабочие джинсы", -25, 30], [5, 4, 1, 14, -1, -1, -1, -1, 95, "Широкие джинсы", -20, 35], [5, 4, 3, 14, -1, -1, -1, -1, 35, "Домашние штаны", -2, 35], [5, 4, 29, 1, -1, -1, -1, -1, 80, "Патриот-Карго штаны", -25, 25], [5, 4, 47, 0, -1, -1, -1, -1, 20, "Рабочие-Карго штаны", -25, 25], [5, 4, 8, -1, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -30, 20], [5, 4, 9, 14, -1, -1, -1, -1, 80, "Рабочие-Карго штаны", -25, 20], [5, 4, 7, 14, -1, -1, -1, -1, 70, "Рабочие штаны", -25, 25], [5, 4, 27, 10, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -20, 30], [5, 4, 5, 14, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 55, 2, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 64, 9, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 98, 24, -1, -1, -1, -1, 100, "Фирменные-Карго штаны", -25, 25], [5, 4, 15, 14, -1, -1, -1, -1, 55, "Карго шорты", 20, 50], [5, 4, 100, 12, -1, -1, -1, -1, 125, "Заказные шаровары", -25, 30], [5, 4, 14, 0, -1, -1, -1, -1, 25, "Спортивные шорты", 25, 60], [5, 4, 18, 10, -1, -1, -1, -1, 20, "Спортивные шорты", 25, 60], [5, 4, 42, 6, -1, -1, -1, -1, 45, "Повседневные шорты", 15, 55], [5, 4, 62, 2, -1, -1, -1, -1, 30, "Рабочие шорты", 15, 55], [5, 4, 21, -1, -1, -1, -1, -1, 5, "Трусы", 25, 99], [5, 4, 61, 12, -1, -1, -1, -1, 5, "Трусы", 25, 99], [5, 11, 123, 1, 11, -1, -1, -1, 50, "Бейсбольное поло", 15, 50], [5, 11, 83, 3, 11, -1, -1, -1, 45, "Бейсбольная рубашка", 15, 50], [5, 11, 84, 4, 4, -1, -1, -1, 80, "Бейсбольный свитер", 5, 35], [5, 11, 81, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [5, 11, 128, 8, 0, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 164, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [5, 11, 111, 4, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [5, 11, 139, 6, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [5, 11, 97, 0, -1, -1, -1, -1, 5, "Грязная футболка", 15, 50], [5, 11, 17, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 36, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 237, 24, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 1, 0, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 16, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 22, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 33, -1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 34, 0, 0, -1, -1, -1, 10, "Классическая футболка", 15, 50], [5, 11, 44, 2, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 146, 7, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 14, 14, 1, -1, -1, -1, 30, "Кофта под рубашкой", 5, 35], [5, 11, 89, 2, 6, -1, -1, -1, 30, "Свитер", 5, 35], [5, 11, 169, 2, 4, -1, 0, 1, 105, "Джинсовая куртка", -10, 30], [5, 11, 170, 2, 5, -1, 0, 1, 75, "Джинсовый жилет", 15, 35], [5, 11, 172, 2, 4, -1, 0, 1, 130, "Байкерская джинсовая куртка", -10, 30], [5, 11, 173, 2, 5, -1, 0, 1, 105, "Байкерский джинсовый жилет", 15, 35], [5, 11, 174, 2, 4, -1, 2, 1, 135, "Байкерская кожаная куртка", -20, 30], [5, 11, 175, 2, 5, -1, 2, 1, 115, "Байкерский кожаный жилет", 10, 30], [5, 11, 122, 12, 4, -1, 0, 1, 120, "Байкерская куртка", -5, 30], [5, 11, 161, 2, 4, -1, 0, 1, 90, "Байкерская куртка", -20, 30], [5, 11, 163, -1, 4, -1, 0, 1, 95, "Старая байкерская куртка", -5, 30], [5, 11, 159, 0, 15, -1, 0, 1, 80, "Байкерский жилет", 10, 30], [5, 11, 160, 0, 15, -1, 0, 1, 80, "Байкерский жилет", 10, 30], [5, 11, 162, 2, 2, -1, 0, 1, 60, "Байкерский жилет", 10, 30], [5, 11, 87, 10, 4, -1, -1, -1, 130, "Закрытый бейсбольный бомбер", -10, 30], [5, 11, 88, 10, 4, -1, 0, 1, 130, "Открытый бейсбольный бомбер", 5, 35], [5, 11, 126, 13, 4, -1, -1, -1, 45, "Закрытая винтажная рубашка", 10, 30], [5, 11, 127, 13, 4, -1, 0, 1, 45, "Открытая винтажная рубашка", 15, 35], [5, 11, 6, 0, 4, -1, 2, 1, 110, "Кожанная куртка", -10, 30], [5, 11, 37, 1, 4, -1, 2, 1, 30, "Кожанная куртка", -10, 30], [5, 11, 166, 4, 4, -1, 0, 1, 145, "Кожаная куртка", -15, 30], [5, 11, 157, 2, 15, -1, 0, 1, 80, "Кожаный жилет", 15, 35], [5, 11, 232, 8, 4, -1, 0, 1, 180, "Закрытая охотничья куртка", -15, 30], [5, 11, 233, 8, 4, -1, 0, 1, 180, "Открытая охотничья куртка", -5, 30], [5, 11, 3, 14, 1, -1, 38, 0, 80, "Спортивная куртка", 5, 30], [5, 11, 141, 9, 6, -1, -1, -1, 80, "Спортивная куртка", -5, 30], [5, 11, 7, 14, 4, -1, 0, 1, 90, "Спортивный толстовка", 5, 30], [5, 11, 86, 3, 4, -1, -1, -1, 30, "Спортивная толстовка", 5, 30], [5, 11, 171, 0, 4, -1, -1, -1, 85, "Толстовка", 5, 30], [5, 6, 5, 2, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 16, 10, -1, -1, -1, -1, 10, "Модные сланцы", 25, 99], [5, 6, 6, 0, -1, -1, -1, -1, 5, "Тапочки с носками", 20, 99], [5, 6, 8, 14, -1, -1, -1, -1, 50, "Беговые кеды с носками", -10, 50], [5, 6, 23, 14, -1, -1, -1, -1, 40, "Классические кеды", -10, 50], [5, 6, 9, 14, -1, -1, -1, -1, 65, "Кросовки с носками", -10, 50], [5, 6, 17, -1, -1, -1, -1, -1, 45, "Ботинки Эльфа", -5, 50], [5, 6, 35, 0, -1, -1, -1, -1, 50, "Высокие ботинки", -30, 30], [5, 6, 65, 5, -1, -1, -1, -1, 110, "Винтажные ботинки", -30, 30], [5, 6, 66, 5, -1, -1, -1, -1, 60, "Винтажные кросовки", -10, 50], [5, 6, 74, 0, -1, -1, -1, -1, 90, "ProLaps фирменный кеды", -10, 50], [5, 6, 75, 24, -1, -1, -1, -1, 150, "Беговые высокие кроссовки", -10, 50], [5, 6, 76, 24, -1, -1, -1, -1, 150, "Беговые низкие кроссовки", -10, 50], [5, 6, 78, 12, -1, -1, -1, -1, 65, "Спортивные сандали", 20, 99], [5, 7, 30, -1, -1, -1, -1, -1, 35, "Шарф", -99, 99], [5, 7, 31, -1, -1, -1, -1, -1, 35, "Шарф (над)", -99, 99], [5, 7, 34, 2, -1, -1, -1, -1, 55, "Новогодний шарф", -99, 99], [5, 7, 35, 2, -1, -1, -1, -1, 55, "Новогодний шарф (над)", -99, 99], [5, 7, 112, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 113, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [5, 7, 123, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [9999, 11, 332, 7, 0, -1, -1, -1, 60, "Майки", 10, 40], [9999, 11, 334, 6, 4, -1, -1, -1, 60, "Худи gucci,kenzo,supreme,balenciaga", 10, 40], [9999, 11, 335, 2, 4, -1, -1, -1, 60, "Худ Tommy Hilfiger", 10, 40], [9999, 6, 96, 1, -1, -1, -1, -1, 55, "VANS", -10, 50]];
exports.clothMutil = clothMutil;
const propFutil = [[0, 0, 4, 6, 35, "Старый снепбек"], [0, 0, 5, 6, 10, "Вязаная шапка"], [0, 0, 6, 6, 35, "Бретонская кепка"], [0, 0, 7, 6, 15, "Кепи"], [0, 0, 9, 6, 25, "Кепка на бок"], [0, 0, 12, -1, 15, "Длинная шапка"], [0, 0, 20, 5, 40, "Ковбойская шляпа"], [0, 0, 21, 5, 25, "Панама"], [0, 0, 22, 5, 45, "Пляжная панама"], [0, 0, 29, 3, 15, "Длинная шапка"], [0, 0, 36, 4, 40, "Пивная кепка"], [0, 0, 53, 0, 35, "Фирменный снепбек"], [0, 0, 75, 19, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 76, 19, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 129, 17, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 130, 17, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 131, 2, 25, "Фирменная панама"], [0, 0, 82, 5, 20, "Байкерская бандана"], [0, 0, 93, 8, 30, "Заказная панама"], [0, 1, 9, 9, 20, "Спортивные очки"], [0, 1, 10, 9, 15, "Солнцезащитные очки"], [0, 1, 11, 6, 25, "Авиаторы"], [0, 1, 18, 6, 35, "Плоские очки"], [0, 1, 19, 9, 40, "Офисные очки"], [0, 6, 11, -1, 45, "Цепь на левую руку"], [0, 7, 7, -1, 45, "Цепь на правую руку"], [0, 6, 12, -1, 55, "Толстая цепь на левую руку"], [0, 7, 8, -1, 55, "Толстая цепь на правую руку"], [0, 6, 13, -1, 65, "Твёрдая цепь на левую руку"], [0, 7, 9, -1, 65, "Твёрдая цепь на правую руку"], [0, 6, 14, -1, 30, "Черепной браслет на левую руку"], [0, 7, 10, -1, 30, "Черепной браслет на правую руку"], [0, 6, 15, -1, 25, "Старый браслет на левую руку"], [0, 7, 11, -1, 25, "Старый браслет на правую руку"], [0, 6, 16, -1, 40, "Цепь с браслетами на левую руку"], [0, 7, 12, -1, 40, "Цепь с браслетами на правую руку"], [1, 0, 15, 6, 95, "Наушники"], [1, 0, 23, 0, 125, "Новогодняя шапка Санты"], [1, 0, 24, -1, 150, "Шапка эльфа"], [1, 0, 25, -1, 85, "Рожки"], [1, 0, 42, 2, 135, "Новогодняя шапка Санты"], [1, 0, 55, 24, 120, "Фирменная бейсболка"], [1, 0, 56, 8, 140, "Фирменный снепбек"], [1, 0, 58, 1, 100, "Заказная кепка"], [1, 0, 63, 8, 110, "Бейсболка"], [1, 0, 95, 14, 115, "Заказная бейсболка"], [1, 0, 108, 9, 95, "Кепка в сетку (козырёк вперёд)"], [1, 0, 109, 9, 95, "Кепка в сетку (козырёк назад)"], [1, 0, 119, 24, 95, "Большая шапка"], [1, 1, 4, 9, 110, "Cats eye очки"], [1, 1, 20, 6, 95, "Солнцезащитные вайфареры"], [1, 1, 21, 6, 90, "Вайфареры"], [1, 1, 22, -1, 70, "Патриотические звёдочки"], [1, 1, 23, -1, 60, "Патриотические очки"], [1, 1, 24, 9, 100, "Прямоугольные вайфареры"], [1, 1, 27, 6, 210, "Мото-Очки"], [2, 0, 13, 6, 225, "Порк-Пай"], [2, 0, 14, 6, 145, "Берет"], [2, 0, 26, 12, 280, "Котелок"], [2, 0, 27, 12, 310, "Цилиндр"], [2, 0, 28, 6, 190, "Эквадорская панама"], [2, 0, 30, -1, 225, "Патриотичная шляпа"], [2, 0, 31, -1, 335, "Патриотичный цилиндр"], [2, 0, 32, 0, 355, "Патриотичный боливар"], [2, 0, 54, 6, 240, "Широкополая шляпа"], [2, 0, 61, 8, 260, "Гангстерская шляпа"], [2, 0, 94, 8, 310, "Федора"], [2, 1, 0, 9, 225, "Элегантные очки"], [2, 1, 1, 9, 260, "Большие очки"], [2, 1, 2, 9, 230, "Округлые очки"], [2, 1, 3, 9, 295, "Фирменные плоские очки"], [2, 1, 6, -1, 425, "Фирменные очки"], [2, 1, 7, 9, 365, "Заказные очки"], [2, 1, 8, -1, 375, "Фирменные округлые очки"], [2, 1, 14, 9, 210, "Дамские очки"], [2, 1, 16, 8, 425, "Фирменные очки"], [2, 1, 17, 9, 375, "Фирменные округлые очки"], [3, 0, 0, 6, 80, "Наушники для стрельбы"], [3, 0, 102, 18, 110, "Камуфляжная заказная кепка"], [3, 0, 103, 24, 95, "Камуфляжная панама"], [3, 0, 104, 24, 95, "Камуфляжная охотнисья панама"], [3, 0, 105, 24, 85, "Камуфляжный берет"], [3, 0, 106, 24, 125, "Камуфляжная армейская кепка"], [3, 0, 107, 24, 65, "Камуфляжная вязаная кепка"], [3, 1, 25, 8, 40, "Очки для стрельбы"], [3, 1, 26, 4, 145, "Очки лётчиков"], [3, 1, 27, 6, 210, "Мото-Очки"], [4, 2, 3, -1, 1550, "Серебрянные капли"], [4, 2, 4, -1, 2250, "Золотые капли"], [4, 2, 5, -1, 1850, "Золотые нигары"], [4, 2, 6, 1, 3600, "Руби с камнями"], [4, 2, 7, 1, 3320, "Фельционы с камнями"], [4, 2, 8, 1, 3450, "Таенты с камнями"], [4, 2, 9, 1, 2670, "Алиты с камнями"], [4, 2, 10, 1, 2150, "Истании с камнями"], [4, 2, 11, 1, 2970, "Снежинки с камнями"], [4, 2, 12, 1, 1450, "Серьги с камнями"], [4, 2, 13, -1, 1950, "Золотые серьги AKM"], [4, 2, 14, -1, 960, "Караловые серьги"], [4, 2, 15, -1, 1390, "Золотые кольца"], [4, 2, 16, -1, 1090, "Караловые серьги Fuck You"], [4, 2, 17, -1, 1090, "Караловые серьги Screw You"], [4, 6, 2, 2, 1250, "Тонкие механические часы"], [4, 6, 3, 1, 1500, "Прямоугольные механические часы"], [4, 6, 4, 1, 1360, "Круглые механические часы"], [4, 6, 5, 1, 550, "Электронные часы"], [4, 6, 6, 1, 575, "Заказные электронные часы"], [4, 6, 7, 1, 1150, "Гранитные механические часы"], [4, 6, 8, 1, 1340, "Квадратные мехнические часы"], [4, 6, 9, 1, 1090, "Плоские механические часы"], [4, 6, 10, 1, 890, "Электронные часы IFruit"], [4, 7, 0, -1, 1790, "Золотой винтажный браслет"], [4, 7, 1, -1, 1810, "Золотой браслет с гравировкой"], [4, 7, 2, -1, 1750, "Золотой браслет"], [4, 7, 3, -1, 350, "Фирменный браслет"], [4, 7, 5, -1, 495, "Бронзовый браслет"], [4, 7, 0, -1, 450, "Бронзовый полный браслет"], [5, 0, 5, 6, 10, "Вязаная шапка"], [5, 0, 6, 6, 35, "Бретонская кепка"], [5, 0, 7, 6, 15, "Кепи"], [5, 0, 9, 6, 25, "Кепка на бок"], [5, 0, 12, -1, 15, "Длинная шапка"], [5, 0, 20, 5, 40, "Ковбойская шляпа"], [5, 0, 21, 5, 25, "Панама"], [5, 0, 22, 5, 45, "Пляжная панама"], [5, 0, 29, 3, 15, "Длинная шапка"], [5, 0, 33, -1, 90, "Патриотичная вязаная шапка"], [5, 0, 34, -1, 45, "Патриотичная корона"], [5, 0, 35, -1, 40, "Патриотичные ушки"], [5, 0, 36, 4, 40, "Пивная кепка"], [5, 0, 39, 6, 50, "Новогодняя длинная шапка"], [5, 0, 40, -1, 35, "Новогодняя шапка"], [5, 0, 41, 2, 40, "Новогодняя шапка с пумпоном"], [5, 0, 43, 6, 35, "Новогодняя кепка (козырёк вперёд)"], [5, 0, 44, 6, 35, "Новогодняя кепка (козырёк назад)"], [5, 0, 53, 0, 35, "Фирменный снепбек"], [5, 0, 75, 19, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 76, 19, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 129, 17, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 130, 17, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 131, 2, 25, "Фирменная панама"], [5, 0, 82, 5, 20, "Байкерская бандана"], [5, 0, 93, 8, 30, "Заказная панама"], [5, 1, 9, 9, 20, "Спортивные очки"], [5, 1, 10, 9, 15, "Солнцезащитные очки"], [5, 1, 11, 6, 25, "Авиаторы"], [5, 1, 18, 6, 35, "Плоские очки"], [5, 1, 19, 9, 40, "Офисные очки"], [5, 6, 11, -1, 45, "Цепь на левую руку"], [5, 7, 7, -1, 45, "Цепь на правую руку"], [5, 6, 12, -1, 55, "Толстая цепь на левую руку"], [5, 7, 8, -1, 55, "Толстая цепь на правую руку"], [5, 6, 13, -1, 65, "Твёрдая цепь на левую руку"], [5, 7, 9, -1, 65, "Твёрдая цепь на правую руку"], [5, 6, 14, -1, 30, "Черепной браслет на левую руку"], [5, 7, 10, -1, 30, "Черепной браслет на правую руку"], [5, 6, 16, -1, 40, "Цепь с браслетами на левую руку"], [5, 7, 12, -1, 40, "Цепь с браслетами на правую руку"], [5, 6, 17, -1, 75, "Байкерский браслет на левую руку"], [5, 7, 13, -1, 75, "Байкерский браслет на правую руку"], [5, 6, 18, 1, 40, "Кожаный браслет на левую руку"], [5, 7, 14, 1, 40, "Кожаный браслет на правую руку"]];
exports.propFutil = propFutil;
const propMutil = [[0, 0, 2, 6, 10, "Шапка"], [0, 0, 5, 0, 15, "Длинная шапка"], [0, 0, 28, 4, 15, "Длинная шапка"], [0, 0, 7, 6, 15, "Кепи"], [0, 0, 13, 6, 40, "Ковбойская шляпа"], [0, 0, 14, 6, 15, "Бандана"], [0, 0, 83, 5, 20, "Байкерская бандана"], [0, 0, 20, 4, 25, "Панама"], [0, 0, 94, 8, 30, "Заказная панама"], [0, 0, 76, 19, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 77, 19, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 130, 17, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 131, 17, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 132, 2, 25, "Фирменная панама"], [0, 0, 37, 4, 40, "Пивная кепка"], [0, 1, 5, 9, 25, "Авиаторы"], [0, 1, 8, 9, 35, "Заказные авиаторы"], [0, 1, 16, 9, 30, "Беговые очки"], [0, 1, 17, 9, 40, "Офисные очки"], [0, 1, 15, 9, 25, "Спортивные очки"], [0, 6, 22, -1, 45, "Цепь на левую руку"], [0, 7, 0, -1, 45, "Цепь на правую руку"], [0, 6, 23, -1, 55, "Толстая цепь на левую руку"], [0, 7, 1, -1, 55, "Толстая цепь на правую руку"], [0, 6, 24, -1, 65, "Твёрдая цепь на левую руку"], [0, 7, 2, -1, 65, "Твёрдая цепь на левую руку"], [0, 6, 25, -1, 30, "Черепной браслет на левую руку"], [0, 7, 3, -1, 25, "Черепной браслет на левую руку"], [0, 6, 26, -1, 25, "Старый браслет на левую руку"], [0, 7, 4, -1, 25, "Старый браслет на левую руку"], [0, 6, 27, -1, 40, "Цепь с браслетами на левую руку"], [0, 7, 5, -1, 40, "Цепь с браслетами на левую руку"], [1, 0, 3, 0, 100, "Снепбек LS"], [1, 0, 15, 6, 95, "Наушники"], [1, 0, 22, 0, 125, "Новогодняя шапка Санты"], [1, 0, 23, -1, 150, "Шапка эльфа"], [1, 0, 24, -1, 85, "Рожки"], [1, 0, 43, 2, 135, "Новогодняя шапка Санты"], [1, 0, 55, 24, 120, "Фирменная бейсболка"], [1, 0, 56, 8, 140, "Фирменный снепбек"], [1, 0, 58, 1, 100, "Заказная кепка"], [1, 0, 63, 8, 110, "Бейсболка"], [1, 0, 96, 14, 115, "Заказная бейсболка"], [1, 0, 109, 9, 95, "Кепка в сетку (козырёк вперёд)"], [1, 0, 110, 9, 95, "Кепка в сетку (козырёк назад)"], [1, 0, 120, 24, 95, "Большая шапка"], [1, 1, 7, 9, 100, "Прямоугольные вайфареры"], [1, 1, 12, 9, 120, "Круглые очки"], [1, 1, 13, 9, 115, "Хипстер-Квадратные очки"], [1, 1, 19, 9, 120, "Хипстер-Выгнутые очки"], [1, 1, 20, 9, 90, "Вайфареры"], [1, 1, 21, -1, 70, "Патриотические звёдочки"], [1, 1, 22, -1, 60, "Патриотические очки"], [2, 0, 12, 1, 260, "Гангстерская шляпа"], [2, 0, 21, 6, 225, "Порк-Пай"], [2, 0, 25, 1, 260, "Гангстерская шляпа"], [2, 0, 26, 12, 280, "Котелок"], [2, 0, 27, 12, 310, "Цилиндр"], [2, 0, 29, 6, 235, "Трибли"], [2, 0, 30, 0, 260, "Гангстерская шляпа"], [2, 0, 31, -1, 225, "Патриотичная шляпа"], [2, 0, 32, -1, 335, "Патриотичный цилиндр"], [2, 0, 33, 0, 355, "Патриотичный боливар"], [2, 0, 61, 8, 260, "Гангстерская шляпа"], [2, 0, 64, 10, 260, "Гангстерская шляпа"], [2, 0, 95, 8, 310, "Федора"], [2, 1, 2, 4, 250, "Толстые очки"], [2, 1, 3, 9, 210, "Панто"], [2, 1, 4, 9, 240, "Кламбастер"], [2, 1, 10, 9, 290, "Заказные толстые очки"], [2, 1, 11, 9, 315, "Прямоугольные очки"], [2, 1, 18, 9, 255, "Широкие очки"], [3, 0, 0, 6, 80, "Наушники для стрельбы"], [3, 0, 103, 18, 110, "Камуфляжная заказная кепка"], [3, 0, 104, 24, 95, "Камуфляжная панама"], [3, 0, 105, 24, 95, "Камуфляжная охотничья панама"], [3, 0, 106, 24, 85, "Камуфляжный берет"], [3, 0, 107, 24, 125, "Камуфляжная армейская кепка"], [3, 0, 108, 24, 65, "Камуфляжная вязаная кепка"], [3, 1, 23, 8, 40, "Очки для стрельбы"], [3, 1, 24, 4, 145, "Очки лётчиков"], [3, 1, 25, 6, 210, "Мото-Очки"], [4, 2, 3, 1, 650, "Кольцо в левом ухе"], [4, 2, 4, 1, 650, "Кольцо в правом ухе"], [4, 2, 5, 1, 1300, "Кольца"], [4, 2, 6, 0, 450, "Клипса в левом ухе"], [4, 2, 7, 0, 450, "Клипса в правом ухе"], [4, 2, 8, 0, 900, "Клипсы"], [4, 2, 9, 1, 1500, "Даймонд в левом ухе"], [4, 2, 10, 1, 1500, "Даймонд в правом ухе"], [4, 2, 11, 1, 3000, "Даймонды"], [4, 2, 12, 1, 1100, "Звезда в левом ухе"], [4, 2, 13, 1, 1100, "Зевезда в правом ухе"], [4, 2, 14, 1, 2200, "Звезды"], [4, 2, 15, 1, 750, "Серьга в левом ухе"], [4, 2, 16, 1, 750, "Серьги в правом ухе"], [4, 2, 17, 1, 1500, "Серьги"], [4, 2, 18, 3, 850, "Кварт в левом ухе"], [4, 2, 19, 3, 850, "Кварт в правом ухе"], [4, 2, 20, 3, 1700, "Кварты"], [4, 2, 21, 0, 550, "Серьга S в лвеом ухе"], [4, 2, 22, 0, 550, "Серьга S в правом ухе"], [4, 2, 23, 0, 110, "Серьги S"], [4, 2, 24, 2, 600, "Череп в левом ухе"], [4, 2, 25, 2, 600, "Череп в правом ухе"], [4, 2, 26, 2, 1200, "Черепа"], [4, 2, 27, 0, 400, "Напрент в левом ухе"], [4, 2, 28, 0, 400, "Напрент в правом ухе"], [4, 2, 29, 0, 800, "Напренты"], [4, 2, 30, 1, 1250, "Сариот в левом ухе"], [4, 2, 31, 1, 1250, "Сариот в правом ухе"], [4, 2, 32, 1, 2500, "Сариоты"], [4, 2, 34, 0, 600, "Батенс в левом ухе"], [4, 2, 35, 0, 600, "Батенс в правом ухе"], [4, 2, 36, 0, 1200, "Батенсые"], [4, 6, 0, -1, 5500, "Фирменные механические часы"], [4, 6, 1, -1, 2200, "Фирменные электронные часы"], [4, 6, 3, 3, 1360, "Круглые механические часы"], [4, 6, 4, 2, 2600, "Эксклюзивные механические часы"], [4, 6, 5, 2, 2200, "Фирменные электронные часы"], [4, 6, 6, 1, 2800, "Морские механические часы"], [4, 6, 7, 1, 1900, "Ромбо-Электронные часы"], [4, 6, 8, 1, 3450, "Сложные механические часы"], [4, 6, 9, 1, 3900, "Авиаторские часы"], [4, 6, 10, 1, 2100, "Спортивные часы"], [4, 6, 11, 1, 3050, "Туртатовы механические часы"], [4, 6, 12, 1, 550, "Электронные часы"], [4, 6, 13, 1, 550, "Электронные часы"], [4, 6, 14, 1, 1860, "Браслетные механические часы"], [4, 6, 15, 1, 1650, "Вакумные механические часы"], [4, 6, 16, 1, 2100, "Сатовые механические часы"], [4, 6, 17, 1, 1900, "Ромбо-Электронные часы"], [4, 6, 18, 1, 2750, "Крупные механические часы"], [4, 6, 19, 1, 3450, "Цирста механические часы"], [4, 6, 20, 1, 2350, "Водолазные механические часы"], [4, 6, 21, 1, 890, "Электронные часы IFruit"], [5, 0, 2, 6, 10, "Шапка"], [5, 0, 5, 0, 15, "Длинная шапка"], [5, 0, 28, 4, 15, "Длинная шапка"], [5, 0, 6, 6, 35, "Армейская кепка"], [5, 0, 60, 8, 35, "Армейская кепка"], [5, 0, 7, 6, 15, "Кепи"], [5, 0, 13, 6, 40, "Ковбойская шляпа"], [5, 0, 14, 6, 15, "Бандана"], [5, 0, 83, 5, 20, "Байкерская бандана"], [5, 0, 20, 4, 25, "Панама"], [5, 0, 94, 8, 30, "Заказная панама"], [5, 0, 34, -1, 90, "Патриотичная вязаная шапка"], [5, 0, 35, -1, 45, "Патриотичная корона"], [5, 0, 36, -1, 40, "Патриотичные ушки"], [5, 0, 40, 6, 50, "Новогодняя длинная шапка"], [5, 0, 41, -1, 35, "Новогодняя шапка"], [5, 0, 42, 2, 40, "Новогодняя шапка с пумпоном"], [5, 0, 54, 0, 35, "Фирменный снепбек"], [5, 0, 44, 6, 35, "Новогодняя кепка (козырёк вперёд)"], [5, 0, 45, 6, 35, "Новогодняя кепка (козырёк назад)"], [5, 0, 76, 19, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 77, 19, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 130, 17, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 131, 17, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 132, 2, 25, "Фирменная панама"], [5, 0, 37, 4, 40, "Пивная кепка"], [5, 1, 5, 9, 25, "Авиаторы"], [5, 1, 8, 9, 35, "Заказные авиаторы"], [5, 1, 16, 9, 30, "Беговые очки"], [5, 1, 17, 9, 40, "Офисные очки"], [5, 1, 15, 9, 25, "Спортивные очки"], [5, 6, 22, -1, 45, "Цепь на левую руку"], [5, 7, 0, -1, 45, "Цепь на правую руку"], [5, 6, 23, -1, 55, "Толстая цепь на левую руку"], [5, 7, 1, -1, 55, "Толстая цепь на правую руку"], [5, 6, 24, -1, 65, "Твёрдая цепь на левую руку"], [5, 7, 2, -1, 65, "Твёрдая цепь на левую руку"], [5, 6, 25, -1, 30, "Черепной браслет на левую руку"], [5, 7, 3, -1, 25, "Черепной браслет на левую руку"], [5, 6, 27, -1, 40, "Цепь с браслетами на левую руку"], [5, 7, 5, -1, 40, "Цепь с браслетами на левую руку"], [5, 6, 28, -1, 75, "Байкерский браслет на левую руку"], [5, 7, 6, -1, 75, "Байкерский браслет на левую руку"], [5, 6, 29, 1, 40, "Кожаный браслет на левую руку"], [5, 7, 7, 1, 40, "Кожаный браслет на левую руку"]];
exports.propMutil = propMutil;
const printListUtil = [['mpbattle_overlays', 'MP_Battle_Clothing_000_M', 'MP_Battle_Clothing_000_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_001_M', 'MP_Battle_Clothing_001_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_002_M', 'MP_Battle_Clothing_002_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_003_M', 'MP_Battle_Clothing_003_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_004_M', 'MP_Battle_Clothing_004_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_005_M', 'MP_Battle_Clothing_005_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_006_M', 'MP_Battle_Clothing_006_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_007_M', 'MP_Battle_Clothing_007_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_008_M', 'MP_Battle_Clothing_008_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_009_M', 'MP_Battle_Clothing_009_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_010_M', 'MP_Battle_Clothing_010_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_011_M', 'MP_Battle_Clothing_011_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_012_M', 'MP_Battle_Clothing_012_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_013_M', 'MP_Battle_Clothing_013_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_014_M', 'MP_Battle_Clothing_014_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_015_M', 'MP_Battle_Clothing_015_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_016_M', 'MP_Battle_Clothing_016_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_017_M', 'MP_Battle_Clothing_017_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_018_M', 'MP_Battle_Clothing_018_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_019_M', 'MP_Battle_Clothing_019_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_020_M', 'MP_Battle_Clothing_020_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_021_M', 'MP_Battle_Clothing_021_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_022_M', 'MP_Battle_Clothing_022_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_023_M', 'MP_Battle_Clothing_023_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_024_M', 'MP_Battle_Clothing_024_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_025_M', 'MP_Battle_Clothing_025_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_026_M', 'MP_Battle_Clothing_026_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_027_M', 'MP_Battle_Clothing_027_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_028_M', 'MP_Battle_Clothing_028_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_029_M', 'MP_Battle_Clothing_029_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_030_M', 'MP_Battle_Clothing_030_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_031_M', 'MP_Battle_Clothing_031_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_032_M', 'MP_Battle_Clothing_032_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_033_M', 'MP_Battle_Clothing_033_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_034_M', 'MP_Battle_Clothing_034_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_035_M', 'MP_Battle_Clothing_035_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_036_M', 'MP_Battle_Clothing_036_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_037_M', 'MP_Battle_Clothing_037_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_038_M', 'MP_Battle_Clothing_038_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_039_M', 'MP_Battle_Clothing_039_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_040_M', 'MP_Battle_Clothing_040_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_041_M', 'MP_Battle_Clothing_041_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_042_M', 'MP_Battle_Clothing_042_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_043_M', 'MP_Battle_Clothing_043_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_044_M', 'MP_Battle_Clothing_044_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_045_M', 'MP_Battle_Clothing_045_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_046_M', 'MP_Battle_Clothing_046_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_047_M', 'MP_Battle_Clothing_047_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_048_M', 'MP_Battle_Clothing_048_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_049_M', 'MP_Battle_Clothing_049_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_050_M', 'MP_Battle_Clothing_050_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_051_M', 'MP_Battle_Clothing_051_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_052_M', 'MP_Battle_Clothing_052_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_053_M', 'MP_Battle_Clothing_053_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_054_M', 'MP_Battle_Clothing_054_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_055_M', 'MP_Battle_Clothing_055_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_056_M', 'MP_Battle_Clothing_056_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_057_M', 'MP_Battle_Clothing_057_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_058_M', 'MP_Battle_Clothing_058_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_059_M', 'MP_Battle_Clothing_059_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_060_M', 'MP_Battle_Clothing_060_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_061_M', 'MP_Battle_Clothing_061_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_062_M', 'MP_Battle_Clothing_062_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tat_000_M', 'MP_Christmas2018_Tat_000_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_000_M', 'MP_Christmas2018_Tee_000_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_001_M', 'MP_Christmas2018_Tee_001_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_002_M', 'MP_Christmas2018_Tee_002_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_003_M', 'MP_Christmas2018_Tee_003_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_004_M', 'MP_Christmas2018_Tee_004_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_005_M', 'MP_Christmas2018_Tee_005_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_006_M', 'MP_Christmas2018_Tee_006_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_007_M', 'MP_Christmas2018_Tee_007_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_008_M', 'MP_Christmas2018_Tee_008_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_009_M', 'MP_Christmas2018_Tee_009_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_010_M', 'MP_Christmas2018_Tee_010_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_011_M', 'MP_Christmas2018_Tee_011_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_012_M', 'MP_Christmas2018_Tee_012_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_013_M', 'MP_Christmas2018_Tee_013_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_014_M', 'MP_Christmas2018_Tee_014_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_015_M', 'MP_Christmas2018_Tee_015_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_016_M', 'MP_Christmas2018_Tee_016_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_017_M', 'MP_Christmas2018_Tee_017_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_018_M', 'MP_Christmas2018_Tee_018_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_019_M', 'MP_Christmas2018_Tee_019_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_020_M', 'MP_Christmas2018_Tee_020_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_021_M', 'MP_Christmas2018_Tee_021_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_022_M', 'MP_Christmas2018_Tee_022_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_023_M', 'MP_Christmas2018_Tee_023_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_024_M', 'MP_Christmas2018_Tee_024_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_025_M', 'MP_Christmas2018_Tee_025_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_026_M', 'MP_Christmas2018_Tee_026_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_027_M', 'MP_Christmas2018_Tee_027_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_028_M', 'MP_Christmas2018_Tee_028_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_029_M', 'MP_Christmas2018_Tee_029_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_030_M', 'MP_Christmas2018_Tee_030_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_031_M', 'MP_Christmas2018_Tee_031_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_032_M', 'MP_Christmas2018_Tee_032_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_033_M', 'MP_Christmas2018_Tee_033_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_034_M', 'MP_Christmas2018_Tee_034_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_035_M', 'MP_Christmas2018_Tee_035_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_036_M', 'MP_Christmas2018_Tee_036_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_037_M', 'MP_Christmas2018_Tee_037_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_038_M', 'MP_Christmas2018_Tee_038_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_039_M', 'MP_Christmas2018_Tee_039_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_040_M', 'MP_Christmas2018_Tee_040_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_041_M', 'MP_Christmas2018_Tee_041_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_042_M', 'MP_Christmas2018_Tee_042_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_043_M', 'MP_Christmas2018_Tee_043_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_044_M', 'MP_Christmas2018_Tee_044_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_045_M', 'MP_Christmas2018_Tee_045_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_046_M', 'MP_Christmas2018_Tee_046_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_047_M', 'MP_Christmas2018_Tee_047_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_048_M', 'MP_Christmas2018_Tee_048_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_049_M', 'MP_Christmas2018_Tee_049_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_050_M', 'MP_Christmas2018_Tee_050_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_051_M', 'MP_Christmas2018_Tee_051_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_052_M', 'MP_Christmas2018_Tee_052_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_053_M', 'MP_Christmas2018_Tee_053_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_054_M', 'MP_Christmas2018_Tee_054_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_055_M', 'MP_Christmas2018_Tee_055_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_056_M', 'MP_Christmas2018_Tee_056_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_057_M', 'MP_Christmas2018_Tee_057_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_058_M', 'MP_Christmas2018_Tee_058_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_059_M', 'MP_Christmas2018_Tee_059_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_060_M', 'MP_Christmas2018_Tee_060_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_061_M', 'MP_Christmas2018_Tee_061_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_062_M', 'MP_Christmas2018_Tee_062_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_063_M', 'MP_Christmas2018_Tee_063_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_064_M', 'MP_Christmas2018_Tee_064_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_065_M', 'MP_Christmas2018_Tee_065_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_066_M', 'MP_Christmas2018_Tee_066_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_067_M', 'MP_Christmas2018_Tee_067_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_068_M', 'MP_Christmas2018_Tee_068_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_069_M', 'MP_Christmas2018_Tee_069_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_070_M', 'MP_Christmas2018_Tee_070_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_071_M', 'MP_Christmas2018_Tee_071_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_072_M', 'MP_Christmas2018_Tee_072_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_073_M', 'MP_Christmas2018_Tee_073_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_074_M', 'MP_Christmas2018_Tee_074_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_075_M', 'MP_Christmas2018_Tee_075_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_076_M', 'MP_Christmas2018_Tee_076_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_077_M', 'MP_Christmas2018_Tee_077_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_078_M', 'MP_Christmas2018_Tee_078_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_079_M', 'MP_Christmas2018_Tee_079_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_080_M', 'MP_Christmas2018_Tee_080_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_081_M', 'MP_Christmas2018_Tee_081_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_082_M', 'MP_Christmas2018_Tee_082_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_083_M', 'MP_Christmas2018_Tee_083_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_084_M', 'MP_Christmas2018_Tee_084_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_085_M', 'MP_Christmas2018_Tee_085_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_086_M', 'MP_Christmas2018_Tee_086_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_087_M', 'MP_Christmas2018_Tee_087_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_088_M', 'MP_Christmas2018_Tee_088_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_089_M', 'MP_Christmas2018_Tee_089_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_090_M', 'MP_Christmas2018_Tee_090_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_091_M', 'MP_Christmas2018_Tee_091_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_092_M', 'MP_Christmas2018_Tee_092_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_093_M', 'MP_Christmas2018_Tee_093_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_094_M', 'MP_Christmas2018_Tee_094_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_095_M', 'MP_Christmas2018_Tee_095_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_096_M', 'MP_Christmas2018_Tee_096_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_097_M', 'MP_Christmas2018_Tee_097_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_098_M', 'MP_Christmas2018_Tee_098_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_099_M', 'MP_Christmas2018_Tee_099_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_100_M', 'MP_Christmas2018_Tee_100_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_101_M', 'MP_Christmas2018_Tee_101_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_102_M', 'MP_Christmas2018_Tee_102_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_103_M', 'MP_Christmas2018_Tee_103_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_104_M', 'MP_Christmas2018_Tee_104_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_105_M', 'MP_Christmas2018_Tee_105_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_106_M', 'MP_Christmas2018_Tee_106_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_107_M', 'MP_Christmas2018_Tee_107_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_108_M', 'MP_Christmas2018_Tee_108_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_109_M', 'MP_Christmas2018_Tee_109_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_110_M', 'MP_Christmas2018_Tee_110_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_111_M', 'MP_Christmas2018_Tee_111_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_112_M', 'MP_Christmas2018_Tee_112_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_113_M', 'MP_Christmas2018_Tee_113_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_114_M', 'MP_Christmas2018_Tee_114_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_115_M', 'MP_Christmas2018_Tee_115_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_116_M', 'MP_Christmas2018_Tee_116_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_117_M', 'MP_Christmas2018_Tee_117_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_118_M', 'MP_Christmas2018_Tee_118_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_119_M', 'MP_Christmas2018_Tee_119_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_120_M', 'MP_Christmas2018_Tee_120_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_121_M', 'MP_Christmas2018_Tee_121_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_122_M', 'MP_Christmas2018_Tee_122_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_123_M', 'MP_Christmas2018_Tee_123_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_124_M', 'MP_Christmas2018_Tee_124_F', 0], ['mpexecutive_overlays', 'MP_Securoserv_000_M', 'MP_Securoserv_000_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_000_M', 'MP_exec_teams_000_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_001_M', 'MP_exec_teams_001_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_002_M', 'MP_exec_teams_002_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_003_M', 'MP_exec_teams_003_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_000_M', 'MP_exec_prizes_000_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_001_M', 'MP_exec_prizes_001_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_002_M', 'MP_exec_prizes_002_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_003_M', 'MP_exec_prizes_003_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_004_M', 'MP_exec_prizes_004_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_005_M', 'MP_exec_prizes_005_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_006_M', 'MP_exec_prizes_006_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_007_M', 'MP_exec_prizes_007_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_008_M', 'MP_exec_prizes_008_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_009_M', 'MP_exec_prizes_009_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_010_M', 'MP_exec_prizes_010_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_011_M', 'MP_exec_prizes_011_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_012_M', 'MP_exec_prizes_012_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_013_M', 'MP_exec_prizes_013_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_014_M', 'MP_exec_prizes_014_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_015_M', 'MP_exec_prizes_015_F', 0], ['mphalloween_overlays', 'HW_Tee_000_M', 'HW_Tee_000_F', 0], ['mphalloween_overlays', 'HW_Tee_002_M', 'HW_Tee_002_F', 0], ['mphalloween_overlays', 'HW_Tee_004_M', 'HW_Tee_004_F', 0], ['mphalloween_overlays', 'HW_Tee_006_M', 'HW_Tee_006_F', 0], ['mphalloween_overlays', 'HW_Tee_008_M', 'HW_Tee_008_F', 0], ['mphalloween_overlays', 'HW_Tee_010_M', 'HW_Tee_010_F', 0], ['mphalloween_overlays', 'HW_Tee_012_M', 'HW_Tee_012_F', 0], ['mphalloween_overlays', 'HW_Tee_001_M', 'HW_Tee_001_F', 0], ['mphalloween_overlays', 'HW_Tee_003_M', 'HW_Tee_003_F', 0], ['mphalloween_overlays', 'HW_Tee_005_M', 'HW_Tee_005_F', 0], ['mphalloween_overlays', 'HW_Tee_007_M', 'HW_Tee_007_F', 0], ['mphalloween_overlays', 'HW_Tee_009_M', 'HW_Tee_009_F', 0], ['mphalloween_overlays', 'HW_Tee_011_M', 'HW_Tee_011_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_000_M', 'MP_Vinewood_Tee_000_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_001_M', 'MP_Vinewood_Tee_001_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_002_M', 'MP_Vinewood_Tee_002_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_003_M', 'MP_Vinewood_Tee_003_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_004_M', 'MP_Vinewood_Tee_004_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_005_M', 'MP_Vinewood_Tee_005_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_006_M', 'MP_Vinewood_Tee_006_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_007_M', 'MP_Vinewood_Tee_007_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_008_M', 'MP_Vinewood_Tee_008_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_009_M', 'MP_Vinewood_Tee_009_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_010_M', 'MP_Vinewood_Tee_010_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_011_M', 'MP_Vinewood_Tee_011_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_012_M', 'MP_Vinewood_Tee_012_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_013_M', 'MP_Vinewood_Tee_013_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_014_M', 'MP_Vinewood_Tee_014_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_015_M', 'MP_Vinewood_Tee_015_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_016_M', 'MP_Vinewood_Tee_016_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_017_M', 'MP_Vinewood_Tee_017_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_018_M', 'MP_Vinewood_Tee_018_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_019_M', 'MP_Vinewood_Tee_019_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_020_M', 'MP_Vinewood_Tee_020_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_021_M', 'MP_Vinewood_Tee_021_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_022_M', 'MP_Vinewood_Tee_022_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_023_M', 'MP_Vinewood_Tee_023_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_024_M', 'MP_Vinewood_Tee_024_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_025_M', 'MP_Vinewood_Tee_025_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_026_M', 'MP_Vinewood_Tee_026_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_027_M', 'MP_Vinewood_Tee_027_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_028_M', 'MP_Vinewood_Tee_028_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_029_M', 'MP_Vinewood_Tee_029_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_000_M', 'MP_Gunrunning_Award_000_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_001_M', 'MP_Gunrunning_Award_001_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_002_M', 'MP_Gunrunning_Award_002_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_003_M', 'MP_Gunrunning_Award_003_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_004_M', 'MP_Gunrunning_Award_004_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_005_M', 'MP_Gunrunning_Award_005_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_006_M', 'MP_Gunrunning_Award_006_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_007_M', 'MP_Gunrunning_Award_007_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_008_M', 'MP_Gunrunning_Award_008_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_009_M', 'MP_Gunrunning_Award_009_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_010_M', 'MP_Gunrunning_Award_010_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_011_M', 'MP_Gunrunning_Award_011_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_012_M', 'MP_Gunrunning_Award_012_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_013_M', 'MP_Gunrunning_Award_013_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_014_M', 'MP_Gunrunning_Award_014_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_015_M', 'MP_Gunrunning_Award_015_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_016_M', 'MP_Gunrunning_Award_016_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_017_M', 'MP_Gunrunning_Award_017_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_018_M', 'MP_Gunrunning_Award_018_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_019_M', 'MP_Gunrunning_Award_019_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_020_M', 'MP_Gunrunning_Award_020_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_021_M', 'MP_Gunrunning_Award_021_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_022_M', 'MP_Gunrunning_Award_022_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_023_M', 'MP_Gunrunning_Award_023_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_024_M', 'MP_Gunrunning_Award_024_F', 0], ['mplowrider_overlays', 'MP_Broker_000_M', 'MP_Broker_000_F', 0], ['mplowrider_overlays', 'MP_Broker_001_M', 'MP_Broker_001_F', 0], ['mplowrider_overlays', 'MP_Broker_002_M', 'MP_Broker_002_F', 0], ['mplowrider2_overlays', 'MP_Chianski_000_M', 'MP_Chianski_000_F', 0], ['mplowrider2_overlays', 'MP_Chianski_001_M', 'MP_Chianski_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_004_M', 'MP_LUXE_LC_004_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_011_M', 'MP_LUXE_LC_005_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_005_M', 'MP_LUXE_LC_010_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_010_M', 'MP_LUXE_LC_011_F', 0], ['mpluxe_overlays', 'MP_LUXE_ENEMA_000_M', 'MP_LUXE_Enema_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_Per_001_M', 'MP_LUXE_Per_001_F', 0], ['mpluxe_overlays', 'MP_FAKE_SN_000_M', 'MP_FAKE_LB_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_SC_000_M', 'MP_FAKE_LC_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DS_000_M', 'MP_FAKE_ENEMA_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_Vap_000_M', 'MP_FAKE_Per_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DIS_000_M', 'MP_FAKE_SN_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DIS_001_M', 'MP_FAKE_SC_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_000_M', 'MP_FAKE_DS_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_001_M', 'MP_FAKE_Vap_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_002_M', 'MP_FAKE_DIS_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_000_M', 'MP_FAKE_DIS_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_001_M', 'MP_LUXE_DIX_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_002_M', 'MP_LUXE_DIX_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_003_M', 'MP_LUXE_DIX_002_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_004_M', 'MP_LUXE_SN_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_005_M', 'MP_LUXE_SN_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_006_M', 'MP_LUXE_SN_002_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_007_M', 'MP_LUXE_SN_003_F', 0], ['mpluxe_overlays', 'MP_FILM_000_M', 'MP_LUXE_SN_004_F', 0], ['mpluxe_overlays', 'MP_FILM_001_M', 'MP_LUXE_SN_005_F', 0], ['mpluxe_overlays', 'MP_FILM_002_M', 'MP_LUXE_SN_006_F', 0], ['mpluxe_overlays', 'MP_FILM_003_M', 'MP_LUXE_SN_007_F', 0], ['mpluxe_overlays', 'MP_FILM_004_M', 'MP_LUXE_SC_000_F', 0], ['mpluxe_overlays', 'MP_FILM_005_M', 'MP_FILM_000_F', 0], ['mpluxe_overlays', 'MP_FILM_006_M', 'MP_FILM_001_F', 0], ['mpluxe_overlays', 'MP_FILM_007_M', 'MP_FILM_002_F', 0], ['mpluxe_overlays', 'MP_FILM_008_M', 'MP_FILM_003_F', 0], ['mpluxe_overlays', 'MP_FILM_009_M', 'MP_FILM_004_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_000_M', 'MP_LUXE_LC_000_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_001_M', 'MP_LUXE_LC_001_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_002_M', 'MP_LUXE_LC_002_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_003_M', 'MP_LUXE_LC_003_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_006_M', 'MP_LUXE_LC_006_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_007_M', 'MP_LUXE_LC_007_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_008_M', 'MP_LUXE_LC_008_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_009_M', 'MP_LUXE_LC_009_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_012_M', 'MP_LUXE_LC_012_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_013_M', 'MP_LUXE_LC_013_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_014_M', 'MP_LUXE_LC_014_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_015_M', 'MP_LUXE_LC_015_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_000_M', 'MP_LUXE_VDG_000_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_001_M', 'MP_LUXE_VDG_001_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_002_M', 'MP_LUXE_VDG_002_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_004_M', 'MP_LUXE_VDG_004_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_005_M', 'MP_LUXE_VDG_005_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_006_M', 'MP_LUXE_VDG_006_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_000_M', 'MP_Smuggler_Graphic_000_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_001_M', 'MP_Smuggler_Graphic_001_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_002_M', 'MP_Smuggler_Graphic_002_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_003_M', 'MP_Smuggler_Graphic_003_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_004_M', 'MP_Smuggler_Graphic_004_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_005_M', 'MP_Smuggler_Graphic_005_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_006_M', 'MP_Smuggler_Graphic_006_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_007_M', 'MP_Smuggler_Graphic_007_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_008_M', 'MP_Smuggler_Graphic_008_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_009_M', 'MP_Smuggler_Graphic_009_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_010_M', 'MP_Smuggler_Graphic_010_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_011_M', 'MP_Smuggler_Graphic_011_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_012_M', 'MP_Smuggler_Graphic_012_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_013_M', 'MP_Smuggler_Graphic_013_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_014_M', 'MP_Smuggler_Graphic_014_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_015_M', 'MP_Smuggler_Graphic_015_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_016_M', 'MP_Smuggler_Graphic_016_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_017_M', 'MP_Smuggler_Graphic_017_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_018_M', 'MP_Smuggler_Graphic_018_F', 0]];
exports.printListUtil = printListUtil;
const houseFridgeAmount = [100000, 500000, 1000000];
exports.houseFridgeAmount = houseFridgeAmount;
const houseFridgeCost = 250000;
exports.houseFridgeCost = houseFridgeCost;
},{}],"ZRYf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enums = void 0;

var _sharedData = require("../util/sharedData");

var _inventory = require("../util/inventory");

let enums = {
  lscSNames: [['Привод', 1000], ['Ускорение', 100000], ['Мощность Двигателя', 150000], ['Сила торможения', 50], ['Распределение силы торм.', 50], ['Ручной тормоз', 50], ['Угол поворота колёс', 200], ['Сцепление колес на повороте', 50], ['Пробуксовка колес', 50]],
  world: -10,
  houseData: ["id", "address", "price", "name_user", "id_user", "is_buy", "pin", "x", "y", "z", "int_x", "int_y", "int_z"],
  hairOverlays: [],
  mafiaVehPos: [[2928.988, 4326.465, 50.24669, 110.217], [2435.031, 5849.181, 58.25533, 212.8665], [6.348791, 6991.53, 2.57166, 127.8678], [-510.0732, 5264.707, 80.42155, 142.493], [-1132.549, 2694.568, 18.61222, 136.3167], [2792.521, -586.8479, 4.593227, 202.1658], [2610.733, 1779.282, 14.89643, 54.15783], [3821.329, 4495.155, 4.003921, 200.5734], [3346.39, 5460.819, 21.0535, 152.928], [2550.72, 4650.93, 34.08, 26.71], [2313.962, 4856.113, 41.62167, 226.6534], [2015.526, 4980.063, 41.0751, 211.3261], [1705.282, 4820.805, 41.82844, 358.1678], [1638.058, 4858.017, 41.83628, 152.9237], [1376.23, 4294.902, 36.58451, 34.89478], [764.3878, 4153.446, 32.82285, 257.7639], [-217.1819, 3643.204, 51.57141, 198.9409], [448.8071, 3523.698, 33.37255, 96.53196], [895.5853, 3610.553, 32.63937, 282.7461], [1377.589, 3620.44, 34.70487, 179.3007], [1709.564, 3318.991, 40.99873, 44.82842]],
  vehicleInfo: [],
  vehicleList: [[-339587598, -1391.72, -477.8636, 95, -55.99735, 0, 1, 1], [1747439474, -1377.495, -459.2538, 34.86133, 99.16083, 0, 1, 1], [-1647941228, -1370.491, -467.1421, 32.4334, -170.7789, 0, 1, 1], [-1647941228, -1373.51, -467.5733, 32.43316, -171.277, 0, 1, 1], [-1647941228, -1379.562, -468.2275, 31.77331, -171.2004, 0, 1, 1], [-1647941228, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [-1647941228, -1370.491, -467.1421, 32.4334, -170.7789, 0, 1, 1], [-1647941228, -1373.51, -467.5733, 32.43316, -171.277, 0, 1, 1], [-1647941228, -1379.562, -468.2275, 31.77331, -171.2004, 0, 1, 1], [-1647941228, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [-789894171, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [-789894171, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [-789894171, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [-789894171, -1376.491, -467.7586, 31.77373, -171.051, 0, 1, 1], [1777363799, -1385.604, -469.2113, 31.77853, -169.7209, 0, 1, 1], [1777363799, -1388.644, -469.6116, 31.77811, -170.8712, 0, 1, 1], [1777363799, -1391.68, -470.1049, 31.77792, -171.0692, 0, 1, 1], [1777363799, -1394.634, -470.4761, 31.77771, -171.2196, 0, 1, 1], [1777363799, -1385.604, -469.2113, 31.77853, -169.7209, 0, 1, 1], [1777363799, -1388.644, -469.6116, 31.77811, -170.8712, 0, 1, 1], [1777363799, -1391.68, -470.1049, 31.77792, -171.0692, 0, 1, 1], [1777363799, -1394.634, -470.4761, 31.77771, -171.2196, 0, 1, 1], [1777363799, -1382.631, -468.5449, 31.77894, -171.5829, 0, 1, 1], [-1961627517, -1377.495, -459.2538, 34.86133, 99.16083, 0, 1, 1], [1777363799, -1391.68, -470.1049, 31.77792, -171.0692, 0, 1, 1], [1777363799, -1394.634, -470.4761, 31.77771, -171.2196, 0, 1, 1], [1777363799, -1382.631, -468.5449, 31.77894, -171.5829, 0, 1, 1], [-1961627517, -1377.495, -459.2538, 34.86133, 99.16083, 0, 1, 1], [-1627000575, 408.007446, -998.1617, 28.7433681, 50.7180634, 0, 2, 1], [-1627000575, 434.9775, -1026.50513, 28.2837849, -175.8637, 0, 2, 1], [-1627000575, 412.981384, -1028.69446, 28.8497639, -176.702469, 0, 2, 1], [-1627000575, 451.72702, -1024.95361, 28.0078468, -175.249481, 0, 2, 1], [-1627000575, 408.007446, -998.1617, 28.7433681, 50.7180634, 0, 2, 1], [-1627000575, 434.9775, -1026.50513, 28.2837849, -175.8637, 0, 2, 1], [-1627000575, 412.981384, -1028.69446, 28.8497639, -176.702469, 0, 2, 1], [-1627000575, 451.72702, -1024.95361, 28.0078468, -175.249481, 0, 2, 1], [-1627000575, 408.007446, -998.1617, 28.7433681, 50.7180634, 0, 2, 1], [-1627000575, 434.9775, -1026.50513, 28.2837849, -175.8637, 0, 2, 1], [-1627000575, 412.981384, -1028.69446, 28.8497639, -176.702469, 0, 2, 1], [-1627000575, 451.72702, -1024.95361, 28.0078468, -175.249481, 0, 2, 1], [-1627000575, 408.007446, -998.1617, 28.7433681, 50.7180634, 0, 2, 1], [-1627000575, 434.9775, -1026.50513, 28.2837849, -175.8637, 0, 2, 1], [-1627000575, 412.981384, -1028.69446, 28.8497639, -176.702469, 0, 2, 1], [-1627000575, 451.72702, -1024.95361, 28.0078468, -175.249481, 0, 2, 1], [2046537925, 407.959625, -993.3247, 28.956152, -127.544472, 0, 2, 1], [2046537925, 407.660431, -984.1768, 28.9562473, 52.6035652, 0, 2, 1], [2046537925, 454.5975, -1024.45667, 28.11097, 3.99683475, 0, 2, 1], [2046537925, 421.2249, -1028.03589, 28.78609, -177.3017, 0, 2, 1], [2046537925, 418.384338, -1027.93884, 28.8355274, 3.89913535, 0, 2, 1], [2046537925, 407.959625, -993.3247, 28.956152, -127.544472, 0, 2, 1], [2046537925, 407.660431, -984.1768, 28.9562473, 52.6035652, 0, 2, 1], [2046537925, 454.5975, -1024.45667, 28.11097, 3.99683475, 0, 2, 1], [2046537925, 421.2249, -1028.03589, 28.78609, -177.3017, 0, 2, 1], [2046537925, 418.384338, -1027.93884, 28.8355274, 3.89913535, 0, 2, 1], [1912215274, 408.215973, -980.040039, 29.076685, 50.98494, 0, 2, 1], [1912215274, 445.91156, -1025.81409, 28.4561367, 5.48041, 0, 2, 1], [1912215274, 448.826141, -1025.29993, 28.39584, -173.750229, 0, 2, 1], [1912215274, 431.3187, -1027.3761, 28.7926826, 3.591084, 0, 2, 1], [1912215274, 427.45752, -1027.3761, 28.7926826, 2.901675, 0, 2, 1], [1912215274, 424.073425, -1027.92053, 28.8531818, -174.7794, 0, 2, 1], [1912215274, 408.215973, -980.040039, 29.076685, 50.98494, 0, 2, 1], [1912215274, 445.91156, -1025.81409, 28.4561367, 5.48041, 0, 2, 1], [1912215274, 448.826141, -1025.29993, 28.39584, -173.750229, 0, 2, 1], [1912215274, 431.3187, -1027.3761, 28.7926826, 3.591084, 0, 2, 1], [1912215274, 427.45752, -1027.3761, 28.7926826, 2.901675, 0, 2, 1], [1912215274, 424.073425, -1027.92053, 28.8531818, -174.7794, 0, 2, 1], [-1973172295, 407.815826, -988.8089, 28.916975, 51.9227676, 0, 2, 1], [-1973172295, 438.6134, -1026.11841, 28.4207458, 3.37135887, 0, 2, 1], [-1973172295, 477.0093, -1024.56946, 27.7224846, -37.32177, 0, 2, 1], [-1973172295, 472.682526, -1024.87109, 27.80566, -36.1004333, 0, 2, 1], [-1973172295, 447.375336, -997.053162, 25.4051456, 178.574646, 0, 2, 1], [-1973172295, 472.682526, -1024.87109, 27.80566, -36.1004333, 0, 2, 1], [-1973172295, 447.375336, -997.053162, 25.4051456, 178.574646, 0, 2, 1], [456714581, 463.163361, -1019.68317, 28.073616, 90.5163345, 0, 2, 1], [456714581, 463.168365, -1014.61212, 28.0576935, 90.64979, 0, 2, 1], [456714581, 463.168365, -1014.61212, 28.0576935, 90.64979, 0, 2, 1], [456714581, 463.168365, -1014.61212, 28.0576935, 90.64979, 0, 2, 1], [456714581, 463.168365, -1014.61212, 28.0576935, 90.64979, 0, 2, 1], [1127131465, 415.772125, -1028.54529, 28.8971272, 2.6902833, 0, 2, 1], [1127131465, 485.770477, -1023.364, 27.6946888, -43.08424, 0, 2, 1], [1127131465, 481.320038, -1023.82343, 27.6693974, 137.642731, 0, 2, 1], [1127131465, 415.772125, -1028.54529, 28.8971272, 2.6902833, 0, 2, 1], [1127131465, 485.770477, -1023.364, 27.6946888, -43.08424, 0, 2, 1], [1127131465, 481.320038, -1023.82343, 27.6693974, 137.642731, 0, 2, 1], [-34623805, 473.574677, -1018.60907, 27.5529251, 173.187408, 0, 2, 1], [-34623805, 467.311554, -1025.05737, 27.7351875, -1.78594756, 0, 2, 1], [-34623805, 468.483124, -1025.18274, 27.71445, -4.71007824, 0, 2, 1], [-34623805, 472.393433, -1018.89862, 27.62787, -179.996017, 0, 2, 1], [-1647941228, 452.4956, -997.3612, 25.40839, -179.389175, 0, 2, 1], [-1647941228, 452.4956, -997.3612, 25.40839, -179.389175, 0, 2, 1], [-1647941228, 452.4956, -997.3612, 25.40839, -179.389175, 0, 2, 1], [-1696146015, 452.4956, -997.3612, 25.40839, -179.389175, 0, 2, 1], [1777363799, 452.4956, -997.3612, 25.40839, -179.389175, 0, 2, 1], [-1205689942, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [-1205689942, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [-1205689942, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [-1693015116, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [2071877360, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [2071877360, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [2071877360, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [2071877360, 442.31015, -1025.24011, 28.3292885, 5.36804533, 0, 2, 1], [353883353, 481.603058, -983.44165, 41.39667, 15.7692137, 0, 2, 1], [353883353, 450.112152, -981.5206, 44.0782, 103.224983, 0, 2, 1], [745926877, 481.603058, -983.44165, 41.39667, 15.7692137, 0, 2, 1], [-1647941228, 114.807617, -697.3794, 32.7370453, -19.5052032, 0, 3, 1], [-1647941228, 110.943886, -696.079834, 32.7371674, -18.5926456, 0, 3, 1], [-1647941228, 107.222168, -694.7215, 32.7373734, -20.4042473, 0, 3, 1], [-1647941228, 103.530167, -693.4854, 32.7385178, -18.612999, 0, 3, 1], [296357396, 133.852692, -704.550354, 32.9329529, -20.33677, 0, 3, 1], [1127131465, 129.955643, -703.000061, 32.76512, -19.9364281, 0, 3, 1], [1127131465, 129.955643, -703.000061, 32.76512, -19.9364281, 0, 3, 1], [1127131465, 126.284256, -701.590637, 32.7618637, -20.4183025, 0, 3, 1], [1127131465, 126.284256, -701.590637, 32.7618637, -20.4183025, 0, 3, 1], [-1647941228, 118.5985, -698.8889, 32.7372055, -19.5338364, 0, 3, 1], [-1973172295, 148.4688, -687.6543, 32.73497, 68.93023, 0, 3, 1], [-1973172295, 149.6941, -684.1737, 32.73618, 69.41637, 0, 3, 1], [1949211328, 122.5337, -743.5278, 262.5617, 160.264, 0, 3, 1], [745926877, 122.5337, -743.5278, 262.5617, 160.264, 0, 3, 1], [2071877360, 122.5953, -699.7321, 33.04465, -19.33524, 0, 3, 1], [2071877360, 122.5953, -699.7321, 33.04465, -19.33524, 0, 3, 1], [-808457413, -2271.19, 3168.29, 32.81, 234.84, 0, 4, 1], [-808457413, -2271.19, 3168.29, 32.81, 234.84, 0, 4, 1], [-808457413, -2271.19, 3168.29, 32.81, 234.84, 0, 4, 1], [-808457413, -2271.19, 3168.29, 32.81, 234.84, 0, 4, 1], [321739290, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [321739290, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [321739290, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [321739290, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [-823509173, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [-823509173, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [1074326203, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [1074326203, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [630371791, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [630371791, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 2], [-1973172295, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1973172295, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1973172295, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1973172295, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-2107990196, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-2107990196, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-2107990196, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-2107990196, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-121446169, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-121446169, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-121446169, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-121446169, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [1127131465, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [1127131465, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [1127131465, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [1127131465, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-1647941228, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-1647941228, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-1647941228, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-1647941228, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [2071877360, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 5], [2071877360, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 5], [2071877360, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 5], [2071877360, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 5], [-1660661558, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1660661558, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1660661558, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-1660661558, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 3], [-50547061, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [-50547061, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [2025593404, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [2025593404, -2267.19, 3173.29, 32.81, 234.84, 0, 4, 4], [mp.joaat("Buzzard2"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("Buzzard2"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("Valkyrie"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("Valkyrie"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("besra"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("besra"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("besra"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("besra"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("apc"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [mp.joaat("CaraCara2"), -2267.19, 3173.29, 32.81, 234.84, 0, 4, 10], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [509498602, 3093.650634765625, -4801.869140625, -0.720759242773056, 178.6262969970703, 0, 104, 1], [-1030275036, 3083.794677734375, -4803.39794921875, -0.8248831927776337, 178.6262969970703, 0, 104, 1], [-1030275036, 3083.794677734375, -4803.39794921875, -0.8248831927776337, 178.6262969970703, 0, 104, 1], [-1030275036, 3083.794677734375, -4803.39794921875, -0.8248831927776337, 178.6262969970703, 0, 104, 1], [-1030275036, 3083.794677734375, -4803.39794921875, -0.8248831927776337, 178.6262969970703, 0, 104, 1], [-1030275036, 3083.794677734375, -4803.39794921875, -0.8248831927776337, 178.6262969970703, 0, 104, 1], [2025593404, 3071.720458984375, -4614.70166015625, 14.724569320678711, 108.33057403564453, 0, 104, 4], [2025593404, 3071.720458984375, -4614.70166015625, 14.724569320678711, 108.33057403564453, 0, 104, 4], [2025593404, 3071.720458984375, -4614.70166015625, 14.724569320678711, 108.33057403564453, 0, 104, 4], [2025593404, 3071.720458984375, -4614.70166015625, 14.724569320678711, 108.33057403564453, 0, 104, 4], [-2118308144, 3046.568359375, -4760.65087890625, 15.908147811889648, 261.1978454589844, 0, 104, 13], [-2118308144, 3046.568359375, -4760.65087890625, 15.908147811889648, 261.1978454589844, 0, 104, 13], [-1683328900, -448.2738, 5994.26, 30.94682, 267.3126, 0, 7, 1], [-1683328900, -448.2738, 5994.26, 30.94682, 267.3126, 0, 7, 1], [-1683328900, -448.2738, 5994.26, 30.94682, 267.3126, 0, 7, 1], [-1683328900, -448.2738, 5994.26, 30.94682, 267.3126, 0, 7, 1], [-1683328900, -451.2171, 5998.25, 30.94555, 87.66811, 0, 7, 1], [-1683328900, -451.2171, 5998.25, 30.94555, 87.66811, 0, 7, 1], [-1683328900, -451.2171, 5998.25, 30.94555, 87.66811, 0, 7, 1], [-1683328900, -454.7001, 6002.032, 30.94489, 87.32481, 0, 7, 1], [-1683328900, -454.7001, 6002.032, 30.94489, 87.32481, 0, 7, 1], [-1683328900, -454.7001, 6002.032, 30.94489, 87.32481, 0, 7, 1], [-1683328900, -482.6332, 6024.743, 30.96289, 227.526, 0, 7, 1], [-1683328900, -482.6332, 6024.743, 30.96289, 227.526, 0, 7, 1], [-1683328900, -482.6332, 6024.743, 30.96289, 227.526, 0, 7, 1], [-1683328900, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [-1683328900, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [-1683328900, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [-1696146015, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [741586030, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [741586030, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [741586030, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [741586030, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [1777363799, -479.4298, 6028.149, 30.9455, 222.9849, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [1922257928, -475.536, 6031.286, 30.94596, 224.4957, 0, 7, 1], [-1647941228, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [-1647941228, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [1127131465, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [1127131465, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [1127131465, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [1127131465, -471.9697, 6034.941, 30.94519, 223.9299, 0, 7, 1], [-1693015116, -471.29, 6034.06, 31.18, 223.9299, 0, 7, 1], [-1693015116, -471.29, 6034.06, 31.18, 223.9299, 0, 7, 1], [-1973172295, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [-1973172295, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [-1973172295, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [-1973172295, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [2071877360, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [2071877360, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [2071877360, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [2071877360, -468.6144, 6038.341, 30.96107, 222.2262, 0, 7, 1], [745926877, -475.2986, 5989.999, 31.23412, 204.0777, 0, 7, 1], [745926877, -475.2986, 5989.999, 31.23412, 204.0777, 0, 7, 1], [-726768679, -475.2986, 5989.999, 31.23412, 204.0777, 0, 7, 1], [-726768679, -475.2986, 5989.999, 31.23412, 204.0777, 0, 7, 1], [-488123221, -697.95925, 6281.9863, -0.321791, 86.6913, 0, 7, 1], [-488123221, -697.95925, 6281.9863, -0.321791, 86.6913, 0, 7, 1], [-488123221, -697.95925, 6281.9863, -0.321791, 86.6913, 0, 7, 1], [-488123221, -697.95925, 6281.9863, -0.321791, 86.6913, 0, 7, 1], [-1683328900, 1866.79052734375, 3694.53759765625, 32.29252624511719, 205.4530792236328, 0, 107, 1], [-1683328900, 1866.79052734375, 3694.53759765625, 32.29252624511719, 205.4530792236328, 0, 107, 1], [-1683328900, 1866.79052734375, 3694.53759765625, 32.29252624511719, 205.4530792236328, 0, 107, 1], [-1683328900, 1866.79052734375, 3694.53759765625, 32.29252624511719, 205.4530792236328, 0, 107, 1], [-1683328900, 1866.79052734375, 3694.53759765625, 32.29252624511719, 205.4530792236328, 0, 107, 1], [1922257928, 1861.977783203125, 3702.205078125, 32.198909759521484, 201.99081420898438, 0, 107, 1], [1922257928, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [1922257928, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [1922257928, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [1127131465, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [1127131465, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [1127131465, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [741586030, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [741586030, 1862.25341796875, 3711.99853515625, 31.800273895263672, 45.72831726074219, 0, 107, 1], [353883353, 351.76, -588.06, 74.17, 138.4606, 0, 16, 1], [745926877, 351.76, -588.06, 74.17, 140.9474, 0, 16, 1], [353883353, 351.76, -588.06, 74.17, 138.4606, 0, 16, 1], [745926877, 351.76, -588.06, 74.17, 140.9474, 0, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [1171614426, 326.75, -547.96, 28.74, 268.40, 2, 16, 1], [-2007026063, 1845.739990234375, 2541.50927734375, 44.93049240112305, 253.90855407714844, 0, 5, 1], [-2007026063, 1845.739990234375, 2541.50927734375, 44.93049240112305, 253.90855407714844, 0, 5, 1], [-2007026063, 1845.739990234375, 2541.50927734375, 44.93049240112305, 253.90855407714844, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1973172295, 1870.117431640625, 2535.619384765625, 44.28055191040039, 89.706298828125, 0, 5, 1], [-1973172295, 1870.0823974609375, 2539.43359375, 44.280460357666016, 86.98653411865234, 0, 5, 1], [-1973172295, 1870.1173095703125, 2542.953857421875, 44.27881622314453, 88.9968490600586, 0, 5, 1], [-1647941228, 1870.18408203125, 2546.2373046875, 44.28371047973633, 90.07311248779297, 0, 5, 1], [-1647941228, 1869.8634033203125, 2553.0283203125, 44.29462432861328, 86.87364196777344, 0, 5, 1], [-1647941228, 1870.18408203125, 2546.2373046875, 44.28371047973633, 90.07311248779297, 0, 5, 1], [-1647941228, 1869.8634033203125, 2553.0283203125, 44.29462432861328, 86.87364196777344, 0, 5, 1], [-1647941228, 1870.18408203125, 2546.2373046875, 44.28371047973633, 90.07311248779297, 0, 5, 1], [-1647941228, 1869.8634033203125, 2553.0283203125, 44.29462432861328, 86.87364196777344, 0, 5, 1], [-1647941228, 1870.18408203125, 2546.2373046875, 44.28371047973633, 90.07311248779297, 0, 5, 1], [-1647941228, 1869.8634033203125, 2553.0283203125, 44.29462432861328, 86.87364196777344, 0, 5, 1], [-1647941228, 1870.18408203125, 2546.2373046875, 44.28371047973633, 90.07311248779297, 0, 5, 1], [-1647941228, 1869.8634033203125, 2553.0283203125, 44.29462432861328, 86.87364196777344, 0, 5, 1], [1127131465, 1869.764404296875, 2556.916015625, 44.294246673583984, 89.6268081665039, 0, 5, 1], [1127131465, 1869.764404296875, 2556.916015625, 44.294246673583984, 89.6268081665039, 0, 5, 1], [1127131465, 1869.764404296875, 2556.916015625, 44.294246673583984, 89.6268081665039, 0, 5, 1]],
  houseIntData: [[1972.724, 3816.522, 32.4], [1972.724, 3816.522, 32.4], [1397.666, 1163.96, 113.3336], [-1150.642, -1520.649, 9.63273], [346.6588, -1012.286, -100.19624], [-110.2899, -14.17893, 69.51956], [1274.026, -1719.583, 53.77145], [-1908.66, -572.692, 18.09722], [265.9925, -1007.13, -101.9903], [151.2914, -1007.358, -100], [-859.8812, 691.0566, 151.8607], [-888.1979, -451.5262, 94.46114], [-611.2705, 58.77193, 97.20025], [-781.8554, 318.5241, 186.9488], [938.6196, -539.2518, 42.63986]],
  apartIntData: [[-784.5507, 323.7101, 210.9972], [-784.5507, 323.7101, 210.9972], [-774.5441, 331.6583, 159.0015], [-786.5707, 315.8176, 216.6384], [-774.1142, 342.0598, 195.6862], [-1449.955, -525.8912, 55.92899], [-1452.596, -540.1031, 73.04433], [-18.64361, -591.7625, 89.11481], [-30.95796, -595.1829, 79.0309], [-907.8871, -453.3672, 125.5344], [-923.0826, -378.5831, 84.48054], [-907.3911, -372.3075, 108.4403], [-912.6751, -365.2449, 113.2748], [352.701, -931.4678, 45.37909], [-458.6382, -705.2723, 76.08691], [127.8148, -866.9971, 123.2456], [-664.9214, -856.8912, 41.65313], [-53.68669, -620.9601, 75.99986], [-907.8871, -453.3672, 125.5344], [-907.8871, -453.3672, 125.5344]],
  kitchenIntData: _sharedData.kitchenIntDataUtil,
  buildListData: [[-47.62529, -585.9817, 36.95303, 10, 0, 0, 0], [-59.31505, -616.3288, 36.35678, 8, 0, 0, 0], [-906.5585, -451.8453, 38.60527, 26, 0, 0, 0], [-909.408, -446.4228, 38.60527, 26, 0, 0, 0], [-1447.256, -537.7479, 33.74024, 10, 0, 0, 0], [-774.9617, 312.6897, 84.69813, 24, 0, 0, 0], [-268.4884, -962.137, 30.22313, 24, 0, 0, 0], [315.2311, -1092.664, 28.40107, 6, 0, 0, 0], [-1062.536, -1641.072, 3.4912427, 3, 0, 0, 0], [-1284.575, -1252.959, 3.099319, 3, 0, 0, 0], [-729.1189, -879.9578, 21.71092, 3, 0, 0, 0], [561.5257, 93.09003, 95.09825, 3, 0, 0, 0], [773.5167, -150.4394, 74.62775, 3, 0, 0, 0], [1144.123, -1000.247, 44.307, 2, 0, 0, 0], [1145.298, -1008.498, 43.90734, 2, 0, 0, 0], [101.9671, -818.5921, 30.33646, 12, 0, 0, 0], [-936.4761, -379.1135, 37.96133, 34, 0, 0, 0], [347.1563, -941.3441, 28.43246, 5, 0, 0, 0], [-470.4552, -678.8266, 31.71356, 10, 0, 0, 0], [83.51759, -854.9324, 29.77145, 20, 0, 0, 0], [-662.4131, -857.7378, 23.51864, 5, 0, 0, 0], [360.8011, -1072.488, 28.54089, 1, 0, 0, 0], [252.771, -1072.443, 28.37394, 2, 0, 0, 0], [185.7291, -1078.371, 28.27456, 11, 0, 0, 0], [145.91, -1058.97, 29.18612, 5, 0, 0, 0], [-297.3691, -829.5149, 31.41578, 14, 0, 0, 0], [8.011297, -916.2399, 28.90503, 14, 0, 0, 0], [15.71022, -941.5427, 28.905, 14, 0, 0, 0], [387.227, -993.5002, 28.41795, 2, 0, 0, 0], [387.3025, -973.9567, 28.43672, 2, 0, 0, 0], [390.9153, -909.4563, 28.41869, 2, 0, 0, 0], [368.463, -875.168, 28.29166, 2, 0, 0, 0], [390.109, -75.59114, 67.18049, 11, 0, 0, 0], [388.3629, -0.5569023, 90.4148, 6, 0, 0, 0], [-989.4435424804688, -1575.983154296875, 4.171302795410156, 3, 0, 0, 0], [-933.5966796875, -1555.50244140625, 4.1775336265563965, 3, 0, 0, 0], [-935.9618530273438, -1523.2716064453125, 4.175243854522705, 3, 0, 0, 0], [-880.1953125, -1502.89453125, 4.177533149719238, 3, 0, 0, 0], [-969.847412109375, -1431.3365478515625, 6.679169654846191, 3, 0, 0, 0], [-922.0884399414062, -1413.8204345703125, 6.679170608520508, 3, 0, 0, 0]],
  userData: ["name", "name2", "password", "lic", "id", "rp_name", "skin", "job", "reg_status", "reg_time", "age", "exp_age", "wanted_level", "wanted_reason", "health", "money", "money_bank", "money_payday", "money_tax", "posob", "id_house", "apartment_id", "business_id", "stock_id", "condo_id", "car_id1", "car_id2", "car_id3", "car_id4", "car_id5", "car_id6", "car_id7", "car_id8", "jailed", "jail_time", "med_time", "eat_level", "water_level", "health_level", "temp_level", "sick_cold", "sick_poisoning", "date_reg", "last_login", "date_ban", "date_mute", "warn", "fraction_id", "rank", "fraction_id2", "rank2", "tag", "is_gos_blacklist", "gos_blacklist_reason", "admin_level", "helper_level", "bank_prefix", "bank_number", "phone_code", "phone", "item_clock", "is_buy_walkietalkie", "walkietalkie_num", "is_old_money", "sell_car", "sell_car_time", "story_1", "story_timeout_1", "mask", "mask_color", "torso", "torso_color", "leg", "leg_color", "hand", "hand_color", "foot", "foot_color", "accessorie", "accessorie_color", "parachute", "parachute_color", "armor", "armor_color", "decal", "decal_color", "body", "body_color", "hat", "hat_color", "glasses", "glasses_color", "ear", "ear_color", "watch", "watch_color", "bracelet", "bracelet_color", "tattoo_head_c", "tattoo_head_o", "tattoo_torso_c", "tattoo_torso_o", "tattoo_left_arm_c", "tattoo_left_arm_o", "tattoo_right_arm_c", "tattoo_right_arm_o", "tattoo_left_leg_c", "tattoo_left_leg_o", "tattoo_right_leg_c", "tattoo_right_leg_o", "tprint_c", "tprint_o", "allow_marg", "allow_antipohmel", "vip_status", "vip_time", "animal", "animal_name", "a_lic", "b_lic", "c_lic", "air_lic", "taxi_lic", "ship_lic", "gun_lic", "law_lic", "med_lic", "biz_lic", "animal_lic", "fish_lic", "s_is_pay_type_bank", "s_is_load_blip_house", "s_is_characher", "s_is_spawn_aprt", "s_is_usehackerphone", "s_lang", "s_clipset", "s_radio_balance", "s_radio_vol", "s_voice_vol", "s_voice_balance", "ip_last", "referer", "promocode", "mp0_stamina", "mp0_strength", "mp0_lung_capacity", "mp0_wheelie_ability", "mp0_flying_ability", "mp0_shooting_ability", "mp0_stealth_ability", "mp0_watchdogs", "skill_builder", "skill_scrap", "skill_shop", "skill_taxi", "skill_mail", "skill_mail2", "skill_photo", "skill_sunb", "skill_bgstar", "skill_bshot", "skill_three", "skill_water", "skill_bus1", "skill_bus2", "skill_bus3", "skill_gr6", "skill_trucker", "is_online", "count_hask", "count_aask", "jailed_admin", "quests", "tablet_equip"],
  tattooList: [["Turbulence", "mpairraces_overlays", "MP_Airraces_Tattoo_000_M", "MP_Airraces_Tattoo_000_F", "ZONE_TORSO", 13205], ["Pilot Skull", "mpairraces_overlays", "MP_Airraces_Tattoo_001_M", "MP_Airraces_Tattoo_001_F", "ZONE_TORSO", 18105], ["Winged Bombshell", "mpairraces_overlays", "MP_Airraces_Tattoo_002_M", "MP_Airraces_Tattoo_002_F", "ZONE_TORSO", 16485], ["Toxic Trails", "mpairraces_overlays", "MP_Airraces_Tattoo_003_M", "MP_Airraces_Tattoo_003_F", "ZONE_LEFT_ARM", 11985], ["Balloon Pioneer", "mpairraces_overlays", "MP_Airraces_Tattoo_004_M", "MP_Airraces_Tattoo_004_F", "ZONE_TORSO", 10390], ["Parachute Belle", "mpairraces_overlays", "MP_Airraces_Tattoo_005_M", "MP_Airraces_Tattoo_005_F", "ZONE_TORSO", 15270], ["Bombs Away", "mpairraces_overlays", "MP_Airraces_Tattoo_006_M", "MP_Airraces_Tattoo_006_F", "ZONE_TORSO", 12520], ["Eagle Eyes", "mpairraces_overlays", "MP_Airraces_Tattoo_007_M", "MP_Airraces_Tattoo_007_F", "ZONE_TORSO", 13925], ["Ship Arms", "mpbeach_overlays", "MP_Bea_M_Back_000", "", "ZONE_TORSO", 7250], ["Tribal Hammerhead", "mpbeach_overlays", "MP_Bea_M_Chest_000", "", "ZONE_TORSO", 5800], ["Tribal Shark", "mpbeach_overlays", "MP_Bea_M_Chest_001", "", "ZONE_TORSO", 5900], ["Pirate Skull", "mpbeach_overlays", "MP_Bea_M_Head_000", "", "ZONE_HEAD", 12000], ["Surf LS", "mpbeach_overlays", "MP_Bea_M_Head_001", "", "ZONE_HEAD", 1450], ["Shark", "mpbeach_overlays", "MP_Bea_M_Head_002", "", "ZONE_HEAD", 1850], ["Tribal Star", "mpbeach_overlays", "MP_Bea_M_Lleg_000", "", "ZONE_LEFT_LEG", 4450], ["Tribal Tiki Tower", "mpbeach_overlays", "MP_Bea_M_Rleg_000", "", "ZONE_RIGHT_LEG", 6500], ["Tribal Sun", "mpbeach_overlays", "MP_Bea_M_RArm_000", "", "ZONE_RIGHT_ARM", 6200], ["Tiki Tower", "mpbeach_overlays", "MP_Bea_M_LArm_000", "", "ZONE_LEFT_ARM", 4800], ["Mermaid L.S.", "mpbeach_overlays", "MP_Bea_M_LArm_001", "", "ZONE_LEFT_ARM", 6600], ["Little Fish", "mpbeach_overlays", "MP_Bea_M_Neck_000", "", "ZONE_HEAD", 1650], ["Surfs Up", "mpbeach_overlays", "MP_Bea_M_Neck_001", "", "ZONE_HEAD", 2250], ["Vespucci Beauty", "mpbeach_overlays", "MP_Bea_M_RArm_001", "", "ZONE_RIGHT_ARM", 7000], ["Swordfish", "mpbeach_overlays", "MP_Bea_M_Stom_000", "", "ZONE_TORSO", 3100], ["Wheel", "mpbeach_overlays", "MP_Bea_M_Stom_001", "", "ZONE_TORSO", 5500], ["Rock Solid", "mpbeach_overlays", "", "MP_Bea_F_Back_000", "ZONE_TORSO", 5500], ["Hibiscus Flower Duo", "mpbeach_overlays", "", "MP_Bea_F_Back_001", "ZONE_TORSO", 6900], ["Shrimp", "mpbeach_overlays", "", "MP_Bea_F_Back_002", "ZONE_TORSO", 2500], ["Anchor", "mpbeach_overlays", "", "MP_Bea_F_Chest_000", "ZONE_TORSO", 2500], ["Anchor", "mpbeach_overlays", "", "MP_Bea_F_Chest_001", "ZONE_TORSO", 2500], ["Los Santos Wreath", "mpbeach_overlays", "", "MP_Bea_F_Chest_002", "ZONE_TORSO", 8500], ["Love Dagger", "mpbeach_overlays", "", "MP_Bea_F_RSide_000", "ZONE_TORSO", 6850], ["School of Fish", "mpbeach_overlays", "", "MP_Bea_F_RLeg_000", "ZONE_RIGHT_LEG", 2950], ["Tribal Fish", "mpbeach_overlays", "", "MP_Bea_F_RArm_001", "ZONE_RIGHT_ARM", 3700], ["Tribal Butterfly", "mpbeach_overlays", "", "MP_Bea_F_Neck_000", "ZONE_HEAD", 1700], ["Sea Horses", "mpbeach_overlays", "", "MP_Bea_F_Should_000", "ZONE_TORSO", 5100], ["Catfish", "mpbeach_overlays", "", "MP_Bea_F_Should_001", "ZONE_TORSO", 5250], ["Swallow", "mpbeach_overlays", "", "MP_Bea_F_Stom_000", "ZONE_TORSO", 2100], ["Hibiscus Flower", "mpbeach_overlays", "", "MP_Bea_F_Stom_001", "ZONE_TORSO", 2650], ["Dolphin", "mpbeach_overlays", "", "MP_Bea_F_Stom_002", "ZONE_TORSO", 1900], ["Tribal Flower", "mpbeach_overlays", "", "MP_Bea_F_LArm_000", "ZONE_LEFT_ARM", 3500], ["Parrot", "mpbeach_overlays", "", "MP_Bea_F_LArm_001", "ZONE_LEFT_ARM", 5250], ["Demon Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_000_M", "MP_MP_Biker_Tat_000_F", "ZONE_TORSO", 6720], ["Both Barrels", "mpbiker_overlays", "MP_MP_Biker_Tat_001_M", "MP_MP_Biker_Tat_001_F", "ZONE_TORSO", 10800], ["Rose Tribute", "mpbiker_overlays", "MP_MP_Biker_Tat_002_M", "MP_MP_Biker_Tat_002_F", "ZONE_LEFT_LEG", 16820], ["Web Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_003_M", "MP_MP_Biker_Tat_003_F", "ZONE_TORSO", 10850], ["Dragon's Fury", "mpbiker_overlays", "MP_MP_Biker_Tat_004_M", "MP_MP_Biker_Tat_004_F", "ZONE_RIGHT_LEG", 17950], ["Made In America", "mpbiker_overlays", "MP_MP_Biker_Tat_005_M", "MP_MP_Biker_Tat_005_F", "ZONE_TORSO", 9230], ["Chopper Freedom", "mpbiker_overlays", "MP_MP_Biker_Tat_006_M", "MP_MP_Biker_Tat_006_F", "ZONE_TORSO", 10400], ["Swooping Eagle", "mpbiker_overlays", "MP_MP_Biker_Tat_007_M", "MP_MP_Biker_Tat_007_F", "ZONE_RIGHT_ARM", 5100], ["Freedom Wheels", "mpbiker_overlays", "MP_MP_Biker_Tat_008_M", "MP_MP_Biker_Tat_008_F", "ZONE_TORSO", 8785], ["Morbid Arachnid", "mpbiker_overlays", "MP_MP_Biker_Tat_009_M", "MP_MP_Biker_Tat_009_F", "ZONE_HEAD", 6350], ["Skull Of Taurus", "mpbiker_overlays", "MP_MP_Biker_Tat_010_M", "MP_MP_Biker_Tat_010_F", "ZONE_TORSO", 11350], ["R.I.P. My Brothers", "mpbiker_overlays", "MP_MP_Biker_Tat_011_M", "MP_MP_Biker_Tat_011_F", "ZONE_TORSO", 12350], ["Urban Stunter", "mpbiker_overlays", "MP_MP_Biker_Tat_012_M", "MP_MP_Biker_Tat_012_F", "ZONE_LEFT_ARM", 4985], ["Demon Crossbones", "mpbiker_overlays", "MP_MP_Biker_Tat_013_M", "MP_MP_Biker_Tat_013_F", "ZONE_TORSO", 11140], ["Lady Mortality", "mpbiker_overlays", "MP_MP_Biker_Tat_014_M", "MP_MP_Biker_Tat_014_F", "ZONE_RIGHT_ARM", 8300], ["Ride or Die", "mpbiker_overlays", "MP_MP_Biker_Tat_015_M", "MP_MP_Biker_Tat_015_F", "ZONE_LEFT_LEG", 8975], ["Macabre Tree", "mpbiker_overlays", "MP_MP_Biker_Tat_016_M", "MP_MP_Biker_Tat_016_F", "ZONE_LEFT_ARM", 9000], ["Clawed Beast", "mpbiker_overlays", "MP_MP_Biker_Tat_017_M", "MP_MP_Biker_Tat_017_F", "ZONE_TORSO", 15650], ["Skeletal Chopper", "mpbiker_overlays", "MP_MP_Biker_Tat_018_M", "MP_MP_Biker_Tat_018_F", "ZONE_TORSO", 7650], ["Gruesome Talons", "mpbiker_overlays", "MP_MP_Biker_Tat_019_M", "MP_MP_Biker_Tat_019_F", "ZONE_TORSO", 9900], ["Cranial Rose", "mpbiker_overlays", "MP_MP_Biker_Tat_020_M", "MP_MP_Biker_Tat_020_F", "ZONE_LEFT_ARM", 9745], ["Flaming Reaper", "mpbiker_overlays", "MP_MP_Biker_Tat_021_M", "MP_MP_Biker_Tat_021_F", "ZONE_TORSO", 13700], ["Western Insignia", "mpbiker_overlays", "MP_MP_Biker_Tat_022_M", "MP_MP_Biker_Tat_022_F", "ZONE_RIGHT_LEG", 9385], ["Western MC", "mpbiker_overlays", "MP_MP_Biker_Tat_023_M", "MP_MP_Biker_Tat_023_F", "ZONE_TORSO", 10000], ["Live to Ride", "mpbiker_overlays", "MP_MP_Biker_Tat_024_M", "MP_MP_Biker_Tat_024_F", "ZONE_LEFT_ARM", 15320], ["Good Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_025_M", "MP_MP_Biker_Tat_025_F", "ZONE_LEFT_ARM", 12950], ["American Dream", "mpbiker_overlays", "MP_MP_Biker_Tat_026_M", "MP_MP_Biker_Tat_026_F", "ZONE_TORSO", 11000], ["Bad Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_027_M", "MP_MP_Biker_Tat_027_F", "ZONE_LEFT_LEG", 6960], ["Dusk Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_028_M", "MP_MP_Biker_Tat_028_F", "ZONE_RIGHT_LEG", 14520], ["Bone Wrench", "mpbiker_overlays", "MP_MP_Biker_Tat_029_M", "MP_MP_Biker_Tat_029_F", "ZONE_TORSO", 9630], ["Brothers For Life", "mpbiker_overlays", "MP_MP_Biker_Tat_030_M", "MP_MP_Biker_Tat_030_F", "ZONE_TORSO", 9810], ["Gear Head", "mpbiker_overlays", "MP_MP_Biker_Tat_031_M", "MP_MP_Biker_Tat_031_F", "ZONE_TORSO", 8600], ["Western Eagle", "mpbiker_overlays", "MP_MP_Biker_Tat_032_M", "MP_MP_Biker_Tat_032_F", "ZONE_TORSO", 7655], ["Eagle Emblem", "mpbiker_overlays", "MP_MP_Biker_Tat_033_M", "MP_MP_Biker_Tat_033_F", "ZONE_RIGHT_ARM", 4385], ["Brotherhood of Bikes", "mpbiker_overlays", "MP_MP_Biker_Tat_034_M", "MP_MP_Biker_Tat_034_F", "ZONE_TORSO", 9975], ["Chain Fist", "mpbiker_overlays", "MP_MP_Biker_Tat_035_M", "MP_MP_Biker_Tat_035_F", "ZONE_LEFT_ARM", 5780], ["Engulfed Skull", "mpbiker_overlays", "MP_MP_Biker_Tat_036_M", "MP_MP_Biker_Tat_036_F", "ZONE_LEFT_LEG", 9300], ["Scorched Soul", "mpbiker_overlays", "MP_MP_Biker_Tat_037_M", "MP_MP_Biker_Tat_037_F", "ZONE_LEFT_LEG", 12495], ["FTW", "mpbiker_overlays", "MP_MP_Biker_Tat_038_M", "MP_MP_Biker_Tat_038_F", "ZONE_HEAD", 3900], ["Gas Guzzler", "mpbiker_overlays", "MP_MP_Biker_Tat_039_M", "MP_MP_Biker_Tat_039_F", "ZONE_TORSO", 10950], ["American Made", "mpbiker_overlays", "MP_MP_Biker_Tat_040_M", "MP_MP_Biker_Tat_040_F", "ZONE_RIGHT_LEG", 13620], ["No Regrets", "mpbiker_overlays", "MP_MP_Biker_Tat_041_M", "MP_MP_Biker_Tat_041_F", "ZONE_TORSO", 8320], ["Grim Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_042_M", "MP_MP_Biker_Tat_042_F", "ZONE_RIGHT_ARM", 7865], ["Ride Forever", "mpbiker_overlays", "MP_MP_Biker_Tat_043_M", "MP_MP_Biker_Tat_043_F", "ZONE_TORSO", 6850], ["Ride Free", "mpbiker_overlays", "MP_MP_Biker_Tat_044_M", "MP_MP_Biker_Tat_044_F", "ZONE_LEFT_LEG", 11900], ["Ride Hard Die Fast", "mpbiker_overlays", "MP_MP_Biker_Tat_045_M", "MP_MP_Biker_Tat_045_F", "ZONE_LEFT_ARM", 6320], ["Skull Chain", "mpbiker_overlays", "MP_MP_Biker_Tat_046_M", "MP_MP_Biker_Tat_046_F", "ZONE_RIGHT_ARM", 4985], ["Snake Bike", "mpbiker_overlays", "MP_MP_Biker_Tat_047_M", "MP_MP_Biker_Tat_047_F", "ZONE_RIGHT_ARM", 13500], ["STFU", "mpbiker_overlays", "MP_MP_Biker_Tat_048_M", "MP_MP_Biker_Tat_048_F", "ZONE_RIGHT_LEG", 8930], ["These Colors Don't Run", "mpbiker_overlays", "MP_MP_Biker_Tat_049_M", "MP_MP_Biker_Tat_049_F", "ZONE_RIGHT_ARM", 8790], ["Unforgiven", "mpbiker_overlays", "MP_MP_Biker_Tat_050_M", "MP_MP_Biker_Tat_050_F", "ZONE_TORSO", 8720], ["Western Stylized", "mpbiker_overlays", "MP_MP_Biker_Tat_051_M", "MP_MP_Biker_Tat_051_F", "ZONE_HEAD", 4125], ["Biker Mount", "mpbiker_overlays", "MP_MP_Biker_Tat_052_M", "MP_MP_Biker_Tat_052_F", "ZONE_TORSO", 9135], ["Muffler Helmet", "mpbiker_overlays", "MP_MP_Biker_Tat_053_M", "MP_MP_Biker_Tat_053_F", "ZONE_LEFT_ARM", 8400], ["Mum", "mpbiker_overlays", "MP_MP_Biker_Tat_054_M", "MP_MP_Biker_Tat_054_F", "ZONE_RIGHT_ARM", 10450], ["Poison Scorpion", "mpbiker_overlays", "MP_MP_Biker_Tat_055_M", "MP_MP_Biker_Tat_055_F", "ZONE_LEFT_ARM", 10995], ["Bone Cruiser", "mpbiker_overlays", "MP_MP_Biker_Tat_056_M", "MP_MP_Biker_Tat_056_F", "ZONE_LEFT_LEG", 14960], ["Laughing Skull", "mpbiker_overlays", "MP_MP_Biker_Tat_057_M", "MP_MP_Biker_Tat_057_F", "ZONE_LEFT_LEG", 13865], ["Reaper Vulture", "mpbiker_overlays", "MP_MP_Biker_Tat_058_M", "MP_MP_Biker_Tat_058_F", "ZONE_TORSO", 7985], ["Faggio", "mpbiker_overlays", "MP_MP_Biker_Tat_059_M", "MP_MP_Biker_Tat_059_F", "ZONE_TORSO", 6395], ["We Are The Mods!", "mpbiker_overlays", "MP_MP_Biker_Tat_060_M", "MP_MP_Biker_Tat_060_F", "ZONE_TORSO", 7105], ["Cash is King", "mpbusiness_overlays", "MP_Buis_M_Neck_000", "", "ZONE_HEAD", 5000], ["Bold Dollar Sign", "mpbusiness_overlays", "MP_Buis_M_Neck_001", "", "ZONE_HEAD", 1600], ["Script Dollar Sign", "mpbusiness_overlays", "MP_Buis_M_Neck_002", "", "ZONE_HEAD", 1750], ["$100", "mpbusiness_overlays", "MP_Buis_M_Neck_003", "", "ZONE_HEAD", 6900], ["$100 Bill", "mpbusiness_overlays", "MP_Buis_M_LeftArm_000", "", "ZONE_LEFT_ARM", 3500], ["All-Seeing Eye", "mpbusiness_overlays", "MP_Buis_M_LeftArm_001", "", "ZONE_LEFT_ARM", 7300], ["Dollar Skull", "mpbusiness_overlays", "MP_Buis_M_RightArm_000", "", "ZONE_RIGHT_ARM", 4800], ["Green", "mpbusiness_overlays", "MP_Buis_M_RightArm_001", "", "ZONE_RIGHT_ARM", 1500], ["Refined Hustler", "mpbusiness_overlays", "MP_Buis_M_Stomach_000", "", "ZONE_TORSO", 6400], ["Rich", "mpbusiness_overlays", "MP_Buis_M_Chest_000", "", "ZONE_TORSO", 3250], ["$$$", "mpbusiness_overlays", "MP_Buis_M_Chest_001", "", "ZONE_TORSO", 3500], ["Makin' Paper", "mpbusiness_overlays", "MP_Buis_M_Back_000", "", "ZONE_TORSO", 5500], ["High Roller", "mpbusiness_overlays", "", "MP_Buis_F_Chest_000", "ZONE_TORSO", 7000], ["Makin' Money", "mpbusiness_overlays", "", "MP_Buis_F_Chest_001", "ZONE_TORSO", 7200], ["Love Money", "mpbusiness_overlays", "", "MP_Buis_F_Chest_002", "ZONE_TORSO", 1600], ["Diamond Back", "mpbusiness_overlays", "", "MP_Buis_F_Stom_000", "ZONE_TORSO", 6800], ["Santo Capra Logo", "mpbusiness_overlays", "", "MP_Buis_F_Stom_001", "ZONE_TORSO", 1800], ["Money Bag", "mpbusiness_overlays", "", "MP_Buis_F_Stom_002", "ZONE_TORSO", 1500], ["Respect", "mpbusiness_overlays", "", "MP_Buis_F_Back_000", "ZONE_TORSO", 4200], ["Gold Digger", "mpbusiness_overlays", "", "MP_Buis_F_Back_001", "ZONE_TORSO", 4000], ["Val-de-Grace Logo", "mpbusiness_overlays", "", "MP_Buis_F_Neck_000", "ZONE_HEAD", 1900], ["Money Rose", "mpbusiness_overlays", "", "MP_Buis_F_Neck_001", "ZONE_HEAD", 2500], ["Dollar Sign", "mpbusiness_overlays", "", "MP_Buis_F_RArm_000", "ZONE_RIGHT_ARM", 4900], ["Greed is Good", "mpbusiness_overlays", "", "MP_Buis_F_LArm_000", "ZONE_LEFT_ARM", 5500], ["Single", "mpbusiness_overlays", "", "MP_Buis_F_LLeg_000", "ZONE_LEFT_LEG", 4850], ["Diamond Crown", "mpbusiness_overlays", "", "MP_Buis_F_RLeg_000", "ZONE_RIGHT_LEG", 4500], ["Skull Rider", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_000", "MP_Xmas2_F_Tat_000", "ZONE_LEFT_ARM", 5950], ["Spider Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_001", "MP_Xmas2_F_Tat_001", "ZONE_LEFT_LEG", 4650], ["Spider Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_002", "MP_Xmas2_F_Tat_002", "ZONE_LEFT_LEG", 6350], ["Snake Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_003", "MP_Xmas2_F_Tat_003", "ZONE_RIGHT_ARM", 8450], ["Snake Shaded", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_004", "MP_Xmas2_F_Tat_004", "ZONE_RIGHT_ARM", 13250], ["Carp Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_005", "MP_Xmas2_F_Tat_005", "ZONE_TORSO", 8750], ["Carp Shaded", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_006", "MP_Xmas2_F_Tat_006", "ZONE_TORSO", 14500], ["Los Muertos", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_007", "MP_Xmas2_F_Tat_007", "ZONE_HEAD", 3950], ["Death Before Dishonor", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_008", "MP_Xmas2_F_Tat_008", "ZONE_RIGHT_ARM", 4300], ["Time To Die", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_009", "MP_Xmas2_F_Tat_009", "ZONE_TORSO", 7800], ["Electric Snake", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_010", "MP_Xmas2_F_Tat_010", "ZONE_LEFT_ARM", 6200], ["Roaring Tiger", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_011", "MP_Xmas2_F_Tat_011", "ZONE_TORSO", 6850], ["8 Ball Skull", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_012", "MP_Xmas2_F_Tat_012", "ZONE_LEFT_ARM", 8250], ["Lizard", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_013", "MP_Xmas2_F_Tat_013", "ZONE_TORSO", 7900], ["Floral Dagger", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_014", "MP_Xmas2_F_Tat_014", "ZONE_RIGHT_LEG", 10500], ["Japanese Warrior", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_015", "MP_Xmas2_F_Tat_015", "ZONE_TORSO", 11000], ["Loose Lips Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_016", "MP_Xmas2_F_Tat_016", "ZONE_TORSO", 3150], ["Loose Lips Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_017", "MP_Xmas2_F_Tat_017", "ZONE_TORSO", 6350], ["Royal Dagger Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_018", "MP_Xmas2_F_Tat_018", "ZONE_TORSO", 4300], ["Royal Dagger Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_019", "MP_Xmas2_F_Tat_019", "ZONE_TORSO", 7500], ["Time's Up Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_020", "MP_Xmas2_F_Tat_020", "ZONE_LEFT_ARM", 2500], ["Time's Up Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_021", "MP_Xmas2_F_Tat_021", "ZONE_LEFT_ARM", 3750], ["You're Next Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_022", "MP_Xmas2_F_Tat_022", "ZONE_RIGHT_ARM", 3800], ["You're Next Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_023", "MP_Xmas2_F_Tat_023", "ZONE_RIGHT_ARM", 5100], ["Snake Head Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_024", "MP_Xmas2_F_Tat_024", "ZONE_HEAD", 2100], ["Snake Head Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_025", "MP_Xmas2_F_Tat_025", "ZONE_HEAD", 4600], ["Fuck Luck Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_026", "MP_Xmas2_F_Tat_026", "ZONE_RIGHT_ARM", 1300], ["Fuck Luck Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_027", "MP_Xmas2_F_Tat_027", "ZONE_RIGHT_ARM", 2200], ["Executioner", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_028", "MP_Xmas2_F_Tat_028", "ZONE_TORSO", 5700], ["Beautiful Death", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_029", "MP_Xmas2_F_Tat_029", "ZONE_HEAD", 3150], ["Bullet Proof", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_000_M", "MP_Gunrunning_Tattoo_000_F", "ZONE_TORSO", 16985], ["Crossed Weapons", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_001_M", "MP_Gunrunning_Tattoo_001_F", "ZONE_TORSO", 19355], ["Grenade", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_002_M", "MP_Gunrunning_Tattoo_002_F", "ZONE_RIGHT_ARM", 14650], ["Lock &amp; Load", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_003_M", "MP_Gunrunning_Tattoo_003_F", "ZONE_HEAD", 8750], ["Sidearm", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_004_M", "MP_Gunrunning_Tattoo_004_F", "ZONE_LEFT_ARM", 11285], ["Patriot Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_005_M", "MP_Gunrunning_Tattoo_005_F", "ZONE_LEFT_LEG", 9120], ["Combat Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_006_M", "MP_Gunrunning_Tattoo_006_F", "ZONE_RIGHT_LEG", 10670], ["Stylized Tiger", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_007_M", "MP_Gunrunning_Tattoo_007_F", "ZONE_LEFT_LEG", 9660], ["Bandolier", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_008_M", "MP_Gunrunning_Tattoo_008_F", "ZONE_LEFT_ARM", 13445], ["Butterfly Knife", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_009_M", "MP_Gunrunning_Tattoo_009_F", "ZONE_TORSO", 14650], ["Cash Money", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_010_M", "MP_Gunrunning_Tattoo_010_F", "ZONE_TORSO", 19050], ["Death Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_011_M", "MP_Gunrunning_Tattoo_011_F", "ZONE_LEFT_LEG", 9785], ["Dollar Daggers", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_012_M", "MP_Gunrunning_Tattoo_012_F", "ZONE_TORSO", 15060], ["Wolf Insignia", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_013_M", "MP_Gunrunning_Tattoo_013_F", "ZONE_TORSO", 16115], ["Backstabber", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_014_M", "MP_Gunrunning_Tattoo_014_F", "ZONE_TORSO", 17200], ["Spiked Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_015_M", "MP_Gunrunning_Tattoo_015_F", "ZONE_LEFT_ARM", 10425], ["Blood Money", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_016_M", "MP_Gunrunning_Tattoo_016_F", "ZONE_LEFT_ARM", 10360], ["Dog Tags", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_017_M", "MP_Gunrunning_Tattoo_017_F", "ZONE_TORSO", 8980], ["Dual Wield Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_018_M", "MP_Gunrunning_Tattoo_018_F", "ZONE_TORSO", 17755], ["Pistol Wings", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_019_M", "MP_Gunrunning_Tattoo_019_F", "ZONE_TORSO", 18025], ["Crowned Weapons", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_020_M", "MP_Gunrunning_Tattoo_020_F", "ZONE_TORSO", 19875], ["Have a Nice Day", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_021_M", "MP_Gunrunning_Tattoo_021_F", "ZONE_RIGHT_ARM", 9460], ["Explosive Heart", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_022_M", "MP_Gunrunning_Tattoo_022_F", "ZONE_TORSO", 10825], ["Rose Revolver", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_023_M", "MP_Gunrunning_Tattoo_023_F", "ZONE_LEFT_LEG", 8880], ["Combat Reaper", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_024_M", "MP_Gunrunning_Tattoo_024_F", "ZONE_RIGHT_ARM", 10340], ["Praying Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_025_M", "MP_Gunrunning_Tattoo_025_F", "ZONE_LEFT_ARM", 12150], ["Restless Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_026_M", "MP_Gunrunning_Tattoo_026_F", "ZONE_RIGHT_LEG", 11510], ["Serpent Revolver", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_027_M", "MP_Gunrunning_Tattoo_027_F", "ZONE_LEFT_ARM", 8420], ["Micro SMG Chain", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_028_M", "MP_Gunrunning_Tattoo_028_F", "ZONE_TORSO", 9960], ["Win Some Lose Some", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_029_M", "MP_Gunrunning_Tattoo_029_F", "ZONE_TORSO", 14090], ["Pistol Ace", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_030_M", "MP_Gunrunning_Tattoo_030_F", "ZONE_RIGHT_LEG", 11050], ["Crossed Arrows", "mphipster_overlays", "FM_Hip_M_Tat_000", "FM_Hip_F_Tat_000", "ZONE_TORSO", 6750], ["Single Arrow", "mphipster_overlays", "FM_Hip_M_Tat_001", "FM_Hip_F_Tat_001", "ZONE_RIGHT_ARM", 2000], ["Chemistry", "mphipster_overlays", "FM_Hip_M_Tat_002", "FM_Hip_F_Tat_002", "ZONE_TORSO", 2900], ["Diamond Sparkle", "mphipster_overlays", "FM_Hip_M_Tat_003", "FM_Hip_F_Tat_003", "ZONE_LEFT_ARM", 2100], ["Bone", "mphipster_overlays", "FM_Hip_M_Tat_004", "FM_Hip_F_Tat_004", "ZONE_RIGHT_ARM", 2900], ["Beautiful Eye", "mphipster_overlays", "FM_Hip_M_Tat_005", "FM_Hip_F_Tat_005", "ZONE_HEAD", 7450], ["Feather Birds", "mphipster_overlays", "FM_Hip_M_Tat_006", "FM_Hip_F_Tat_006", "ZONE_TORSO", 4550], ["Bricks", "mphipster_overlays", "FM_Hip_M_Tat_007", "FM_Hip_F_Tat_007", "ZONE_LEFT_ARM", 6000], ["Cube", "mphipster_overlays", "FM_Hip_M_Tat_008", "FM_Hip_F_Tat_008", "ZONE_RIGHT_ARM", 4850], ["Squares", "mphipster_overlays", "FM_Hip_M_Tat_009", "FM_Hip_F_Tat_009", "ZONE_LEFT_LEG", 4000], ["Horseshoe", "mphipster_overlays", "FM_Hip_M_Tat_010", "FM_Hip_F_Tat_010", "ZONE_RIGHT_ARM", 3150], ["Infinity", "mphipster_overlays", "FM_Hip_M_Tat_011", "FM_Hip_F_Tat_011", "ZONE_TORSO", 3000], ["Antlers", "mphipster_overlays", "FM_Hip_M_Tat_012", "FM_Hip_F_Tat_012", "ZONE_TORSO", 6500], ["Boombox", "mphipster_overlays", "FM_Hip_M_Tat_013", "FM_Hip_F_Tat_013", "ZONE_TORSO", 6950], ["Spray Can", "mphipster_overlays", "FM_Hip_M_Tat_014", "FM_Hip_F_Tat_014", "ZONE_RIGHT_ARM", 4300], ["Mustache", "mphipster_overlays", "FM_Hip_M_Tat_015", "FM_Hip_F_Tat_015", "ZONE_LEFT_ARM", 3400], ["Lightning Bolt", "mphipster_overlays", "FM_Hip_M_Tat_016", "FM_Hip_F_Tat_016", "ZONE_LEFT_ARM", 3700], ["Eye Triangle", "mphipster_overlays", "FM_Hip_M_Tat_017", "FM_Hip_F_Tat_017", "ZONE_RIGHT_ARM", 2650], ["Origami", "mphipster_overlays", "FM_Hip_M_Tat_018", "FM_Hip_F_Tat_018", "ZONE_RIGHT_ARM", 1800], ["Charm", "mphipster_overlays", "FM_Hip_M_Tat_019", "FM_Hip_F_Tat_019", "ZONE_LEFT_LEG", 3400], ["Geo Pattern", "mphipster_overlays", "FM_Hip_M_Tat_020", "FM_Hip_F_Tat_020", "ZONE_RIGHT_ARM", 7350], ["Geo Fox", "mphipster_overlays", "FM_Hip_M_Tat_021", "FM_Hip_F_Tat_021", "ZONE_HEAD", 7850], ["Pencil", "mphipster_overlays", "FM_Hip_M_Tat_022", "FM_Hip_F_Tat_022", "ZONE_RIGHT_ARM", 2250], ["Smiley", "mphipster_overlays", "FM_Hip_M_Tat_023", "FM_Hip_F_Tat_023", "ZONE_RIGHT_ARM", 7000], ["Pyramid", "mphipster_overlays", "FM_Hip_M_Tat_024", "FM_Hip_F_Tat_024", "ZONE_TORSO", 2950], ["Watch Your Step", "mphipster_overlays", "FM_Hip_M_Tat_025", "FM_Hip_F_Tat_025", "ZONE_TORSO", 3500], ["Pizza", "mphipster_overlays", "FM_Hip_M_Tat_026", "FM_Hip_F_Tat_026", "ZONE_LEFT_ARM", 2400], ["Padlock", "mphipster_overlays", "FM_Hip_M_Tat_027", "FM_Hip_F_Tat_027", "ZONE_LEFT_ARM", 5750], ["Thorny Rose", "mphipster_overlays", "FM_Hip_M_Tat_028", "FM_Hip_F_Tat_028", "ZONE_LEFT_ARM", 4800], ["Sad", "mphipster_overlays", "FM_Hip_M_Tat_029", "FM_Hip_F_Tat_029", "ZONE_TORSO", 1850], ["Shark Fin", "mphipster_overlays", "FM_Hip_M_Tat_030", "FM_Hip_F_Tat_030", "ZONE_TORSO", 2250], ["Skateboard", "mphipster_overlays", "FM_Hip_M_Tat_031", "FM_Hip_F_Tat_031", "ZONE_TORSO", 4950], ["Paper Plane", "mphipster_overlays", "FM_Hip_M_Tat_032", "FM_Hip_F_Tat_032", "ZONE_TORSO", 4350], ["Stag", "mphipster_overlays", "FM_Hip_M_Tat_033", "FM_Hip_F_Tat_033", "ZONE_TORSO", 6950], ["Stop", "mphipster_overlays", "FM_Hip_M_Tat_034", "FM_Hip_F_Tat_034", "ZONE_LEFT_ARM", 9500], ["Sewn Heart", "mphipster_overlays", "FM_Hip_M_Tat_035", "FM_Hip_F_Tat_035", "ZONE_TORSO", 7500], ["Shapes", "mphipster_overlays", "FM_Hip_M_Tat_036", "FM_Hip_F_Tat_036", "ZONE_RIGHT_ARM", 5150], ["Sunrise", "mphipster_overlays", "FM_Hip_M_Tat_037", "FM_Hip_F_Tat_037", "ZONE_LEFT_ARM", 3750], ["Grub", "mphipster_overlays", "FM_Hip_M_Tat_038", "FM_Hip_F_Tat_038", "ZONE_RIGHT_LEG", 3500], ["Sleeve", "mphipster_overlays", "FM_Hip_M_Tat_039", "FM_Hip_F_Tat_039", "ZONE_LEFT_ARM", 10000], ["Black Anchor", "mphipster_overlays", "FM_Hip_M_Tat_040", "FM_Hip_F_Tat_040", "ZONE_LEFT_LEG", 2950], ["Tooth", "mphipster_overlays", "FM_Hip_M_Tat_041", "FM_Hip_F_Tat_041", "ZONE_TORSO", 2575], ["Sparkplug", "mphipster_overlays", "FM_Hip_M_Tat_042", "FM_Hip_F_Tat_042", "ZONE_RIGHT_LEG", 4300], ["Triangle White", "mphipster_overlays", "FM_Hip_M_Tat_043", "FM_Hip_F_Tat_043", "ZONE_LEFT_ARM", 5500], ["Triangle Black", "mphipster_overlays", "FM_Hip_M_Tat_044", "FM_Hip_F_Tat_044", "ZONE_RIGHT_ARM", 5500], ["Mesh Band", "mphipster_overlays", "FM_Hip_M_Tat_045", "FM_Hip_F_Tat_045", "ZONE_RIGHT_ARM", 4000], ["Triangles", "mphipster_overlays", "FM_Hip_M_Tat_046", "FM_Hip_F_Tat_046", "ZONE_TORSO", 3750], ["Cassette", "mphipster_overlays", "FM_Hip_M_Tat_047", "FM_Hip_F_Tat_047", "ZONE_TORSO", 1900], ["Peace", "mphipster_overlays", "FM_Hip_M_Tat_048", "FM_Hip_F_Tat_048", "ZONE_LEFT_ARM", 7850], ["Block Back", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_000_M", "MP_MP_ImportExport_Tat_000_F", "ZONE_TORSO", 13780], ["Power Plant", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_001_M", "MP_MP_ImportExport_Tat_001_F", "ZONE_TORSO", 12900], ["Tuned to Death", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_002_M", "MP_MP_ImportExport_Tat_002_F", "ZONE_TORSO", 12120], ["Mechanical Sleeve", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_003_M", "MP_MP_ImportExport_Tat_003_F", "ZONE_RIGHT_ARM", 17200], ["Piston Sleeve", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_004_M", "MP_MP_ImportExport_Tat_004_F", "ZONE_LEFT_ARM", 16350], ["Dialed In", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_005_M", "MP_MP_ImportExport_Tat_005_F", "ZONE_RIGHT_ARM", 18615], ["Engulfed Block", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_006_M", "MP_MP_ImportExport_Tat_006_F", "ZONE_RIGHT_ARM", 15720], ["Drive Forever", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_007_M", "MP_MP_ImportExport_Tat_007_F", "ZONE_RIGHT_ARM", 16685], ["Scarlett", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_008_M", "MP_MP_ImportExport_Tat_008_F", "ZONE_LEFT_ARM", 19900], ["Serpents of Destruction", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_009_M", "MP_MP_ImportExport_Tat_009_F", "ZONE_TORSO", 16500], ["Take the Wheel", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_010_M", "MP_MP_ImportExport_Tat_010_F", "ZONE_TORSO", 14235], ["Talk Shit Get Hit", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_011_M", "MP_MP_ImportExport_Tat_011_F", "ZONE_TORSO", 15985], ["King Fight", "mplowrider_overlays", "MP_LR_Tat_001_M", "MP_LR_Tat_001_F", "ZONE_TORSO", 6100], ["Holy Mary", "mplowrider_overlays", "MP_LR_Tat_002_M", "MP_LR_Tat_002_F", "ZONE_TORSO", 10250], ["Gun Mic", "mplowrider_overlays", "MP_LR_Tat_004_M", "MP_LR_Tat_004_F", "ZONE_TORSO", 3500], ["No Evil", "mplowrider_overlays", "MP_LR_Tat_005_M", "MP_LR_Tat_005_F", "ZONE_LEFT_ARM", 5900], ["LS Serpent", "mplowrider_overlays", "MP_LR_Tat_007_M", "MP_LR_Tat_007_F", "ZONE_LEFT_LEG", 5500], ["Amazon", "mplowrider_overlays", "MP_LR_Tat_009_M", "MP_LR_Tat_009_F", "ZONE_TORSO", 9500], ["Bad Angel", "mplowrider_overlays", "MP_LR_Tat_010_M", "MP_LR_Tat_010_F", "ZONE_TORSO", 16500], ["Love Gamble", "mplowrider_overlays", "MP_LR_Tat_013_M", "MP_LR_Tat_013_F", "ZONE_TORSO", 8300], ["Love is Blind", "mplowrider_overlays", "MP_LR_Tat_014_M", "MP_LR_Tat_014_F", "ZONE_TORSO", 17750], ["Seductress", "mplowrider_overlays", "MP_LR_Tat_015_M", "MP_LR_Tat_015_F", "ZONE_RIGHT_ARM", 6150], ["Ink Me", "mplowrider_overlays", "MP_LR_Tat_017_M", "MP_LR_Tat_017_F", "ZONE_RIGHT_LEG", 7700], ["Presidents", "mplowrider_overlays", "MP_LR_Tat_020_M", "MP_LR_Tat_020_F", "ZONE_LEFT_LEG", 6850], ["Sad Angel", "mplowrider_overlays", "MP_LR_Tat_021_M", "MP_LR_Tat_021_F", "ZONE_TORSO", 15000], ["Dance of Hearts", "mplowrider_overlays", "MP_LR_Tat_023_M", "MP_LR_Tat_023_F", "ZONE_RIGHT_LEG", 6500], ["Royal Takeover", "mplowrider_overlays", "MP_LR_Tat_026_M", "MP_LR_Tat_026_F", "ZONE_TORSO", 7400], ["Los Santos Life", "mplowrider_overlays", "MP_LR_Tat_027_M", "MP_LR_Tat_027_F", "ZONE_LEFT_ARM", 7800], ["City Sorrow", "mplowrider_overlays", "MP_LR_Tat_033_M", "MP_LR_Tat_033_F", "ZONE_LEFT_ARM", 10000], ["SA Assault", "mplowrider2_overlays", "MP_LR_Tat_000_M", "MP_LR_Tat_000_F", "ZONE_TORSO", 19000], ["Lady Vamp", "mplowrider2_overlays", "MP_LR_Tat_003_M", "MP_LR_Tat_003_F", "ZONE_RIGHT_ARM", 5950], ["Love Hustle", "mplowrider2_overlays", "MP_LR_Tat_006_M", "MP_LR_Tat_006_F", "ZONE_LEFT_ARM", 7450], ["Love the Game", "mplowrider2_overlays", "MP_LR_Tat_008_M", "MP_LR_Tat_008_F", "ZONE_TORSO", 18750], ["Lady Liberty", "mplowrider2_overlays", "MP_LR_Tat_011_M", "MP_LR_Tat_011_F", "ZONE_TORSO", 8000], ["Royal Kiss", "mplowrider2_overlays", "MP_LR_Tat_012_M", "MP_LR_Tat_012_F", "ZONE_TORSO", 7650], ["Two Face", "mplowrider2_overlays", "MP_LR_Tat_016_M", "MP_LR_Tat_016_F", "ZONE_TORSO", 6400], ["Skeleton Party", "mplowrider2_overlays", "MP_LR_Tat_018_M", "MP_LR_Tat_018_F", "ZONE_LEFT_ARM", 11000], ["Death Behind", "mplowrider2_overlays", "MP_LR_Tat_019_M", "MP_LR_Tat_019_F", "ZONE_TORSO", 9750], ["My Crazy Life", "mplowrider2_overlays", "MP_LR_Tat_022_M", "MP_LR_Tat_022_F", "ZONE_LEFT_ARM", 7350], ["Loving Los Muertos", "mplowrider2_overlays", "MP_LR_Tat_028_M", "MP_LR_Tat_028_F", "ZONE_RIGHT_ARM", 8800], ["Death Us Do Part", "mplowrider2_overlays", "MP_LR_Tat_029_M", "MP_LR_Tat_029_F", "ZONE_LEFT_LEG", 6250], ["San Andreas Prayer", "mplowrider2_overlays", "MP_LR_Tat_030_M", "MP_LR_Tat_030_F", "ZONE_RIGHT_LEG", 8150], ["Dead Pretty", "mplowrider2_overlays", "MP_LR_Tat_031_M", "MP_LR_Tat_031_F", "ZONE_TORSO", 16500], ["Reign Over", "mplowrider2_overlays", "MP_LR_Tat_032_M", "MP_LR_Tat_032_F", "ZONE_TORSO", 18500], ["Black Tears", "mplowrider2_overlays", "MP_LR_Tat_035_M", "MP_LR_Tat_035_F", "ZONE_RIGHT_ARM", 8250], ["Serpent of Death", "mpluxe_overlays", "MP_LUXE_TAT_000_M", "MP_LUXE_TAT_000_F", "ZONE_LEFT_LEG", 11900], ["Elaborate Los Muertos", "mpluxe_overlays", "MP_LUXE_TAT_001_M", "MP_LUXE_TAT_001_F", "ZONE_RIGHT_LEG", 14350], ["Abstract Skull", "mpluxe_overlays", "MP_LUXE_TAT_003_M", "MP_LUXE_TAT_003_F", "ZONE_TORSO", 8350], ["Floral Raven", "mpluxe_overlays", "MP_LUXE_TAT_004_M", "MP_LUXE_TAT_004_F", "ZONE_RIGHT_ARM", 12200], ["Adorned Wolf", "mpluxe_overlays", "MP_LUXE_TAT_006_M", "MP_LUXE_TAT_006_F", "ZONE_TORSO", 25000], ["Eye of the Griffin", "mpluxe_overlays", "MP_LUXE_TAT_007_M", "MP_LUXE_TAT_007_F", "ZONE_TORSO", 12450], ["Flying Eye", "mpluxe_overlays", "MP_LUXE_TAT_008_M", "MP_LUXE_TAT_008_F", "ZONE_TORSO", 18000], ["Floral Symmetry", "mpluxe_overlays", "MP_LUXE_TAT_009_M", "MP_LUXE_TAT_009_F", "ZONE_LEFT_ARM", 19150], ["Mermaid Harpist", "mpluxe_overlays", "MP_LUXE_TAT_013_M", "MP_LUXE_TAT_013_F", "ZONE_RIGHT_ARM", 16900], ["Ancient Queen", "mpluxe_overlays", "MP_LUXE_TAT_014_M", "MP_LUXE_TAT_014_F", "ZONE_TORSO", 18200], ["Smoking Sisters", "mpluxe_overlays", "MP_LUXE_TAT_015_M", "MP_LUXE_TAT_015_F", "ZONE_TORSO", 16250], ["Geisha Bloom", "mpluxe_overlays", "MP_LUXE_TAT_019_M", "MP_LUXE_TAT_019_F", "ZONE_RIGHT_ARM", 16850], ["Archangel &amp; Mary", "mpluxe_overlays", "MP_LUXE_TAT_020_M", "MP_LUXE_TAT_020_F", "ZONE_LEFT_ARM", 22500], ["Gabriel", "mpluxe_overlays", "MP_LUXE_TAT_021_M", "MP_LUXE_TAT_021_F", "ZONE_LEFT_ARM", 12850], ["Feather Mural", "mpluxe_overlays", "MP_LUXE_TAT_024_M", "MP_LUXE_TAT_024_F", "ZONE_TORSO", 27250], ["The Howler", "mpluxe2_overlays", "MP_LUXE_TAT_002_M", "MP_LUXE_TAT_002_F", "ZONE_TORSO", 11000], ["Fatal Dagger", "mpluxe2_overlays", "MP_LUXE_TAT_005_M", "MP_LUXE_TAT_005_F", "ZONE_LEFT_ARM", 10250], ["Intrometric", "mpluxe2_overlays", "MP_LUXE_TAT_010_M", "MP_LUXE_TAT_010_F", "ZONE_RIGHT_ARM", 14650], ["Cross of Roses", "mpluxe2_overlays", "MP_LUXE_TAT_011_M", "MP_LUXE_TAT_011_F", "ZONE_LEFT_LEG", 13250], ["Geometric Galaxy", "mpluxe2_overlays", "MP_LUXE_TAT_012_M", "MP_LUXE_TAT_012_F", "ZONE_TORSO", 26500], ["Egyptian Mural", "mpluxe2_overlays", "MP_LUXE_TAT_016_M", "MP_LUXE_TAT_016_F", "ZONE_LEFT_ARM", 18600], ["Heavenly Deity", "mpluxe2_overlays", "MP_LUXE_TAT_017_M", "MP_LUXE_TAT_017_F", "ZONE_RIGHT_ARM", 21550], ["Divine Goddess", "mpluxe2_overlays", "MP_LUXE_TAT_018_M", "MP_LUXE_TAT_018_F", "ZONE_LEFT_ARM", 23400], ["Cloaked Angel", "mpluxe2_overlays", "MP_LUXE_TAT_022_M", "MP_LUXE_TAT_022_F", "ZONE_TORSO", 28500], ["Starmetric", "mpluxe2_overlays", "MP_LUXE_TAT_023_M", "MP_LUXE_TAT_023_F", "ZONE_RIGHT_LEG", 15600], ["Reaper Sway", "mpluxe2_overlays", "MP_LUXE_TAT_025_M", "MP_LUXE_TAT_025_F", "ZONE_TORSO", 11500], ["Floral Print", "mpluxe2_overlays", "MP_LUXE_TAT_026_M", "MP_LUXE_TAT_026_F", "ZONE_RIGHT_ARM", 14700], ["Cobra Dawn", "mpluxe2_overlays", "MP_LUXE_TAT_027_M", "MP_LUXE_TAT_027_F", "ZONE_TORSO", 12750], ["Python Skull", "mpluxe2_overlays", "MP_LUXE_TAT_028_M", "MP_LUXE_TAT_028_F", "ZONE_LEFT_ARM", 11300], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_029_M", "MP_LUXE_TAT_029_F", "ZONE_TORSO", 30000], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_030_M", "MP_LUXE_TAT_030_F", "ZONE_RIGHT_ARM", 8000], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_031_M", "MP_LUXE_TAT_031_F", "ZONE_LEFT_ARM", 8000], ["Bless The Dead", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_000_M", "MP_Smuggler_Tattoo_000_F", "ZONE_TORSO", 11270], ["Crackshot", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_001_M", "MP_Smuggler_Tattoo_001_F", "ZONE_RIGHT_ARM", 10825], ["Dead Lies", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_002_M", "MP_Smuggler_Tattoo_002_F", "ZONE_TORSO", 12430], ["Give Nothing Back", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_003_M", "MP_Smuggler_Tattoo_003_F", "ZONE_TORSO", 13090], ["Honor", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_004_M", "MP_Smuggler_Tattoo_004_F", "ZONE_LEFT_ARM", 8150], ["Mutiny", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_005_M", "MP_Smuggler_Tattoo_005_F", "ZONE_RIGHT_ARM", 7920], ["Never Surrender", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_006_M", "MP_Smuggler_Tattoo_006_F", "ZONE_TORSO", 9475], ["No Honor", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_007_M", "MP_Smuggler_Tattoo_007_F", "ZONE_TORSO", 8525], ["Horrors Of The Deep", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_008_M", "MP_Smuggler_Tattoo_008_F", "ZONE_LEFT_ARM", 11045], ["Tall Ship Conflict", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_009_M", "MP_Smuggler_Tattoo_009_F", "ZONE_TORSO", 16625], ["See You In Hell", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_010_M", "MP_Smuggler_Tattoo_010_F", "ZONE_TORSO", 12815], ["Sinner", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_011_M", "MP_Smuggler_Tattoo_011_F", "ZONE_HEAD", 8110], ["Thief", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_012_M", "MP_Smuggler_Tattoo_012_F", "ZONE_HEAD", 10720], ["Torn Wings", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_013_M", "MP_Smuggler_Tattoo_013_F", "ZONE_TORSO", 10540], ["Mermaid's Curse", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_014_M", "MP_Smuggler_Tattoo_014_F", "ZONE_LEFT_ARM", 8825], ["Jolly Roger", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_015_M", "MP_Smuggler_Tattoo_015_F", "ZONE_TORSO", 9765], ["Skull Compass", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_016_M", "MP_Smuggler_Tattoo_016_F", "ZONE_TORSO", 13790], ["Framed Tall Ship", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_017_M", "MP_Smuggler_Tattoo_017_F", "ZONE_TORSO", 18850], ["Finders Keepers", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_018_M", "MP_Smuggler_Tattoo_018_F", "ZONE_TORSO", 16990], ["Lost At Sea", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_019_M", "MP_Smuggler_Tattoo_019_F", "ZONE_TORSO", 11105], ["Homeward Bound", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_020_M", "MP_Smuggler_Tattoo_020_F", "ZONE_RIGHT_LEG", 9155], ["Dead Tales", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_021_M", "MP_Smuggler_Tattoo_021_F", "ZONE_TORSO", 14860], ["X Marks The Spot", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_022_M", "MP_Smuggler_Tattoo_022_F", "ZONE_TORSO", 16710], ["Stylized Kraken", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_023_M", "MP_Smuggler_Tattoo_023_F", "ZONE_RIGHT_ARM", 14400], ["Pirate Captain", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_024_M", "MP_Smuggler_Tattoo_024_F", "ZONE_TORSO", 18210], ["Claimed By The Beast", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_025_M", "MP_Smuggler_Tattoo_025_F", "ZONE_TORSO", 17450], ["Stunt Skull", "mpstunt_overlays", "MP_MP_Stunt_Tat_000_M", "MP_MP_Stunt_Tat_000_F", "ZONE_HEAD", 4850], ["8 Eyed Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_001_M", "MP_MP_Stunt_tat_001_F", "ZONE_LEFT_ARM", 11600], ["Big Cat", "mpstunt_overlays", "MP_MP_Stunt_tat_002_M", "MP_MP_Stunt_tat_002_F", "ZONE_LEFT_ARM", 8850], ["Poison Wrench", "mpstunt_overlays", "MP_MP_Stunt_tat_003_M", "MP_MP_Stunt_tat_003_F", "ZONE_RIGHT_ARM", 4300], ["Scorpion", "mpstunt_overlays", "MP_MP_Stunt_tat_004_M", "MP_MP_Stunt_tat_004_F", "ZONE_HEAD", 6350], ["Demon Spark Plug", "mpstunt_overlays", "MP_MP_Stunt_tat_005_M", "MP_MP_Stunt_tat_005_F", "ZONE_RIGHT_LEG", 8850], ["Toxic Spider", "mpstunt_overlays", "MP_MP_Stunt_tat_006_M", "MP_MP_Stunt_tat_006_F", "ZONE_HEAD", 5900], ["Dagger Devil", "mpstunt_overlays", "MP_MP_Stunt_tat_007_M", "MP_MP_Stunt_tat_007_F", "ZONE_LEFT_LEG", 8150], ["Moonlight Ride", "mpstunt_overlays", "MP_MP_Stunt_tat_008_M", "MP_MP_Stunt_tat_008_F", "ZONE_LEFT_ARM", 14750], ["Arachnid of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_009_M", "MP_MP_Stunt_tat_009_F", "ZONE_RIGHT_ARM", 10800], ["Grave Vulture", "mpstunt_overlays", "MP_MP_Stunt_tat_010_M", "MP_MP_Stunt_tat_010_F", "ZONE_RIGHT_ARM", 11000], ["Wheels of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_011_M", "MP_MP_Stunt_tat_011_F", "ZONE_TORSO", 10750], ["Punk Biker", "mpstunt_overlays", "MP_MP_Stunt_tat_012_M", "MP_MP_Stunt_tat_012_F", "ZONE_TORSO", 11950], ["Dirt Track Hero", "mpstunt_overlays", "MP_MP_Stunt_tat_013_M", "MP_MP_Stunt_tat_013_F", "ZONE_LEFT_LEG", 15500], ["Bat Cat of Spades", "mpstunt_overlays", "MP_MP_Stunt_tat_014_M", "MP_MP_Stunt_tat_014_F", "ZONE_TORSO", 8300], ["Praying Gloves", "mpstunt_overlays", "MP_MP_Stunt_tat_015_M", "MP_MP_Stunt_tat_015_F", "ZONE_RIGHT_LEG", 13400], ["Coffin Racer", "mpstunt_overlays", "MP_MP_Stunt_tat_016_M", "MP_MP_Stunt_tat_016_F", "ZONE_RIGHT_ARM", 12950], ["Bat Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_017_M", "MP_MP_Stunt_tat_017_F", "ZONE_HEAD", 3800], ["Vintage Bully", "mpstunt_overlays", "MP_MP_Stunt_tat_018_M", "MP_MP_Stunt_tat_018_F", "ZONE_TORSO", 5400], ["Engine Heart", "mpstunt_overlays", "MP_MP_Stunt_tat_019_M", "MP_MP_Stunt_tat_019_F", "ZONE_TORSO", 8900], ["Piston Angel", "mpstunt_overlays", "MP_MP_Stunt_tat_020_M", "MP_MP_Stunt_tat_020_F", "ZONE_RIGHT_LEG", 6950], ["Golden Cobra", "mpstunt_overlays", "MP_MP_Stunt_tat_021_M", "MP_MP_Stunt_tat_021_F", "ZONE_LEFT_LEG", 21200], ["Piston Head", "mpstunt_overlays", "MP_MP_Stunt_tat_022_M", "MP_MP_Stunt_tat_022_F", "ZONE_LEFT_ARM", 16850], ["Tanked", "mpstunt_overlays", "MP_MP_Stunt_tat_023_M", "MP_MP_Stunt_tat_023_F", "ZONE_LEFT_ARM", 18500], ["Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_024_M", "MP_MP_Stunt_tat_024_F", "ZONE_TORSO", 8650], ["Speed Freak", "mpstunt_overlays", "MP_MP_Stunt_tat_025_M", "MP_MP_Stunt_tat_025_F", "ZONE_RIGHT_LEG", 7200], ["Winged Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_026_M", "MP_MP_Stunt_tat_026_F", "ZONE_TORSO", 12300], ["Punk Road Hog", "mpstunt_overlays", "MP_MP_Stunt_tat_027_M", "MP_MP_Stunt_tat_027_F", "ZONE_TORSO", 8950], ["Quad Goblin", "mpstunt_overlays", "MP_MP_Stunt_tat_028_M", "MP_MP_Stunt_tat_028_F", "ZONE_LEFT_LEG", 9850], ["Majestic Finish", "mpstunt_overlays", "MP_MP_Stunt_tat_029_M", "MP_MP_Stunt_tat_029_F", "ZONE_TORSO", 17350], ["Man's Ruin", "mpstunt_overlays", "MP_MP_Stunt_tat_030_M", "MP_MP_Stunt_tat_030_F", "ZONE_TORSO", 8150], ["Stunt Jesus", "mpstunt_overlays", "MP_MP_Stunt_tat_031_M", "MP_MP_Stunt_tat_031_F", "ZONE_LEFT_LEG", 11000], ["Wheelie Mouse", "mpstunt_overlays", "MP_MP_Stunt_tat_032_M", "MP_MP_Stunt_tat_032_F", "ZONE_RIGHT_LEG", 10350], ["Sugar Skull Trucker", "mpstunt_overlays", "MP_MP_Stunt_tat_033_M", "MP_MP_Stunt_tat_033_F", "ZONE_TORSO", 10400], ["Feather Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_034_M", "MP_MP_Stunt_tat_034_F", "ZONE_TORSO", 9900], ["Stuntman's End", "mpstunt_overlays", "MP_MP_Stunt_tat_035_M", "MP_MP_Stunt_tat_035_F", "ZONE_LEFT_ARM", 12700], ["Biker Stallion", "mpstunt_overlays", "MP_MP_Stunt_tat_036_M", "MP_MP_Stunt_tat_036_F", "ZONE_RIGHT_ARM", 2350], ["Big Grills", "mpstunt_overlays", "MP_MP_Stunt_tat_037_M", "MP_MP_Stunt_tat_037_F", "ZONE_TORSO", 6850], ["One Down Five Up", "mpstunt_overlays", "MP_MP_Stunt_tat_038_M", "MP_MP_Stunt_tat_038_F", "ZONE_RIGHT_ARM", 5750], ["Kaboom", "mpstunt_overlays", "MP_MP_Stunt_tat_039_M", "MP_MP_Stunt_tat_039_F", "ZONE_LEFT_ARM", 9350], ["Monkey Chopper", "mpstunt_overlays", "MP_MP_Stunt_tat_040_M", "MP_MP_Stunt_tat_040_F", "ZONE_TORSO", 15950], ["Brapp", "mpstunt_overlays", "MP_MP_Stunt_tat_041_M", "MP_MP_Stunt_tat_041_F", "ZONE_TORSO", 10100], ["Flaming Quad", "mpstunt_overlays", "MP_MP_Stunt_tat_042_M", "MP_MP_Stunt_tat_042_F", "ZONE_HEAD", 4150], ["Engine Arm", "mpstunt_overlays", "MP_MP_Stunt_tat_043_M", "MP_MP_Stunt_tat_043_F", "ZONE_LEFT_ARM", 10300], ["Ram Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_044_M", "MP_MP_Stunt_tat_044_F", "ZONE_TORSO", 13900], ["Severed Hand", "mpstunt_overlays", "MP_MP_Stunt_tat_045_M", "MP_MP_Stunt_tat_045_F", "ZONE_RIGHT_LEG", 19650], ["Full Throttle", "mpstunt_overlays", "MP_MP_Stunt_tat_046_M", "MP_MP_Stunt_tat_046_F", "ZONE_TORSO", 12750], ["Brake Knife", "mpstunt_overlays", "MP_MP_Stunt_tat_047_M", "MP_MP_Stunt_tat_047_F", "ZONE_RIGHT_LEG", 9200], ["Racing Doll", "mpstunt_overlays", "MP_MP_Stunt_tat_048_M", "MP_MP_Stunt_tat_048_F", "ZONE_TORSO", 11300], ["Seductive Mechanic", "mpstunt_overlays", "MP_MP_Stunt_tat_049_M", "MP_MP_Stunt_tat_049_F", "ZONE_RIGHT_ARM", 23000], ["Skull", "multiplayer_overlays", "FM_Tat_Award_M_000", "FM_Tat_Award_F_000", "ZONE_HEAD", 20000], ["Burning Heart", "multiplayer_overlays", "FM_Tat_Award_M_001", "FM_Tat_Award_F_001", "ZONE_LEFT_ARM", 1400], ["Grim Reaper Smoking Gun", "multiplayer_overlays", "FM_Tat_Award_M_002", "FM_Tat_Award_F_002", "ZONE_RIGHT_ARM", 9750], ["Blackjack", "multiplayer_overlays", "FM_Tat_Award_M_003", "FM_Tat_Award_F_003", "ZONE_TORSO", 2150], ["Hustler", "multiplayer_overlays", "FM_Tat_Award_M_004", "FM_Tat_Award_F_004", "ZONE_TORSO", 10000], ["Angel", "multiplayer_overlays", "FM_Tat_Award_M_005", "FM_Tat_Award_F_005", "ZONE_TORSO", 12400], ["Skull and Sword", "multiplayer_overlays", "FM_Tat_Award_M_006", "FM_Tat_Award_F_006", "ZONE_RIGHT_LEG", 3500], ["Racing Blonde", "multiplayer_overlays", "FM_Tat_Award_M_007", "FM_Tat_Award_F_007", "ZONE_LEFT_ARM", 4950], ["Los Santos Customs", "multiplayer_overlays", "FM_Tat_Award_M_008", "FM_Tat_Award_F_008", "ZONE_TORSO", 1350], ["Dragon and Dagger", "multiplayer_overlays", "FM_Tat_Award_M_009", "FM_Tat_Award_F_009", "ZONE_LEFT_LEG", 1450], ["Ride or Die", "multiplayer_overlays", "FM_Tat_Award_M_010", "FM_Tat_Award_F_010", "ZONE_RIGHT_ARM", 2700], ["Blank Scroll", "multiplayer_overlays", "FM_Tat_Award_M_011", "FM_Tat_Award_F_011", "ZONE_TORSO", 1200], ["Embellished Scroll", "multiplayer_overlays", "FM_Tat_Award_M_012", "FM_Tat_Award_F_012", "ZONE_TORSO", 1500], ["Seven Deadly Sins", "multiplayer_overlays", "FM_Tat_Award_M_013", "FM_Tat_Award_F_013", "ZONE_TORSO", 2650], ["Trust No One", "multiplayer_overlays", "FM_Tat_Award_M_014", "FM_Tat_Award_F_014", "ZONE_TORSO", 1900], ["Racing Brunette", "multiplayer_overlays", "FM_Tat_Award_M_015", "FM_Tat_Award_F_015", "ZONE_LEFT_ARM", 4950], ["Clown", "multiplayer_overlays", "FM_Tat_Award_M_016", "FM_Tat_Award_F_016", "ZONE_TORSO", 2400], ["Clown and Gun", "multiplayer_overlays", "FM_Tat_Award_M_017", "FM_Tat_Award_F_017", "ZONE_TORSO", 5100], ["Clown Dual Wield", "multiplayer_overlays", "FM_Tat_Award_M_018", "FM_Tat_Award_F_018", "ZONE_TORSO", 7400], ["Clown Dual Wield Dollars", "multiplayer_overlays", "FM_Tat_Award_M_019", "FM_Tat_Award_F_019", "ZONE_TORSO", 10000], ["Brotherhood", "multiplayer_overlays", "FM_Tat_M_000", "FM_Tat_F_000", "ZONE_RIGHT_ARM", 10000], ["Dragons", "multiplayer_overlays", "FM_Tat_M_001", "FM_Tat_F_001", "ZONE_RIGHT_ARM", 12500], ["Melting Skull", "multiplayer_overlays", "FM_Tat_M_002", "FM_Tat_F_002", "ZONE_LEFT_LEG", 3750], ["Dragons and Skull", "multiplayer_overlays", "FM_Tat_M_003", "FM_Tat_F_003", "ZONE_RIGHT_ARM", 10000], ["Faith", "multiplayer_overlays", "FM_Tat_M_004", "FM_Tat_F_004", "ZONE_TORSO", 10000], ["Serpents", "multiplayer_overlays", "FM_Tat_M_005", "FM_Tat_F_005", "ZONE_LEFT_ARM", 2400], ["Oriental Mural", "multiplayer_overlays", "FM_Tat_M_006", "FM_Tat_F_006", "ZONE_LEFT_ARM", 5100], ["The Warrior", "multiplayer_overlays", "FM_Tat_M_007", "FM_Tat_F_007", "ZONE_RIGHT_LEG", 3750], ["Dragon Mural", "multiplayer_overlays", "FM_Tat_M_008", "FM_Tat_F_008", "ZONE_LEFT_LEG", 4800], ["Skull on the Cross", "multiplayer_overlays", "FM_Tat_M_009", "FM_Tat_F_009", "ZONE_TORSO", 12350], ["LS Flames", "multiplayer_overlays", "FM_Tat_M_010", "FM_Tat_F_010", "ZONE_TORSO", 2500], ["LS Script", "multiplayer_overlays", "FM_Tat_M_011", "FM_Tat_F_011", "ZONE_TORSO", 1900], ["Los Santos Bills", "multiplayer_overlays", "FM_Tat_M_012", "FM_Tat_F_012", "ZONE_TORSO", 10000], ["Eagle and Serpent", "multiplayer_overlays", "FM_Tat_M_013", "FM_Tat_F_013", "ZONE_TORSO", 4500], ["Flower Mural", "multiplayer_overlays", "FM_Tat_M_014", "FM_Tat_F_014", "ZONE_RIGHT_ARM", 5000], ["Zodiac Skull", "multiplayer_overlays", "FM_Tat_M_015", "FM_Tat_F_015", "ZONE_LEFT_ARM", 3600], ["Evil Clown", "multiplayer_overlays", "FM_Tat_M_016", "FM_Tat_F_016", "ZONE_TORSO", 12250], ["Tribal", "multiplayer_overlays", "FM_Tat_M_017", "FM_Tat_F_017", "ZONE_RIGHT_LEG", 3500], ["Serpent Skull", "multiplayer_overlays", "FM_Tat_M_018", "FM_Tat_F_018", "ZONE_RIGHT_ARM", 7500], ["The Wages of Sin", "multiplayer_overlays", "FM_Tat_M_019", "FM_Tat_F_019", "ZONE_TORSO", 12300], ["Dragon", "multiplayer_overlays", "FM_Tat_M_020", "FM_Tat_F_020", "ZONE_TORSO", 7500], ["Fiery Dragon", "multiplayer_overlays", "FM_Tat_M_022", "FM_Tat_F_022", "ZONE_RIGHT_LEG", 7300], ["Hottie", "multiplayer_overlays", "FM_Tat_M_023", "FM_Tat_F_023", "ZONE_LEFT_LEG", 7250], ["Flaming Cross", "multiplayer_overlays", "FM_Tat_M_024", "FM_Tat_F_024", "ZONE_TORSO", 11900], ["LS Bold", "multiplayer_overlays", "FM_Tat_M_025", "FM_Tat_F_025", "ZONE_TORSO", 2750], ["Smoking Dagger", "multiplayer_overlays", "FM_Tat_M_026", "FM_Tat_F_026", "ZONE_LEFT_LEG", 1750], ["Virgin Mary", "multiplayer_overlays", "FM_Tat_M_027", "FM_Tat_F_027", "ZONE_RIGHT_ARM", 7300], ["Mermaid", "multiplayer_overlays", "FM_Tat_M_028", "FM_Tat_F_028", "ZONE_RIGHT_ARM", 3250], ["Trinity Knot", "multiplayer_overlays", "FM_Tat_M_029", "FM_Tat_F_029", "ZONE_TORSO", 1000], ["Lucky Celtic Dogs", "multiplayer_overlays", "FM_Tat_M_030", "FM_Tat_F_030", "ZONE_TORSO", 5000], ["Lady M", "multiplayer_overlays", "FM_Tat_M_031", "FM_Tat_F_031", "ZONE_LEFT_ARM", 7500], ["Faith", "multiplayer_overlays", "FM_Tat_M_032", "FM_Tat_F_032", "ZONE_LEFT_LEG", 5100], ["Chinese Dragon", "multiplayer_overlays", "FM_Tat_M_033", "FM_Tat_F_033", "ZONE_LEFT_LEG", 5050], ["Flaming Shamrock", "multiplayer_overlays", "FM_Tat_M_034", "FM_Tat_F_034", "ZONE_TORSO", 2450], ["Dragon", "multiplayer_overlays", "FM_Tat_M_035", "FM_Tat_F_035", "ZONE_TORSO", 4950], ["Way of the Gun", "multiplayer_overlays", "FM_Tat_M_036", "FM_Tat_F_036", "ZONE_TORSO", 5100], ["Grim Reaper", "multiplayer_overlays", "FM_Tat_M_037", "FM_Tat_F_037", "ZONE_LEFT_LEG", 12250], ["Dagger", "multiplayer_overlays", "FM_Tat_M_038", "FM_Tat_F_038", "ZONE_RIGHT_ARM", 1150], ["Broken Skull", "multiplayer_overlays", "FM_Tat_M_039", "FM_Tat_F_039", "ZONE_RIGHT_LEG", 7500], ["Flaming Skull", "multiplayer_overlays", "FM_Tat_M_040", "FM_Tat_F_040", "ZONE_RIGHT_LEG", 7600], ["Dope Skull", "multiplayer_overlays", "FM_Tat_M_041", "FM_Tat_F_041", "ZONE_LEFT_ARM", 2600], ["Flaming Scorpion", "multiplayer_overlays", "FM_Tat_M_042", "FM_Tat_F_042", "ZONE_RIGHT_LEG", 2500], ["Indian Ram", "multiplayer_overlays", "FM_Tat_M_043", "FM_Tat_F_043", "ZONE_RIGHT_LEG", 7450], ["Stone Cross", "multiplayer_overlays", "FM_Tat_M_044", "FM_Tat_F_044", "ZONE_TORSO", 7500], ["Skulls and Rose", "multiplayer_overlays", "FM_Tat_M_045", "FM_Tat_F_045", "ZONE_TORSO", 10000], ["Lion", "multiplayer_overlays", "FM_Tat_M_047", "FM_Tat_F_047", "ZONE_RIGHT_ARM", 2500], ['Wolf', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_000_M', 'MP_Christmas2017_Tattoo_000_F', 'ZONE_TORSO', 1500], ['Mkb', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_001_M', 'MP_Christmas2017_Tattoo_001_F', 'ZONE_LEFT_ARM', 1900], ['Diabolo 1080', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_002_M', 'MP_Christmas2017_Tattoo_002_F', 'ZONE_TORSO', 1420], ['RedPep', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_003_M', 'MP_Christmas2017_Tattoo_003_F', 'ZONE_TORSO', 1600], ['DSnake', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_004_M', 'MP_Christmas2017_Tattoo_004_F', 'ZONE_LEFT_ARM', 2800], ['DWarrior', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_005_M', 'MP_Christmas2017_Tattoo_005_F', 'ZONE_TORSO', 4450], ['Jellyfish', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_006_M', 'MP_Christmas2017_Tattoo_006_F', 'ZONE_RIGHT_ARM', 2800], ['PSkin', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_007_M', 'MP_Christmas2017_Tattoo_007_F', 'ZONE_LEFT_ARM', 3150], ['DeadRome', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_008_M', 'MP_Christmas2017_Tattoo_008_F', 'ZONE_TORSO', 2950], ['IGnome', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_009_M', 'MP_Christmas2017_Tattoo_009_F', 'ZONE_TORSO', 2650], ['RWarrior', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_010_M', 'MP_Christmas2017_Tattoo_010_F', 'ZONE_TORSO', 3000], ['Skull', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_011_M', 'MP_Christmas2017_Tattoo_011_F', 'ZONE_TORSO', 3350], ['Catwoman', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_012_M', 'MP_Christmas2017_Tattoo_012_F', 'ZONE_RIGHT_ARM', 1050], ['Katana', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_013_M', 'MP_Christmas2017_Tattoo_013_F', 'ZONE_LEFT_ARM', 3450], ['Bracelet', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_014_M', 'MP_Christmas2017_Tattoo_014_F', 'ZONE_RIGHT_ARM', 850], ['Samurai', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_015_M', 'MP_Christmas2017_Tattoo_015_F', 'ZONE_TORSO', 3550], ['Raven', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_016_M', 'MP_Christmas2017_Tattoo_016_F', 'ZONE_TORSO', 3850], ['Wing', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_017_M', 'MP_Christmas2017_Tattoo_017_F', 'ZONE_RIGHT_ARM', 2900], ['Meat', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_018_M', 'MP_Christmas2017_Tattoo_018_F', 'ZONE_RIGHT_ARM', 2350], ['SForce', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_019_M', 'MP_Christmas2017_Tattoo_019_F', 'ZONE_TORSO', 2150], ['Jellyfish2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_020_M', 'MP_Christmas2017_Tattoo_020_F', 'ZONE_TORSO', 3200], ['Battle', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_021_M', 'MP_Christmas2017_Tattoo_021_F', 'ZONE_TORSO', 3750], ['RRider', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_022_M', 'MP_Christmas2017_Tattoo_022_F', 'ZONE_TORSO', 4000], ['Demon', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_023_M', 'MP_Christmas2017_Tattoo_023_F', 'ZONE_RIGHT_ARM', 3800], ['Dragon', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_024_M', 'MP_Christmas2017_Tattoo_024_F', 'ZONE_TORSO', 3150], ['FSnake', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_025_M', 'MP_Christmas2017_Tattoo_025_F', 'ZONE_LEFT_ARM', 3600], ['Skull2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_026_M', 'MP_Christmas2017_Tattoo_026_F', 'ZONE_TORSO', 2500], ['Swords', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_027_M', 'MP_Christmas2017_Tattoo_027_F', 'ZONE_TORSO', 3000], ['Bracelet2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_028_M', 'MP_Christmas2017_Tattoo_028_F', 'ZONE_RIGHT_ARM', 1800], ['DDogs', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_029_M', 'MP_Christmas2017_Tattoo_029_F', 'ZONE_LEFT_ARM', 3100], ['Knife', 'mpvinewood_overlays', 'MP_Vinewood_Tat_000_M', 'MP_Vinewood_Tat_000_F', 'ZONE_TORSO', 2850], ['Jackpot', 'mpvinewood_overlays', 'MP_Vinewood_Tat_001_M', 'MP_Vinewood_Tat_001_F', 'ZONE_TORSO', 2950], ['Cards', 'mpvinewood_overlays', 'MP_Vinewood_Tat_002_M', 'MP_Vinewood_Tat_002_F', 'ZONE_LEFT_ARM', 2650], ['Skull3', 'mpvinewood_overlays', 'MP_Vinewood_Tat_003_M', 'MP_Vinewood_Tat_003_F', 'ZONE_TORSO', 2600], ['LadyLuck', 'mpvinewood_overlays', 'MP_Vinewood_Tat_004_M', 'MP_Vinewood_Tat_004_F', 'ZONE_RIGHT_ARM', 3100], ['GetLucky', 'mpvinewood_overlays', 'MP_Vinewood_Tat_005_M', 'MP_Vinewood_Tat_005_F', 'ZONE_LEFT_ARM', 3000], ['Pattern', 'mpvinewood_overlays', 'MP_Vinewood_Tat_006_M', 'MP_Vinewood_Tat_006_F', 'ZONE_TORSO', 6500], ['777', 'mpvinewood_overlays', 'MP_Vinewood_Tat_007_M', 'MP_Vinewood_Tat_007_F', 'ZONE_TORSO', 2750], ['LuckySnake', 'mpvinewood_overlays', 'MP_Vinewood_Tat_008_M', 'MP_Vinewood_Tat_008_F', 'ZONE_TORSO', 3400], ['FillDeath', 'mpvinewood_overlays', 'MP_Vinewood_Tat_009_M', 'MP_Vinewood_Tat_009_F', 'ZONE_TORSO', 4000], ['Races', 'mpvinewood_overlays', 'MP_Vinewood_Tat_010_M', 'MP_Vinewood_Tat_010_F', 'ZONE_TORSO', 4150], ['Gamble', 'mpvinewood_overlays', 'MP_Vinewood_Tat_011_M', 'MP_Vinewood_Tat_011_F', 'ZONE_TORSO', 4000], ['LuckySkull', 'mpvinewood_overlays', 'MP_Vinewood_Tat_012_M', 'MP_Vinewood_Tat_012_F', 'ZONE_TORSO', 3100], ['Cowboy', 'mpvinewood_overlays', 'MP_Vinewood_Tat_013_M', 'MP_Vinewood_Tat_013_F', 'ZONE_LEFT_LEG', 2000], ['Lady', 'mpvinewood_overlays', 'MP_Vinewood_Tat_014_M', 'MP_Vinewood_Tat_014_F', 'ZONE_LEFT_ARM', 2400], ['Joker', 'mpvinewood_overlays', 'MP_Vinewood_Tat_015_M', 'MP_Vinewood_Tat_015_F', 'ZONE_TORSO', 3750], ['Ace', 'mpvinewood_overlays', 'MP_Vinewood_Tat_016_M', 'MP_Vinewood_Tat_016_F', 'ZONE_TORSO', 3000], ['LadyLuck2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_017_M', 'MP_Vinewood_Tat_017_F', 'ZONE_TORSO', 3800], ['Win', 'mpvinewood_overlays', 'MP_Vinewood_Tat_018_M', 'MP_Vinewood_Tat_018_F', 'ZONE_RIGHT_ARM', 3600], ['Excitement', 'mpvinewood_overlays', 'MP_Vinewood_Tat_019_M', 'MP_Vinewood_Tat_019_F', 'ZONE_LEFT_ARM', 2800], ['Dollar', 'mpvinewood_overlays', 'MP_Vinewood_Tat_020_M', 'MP_Vinewood_Tat_020_F', 'ZONE_RIGHT_LEG', 1000], ['Lady', 'mpvinewood_overlays', 'MP_Vinewood_Tat_021_M', 'MP_Vinewood_Tat_021_F', 'ZONE_TORSO', 3000], ['Cash', 'mpvinewood_overlays', 'MP_Vinewood_Tat_022_M', 'MP_Vinewood_Tat_022_F', 'ZONE_TORSO', 1500], ['Horseshoe', 'mpvinewood_overlays', 'MP_Vinewood_Tat_023_M', 'MP_Vinewood_Tat_023_F', 'ZONE_TORSO', 2750], ['Lips', 'mpvinewood_overlays', 'MP_Vinewood_Tat_024_M', 'MP_Vinewood_Tat_024_F', 'ZONE_TORSO', 2800], ['Queen', 'mpvinewood_overlays', 'MP_Vinewood_Tat_025_M', 'MP_Vinewood_Tat_025_F', 'ZONE_RIGHT_ARM', 1500], ['Rose', 'mpvinewood_overlays', 'MP_Vinewood_Tat_026_M', 'MP_Vinewood_Tat_026_F', 'ZONE_LEFT_ARM', 3150], ['Ball', 'mpvinewood_overlays', 'MP_Vinewood_Tat_027_M', 'MP_Vinewood_Tat_027_F', 'ZONE_LEFT_LEG', 1600], ['Skull4', 'mpvinewood_overlays', 'MP_Vinewood_Tat_028_M', 'MP_Vinewood_Tat_028_F', 'ZONE_RIGHT_ARM', 1450], ['Casino', 'mpvinewood_overlays', 'MP_Vinewood_Tat_029_M', 'MP_Vinewood_Tat_029_F', 'ZONE_TORSO', 3750], ['Cards2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_030_M', 'MP_Vinewood_Tat_030_F', 'ZONE_TORSO', 3400], ['Win2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_031_M', 'MP_Vinewood_Tat_031_F', 'ZONE_TORSO', 2650], ['Excitement2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_032_M', 'MP_Vinewood_Tat_032_F', 'ZONE_TORSO', 4000]],
  printList: _inventory.printListUtil,
  animTarget: [["Тест1", "mp_ped_interaction", "handshake_guy_a", '', "mp_ped_interaction", "handshake_guy_b", ''], ["Тест2", "mp_ped_interaction", "highfive_guy_a", '', "mp_ped_interaction", "highfive_guy_b", ''], ["Тест3", "mp_ped_interaction", "hugs_guy_a", '', "mp_ped_interaction", "hugs_guy_b", ''], ["Поцелуй", "mp_ped_interaction", "kisses_guy_a", '', "mp_ped_interaction", "kisses_guy_b", ''], ["Минет", "misscarsteal2pimpsex", "pimpsex_punter", '', "misscarsteal2pimpsex", "pimpsex_hooker", 'SEX_ORAL_FEM'], ["Секс", "rcmpaparazzo_2", "shag_loop_a", '', "rcmpaparazzo_2", "shag_loop_poppy", 'SEX_GENERIC']],
  clothM: _inventory.clothMutil,
  propM: _inventory.propMutil,
  clothF: _inventory.clothFutil,
  propF: _inventory.propFutil,
  shopList: [[0, 99, 11, 7.215882, 6515.305, 30.87785], [0, 99, 6, 3.466815, 6518.92, 30.87784], [0, 99, 4, 12.71569, 6512.715, 30.88769], [0, 99, 7, 1.658767, 6510.97, 30.87783], [0, 99, 0, 4.550588, 6512.713, 30.87783], [0, 99, 4, 1698.325, 4829.555, 41.07307], [0, 99, 11, 1690.733, 4828.01, 41.07459], [0, 99, 6, 1687.603, 4825.643, 41.06312], [0, 99, 7, 1692.49, 4819.289, 41.06311], [0, 99, 0, 1693.481, 4822.59, 41.06311], [0, 99, 4, 1190.677, 2715.679, 37.2317], [0, 99, 11, 1190.818, 2707.836, 37.2341], [0, 99, 6, 1193.067, 2704.312, 37.22263], [0, 99, 7, 1199.943, 2708.348, 37.22263], [0, 99, 0, 1196.461, 2709.831, 37.22263], [0, 99, 4, -1109.227, 2710.372, 18.11722], [0, 99, 11, -1103.798, 2704.997, 18.11442], [0, 99, 6, -1100.211, 2704.089, 18.10786], [0, 99, 7, -1098.085, 2711.771, 18.10786], [0, 99, 0, -1101.126, 2710.412, 18.10787], [0, 99, 4, 70.10378, -1398.973, 28.38605], [0, 99, 11, 78.01713, -1398.639, 28.38763], [0, 99, 6, 81.12482, -1396.431, 28.37614], [0, 99, 7, 76.73786, -1389.445, 28.37614], [0, 99, 0, 75.54642, -1392.966, 28.37614], [5, 100, 4, -830.1619, -1072.01, 10.33779], [5, 100, 11, -826.2064, -1078.758, 10.33961], [5, 100, 6, -822.129, -1079.153, 10.32811], [5, 100, 7, -818.6534, -1073.33, 10.32811], [5, 100, 0, -821.9241, -1073.606, 10.32811], [5, 100, 4, 430.7869, -800.224, 28.50112], [5, 100, 11, 423.1232, -800.3843, 28.50263], [5, 100, 6, 419.7163, -802.772, 28.49114], [5, 100, 7, 423.8082, -809.5381, 28.49114], [5, 100, 0, 425.3421, -806.1147, 28.49114], [2, 12, 4, -1458.433, -241.0004, 48.80345], [2, 12, 11, -1452.539, -233.3496, 48.80202], [2, 12, 6, -1445.201, -230.5876, 48.80906], [2, 12, 7, -1455.18, -239.3743, 48.80602], [2, 12, 0, -1450.898, -237.513, 48.80984], [2, 12, 4, -708.843, -162.0708, 36.41514], [2, 12, 11, -714.5906, -153.7282, 36.41514], [2, 12, 6, -715.0825, -145.761, 36.41514], [2, 12, 7, -709.8553, -157.7941, 36.41514], [2, 12, 0, -709.6611, -153.9213, 36.41514], [2, 12, 4, -157.3058, -296.2686, 38.73331], [2, 12, 11, -160.0656, -306.443, 38.73331], [2, 12, 6, -165.3356, -311.55, 38.73331], [2, 12, 7, -159.7782, -299.7693, 38.73331], [2, 12, 0, -163.0412, -302.7085, 38.73331], [1, 13, 4, 614.4988, 2769.117, 41.08814], [1, 13, 11, 622.2966, 2753.463, 41.08813], [1, 13, 6, 620.8229, 2764.088, 41.08813], [1, 13, 0, 614.5656, 2763.865, 41.08813], [1, 13, 4, -1187.721, -764.7759, 16.31995], [1, 13, 11, -1195.579, -778.9496, 16.33171], [1, 13, 6, -1188.565, -772.6169, 16.33035], [1, 13, 0, -1193.588, -768.8832, 16.31938], [1, 13, 4, -3173.798, 1038.395, 19.86322], [1, 13, 11, -3173.733, 1054.702, 19.86322], [1, 13, 6, -3176.957, 1045.48, 19.86322], [1, 13, 0, -3170.668, 1044.528, 19.86322], [1, 13, 4, 123.0545, -229.0611, 53.55783], [1, 13, 11, 121.9441, -213.1175, 53.55784], [1, 13, 6, 119.3071, -222.5087, 53.55784], [1, 13, 0, 125.6656, -222.8498, 53.55784], [4, 101, 7, -619.7982, -233.6058, 37.05705], [4, 101, 0, -624.3495, -227.8713, 37.05706], [3, 75, 1, 21.33333, -1112.386, 28.79701], [3, 76, 1, 246.6539, -50.51653, 68.94112], [3, 77, 1, 839.9971, -1028.986, 27.19485], [3, 78, 1, -659.8185, -940.0905, 20.82922], [3, 79, 1, -1310.93, -395.5177, 35.69578], [3, 102, 1, 808.9792, -2152.68, 28.61901], [3, 103, 1, 2565.358, 299.0157, 107.7349], [3, 104, 1, -3166.429, 1088.027, 19.83874], [3, 105, 1, -1112.798, 2696.522, 17.55415], [3, 106, 1, 1698.685, 3758.594, 33.70533], [3, 107, 1, -325.2645, 6082.25, 30.45477]]
};
exports.enums = enums;
},{"../util/sharedData":"bNis","../util/inventory":"Jhu1"}],"GEp2":[function(require,module,exports) {
module.exports = {
  "2460120199": "Antique Cavalry Dagger",
  "2508868239": "Baseball Bat",
  "4192643659": "Bottle",
  "2227010557": "Crowbar",
  "2725352035": "Fist",
  "2343591895": "Flashlight",
  "1141786504": "Golf Club",
  "1317494643": "Hammer",
  "4191993645": "Hatchet",
  "3638508604": "Knuckle",
  "2578778090": "Knife",
  "3713923289": "Machete",
  "3756226112": "Switchblade",
  "1737195953": "Nightstick",
  "419712736": "Pipe Wrench",
  "3441901897": "Battle Axe",
  "2484171525": "Pool Cue",
  "940833800": "Stone Hatchet",
  "453432689": "Pistol",
  "3219281620": "Pistol MK2",
  "1593441988": "Combat Pistol",
  "584646201": "AP Pistol",
  "911657153": "Stun Gun",
  "2578377531": "Pistol .50",
  "3218215474": "SNS Pistol",
  "2285322324": "SNS Pistol MK2",
  "3523564046": "Heavy Pistol",
  "137902532": "Vintage Pistol",
  "1198879012": "Flare Gun",
  "3696079510": "Marksman Pistol",
  "3249783761": "Heavy Revolver",
  "3415619887": "Heavy Revolver MK2",
  "2548703416": "Double Action",
  "2939590305": "Up-n-Atomizer",
  "324215364": "Micro SMG",
  "736523883": "SMG",
  "2024373456": "SMG MK2",
  "4024951519": "Assault SMG",
  "171789620": "Combat PDW",
  "3675956304": "Machine Pistol",
  "3173288789": "Mini SMG",
  "1198256469": "Unholy Hellbringer",
  "487013001": "Pump Shotgun",
  "1432025498": "Pump Shotgun MK2",
  "2017895192": "Sawed-Off Shotgun",
  "3800352039": "Assault Shotgun",
  "2640438543": "Bullpup Shotgun",
  "2828843422": "Musket",
  "984333226": "Heavy Shotgun",
  "4019527611": "Double Barrel Shotgun",
  "317205821": "Sweeper Shotgun",
  "3220176749": "Assault Rifle",
  "961495388": "Assault Rifle MK2",
  "2210333304": "Carbine Rifle",
  "4208062921": "Carbine Rifle MK2",
  "2937143193": "Advanced Rifle",
  "3231910285": "Special Carbine",
  "2526821735": "Special Carbine MK2",
  "2132975508": "Bullpup Rifle",
  "2228681469": "Bullpup Rifle MK2",
  "1649403952": "Compact Rifle",
  "2634544996": "MG",
  "2144741730": "Combat MG",
  "3686625920": "Combat MG MK2",
  "1627465347": "Gusenberg Sweeper",
  "100416529": "Sniper Rifle",
  "205991906": "Heavy Sniper",
  "177293209": "Heavy Sniper MK2",
  "3342088282": "Marksman Rifle",
  "1785463520": "Marksman Rifle MK2",
  "2982836145": "RPG",
  "2726580491": "Grenade Launcher",
  "1305664598": "Smoke Grenade Launcher",
  "1119849093": "Minigun",
  "2138347493": "Firework Launcher",
  "1834241177": "Railgun",
  "1672152130": "Homing Launcher",
  "125959754": "Compact Grenade Launcher",
  "3056410471": "Ray Minigun",
  "2481070269": "Grenade",
  "2694266206": "BZ Gas",
  "4256991824": "Smoke Grenade",
  "1233104067": "Flare",
  "615608432": "Molotov",
  "741814745": "Sticky Bomb",
  "2874559379": "Proximity Mine",
  "126349499": "Snowball",
  "3125143736": "Pipe Bomb",
  "600439132": "Baseball",
  "883325847": "Jerry Can",
  "101631238": "Fire Extinguisher",
  "4222310262": "Parachute",
  "2461879995": "Electric Fence",
  "3425972830": "Hit by Water Cannon",
  "133987706": "Rammed by Car",
  "2741846334": "Run Over by Car",
  "3452007600": "Fall",
  "4194021054": "Animal",
  "324506233": "Airstrike Rocket",
  "2339582971": "Bleeding",
  "2294779575": "Briefcase",
  "28811031": "Briefcase 02",
  "148160082": "Cougar",
  "1223143800": "Barbed Wire",
  "4284007675": "Drowning",
  "1936677264": "Drowning In Vehicle",
  "539292904": "Explosion",
  "910830060": "Exhaustion",
  "3750660587": "Fire",
  "341774354": "Heli Crash",
  "3204302209": "Vehicle Rocket",
  "2282558706": "Vehicle Akula Barrage",
  "431576697": "Vehicle Akula Minigun",
  "2092838988": "Vehicle Akula Missile",
  "476907586": "Vehicle Akula Turret Dual",
  "3048454573": "Vehicle Akula Turret Single",
  "328167896": "Vehicle APC Cannon",
  "190244068": "Vehicle APC MG",
  "1151689097": "Vehicle APC Missile",
  "3293463361": "Vehicle Ardent MG",
  "2556895291": "Vehicle Avenger Cannon",
  "2756453005": "Vehicle Barrage Rear GL",
  "1200179045": "Vehicle Barrage Rear MG",
  "525623141": "Vehicle Barrage Rear Minigun",
  "4148791700": "Vehicle Barrage Top MG",
  "1000258817": "Vehicle Barrage Top Minigun",
  "3628350041": "Vehicle Bombushka Cannon",
  "741027160": "Vehicle Bombushka Dual MG",
  "3959029566": "Vehicle Cannon Blazer",
  "1817275304": "Vehicle Caracara MG",
  "1338760315": "Vehicle Caracara Minigun",
  "2722615358": "Vehicle Cherno Missile",
  "3936892403": "Vehicle Comet MG",
  "2600428406": "Vehicle Deluxo MG",
  "3036244276": "Vehicle Deluxo Missile",
  "1595421922": "Vehicle Dogfighter MG",
  "3393648765": "Vehicle Dogfighter Missile",
  "2700898573": "Vehicle Dune Grenade Launcher",
  "3507816399": "Vehicle Dune MG",
  "1416047217": "Vehicle Dune Minigun",
  "1566990507": "Vehicle Enemy Laser",
  "1987049393": "Vehicle Hacker Missile",
  "2011877270": "Vehicle Hacker Missile Homing",
  "1331922171": "Vehicle Halftrack Dual MG",
  "1226518132": "Vehicle Halftrack Quad MG",
  "855547631": "Vehicle Havok Minigun",
  "785467445": "Vehicle Hunter Barrage",
  "704686874": "Vehicle Hunter Cannon",
  "1119518887": "Vehicle Hunter MG",
  "153396725": "Vehicle Hunter Missile",
  "2861067768": "Vehicle Insurgent Minigun",
  "507170720": "Vehicle Khanjali Cannon",
  "2206953837": "Vehicle Khanjali Cannon Heavy",
  "394659298": "Vehicle Khanjali GL",
  "711953949": "Vehicle Khanjali MG",
  "3754621092": "Vehicle Menacer MG",
  "3303022956": "Vehicle Microlight MG",
  "3846072740": "Vehicle Mobileops Cannon",
  "3857952303": "Vehicle Mogul Dual Nose",
  "3123149825": "Vehicle Mogul Dual Turret",
  "4128808778": "Vehicle Mogul Nose",
  "3808236382": "Vehicle Mogul Turret",
  "2220197671": "Vehicle Mule4 MG",
  "1198717003": "Vehicle Mule4 Missile",
  "3708963429": "Vehicle Mule4 Turret GL",
  "2786772340": "Vehicle Nightshark MG",
  "1097917585": "Vehicle Nose Turret Valkyrie",
  "3643944669": "Vehicle Oppressor MG",
  "2344076862": "Vehicle Oppressor Missile",
  "3595383913": "Vehicle Oppressor2 Cannon",
  "3796180438": "Vehicle Oppressor2 MG",
  "1966766321": "Vehicle Oppressor2 Missile",
  "3473446624": "Vehicle Plane Rocket",
  "1186503822": "Vehicle Player Buzzard",
  "3800181289": "Vehicle Player Lazer",
  "1638077257": "Vehicle Player Savage",
  "2456521956": "Vehicle Pounder2 Barrage",
  "2467888918": "Vehicle Pounder2 GL",
  "2263283790": "Vehicle Pounder2 Mini",
  "162065050": "Vehicle Pounder2 Missile",
  "3530961278": "Vehicle Radar",
  "3177079402": "Vehicle Revolter MG",
  "3878337474": "Vehicle Rogue Cannon",
  "158495693": "Vehicle Rogue MG",
  "1820910717": "Vehicle Rogue Missile",
  "50118905": "Vehicle Ruiner Bullet",
  "84788907": "Vehicle Ruiner Rocket",
  "3946965070": "Vehicle Savestra MG",
  "231629074": "Vehicle Scramjet MG",
  "3169388763": "Vehicle Scramjet Missile",
  "1371067624": "Vehicle Seabreeze MG",
  "3450622333": "Vehicle Searchlight",
  "4171469727": "Vehicle Space Rocket",
  "3355244860": "Vehicle Speedo4 MG",
  "3595964737": "Vehicle Speedo4 Turret MG",
  "2667462330": "Vehicle Speedo4 Turret Mini",
  "968648323": "Vehicle Strikeforce Barrage",
  "955522731": "Vehicle Strikeforce Cannon",
  "519052682": "Vehicle Strikeforce Missile",
  "1176362416": "Vehicle Subcar MG",
  "3565779982": "Vehicle Subcar Missile",
  "3884172218": "Vehicle Subcar Torpedo",
  "1744687076": "Vehicle Tampa Dual Minigun",
  "3670375085": "Vehicle Tampa Fixed Minigun",
  "2656583842": "Vehicle Tampa Missile",
  "1015268368": "Vehicle Tampa Mortar",
  "1945616459": "Vehicle Tank",
  "3683206664": "Vehicle Technical Minigun",
  "1697521053": "Vehicle Thruster MG",
  "1177935125": "Vehicle Thruster Missile",
  "2156678476": "Vehicle Trailer Dualaa",
  "341154295": "Vehicle Trailer Missile",
  "1192341548": "Vehicle Trailer Quad MG",
  "2966510603": "Vehicle Tula Dual MG",
  "1217122433": "Vehicle Tula MG",
  "376489128": "Vehicle Tula Minigun",
  "1100844565": "Vehicle Tula Nose MG",
  "3041872152": "Vehicle Turret Boxville",
  "1155224728": "Vehicle Turret Insurgent",
  "729375873": "Vehicle Turret Limo",
  "2144528907": "Vehicle Turret Technical",
  "2756787765": "Vehicle Turret Valkyrie",
  "4094131943": "Vehicle Vigilante MG",
  "1347266149": "Vehicle Vigilante Missile",
  "2275421702": "Vehicle Viseris MG",
  "1150790720": "Vehicle Volatol Dual MG",
  "1741783703": "Vehicle Water Cannon"
};
},{}],"Zeqt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recLists = exports.fractionUtil = exports.fractionList = exports.fraction = void 0;
const recLists = [{
  name: "Рецепт на марихуану",
  param: "allow_marg",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 1000
}, {
  name: "Рецепт на антипохмелин",
  param: "allow_antipohmel",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 1000
}, {
  name: "Медицинская страховка",
  param: "med_lic",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 15000
}, {
  name: "Лицензия на адвоката",
  param: "law_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 15000
}, {
  name: "Лицензия на бизнес",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 10000
}, {
  name: "Лицензия на рыбалку",
  param: "fish_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 7000
}, {
  name: "Лицензия на оружие",
  param: "gun_lic",
  fractions: [2, 7, 3],
  rank: 6,
  give: true,
  cost: 15000
}, {
  name: "Медицинская страховка",
  param: "med_lic",
  fractions: [16],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории A",
  param: "a_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории B",
  param: "b_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории C",
  param: "c_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия воздушного ТС",
  param: "air_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия водного ТС",
  param: "ship_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на оружие",
  param: "gun_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на рыбалку",
  param: "fish_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на адвоката",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  remove: true
}, {
  name: "Лицензия на бизнес",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  remove: true
}];
exports.recLists = recLists;
const fractionList = [{
  id: 1,
  name: "Government",
  desc: "Правительство",
  icon: "GOV",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Практикант", "Ассистент", "Младший специалист", "Специалист", "Старший специалист", "Зам. начальника отдела", "Начальник отдела", "Департамент Мэра", "Прокурор", "Судья", "Ген.Прокурор", "Верховный судья", "Вице-Губернатор", "Губернатор"],
  moneybase: 0,
  moneymultipler: 1000
}, {
  id: 2,
  name: "LSPD",
  desc: "Отделение полиции",
  icon: "LSPD",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Cadet PA", "Police Officier I", "Police Officier II", "Police Officier III", "Police Officier III+1", "Sergeant I", "Sergeant II", "Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Commander", "Assistant Chief of Police", "Chief of Police"],
  moneybase: 0,
  moneymultipler: 1100
}, {
  id: 3,
  name: "FIB",
  desc: "Отделение FIB",
  icon: "fib",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Trainee", "Improver", "Junior Specialist", "Specialist", "Senior Specialist", "Junior Agent", "Agent", "Senior Agent", "Special Agent", "Senior Special Agent", "Lead Agent", "Inspector FIB", "Deputy Director of FIB", "Director of FIB"],
  moneybase: 0,
  moneymultipler: 1200
}, {
  id: 4,
  name: "Army",
  desc: "Армия",
  icon: "Army",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Рядовой-рекрут", "Рядовой 1 класса", "Младший капрал", "Капрал", "Сержант", "Первый Сержант", "Уорент-Офицер", "Второй Лейтенант", "Первый Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"],
  moneybase: 0,
  moneymultipler: 1050
}, {
  id: 7,
  name: "Sheriffs Department",
  desc: "Шериф Департамент",
  icon: "Sheriff",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Deputy Sheriff Trainee", "Deputy Sheriff I", "Corporal I", "Corporal II", "Sergeant I", "Sergeant II", "Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Major", "Assistant Sheriff", "Undersheriff", "Sheriff"],
  moneybase: 0,
  moneymultipler: 1100
}, {
  id: 8,
  name: "Russian Mafia",
  desc: "Русская Мафия",
  icon: "russia",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Шпана", "Боец", "Браток", "Блатной", "Доверенный", "Бродяга", "Дипломат", "Смотрящий", "Положенец", "Авторитет"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 9,
  name: "LCN",
  desc: "Итальянская Мафия",
  icon: "lcn",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Novizio", "Associate", "Combattente", "Soldato", "Regime", "Sotto Cappo", "Caporegime", "Giovane boss", "Consigliere", "Don"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 10,
  name: "Yakuza",
  desc: "Японская Мафия",
  icon: "japan",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Taiko", "Satei", "Kumi-in", "Fuku-Hombute", "Bengoshi", "Kanbu", "Kyodai", "Kaikei", "Shingiin", "Saiko-Komon", "Kumicho"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 11,
  name: "Ukrainian Mafia",
  desc: "Украинская мафия",
  icon: "ukraine",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Казак", "Приказный", "Урядник", "Вахмистр", "Подхорунжий", "Доверенный хлопец", "Хорунжий", "Есаул", "Атаман", "Гетман"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 16,
  name: "EMS",
  desc: "Отделение Больницы",
  icon: "EMS",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Практикант ", "Интерн", "Ординатор ", "Младший специалист", "Старший специалист ", "Главный специалист", "Фельдшер", "Ассистент врача", "Врач", "Зам.Глава отдела", "Глава отдела", "Глава Департамента", "Зам. Директора", "Директор"],
  moneybase: 0,
  moneymultipler: 1000
}, {
  id: 18,
  name: "Ballas",
  desc: "Ballas",
  icon: "Ballas",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Blade", "Buster", "Сracker", "gunBrogh", "upBrogh", "Gangster", "Federal block", "Foulkes", "Rich Nig", "Big Gangster"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#CD42FF"
}, {
  id: 19,
  name: "Families",
  desc: "Families",
  icon: "Families",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Beginner", "Youngsta", "Killa", "Wang G", "Shooter", "Big Brother", "High", "The King", "Deputy Boss", "Mad Dog"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#41AB5D"
}, {
  id: 20,
  name: "Marabunta Grande",
  desc: "Marabunta Grande",
  icon: "mara",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novato", "Experimentado", "Maton", "El asesino", "Viendo", "Trusted", "Cerrar", "Mano izquierda", "Mano derecha", "Capitulo"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#49A2E6"
}, {
  id: 21,
  name: "Vagos",
  desc: "Vagos",
  icon: "Vagos",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novato", "Guardian", "Verificado", "Local", "Bandito", "Medio", "Assessino", "Sabio", "Mano Derechа", "El Padre"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#FCCD4C"
}];
exports.fractionList = fractionList;
const fraction = {
  list: fractionList,
  getFraction: fractionid => {
    return fractionList.find(item => item.id == fractionid);
  },
  getFractionName: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.name;
  },
  getFractionColor: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return "#fc0317";
    return data.color || "#fc0317";
  },
  getFractionIcon: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.icon;
  },
  getFractionDesc: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.desc;
  },
  getFractionRanks: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return [];
    return data.ranks;
  },
  getLeaderRank: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length;
  },
  getSubLeaderRank: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length - 1;
  },
  isLeader: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length <= rank;
  },
  isSubLeader: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length - 1 <= rank;
  },
  isRankCorrect: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    if (!data.ranks[rank - 1]) return false;
    return true;
  },
  getRankName: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    if (!data.ranks[rank - 1]) return null;
    return data.ranks[rank - 1];
  },
  getPayDayMoney: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return 0;
    return data.moneybase + data.moneymultipler * rank;
  }
};
exports.fraction = fraction;
const fractionUtil = fraction;
exports.fractionUtil = fractionUtil;
},{}],"Aiz7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menu = exports.MenuClass = void 0;

var _user = require("../user");

var _methods = require("../modules/methods");

var _fractions = require("../../util/fractions");

class MenuClass {
  constructor(player, title, subtitle, items) {
    this.workAnyTime = false;
    this.tm = new Date().getTime();
    this.exitProtect = false;
    this.exitProtectList = [];
    menu.idgen++;
    this.closedMenu = false;
    this.id = menu.idgen;
    this.player = player;

    if (this.player.serverMenu) {
      this.player.serverMenu.close(true);
    }

    this.playerData = {
      id: player.id,
      dbid: _user.user.getId(player)
    };
    this.title = title;
    this.subtitle = subtitle;
    this.items = (items ? items : []).map(item => {
      if (!item.type) item.type = "select";
      return item;
    });
    this.customParams = {};
    menu.menumap.set(this.id, this);
  }

  newItem(...items) {
    if (!this.items) return;
    items.forEach(item => {
      if (!item.type) item.type = "select";
    });
    this.items.push(...items);
  }

  async open(selected = null) {
    if (!this.items) return;
    this.player.serverMenu = this;
    this.customParams.closeEvent = this.checkOncloseStatus() > 3;
    this.customParams.selected = selected ? selected : 0;
    this.items.forEach(item => {
      if (item.type == "list") {
        if (!item.listSelected) item.listSelected = 0;
        item.listSelectedName = item.list[item.listSelected];
      }
    });

    if (this.items.length > 300) {
      let itemsBlock = [[]];
      let indx = 0;
      this.items.forEach((item, index) => {
        if (index % 300 == 0) itemsBlock.push([]), indx++;
        itemsBlock[indx].push({
          name: item.name,
          desc: item.desc,
          more: item.more,
          type: item.type,
          rangeselect: item.rangeselect,
          list: item.list,
          listSelected: item.listSelected,
          icon: item.icon
        });
      });
      await mp.events.callClient(this.player, 'server:menu:openPartPrepare', this.id, this.title, this.subtitle, this.customParams, this.items.length, this.workAnyTime, this.sprite);
      itemsBlock.forEach(async (block, index) => {
        this.player.call('server:menu:openPartItems', [index, block]);
      });
      return;
    }

    this.player.call('server:menu:open', [this.id, this.title, this.subtitle, this.items.map(item => {
      return {
        name: item.name,
        desc: item.desc,
        type: item.type,
        more: item.more,
        rangeselect: item.rangeselect,
        list: item.list,
        listSelected: item.listSelected
      };
    }), this.customParams, this.workAnyTime, this.sprite]);
  }

  close(blockClose = false) {
    if (mp.players.exists(this.player) && _user.user.getId(this.player) == this.playerData.dbid && !blockClose) {
      if (this.player.serverMenu == this) this.player.call('server:menu:close');
      this.player.serverMenu = null;
    }

    this.closedMenu = true;
    this.items = null;
    this.title = null;
    this.subtitle = null;
    if (menu.menumap.has(this.id)) menu.menumap.delete(this.id);
  }

  checkOncloseStatus() {
    return typeof this.onclose == "function" ? this.onclose.toString().match(/\{([\s\S]*)\}/m)[1].replace(/^\s*\/\/.*$/mg, '').length : 0;
  }

  check(player) {
    if (player.id != this.playerData.id) return false;
    if (_user.user.getId(player) != this.playerData.dbid) return false;
    return true;
  }

}

exports.MenuClass = MenuClass;
setInterval(() => {
  menu.menumap.forEach(item => {
    if (!mp.players.exists(item.player)) item.close();else if (item.tm - new Date().getTime() > 480 * 1000) item.close();
  });
}, 120000);
const menu = {
  idgen: 1,
  menumap: new Map(),
  new: (player, title, subtitle, items) => {
    return new MenuClass(player, title.replace(/\n/gi, ' '), subtitle ? subtitle : 'Список', items);
  },
  close: player => {
    if (!mp.players.exists(player)) return;
    if (player.serverMenu) return player.serverMenu.close();
    player.serverMenu = null;
    player.call('server:menu:close');
  },
  get: id => {
    return menu.menumap.has(id) ? menu.menumap.get(id) : null;
  },
  dialog: (player, title, text, bntLeft = "Отмена", bntRight = "Отправить", value = '', type = "text") => {
    return new Promise(resolve => {
      const id = menu.idgen++;

      _user.user.setGui(player, 'dialog');

      mp.events.register(`server:dialog:submit_${id}_${_user.user.getId(player)}`, function (player, value) {
        this.destroy();
        resolve(value);
      });
      mp.events.triggerBrowser('cef:dialog:init', id, _user.user.getId(player), title, text, bntLeft, bntRight, value, type);
    });
  },
  input,
  selector,
  selectFraction: (player, type = "all") => {
    return new Promise((resolve, reject) => {
      let m = menu.new(player, "Выберите фракцию");

      m.onclose = () => {
        resolve(null);
      };

      m.newItem({
        name: "~r~Отмена",
        onpress: () => {
          resolve(null);
        }
      });

      if (_user.user.isAdminNow(player)) {
        m.newItem({
          name: "~r~Удалить фракцию",
          onpress: () => {
            resolve(0);
          }
        });
      }

      _fractions.fractionList.map(item => {
        if (type != "all") {
          if (item.gang && type != "gang") return;
          if (item.mafia && type != "mafia") return;
          if (item.gos && type != "gos") return;
        }

        m.newItem({
          name: item.name,
          desc: item.desc,
          onpress: () => {
            resolve(item.id);
          }
        });
      });

      m.open();
    });
  },
  selectNearestPlayers: (player, range = 5) => {
    return new Promise((resolve, reject) => {
      let m = menu.new(player, "Выберите игрока");

      m.onclose = () => {
        resolve(null);
      };

      m.newItem({
        name: "~r~Отмена",
        onpress: () => {
          m.close();
          resolve(null);
        }
      });

      let users = _user.user.getNearestPlayers(player, range);

      users.map(usr => {
        m.newItem({
          name: `ID: ${_user.user.getShowingIdString(player, usr)} ${_user.user.getDating(player, _user.user.getId(usr)) ? ` | ${_user.user.getDating(player, _user.user.getId(usr))}` : ""}`,
          onpress: () => {
            m.close();
            if (!mp.players.exists(usr)) return resolve(null);
            resolve(usr);
          }
        });
      });
      m.open();
    });
  }
};
exports.menu = menu;

function input(player, title, value = '', limit = 30, type = "text") {
  return new Promise(resolve => {
    if (value && typeof value == "string") value = value.replace(/`/g, '').replace(/'/g, '').replace(/"/g, '');
    mp.events.callClient(player, 'server:input', title, value, limit).then(res => {
      res = String(res);
      if (res) res.replace(/\n/g, '');

      if (type == "int" || type == "float") {
        return resolve(_methods.methods.parseInt(res));
      }

      resolve(res);
    });
  });
}

function selector(player, name, list, returnid = false) {
  return new Promise(resolve => {
    let m = menu.new(player, name);

    m.onclose = () => {
      resolve(null);
    };

    list.map((item, index) => {
      m.newItem({
        name: item,
        onpress: () => {
          resolve(returnid ? index : item);
        }
      });
    });
    m.open();
  });
}

mp.events.add("client:menu:listChange", (player, menuid, itemid, value) => {
  let menuItem = menu.get(menuid);
  if (!menuItem) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) вызывает меню, которого нет`);
  if (!menuItem.check(player)) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) подозрительные меню вызывает, которые ему не принадлежат`);
  let item = menuItem.items[itemid];
  if (!item) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) вызвал пункт меню, которого нет в меню`);
  if (item.type == "list" && !item.list[value]) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) пролистал до того момента, которого не существует`);
  item.listSelected = value;
  if (item.type == "list") item.listSelectedName = item.list[value];
  if (typeof item.onchange == "function") item.onchange(item.listSelected, item, itemid);
});
mp.events.add("client:menu:itemSelect", (player, menuid, itemid) => {
  let menuItem = menu.get(menuid);
  if (!menuItem) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) вызывает меню, которого нет`);
  if (!menuItem.check(player)) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) подозрительные меню вызывает, которые ему не принадлежат`);
  let item = menuItem.items[itemid];
  if (!item) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) вызвал пункт меню, которого нет в меню`);
  if (typeof item.onpress == "function") item.onpress(item, itemid);
});
mp.events.add("client:menu:closeEvent", (player, menuid) => {
  let menuItem = menu.get(menuid);
  if (!menuItem) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) вызывает меню, которого нет`);
  if (!menuItem.check(player)) return _methods.methods.debug(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) подозрительные меню вызывает, которые ему не принадлежат`);
  if (!menuItem.customParams.closeEvent) return;
  menuItem.onclose();
});
mp.events.add('playerExitColshape', (player, shape) => {
  if (player.serverMenu) {
    let m = player.serverMenu;
    if (m.exitProtect) return;
    if (m.exitProtectList.indexOf(shape)) return;
  }

  menu.close(player);
});
},{"../user":"QE3B","../modules/methods":"qXSp","../../util/fractions":"Zeqt"}],"w9k0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.daynightEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let daynightEntity = class daynightEntity extends _sequelizeTypescript.Model {};
exports.daynightEntity = daynightEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], daynightEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 2018
}), __metadata("design:type", Number)], daynightEntity.prototype, "year", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1
}), __metadata("design:type", Number)], daynightEntity.prototype, "month", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1
}), __metadata("design:type", Number)], daynightEntity.prototype, "day", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 12
}), __metadata("design:type", Number)], daynightEntity.prototype, "hour", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], daynightEntity.prototype, "minute", void 0);

exports.daynightEntity = daynightEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_daynight"
})], daynightEntity);
},{}],"uehX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weather = void 0;

var _user = require("../user");

var _methods = require("../modules/methods");

var _daynightEntity = require("../modules/entity/daynightEntity");

let _year = 2012;
let _month = 1;
let _day = 1;
let _hour = 12;
let _minute = 0;
let _tempNew = 17;
let _weatherType = 0;
let _weather = 'CLEAR';
let isVip = 0;
let isUsmc = false;
let weather = {
  loadAll: function () {
    _methods.methods.debug('weather.loadAll');

    _daynightEntity.daynightEntity.findOne({
      where: {
        id: 1
      }
    }).then(item => {
      let d = new Date();
      _year = d.getFullYear();
      _month = d.getMonth() + 1;
      _day = d.getDate();
      _hour = item['hour'] || d.getHours();
      _minute = item['minute'] || d.getMinutes();
      weather.load();
    });
  },
  load: function () {
    _methods.methods.debug('weather.load');

    _tempNew = _methods.methods.getRandomInt(20, 30);
    _weatherType = 2;
    mp.players.forEach(function (player) {
      if (_user.user.isLogin(player)) {
        if (_user.user.get(player, 'reg_time') > 0) _user.user.set(player, 'reg_time', _user.user.get(player, 'reg_time') - 1);
      }
    });
    weather.randomTimer();
    weather.weatherTimer();
    weather.timeSyncTimer();
    weather.saveTimer();
  },
  saveTimer: function () {
    _methods.methods.debug('weather.saveTimer');

    _daynightEntity.daynightEntity.update({
      year: _year,
      month: _month,
      day: _day,
      hour: _hour,
      minute: _minute
    }, {
      where: {
        id: 1
      }
    });

    setTimeout(weather.saveTimer, 5 * 60 * 1000);
  },
  randomTimer: function () {
    _methods.methods.debug('weather.randomTimer');

    weather.nextRandomWeather();
    setTimeout(weather.randomTimer, 1000 * 60 * 10 + _methods.methods.getRandomInt(5, 35));
  },
  weatherTimer: function () {
    _methods.methods.debug('weather.weatherTimer');

    switch (_weatherType) {
      case 0:
        if (_hour > 1 && _hour <= 6) _tempNew = _tempNew - (_methods.methods.getRandomFloat() + 2);else if (_hour > 6 && _hour <= 12) _tempNew = _tempNew + _methods.methods.getRandomFloat();else if (_hour > 12 && _hour <= 16) _tempNew = _tempNew + (_methods.methods.getRandomFloat() + 1);else if (_hour > 16 && _hour <= 20) _tempNew = _tempNew + _methods.methods.getRandomFloat();else if (_hour > 20 && _hour <= 23) _tempNew = _tempNew + _methods.methods.getRandomFloat();else _tempNew = _tempNew - _methods.methods.getRandomFloat() - 0.3;
        break;

      case 1:
      case 2:
      case 3:
        if (_hour > 1 && _hour <= 6) _tempNew = _tempNew - (_methods.methods.getRandomFloat() + 1.2);else if (_hour > 6 && _hour <= 12) _tempNew = _tempNew + _methods.methods.getRandomFloat();else if (_hour > 12 && _hour <= 16) _tempNew = _tempNew + (_methods.methods.getRandomFloat() + 1);else if (_hour > 16 && _hour <= 20) _tempNew = _tempNew + _methods.methods.getRandomFloat();else if (_hour > 20 && _hour <= 23) _tempNew = _tempNew + _methods.methods.getRandomFloat();else _tempNew = _tempNew - _methods.methods.getRandomFloat() - 0.1;
        break;
    }

    setTimeout(weather.weatherTimer, 30 * 60 * 1000);
  },
  timeSyncTimer: function () {
    _methods.methods.debug('weather.timeSyncTimer');

    try {
      _minute++;

      if (_minute > 59) {
        _minute = 0;
        _hour++;
        let d = new Date();
        _year = d.getFullYear();
        _month = d.getMonth() + 1;
        _day = d.getDate();

        if (_hour > 23) {
          _hour = 0;
        }
      }

      mp.players.forEach(player => {
        if (!_user.user.isLogin(player)) return;
        if (_user.user.get(player, 'reg_time') > 5) _user.user.set(player, 'reg_time', _user.user.get(player, 'reg_time') - 4);else if (_user.user.get(player, 'reg_time') > 0) _user.user.set(player, 'reg_time', _user.user.get(player, 'reg_time') - 1);
      });
    } catch (e) {
      _methods.methods.debug(e);
    }

    setTimeout(weather.timeSyncTimer, 8500);
  },
  syncData: player => {
    let dateTime = new Date();
    (player ? player : mp.players).call('weatherdata:set', [_minute, _hour, _day, _month, _year, dateTime.getHours(), Math.round(_tempNew), `${_methods.methods.digitFormat(dateTime.getDate())}.${_methods.methods.digitFormat(dateTime.getMonth() + 1)} ${_methods.methods.digitFormat(dateTime.getHours())}:${_methods.methods.digitFormat(dateTime.getMinutes())}`, _weather, player ? true : false]);
  },
  setWeather: function (weatherName) {
    _methods.methods.debug('weather.setWeather');

    _methods.methods.debug('CURRENT WEATHER: ' + weatherName);

    if ((weatherName == 'RAIN' || weatherName == 'THUNDER' || weatherName == 'CLEARING') && _methods.methods.getRandomInt(0, 3) != 3) {
      weather.nextRandomWeather();
    } else {
      _weather = weatherName;
      weather.syncData();
    }

    ;
  },
  getRpDateTime: function () {
    _methods.methods.debug('weather.getRpDateTime');

    return `${_methods.methods.digitFormat(_hour)}:${_methods.methods.digitFormat(_minute)}, ${_methods.methods.digitFormat(_day)}/${_methods.methods.digitFormat(_month)}/${_year}`;
  },
  getWeatherTemp: () => {
    return _tempNew;
  },
  getWeather: function () {
    _methods.methods.debug('weather.getWeather');

    return _weather;
  },
  getWeatherType: function () {
    _methods.methods.debug('weather.getWeatherType');

    return _weatherType;
  },
  getHour: function () {
    return _hour;
  },
  setHour: function (t) {
    _hour = t;
  },
  getMin: function () {
    return _minute;
  },
  setMin: function (t) {
    _minute = t;
  },
  getDay: function () {
    _methods.methods.debug('weather.getDay');

    return _day;
  },
  getMonth: function () {
    _methods.methods.debug('weather.getMonth');

    return _month;
  },
  nextRandomWeather: function () {
    _methods.methods.debug('weather.nextRandomWeather');

    weather.nextRandomWeatherByType(weather.getWeatherType());
  },
  getWeatherName: function (type) {
    switch (type) {
      case 'EXTRASUNNY':
      case 'CLEAR':
        return 'Солнечно';

      case 'CLOUDS':
        return 'Облачно';

      case 'SMOG':
        return 'Смог';

      case 'FOGGY':
        return 'Туман';

      case 'OVERCAST':
        return 'Пасмурно';

      case 'RAIN':
        return 'Дождь';

      case 'THUNDER':
        return 'Гроза';

      case 'CLEARING':
        return 'Лёгкий дождь';

      case 'SNOW':
        return 'Снег';
    }

    return 'Солнечно';
  },
  getFullRpTime: function () {
    return `${_methods.methods.digitFormat(_hour)}:${_methods.methods.digitFormat(_minute)}`;
  },
  nextRandomWeatherByType: function (weatherType) {
    _methods.methods.debug('weather.nextRandomWeatherByType');

    let weatherList = ['EXTRASUNNY', 'CLEAR', 'CLOUDS', 'SMOG', 'FOGGY', 'OVERCAST', 'RAIN', 'THUNDER', 'CLEARING', 'SNOW'];

    switch (weatherType) {
      case 0:
        weatherList = ['EXTRASUNNY', 'CLOUDS', 'CLOUDS', 'SMOG', 'SMOG', 'FOGGY', 'FOGGY', 'OVERCAST', 'OVERCAST'];
        if (weatherType == 0) if (_tempNew < 1) weatherList = ['SNOW'];
        break;

      case 1:
        weatherList = ['EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'CLEAR', 'CLEAR', 'CLEAR', 'CLEAR', 'CLEAR', 'CLOUDS', 'CLOUDS', 'CLOUDS', 'CLOUDS', 'CLOUDS', 'SMOG', 'SMOG', 'SMOG', 'FOGGY', 'FOGGY', 'FOGGY', 'OVERCAST', 'OVERCAST', 'OVERCAST', 'CLEARING'];
        break;

      case 3:
        weatherList = ['CLEAR', 'CLEAR', 'CLEAR', 'CLEAR', 'CLOUDS', 'CLOUDS', 'CLOUDS', 'CLOUDS', 'SMOG', 'SMOG', 'SMOG', 'FOGGY', 'FOGGY', 'FOGGY', 'OVERCAST', 'OVERCAST', 'OVERCAST', 'RAIN', 'THUNDER', 'CLEARING'];
        break;

      case 2:
        weatherList = ['EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'EXTRASUNNY', 'CLEAR', 'CLEAR', 'CLEAR', 'CLEAR', 'CLEAR', 'CLOUDS', 'CLOUDS', 'SMOG', 'FOGGY', 'FOGGY', 'FOGGY', 'OVERCAST', 'CLEARING'];
        break;
    }

    if (_hour > 4 && _hour < 7) {
      switch (weather.getWeather()) {
        case 'EXTRASUNNY':
        case 'CLEAR':
        case 'CLOUDS':
          weather.setWeather('FOGGY');
          break;
      }
    } else if (_hour > 20) {
      switch (weather.getWeather()) {
        case 'EXTRASUNNY':
        case 'CLEAR':
        case 'CLOUDS':
          weather.setWeather('SMOG');
          break;
      }
    } else {
      weather.setWeather(weatherList[_methods.methods.getRandomInt(0, weatherList.length)]);
    }

    _methods.methods.notifyWithPictureToAll(`Life Invader [${weather.getFullRpTime()}]`, '~y~Новости погоды', `${weather.getWeatherName(weather.getWeather())}\nТемпература воздуха: ~y~${Math.round(_tempNew)}°C`, 'CHAR_LIFEINVADER', 1);
  }
};
exports.weather = weather;
setInterval(() => {
  weather.syncData();
}, 3000);
},{"../user":"QE3B","../modules/methods":"qXSp","../modules/entity/daynightEntity":"w9k0"}],"uUTa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.businessEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let businessEntity = class businessEntity extends _sequelizeTypescript.Model {};
exports.businessEntity = businessEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], businessEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  allowNull: false
}), __metadata("design:type", String)], businessEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  allowNull: false,
  defaultValue: "Unknown"
}), __metadata("design:type", String)], businessEntity.prototype, "name2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  allowNull: false
}), __metadata("design:type", String)], businessEntity.prototype, "user_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "user_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "bank", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1
}), __metadata("design:type", Number)], businessEntity.prototype, "price_product", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 10
}), __metadata("design:type", Number)], businessEntity.prototype, "price_card1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 10
}), __metadata("design:type", Number)], businessEntity.prototype, "price_card2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], businessEntity.prototype, "tarif", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 2
}), __metadata("design:type", Number)], businessEntity.prototype, "interior", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)",
  defaultValue: "/images/logoBig.png"
}), __metadata("design:type", String)], businessEntity.prototype, "rp_logo", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)",
  defaultValue: "https://i.imgur.com/PhhDQT9.jpg"
}), __metadata("design:type", String)], businessEntity.prototype, "rp_main_img", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: "grey"
}), __metadata("design:type", String)], businessEntity.prototype, "rp_color", void 0);

exports.businessEntity = businessEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_business"
})], businessEntity);
},{}],"MpJF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.levelAccess = void 0;
const levelAccess = {
  truckerjob: 5,
  buyBusiness: 6,
  startQuest: 6,
  gr6: 6,
  c4grab: 4,
  weapongrab: 3,
  diceWork: 6,
  inviteFraction2: 2,
  freeTaxi: 1,
  startPromocode: 4,
  fleecaGrab: 4,
  pacificGrab: 4,
  x2lvlNewPlayers: 4,
  healSkidka: 1,
  taxiLic: 2,
  companyWork: 4,
  swater: 99999,
  oldmoney: 25
};
exports.levelAccess = levelAccess;
},{}],"qqav":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.autosalonPercentEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let autosalonPercentEntity = class autosalonPercentEntity extends _sequelizeTypescript.Model {};
exports.autosalonPercentEntity = autosalonPercentEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], autosalonPercentEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(10)",
  allowNull: false
}), __metadata("design:type", Number)], autosalonPercentEntity.prototype, "business_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(255)",
  allowNull: false
}), __metadata("design:type", String)], autosalonPercentEntity.prototype, "business_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(3)",
  allowNull: false
}), __metadata("design:type", Number)], autosalonPercentEntity.prototype, "percent", void 0);

exports.autosalonPercentEntity = autosalonPercentEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_autosalon_percent"
})], autosalonPercentEntity);
},{}],"K48O":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.colors = void 0;
const colors = [[0, '#0d1116'], [1, '#1c1d21'], [2, '#32383d'], [3, '#454b4f'], [4, '#999da0'], [5, '#c2c4c6'], [6, '#979a97'], [7, '#637380'], [8, '#63625c'], [9, '#3c3f47'], [10, '#444e54'], [11, '#1d2129'], [12, '#13181f'], [13, '#26282a'], [14, '#515554'], [15, '#151921'], [16, '#1e2429'], [17, '#333a3c'], [18, '#8c9095'], [19, '#39434d'], [20, '#506272'], [21, '#1e232f'], [22, '#363a3f'], [23, '#a0a199'], [24, '#d3d3d3'], [25, '#b7bfca'], [26, '#778794'], [27, '#c00e1a'], [28, '#da1918'], [29, '#b6111b'], [30, '#a51e23'], [31, '#7b1a22'], [32, '#8e1b1f'], [33, '#6f1818'], [34, '#49111d'], [35, '#b60f25'], [36, '#d44a17'], [37, '#c2944f'], [38, '#f78616'], [39, '#cf1f21'], [40, '#732021'], [41, '#f27d20'], [42, '#ffc91f'], [43, '#9c1016'], [44, '#de0f18'], [45, '#8f1e17'], [46, '#a94744'], [47, '#b16c51'], [48, '#371c25'], [49, '#132428'], [50, '#122e2b'], [51, '#12383c'], [52, '#31423f'], [53, '#155c2d'], [54, '#1b6770'], [55, '#66b81f'], [56, '#22383e'], [57, '#1d5a3f'], [58, '#2d423f'], [59, '#45594b'], [60, '#65867f'], [61, '#222e46'], [62, '#233155'], [63, '#304c7e'], [64, '#47578f'], [65, '#637ba7'], [66, '#394762'], [67, '#d6e7f1'], [68, '#76afbe'], [69, '#345e72'], [70, '#0b9cf1'], [71, '#2f2d52'], [72, '#282c4d'], [73, '#2354a1'], [74, '#6ea3c6'], [75, '#112552'], [76, '#1b203e'], [77, '#275190'], [78, '#608592'], [79, '#2446a8'], [80, '#4271e1'], [81, '#3b39e0'], [82, '#1f2852'], [83, '#253aa7'], [84, '#1c3551'], [85, '#4c5f81'], [86, '#58688e'], [87, '#74b5d8'], [88, '#ffcf20'], [89, '#fbe212'], [90, '#916532'], [91, '#e0e13d'], [92, '#98d223'], [93, '#9b8c78'], [94, '#503218'], [95, '#473f2b'], [96, '#221b19'], [97, '#653f23'], [98, '#775c3e'], [99, '#ac9975'], [100, '#6c6b4b'], [101, '#402e2b'], [102, '#a4965f'], [103, '#46231a'], [104, '#752b19'], [105, '#bfae7b'], [106, '#dfd5b2'], [107, '#f7edd5'], [108, '#3a2a1b'], [109, '#785f33'], [110, '#b5a079'], [111, '#fffff6'], [112, '#eaeaea'], [113, '#b0ab94'], [114, '#453831'], [115, '#2a282b'], [116, '#726c57'], [117, '#6a747c'], [118, '#354158'], [119, '#9ba0a8'], [120, '#5870a1'], [121, '#eae6de'], [122, '#dfddd0'], [123, '#f2ad2e'], [124, '#f9a458'], [125, '#83c566'], [126, '#f1cc40'], [127, '#4cc3da'], [128, '#4e6443'], [129, '#bcac8f'], [130, '#f8b658'], [131, '#fcf9f1'], [132, '#fffffb'], [133, '#81844c'], [134, '#ffffff'], [135, '#f21f99'], [136, '#fdd6cd'], [137, '#df5891'], [138, '#f6ae20'], [139, '#b0ee6e'], [140, '#08e9fa'], [141, '#0a0c17'], [142, '#0c0d18'], [143, '#0e0d14'], [144, '#9f9e8a'], [145, '#621276'], [146, '#0b1421'], [147, '#11141a'], [148, '#6b1f7b'], [149, '#1e1d22'], [150, '#bc1917'], [151, '#2d362a'], [152, '#696748'], [153, '#7a6c55'], [154, '#c3b492'], [155, '#5a6352'], [156, '#81827f'], [157, '#afd6e4'], [158, '#7a6440'], [159, '#7f6a48']];
exports.colors = colors;
},{}],"KFxM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rentPos = void 0;
const rentPos = [[[-46.674774169921875, -1690.755126953125, 28.984130859375, 0.5766682028770447, -0.7298787236213684, 25.49114990234375], [-58.720947265625, -1686.9249267578125, 29.058500289916992, 0.04166960343718529, -0.09041257947683334, 227.90615844726562], [-52.085472106933594, -1678.4627685546875, 28.957489013671875, 1.5256866216659546, -0.6620182394981384, 229.9482421875]], [[-56.31481170654297, -1116.588134765625, 26.34749984741211, -0.0698409155011177, -0.0001861312339315191, 2.9102783203125], [-50.67570114135742, -1116.112548828125, 26.348133087158203, -0.17252682149410248, -0.008138769306242466, 2.642486572265625], [-42.01530456542969, -1115.86474609375, 26.34360122680664, -0.2842620015144348, 0.19225648045539856, 0.92779541015625]], [[-92.42096710205078, 94.24425506591797, 72.1611099243164, -5.4299187660217285, 2.3183987140655518, 155.2017822265625], [-98.66178894042969, 97.5389404296875, 72.23968505859375, -6.113358020782471, 2.131098985671997, 155.04052734375], [-100.73169708251953, 86.3706283569336, 71.4526138305664, -2.9559884071350098, 2.0054268836975098, 330.8594665527344]], [[256.160888671875, -1149.7781982421875, 28.95433807373047, -0.03555705025792122, -5.277644634246826, 178.9549560546875], [249.98391723632812, -1149.3138427734375, 28.94413948059082, 0.028893714770674706, -6.502506256103516, 182.57186889648438], [253.14523315429688, -1161.894287109375, 28.811153411865234, -0.012001805938780308, 7.8821330070495605, 0.338043212890625]], [[-761.25927734375, -1373.748291015625, 0.3005576729774475, 1.178861379623413, 1.5025361776351929, 231.87576293945312], [-770.3552856445312, -1386.250732421875, 0.2968926429748535, 1.2399272918701172, 1.4403713941574097, 229.92257690429688], [-776.5682983398438, -1393.33447265625, 0.3014731705188751, 1.1893446445465088, 1.4818885326385498, 231.0365447998047]], [[-1087.4564208984375, -2918.85888671875, 14.040032386779785, 0.14461705088615417, -0.026386765763163567, 180.76177978515625], [-1028.4410400390625, -2974.841064453125, 14.033547401428223, -0.08975722640752792, -0.43647751212120056, 75.85626220703125]], [[781.963134765625, -2954.661865234375, 5.792639255523682, -0.509746789932251, 0.7297611236572266, 14.617156982421875], [782.21484375, -2978.26904296875, 5.779226779937744, 0.003129991004243493, 0.1768639087677002, 10.191009521484375], [769.4885864257812, -2960.975830078125, 5.776701927185059, -0.023886200040578842, 0.0344768650829792, 3.3759765625]]];
exports.rentPos = rentPos;
},{}],"kvtc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.housesEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let housesEntity = class housesEntity extends _sequelizeTypescript.Model {};
exports.housesEntity = housesEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], housesEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(512),
  allowNull: false
}), __metadata("design:type", String)], housesEntity.prototype, "address", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(256),
  allowNull: false
}), __metadata("design:type", String)], housesEntity.prototype, "name_user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "id_user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.TINYINT({
    length: 1
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "is_buy", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "int_x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "int_y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "int_z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "pin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 3
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "chest", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], housesEntity.prototype, "empty_col", void 0);

exports.housesEntity = housesEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_houses"
})], housesEntity);
},{}],"jh2U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vipStatus = exports.BASE_AFK_TIME = void 0;
const BASE_AFK_TIME = 10;
exports.BASE_AFK_TIME = BASE_AFK_TIME;
const vipStatus = {
  data: [{
    id: "Diamond",
    name: "VIP Diamond",
    cost: 1250,
    moneybonus: 2500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: true,
    changeslots: true,
    sitepay: true,
    givecoin: 1,
    expbonus: 2,
    healmultipler: true,
    afkminutes: 45
  }, {
    id: "Gold",
    name: "VIP Gold",
    cost: 750,
    moneybonus: 1500,
    changeslots: true,
    sitepay: true,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 1,
    healmultipler: true,
    afkminutes: 35
  }, {
    id: "Silver",
    name: "VIP Silver",
    cost: 500,
    moneybonus: 1000,
    changeslots: true,
    skillpersbonus: 20,
    skilljobbonus: 20,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: 25
  }, {
    id: "Bronze",
    name: "VIP Bronze",
    cost: 250,
    moneybonus: 500,
    skillpersbonus: 20,
    skilljobbonus: 0,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: 15
  }, {
    id: "MediaLight",
    media: true,
    name: "Media VIP Light",
    cost: 0,
    moneybonus: 750,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "MediaHard",
    media: true,
    name: "Media VIP Hard",
    cost: 0,
    moneybonus: 1500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "Start",
    name: "VIP Start",
    cost: 0,
    moneybonus: 250,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 1,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "Bonus",
    name: "VIP Bonus",
    cost: 0,
    moneybonus: 2500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 2,
    healmultipler: true,
    afkminutes: 45
  }, {
    id: "Turbo",
    name: "VIP Turbo",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Start", 10]
  }, {
    id: "Light",
    name: "VIP Light",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Silver", 60]
  }, {
    id: "Hard",
    name: "VIP Hard",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Gold", 90]
  }, {
    id: "YouTube",
    name: "VIP YouTube",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["MediaLight", 999]
  }],
  getVipStatusData: id => {
    return vipStatus.data.find(item => item.id == id);
  }
};
exports.vipStatus = vipStatus;
},{}],"xF3w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _vip = require("../../../util/vip");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let userEntity = class userEntity extends _sequelizeTypescript.Model {};
exports.userEntity = userEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], userEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)"
}), __metadata("design:type", String)], userEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "BIGINT(20)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "name2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)"
}), __metadata("design:type", String)], userEntity.prototype, "rp_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)"
}), __metadata("design:type", String)], userEntity.prototype, "lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)"
}), __metadata("design:type", String)], userEntity.prototype, "password", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "reg_status", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "reg_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 18
}), __metadata("design:type", Number)], userEntity.prototype, "age", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "exp_age", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "money", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "money_bank", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "money_payday", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 300
}), __metadata("design:type", Number)], userEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "bank_prefix", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "bank_number", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "posob", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "id_house", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "apartment_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "condo_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "business_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "stock_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id3", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id4", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id5", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id6", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id7", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "car_id8", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "fraction_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "rank", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "fraction_id2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "rank2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: null
}), __metadata("design:type", String)], userEntity.prototype, "tag", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(16)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "job", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "is_gos_blacklist", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(300)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "gos_blacklist_reason", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "admin_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "helper_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TEXT",
  defaultValue: null,

  get() {
    const data = this.getDataValue("skin");
    if (!data) return null;
    return JSON.parse(this.getDataValue("skin"));
  },

  set(value) {
    this.setDataValue("skin", value ? JSON.stringify(value) : null);
  }

}), __metadata("design:type", Object)], userEntity.prototype, "skin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_head_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_head_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_torso_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_torso_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_left_arm_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_left_arm_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_right_arm_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_right_arm_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_left_leg_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_left_leg_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_right_leg_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tattoo_right_leg_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tprint_c", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "tprint_o", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "date_reg", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "last_login", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "date_ban", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "date_mute", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "warn", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "wanted_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "wanted_reason", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "phone_code", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "phone", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "is_buy_walkietalkie", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0,

  get() {
    return this.getDataValue('is_old_money') == 1;
  },

  set(value) {
    this.setDataValue('is_old_money', value ? 1 : 0);
  }

}), __metadata("design:type", Boolean)], userEntity.prototype, "is_old_money", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "item_clock", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(7)",
  defaultValue: '0'
}), __metadata("design:type", String)], userEntity.prototype, "walkietalkie_num", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0,

  get() {
    return !!this.getDataValue("jailed");
  },

  set(value) {
    this.setDataValue("jailed", value ? 1 : 0);
  }

}), __metadata("design:type", Boolean)], userEntity.prototype, "jailed", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "jail_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "med_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mask", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mask_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "head", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "head_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "body", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "body_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "torso", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "torso_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "leg", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "leg_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "hand", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "hand_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "parachute", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "parachute_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "foot", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "foot_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "accessorie", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "accessorie_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "armor", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "armor_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "decal", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "decal_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "hat", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "hat_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "glasses", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "glasses_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "ear", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "ear_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "watch", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "watch_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "bracelet", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], userEntity.prototype, "bracelet_color", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "allow_marg", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "allow_antipohmel", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 100
}), __metadata("design:type", Number)], userEntity.prototype, "health", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 100
}), __metadata("design:type", Number)], userEntity.prototype, "water_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1000
}), __metadata("design:type", Number)], userEntity.prototype, "eat_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 100
}), __metadata("design:type", Number)], userEntity.prototype, "health_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 36.6
}), __metadata("design:type", Number)], userEntity.prototype, "temp_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "sick_cold", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "sick_poisoning", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 24
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_stamina", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_strength", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_lung_capacity", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_wheelie_ability", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_flying_ability", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_shooting_ability", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_stealth_ability", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "mp0_watchdogs", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "a_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "b_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "c_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "air_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "ship_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "gun_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "taxi_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "law_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "med_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "biz_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "animal_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "fish_lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(32)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "animal", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "animal_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "story_1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 3
}), __metadata("design:type", Number)], userEntity.prototype, "story_timeout_1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_builder", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_scrap", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_shop", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_taxi", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_mail", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_mail2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_photo", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_sunb", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_bgstar", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_bshot", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_three", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_water", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_bus1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_bus2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_bus3", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_gr6", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "skill_trucker", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(20)",
  defaultValue: ""
}), __metadata("design:type", typeof (_a = typeof _vip.vipName !== "undefined" && _vip.vipName) === "function" ? _a : Object)], userEntity.prototype, "vip_status", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "BIGINT(20)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "vip_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "count_hask", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "count_aask", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "token", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "token_rp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "ip_reg", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "ip_last", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "money_donate", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "is_online", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "s_is_pay_type_bank", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 1
}), __metadata("design:type", Number)], userEntity.prototype, "s_is_load_blip_house", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "s_is_characher", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "s_is_spawn_aprt", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(4)",
  defaultValue: "RU"
}), __metadata("design:type", String)], userEntity.prototype, "s_lang", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(32)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "s_clipset", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "s_is_usehackerphone", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1
}), __metadata("design:type", Number)], userEntity.prototype, "s_radio_balance", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0.4
}), __metadata("design:type", Number)], userEntity.prototype, "s_radio_vol", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0.4
}), __metadata("design:type", Number)], userEntity.prototype, "s_voice_vol", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 1
}), __metadata("design:type", Number)], userEntity.prototype, "s_voice_balance", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(6)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "sell_car_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "sell_car", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(4048)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "mailhouses", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(3)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "house_grab", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "email", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "referer", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(100)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "promocode", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "parthner_procent", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "parthner_promocode", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], userEntity.prototype, "parthner_payment", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(4)",
  defaultValue: "null"
}), __metadata("design:type", String)], userEntity.prototype, "empty_col", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "SMALLINT(6)",
  defaultValue: 70
}), __metadata("design:type", Number)], userEntity.prototype, "rp_weight", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "SMALLINT(6)",
  defaultValue: 180
}), __metadata("design:type", Number)], userEntity.prototype, "rp_growth", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: "Американец"
}), __metadata("design:type", String)], userEntity.prototype, "rp_nationality", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  defaultValue: null,
  allowNull: true
}), __metadata("design:type", String)], userEntity.prototype, "rp_qualities", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  defaultValue: null,
  allowNull: true
}), __metadata("design:type", String)], userEntity.prototype, "rp_distinctive_features", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  defaultValue: null,
  allowNull: true
}), __metadata("design:type", String)], userEntity.prototype, "rp_diseases", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  defaultValue: null,
  allowNull: true
}), __metadata("design:type", String)], userEntity.prototype, "rp_character", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TEXT",
  defaultValue: null,
  allowNull: true
}), __metadata("design:type", String)], userEntity.prototype, "rp_biography", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)",
  defaultValue: "https://i.imgur.com/MUxgy8v.png"
}), __metadata("design:type", String)], userEntity.prototype, "rp_avatar", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 1
}), __metadata("design:type", Number)], userEntity.prototype, "rp_is_public", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(2)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "jailed_admin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('quests'));
  },

  set(value) {
    this.setDataValue('quests', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], userEntity.prototype, "quests", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "chipsBalance", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('holidayPickups'));
  },

  set(value) {
    this.setDataValue('holidayPickups', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], userEntity.prototype, "holidayPickups", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('shootingPickups'));
  },

  set(value) {
    this.setDataValue('shootingPickups', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], userEntity.prototype, "shootingPickups", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "BIGINT(20)"
}), __metadata("design:type", Number)], userEntity.prototype, "rgscid", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1
}), __metadata("design:type", Number)], userEntity.prototype, "level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "level_exp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "tablet_equip", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], userEntity.prototype, "played_time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(3000)",
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('tattoos_list'));
  },

  set(value) {
    this.setDataValue('tattoos_list', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], userEntity.prototype, "tattoos_list", void 0);

exports.userEntity = userEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_users"
})], userEntity);
},{"../../../util/vip":"jh2U"}],"buna":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.houses = void 0;

var _methods = require("./modules/methods");

var _user = require("./user");

var _coffer = require("./coffer");

var _housesEntity = require("./modules/entity/housesEntity");

var _user2 = require("./modules/entity/user");

let hBlips = new Map();
let count = 0;
setTimeout(() => {
  mp.events.register('house:getData', (player, id) => {
    let data = houses.getHouseData(id);
    if (!data) return null;
    return {
      price: data.price,
      money_tax: data.money_tax,
      score_tax: data.score_tax,
      address: data.address,
      id: data.id
    };
  });
}, 1000);
let houses = {
  data: new Map(),
  loadAll: function () {
    _methods.methods.debug('houses.loadAll');

    _housesEntity.housesEntity.findAll().then(rows => {
      rows.forEach(function (item) {
        let pos = new mp.Vector3(item['x'], item['y'], item['z']);
        houses.data.set(item.id, item);

        _methods.methods.createStaticCheckpoint(pos.x, pos.y, pos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

        let hBlip = _methods.methods.createBlip(pos, item.id == 1139 || item.id == 1141 ? 455 : 40, item['is_buy'] ? 59 : 69, item.id == 1139 || item.id == 1141 ? 0.8 : 0.4, "Дом", item['is_buy'] ? 1 : 0);

        hBlips.set(item.id, hBlip);
      });
      count = rows.length;

      _methods.methods.debug('All Houses Loaded: ' + count);
    });
  },
  exists: id => {
    return houses.data.has(id);
  },
  getHouseData: function (id) {
    return houses.data.get(id);
  },
  get: function (id, key) {
    let data = houses.getHouseData(id);
    if (!data) return;
    return data.get(key);
  },
  getCountLiveUser: function (id, cb) {
    id = _methods.methods.parseInt(id);

    _user2.userEntity.count({
      where: {
        id_house: id
      }
    }).then(c => {
      cb(c);
    });
  },
  getRandomHousePositionOfLosSantos: function (player, triggerCallBack = 'client:getRandomHousePositionOfLosSantos') {
    _methods.methods.debug('houses.getRandomHousePositionOfLosSantos');

    if (!_user.user.isLogin(player)) return;
    let addressList = ["Чумаш", "Каньон Бэнхэм", "Ричман", "Рокфорд-Хиллз", "Вайнвуд Хиллз", "Западный Вайнвуд", "Центральный Вайнвуд", "Альта", "Буртон", "Дель Пьеро", "Пуэрто Дель Сол", "Каналы Веспучи", "Миррор-Парк", "Южный Лос-Сантос"];
    let result = [];

    for (let i = 0; i <= count; i++) {
      try {
        if (houses.exists(i)) {
          if (addressList.includes(houses.get(i, 'address'))) result.push(new mp.Vector3(parseFloat(houses.get(i, 'x')), parseFloat(houses.get(i, 'y')), parseFloat(houses.get(i, 'z'))));
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    }

    try {
      let pos = result[_methods.methods.getRandomInt(0, result.length)];

      player.call(triggerCallBack, [pos.x, pos.y, pos.z]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  getAllHouses: function () {
    return hBlips;
  },
  getOwnerId: id => {
    return houses.getHouseData(id).id_user;
  },
  setChestLevel: (id, level) => {
    houses.getHouseData(id).chest = level;

    _housesEntity.housesEntity.update({
      chest: level
    }, {
      where: {
        id: id
      }
    });
  },
  updateOwnerInfo: function (id, userId, userName) {
    id = _methods.methods.parseInt(id);
    userId = _methods.methods.parseInt(userId);
    let data = houses.getHouseData(id);
    data.name_user = userName;
    data.id_user = userId;
    data.is_buy = userId > 0 ? 1 : 0;

    if (userId == 0) {
      houses.setChestLevel(id, 0);
    }

    if (hBlips.has(id)) {
      hBlips.get(id).dimension = userId > 0 ? 1 : 0;
      hBlips.get(id).color = userId > 0 ? 59 : 69;
    }

    if (userId == 0) {
      _housesEntity.housesEntity.update({
        pin: 0,
        is_buy: userId > 0 ? 1 : 0,
        money_tax: 0,
        name_user: userName,
        id_user: userId
      }, {
        where: {
          id: id
        }
      });

      data.pin = 0;
    } else {
      _housesEntity.housesEntity.update({
        is_buy: userId > 0 ? 1 : 0,
        money_tax: 0,
        name_user: userName,
        id_user: userId
      }, {
        where: {
          id: id
        }
      });
    }
  },
  updatePin: function (id, pin) {
    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);
    houses.getHouseData(id).pin = pin;

    _housesEntity.housesEntity.update({
      pin: pin
    }, {
      where: {
        id: id
      }
    });
  },
  getPin: function (id) {
    return houses.getHouseData(id).pin;
  },
  sell: function (player) {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'id_house') == 0) {
      player.notify('~r~У Вас нет недвижимости');
      return;
    }

    let hInfo = houses.getHouseData(_user.user.get(player, 'id_house'));

    if (hInfo.get('id_user') != _user.user.get(player, 'id')) {
      player.notify('~r~Этот дом вам не пренадлежит');
      return;
    }

    let nalog = _methods.methods.parseInt(hInfo.get('price') * (100 - _coffer.coffer.get('cofferNalog')) / 100);

    _user.user.set(player, 'id_house', 0);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, "reg_time", 28);

      _user.user.set(player, "reg_status", 1);
    }

    houses.updateOwnerInfo(hInfo.get('id'), 0, '');

    _coffer.coffer.removeMoney(nalog);

    _user.user.addMoney(player, nalog);

    _user.user.log(player, "PlayerSell", `Продал дом ${hInfo.get('address')} @house${hInfo.get('id')} за $${nalog}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Продал дом ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(nalog));

      player.notify('~g~Вы продали недвижимость');
      player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog')}%\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

      _user.user.saveAccount(player);
    }, 1000);
  },
  buy: function (player, id) {
    _methods.methods.debug('houses.buy');

    if (!_user.user.isLogin(player)) return;
    let hInfo = houses.getHouseData(id);

    if (_user.user.get(player, 'id_house') > 0) {
      player.notify('~r~У Вас есть недвижимость');
      return false;
    }

    if (hInfo.get('price') > _user.user.getMoney(player)) {
      player.notify('~r~У Вас не хватает средств');
      return false;
    }

    if (hInfo.get('id_user') > 0) {
      player.notify('~r~Недвижимость уже куплена');
      return false;
    }

    _user.user.set(player, 'id_house', id);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, 'reg_time', 372);

      _user.user.set(player, 'reg_status', 2);
    }

    houses.setChestLevel(id, 0);
    houses.updateOwnerInfo(id, _user.user.get(player, 'id'), _user.user.get(player, 'rp_name'));

    _coffer.coffer.addMoney(hInfo.get('price'));

    _user.user.removeMoney(player, hInfo.get('price'));

    _user.user.log(player, "PlayerBuy", `Купил дом ${hInfo.get('address')} @house${hInfo.get('id')} за $${hInfo.get('price')}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Купил дом ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(hInfo.get('price')));

      _user.user.saveAccount(player);

      player.notify('~g~Поздравляем с покупкой недвижимости!');
    }, 500);
    return true;
  }
};
exports.houses = houses;
},{"./modules/methods":"qXSp","./user":"QE3B","./coffer":"sKID","./modules/entity/housesEntity":"kvtc","./modules/entity/user":"xF3w"}],"BQ3k":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parkPlaceEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let parkPlaceEntity = class parkPlaceEntity extends _sequelizeTypescript.Model {};
exports.parkPlaceEntity = parkPlaceEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "rx", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "ry", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "rz", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DOUBLE,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], parkPlaceEntity.prototype, "h", void 0);

exports.parkPlaceEntity = parkPlaceEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_park_place"
})], parkPlaceEntity);
},{}],"ipvo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getParkPosition = getParkPosition;
exports.loadParkPlace = void 0;
exports.spawnParkMenu = spawnParkMenu;

var _menu = require("../modules/menu");

var _user = require("../user");

var _methods = require("../modules/methods");

var _parkPlaceEntity = require("../modules/entity/parkPlaceEntity");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let places = new Map();

const loadParkPlace = () => {
  _parkPlaceEntity.parkPlaceEntity.findAll().then(datas => {
    datas.forEach(data => {
      places.set(data.id, _objectSpread({}, data));
    });
  });
};

exports.loadParkPlace = loadParkPlace;

function getParkPosition(position, range = 50, type = 'vehicle') {
  let searchKey = 0;

  switch (type) {
    case 'vehicle':
      searchKey = 0;
      break;

    case 'bike':
      searchKey = 1;
      break;

    case 'truck':
      searchKey = 2;
      break;

    case 'heli':
      searchKey = 3;
      break;

    case 'plane':
      searchKey = 4;
      break;

    case 'player':
      searchKey = 5;
      break;

    case 'all':
      searchKey = 6;
      break;

    default:
      searchKey = 7;
      break;
  }

  if (!position) return null;
  if (typeof position.x != "number" || typeof position.y != "number" || typeof position.y != "number") return null;
  let search = [...places].map(([id, data]) => {
    let pos2 = new mp.Vector3(data.x, data.y, data.z);
    if (data.type <= searchKey && _methods.methods.distanceToPos(pos2, position) <= range) return _objectSpread(_objectSpread({}, data), {}, {
      id,
      pos: pos2
    });
  });
  search.sort((a, b) => {
    if (_methods.methods.distanceToPos(a.pos, position) < _methods.methods.distanceToPos(b.pos, position)) return -1;else return 1;
  });
  let freeFound = null;
  search.map(data => {
    if (!data) return;

    if (!freeFound) {
      let free = true;
      mp.vehicles.forEachInRange(position, range, vehicle => {
        if (free) {
          if (vehicle.dist(data.pos) < 3) return free = false;
        }
      });

      if (free) {
        freeFound = _objectSpread(_objectSpread({}, data), {}, {
          rot: new mp.Vector3(data.rx, data.ry, data.rz)
        });
      }
    }
  });
  return freeFound;
}

function spawnParkMenu(player) {
  if (!_user.user.isAdminNow(player)) return player.notify('~r~Доступно только для администрации');

  let m = _menu.menu.new(player, 'Точки спавна', 'Действия');

  let type = 0;
  let lastID = 0;
  m.newItem({
    name: 'Новая точка',
    type: 'list',
    desc: 'Не забудьте выбрать правильный тип\n~r~Внимание!!! лучше делать в ТС',
    list: ['Легковые ТС', 'Мото', 'Большие грузовики', 'Вертолёты', 'Самолёты', 'Люди', 'Все'],
    onchange: value => {
      type = value;
    },
    onpress: () => {
      let x = 0.0;
      let y = 0.0;
      let z = 0.0;
      let rx = 0.0;
      let ry = 0.0;
      let rz = 0.0;
      let pos = player.vehicle ? player.vehicle.position : player.position;
      x = pos.x;
      y = pos.y;
      z = pos.z;
      let rot = player.vehicle ? player.vehicle.rotation : {
        x: 0.0,
        y: 0.0,
        z: 0.0
      };
      rx = rot.x;
      ry = rot.y;
      rz = rot.z;
      let h = player.vehicle ? player.vehicle.heading : player.heading;
      let fnd = 0;
      places.forEach((items, id) => {
        if (!fnd && _methods.methods.distanceToPos(pos, new mp.Vector3(items.x, items.y, items.z)) < 3) fnd = id;
      });
      if (fnd) return player.notify("В данном месте уже есть позиция, ID - " + fnd);

      _parkPlaceEntity.parkPlaceEntity.create({
        type,
        x,
        y,
        z,
        rx,
        ry,
        rz,
        h
      }).then(data => {
        lastID = data.id;
        places.set(lastID, {
          type,
          x,
          y,
          z,
          rx,
          ry,
          rz,
          h
        });
        player.notify('~g~Точка добавлена (ID: ' + lastID + ')');
      });
    }
  });
  m.newItem({
    name: 'Удалить последнюю точку',
    onpress: () => {
      if (lastID == 0) return player.notify('~r~Удалять нечего');

      _parkPlaceEntity.parkPlaceEntity.destroy({
        where: {
          id: lastID
        }
      }).then(() => {
        player.notify('~g~Точка удалена');
      });

      places.delete(lastID);
      lastID = 0;
    }
  });
  m.newItem({
    name: 'ID ближайшей точки',
    onpress: () => {
      let data = getParkPosition(player.position, 40);

      _user.user.setWaypoint(player, data.x, data.y);

      player.notify("ID ближайшей точки - " + data.id);
    }
  });
  m.newItem({
    name: 'Удалить точку по ID',
    onpress: () => {
      _menu.menu.input(player, "Введите ID").then(d => {
        let id = _methods.methods.parseInt(d);

        if (!places.has(id)) return player.notify("ID не существует");

        _parkPlaceEntity.parkPlaceEntity.destroy({
          where: {
            id: id
          }
        }).then(() => {
          player.notify('~g~Точка удалена');
        });

        places.delete(id);
      });
    }
  });
  m.open();
}
},{"../modules/menu":"Aiz7","../user":"QE3B","../modules/methods":"qXSp","../modules/entity/parkPlaceEntity":"BQ3k"}],"SdUa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.autosalonModelsEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let autosalonModelsEntity = class autosalonModelsEntity extends _sequelizeTypescript.Model {};
exports.autosalonModelsEntity = autosalonModelsEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], autosalonModelsEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], autosalonModelsEntity.prototype, "autosalon", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(120)",
  allowNull: false
}), __metadata("design:type", String)], autosalonModelsEntity.prototype, "model", void 0);

exports.autosalonModelsEntity = autosalonModelsEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_autosalon_models"
})], autosalonModelsEntity);
},{}],"pv82":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.carsEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let carsEntity = class carsEntity extends _sequelizeTypescript.Model {};
exports.carsEntity = carsEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], carsEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "id_user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  defaultValue: ""
}), __metadata("design:type", String)], carsEntity.prototype, "user_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], carsEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  defaultValue: ""
}), __metadata("design:type", String)], carsEntity.prototype, "class_type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "hash", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 100
}), __metadata("design:type", Number)], carsEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "stock", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1
}), __metadata("design:type", Number)], carsEntity.prototype, "stock_full", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "stock_item", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 50
}), __metadata("design:type", Number)], carsEntity.prototype, "fuel", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 100
}), __metadata("design:type", Number)], carsEntity.prototype, "full_fuel", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 1
}), __metadata("design:type", Number)], carsEntity.prototype, "fuel_minute", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "color1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "color2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "neon_type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 255
}), __metadata("design:type", Number)], carsEntity.prototype, "neon_r", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 255
}), __metadata("design:type", Number)], carsEntity.prototype, "neon_g", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 255
}), __metadata("design:type", Number)], carsEntity.prototype, "neon_b", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  allowNull: false
}), __metadata("design:type", String)], carsEntity.prototype, "number", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "wanted_level", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "lock_status", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_mp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_wh_bk_l", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_wh_b_l", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_wh_bk_r", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_wh_b_r", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_engine", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_suspension", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_body", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_candle", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "s_oil", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], carsEntity.prototype, "livery", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 1
}), __metadata("design:type", Number)], carsEntity.prototype, "is_visible", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "rot", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "x_park", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "y_park", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "z_park", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "rot_park", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(4048)",
  defaultValue: '{"18":-1}'
}), __metadata("design:type", String)], carsEntity.prototype, "upgrade", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(512)",
  defaultValue: ''
}), __metadata("design:type", String)], carsEntity.prototype, "cop_park_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TINYINT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "is_cop_park", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(1)",
  defaultValue: 0
}), __metadata("design:type", Number)], carsEntity.prototype, "sell_price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(50)",
  allowNull: true
}), __metadata("design:type", String)], carsEntity.prototype, "sell_info", void 0);

exports.carsEntity = carsEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_cars"
})], carsEntity);
},{}],"wd09":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.carRentEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let carRentEntity = class carRentEntity extends _sequelizeTypescript.Model {};
exports.carRentEntity = carRentEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], carRentEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(10)",
  allowNull: false
}), __metadata("design:type", Number)], carRentEntity.prototype, "business_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(255)",
  allowNull: false
}), __metadata("design:type", String)], carRentEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(5)",
  allowNull: false
}), __metadata("design:type", Number)], carRentEntity.prototype, "price", void 0);

exports.carRentEntity = carRentEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_car_rent"
})], carRentEntity);
},{}],"JYAF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.autosalon = void 0;

var _methods = require("../../modules/methods");

var _business = require("../../business");

var _menu = require("../../modules/menu");

var _colors = require("./colors");

var _rentPos = require("./rentPos");

var _user = require("../../user");

var _vehicles = require("../../vehicles");

var _houses = require("../../houses");

var _chat = require("../../modules/chat");

var _lodash = _interopRequireDefault(require("lodash"));

var _parking = require("../../managers/parking");

var _newrage = require("../../../util/newrage");

var _autosalonModels = require("../../modules/entity/autosalonModels");

var _carsModel = require("../../modules/entity/carsModel");

var _sequelize = require("sequelize");

var _autosalonPercent = require("../../modules/entity/autosalonPercent");

var _carRent = require("../../modules/entity/carRent");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getPos = poses => {
  const allPos = _lodash.default.sample(poses);

  const pos = allPos.slice(0, 3);
  let in_pos = false;
  mp.vehicles.forEachInRange(new mp.Vector3(...pos), 1, vehicle => {
    if (mp.vehicles.exists(vehicle)) in_pos = true;
  });
  if (!in_pos) return allPos;else return _lodash.default.sample(poses.filter(i => i[0] != allPos[0]));
};

let autosalon = {
  models: [[], [], [], [], [], [], []],
  list: [['Автосалон Эконом', -44.23451232910156, -1660.8045654296875, 29.283042907714844, 225, 173, 5], ['Автосалон Комфорт', -32.23559951782226, -1111.933471679687, 26.4223518371582, 225, 174, 5], ['Автосалон Элитный', -69.3691177, 62.7385559, 71.8934402, 225, 175, 5], ['Мотосалон', 268.23211669921875, -1155.246826171875, 29.290678024291992, 226, 176, 5], ['Лодочная станция', -786.2677001953125, -1355.430419921875, 5.150264739990234, 427, 177, 5], ['Воздушный транспорт', -1071.0123291015625, -2868.7138671875, 13.951811790466309, 307, 178, 5], ['Тех. транспорт', 796.626953125, -2988.70166015625, 6.020936012268066, 318, 179, 5]],
  colors: _colors.colors,
  cars: {},
  rentPos: _rentPos.rentPos,
  rentCars: {},
  loadAll: async () => {
    _methods.methods.debug('autosalon.loadAll');

    autosalon.list.map(async (item, idx) => {
      let shopPos = new mp.Vector3(item[1], item[2], item[3]);

      _methods.methods.createBlip(shopPos, item[4], 77, 0.7, item[0]);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z - 1, 'Нажмите ~g~Е~s~ чтобы открыть меню');
    });
    autosalon.loadCars();
    autosalon.loadRentCars();
  },
  loadModels: () => {
    return new Promise((resolve, reject) => {
      autosalon.models = [[], [], [], [], [], [], []];

      _autosalonModels.autosalonModelsEntity.findAll().then(data => {
        data.map(item => {
          autosalon.models[item.autosalon].push(item.model);
        });
        resolve(true);
      });
    });
  },
  removeModel: (salonid, model) => {
    _autosalonModels.autosalonModelsEntity.destroy({
      where: {
        autosalon: salonid,
        model: model
      }
    }).then(() => {
      autosalon.loadCars();
    });
  },
  addModel: (salonid, model) => {
    _autosalonModels.autosalonModelsEntity.create({
      autosalon: salonid,
      model: model
    }).then(() => {
      autosalon.loadCars();
    });
  },
  loadCars: async () => {
    _methods.methods.debug('autosalon.loadCars');

    await autosalon.loadModels();
    autosalon.list.map(async (item, idx) => {
      const typeModels = autosalon.models[idx].reduce((str, item, index) => {
        return str + `'${item}'` + (index != autosalon.models[idx].length - 1 ? ',' : '');
      }, ``);
      let q = autosalon.models[idx];

      _carsModel.carsEntity.findAll({
        where: {
          id_user: 0,
          user_name: '',
          name: {
            [_sequelize.Op.in]: q
          }
        }
      }).then(cars => {
        if (autosalon.cars[idx] && autosalon.cars[idx] instanceof Map) {
          autosalon.cars[idx].clear();
        }

        autosalon.cars[idx] = new Map();
        cars.map(item => {
          autosalon.cars[idx].set(item.id, item);
        });

        _autosalonPercent.autosalonPercentEntity.findAll({
          where: {
            business_id: item[5]
          }
        }).then(rows => {
          autosalon.list[idx][6] = rows[0].percent;
        });
      });
    });
  },
  loadRentCars: async () => {
    _methods.methods.debug('autosalon.loadRentCars');

    for (let idx = 0; idx < autosalon.list.length; idx++) {
      const item = autosalon.list[idx];

      _carRent.carRentEntity.findAll({
        where: {
          business_id: item[5]
        }
      }).then(rentCars => {
        if (autosalon.rentCars[idx] && autosalon.rentCars[idx] instanceof Map) {
          autosalon.rentCars[idx].clear();
        }

        autosalon.rentCars[idx] = new Map();
        rentCars.map(car => {
          autosalon.rentCars[idx].set(car.id, car);
        });
      });
    }
  },
  getLocalInRadius: (pos, radius = 2) => {
    let asId = -1;
    autosalon.list.map((item, idx) => {
      if (asId != -1) return;
      let shopPos = new mp.Vector3(item[1], item[2], item[3]);

      if (_methods.methods.distanceToPos(pos, shopPos) < radius) {
        asId = idx;
        return;
      }
    });
    return asId;
  },
  getRemoteInRadius: (pos, radius = 2) => {
    let asId = autosalon.getLocalInRadius(pos, radius);
    if (asId == -1) return -1;
    return autosalon.list[asId][5];
  },
  checkPosForOpenMenu: player => {
    if (!mp.players.exists(player)) return;
    if (!_user.user.isLogin(player)) return;
    let playerPos = player.position;
    let asIdRemote = autosalon.getRemoteInRadius(playerPos, 2);
    let asIdLocal = autosalon.getLocalInRadius(playerPos, 2);
    if (asIdRemote == -1) return;

    const m = _menu.menu.new(player, _business.business.getName(asIdRemote), 'Действия', [{
      name: 'Покупка ТС',
      onpress: () => {
        if (!_chat.enabledSystem.buycar) return player.notify("Салон на временных тех работах. Загляните чуть позже");
        autosalon.startBuy(player, asIdLocal, 'buy');
        m.close();
      }
    }]);

    if (asIdRemote != 179) {
      m.newItem({
        name: 'Аренда ТС',
        onpress: () => {
          if (!_chat.enabledSystem.rent) return player.notify("Салон на временных тех работах. Загляните чуть позже");
          autosalon.startBuy(player, asIdLocal, 'rent');
          m.close();
        }
      });
    }

    m.newItem({
      name: '~r~Закрыть',
      onpress: () => m.close()
    });
    m.open();
  },
  startBuy: async (player, asId, type) => {
    _methods.methods.debug('autosalon.startBuy');

    if (!mp.players.exists(player)) return;
    if (!_user.user.isLogin(player)) return;

    _user.user.showLoadDisplay(player);

    await _methods.methods.sleep(500);
    player.dimension = 100 + player.id;
    player.currentAutosalonId = asId;
    let showType = 'auto';

    if (asId == 4) {
      showType = 'boat';
    } else if (asId == 5) {
      showType = 'plane';
    } else if (asId == 6) {
      showType = 'technical';
    }

    if (type == 'buy') {
      const cars = [...autosalon.cars[asId]].map(([key, item]) => item);

      let uniq = _lodash.default.uniqBy(cars, 'name');

      uniq = uniq.map(item => {
        let same = uniq.filter(i => i.name == item.name);

        let random = _lodash.default.sample(same);

        return random;
      });
      const carsData = uniq.map(item => ({
        id: item.id,
        model: item.name.toLowerCase(),
        name: _methods.methods.getVehicleInfo(item.name) ? _methods.methods.getVehicleInfo(item.name).display_name : item.name,
        stock: _methods.methods.getVehicleInfo(item.name) ? _methods.methods.getVehicleInfo(item.name).stock : 0,
        fuel: item.full_fuel,
        price: item.price
      })).sort((a, b) => {
        if (a.name < b.name) return -1;
        if (a.name > b.name) return 1;
        return 0;
      });
      player.call('client:autosalon:startBuyCar', [carsData, autosalon.colors, type, showType]);
    } else if (type == 'rent') {
      const carsData = [...autosalon.rentCars[asId]].map(([key, item]) => ({
        id: item.id,
        model: item.name.toLowerCase(),
        name: item.name,
        fuel: _methods.methods.getVehicleInfo(item.name.toLowerCase()).fuel_full,
        price: item.price
      })).sort((a, b) => {
        if (a.name < b.name) return -1;
        if (a.name > b.name) return 1;
        return 0;
      });
      player.call('client:autosalon:startBuyCar', [carsData, autosalon.colors, type, showType]);
    }
  },
  buyCar: async (player, slot, car, color) => {
    _methods.methods.debug('autosalon.buyCar');

    if (!mp.players.exists(player)) return;
    if (!_user.user.isLogin(player)) return;

    try {
      const user_id = _user.user.getId(player);

      const rows = await _carsModel.carsEntity.findAll({
        where: {
          name: car.name,
          id_user: 0
        }
      });

      if (!rows.length) {
        _user.user.bigAlert(player, 'ТС нет в наличии', 'warning');

        return false;
      }

      car = rows[0];

      if (car.user_name || car.id_user) {
        _user.user.bigAlert(player, 'ТС уже куплен', 'warning');

        return false;
      }

      const allPos = getPos(autosalon.rentPos[player.currentAutosalonId]);
      let pos = allPos.slice(0, 3);
      let rot = allPos.slice(3, 6);
      let parkpos = (0, _parking.getParkPosition)(new mp.Vector3(pos[0], pos[1], pos[2]));

      if (parkpos && parkpos.pos) {
        pos = [parkpos.pos.x, parkpos.pos.y, parkpos.pos.z];
        rot = [parkpos.rot.x, parkpos.rot.y, parkpos.rot.z];
      }

      await _vehicles.vehicles.buy(car.id, player, new mp.Vector3(pos[0], pos[1], pos[2]), rot[2], color);

      _user.user.set(player, 'car_id' + slot, car.id);

      _user.user.updateClientCache(player);

      _user.user.removeCashMoney(player, car.price);

      _user.user.bigAlert(player, `Поздравляем с покупкой транспорта. ${_user.user.getLevel(player) < 4 ? 'Не забудьте перепарковать транспорт в любом удобном для вас месте.' : ''}`, 'success', 10000);

      _user.user.saveAccount(player);

      _user.user.log(player, "PlayerBuy", `Купил ТС ${car.name} @veh${car.id} за $${car.price}`);

      const asId = autosalon.list[player.currentAutosalonId][5];

      _business.business.addMoney(asId, car.price / 100 * autosalon.list[player.currentAutosalonId][6]);

      _methods.methods.saveLog('BuyVehicle', `ID: ${car.id}, BUY NAME: ${_user.user.getRpName(player)}, PRICE: ${car.price}, VEHICLE NAME: ${car.name}`);

      autosalon.loadCars();
      return true;
    } catch (e) {
      console.error(e);

      _methods.methods.debug(e);

      return false;
    }
  },
  rentCar: async (player, model, price, color) => {
    _methods.methods.debug('autosalon.rentCar');

    if (!mp.players.exists(player)) return;
    if (!_user.user.isLogin(player)) return;
    const hash = mp.joaat(model);

    let className = _methods.methods.getVehicleInfo(hash).class_name;

    const find = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));

    if (find) {
      player.notify('~y~Вы уже арендовали ТС, закончите аренду ~b~(/unrent)');
      return;
    }

    switch (className) {
      case 'Planes':
      case 'Helicopters':
        if (!_user.user.get(player, 'air_lic')) {
          _user.user.bigAlert(player, 'У Вас нет лицензии пилота', 'warning');

          return;
        }

        break;

      case 'Boats':
        if (!_user.user.get(player, 'ship_lic')) {
          _user.user.bigAlert(player, 'У Вас нет лицензии на водный транспорт', 'warning');

          return;
        }

        break;

      case 'Commercials':
      case 'Industrial':
        if (!_user.user.get(player, 'c_lic')) {
          _user.user.bigAlert(player, 'У Вас нет лицензии категории C', 'warning');

          return;
        }

        break;

      case 'Compacts':
      case 'Coupes':
      case 'Muscle':
      case 'Off-Road':
      case 'Sedans':
      case 'Sports':
      case 'Sports Classics':
      case 'Super':
      case 'SUVs':
      case 'Utility':
      case 'Vans':
        if (!_user.user.get(player, 'b_lic')) {
          _user.user.bigAlert(player, 'У Вас нет лицензии категории B', 'warning');

          return;
        }

        break;

      case 'Motorcycles':
        if (hash != -1842748181 && !_user.user.get(player, 'a_lic')) {
          _user.user.bigAlert(player, 'У Вас нет лицензии категории А. Вы можете взять Faggio', 'warning');

          return;
        }

        break;
    }

    _user.user.removeMoney(player, price);

    _user.user.log(player, "PlayerRent", `Взял в аренду ${model} за $${price}`);

    const asId = autosalon.list[player.currentAutosalonId][5];

    _business.business.addMoney(asId, price / 2);

    _user.user.saveAccount(player);

    const allPos = getPos(autosalon.rentPos[player.currentAutosalonId]);
    const pos = allPos.slice(0, 3);
    const rot = allPos.slice(3, 6);

    _user.user.bigAlert(player, `Вы арендовали транспорт, подождите пару секунд`, 'success');

    player.notify('~b~Введите ~y~/unrent ~s~для отказа от аренды');
    let parkpos = (0, _parking.getParkPosition)(new mp.Vector3(pos[0], pos[1], pos[2]));

    if (parkpos && parkpos.pos) {
      _vehicles.vehicles.spawnRentCar(player, parkpos.pos, parkpos.h, hash, color).then(veh => {
        setTimeout(() => {
          if (!mp.players.exists(player)) return;
          if (!mp.vehicles.exists(veh)) return;
          if (veh) player.putIntoVehicle(veh, _newrage.RAGE_BETA ? 0 : -1);
        }, 100);
      });

      return;
    }

    _vehicles.vehicles.spawnRentCar(player, new mp.Vector3(pos[0], pos[1], pos[2]), rot[2], hash, color).then(veh => {
      setTimeout(() => {
        if (!mp.players.exists(player)) return;
        if (!mp.vehicles.exists(veh)) return;
        if (veh) player.putIntoVehicle(veh, _newrage.RAGE_BETA ? 0 : -1);
      }, 100);
    });
  },
  changeRentPriceMenu: (player, remoteId) => {
    _methods.methods.debug('autosalon.changeRentPriceMenu');

    if (!mp.players.exists(player)) return;
    if (_business.business.get(remoteId, 'user_id') != _user.user.getId(player)) return;
    const item = autosalon.list.find(item => item[5] == remoteId);
    if (!item) return;
    const localId = autosalon.list.indexOf(item);
    const cars = autosalon.rentCars[localId];

    const m = _menu.menu.new(player, 'Аренда', 'Выберите ТС');

    cars.forEach(car => {
      m.newItem({
        name: `${car.name} ($${car.price})`,
        onpress: () => {
          autosalon.changeRentPrice(player, car.id).then(() => {
            m.close();
            autosalon.changeRentPriceMenu(player, remoteId);
          });
        }
      });
    });
    m.newItem({
      name: '~r~Закрыть',
      onpress: () => m.close()
    });
    m.open();
  },
  changeRentPrice: async (player, id) => {
    _methods.methods.debug('autosalon.changeRentPrice');

    if (!mp.players.exists(player)) return;
    let input = await _menu.menu.input(player, 'Новую цену', '', 5, 'int');
    if (typeof input != 'number') return;

    const price = _methods.methods.parseInt(input);

    if (price < 10 || price > 50000) {
      autosalon.changeRentPrice(player, id);
      return player.notify('~r~Введите сумму ($10-$50.000)');
    }

    await _carRent.carRentEntity.update({
      price: price
    }, {
      where: {
        id: id
      }
    });
    await autosalon.loadRentCars();
    player.notify('~g~Вы обновили цену аренды');
    return;
  },
  findNearest: id => {
    _methods.methods.debug('autosalon.findNearest');

    const posData = autosalon.list[id - 1].slice(1, 4);
    const pos = new mp.Vector3(posData[0], posData[1], posData[2]);
    return pos;
  }
};
exports.autosalon = autosalon;
let buyWaiting = new Map();
setInterval(() => {
  let q = false;
  buyWaiting.forEach((item, playerId) => {
    if (q) return;
    q = true;
    let player = mp.players.at(playerId);
    if (!mp.players.exists(player)) return buyWaiting.delete(playerId);
    buy(player, item.id, item.colorId).then(status => {
      _methods.methods.debug(`Autosalon buy status | PLAYER_ID ${playerId} | CAR_ID ${item.id} | STATUS ${status}`);

      if (!status) {
        _user.user.alert(player, 'Повторите попытку', 'error');
      }
    });
    buyWaiting.delete(playerId);
  });
}, 1500);
mp.events.add('server:autosalon:buyCar', (player, id, colorId) => {
  _methods.methods.debug('server:autosalon:buyCar');

  if (!mp.players.exists(player)) return;
  buyWaiting.set(player.id, {
    id,
    colorId
  });
  player.notify('Ищем ТС на складе, подождите пару секунд');
});

function buy(player, id, colorId) {
  _methods.methods.debug('autosalon:buyFunctionFromInterval');

  return new Promise(async resolve => {
    if (!player) return resolve(false);
    if (!mp.players.exists(player)) return resolve(false);
    const asId = player.currentAutosalonId;
    if (isNaN(Number(asId))) return resolve(false);
    const car = autosalon.cars[asId].get(id);
    if (!car) return resolve(false);
    if (car.id_user || car.user_name) return _user.user.alert(player, 'ТС уже куплен', 'warning'), resolve(false);

    if (_user.user.get(player, 'money') < car.price) {
      _user.user.bigAlert(player, 'Недостаточно средств', 'warning');

      return resolve(false);
    }

    const color = autosalon.colors[colorId][0];

    if (!_user.user.get(player, 'car_id1')) {
      resolve(await autosalon.buyCar(player, 1, car, color));
      return;
    } else if (!_user.user.get(player, 'car_id2')) {
      if (!(_user.user.get(player, 'id_house') != 0 || _user.user.get(player, 'apartment_id') != 0 || _user.user.get(player, 'condo_id') != 0)) {
        return _user.user.bigAlert(player, 'У вас должен быть дом/склад/аппартаменты, чтобы купить 2-й транспорт', 'warning'), resolve(false);
      }

      resolve(await autosalon.buyCar(player, 2, car, color));
      return;
    } else if (!_user.user.get(player, 'car_id3')) {
      if (_user.user.get(player, 'id_house') == 0) {
        return _user.user.bigAlert(player, 'У вас должен быть дом, чтобы купить 3-й транспорт', 'warning'), resolve(false);
      }

      if (_houses.houses.get(_user.user.get(player, 'id_house'), 'price') < 1000000) {
        return _user.user.bigAlert(player, 'Ваш дом должен стоить минимум $1.000.000, чтобы купить 3-й транспорт', 'warning'), resolve(false);
      }

      resolve(await autosalon.buyCar(player, 3, car, color));
      return;
    } else if (!_user.user.get(player, 'car_id4')) {
      if (_user.user.get(player, 'id_house') == 0) {
        return _user.user.bigAlert(player, 'У вас должен быть дом, чтобы купить 4-й транспорт', 'warning'), resolve(false);
      }

      if (_houses.houses.get(_user.user.get(player, 'id_house'), 'price') < 2500000) {
        return _user.user.bigAlert(player, 'Ваш дом должен стоить минимум $2.500.000, чтобы купить 4-й транспорт', 'warning'), resolve(false);
      }

      resolve(await autosalon.buyCar(player, 4, car, color));
      return;
    } else if (!_user.user.get(player, 'car_id5')) {
      if (_user.user.get(player, 'id_house') == 0) {
        return _user.user.bigAlert(player, 'У вас должен быть дом, чтобы купить 5-й транспорт', 'warning'), resolve(false);
      }

      if (_houses.houses.get(_user.user.get(player, 'id_house'), 'price') < 5000000) {
        return _user.user.bigAlert(player, 'Ваш дом должен стоить минимум $5.000.000, чтобы купить 5-й транспорт', 'warning'), resolve(false);
      }

      resolve(await autosalon.buyCar(player, 5, car, color));
      return;
    } else if (!_user.user.get(player, 'car_id6') || !_user.user.get(player, 'car_id7') || !_user.user.get(player, 'car_id8')) {
      return _user.user.bigAlert(player, '6, 7, 8 транспорт можно купить с помощью Appi Coins', 'info'), resolve(false);
    }
  });
}

mp.events.add('server:autosalon:rentCar', (player, id, colorId) => {
  _methods.methods.debug('server:autosalon:rentCar');

  if (!_chat.enabledSystem.rent) return player.notify("Салон на временных тех работах. Загляните чуть позже");
  if (!mp.players.exists(player)) return;
  const asId = player.currentAutosalonId;
  if (isNaN(Number(asId))) return;
  const car = autosalon.rentCars[asId].get(id);
  if (!car) return;

  if (_user.user.get(player, 'money') < car.price) {
    return _user.user.bigAlert(player, 'Недостаточно средств', 'warning');
  }

  const color = autosalon.colors[colorId][0];
  autosalon.rentCar(player, car.name.toLowerCase(), car.price, color);
});
mp.events.add('playerStartEnterVehicle', (player, vehicle, seat) => {
  _methods.methods.debug('playerStartEnterVehicle');

  if (seat != -1) return;
  const hash = vehicle.model;

  let className = _methods.methods.getVehicleInfo(hash).class_name;

  switch (className) {
    case 'Planes':
    case 'Helicopters':
      if (!_user.user.get(player, 'air_lic')) {
        player.notify('~r~У Вас нет лицензии пилота');
        player.stopAnimation();
        return;
      }

      break;

    case 'Boats':
      if (!_user.user.get(player, 'ship_lic')) {
        player.notify('~r~У Вас нет лицензии на водный транспорт');
        player.stopAnimation();
        return;
      }

      break;
  }
});
mp.events.add('server:autosalon:changeRentPrice', autosalon.changeRentPriceMenu);
setTimeout(() => {
  mp.events.register('server:autosalon:getAutosalonNalog', async (player, id) => {
    _methods.methods.debug('server:autosalon:getAutosalonNalog');

    let item = await _autosalonPercent.autosalonPercentEntity.findOne({
      where: {
        business_id: id
      }
    });
    if (!item) return;
    return item.percent;
  });
  mp.events.register('server:autosalon:isCarRented', (player, vehId) => {
    _methods.methods.debug('server:autosalon:isCarRented');

    if (!mp.players.exists(player)) return false;
    const vehicle = mp.vehicles.at(vehId);
    if (!mp.vehicles.exists(vehicle)) return false;
    const rentedVehicle = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));
    if (!rentedVehicle) return false;
    if (!mp.vehicles.exists(rentedVehicle)) return false;
    if (rentedVehicle.id == vehicle.id) return true;
    return false;
  });
  mp.events.register('server:autosalon:stopBuyCar', async player => {
    _methods.methods.debug('server:autosalon:stopBuyCar');

    if (!mp.players.exists(player)) return;

    _user.user.showLoadDisplay(player);

    await _methods.methods.sleep(500);
    const asId = player.currentAutosalonId;
    if (isNaN(Number(asId))) return;
    const item = autosalon.list[asId];
    const exitPos = new mp.Vector3(item[1], item[2], item[3]);

    _user.user.teleport(player, exitPos.x, exitPos.y, exitPos.z, player.heading - 180);

    player.dimension = 0;
    player.call('client:autosalon:stopBuyCar');
  });

  _chat.chat.registerCommand('unrent', player => {
    _methods.methods.debug('chat:unrent');

    const vehicle = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));
    if (!vehicle) return player.notify('~b~Вы не арендуете ТС');
    if (!mp.vehicles.exists(vehicle)) return;
    vehicle.destroy();
    player.notify('~g~Вы отказались от аренды ТС');
  });
}, 1000);
mp.events.add('server:autosalon:unrent', player => {
  _methods.methods.debug('server:autosalon:unrent');

  const vehicle = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));
  if (!vehicle) return player.notify('~b~Вы не арендуете ТС');
  if (!mp.vehicles.exists(vehicle)) return;
  vehicle.destroy();
  player.notify('~g~Вы отказались от аренды ТС');
});
mp.events.add('playerQuit', player => {
  const vehicle = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));
  if (!mp.vehicles.exists(vehicle)) return;

  const id = _user.user.getId(player);

  _vehicles.vehicles.lockStatus(null, vehicle, true);

  setTimeout(() => {
    if (!_user.user.getPlayerById(id)) {
      if (mp.vehicles.exists(vehicle)) vehicle.destroy();
    }
  }, 5 * 60000);
});
},{"../../modules/methods":"qXSp","../../business":"y5vZ","../../modules/menu":"Aiz7","./colors":"K48O","./rentPos":"KFxM","../../user":"QE3B","../../vehicles":"pYYy","../../houses":"buna","../../modules/chat":"e1Zb","../../managers/parking":"ipvo","../../../util/newrage":"mgLX","../../modules/entity/autosalonModels":"SdUa","../../modules/entity/carsModel":"pv82","../../modules/entity/autosalonPercent":"qqav","../../modules/entity/carRent":"wd09"}],"y5vZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.business = void 0;

var _methods = require("./modules/methods");

var _user = require("./user");

var _coffer = require("./coffer");

var _business = require("./modules/entity/business");

var _level = require("../util/level");

var _menu = require("./modules/menu");

var _autosalonPercent = require("./modules/entity/autosalonPercent");

var _sharedData = require("../util/sharedData");

var _autosalon = require("./business/autosalon");

let businessData = new Map();
let businessLimit = new Map();
const BUSINESS_LIMIT_SUM = 500000;
setTimeout(() => {
  mp.events.register('get:business:data', (player, id) => {
    let data = businessData.get(id);
    let {
      name,
      name2,
      price,
      money_tax,
      score_tax,
      user_name,
      user_id,
      bank,
      type,
      price_product,
      price_card1,
      price_card2,
      tarif
    } = data;
    return {
      name: name.replace(/\//gi, '').replace(/\\/gi, ''),
      name2,
      price,
      money_tax,
      score_tax,
      user_name,
      user_id,
      bank,
      type,
      price_product,
      price_card1,
      price_card2,
      tarif
    };
  });

  _methods.methods.createDynamicCheckpoint(business.BusinessMenuPos, "Нажмите ~g~Е~s~ чтобы открыть меню бизнеса", player => {
    if (player.dimension == 0) return player.notify('~r~Возникла ошибка');
    business.openMenu(player);
  }, 1, -1, [60, 255, 60, 120]);

  _methods.methods.createDynamicCheckpoint(business.BusinessStreetPos, "Нажмите ~g~Е~s~ чтобы открыть меню Arcadius", player => {
    if (player.dimension != 0) return player.notify('~r~Возникла ошибка');
    business.tpMenu(player);
  }, 1, 0, [60, 255, 60, 120]);

  _methods.methods.createDynamicCheckpoint(business.BusinessGaragePos, "Нажмите ~g~Е~s~ чтобы открыть меню Arcadius", player => {
    if (player.dimension != 0) return player.notify('~r~Возникла ошибка');
    business.tpMenu(player);
  }, 1, 0, [60, 255, 60, 120]);

  _methods.methods.createDynamicCheckpoint(business.BusinessRoofPos, "Нажмите ~g~Е~s~ чтобы открыть меню Arcadius", player => {
    if (player.dimension != 0) return player.notify('~r~Возникла ошибка');
    business.tpMenu(player);
  }, 1, 0, [60, 255, 60, 120]);

  _methods.methods.createDynamicCheckpoint(business.BusinessMotorPos, "Нажмите ~g~Е~s~ чтобы открыть меню Arcadius", player => {
    if (player.dimension != 0) return player.notify('~r~Возникла ошибка');
    business.tpMenu(player);
  }, 1, 0, [60, 255, 60, 120]);

  _methods.methods.createDynamicCheckpoint(business.BusinessOfficePos, "Нажмите ~g~Е~s~ чтобы открыть меню Arcadius", player => {
    if (player.dimension == 0) return player.notify('~r~Возникла ошибка');
    business.tpMenu(player);
  }, 1, -1, [60, 255, 60, 120]);
}, 1000);
let business = {
  typeList: ['Банки', 'Магазины 24/7', 'Магазины одежды', 'Автомастерские', 'Пункты аренды', 'Заправки', 'Парикмахерские', 'Развлечения', 'Услуги', 'Юридические компании', 'Офисы', 'Магазины оружия', 'Тату салоны', 'Разное', 'Салоны транспорта'],
  types: {
    Tattoo: 12,
    Other: 13,
    LifeInvader: 8,
    Autosalon: 14,
    GunShop: 11,
    Shop24: 1,
    ClothShop: 2,
    BikeRent: 4,
    Fuel: 5,
    Club: 7,
    Tuning: 7,
    Office: 10,
    LawFirm: 9,
    Bank: 0,
    Hairdresser: 6
  },
  tpMenu: player => {
    let m = _menu.menu.new(player, "", "Бизнес центр");

    m.sprite = "arcadius";
    business.typeList.map(function (item, i) {
      let items = [];
      businessData.forEach(itm => {
        if (itm.type === i) items.push(itm);
      });
      m.newItem({
        name: item,
        more: `Количество: ${items.length}`,
        onpress: () => {
          let submenu = _menu.menu.new(player, "", item);

          submenu.sprite = "arcadius";

          submenu.onclose = () => {
            business.tpMenu(player);
          };

          items.map(item => {
            submenu.newItem({
              name: item.name.replace(/\//gi, '').replace(/\\/gi, ''),
              more: `${_user.user.isAdminNow(player, 6) ? `~r~ID: ${item.id}` : ``}`,
              desc: `~b~Владелец: ~s~${item.user_id == 0 ? 'Государство' : item.user_name}`,
              onpress: () => {
                _user.user.teleport(player, business.BusinessOfficePos.x, business.BusinessOfficePos.y, business.BusinessOfficePos.z, 183, item.id);
              }
            });
          });
          submenu.open();
        }
      });
    });
    m.newItem({
      name: '~b~Arcadius Motors',
      onpress: () => {
        _user.user.teleport(player, business.BusinessMotorPos.x, business.BusinessMotorPos.y, business.BusinessMotorPos.z, 73, 0);
      }
    });
    m.newItem({
      name: '~g~Улица',
      onpress: () => {
        _user.user.teleport(player, business.BusinessStreetPos.x, business.BusinessStreetPos.y, business.BusinessStreetPos.z, 250, 0);
      }
    });
    m.newItem({
      name: '~g~Крыша',
      onpress: () => {
        _user.user.teleport(player, business.BusinessRoofPos.x, business.BusinessRoofPos.y, business.BusinessRoofPos.z, 250, 0);
      }
    });
    m.newItem({
      name: '~g~Гараж',
      onpress: () => {
        _user.user.teleport(player, business.BusinessGaragePos.x, business.BusinessGaragePos.y, business.BusinessGaragePos.z, 164, 0);
      }
    });
    m.open();
  },
  openMenu: async player => {
    let id = player.dimension;
    if (!business.exist(id)) return;
    let data = business.getData(id);
    let owner = business.getOwnerInfo(id);
    let priceList = ['Очень низкая', 'Низкая', 'Нормальная', 'Высокая', 'Очень высокая'];
    let bankList = ['Maze Bank (3%)', 'Fleeca Bank (1%)', 'Blaine Bank (1%)', 'Pacific Bank (1%)'];

    let m = _menu.menu.new(player, ``, `~b~Владелец: ~s~${!owner.id ? 'Государство' : owner.name}`);

    m.sprite = "arcadius";
    let type = business.getType(id);
    let tarif = business.getTarif(id);
    let nalog;

    if (type == 14) {
      let item = await _autosalonPercent.autosalonPercentEntity.findOne({
        where: {
          business_id: id
        }
      });
      if (!item) return;
      nalog = item.percent;
    } else {
      nalog = _coffer.coffer.getNalogBizz();
    }

    let nalogOffset = 0;
    if (data.type == 3) nalogOffset += 10;
    if (data.type == 11) nalogOffset += _sharedData.businessNalog.GunShop;
    if (data.price_card2 == 3) nalogOffset += 10;
    if (data.price_card2 == 4) nalogOffset += 15;

    if (data.type != 14) {
      nalog = nalog + nalogOffset;
    }

    m.newItem({
      name: "Название",
      more: business.getName(id)
    });
    m.newItem({
      name: "~r~Налог на прибыль",
      more: `${nalog}%`
    });

    if (_user.user.isAdminNow(player, 4)) {
      m.newItem({
        name: "~b~ID Бизнеса",
        more: `${id}`
      });

      if (data.user_id != _user.user.getId(player)) {
        m.newItem({
          name: "~g~Баланс",
          more: `$${_methods.methods.numberFormat(_methods.methods.parseInt(data.bank))}`
        });
      }

      if (_user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "~y~Удалить бизнес",
          onpress: async () => {
            let status = await _user.user.accept(player, "Вы уверены?");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Вы уверены? x2");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Вы уверены? x3");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Вы уверены? x4");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Серёга, ты уверен?????");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Серёга, точно?????");
            if (!status) return business.openMenu(player);
            status = await _user.user.accept(player, "Серёга, прямо точно?????");
            if (!status) return business.openMenu(player);
            business.delete(id, player);
          }
        });
      }
    }

    if (data.user_id == _user.user.getId(player)) {
      m.newItem({
        name: "~g~Баланс",
        more: `$${_methods.methods.numberFormat(_methods.methods.parseInt(data.bank))}`
      });
      m.newItem({
        name: "~y~Обслуживающий банк",
        type: "list",
        list: bankList,
        listSelected: data.tarif,
        onpress: itm => {
          data.tarif = itm.listSelected;
          player.notify('~g~Вы заключили договор на обслуживание с новым банком: ~y~' + bankList[data.tarif]);
          business.save(data.id);
        }
      });
      m.newItem({
        name: "Положить средства",
        onpress: () => {
          _menu.menu.input(player, "Введите сумму пополнения", "", 8, "int").then(sum => {
            if (sum === null) return;
            if (isNaN(sum) || sum <= 0) return player.notify('~r~Сумма пополнения указана не верно');
            if (sum > _user.user.getBankMoney(player)) return player.notify('~r~На вашем банковском счете недостаточно средств для проведения данной операции');

            _user.user.removeBankMoney(player, sum);

            business.addMoney(id, sum, true);
            business.openMenu(player);

            _user.user.log(player, "BusinessAddMoney", "Пополнил счёт бизнеса @business" + id + " на сумму " + sum);
          });
        }
      });
      m.newItem({
        name: "Снять средства",
        onpress: () => {
          _menu.menu.input(player, "Введите сумму снятия", "", 8, "int").then(money => {
            if (money === null) return;
            if (isNaN(money) || money <= 0) return player.notify('~r~Сумма снятия указана не верно');
            if (money > data.bank) return player.notify('~r~На счету бизнеса недостаточно средств для проведения данной операции');

            if (data.get('type') == 10) {
              business.removeMoney(data.get('id'), money);

              _user.user.addCashMoney(player, money);

              player.notify(`~b~Вы сняли ~s~$${_methods.methods.numberFormat(money)} ~b~со счёта`);
            } else if (data.get('type') == 14) {
              let bankTarif = 3;
              if (data.get('tarif') != 0) bankTarif = 1;
              let tocoffer = money * (bankTarif / 100);

              switch (data.get('tarif')) {
                case 0:
                  _coffer.coffer.addMoney(tocoffer);

                  break;

                case 1:
                  business.addMoney(1, tocoffer);
                  break;

                case 2:
                  business.addMoney(2, tocoffer);
                  break;

                case 3:
                  business.addMoney(108, tocoffer);
                  break;
              }

              business.removeMoney(data.get('id'), money);

              _user.user.addCashMoney(player, _methods.methods.parseInt(money - tocoffer));

              player.notify(`~b~Вы сняли: ~s~$${_methods.methods.numberFormat(money)}\n~b~Процент банка: ~s~$${_methods.methods.numberFormat(tocoffer)} ~o~${bankTarif}%`);
            } else {
              let bankTarif = 3;
              if (data.get('tarif') != 0) bankTarif = 1;

              switch (data.get('tarif')) {
                case 0:
                  _coffer.coffer.addMoney(money * (bankTarif / 100));

                  break;

                case 1:
                  business.addMoney(1, money * (bankTarif / 100));
                  break;

                case 2:
                  business.addMoney(2, money * (bankTarif / 100));
                  break;

                case 3:
                  business.addMoney(108, money * (bankTarif / 100));
                  break;
              }

              business.removeMoney(data.get('id'), money);

              _user.user.addCashMoney(player, money * (100 - nalog - bankTarif) / 100);

              _coffer.coffer.addMoney(money * nalog / 100);

              player.notify(`~b~Вы сняли ~s~$${_methods.methods.numberFormat(money * (100 - nalog + bankTarif) / 100)} ~b~со счёта с учётом налога`);
              player.notify(`~b~${bankTarif}% от суммы отправлен банку который вас обслуживает`);
            }

            _user.user.log(player, "BusinessRemoveMoney", "Снял со счёта бизнеса @business" + id + " сумму " + money);
          });
        }
      });
      let nameSetProductMenu = '';

      switch (data.type) {
        case 0:
          {
            m.newItem({
              name: 'Цена за покупку карты',
              onpress: itm => {
                _menu.menu.input(player, "Введите новую цену", `${data.price_card1}`, 8, "int").then(cardPrice => {
                  if (cardPrice === null) return;
                  if (isNaN(cardPrice) || cardPrice <= 0) return player.notify('~r~Стоимость указана не верно');

                  if (cardPrice < 1 || cardPrice > 500) {
                    player.notify(`~r~Цена должна быть менее 500$ и больше 1$`);
                    return;
                  }

                  data.price_card1 = cardPrice;
                  data.save();
                  business.openMenu(player);
                  player.notify(`~b~Цена за покупку карты равна:~s~ $${cardPrice}`);
                });
              }
            });
            break;
          }

        case 1:
        case 5:
        case 7:
        case 11:
          {
            if (data.id != 120 && data.id != 124) {
              nameSetProductMenu = 'Цены на весь товар';
            }

            break;
          }

        case 4:
          {
            nameSetProductMenu = 'Цена за аренду';
            break;
          }

        case 9:
          {
            nameSetProductMenu = 'Процент на прибыль';
            break;
          }

        case 10:
          {
            m.newItem({
              name: "Сменить название",
              onpress: () => {
                _menu.menu.input(player, "Введите название", data.name, 15).then(name => {
                  if (!name) return;
                  data.name = name;
                  data.save();
                  player.notify('~g~Название сохранено');
                  business.openMenu(player);
                });
              }
            });
            if (_user.user.getId(player) == data.user_id) m.newItem({
              name: "~y~Тип организации",
              onpress: () => {
                let submenu = _menu.menu.new(player, "Тип организации");

                submenu.onclose = () => {
                  business.openMenu(player);
                };

                submenu.newItem({
                  name: "~g~Стандарт",
                  more: "Цена: ~g~Бесплатно",
                  onpress: () => {
                    _user.user.accept(player, "Вы уверены?").then(status => {
                      if (!status) return business.openMenu(player);
                      business.upgradeType(player, 0, id);
                    });
                  }
                });
                submenu.newItem({
                  name: "~y~ОПГ",
                  more: "Цена: ~g~$1,000,000",
                  onpress: () => {
                    _user.user.accept(player, "Вы уверены?").then(status => {
                      if (!status) return business.openMenu(player);
                      business.upgradeType(player, 3, id);
                    });
                  }
                });
                submenu.open();
              }
            });
            break;
          }

        case 14:
          {
            if (data.id != 179) {
              m.newItem({
                name: "Изменить стоимость аренды",
                onpress: () => {
                  _autosalon.autosalon.changeRentPriceMenu(player, id);
                }
              });
            }

            break;
          }
      }

      if (nameSetProductMenu) {
        m.newItem({
          name: nameSetProductMenu,
          type: "list",
          list: priceList,
          listSelected: data.price_product - 1,
          onpress: itm => {
            data.price_product = itm.listSelected + 1;
            player.notify(`~b~Цена на все товары равна: ~s~${data.price_product * 100}%`);
            data.save();
          }
        });
      }
    } else if (data.user_id == 0) {
      if (data.price < 999999999) {
        m.newItem({
          name: "~g~Приобрести",
          more: `Стоимость: ~g~$${data.price}`,
          onpress: () => {
            if (data.user_id == 0) business.buy(player, id);
            business.openMenu(player);
          }
        });
      }
    }

    if (data.price_card2 == 3 || data.price_card2 == 4) {
      m.newItem({
        name: "~y~Отмыть средства",
        onpress: () => {
          if (_user.user.isGosPD(player)) return player.notify(`~r~Сотрудники гос организаций под пристальным наблюдением`);

          if (!player.bankgrabmoney) {
            player.bankgrabmoney = 0;
            return player.notify(`~r~У вас нет сумки с деньгами`);
          }

          const sum = player.bankgrabmoney;

          _user.user.addCashMoney(player, sum / 2);

          player.bankgrabmoney = 0;
          player.notify('~g~Вы отмыли: ~s~$' + _methods.methods.numberFormat(sum));
          player.notify('~g~Ваша доля: ~s~$' + _methods.methods.numberFormat(sum / 2));
          player.notify('~g~Доля владельца бизнеса: ~s~$' + _methods.methods.numberFormat(sum / 2));
          business.addMoney(id, sum / 2, true);
          business.openMenu(player);

          _user.user.log(player, "ClearMoney", "Отмыл $" + sum + " через @business" + id);
        }
      });
    }

    m.newItem({
      name: "~r~Закрыть",
      onpress: () => {
        _menu.menu.close(player);
      }
    });
    m.open();
  },
  BusinessOfficePos: new mp.Vector3(-140.7121, -617.3683, 167.8204),
  BusinessMotorPos: new mp.Vector3(-138.6593, -592.6267, 166.0002),
  BusinessStreetPos: new mp.Vector3(-116.8427, -604.7336, 35.28074),
  BusinessGaragePos: new mp.Vector3(-155.6696, -577.3766, 31.42448),
  BusinessRoofPos: new mp.Vector3(-136.6686, -596.3055, 205.9157),
  BusinessMenuPos: new mp.Vector3(-139.2922, -631.5964, 167.8204),
  delete: (id, player) => {
    businessData.delete(id);

    _business.businessEntity.destroy({
      where: {
        id
      }
    });

    if (player) _user.user.log(player, "AdminJob", "удалил бизнес " + id);
  },
  load: item => {
    if (item.price_card2 == 4) {
      item.price_card2 = 3;
      item.bank += 2500000;
    }

    if (item.type != 10 && item.price_card2 == 3) {
      item.price_card2 = 0;
      item.bank += 500000;
    }

    businessData.set(item.id, item);
  },
  loadAll: function () {
    _methods.methods.debug('business.loadAll');

    _business.businessEntity.findAll().then(rows => {
      rows.forEach(function (item) {
        business.load(item);
      });

      _methods.methods.debug('All Business Loaded: ' + rows.length);
    });
  },
  exist: id => {
    return businessData.has(id);
  },
  save: id => {
    _methods.methods.debug('business.save', id);

    let data = business.getData(id);
    if (!data) return;

    if (data.bank < 0) {
      _methods.methods.saveLog('businessBugUse', `${data.bank} | ${id}`);

      data.bank = 0;
    }

    let priceCard2 = data.price_card2;
    if (priceCard2 >= 10) data.price_card2 = 0;
    const {
      name,
      name2,
      price,
      money_tax,
      score_tax,
      user_name,
      user_id,
      bank,
      type,
      price_product,
      price_card1,
      price_card2,
      tarif,
      interior,
      rp_logo,
      rp_main_img,
      rp_color
    } = data;

    _business.businessEntity.update({
      name,
      name2,
      price,
      money_tax,
      score_tax,
      user_name,
      user_id,
      bank,
      type,
      price_product,
      price_card1,
      price_card2,
      tarif,
      interior,
      rp_logo,
      rp_main_img,
      rp_color
    }, {
      where: {
        id
      },
      limit: 1
    });
  },
  get: function (id, key) {
    let data = business.getData(id);
    if (!data) return;
    return data[key];
  },
  getPrice: function (id) {
    let data = business.getData(id);
    if (!data) return 0;
    return data.price_product;
  },
  setPrice: function (id, value) {
    if (typeof value != "number") return;
    let data = business.getData(id);
    if (!data) return;
    data.price_product = value;
    data.save();
  },
  getName: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.name.replace(/\//gi, '').replace(/\\/gi, '');
  },
  getName2: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.name2;
  },
  getFractionType: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.price_card2;
  },
  isGang: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.price_card2 === 3;
  },
  isOpg: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.price_card2 === 4;
  },
  isChvk: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.price_card2 === 5;
  },
  getData: function (id) {
    return businessData.get(id);
  },
  getTarif: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.tarif;
  },
  getType: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.type;
  },
  isOffice: function (id) {
    let data = business.getData(id);
    if (!data) return null;
    return data.type == 10;
  },
  addMoney: function (id, money, ignoreLimit = false) {
    if (!ignoreLimit) {
      if (!businessLimit.has(id)) {
        businessLimit.set(id, 0);
      }

      businessLimit.set(id, businessLimit.get(id) + money);
      if (businessLimit.get(id) + money > BUSINESS_LIMIT_SUM) return;
    }

    business.setMoney(id, business.getMoney(id) + _methods.methods.parseInt(money));
  },
  removeMoney: function (id, money) {
    business.setMoney(id, business.getMoney(id) - _methods.methods.parseInt(money));
  },
  setMoney: (id, money) => {
    id = _methods.methods.parseInt(id);
    let data = business.getData(id);
    if (!data) return null;
    data.bank = money;
    business.save(id);
  },
  getMoney: function (id) {
    id = _methods.methods.parseInt(id);
    let data = business.getData(id);
    if (!data) return null;
    return data.bank;
  },
  updateOwnerInfo: function (bId, userId, userName) {
    let data = business.getData(bId);
    if (!data) return null;
    data.user_id = userId;
    data.user_name = userName;
    if (!userId) data.money_tax = 0;
    business.save(bId);
  },
  getOwnerInfo: bId => {
    let data = business.getData(bId);
    if (!data) return null;
    return {
      id: data.user_id,
      name: data.user_name
    };
  },
  upgradeType: function (player, type, bId) {
    _methods.methods.debug('business.upgradeType');

    let biztype = business.getType(bId);
    let data = business.getData(bId);
    if (biztype != 10) return player.notify("~r~Изменять статус бизнеса можно только в офисе");

    if (type == 0) {
      data.price_card2 = type;
      business.save(bId);
      player.notify('~b~Вы изменили статус бизнеса');
      business.openMenu(player);
      return;
    } else if (type == 3) {
      if (business.getMoney(bId) < 1000000) {
        player.notify('~r~На банке бизнеса необходимо иметь $1.000.0000');
        return;
      }

      let fractionId = _user.user.get(player, 'fraction_id2');

      _methods.methods.getCountFraction2Users(fractionId, function (count) {
        if (count < 20) {
          player.notify('~r~Необходимо иметь 20 и более участников в организации');
          return;
        }

        business.removeMoney(bId, 1000000);

        _coffer.coffer.addMoney(1000000);

        _methods.methods.updatePlayersFractionType(fractionId, type);

        data.price_card2 = type;
        player.notify('~b~Вы изменили статус бизнеса');
        business.save(bId);
        business.openMenu(player);
      });
    } else if (type == 4) {
      if (business.getMoney(bId) < 5000000) {
        player.notify('~r~На банке бизнеса необходимо иметь $5.000.000');
        return;
      }

      let fractionId = _user.user.get(player, 'fraction_id2');

      _methods.methods.getCountFraction2Users(fractionId, function (count) {
        if (count < 20) {
          player.notify('~r~Необходимо иметь 20 и более участников в организации');
          return;
        }

        business.removeMoney(bId, 5000000);

        _coffer.coffer.addMoney(5000000);

        _methods.methods.updatePlayersFractionType(fractionId, type);

        data.price_card2 = type;
        player.notify('~b~Вы изменили статус бизнеса');
        business.save(bId);
        business.openMenu(player);
      });
    } else if (type == 5) {
      player.notify('~b~Скоро будет доступно ;)');
      return;
    }
  },
  sell: function (player) {
    _methods.methods.debug('business.sell');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'business_id') == 0) {
      player.notify('~r~У Вас нет бизнеса');
      return;
    }

    let hInfo = business.getData(_user.user.get(player, 'business_id'));

    let nalog = _methods.methods.parseInt(hInfo.get('price') * (100 - _coffer.coffer.get('cofferNalog')) / 100);

    _user.user.set(player, 'business_id', 0);

    _user.user.set(player, 'fraction_id2', 0);

    _user.user.set(player, 'rank2', 0);

    hInfo.user_id = 0;
    hInfo.user_name = '';

    _coffer.coffer.removeMoney(nalog);

    business.save(hInfo.get('id'));

    _user.user.addMoney(player, nalog);

    _user.user.log(player, "PlayerBuy", `Продал бизнес @business${hInfo.get('id')} за $${nalog}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Продал бизнес ' + hInfo.get('name') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(nalog));

      player.notify('~g~Вы продали бизнес');
      player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog')}%\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

      _user.user.saveAccount(player);

      _user.user.updateClientCache(player);

      business.save(hInfo.get('id'));
    }, 1000);
  },
  buy: function (player, id) {
    _methods.methods.debug('business.buy');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'is_gos_blacklist')) {
      player.notify('~r~Вы состоите в чёрном списке');
      return;
    }

    let hInfo = business.getData(id);

    if (_user.user.get(player, 'business_id') > 0) {
      player.notify('~r~У Вас есть недвижимость');
      return false;
    }

    if (hInfo.get('price') > _user.user.getBankMoney(player)) {
      player.notify('~r~У Вас не хватает средств');
      return false;
    }

    if (hInfo.get('user_id') > 0) {
      player.notify('~r~Недвижимость уже куплена');
      return false;
    }

    if (_user.user.getLevel(player) < _level.levelAccess.buyBusiness) {
      player.notify('~r~Для покупки нужно иметь ' + _level.levelAccess.buyBusiness + " ур.");
      return false;
    }

    if (_user.user.get(player, 'biz_lic') === false) {
      player.notify('~r~У Вас нет лицензии на бизнес');
      player.notify('~r~Купить её можно у сотрудников правительства');
      return false;
    }

    if (_user.user.get(player, 'fraction_id') == 1 && _user.user.get(player, 'rank') > 7 && hInfo.get('type') != 10) {
      player.notify('~r~Запрещено покупать бизнесы сотрудникам правительства выше 7 ранга');
      player.notify('~r~Разрешено покупать только офис');
      return false;
    }

    if (_user.user.isMafia(player) && hInfo.get('type') == 10) {
      player.notify('~r~Запрещено покупать офис находясь в мафии');
      return false;
    }

    _coffer.coffer.addMoney(business.getMoney(hInfo.get('id')));

    business.setMoney(hInfo.get('id'), 0);

    _user.user.set(player, 'business_id', hInfo.get('id'));

    _user.user.set(player, 'fraction_id2', hInfo.get('id'));

    _user.user.set(player, 'rank2', 11);

    hInfo.user_id = _user.user.getId(player);
    hInfo.user_name = _user.user.getRpName(player);
    hInfo.money_tax = 0;
    business.save(hInfo.get('id'));
    business.save(hInfo.get('id'));

    _coffer.coffer.addMoney(hInfo.get('price'));

    _user.user.removeBankMoney(player, hInfo.get('price'));

    _user.user.log(player, "PlayerBuy", `Купил бизнес @business${hInfo.get('id')} за $${hInfo.get('price')}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Купил бизнес ' + hInfo.get('name') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(hInfo.get('price')));

      _user.user.saveAccount(player);

      player.notify('~g~Поздравляем с покупкой бизнеса!');

      _user.user.updateClientCache(player);

      business.save(id);
    }, 1000);
    return true;
  }
};
exports.business = business;
},{"./modules/methods":"qXSp","./user":"QE3B","./coffer":"sKID","./modules/entity/business":"uUTa","../util/level":"MpJF","./modules/menu":"Aiz7","./modules/entity/autosalonPercent":"qqav","../util/sharedData":"bNis","./business/autosalon":"JYAF"}],"EWWr":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getItemChestData = exports.EquipDataItems = void 0;
const EquipDataItems = [{
  icon: 'Item_40',
  model: "40",
  name: "Наручники",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_278',
  model: "278",
  name: "Спец. Аптечка",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_59',
  model: "59",
  name: "Фонарик",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_66',
  model: "66",
  name: "Дубинка",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_82',
  model: "82",
  name: "Электрошокер",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_78',
  model: "78",
  name: "Beretta 90Two",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_90',
  model: "90",
  name: "Benelli M3",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_103',
  model: "103",
  name: "MP5A3",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_110',
  model: "110",
  name: "HK-416",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_119',
  model: "119",
  name: "L115A3",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_146',
  model: "146",
  name: "Коробка патронов 12.7mm",
  ammo: 60,
  shiporder: true
}, {
  icon: 'Item_153',
  model: "153",
  name: "Коробка патронов 9mm (SMG)",
  ammo: 140,
  shiporder: true
}, {
  icon: 'Item_27',
  model: "27",
  name: "Коробка патронов 9mm (Пистолет)",
  ammo: 140,
  shiporder: true
}, {
  icon: 'Item_28',
  model: "28",
  name: "Коробка патронов 18.5mm",
  ammo: 120,
  shiporder: true
}, {
  icon: 'Item_30',
  model: "30",
  name: "Коробка патронов 5.56mm",
  ammo: 260,
  shiporder: true
}, {
  icon: 'Item_29',
  model: "29",
  name: "Коробка патронов 7.62mm",
  ammo: 130,
  shiporder: true
}, {
  icon: 'Item_252',
  model: "252",
  name: "Бронежилет",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_199',
  model: "199",
  name: "Полицейское ограждение",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_201',
  model: "201",
  name: "Полосатый конус",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_202',
  model: "202",
  name: "Красный конус",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_77',
  model: "77",
  name: "Taurus PT92",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_71',
  model: "71",
  name: "P99",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_58',
  model: "58",
  name: "Лом",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_69',
  model: "69",
  name: "Выкидной нож",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_64',
  model: "64",
  name: "Кастет",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_101',
  model: "101",
  name: "Mini Uzi",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_94',
  model: "94",
  name: "P-90",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_67',
  model: "67",
  name: "Разводной ключ",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_61',
  model: "61",
  name: "Молоток",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_106',
  model: "106",
  name: "AK-102",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_117',
  model: "117",
  name: "M14 EBR",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_108',
  model: "108",
  name: "QBZ-97",
  ammo: 1,
  shiporder: true
}, {
  icon: 'Item_112',
  model: "112",
  name: "AKS-47u",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_99',
  model: "99",
  name: "Intratec TEC-9",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_60',
  model: "60",
  name: "Клюшка для гольфа",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_54',
  model: "54",
  name: "Кавалерийский кинжал",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_63',
  model: "63",
  name: "Нож",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_87',
  model: "87",
  name: "Обрез",
  ammo: 1,
  shiporder: false
}, {
  icon: 'Item_145',
  model: "145",
  name: "Упаковка марихуаны 800г",
  ammo: 800,
  shiporder: false
}, {
  icon: 'Item_143',
  model: "143",
  name: "Упаковка марихуаны 200г",
  ammo: 200,
  shiporder: false
}, {
  icon: 'Item_156',
  model: "156",
  name: "Кокаин 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_176',
  model: "176",
  name: "Амфетамин 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_177',
  model: "177",
  name: "DMT 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_178',
  model: "178",
  name: "Мефедрон 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_179',
  model: "179",
  name: "Кетамин 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_180',
  model: "180",
  name: "LSD 50гр",
  ammo: 50,
  shiporder: false
}, {
  icon: 'Item_276',
  model: "276",
  name: "Коробка спец. отмычек",
  ammo: 30,
  shiporder: false
}, {
  icon: 'Item_262',
  model: "262",
  name: "C4 Мощная",
  ammo: 1,
  shiporder: false
}];
exports.EquipDataItems = EquipDataItems;

const getItemChestData = model => EquipDataItems.find(item => item.model == model);

exports.getItemChestData = getItemChestData;
},{}],"nuVl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.items = void 0;

var _inventory = require("../util/inventory");

let items = {
  isWeapon: _inventory.isWeapon,
  isAmmoBox: item_id => {
    let itm = items.getItemNameById(item_id);
    if (!itm) return false;
    return itm[0].toLowerCase().indexOf('коробка патронов') == 0;
  },
  itemList: _inventory.itemsUtil,
  itemExist: item_id => {
    return !!_inventory.itemsUtil[item_id];
  },
  canEquipById: function (id) {
    try {
      return items.itemList[id][2];
    } catch (_unused) {
      return false;
    }
  },
  getDefaultCount: _inventory.getDefaultCount,
  getItemNameById: function (id) {
    try {
      return items.itemList[id][0];
    } catch (_unused2) {
      return "UNKNOWN";
    }
  },
  getItemNameHashById: function (id) {
    try {
      return items.itemList[id][1];
    } catch (_unused3) {
      return "UNKNOWN";
    }
  },
  getItemHashById: function (id) {
    try {
      return items.itemList[id][3];
    } catch (_unused4) {
      return 1108364521;
    }
  },
  getItemWeightById: function (id) {
    try {
      return items.itemList[id][5];
    } catch (_unused5) {
      return -1;
    }
  },
  getItemWeightKgById: function (id) {
    try {
      let q = items.itemList[id][5];
      return Math.round(q / 1000.0);
    } catch (_unused6) {
      return -1;
    }
  },
  getItemAmountById: function (id) {
    try {
      return items.itemList[id][5];
    } catch (_unused7) {
      return -1;
    }
  }
};
exports.items = items;
},{"../util/inventory":"Jhu1"}],"YeMF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weapons = void 0;

var _methods = require("./modules/methods");

let weapons = {
  hashes: [["SniperRifle", 100416529], ["FireExtinguisher", 101631238], ["CompactGrenadeLauncher", 1980066947], ["Snowball", 126349499], ["VintagePistol", 137902532], ["CombatPDW", 171789620], ["HeavySniper_Mk2", 1429927647], ["HeavySniper", 205991906], ["SweeperShotgun", -1652067232], ["MicroSMG", 324215364], ["Wrench", 419712736], ["Pistol", 453432689], ["PumpShotgun", 487013001], ["APPistol", 584646201], ["Ball", 600439132], ["Molotov", 615608432], ["SMG", 736523883], ["StickyBomb", 741814745], ["PetrolCan", 883325847], ["StunGun", 911657153], ["AssaultRifle_Mk2", 961495388], ["HeavyShotgun", 984333226], ["Minigun", 1119849093], ["GolfClub", 1141786504], ["FlareGun", 1198879012], ["Flare", 1233104067], ["GrenadeLauncherSmoke", -275866417], ["Hammer", 1317494643], ["CombatPistol", 1593441988], ["Gusenberg", 1627465347], ["CompactRifle", 1649403952], ["HomingLauncher", 1672152130], ["Nightstick", 1737195953], ["Railgun", 1834241177], ["SawnOffShotgun", 2017895192], ["SMG_Mk2", 166524245], ["BullpupRifle", 2132975508], ["Firework", 2138347493], ["CombatMG", 2144741730], ["CarbineRifle", -2084633992], ["Crowbar", -2067956739], ["Flashlight", -1951375401], ["Dagger", -1834847097], ["Grenade", -1813897027], ["PoolCue", -1810795771], ["Bat", -1786099057], ["Pistol50", -1716589765], ["Knife", -1716189206], ["MG", -1660422300], ["BullpupShotgun", -1654528753], ["BZGas", -1600701090], ["Unarmed", -1569615261], ["GrenadeLauncher", -1568386805], ["NightVision", -1843655570], ["Musket", -1466123874], ["ProximityMine", 986082911], ["AdvancedRifle", -1357824103], ["RPG", -1312131151], ["PipeBomb", -1169823560], ["MiniSMG", -1121678507], ["SNSPistol", -1076751822], ["PistolMk2", -1075685676], ["AssaultRifle", -1074790547], ["SpecialCarbine", -1063057011], ["Revolver", -1045183535], ["MarksmanRifle", -952879014], ["BattleAxe", -853065399], ["HeavyPistol", -771403250], ["Knuckle", -656458692], ["MachinePistol", -619010992], ["CombatMG_Mk2", -439798208], ["MarksmanPistol", -598887786], ["Machete", -581044007], ["SwitchBlade", -538741184], ["AssaultShotgun", -494615257], ["DoubleBarrelShotgun", -275439685], ["AssaultSMG", -270015777], ["Hatchet", -102973651], ["Bottle", -102323637], ["CarbineRifle_Mk2", 1085370391], ["BullpupRifle_Mk2", -2066285827], ["Parachute", -196322845], ["SmokeGrenade", -37975472]],
  removeWeaponForHash: function (player, hash) {
    try {
      player.removeWeapon(hash);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  setWeaponAmmo: function (player, hash, amount) {
    try {
      player.setWeaponAmmo(hash, amount);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  giveWeapon: function (player, hash, ammo) {
    try {
      player.giveWeapon(hash, ammo);
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
};
exports.weapons = weapons;
},{"./modules/methods":"qXSp"}],"bqqA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inventoryEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let inventoryEntity = class inventoryEntity extends _sequelizeTypescript.Model {};
exports.inventoryEntity = inventoryEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], inventoryEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: -1
}), __metadata("design:type", Number)], inventoryEntity.prototype, "item_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "pos_x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "pos_y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "pos_z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "rot_x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "rot_y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "FLOAT",
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "rot_z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: -1
}), __metadata("design:type", Number)], inventoryEntity.prototype, "owner_type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "BIGINT(11)",
  defaultValue: -1
}), __metadata("design:type", Number)], inventoryEntity.prototype, "owner_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "count", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "prefix", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "number", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "key_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], inventoryEntity.prototype, "timestamp_update", void 0);

exports.inventoryEntity = inventoryEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_items"
})], inventoryEntity);
},{}],"Ogpy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehInfoEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

var _vehicleInfo = require("../vehicleInfo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let vehInfoEntity = class vehInfoEntity extends _sequelizeTypescript.Model {};
exports.vehInfoEntity = vehInfoEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], vehInfoEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(64),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], vehInfoEntity.prototype, "display_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(64),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", typeof (_a = typeof _vehicleInfo.vehClassName !== "undefined" && _vehicleInfo.vehClassName) === "function" ? _a : Object)], vehInfoEntity.prototype, "class_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 120
  }),
  allowNull: false
}), __metadata("design:type", Number)], vehInfoEntity.prototype, "hash", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], vehInfoEntity.prototype, "stock", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], vehInfoEntity.prototype, "fuel_full", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], vehInfoEntity.prototype, "fuel_min", void 0);

exports.vehInfoEntity = vehInfoEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_veh_info"
})], vehInfoEntity);
},{"../vehicleInfo":"f3Ap"}],"f3Ap":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicleInfo = void 0;

var _methods = require("./methods");

var _enums = require("../enums");

var _vehInfoEntity = require("./entity/vehInfoEntity");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let vehicleInfo = {
  find: model => {
    let hash = typeof model === "string" ? mp.joaat(model) : model;
    return _enums.enums.vehicleInfo.find(itm => itm.hash == hash || itm.hash == _methods.methods.hashToDb(hash) || typeof model == "string" && itm.display_name.toLowerCase() == model.toLowerCase());
  },
  findByVeh: vehicle => {
    return _enums.enums.vehicleInfo.find(itm => vehicle.modelhash == itm.hash || vehicle.model == itm.hash || vehicle.modelname == itm.display_name || itm.hash == mp.joaat(vehicle.modelname));
  },
  loadAll: () => {
    _methods.methods.debug('vehicleInfo.loadAll');

    _vehInfoEntity.vehInfoEntity.findAll().then(items => {
      items.forEach(function (item) {
        vehicleInfo.add(item);
      });

      _methods.methods.debug('Vehicle Info Loaded: ' + _enums.enums.vehicleInfo.length);
    });
  },
  add: item => {
    _enums.enums.vehicleInfo.push(item);

    mp.players.call('client:updateVehicleInfo', [[item]]);
  },
  remove: id => {
    return new Promise((resolve, reject) => {
      _vehInfoEntity.vehInfoEntity.destroy({
        where: {
          id
        }
      }).then(() => {
        _enums.enums.vehicleInfo.forEach((item, index) => {
          if (item.id == id) _enums.enums.vehicleInfo.splice(index, 1);
          mp.players.call('client:removeVehicleInfo', [item.id]);
        });

        resolve(true);
      });
    });
  },
  update: (values, id) => {
    return new Promise((resolve, reject) => {
      _vehInfoEntity.vehInfoEntity.update(values, {
        where: {
          id
        },
        limit: 1
      }).then(res => {
        let en = _enums.enums.vehicleInfo.find(v => v.id === id);

        if (en) {
          let ind = _enums.enums.vehicleInfo.findIndex(v => v.id === id);

          _enums.enums.vehicleInfo[ind] = _objectSpread(_objectSpread({}, en), values);
          mp.players.call('client:editVehicleInfo', [id, values]);
        }

        resolve();
      });
    });
  },
  create: (model, display_name, class_name, stock, fuel_full, fuel_min) => {
    _vehInfoEntity.vehInfoEntity.create({
      hash: mp.joaat(model),
      display_name,
      class_name,
      stock,
      fuel_full,
      fuel_min
    }).then(item => {
      const id = item.id;
      vehicleInfo.add({
        id,
        hash: mp.joaat(model),
        display_name,
        class_name,
        stock,
        fuel_full,
        fuel_min
      });
    }).catch(err => {
      console.error(err);
    });
  }
};
exports.vehicleInfo = vehicleInfo;
},{"./methods":"qXSp","../enums":"ZRYf","./entity/vehInfoEntity":"Ogpy"}],"oqg0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stocksEntity = exports.logStockEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let stocksEntity = class stocksEntity extends _sequelizeTypescript.Model {};
exports.stocksEntity = stocksEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false,
  defaultValue: null
}), __metadata("design:type", Number)], stocksEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], stocksEntity.prototype, "address", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(128),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], stocksEntity.prototype, "user_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "user_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1234
}), __metadata("design:type", Number)], stocksEntity.prototype, "pin1", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1234
}), __metadata("design:type", Number)], stocksEntity.prototype, "pin2", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1234
}), __metadata("design:type", Number)], stocksEntity.prototype, "pin3", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], stocksEntity.prototype, "empty_col", void 0);

exports.stocksEntity = stocksEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_stocks"
})], stocksEntity);
let logStockEntity = class logStockEntity extends _sequelizeTypescript.Model {};
exports.logStockEntity = logStockEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false,
  defaultValue: null
}), __metadata("design:type", Number)], logStockEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logStockEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logStockEntity.prototype, "do", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logStockEntity.prototype, "stock_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logStockEntity.prototype, "timestamp", void 0);

exports.logStockEntity = logStockEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_stock"
})], logStockEntity);
},{}],"MdNj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stock = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _user = require("./user");

var _coffer = require("./coffer");

var _stockEntity = require("./modules/entity/stockEntity");

let hPos = new Map();
let stock = {
  pcPos: new mp.Vector3(1088.792, -3101.406, -39.96338),
  stockPos: new mp.Vector3(1095.231, -3098.371, -39.99991),
  exitPos: new mp.Vector3(1104.422, -3099.484, -39.99992),
  loadAll: function () {
    _methods.methods.debug('stock.loadAll');

    _methods.methods.createStaticCheckpointV(stock.stockPos, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _methods.methods.createStaticCheckpointV(stock.exitPos, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _stockEntity.stocksEntity.findAll().then(rows => {
      rows.forEach(function (item) {
        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'id', item.id);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'address', item.address);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'price', item.price);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'user_id', item.user_id);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'pin1', item.pin1);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'pin2', item.pin2);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'pin3', item.pin3);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'x', item.x);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'y', item.y);

        _data.Container.Set(400000 + _methods.methods.parseInt(item.id), 'z', item.z);

        let pos = new mp.Vector3(parseFloat(item.x), parseFloat(item.y), parseFloat(item.z));

        _methods.methods.createStaticCheckpointV(pos, "Нажмите ~g~Е~s~ чтобы открыть меню");

        hPos.set(item.id, pos);
      });

      _methods.methods.debug('All Stock Loaded: ' + rows.length);
    });
  },
  getData: function (id) {
    return _data.Container.GetAll(400000 + _methods.methods.parseInt(id));
  },
  get: function (id, key) {
    return _data.Container.Get(400000 + _methods.methods.parseInt(id), key);
  },
  getAll: function () {
    return hPos;
  },
  updateOwnerInfo: function (id, userId, userName) {
    _methods.methods.debug('stock.updateOwnerInfo');

    id = _methods.methods.parseInt(id);
    userId = _methods.methods.parseInt(userId);

    _data.Container.Set(400000 + id, "user_name", userName);

    _data.Container.Set(400000 + id, "user_id", userId);

    if (userId == 0) {
      _stockEntity.stocksEntity.update({
        pin1: 0,
        pin2: 0,
        pin3: 0,
        money_tax: 0,
        user_name: userName,
        user_id: userId
      }, {
        where: {
          id: id
        }
      });

      _data.Container.Set(400000 + id, "pin1", 0);

      _data.Container.Set(400000 + id, "pin2", 0);

      _data.Container.Set(400000 + id, "pin3", 0);
    } else {
      _stockEntity.stocksEntity.update({
        money_tax: 0,
        user_name: userName,
        user_id: userId
      }, {
        where: {
          id: id
        }
      });
    }
  },
  updatePin1: function (id, pin) {
    _methods.methods.debug('stock.updatePin1');

    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);

    _data.Container.Set(400000 + id, 'pin1', pin);

    _stockEntity.stocksEntity.update({
      pin1: pin
    }, {
      where: {
        id: id
      }
    });
  },
  updatePin2: function (id, pin) {
    _methods.methods.debug('stock.updatePin2');

    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);

    _data.Container.Set(400000 + id, 'pin2', pin);

    _stockEntity.stocksEntity.update({
      pin2: pin
    }, {
      where: {
        id: id
      }
    });
  },
  getPin1: function (id) {
    return _data.Container.Get(400000 + id, 'pin1');
  },
  getPin2: function (id) {
    return _data.Container.Get(400000 + id, 'pin2');
  },
  getPin3: function (id) {
    return _data.Container.Get(400000 + id, 'pin3');
  },
  updatePin3: function (id, pin) {
    _methods.methods.debug('stock.updatePin3');

    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);

    _data.Container.Set(400000 + id, 'pin3', pin);

    _stockEntity.stocksEntity.update({
      pin3: pin
    }, {
      where: {
        id: id
      }
    });
  },
  sell: function (player) {
    _methods.methods.debug('stock.sell');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'stock_id') == 0) {
      player.notify('~r~У Вас нет недвижимости');
      return;
    }

    let hInfo = stock.getData(_user.user.get(player, 'stock_id'));

    let nalog = _methods.methods.parseInt(hInfo.get('price') * (100 - _coffer.coffer.get('cofferNalog')) / 100);

    _user.user.set(player, 'stock_id', 0);

    stock.updateOwnerInfo(hInfo.get('id'), 0, '');

    _coffer.coffer.removeMoney(nalog);

    _user.user.addMoney(player, nalog);

    _user.user.log(player, "PlayerBuy", `Продал склад ${hInfo.get('address')} @stock${hInfo.get('id')} за $${nalog}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Продал склад ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(nalog));

      player.notify('~g~Вы продали недвижимость');
      player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog')}%\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

      _user.user.saveAccount(player);
    }, 1000);
  },
  buy: function (player, id) {
    _methods.methods.debug('stock.buy');

    if (!_user.user.isLogin(player)) return;
    let hInfo = stock.getData(id);

    if (_user.user.get(player, 'stock_id') > 0) {
      player.notify('~r~У Вас есть недвижимость');
      return false;
    }

    if (hInfo.get('price') > _user.user.getMoney(player)) {
      player.notify('~r~У Вас не хватает средств');
      return false;
    }

    if (hInfo.get('user_id') > 0) {
      player.notify('~r~Недвижимость уже куплена');
      return false;
    }

    _user.user.set(player, 'stock_id', id);

    stock.updateOwnerInfo(id, _user.user.get(player, 'id'), _user.user.get(player, 'rp_name'));

    _coffer.coffer.addMoney(hInfo.get('price'));

    _user.user.removeMoney(player, hInfo.get('price'));

    _user.user.log(player, "PlayerBuy", `Купил склад ${hInfo.get('address')} @stock${hInfo.get('id')} за $${hInfo.get('price')}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Купил склад ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(hInfo.get('price')));

      _user.user.saveAccount(player);

      player.notify('~g~Поздравляем с покупкой недвижимости!');
    }, 500);
    return true;
  },
  addLog: function (name, text, stockId) {
    _methods.methods.debug('stock.addLog');

    _stockEntity.logStockEntity.create({
      name,
      do: text,
      stock_id: stockId,
      timestamp: _methods.methods.getTimeStamp()
    });
  },
  getLog: function (stockId, limit = 10) {
    return new Promise((resolve, reject) => {
      _methods.methods.debug('stock.getLogs', stockId);

      _stockEntity.logStockEntity.findAll({
        where: {
          stock_id: stockId
        },
        order: [["id", "DESC"]],
        limit
      }).then(data => {
        resolve(data);
      });
    });
  }
};
exports.stock = stock;
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./user":"QE3B","./coffer":"sKID","./modules/entity/stockEntity":"oqg0"}],"bsac":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchTaxiIdSet = dispatchTaxiIdSet;
exports.dispatcher = void 0;

var _user = require("../user");

var _weather = require("./weather");

var _methods = require("../modules/methods");

var _string = require("../../util/string");

let generateDispatchId = 1;
let countTaxi = 0;
let dispatchTaxiId = 0;

function dispatchTaxiIdSet() {
  dispatchTaxiId++;
  const ids = dispatchTaxiId;
  return ids;
}

setTimeout(() => {
  for (let i = 0; i < 100; i++) dispatcher.data.push([]);

  mp.events.addRemoteCounted('server:dispatcher:callFraction', (player, fractions, title, desc) => {
    dispatcher.sendPos(title, desc, player.position, true, player, JSON.parse(fractions));
  });
}, 1000);
let dispatcher = {
  data: [],
  sendPosImage: function (title, desc, author, icon, pos, fraction) {
    generateDispatchId++;
    const id = generateDispatchId;

    let time = _methods.methods.getTimeStamp();

    if (fraction) {
      if (typeof fraction == "number") fraction = [fraction];
      fraction.map(fraction => {
        dispatcher.data[fraction].push({
          id,
          title: (0, _string.gtaStrToHtml)(title),
          desc: (0, _string.gtaStrToHtml)(desc),
          posX: pos.x,
          posY: pos.y,
          withCoord: true,
          when: time
        });

        _methods.methods.notifyWithPictureToFraction(title, author, desc, icon, fraction);
      });
      return;
    }
  },
  sendPos: function (title, desc, pos, withCoord = true, author, fraction) {
    generateDispatchId++;
    const id = generateDispatchId;

    let time = _methods.methods.digitFormat(_weather.weather.getHour()) + ':' + _methods.methods.digitFormat(_weather.weather.getMin());

    let times = _methods.methods.getTimeStamp();

    if (fraction) {
      if (typeof fraction == "number") fraction = [fraction];
      fraction.map(fraction => {
        dispatcher.data[fraction].push({
          id,
          title: (0, _string.gtaStrToHtml)(title),
          desc: (0, _string.gtaStrToHtml)(desc),
          posX: pos.x,
          posY: pos.y,
          withCoord,
          when: times,
          authorid: author ? _user.user.getId(author) : null
        });
        mp.players.forEach(function (player) {
          if (_user.user.getPlayerFraction(player) == fraction) player.call("client:dispatcher:addDispatcherList", [title, desc, time, pos.x, pos.y, pos.z, withCoord]);
        });
      });
      return;
    }

    dispatcher.data.map(item => {
      item.push({
        id,
        title: (0, _string.gtaStrToHtml)(title),
        desc: (0, _string.gtaStrToHtml)(desc),
        posX: pos.x,
        posY: pos.y,
        withCoord,
        when: times,
        authorid: author ? _user.user.getId(author) : null
      });
    });
    mp.players.forEach(function (player) {
      if (title == `[EMS] Код 3` && desc == `Человек без сознания` && !_user.user.isEms(player)) {
        return;
      }

      if (_user.user.isFib(player) || _user.user.isEms(player) || _user.user.isSapd(player) || _user.user.isSheriff(player) || _user.user.isPrison(player)) player.call("client:dispatcher:addDispatcherList", [title, desc, time, pos.x, pos.y, pos.z, withCoord]);
    });
  },
  sendLocalPos: function (title, desc, pos, fractionId, withCoord = true) {
    _methods.methods.debug('dispatcher.sendLocalPos');

    generateDispatchId++;
    const id = generateDispatchId;
    dispatcher.data[fractionId].push({
      id,
      title: (0, _string.gtaStrToHtml)(title),
      desc: (0, _string.gtaStrToHtml)(desc),
      posX: pos.x,
      posY: pos.y,
      withCoord,
      when: _methods.methods.getTimeStamp()
    });

    let time = _methods.methods.digitFormat(_weather.weather.getHour()) + ':' + _methods.methods.digitFormat(_weather.weather.getMin());

    mp.players.forEach(function (player) {
      if (_user.user.get(player, 'fraction_id') == fractionId) player.call("client:dispatcher:addDispatcherList", [title, desc, time, pos.x, pos.y, pos.z, withCoord]);
    });
  },
  sendTaxiPos: function (title, desc, pos, taxiType = 'taxi1') {
    dispatchTaxiId++;
    const ids = dispatchTaxiId;

    _methods.methods.debug('dispatcher.sendTaxiPos');

    let time = _methods.methods.digitFormat(_weather.weather.getHour()) + ':' + _methods.methods.digitFormat(_weather.weather.getMin());

    mp.players.forEach(function (player) {
      if (_methods.methods.distanceToPos(player.position, pos) < 1000) {
        if (_user.user.get(player, 'job') == taxiType) player.call("client:dispatcher:addDispatcherTaxiList", [title, desc, time, pos.x, pos.y, pos.z, ids]);
      }
    });
  },
  sendTaxiPosForPlayer: function (player, title, desc, price, pos, ids) {
    _methods.methods.debug('dispatcher.sendTaxiPos');

    let time = _methods.methods.digitFormat(_weather.weather.getHour()) + ':' + _methods.methods.digitFormat(_weather.weather.getMin());

    player.call("client:dispatcher:addDispatcherTaxiList", [countTaxi++, title, desc, time, price, pos.x, pos.y, pos.z, ids]);
  }
};
exports.dispatcher = dispatcher;
},{"../user":"QE3B","./weather":"uehX","../modules/methods":"qXSp","../../util/string":"Qkcg"}],"R7vB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cofferEntity = exports.cofferDonateEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let cofferDonateEntity = class cofferDonateEntity extends _sequelizeTypescript.Model {};
exports.cofferDonateEntity = cofferDonateEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], cofferDonateEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false
}), __metadata("design:type", String)], cofferDonateEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], cofferDonateEntity.prototype, "sum", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.TIME,
  allowNull: false
}), __metadata("design:type", String)], cofferDonateEntity.prototype, "timestamp", void 0);

exports.cofferDonateEntity = cofferDonateEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_coffer_donate"
})], cofferDonateEntity);
let cofferEntity = class cofferEntity extends _sequelizeTypescript.Model {};
exports.cofferEntity = cofferEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], cofferEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], cofferEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1
}), __metadata("design:type", Number)], cofferEntity.prototype, "nalog", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 5
}), __metadata("design:type", Number)], cofferEntity.prototype, "nalog_bizz", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 100
}), __metadata("design:type", Number)], cofferEntity.prototype, "moneyOld", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 20
}), __metadata("design:type", Number)], cofferEntity.prototype, "moneyBomj", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 50000
}), __metadata("design:type", Number)], cofferEntity.prototype, "moneyLimit", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 100000
}), __metadata("design:type", Number)], cofferEntity.prototype, "money", void 0);

exports.cofferEntity = cofferEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_coffers"
})], cofferEntity);
},{}],"wgLG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpNewsEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let rpNewsEntity = class rpNewsEntity extends _sequelizeTypescript.Model {};
exports.rpNewsEntity = rpNewsEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], rpNewsEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "title", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.TEXT(),
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "text", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(128),
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "author_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], rpNewsEntity.prototype, "author_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], rpNewsEntity.prototype, "fraction", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(2048),
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "img", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.DATE,
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "date", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.TIME,
  allowNull: false
}), __metadata("design:type", String)], rpNewsEntity.prototype, "time", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], rpNewsEntity.prototype, "timestamp", void 0);

exports.rpNewsEntity = rpNewsEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_rp_news"
})], rpNewsEntity);
},{}],"K5GH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apartmentEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let apartmentEntity = class apartmentEntity extends _sequelizeTypescript.Model {};
exports.apartmentEntity = apartmentEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], apartmentEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "user_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false
}), __metadata("design:type", String)], apartmentEntity.prototype, "user_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1
}), __metadata("design:type", Number)], apartmentEntity.prototype, "build_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 1
}), __metadata("design:type", Number)], apartmentEntity.prototype, "floor", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 4
}), __metadata("design:type", Number)], apartmentEntity.prototype, "interior_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.TINYINT(1),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "is_exterior", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "pin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "balcony_x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "balcony_y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], apartmentEntity.prototype, "balcony_z", void 0);

exports.apartmentEntity = apartmentEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_apartment"
})], apartmentEntity);
},{}],"qIZj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apartments = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _user = require("./user");

var _coffer = require("./coffer");

var _enums = require("./enums");

var _apartmentEntity = require("./modules/entity/apartmentEntity");

let apartments = {
  loadAll: function () {
    _methods.methods.debug('apartments.loadAll');

    _apartmentEntity.apartmentEntity.findAll().then(rows => {
      rows.forEach(function (item) {
        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'id', item.id);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'user_id', item.user_id);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'price', item.price);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'build_id', item.build_id);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'floor', item.floor);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'interior_id', item.interior_id);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'pin', item.pin);

        _data.Container.Set(-100000 + _methods.methods.parseInt(item.id), 'is_exterior', item.is_exterior);
      });

      _methods.methods.debug('All apartments Loaded: ' + rows.length);
    });
  },
  getApartData: function (id) {
    _methods.methods.debug('apartments.getApartData');

    return _data.Container.GetAll(-100000 + _methods.methods.parseInt(id));
  },
  get: function (id, key) {
    return _data.Container.Get(-100000 + _methods.methods.parseInt(id), key);
  },

  getPin(id) {
    return _data.Container.Get(-100000 + _methods.methods.parseInt(id), 'pin');
  },

  getInteriorCoords: function (id, isEx) {
    _methods.methods.debug('apartments.getInteriorCoords');

    return isEx ? new mp.Vector3(_enums.enums.apartIntData[id][0], _enums.enums.apartIntData[id][1], _enums.enums.apartIntData[id][2]) : new mp.Vector3(_enums.enums.houseIntData[id][0], _enums.enums.houseIntData[id][1], _enums.enums.houseIntData[id][2]);
  },
  getOwnerId: id => {
    return _data.Container.Get(-100000 + id, "user_id");
  },
  updateOwnerInfo: function (id, userId, userName) {
    _methods.methods.debug('apartments.updateOwnerInfo');

    id = _methods.methods.parseInt(id);
    userId = _methods.methods.parseInt(userId);

    _data.Container.Set(-100000 + id, "user_name", userName);

    _data.Container.Set(-100000 + id, "user_id", userId);

    if (userId == 0) {
      _apartmentEntity.apartmentEntity.update({
        pin: 0,
        money_tax: 0,
        user_name: userName,
        user_id: userId
      }, {
        where: {
          id: id
        }
      });

      _data.Container.Set(-100000 + id, "pin", 0);
    } else {
      _apartmentEntity.apartmentEntity.update({
        money_tax: 0,
        user_name: userName,
        user_id: userId
      }, {
        where: {
          id: id
        }
      });
    }
  },
  updatePin: function (id, pin) {
    _methods.methods.debug('apartments.updatePin');

    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);

    _data.Container.Set(-100000 + id, 'pin', pin);

    _apartmentEntity.apartmentEntity.update({
      pin: pin
    }, {
      where: {
        id: id
      }
    });
  },
  sell: function (player) {
    _methods.methods.debug('apartments.sell');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'apartment_id') == 0) {
      player.notify('~r~У Вас нет недвижимости');
      return;
    }

    let hInfo = apartments.getApartData(_user.user.get(player, 'apartment_id'));

    let nalog = _methods.methods.parseInt(hInfo.get('price') * (100 - _coffer.coffer.get('cofferNalog')) / 100);

    _user.user.set(player, 'apartment_id', 0);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, "reg_time", 28);

      _user.user.set(player, "reg_status", 1);
    }

    apartments.updateOwnerInfo(hInfo.get('id'), 0, '');

    _coffer.coffer.removeMoney(nalog);

    _user.user.addMoney(player, nalog);

    _user.user.log(player, "PlayerSell", `Продал апартаменты ${hInfo.get('address')} @apartment${hInfo.get('id')} за $${nalog}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Продал апартаменты №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(nalog));

      player.notify('~g~Вы продали недвижимость');
      player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog')}%\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

      _user.user.saveAccount(player);

      _user.user.updateClientCache(player);
    }, 1000);
  },
  buy: function (player, id) {
    _methods.methods.debug('apartments.buy');

    if (!_user.user.isLogin(player)) return;
    let hInfo = apartments.getApartData(id);

    if (_user.user.get(player, 'apartment_id') > 0) {
      player.notify('~r~У Вас есть недвижимость');
      return false;
    }

    if (hInfo.get('price') > _user.user.getMoney(player)) {
      player.notify('~r~У Вас не хватает средств');
      return false;
    }

    if (hInfo.get('user_id') > 0) {
      player.notify('~r~Недвижимость уже куплена');
      return false;
    }

    _user.user.set(player, 'apartment_id', id);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, 'reg_time', 372);

      _user.user.set(player, 'reg_status', 2);
    }

    apartments.updateOwnerInfo(id, _user.user.get(player, 'id'), _user.user.get(player, 'rp_name'));

    _coffer.coffer.addMoney(hInfo.get('price'));

    _user.user.removeMoney(player, hInfo.get('price'));

    _user.user.log(player, "PlayerBuy", `Купил апартаменты ${hInfo.get('address')} @apartment${hInfo.get('id')} за $${hInfo.get('price')}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Купил апартаменты №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(hInfo.get('price')));

      _user.user.saveAccount(player);

      player.notify('~g~Поздравляем с покупкой недвижимости!');

      _user.user.updateClientCache(player);
    }, 1000);
    return true;
  }
};
exports.apartments = apartments;
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./user":"QE3B","./coffer":"sKID","./enums":"ZRYf","./modules/entity/apartmentEntity":"K5GH"}],"JZQ2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.condoEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let condoEntity = class condoEntity extends _sequelizeTypescript.Model {};
exports.condoEntity = condoEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], condoEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(512),
  allowNull: false
}), __metadata("design:type", String)], condoEntity.prototype, "address", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "money_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "score_tax", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false
}), __metadata("design:type", String)], condoEntity.prototype, "name_user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "id_user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "int_x", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "int_y", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.FLOAT,
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "int_z", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "pin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], condoEntity.prototype, "empty_col", void 0);

exports.condoEntity = condoEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_condo"
})], condoEntity);
},{}],"YoDO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.condo = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _user = require("./user");

var _coffer = require("./coffer");

var _condoEntity = require("./modules/entity/condoEntity");

let hBlips = new Map();
let hList = new Map();
let condo = {
  loadAll: function () {
    _methods.methods.debug('condo.loadAll');

    _condoEntity.condoEntity.findAll().then(rows => {
      rows.forEach(function (item) {
        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'id', item.id);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'address', item.address);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'price', item.price);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'id_user', item.id_user);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'name_user', item.name_user);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'pin', item.pin);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'x', item.x);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'y', item.y);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'z', item.z);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'int_x', item.int_x);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'int_y', item.int_y);

        _data.Container.Set(300000 + _methods.methods.parseInt(item.id), 'int_z', item.int_z);

        let pos = new mp.Vector3(parseFloat(item.x), parseFloat(item.y), parseFloat(item.z));

        if (item.id_user == 0) {
          let hBlip = mp.blips.new(40, pos, {
            color: 0,
            scale: 0.4,
            drawDistance: 100,
            shortRange: true,
            dimension: -1
          });
          hBlips.set(item.id, hBlip);
        }

        _methods.methods.createStaticCheckpointV(pos, "Нажмите ~g~Е~s~ чтобы открыть меню");

        hList.set(item.id, {
          position: pos
        });
      });

      _methods.methods.debug('All Houses Loaded: ' + rows.length);
    });
  },
  loadBlip: function (id) {
    _methods.methods.debug('condo.loadBlip');

    _condoEntity.condoEntity.findAll({
      where: {
        id
      }
    }).then(rows => {
      rows.forEach(function (item) {
        let pos = new mp.Vector3(parseFloat(item.x), parseFloat(item.y), parseFloat(item.z));
        let hBlip = mp.blips.new(40, pos, {
          color: 0,
          scale: 0.4,
          drawDistance: 100,
          shortRange: true,
          dimension: -1
        });
        hBlips.set(item.id, hBlip);
      });
    });
  },
  getHouseData: function (id) {
    return _data.Container.GetAll(300000 + _methods.methods.parseInt(id));
  },
  get: function (id, key) {
    return _data.Container.Get(300000 + _methods.methods.parseInt(id), key);
  },
  getPin: function (id) {
    return condo.get(id, 'pin');
  },
  getAllHouses: function () {
    return hList;
  },
  getOwnerId: id => {
    return _data.Container.Get(300000 + id, "id_user");
  },
  updateOwnerInfo: function (id, userId, userName) {
    _methods.methods.debug('condo.updateOwnerInfo');

    id = _methods.methods.parseInt(id);
    userId = _methods.methods.parseInt(userId);
    if (hBlips.has(id)) hBlips.get(id).alpha = userId > 0 ? 0 : 255;
    if (userId == 0) condo.loadBlip(id);

    _data.Container.Set(300000 + id, "name_user", userName);

    _data.Container.Set(300000 + id, "id_user", userId);

    if (userId == 0) {
      _condoEntity.condoEntity.update({
        name_user: userName,
        id_user: userId,
        money_tax: 0,
        pin: 0
      }, {
        where: {
          id: id
        }
      });
    } else {
      _condoEntity.condoEntity.update({
        name_user: userName,
        id_user: userId,
        money_tax: 0
      }, {
        where: {
          id: id
        }
      });
    }
  },
  updatePin: function (id, pin) {
    _methods.methods.debug('condo.updatePin');

    id = _methods.methods.parseInt(id);
    pin = _methods.methods.parseInt(pin);

    _data.Container.Set(300000 + id, 'pin', pin);

    _condoEntity.condoEntity.update({
      pin: pin
    }, {
      where: {
        id: id
      }
    });
  },
  sell: function (player) {
    _methods.methods.debug('condo.sell');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'condo_id') == 0) {
      player.notify('~r~У Вас нет недвижимости');
      return;
    }

    let hInfo = condo.getHouseData(_user.user.get(player, 'condo_id'));

    let nalog = _methods.methods.parseInt(hInfo.get('price') * (100 - _coffer.coffer.get('cofferNalog')) / 100);

    _user.user.set(player, 'condo_id', 0);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, "reg_time", 28);

      _user.user.set(player, "reg_status", 1);
    }

    condo.updateOwnerInfo(hInfo.get('id'), 0, '');

    _coffer.coffer.removeMoney(nalog);

    _user.user.addMoney(player, nalog);

    _user.user.log(player, "PlayerBuy", `Продал квартиру ${hInfo.get('address')} @condo${hInfo.get('id')} за $${nalog}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Продал квартиру ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: $' + _methods.methods.numberFormat(nalog));

      player.notify('~g~Вы продали недвижимость');
      player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog')}%\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

      _user.user.saveAccount(player);
    }, 1000);
  },
  buy: function (player, id) {
    _methods.methods.debug('condo.buy');

    if (!_user.user.isLogin(player)) return;
    let hInfo = condo.getHouseData(id);

    if (_user.user.get(player, 'condo_id') > 0) {
      player.notify('~r~У Вас есть недвижимость');
      return false;
    }

    if (hInfo.get('price') > _user.user.getMoney(player)) {
      player.notify('~r~У Вас не хватает средств');
      return false;
    }

    if (hInfo.get('id_user') > 0) {
      player.notify('~r~Недвижимость уже куплена');
      return false;
    }

    _user.user.set(player, 'condo_id', id);

    if (_user.user.get(player, 'reg_status') != 3) {
      _user.user.set(player, 'reg_time', 372);

      _user.user.set(player, 'reg_status', 2);
    }

    condo.updateOwnerInfo(id, _user.user.get(player, 'id'), _user.user.get(player, 'rp_name'));

    _coffer.coffer.addMoney(hInfo.get('price'));

    _user.user.removeMoney(player, hInfo.get('price'));

    _user.user.log(player, "PlayerBuy", `Купил квартиру ${hInfo.get('address')} @condo${hInfo.get('id')} за $${hInfo.get('price')}`);

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.addHistory(player, 3, 'Купил квартиру ' + hInfo.get('address') + ' №' + hInfo.get('id') + '. Цена: ' + _methods.methods.numberFormat(hInfo.get('price')));

      _user.user.saveAccount(player);

      player.notify('~g~Поздравляем с покупкой недвижимости!');
    }, 500);
    return true;
  }
};
exports.condo = condo;
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./user":"QE3B","./coffer":"sKID","./modules/entity/condoEntity":"JZQ2"}],"nT9M":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mafiaTerritoriesData = exports.mafiaCarsConf = exports.containerMafiaTerritoryId = void 0;
const mafiaCarsConf = [{
  rank: 2,
  name: "Марихуаной",
  cost: 5000,
  model: "Pony2",
  type: "all",
  items: [["145", 1], ["143", 1]]
}, {
  rank: 7,
  name: "Тяжёлыми наркотиками",
  cost: 21000,
  model: "Pony2",
  type: "gang",
  items: [["156", 1], ["176", 1], ["177", 1], ["178", 1], ["179", 1], ["180", 1]]
}, {
  rank: 4,
  name: "Патронами",
  cost: 25600,
  model: "Surfer",
  type: "all",
  items: [["30", 10], ["29", 10], ["28", 10], ["153", 20], ["27", 20], ["146", 4]]
}, {
  rank: 4,
  name: "Лёгким оружием",
  cost: 16300,
  model: "Burrito3",
  type: "all",
  items: [["77", 10], ["71", 5], ["101", 4], ["63", 2], ["153", 5], ["27", 10]]
}, {
  rank: 5,
  name: "Средним оружием",
  cost: 41200,
  model: "Burrito3",
  type: "all",
  items: [["101", 10], ["94", 5], ["87", 2], ["153", 15], ["28", 5]]
}, {
  rank: 7,
  name: "Тяжелым оружием",
  cost: 78600,
  model: "Mule",
  type: "mafia",
  items: [["106", 6], ["117", 1], ["108", 4], ["112", 4], ["30", 15], ["146", 2]]
}, {
  rank: 4,
  name: "Специальным содержимым",
  cost: 10000,
  model: "Regina",
  type: "all",
  items: [["276", 1], ["40", 2]]
}, {
  rank: 8,
  name: "С4",
  cost: 80000,
  model: "Mule",
  type: "mafia",
  items: [["262", 5]]
}];
exports.mafiaCarsConf = mafiaCarsConf;
const containerMafiaTerritoryId = 500000;
exports.containerMafiaTerritoryId = containerMafiaTerritoryId;
const mafiaTerritoriesData = [{
  name: "Элизиан Айленд",
  desc: "Территория поставок оружия",
  pos: [34.23244857788086, -2711.05078125],
  cost: 350000
}, {
  name: "Ла Пуэрта",
  desc: "Территория поставок отмычек и патрон",
  pos: [-552.1932983398438, -1656.835205078125],
  cost: 300000
}, {
  name: "Грейпсид Аэропорт",
  desc: "Территория поставок наркотиков",
  pos: [2106.784423828125, 4790.55029296875],
  cost: 250000
}];
exports.mafiaTerritoriesData = mafiaTerritoriesData;
},{}],"Fdqv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tablet = void 0;

var _user = require("../user");

var _dispatcher = require("./dispatcher");

var _methods = require("../modules/methods");

var _chat = require("../modules/chat");

var _user2 = require("../modules/entity/user");

var _inventory = require("../inventory");

var _fractions = require("../../util/fractions");

var _coffer = require("../coffer");

var _coffer2 = require("../modules/entity/coffer");

var _rpNews = require("../modules/entity/rpNews");

var _vehicles = require("../vehicles");

var _stock = require("../stock");

var _houses = require("../houses");

var _menu = require("../modules/menu");

var _apartments = require("../apartments");

var _condo = require("../condo");

var _mafiaData = require("../../util/mafiaData");

var _sharedData = require("../../util/sharedData");

var _enums = require("../enums");

var _methods2 = require("../../util/methods");

var _data = require("../modules/data");

var _business = require("../business");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const priceDeliverVehMultipler = 3;
const healDocsCost = 2000;
let givedLic = new Map();
let marfiaCarsCDMap = new Map();
setTimeout(() => {
  mp.events.register('tablet:mafiacars:order', (player, id) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.isMafia(player) && !_user.user.isGang(player)) return;
    let order = _mafiaData.mafiaCarsConf[id];
    if (!order) return player.notify('~r~Ошибка заказа');

    if (order.type != "all") {
      if (order.type == "gang" && !_user.user.isGang(player)) return player.notify('~r~Вы не можете заказывать данный фургон');
      if (order.type == "mafia" && !_user.user.isMafia(player)) return player.notify('~r~Вы не можете заказывать данный фургон');
    }

    const idmp = `${_user.user.getPlayerFraction(player)}_${id}`;
    if (marfiaCarsCDMap.has(idmp)) return player.notify('~r~Данный фургон уже заказывали недавно. Подождите перед следующим заказом');
    if (_user.user.getPlayerFractionRank(player) < order.rank) return player.notify("~r~Доступно с " + order.rank + " ранга");
    if (_user.user.getBankMoney(player) < order.cost) return player.notify('~r~У вас недостаточно средств на карте для оплаты данного фургона');

    _user.user.removeBankMoney(player, order.cost);

    let posdata = (0, _methods2.randomArrayEl)(_enums.enums.mafiaVehPos);
    let pos = new mp.Vector3(posdata[0], posdata[1], posdata[2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~ТС в течении минуты будет доставлен на точку\n~b~Номер: ~s~' + numberPlate + "\n~b~Модель: ~s~" + order.model);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(async function () {
      let veh = _vehicles.vehicles.spawnCar(pos, posdata[3], order.model, numberPlate);

      let chest = await _inventory.inventory.createItem(_inventory.inventory.types.BagTransfer, 1, 8, _methods.methods.convertNumberToHash(veh.numberPlate), 1);
      order.items.map(([itemidstring, count]) => {
        let itemid = _methods.methods.parseInt(itemidstring);

        _inventory.inventory.createManyItem(itemid, 0, _inventory.inventory.types.BagTransfer, chest.id, count);
      });
      setTimeout(function () {
        if (mp.players.exists(player)) player.notify(`~r~Копы разнюхали инфу про заказ, торопитесь`);

        _dispatcher.dispatcher.sendPos('Код 2', `Поступила информации о подозрительном фургоне.\nМарка: ~y~${order.model}~s~\nНомера: ~y~${numberPlate}`, pos, true);
      }, 120000);
    }, 60000);
    marfiaCarsCDMap.set(idmp, true);
    setTimeout(() => {
      marfiaCarsCDMap.delete(idmp);
    }, id == 6 ? _sharedData.mafiaCarsUnlockCdtimer : _sharedData.mafiaCarsCdtimer);
  });
  mp.events.register('server:user:healDocs', (player, id) => {
    let remotePlayer = _user.user.getPlayerById(id);

    if (!remotePlayer) return player.notify(`~r~Пациент не обнаружен`);
    if (player.dist(remotePlayer.position) > 5) return player.notify("~r~Слишком далеко");
    if (_user.user.get(remotePlayer, "med_time") <= 0) return player.notify("~r~Пациент не нуждается в выписке");
    let healCost = _user.user.get(remotePlayer, "med_lic") ? healDocsCost / 2 : healDocsCost;
    if (_user.user.getLevel(remotePlayer) == 1) healCost = 300;
    player.notify('~g~Запрос отправлен');

    _user.user.accept(remotePlayer, "Пройти лечение за $" + healCost).then(status => {
      if (!mp.players.exists(player)) return;
      if (!mp.players.exists(remotePlayer)) return;

      if (!status) {
        player.notify('~r~Отказ');
        remotePlayer.notify('~r~Отказ');
        return;
      }

      if (_user.user.getCashMoney(remotePlayer) < healCost) return remotePlayer.notify(`~r~У вас недостаточно средств для оплаты`);

      _user.user.fullHeal(remotePlayer);

      _user.user.removeCashMoney(remotePlayer, healCost);

      _user.user.addCashMoney(player, healCost == 300 ? healCost * 0.7 : healCost * 0.2);

      _coffer.coffer.addMoney(healCost * 0.8);

      player.notify(`~g~Успешно`);
      remotePlayer.notify(`~g~Успешно`);
    });
  });
  mp.events.register('tablet:license', async (player, id, give, selected) => {
    if (!_user.user.isLogin(player)) return;
    let item = _fractions.recLists[selected];
    if (!item) return player.notify("~r~Параметр выбран не верный");
    const licLabel = item.name;
    const licName = item.param;
    const cost = item.cost;

    const rank = _user.user.getPlayerFractionRank(player);

    const fraction = _user.user.getPlayerFraction(player);

    if (!fraction) return player.notify("~r~Вы не состоите во фракции");
    if (!rank) return player.notify("~r~Вы не состоите во фракции");
    if (!item.fractions.includes(fraction)) return player.notify("~r~Вы не можете это выбрать. Это для другой фракции");
    if (item.rank > rank) return player.notify("~r~Вы не можете это выбрать. Ваш ранг недостаточно высок");
    if (_user.user.getId(player) == id && give) return player.notify("~r~Вы не можете выдать лицензию самому себе");

    let target = _user.user.getPlayerById(id);

    if (give) {
      if (!target) return player.notify("~r~Игрок не обнаружен");
      if (_methods.methods.distanceToPos(target.position, player.position) > 3) return player.notify("~r~Игрок слишком далеко");
      if (_user.user.get(target, 'is_gos_blacklist')) return player.notify('~r~Данный человек состоит в чёрном списке');
      if (givedLic.has(id + "_" + licName)) return player.notify("~r~Человек уже получал [" + licLabel + "]\nОграничение: 1 в ООС сутки");
      if (_user.user.get(target, licName)) return player.notify("~r~У человека уже есть [" + licLabel + "]");
      let status = await _user.user.accept(target, `Оформить [${licLabel}]`, `${cost ? `Оформить (Цена: $${cost})` : 'Оформить'}`);
      if (!mp.players.exists(player)) return;
      if (!mp.players.exists(target)) return;

      if (status) {
        if (cost && _user.user.getMoney(target) < cost) return player.notify(`~r~У игрока недостаточно средств для оплаты`), target.notify(`~r~У вас недостаточно средств для оплаты`);

        if (cost) {
          _user.user.removeCashMoney(target, cost);

          _coffer.coffer.addMoney(cost * 0.85);

          _user.user.addCashMoney(player, cost * 0.15);
        }

        _user.user.set(target, licName, true);

        player.notify('~g~' + licLabel + ' выдана');
        target.notify('~g~' + licLabel + ' выдана');

        _user.user.addHistory(target, 4, 'Получил ' + licLabel + '. Выдал: ' + _user.user.getRpName(player));

        _user.user.updateClientCache(target);

        _chat.chat.sendFractionMessage(player, _user.user.getPlayerFraction(player), `Выдал ${_user.user.getId(target)} ${licLabel}`);
      }
    } else {
      let data = !target ? await _user.user.getUserDataFromDB(id) : null;

      if (target) {
        if (!_user.user.get(target, licName)) return player.notify("~r~У человека отсутствует [" + licLabel + "]");

        _user.user.set(target, licName, false);

        _user.user.updateClientCache(target);

        target.notify('~r~У вас изъяли ' + licLabel);
      } else {
        if (!data[licName]) return player.notify("~r~У человека отсутствует [" + licLabel + "]");
        data[licName] = 0;
        data.save();
      }

      _chat.chat.sendFractionMessage(player, _user.user.getPlayerFraction(player), `Изъял у ${id} ${licLabel}`);

      player.notify('~g~Успешно');
      tablet.openFractionMenu(player);
    }
  });
  mp.events.register('dispatch:sendcode', (player, local, code, desc) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.getPlayerFraction(player)) return;
    if (player.spamProtect) return player.notify(`~r~Не отправляйте код так часто`);
    player.spamProtect = true;
    setTimeout(() => {
      player.spamProtect = false;
    }, 5000);

    if (local) {
      _dispatcher.dispatcher.sendLocalPos(`Код: ${code}`, `${_user.user.getRpName(player)} - ${desc}`, player.position, _user.user.getPlayerFraction(player), true);
    } else {
      _dispatcher.dispatcher.sendPos(`Код: ${code}`, `${_user.user.getRpName(player)} - ${desc}`, player.position, true);
    }

    tablet.openFractionMenu(player);
  });
  mp.events.register('fraction:alert', (player, text, title, news) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.getPlayerFraction(player)) return;
    if (text.length < 2) return player.notify(`~r~Минимальная длинна - 2 символа`);
    if (player.spamProtect) return player.notify(`~r~Не отправляйте так часто`);
    player.spamProtect = true;
    setTimeout(() => {
      player.spamProtect = false;
    }, 5000);
    let functarget = !news ? _methods.methods.notifyWithPictureToFraction : _methods.methods.notifyWithPictureToAll;

    switch (_user.user.getPlayerFraction(player)) {
      case 1:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости правительства', text, 'CHAR_BANK_MAZE', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 2:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости LSPD', text, 'WEB_LOSSANTOSPOLICEDEPT', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 3:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости FIB', text, 'DIA_TANNOY', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 4:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости USMC', text, 'DIA_ARMY', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 5:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости SDBP', text, 'DIA_POLICE', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 7:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости SHERIFF', text, 'DIA_POLICE', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      case 16:
        functarget(!news ? `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]` : title, !news ? '' : 'Новости EMS', text, 'CHAR_CALL911', !news ? _user.user.getPlayerFraction(player) : 0);
        break;

      default:
        if (news) return;

        _methods.methods.notifyWithPictureToFraction(`${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'tag')}]`, '', text, 'CHAR_ARTHUR', _user.user.getPlayerFraction(player));

        break;
    }

    tablet.openFractionMenu(player);
  });
  mp.events.register('dispatch:gopos', (player, id, x, y) => {
    if (!_user.user.getPlayerFraction(player)) return;
    player.notify(`~g~Точка назначения установлена в навигаторе`);

    _user.user.setWaypoint(player, x, y);

    _dispatcher.dispatcher.data.map(item => {
      item.map(q => {
        if (q.id == id && !q.accept) {
          if (q.authorid) {
            let target = _user.user.getPlayerById(q.authorid);

            if (target) {
              target.notifyWithPicture(`Диспетчер`, `Вызов #${q.id}`, `Вызов [${q.title}] был принят сотрудником ${_user.user.getRpName(player)}`, 'CHAR_CHAT_CALL', 2);
            }
          }

          q.accept = `${_user.user.getRpName(player)} [${_user.user.getId(player)}]`;

          _methods.methods.notifyWithPictureToFraction(`${_user.user.getRpName(player)}`, `Вызов #${q.id}`, `Вызов [${q.title}] был принят`, 'CHAR_CHAT_CALL', _user.user.getPlayerFraction(player));
        }
      });
    });
  });
  mp.events.register('fraction:setRank', (player, id, rank) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.getPlayerFraction(player)) return;
    if (_user.user.getId(player) == id && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете назначать ранг самому себе`);

    _user.user.getUserDataFromDB(id).then(async targetdata => {
      if (!targetdata) return player.notify("~r~Участника с указанным ID не существует");

      let target = _user.user.getPlayerById(id);

      if (targetdata.fraction_id != _user.user.getPlayerFraction(player)) return player.notify(`~r~Гражданин не является участником ${_user.user.getFractionName(_user.user.getPlayerFraction(player))}`);
      if (!_user.user.isSubLeader(player)) return player.notify(`~r~Только лидер и зам может назначать ранги`);
      if (_user.user.getPlayerFractionRank(player) <= rank && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете назначать данный ранг`);
      if (targetdata.rank >= _user.user.getPlayerFractionRank(player) && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете назначать ранг данному человеку`);

      _user.user.loginterract(player, targetdata.id, "SetRank", "Выдал ранг фракции " + _user.user.getFractionName(targetdata.fraction_id) + ", новый ранг: " + rank + ", предыдущий ранг " + targetdata.rank);

      if (target) _user.user.set(target, "rank", rank);else {
        targetdata.rank = rank;
        await targetdata.save();
      }

      if (_user.user.isGos(player)) {
        _user.user.addHistory(id, 0, 'Была выдана должность #' + rank + '. Выдал: ' + _user.user.getRpName(player));
      }

      player.notify(`~g~Ранг успешно назначен`);
      if (target) _user.user.saveAccount(target), target.notify('Вам назначен новый ранг: ' + _user.user.getRankName(_user.user.getPlayerFraction(target), _user.user.getPlayerFractionRank(target))), _user.user.updateClientCache(target);
      tablet.openFractionMenu(player);
    });
  });
  mp.events.register('fraction:uninvite', (player, id, blacklist, blacklistReason) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.getPlayerFraction(player)) return;
    if (_user.user.getId(player) == id && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете уволить самого себя`);
    if (blacklist && !_user.user.isAdminNow(player, 4) && !_user.user.isGos(player)) return player.notify(`~r~Вы не можете уволить с занесением в чёрный список`);
    if (!_user.user.isAdminNow(player, 4) && !_user.user.isSubLeader(player)) return player.notify(`~r~Вы не можете уволить участника`);

    _user.user.getUserDataFromDB(id).then(async targetdata => {
      if (targetdata.fraction_id != _user.user.getPlayerFraction(player)) return player.notify(`~r~Данный участник уже не является членом вашей фракции`);

      let target = _user.user.getPlayerById(id);

      let rank = target ? _user.user.getPlayerFractionRank(target) : targetdata.rank;
      if (rank >= _user.user.getPlayerFractionRank(player) && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете уволить данного участника`);

      if (target) {
        target.notify(`~r~Вас исключили из ${_user.user.getPlayerFractionName(target)}${blacklist ? ` С занесением в чёрный список, причина: ${blacklistReason}` : ''}`);

        _user.user.set(target, 'fraction_id', 0);

        _user.user.set(target, 'rank', 0);

        _user.user.resetCustomization(target);

        if (blacklist) _user.user.set(target, 'is_gos_blacklist', 1), _user.user.set(target, 'gos_blacklist_reason', blacklistReason);

        _user.user.updateClientCache(target);
      }

      _inventory.inventory.deleteHealItemsFromPlayer(targetdata.id);

      _user.user.loginterract(player, id, "UnInvite", "Уволил из фракции " + targetdata.fraction_id + " с ранга " + targetdata.rank);

      targetdata.fraction_id = 0;
      targetdata.rank = 0;
      if (blacklist) targetdata.is_gos_blacklist = 1;
      if (blacklist) targetdata.gos_blacklist_reason = blacklistReason;
      targetdata.save();
      player.notify(`~g~Успешно`);
    });
  });
  mp.events.register('server:user:inviteFraction', async (player, id) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.isSubLeader(player) && !_user.user.isAdminNow(player, 4)) return player.notify(`~r~Вы не можете принимать игроков`);

    let remotePlayer = _user.user.getPlayerById(id);

    if (remotePlayer) {
      if (_user.user.get(remotePlayer, 'fraction_id') > 0) {
        player.notify('~r~Игрок уже состоит в организации');
        return;
      }

      if (_user.user.get(remotePlayer, 'job')) {
        player.notify('~r~Игрок трудоустроен, сначала ему необходимо уволиться');
        return;
      }

      if ((await _user.user.countWarns(remotePlayer)) > 0) {
        return player.notify("~r~Данный игрок имеет предупреждение");
      }

      if (_user.user.isGos(player) && _user.user.get(remotePlayer, 'is_gos_blacklist')) {
        player.outputChatBox(`!{${_chat.chat.clRed}} Игрок состоит в чёрном списке гос. организаций`);
        player.outputChatBox(`!{${_chat.chat.clRed}} Причина: !{${_chat.chat.clWhite}} ${_user.user.get(remotePlayer, 'gos_blacklist_reason')}`);
        return;
      }

      if (player.dist(remotePlayer.position) > 5) {
        return player.notify("~r~Слишком далеко");
      }

      if (_user.user.isGos(player) && _user.user.get(remotePlayer, "business_id")) {
        let is_office = _business.business.isOffice(_user.user.get(remotePlayer, 'business_id'));

        if (is_office) return player.notify("~r~Игрок владеет офисом");
      }

      player.notify("~g~Запрос отправлен");

      _user.user.accept(remotePlayer, "Хотите вступить в организацию?").then(res => {
        if (!res) {
          player.notify('~r~Игрок отклонил предложение');
          return;
        }

        if (_user.user.isGos(player)) {
          _user.user.addHistory(remotePlayer, 0, 'Был принят в организацию ' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')) + '. Принял: ' + _user.user.getRpName(player));
        }

        _user.user.loginterract(player, remotePlayer, "Invite", "Принял в организацию");

        _user.user.set(remotePlayer, 'fraction_id', _user.user.get(player, 'fraction_id'));

        _user.user.set(remotePlayer, 'rank', 1);

        _user.user.saveAccount(remotePlayer);

        _user.user.updateClientCache(remotePlayer);

        tablet.openFractionMenu(player);
        remotePlayer.notify('Вас приняли в организацию ~g~' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')));
        player.notify('Вы приняли в организацию ~g~' + _user.user.getRpName(remotePlayer));

        _methods.methods.saveLog('inviteFraction', 'Был принят в организацию ' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')) + '. Принял: ' + _user.user.getRpName(player));
      });
    }
  });
  mp.events.add('tablet:openfraction', player => {
    tablet.openFractionMenu(player);
  });
  mp.events.register('tablet:fraction:load', player => {
    tablet.openFractionMenu(player);
  });
  mp.events.register('tablet:gov:load', player => {
    tablet.openGovMenu(player);
  });
  mp.events.register('tablet:gov:setParam', (player, type, value) => {
    if (!_user.user.isLogin(player)) return;

    const canEdit = _user.user.isAdminNow(player, 6) || _user.user.getPlayerFraction(player) == 1 && _user.user.isLeader(player);

    if (!canEdit) return player.notify('~r~У вас нет доступа');

    if (type == "nalog") {
      if (value < 1 || value > 99) return player.notify(`~r~Значение указано не верно`);

      _coffer.coffer.setNalog(value);
    } else if (type == "biz") {
      if (value < 1 || value > 99) return player.notify(`~r~Значение указано не верно`);

      _coffer.coffer.setNalogBizz(value);
    } else if (type == "bomj") {
      if (value < 1 || value > 9999) return player.notify(`~r~Значение указано не верно`);

      _coffer.coffer.setPosob(value);
    } else if (type == "old") {
      if (value < 1 || value > 9999) return player.notify(`~r~Значение указано не верно`);

      _coffer.coffer.setMoneyOld(value);
    }

    player.notify('~g~Значение успешно установлено');
    tablet.openGovMenu(player);
  });
  mp.events.register('tablet:gov:takeMoney', (player, value) => {
    if (!_user.user.isLogin(player)) return;

    const canEdit = _user.user.isAdminNow(player, 6) || _user.user.getPlayerFraction(player) == 1 && _user.user.isLeader(player);

    if (!canEdit) return player.notify('~r~У вас нет доступа');
    if (!_user.user.get(player, 'bank_number')) return player.notify('~r~У вас нет активного банкоского счёта для снятия средств');
    if (value < 1 || value > (_user.user.isAdminNow(player, 6) ? 99999999999 : 1000000)) return player.notify(`~r~Значение указано не верно`);
    if (_coffer.coffer.getMoney() < value) return player.notify(`~r~Бюджет правительства меньше указанной суммы`);
    player.notify('~g~Операция успешно выполнена');

    _coffer.coffer.removeMoney(value);

    _user.user.addBankMoney(player, value);

    _methods.methods.saveLog('TakeCoffer', `${_user.user.get(player, 'rp_name')} (${_user.user.get(player, 'id')}) take $${value}`);

    tablet.openGovMenu(player);
  });
  mp.events.register('tablet:gov:putMoney', (player, value) => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.get(player, 'bank_number')) return player.notify('~r~У вас нет активного банкоского счёта для снятия средств');
    if (value < 1 || value > (_user.user.isAdminNow(player, 6) ? 99999999999 : 1000000)) return player.notify(`~r~Значение указано не верно`);
    if (_user.user.getBankMoney(player) < value) return player.notify(`~r~У вас недостаточно средств на банковском счёте`);
    player.notify('~g~Операция успешно выполнена');

    _coffer.coffer.addMoney(value);

    _user.user.removeBankMoney(player, value);

    _methods.methods.saveLog('TakeCoffer', `${_user.user.get(player, 'rp_name')} (${_user.user.get(player, 'id')}) take $${value}`);

    tablet.openGovMenu(player);
  });
  mp.events.add('tablet:main', player => {
    tablet.open(player);
  });
  mp.events.register('tablet:vehicles:load', player => {
    tablet.openVehMenu(player);
  });
  mp.events.register('tablet:cars:find', (player, id) => {
    if (!_user.user.isLogin(player)) return;

    _vehicles.vehicles.findBySlot(player, id);
  });
  mp.events.register('tablet:cars:deliver', (player, id) => {
    if (!_user.user.isLogin(player)) return;
    if (player.spamProtect) return player.notify(`~r~Не нажимайте так часто`);
    player.spamProtect = true;
    setTimeout(() => {
      player.spamProtect = false;
    }, 5000);
    if (player.dimension != 0) return player.notify(`~r~Нельзя заказывать ТС в помещении`);

    let containerId = _user.user.get(player, 'car_id' + id);

    let price = _vehicles.vehicles.get(containerId, 'price');

    if (!price) return player.notify(`~r~Не удалось заказать ТС`);
    if (player.deliverVehWait) return player.notify(`~r~Заказывать ТС можно раз в 10 минут`);
    let respPrice = price / 100;
    if (respPrice < 100) respPrice = 100;
    if (respPrice > 3000) respPrice = 3000;
    respPrice = _methods.methods.parseInt(respPrice * priceDeliverVehMultipler);
    if (player.inGreenZone) return player.notify(`~r~Нельзя заказывать ТС в зелёную зону`);
    if (player.vehicle) return player.notify(`~r~Нельзя заказывать ТС находясь в ТС`);
    if (_user.user.getBankMoney(player) < respPrice) return player.notify(`~r~У вас недостаточно средств на банковском балансе`);

    let statusresp = _vehicles.vehicles.respBySlot(player, id, true);

    if (statusresp) {
      player.deliverVehWait = true;
      setTimeout(() => {
        if (mp.players.exists(player)) player.deliverVehWait = false;
      }, 10 * 1000 * 60);
      player.notifyWithPicture('Доставка транспорта', 'Механик', 'Скоро твой транспорт будет доставлен', 'CHAR_MECHANIC', 2);

      _user.user.removeBankMoney(player, respPrice);
    }
  });
  mp.events.register('tablet:cars:resp', (player, id) => {
    if (!_user.user.isLogin(player)) return;
    if (player.spamProtect) return player.notify(`~r~Не нажимайте так часто`);
    player.spamProtect = true;
    setTimeout(() => {
      player.spamProtect = false;
    }, 5000);

    _vehicles.vehicles.respBySlot(player, id);
  });
  mp.events.register('tablet:chests:load', player => {
    if (!_user.user.isLogin(player)) return;
    tablet.openChestMenu(player);
  });
  mp.events.register('tablet:house:load', player => {
    if (!_user.user.isLogin(player)) return;
    tablet.openHouseMenu(player);
  });
  mp.events.register('tablet:appart:load', player => {
    if (!_user.user.isLogin(player)) return;
    tablet.openAppartMenu(player);
  });
  mp.events.register('tablet:condo:load', player => {
    if (!_user.user.isLogin(player)) return;
    tablet.openCondoMenu(player);
  });
  mp.events.register('tablet:chests:updatePin', (player, type, pin) => {
    if (!_user.user.isLogin(player)) return;

    let stockid = _user.user.get(player, 'stock_id');

    if (!stockid) return mp.events.triggerBrowser(player, 'tablet:chestsno');
    if (type === "pin1") _stock.stock.updatePin1(stockid, pin);else if (type === "pin2") _stock.stock.updatePin2(stockid, pin);else if (type === "pin3") _stock.stock.updatePin3(stockid, pin);
    player.notify('~g~Пинкод обновлён');
    tablet.openChestMenu(player);
  });
  mp.events.register('tablet:house:updatePin', (player, pin) => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'id_house');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:houseno');
    if (isNaN(pin) || pin < 0 || pin > 99999) return player.notify(`~r~Пинкод указан не верно`);
    if (!_houses.houses.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_houses.houses.get(houseid, 'id_user') == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _houses.houses.updatePin(houseid, pin);

    player.notify('~g~Пинкод обновлён');
    tablet.openHouseMenu(player);
  });
  mp.events.register('tablet:appart:updatePin', (player, pin) => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'apartment_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:appartno');
    if (isNaN(pin) || pin < 0 || pin > 99999) return player.notify(`~r~Пинкод указан не верно`);
    if (!_apartments.apartments.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_apartments.apartments.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _apartments.apartments.updatePin(houseid, pin);

    player.notify('~g~Пинкод обновлён');
    tablet.openAppartMenu(player);
  });
  mp.events.register('tablet:appart:deletePin', player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'apartment_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:appartno');
    if (!_apartments.apartments.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_apartments.apartments.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _apartments.apartments.updatePin(houseid, 0);

    player.notify('~g~Пинкод успешно снят');
    tablet.openAppartMenu(player);
  });
  mp.events.register('tablet:condo:updatePin', (player, pin) => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'condo_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:condono');
    if (isNaN(pin) || pin < 0 || pin > 99999) return player.notify(`~r~Пинкод указан не верно`);
    if (!_condo.condo.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_condo.condo.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _condo.condo.updatePin(houseid, pin);

    player.notify('~g~Пинкод обновлён');
    tablet.openCondoMenu(player);
  });
  mp.events.register('tablet:condo:deletePin', player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'condo_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:condono');
    if (!_condo.condo.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_condo.condo.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _condo.condo.updatePin(houseid, 0);

    player.notify('~g~Пинкод успешно снят');
    tablet.openCondoMenu(player);
  });
  mp.events.register('tablet:house:deletePin', player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'id_house');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:houseno');
    if (!_houses.houses.getPin(houseid)) return player.notify(`~r~Пинкод не установлен.`);
    if (!(_houses.houses.get(houseid, 'id_user') == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к смене пинкода`);

    _houses.houses.updatePin(houseid, 0);

    player.notify('~g~Пинкод успешно снят');
    tablet.openHouseMenu(player);
  });
  mp.events.register('tablet:house:unleave', async (player, id) => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'id_house');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:houseno');
    if (!(_houses.houses.get(houseid, 'id_user') == _user.user.getId(player) || _user.user.isAdminNow(player, 6))) return player.notify(`~r~У вас нет доступа к выселению`);
    if (_user.user.getId(player) == id) return player.notify(`~r~Вы не можете выселить себя`);
    if (_houses.houses.get(houseid, 'id_user') == id) return player.notify(`~r~Нельзя выселить владельца дома`);

    let target = _user.user.getPlayerById(id);

    player.notify('~g~Успешно');
    if (target) return _user.user.set(target, 'id_house', 0), _user.user.updateClientCache(target), await _user.user.saveAccount(target), tablet.openHouseMenu(player);

    _user.user.getUserDataFromDB(id).then(itemq => {
      if (itemq) {
        itemq.id_house = 0;
        itemq.save();
        tablet.openHouseMenu(player);
      }
    });
  });
  mp.events.register('tablet:mafia:data:load', player => {
    tablet.openMafiaTer(player);
  });
  mp.events.register('tablet:mafiater:pos', (player, id) => {
    let q = _mafiaData.mafiaTerritoriesData[id];
    if (q) _user.user.setWaypoint(player, q.pos[0], q.pos[1]), player.notify('~g~Точка установлена');else player.notify('~r~Ошибка');
  });
  mp.events.register('tablet:gpshelp:list:load', player => {
    tablet.trackingData(player);
  });
  mp.events.register('tablet:gos:trackingid', (player, id) => {
    let target = _user.user.getPlayerById(id);

    if (!target) return target.notify("~r~Цель покинула сервер");
    const trackingname = `tracking_${id}`;
    if (!player.trackingList) player.trackingList = [];

    if (player.trackingList.includes(trackingname)) {
      player.trackingList.splice(player.trackingList.indexOf(trackingname), 1);

      _user.user.removeLocalBlip(player, trackingname);

      player.notify('Отслеживание отключено');
    } else {
      player.trackingList.push(trackingname);
      player.notify('Отслеживание включено');
      target.notify(`~g~Ваш маяк отслеживается сотрудником ${_user.user.getRpName(player)} [${_user.user.get(player, 'tag')}]`);
    }

    tablet.trackingData(player);
  });
  mp.events.register('tablet:gos:tracking', player => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.isGos(player)) return;

    const fraction = _user.user.getPlayerFraction(player);

    const trackingname = `tracking_${_user.user.getId(player)}`;

    if (player.tracking) {
      player.tracking = false;
      player.notify('~g~Отслеживание отключено');
      let targets = mp.players.toArray().filter(item => item.trackingList && item.trackingList.includes(trackingname));
      targets.map(target => {
        _user.user.removeLocalBlip(target, trackingname);

        target.trackingList.splice(target.trackingList.indexOf(trackingname), 1);
      });
    } else {
      player.tracking = true;
      player.notify('~g~Отслеживание включено');

      _dispatcher.dispatcher.sendLocalPos(`GPS Маяк`, `${_user.user.getRpName(player)} [${_user.user.get(player, 'tag')}] - Активировал GPS маяк`, player.position, _user.user.getPlayerFraction(player), true);

      let q = setInterval(() => {
        if (!mp.players.exists(player) || !player.tracking) {
          clearInterval(q);
          let targets = mp.players.toArray().filter(item => item.trackingList && item.trackingList.includes(trackingname));
          targets.map(target => {
            _user.user.removeLocalBlip(target, trackingname);

            target.trackingList.splice(target.trackingList.indexOf(trackingname), 1);
          });
        } else {
          let targets = mp.players.toArray().filter(item => _user.user.getPlayerFraction(item) == fraction && item.trackingList && item.trackingList.includes(trackingname));
          targets.map(target => {
            _user.user.drawLocalBlip(target, trackingname, player.position, `${_user.user.getRpName(player)} [${_user.user.get(player, 'tag')}]`, player.vehicle ? 380 : 280, 1, false);
          });
        }
      }, 10000);
    }

    tablet.trackingData(player);
    player.trackingBlock = true;
    setTimeout(() => {
      player.trackingBlock = false;
    }, 60000);
  });
  mp.events.addRemoteCounted('playerDeathDone', player => {
    if (_user.user.isLogin(player)) {
      if (!player.tracking) return;
      const trackingname = `tracking_${_user.user.getId(player)}`;
      player.tracking = false;
      player.notify('~g~Отслеживание отключено');
      let targets = mp.players.toArray().filter(item => item.trackingList && item.trackingList.includes(trackingname));
      targets.map(target => {
        _user.user.removeLocalBlip(target, trackingname);

        target.trackingList.splice(target.trackingList.indexOf(trackingname), 1);
      });

      if (!player.trackingBlock) {
        player.trackingBlock = true;
        setTimeout(() => {
          player.trackingBlock = false;
        }, 60000);
      }
    }
  });
  mp.events.add('tablet:unequip', player => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.get(player, 'tablet_equip')) return player.notify('~r~У вас нет экипированного планшета');

    _user.user.set(player, 'tablet_equip', 0);

    _user.user.updateClientCache(player);

    _user.user.takeNewItem(player, 282, 1);

    _inventory.inventory.updateInventory(player);

    player.notify(`~g~Вы сняли планшет с экипировки`);
  });
}, 1000);
const tablet = {
  trackingData: player => {
    if (!_user.user.isLogin(player)) return;
    if (!_user.user.isGos(player)) return;
    if (!player.trackingList) player.trackingList = [];

    const fraction = _user.user.getPlayerFraction(player);

    let targets = mp.players.toArray().filter(item => _user.user.getPlayerFraction(item) == fraction && item.tracking);
    let q = [];
    targets.map(item => {
      q.push([`${_user.user.getRpName(item)} [${_user.user.get(item, 'tag')}]`, _user.user.getId(item), player.trackingList.includes(`tracking_${_user.user.getId(item)}`)]);
    });
    mp.events.triggerBrowser(player, 'tablet:gpshelp:list', q);
  },
  openMafiaTer: async player => {
    if (!_user.user.isLogin(player)) return;
    let items = [];

    for (let id in _mafiaData.mafiaTerritoriesData) {
      let data1 = await _data.Container.GetAll(_mafiaData.containerMafiaTerritoryId + (parseInt(id) + 1));
      items.push({
        mafiaWarownerId: data1.get('mafiaWarownerId'),
        mafiaWarownerName: data1.get('mafiaWarownerId') ? _user.user.getFractionName(data1.get('mafiaWarownerId')) : "Никто",
        mafiaWarmoney: data1.get('mafiaWarmoney'),
        access: data1.get('mafiaWarownerId') == _user.user.getPlayerFraction(player)
      });
    }

    mp.events.triggerBrowser(player, 'tablet:mafia:data', items, _user.user.isSubLeader(player), _user.user.isLeader(player));
  },
  openCondoMenu: async player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'condo_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:condono');
    let users = [];
    const usersq = (await _user2.userEntity.findAll({
      where: {
        condo_id: houseid
      }
    })).map(item => {
      users.push({
        name: item.rp_name,
        id: item.id
      });
    });
    mp.events.triggerBrowser(player, 'tablet:condo', users, houseid, _condo.condo.get(houseid, 'price'), _condo.condo.get(houseid, 'address'), `${_user.user.getRpName(player)} [${_user.user.getId(player)}]`, _condo.condo.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6), !!_condo.condo.getPin(houseid));
  },
  openAppartMenu: async player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'apartment_id');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:appartno');
    let users = [];
    const usersq = (await _user2.userEntity.findAll({
      where: {
        apartment_id: houseid
      }
    })).map(item => {
      users.push({
        name: item.rp_name,
        id: item.id
      });
    });
    mp.events.triggerBrowser(player, 'tablet:appart', users, houseid, _apartments.apartments.get(houseid, 'price'), _apartments.apartments.get(houseid, 'address'), `${_user.user.getRpName(player)} [${_user.user.getId(player)}]`, _apartments.apartments.getOwnerId(houseid) == _user.user.getId(player) || _user.user.isAdminNow(player, 6), !!_apartments.apartments.getPin(houseid));
  },
  openHouseMenu: async player => {
    if (!_user.user.isLogin(player)) return;

    let houseid = _user.user.get(player, 'id_house');

    if (!houseid) return mp.events.triggerBrowser(player, 'tablet:houseno');
    if (!_houses.houses.get(houseid, 'price')) return mp.events.triggerBrowser(player, 'tablet:houseno');
    let users = [];
    const usersq = (await _user2.userEntity.findAll({
      where: {
        id_house: houseid
      }
    })).map(item => {
      users.push({
        name: item.rp_name,
        id: item.id
      });
    });
    let owner = users.find(item => item.id == _houses.houses.get(houseid, 'id_user'));
    mp.events.triggerBrowser(player, 'tablet:house', users, houseid, _houses.houses.get(houseid, 'price'), _houses.houses.get(houseid, 'address'), owner ? `${owner.name} [${owner.id}]` : "Государство", _houses.houses.get(houseid, 'id_user') == _user.user.getId(player) || _user.user.isAdminNow(player, 6), !!_houses.houses.get(houseid, 'pin'));
  },
  openChestMenu: async player => {
    if (!_user.user.isLogin(player)) return;

    let stockid = _user.user.get(player, 'stock_id');

    if (!stockid) return mp.events.triggerBrowser(player, 'tablet:chestsno');
    const logs = await _stock.stock.getLog(stockid, 20);
    mp.events.triggerBrowser(player, 'tablet:chests', logs, stockid, _stock.stock.get(stockid, 'price'), _stock.stock.get(stockid, 'address'), `${_user.user.getRpName(player)} [${_user.user.getId(player)}]`);
  },
  openVehMenu: player => {
    if (!_user.user.isLogin(player)) return;
    let carsids = [];
    let carsdata = [];

    for (let id = 1; id < 9; id++) {
      let carid = _user.user.get(player, `car_id${id}`);

      if (carid) carsids.push([id, carid]);
    }

    for (let idq in carsids) {
      let [slot, id] = carsids[idq];

      if (_vehicles.vehicles.getData(id)) {
        if (_vehicles.vehicles.get(id, 'id_user') != _user.user.getId(player)) {
          _user.user.set(player, 'car_id' + slot, 0);

          _user.user.updateClientCache(player);
        } else {
          let plate = _vehicles.vehicles.get(id, 'number');

          let model = _vehicles.vehicles.get(id, 'name');

          let vInfo = _methods.methods.getVehicleInfo(model);

          let name = vInfo.display_name != "Unknown" ? vInfo.display_name : model;

          let price = _vehicles.vehicles.get(id, 'price');

          let respPrice = price / 100;
          if (respPrice < 100) respPrice = 100;
          if (respPrice > 3000) respPrice = 3000;
          respPrice = _methods.methods.parseInt(respPrice * priceDeliverVehMultipler);
          carsdata.push({
            bag: _inventory.inventory.maxAmount(8, plate),
            slot,
            plate,
            cost: price,
            costDeliver: respPrice,
            fuelMax: vInfo.fuel_full,
            fuelPer: vInfo.fuel_min,
            model,
            name,
            autopilot: vInfo.fuel_min == 0
          });
        }
      } else {
        _user.user.set(player, 'car_id' + slot, 0);

        _user.user.updateClientCache(player);
      }
    }

    mp.events.triggerBrowser(player, 'tablet:vehicles', carsdata);
  },
  openGovMenu: async player => {
    if (!_user.user.isLogin(player)) return;

    const canEdit = _user.user.isAdminNow(player, 6) || _user.user.getPlayerFraction(player) == 1 && _user.user.isLeader(player);

    let money = _coffer.coffer.getMoney();

    let cofferMoneyBomj = _coffer.coffer.getPosob();

    let cofferNalog = _coffer.coffer.getNalog();

    let cofferNalogBizz = _coffer.coffer.getNalogBizz();

    let cofferMoneyOld = _coffer.coffer.getMoneyOld();

    let alldonators = await _coffer2.cofferDonateEntity.findAll();
    let donators = [];
    alldonators.forEach(item => {
      let fnd = donators.find(itm => itm[0] == item.name);
      if (fnd) fnd[1] += item.sum;else donators.push([item.name, item.sum]);
    });
    donators.sort((a, b) => {
      return b[1] - a[1];
    });
    let news = [];
    let q = (await _rpNews.rpNewsEntity.findAll({
      where: {
        fraction: 1
      },
      limit: 4,
      order: [['id', 'DESC']]
    })).map(item => {
      news.push({
        title: item.title,
        text: Buffer.from(item.text).toString('base64'),
        author: item.author_name,
        time: item.date + " " + item.time
      });
    });
    donators.splice(15, 99999999999999);
    mp.events.triggerBrowser(player, 'tablet:gov:data', money, cofferMoneyBomj, cofferNalogBizz, cofferMoneyOld, cofferNalog, canEdit, donators, news);
  },
  openFractionMenu: async player => {
    let users = _user.user.getPlayerFraction(player) ? await _user2.userEntity.findAll({
      where: {
        fraction_id: _user.user.getPlayerFraction(player)
      },
      order: [['is_online', 'DESC'], ['rank', 'DESC']]
    }) : [];
    let res = users.map(usr => {
      return {
        id: usr.id,
        rank: usr.rank,
        rp_name: filter(usr.rp_name),
        last_login: usr.last_login,
        is_online: usr.is_online,
        tag: usr.tag ? filter(usr.tag) : ""
      };
    });
    let q = [..._dispatcher.dispatcher.data[_user.user.getPlayerFraction(player)]].slice(-15);
    let dispatchq = [];
    q.map(item => {
      dispatchq.push(_objectSpread(_objectSpread({}, item), {}, {
        accept: item.accept ? filter(item.accept) : null,
        desc: filter(item.desc),
        title: filter(item.title),
        dist: item.withCoord && item.posX && item.posY ? player.dist(new mp.Vector3(item.posX, item.posY, player.position.z)) : 0
      }));
    });
    mp.events.triggerBrowser(player, "tablet:fraction", _user.user.getPlayerFraction(player), _user.user.getPlayerFractionRank(player), _user.user.isSubLeader(player), [], res, dispatchq, filter(_user.user.get(player, 'tag')), player.tracking);
  },
  open: async (player, id = 0) => {
    _inventory.inventory.closeInventory(player);

    _menu.menu.close(player);

    if (_user.user.get(player, 'jail_time') > 0) return player.notify(`~r~Планшетом нельзя пользоватся в тюрьме`);
    if (!_user.user.get(player, 'tablet_equip')) return player.notify('~r~У вас нет экипированного планшета');

    _user.user.setGui(player, 'tablet');

    let data = _fractions.fractionUtil.getFraction(_user.user.getPlayerFraction(player));

    mp.events.triggerBrowser(player, 'tablet:data', data ? data.name : null, data ? data.icon : '', _user.user.getPlayerFraction(player));
  },
  equipItem: async (player, id) => {
    let item = _inventory.inventory.getById(id);

    if (!item) return;
    if (item.owner_type != 1 || item.owner_id != _user.user.getId(player)) return;
    if (_user.user.get(player, 'tablet_equip')) return player.notify('~r~У вас уже есть экипированный планшет');

    _user.user.set(player, 'tablet_equip', 1);

    _user.user.updateClientCache(player);

    _inventory.inventory.deleteItem(id);

    player.notify('~g~Планшет экипирован');

    _inventory.inventory.updateInventory(player);
  }
};
exports.tablet = tablet;

function filter(str) {
  if (!str) return str;
  if (typeof str !== "string") str = String(str);
  return _methods.methods.filter(str).replace(/'/gi, '').replace(/"/gi, '');
}
},{"../user":"QE3B","./dispatcher":"bsac","../modules/methods":"qXSp","../modules/chat":"e1Zb","../modules/entity/user":"xF3w","../inventory":"m5ow","../../util/fractions":"Zeqt","../coffer":"sKID","../modules/entity/coffer":"R7vB","../modules/entity/rpNews":"wgLG","../vehicles":"pYYy","../stock":"MdNj","../houses":"buna","../modules/menu":"Aiz7","../apartments":"qIZj","../condo":"YoDO","../../util/mafiaData":"nT9M","../../util/sharedData":"bNis","../enums":"ZRYf","../../util/methods":"Z5QB","../modules/data":"Edcz","../business":"y5vZ"}],"iNNl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.customChest = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _customchest = require("../customchest");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a, _b;

let customChest = class customChest extends _sequelizeTypescript.Model {};
exports.customChest = customChest;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], customChest.prototype, "id", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", String)], customChest.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], customChest.prototype, "dimension", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('pos'));
  },

  set(value) {
    this.setDataValue('pos', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_a = typeof Vector3Mp !== "undefined" && Vector3Mp) === "function" ? _a : Object)], customChest.prototype, "pos", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('settings'));
  },

  set(value) {
    this.setDataValue('settings', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_b = typeof _customchest.protectSetting !== "undefined" && _customchest.protectSetting) === "function" ? _b : Object)], customChest.prototype, "settings", void 0);

exports.customChest = customChest = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_custom_chests"
})], customChest);
},{"../customchest":"sAsv"}],"txRo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.app = void 0;

var _ip = _interopRequireDefault(require("ip"));

var _express = _interopRequireDefault(require("express"));

var _methods = require("./modules/methods");

var _user = require("./user");

var _items = require("./items");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _newrage = require("../util/newrage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ip_address = _ip.default.address();

let app = (0, _express.default)();
exports.app = app;
app.get("/serverstat", (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', 'origin, content-type, accept');
  res.send({
    players: mp.players.length,
    admins: mp.players.toArray().map(player => {
      if (_user.user.isAdmin(player)) return player;
    }).length
  });
});
app.get("/items", (req, res) => {
  let itemsText = ``;

  _items.items.itemList.forEach((item, index) => {
    itemsText += `ID: ${index} | Name: ${item[0]}<br/>`;
  });

  res.send(itemsText);
});
app.use('/', _express.default.static('./web'));
setTimeout(() => {
  (0, _nodeFetch.default)('https://api.ipify.org?format=json').then(q => {
    q.json().then(data => {
      ip_address = data.ip;
      console.log("REGISTER IP", ip_address);
    });
  });
}, 100);
mp.events.add('playerJoin', player => {
  const resip = player.ip == "127.0.0.1" ? "127.0.0.1" : ip_address;
  let port = _methods.methods.isTestServer() ? 3400 : 80;
  player.call('web:browsers:urls', [[`http://${resip}:${port}/web/index.html${_newrage.RAGE_BETA ? '?ragebeta' : ''}`, `http://${resip}:${port}/menu/index.html${_newrage.RAGE_BETA ? '?ragebeta' : ''}`, `http://${resip}:${port}/phone/phone.html${_newrage.RAGE_BETA ? '?ragebeta' : ''}`, `http://${resip}:${port}/web/custom_sound.html${_newrage.RAGE_BETA ? '?ragebeta' : ''}`, `http://${resip}:${port}/minigames/`]]);
});
app.listen(3400, function () {});
},{"./modules/methods":"qXSp","./user":"QE3B","./items":"nuVl","../util/newrage":"mgLX"}],"HDmV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attackMinRank = void 0;
const attackMinRank = 9;
exports.attackMinRank = attackMinRank;
},{}],"PCk1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gangWarsZoneEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let gangWarsZoneEntity = class gangWarsZoneEntity extends _sequelizeTypescript.Model {};
exports.gangWarsZoneEntity = gangWarsZoneEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], gangWarsZoneEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], gangWarsZoneEntity.prototype, "owner", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], gangWarsZoneEntity.prototype, "resp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(300),
  allowNull: false
}), __metadata("design:type", String)], gangWarsZoneEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(1024),
  allowNull: false,

  get() {
    return JSON.parse(this.getDataValue('position'));
  },

  set(value) {
    this.setDataValue('position', JSON.stringify(value));
  }

}), __metadata("design:type", Object)], gangWarsZoneEntity.prototype, "position", void 0);

exports.gangWarsZoneEntity = gangWarsZoneEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_gangwars_zones"
})], gangWarsZoneEntity);
},{}],"vWYJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moneyChestEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let moneyChestEntity = class moneyChestEntity extends _sequelizeTypescript.Model {};
exports.moneyChestEntity = moneyChestEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], moneyChestEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], moneyChestEntity.prototype, "money", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", Number)], moneyChestEntity.prototype, "fraction", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], moneyChestEntity.prototype, "dimension", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('position'));
  },

  set(value) {
    this.setDataValue('position', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_a = typeof Vector3Mp !== "undefined" && Vector3Mp) === "function" ? _a : Object)], moneyChestEntity.prototype, "position", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.DataType.TEXT,
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('log'));
  },

  set(value) {
    this.setDataValue('log', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], moneyChestEntity.prototype, "log", void 0);

exports.moneyChestEntity = moneyChestEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_money_chests"
})], moneyChestEntity);
},{}],"HIeq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moneyChests = exports.moneyChest = exports.loadMoneyChests = void 0;

var _methods = require("./methods");

var _menu = require("./menu");

var _user = require("../user");

var _moneyChest = require("./entity/moneyChest");

let moneyChests = new Map();
exports.moneyChests = moneyChests;

const loadMoneyChests = () => {
  _moneyChest.moneyChestEntity.findAll().then(itms => {
    itms.forEach(item => {
      new moneyChest(item.id, item.position, item.money, item.fraction, item.log, item.dimension);
    });
  });
};

exports.loadMoneyChests = loadMoneyChests;

class moneyChest {
  constructor(id, position, money, fraction, log, dimension) {
    this.id = id;
    this.position = position;
    this.money = money;
    this.fraction = fraction;
    this.log = log;
    this.dimension = dimension;
    moneyChests.set(this.id, this);
    this.checkpoint = _methods.methods.createDynamicCheckpoint(this.position, "Нажмите ~g~Е~s~ чтобы открыть меню", player => {
      if (_user.user.getPlayerFraction(player) != this.fraction && !_user.user.isAdminNow(player, 4)) return player.notify("~r~Доступно только членам " + _methods.methods.getFractionName(this.fraction));

      let m = _menu.menu.new(player, "Сейф в деньгами");

      m.newItem({
        name: "Баланс",
        more: this.money + "$",
        onpress: () => {
          _menu.menu.input(player, "Сколько положить в сейф? (1 - " + _user.user.getCashMoney(player) + ")", "", 10, "int").then(res => {
            if (!res) return;
            if (isNaN(res) || res < 0 || res > _user.user.getCashMoney(player)) return player.notify("~r~Сумма указана не верно");

            _user.user.removeCashMoney(player, res);

            this.money += res;
            player.notify("~g~Баланс успешно пополнен");
            this.logWrite(_user.user.getRpName(player) + " (" + _user.user.getId(player) + ")", "Положил " + res + "$");

            _menu.menu.close(player);
          });
        }
      });

      if (player.bankgrabmoney) {
        m.newItem({
          name: "Разгрузить сумку",
          more: player.bankgrabmoney + "$",
          onpress: () => {
            this.money += player.bankgrabmoney;
            this.logWrite(_user.user.getRpName(player) + " (" + _user.user.getId(player) + ")", "Разгрузил сумку на " + player.bankgrabmoney + "$");
            player.notify("~g~Сумка разгружена");
            player.bankgrabmoney = 0;

            _user.user.checkComponents(player);

            _menu.menu.close(player);
          }
        });
      }

      if (_user.user.isLeader(player)) {
        m.newItem({
          name: "Снять средства",
          more: this.money + "$",
          onpress: () => {
            _menu.menu.input(player, "Сколько снять? (1 - " + this.money + ")", "", 10, "int").then(res => {
              if (!res) return;
              if (isNaN(res) || res < 0 || res > this.money) return player.notify("~r~Сумма указана не верно");

              _user.user.addCashMoney(player, res);

              this.money -= res;
              player.notify("~g~Баланс успешно пополнен");
              this.logWrite(_user.user.getRpName(player) + " (" + _user.user.getId(player) + ")", "Взял " + res + "$");

              _menu.menu.close(player);
            });
          }
        });
      }

      if (_user.user.isLeader(player) || _user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "Записи сейфа",
          onpress: () => {
            _menu.menu.selector(player, "Записи", this.log.map(itm => {
              return `${itm.who}: ${itm.text}`;
            }));
          }
        });
      }

      if (_user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "~r~Удалить сейф",
          onpress: () => {
            _user.user.accept(player, "Точно удалить?").then(status => {
              if (!status) return;

              _moneyChest.moneyChestEntity.destroy({
                where: {
                  id: this.id
                }
              }).then(() => {
                this.checkpoint.delete();
                moneyChests.delete(this.id);
                player.notify("~g~Успешно");
              });
            });
          }
        });
      }

      m.open();
    }, 1, this.dimension);
  }

  save() {
    _moneyChest.moneyChestEntity.update({
      money: this.money,
      position: this.position,
      dimension: this.dimension,
      fraction: this.fraction,
      log: this.log.slice(1).slice(-300)
    }, {
      where: {
        id: this.id
      }
    });
  }

  logWrite(who, text) {
    this.log.push({
      who,
      text
    });
    this.save();
  }

  get position() {
    return this.positiondata;
  }

  set position(value) {
    this.positiondata = value;
    if (this.checkpoint) this.checkpoint.updatePos(value);
  }

  get dimension() {
    return this.dimensiondata;
  }

  set dimension(value) {
    this.dimensiondata = value;
    if (this.checkpoint) this.checkpoint.updateDimension(value);
  }

}

exports.moneyChest = moneyChest;
mp.events.add("playerArrested", player => {
  if (player.bankgrabmoney) {
    player.bankgrabmoney = 0;

    _user.user.setComponentVariation(player, 5, 0, 0);

    player.notify("~r~Вы потеряли сумку с деньгами");
  }
});
},{"./methods":"qXSp","./menu":"Aiz7","../user":"QE3B","./entity/moneyChest":"vWYJ"}],"cDXP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reloadGangWarZones = exports.moneyPerTer = exports.gangzones = exports.gangRespPosition = exports.defenceCounter = exports.baseDzone = exports.attackTerBlock = exports.attackList = exports.attackCounter = exports.attackBlock = void 0;

var _web = require("../web");

var _gangwar = require("../../declaration/gangwar");

var _gangWarsZone = require("./entity/gangWarsZone");

var _fractions = require("../../util/fractions");

var _user = require("../user");

var _menu = require("./menu");

var _methods = require("../modules/methods");

var _moneyChest = require("./moneyChest");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const minTimeAttack = 15;
const maxTimeAttack = 22;
const onlineRequest = 5;
const afterDeathRadius = 200;
const distanceForKill = 150;
const maxAttacksFraction = 3;
const maxAttacksFractionTarget = 4;
const warTime = 12;
const moneyPerTer = 100;
exports.moneyPerTer = moneyPerTer;
const baseDzone = 75;
exports.baseDzone = baseDzone;
const gangRespPosition = [{
  x: 414.68,
  y: -2071.86,
  z: 21.50,
  fractionid: 21,
  color: 5
}, {
  x: -41.47,
  y: -1490.43,
  z: 31.39,
  fractionid: 19,
  color: 52
}, {
  x: 102.63,
  y: -1957.95,
  z: 20.74,
  fractionid: 18,
  color: 7
}, {
  x: 423.09,
  y: -1562.20,
  z: 29.28,
  fractionid: 20,
  color: 38
}];
exports.gangRespPosition = gangRespPosition;
gangRespPosition.map(item => {
  mp.blips.new(84, new mp.Vector3(item.x, item.y, item.z), {
    color: item.color,
    name: "Убежище",
    scale: 0.75,
    shortRange: true
  });
});
let attackList = new Map();
exports.attackList = attackList;
let attackTerBlock = new Map();
exports.attackTerBlock = attackTerBlock;
let attackBlock = new Map();
exports.attackBlock = attackBlock;
let attackCounter = new Map();
exports.attackCounter = attackCounter;
let defenceCounter = new Map();
exports.defenceCounter = defenceCounter;

const reloadGangWarZones = () => {
  _gangWarsZone.gangWarsZoneEntity.findAll().then(q => {
    exports.gangzones = gangzones = [];
    q.map(item => {
      gangzones.push({
        ownerid: item.owner,
        resp: item.resp,
        id: item.id,
        position: item.position,
        name: item.name,
        ownername: item.owner ? _fractions.fractionUtil.getFractionName(item.owner) : "Никто",
        attack: attackList.has(item.id),
        color: _fractions.fractionUtil.getFractionColor(item.owner)
      });
    });
    loadTerrData();
  });
};

exports.reloadGangWarZones = reloadGangWarZones;

const updateTerOwner = (id, ownerid) => {
  _gangWarsZone.gangWarsZoneEntity.findOne({
    where: {
      id
    }
  }).then(item => {
    if (item) {
      item.owner = ownerid;
      item.save().then(() => {
        reloadGangWarZones();
      });
    }
  });
};

let gangzones = [];
exports.gangzones = gangzones;

_web.app.get("/warzones", (req, res) => {
  res.send(gangzones);
});

_web.app.get("/resps", (req, res) => {
  res.send(gangRespPosition);
});

setTimeout(() => {
  mp.events.register('tablet:gangter:data:load', player => {
    if (!_user.user.isGang(player)) return player.notify('~r~Вы не в банде');
    let list = [];

    let fractionid = _user.user.getPlayerFraction(player);

    gangzones.filter(item => _methods.methods.pointInBox([player.position.x, player.position.y], _methods.methods.coordBoxToPoints(item.position, item.position.d))).map(item => {
      list.push({
        id: item.id,
        name: item.name,
        attack: !!item.attack,
        resp: !!item.resp,
        ownerid: item.ownerid,
        ownername: ""
      });
    });
    gangzones.filter(item => item.ownerid == fractionid && !_methods.methods.pointInBox([player.position.x, player.position.y], _methods.methods.coordBoxToPoints(item.position, item.position.d))).map(item => {
      list.push({
        id: item.id,
        name: item.name,
        attack: !!item.attack,
        resp: !!item.resp,
        ownerid: item.ownerid,
        ownername: ""
      });
    });
    gangzones.filter(item => item.ownerid != fractionid && !_methods.methods.pointInBox([player.position.x, player.position.y], _methods.methods.coordBoxToPoints(item.position, item.position.d))).map(item => {
      list.push({
        id: item.id,
        name: item.name,
        attack: !!item.attack,
        resp: !!item.resp,
        ownerid: item.ownerid,
        ownername: ""
      });
    });
    let countter = gangzones.filter(item => item.ownerid == fractionid).length;
    mp.events.triggerBrowser(player, 'tablet:gangter:data', list, _user.user.isSubLeader(player), _user.user.isLeader(player), _user.user.getPlayerFraction(player), countter * moneyPerTer + mp.players.toArray().filter(target => _user.user.getPlayerFraction(target) == fractionid).length * countter * (moneyPerTer * .1), _user.user.getPlayerFractionRank(player));
  });
  mp.events.register('tablet:gangter:pos', (player, id) => {
    if (!_user.user.isGang(player)) return player.notify('~r~Вы не член банды');
    let q = gangzones.find(item => item.id == id);
    if (!q) return player.notify('~r~Территория не обнаружена');

    _user.user.setWaypoint(player, q.position.x, q.position.y);
  });
  mp.events.register('tablet:gangter:sell', (player, id) => {
    if (!_user.user.isGang(player)) return player.notify('~r~Вы не член банды');
    let q = gangzones.find(item => item.id == id);
    if (!q) return player.notify('~r~Территория не обнаружена');
    if (!q.ownerid) return player.notify('~r~Территория никому не принадлежит');
    if (q.ownerid != _user.user.getPlayerFraction(player)) return player.notify('~r~Территория не принадлежит вашей банде');
    if (_methods.methods.distanceToPos2D(player.position, q.position) > q.position.d) return player.notify('~r~Вы должны находится на территории');
    if (q.resp) return player.notify('~r~Респу нельзя продавать');
    if (q.attack) return player.notify('~r~Территория под атакой');
    if (!_user.user.isLeader(player)) return player.notify('~r~Данное действие может выполнить только лидер');

    _menu.menu.input(player, "Введите стоимость", "", 8, "int").then(sum => {
      if (!sum) return player.notify('~r~Сумма не указана');
      if (isNaN(sum) || sum < 0 || sum > 100000000) return player.notify('~r~Сумма указана не верно');

      _menu.menu.selectFraction(player, 'gang').then(targetfraction => {
        _menu.menu.close(player);

        if (typeof targetfraction !== 'number') return;
        if (targetfraction == _user.user.getPlayerFraction(player)) return player.notify('~r~Вы действительно хотите продать территорию самим себе?');

        let target = _user.user.getNearestPlayers(player, 5).find(item => _user.user.getPlayerFraction(item) == targetfraction && _user.user.isLeader(player));

        if (!target) return player.notify('~r~Лидер ' + _fractions.fractionUtil.getFractionName(targetfraction) + ' поблизости не обнаружен');
        if (!gangzones.find(item => item.id != q.id && item.ownerid == _user.user.getPlayerFraction(target) && _methods.methods.distanceToPos2D(q.position, item.position) <= 108)) return player.notify('~r~Данная территория не прилегает к подконтрольным выбранной банде');
        player.notify('~g~Предложение отправлено');

        _user.user.accept(target, "Забрать территорию?", "~g~Забрать за $" + sum, "~r~Нет").then(status => {
          if (!mp.players.exists(player)) return;
          if (!mp.players.exists(target)) return;

          if (!status) {
            player.notify('~r~Предложение отклонено');
            target.notify('~r~Вы отклонили предложение');
            return;
          }

          if (_user.user.getCashMoney(target) < sum) {
            player.notify('~r~Продать не удалось');
            target.notify('~r~У вас недостаточно средств');
            return;
          }

          _user.user.removeCashMoney(target, sum);

          _user.user.addCashMoney(player, sum);

          _gangWarsZone.gangWarsZoneEntity.findOne({
            where: {
              id
            }
          }).then(item => {
            item.owner = targetfraction;
            item.save().then(() => {
              reloadGangWarZones();
              player.notify('~g~Успешно');
              target.notify('~g~Успешно');
            });
          });
        });
      });
    });
  });
  mp.events.register('tablet:gangter:attack', (player, id) => {
    if (!_user.user.isGang(player)) return player.notify('~r~Вы не член банды');
    let q = gangzones.find(item => item.id == id);
    if (!q) return player.notify('~r~Территория не обнаружена');
    if (!q.ownerid) return player.notify('~r~Территория никому не принадлежит');
    if (q.ownerid == _user.user.getPlayerFraction(player)) return player.notify('~r~Территория принадлежит вашей банде');
    if (!_methods.methods.pointInBox([player.position.x, player.position.y], _methods.methods.coordBoxToPoints(q.position, q.position.d))) return player.notify('~r~Вы должны находится на территории');
    if (_user.user.getPlayerFractionRank(player) < _gangwar.attackMinRank) return player.notify(`~r~Для атаки необходимо иметь ранг ${_gangwar.attackMinRank} или выше`);
    if (q.resp) return player.notify('~r~Респу нельзя атаковать');

    if (attackCounter.has(_user.user.getPlayerFraction(player))) {
      if (attackCounter.get(_user.user.getPlayerFraction(player)) >= maxAttacksFraction) {
        return player.notify('~r~В сутки можно нападать только ' + maxAttacksFraction + ' раза');
      }
    }

    if (defenceCounter.has(_user.user.getPlayerFraction(player))) {
      if (defenceCounter.get(q.ownerid) >= maxAttacksFractionTarget) {
        return player.notify('~r~На эту банду уже слишком много раз нападали');
      }
    }

    if (attackTerBlock.has(q.id)) {
      player.notify('~r~У данной территории временный иммунитет');
    }

    let time = new Date();
    if (!_methods.methods.isTestServer() && (time.getHours() < minTimeAttack || time.getHours() > maxTimeAttack)) return player.notify(`~r~Атаковать можно с ${minTimeAttack} до ${maxTimeAttack} OOC времени`);
    if (gangzones.find(item => item.attack)) return player.notify('~r~На данный момент уже атакуется другая территория');
    if (!gangzones.find(item => item.id != q.id && item.ownerid == _user.user.getPlayerFraction(player) && _methods.methods.distanceToPos2D(q.position, item.position) <= 108)) return player.notify('~r~Данная территория не прилегает к подконтрольным вашей банде');
    if (attackBlock.has(_user.user.getPlayerFraction(player))) return player.notify('~r~Ваша банда уже атакует либо защищает какую то территорию либо это происходило менее 30 минут назад');
    let protects = mp.players.toArray().filter(item => _user.user.getPlayerFraction(item) == q.ownerid);
    if (!_methods.methods.isTestServer() && protects.length < onlineRequest) return player.notify(`~r~Количество членов банды ${_fractions.fractionUtil.getFractionName(q.ownerid)} в штате менее ${onlineRequest}`);
    let attacks = mp.players.toArray().filter(item => _user.user.getPlayerFraction(item) == _user.user.getPlayerFraction(player));
    if (!_methods.methods.isTestServer() && attacks.length < onlineRequest) return player.notify(`~r~Количество членов банды ${_fractions.fractionUtil.getFractionName(_user.user.getPlayerFraction(player))} в штате менее ${onlineRequest}`);
    player.notify('~g~Вы начали атаку');
    mp.players.toArray().filter(target => _user.user.getPlayerFraction(target) == q.ownerid).map(target => {
      _user.user.bigAlert(target, `На вашу территорию (${q.name}) напали`, 'warning', 7500);

      _user.user.setWaypoint(target, q.position.x, q.position.y);
    });
    attack(q, _user.user.getPlayerFraction(player));
  });
}, 100);

function attack(ter, attack) {
  const terid = ter.id;
  attackList.set(ter.id, {
    owner: ter.ownerid,
    attack,
    killowner: 0,
    killattack: 0,
    start: _methods.methods.getTimeStamp(),
    position: ter.position,
    killfeed: [],
    timer: warTime
  });
  reloadGangWarZones();
  mp.players.call('gangWarPos', [JSON.stringify(ter.position)]);
  let ints = setInterval(() => {
    let item = attackList.get(terid);

    if (item) {
      if (item.timer > 0) {
        attackList.set(terid, _objectSpread(_objectSpread({}, item), {}, {
          timer: item.timer - 1
        }));
      } else {
        clearInterval(ints);
      }
    } else {
      clearInterval(ints);
    }
  }, 1000);
  setTimeout(() => {
    let data = attackList.get(ter.id);
    if (!data) return;
    mp.players.call('gangWarStop');

    if (data.killattack == 0 && data.killowner == 0) {
      if (mp.players.toArray().filter(target => [attack].includes(_user.user.getPlayerFraction(target)) && target.dist(data.position) <= distanceForKill / 2).length > 0) {
        mp.players.toArray().filter(target => [ter.ownerid, attack].includes(_user.user.getPlayerFraction(target))).map(target => {
          if (_user.user.getPlayerFraction(target) == ter.ownerid) target.notify('~r~Вы не смогли отстоять территорию');else target.notify('~g~Ваша банда захватила территорию');
          mp.events.triggerBrowser(target, 'gangWarEnd');
        });
        setTimeout(() => {
          updateTerOwner(terid, attack);
        }, 3000);
      } else {
        mp.players.toArray().filter(target => [ter.ownerid, attack].includes(_user.user.getPlayerFraction(target))).map(target => {
          if (_user.user.getPlayerFraction(target) == ter.ownerid) target.notify('~g~Ваша банда смогла отстоять территорию');else target.notify('~r~Вам не удалось захватить территорию');
          mp.events.triggerBrowser(target, 'gangWarEnd');
        });
        setTimeout(() => {
          reloadGangWarZones();
        }, 3000);
      }
    } else if (data.killattack > data.killowner) {
      mp.players.toArray().filter(target => [ter.ownerid, attack].includes(_user.user.getPlayerFraction(target))).map(target => {
        if (_user.user.getPlayerFraction(target) == ter.ownerid) target.notify('~r~Вы не смогли отстоять территорию');else target.notify('~g~Ваша банда захватила территорию');
        mp.events.triggerBrowser(target, 'gangWarEnd');
      });
      setTimeout(() => {
        updateTerOwner(terid, attack);
      }, 3000);
    } else {
      mp.players.toArray().filter(target => [ter.ownerid, attack].includes(_user.user.getPlayerFraction(target))).map(target => {
        if (_user.user.getPlayerFraction(target) == ter.ownerid) target.notify('~g~Ваша банда смогла отстоять территорию');else target.notify('~r~Вам не удалось захватить территорию');
        mp.events.triggerBrowser(target, 'gangWarEnd');
      });
      setTimeout(() => {
        reloadGangWarZones();
      }, 3000);
    }

    if (attackCounter.has(attack)) {
      attackCounter.set(attack, attackCounter.get(attack) + 1);
    } else {
      attackCounter.set(attack, 1);
    }

    if (defenceCounter.has(ter.ownerid)) {
      defenceCounter.set(ter.ownerid, defenceCounter.get(ter.ownerid) + 1);
    } else {
      defenceCounter.set(ter.ownerid, 1);
    }

    attackBlock.set(attack, true);
    setTimeout(() => {
      attackBlock.delete(attack);
    }, 30 * 1000 * 60);
    attackTerBlock.set(terid, true);
    setTimeout(() => {
      attackTerBlock.delete(terid);
    }, 60000 * 60 * 1.5);
    attackList.delete(ter.id);
  }, warTime * 60 * 1000);
  sendWarData({
    owner: ter.ownerid,
    attack,
    killowner: 0,
    killattack: 0,
    start: _methods.methods.getTimeStamp(),
    position: ter.position,
    killfeed: [],
    timer: warTime
  });
}

mp.events.add('server:login:success:after', player => {
  loadTerrData(player);
  if (!_user.user.isGang(player)) return;
  attackList.forEach(item => {
    if (_user.user.getPlayerFraction(player) == item.attack || _user.user.getPlayerFraction(player) == item.owner) {
      let targets = mp.players.toArray().filter(target => [item.owner, item.attack].includes(_user.user.getPlayerFraction(target)));
      const attacks = targets.filter(player => _user.user.getPlayerFraction(player) === item.attack && _methods.methods.distanceToPos(item.position, player.position) < 150).length;
      const owners = targets.filter(player => _user.user.getPlayerFraction(player) === item.owner && _methods.methods.distanceToPos(item.position, player.position) < 150).length;
      mp.events.triggerBrowser(player, 'gangWarDataSend', item.killattack, item.killowner, item.attack, item.owner, item.timer, attacks, owners);
      player.call('gangWarPos', [JSON.stringify(item.position)]);
    }
  });
});

function loadTerrData(player) {
  if (player) return player.call('gangTerData', [JSON.stringify(gangzones)]);
  mp.players.call('gangTerData', [JSON.stringify(gangzones)]);
}

mp.events.add("playerDeath", (player, reason, killer) => {
  if (!killer) return;
  if (!_user.user.isGang(player)) return;
  if (!_user.user.isGang(killer)) return;
  let attackGetq = [...attackList].find(([_, item]) => [item.attack, item.owner].includes(_user.user.getPlayerFraction(player)));
  if (!attackGetq) return;
  if (![...attackList].find(([_, item]) => [item.attack, item.owner].includes(_user.user.getPlayerFraction(killer)))) return;
  if (![...attackList].find(([_, item]) => [item.attack, item.owner].includes(_user.user.getPlayerFraction(player)))) return;
  let attackGet = attackGetq[1];
  if (_methods.methods.distanceToPos2D(killer.position, attackGet.position) > distanceForKill) return;
  attackGet.killfeed.push({
    killer: `${_user.user.getRpName(killer)}`,
    who: `${_user.user.getRpName(player)}`,
    gun: "",
    attack: attackGet.attack == _user.user.getPlayerFraction(killer)
  });
  setTimeout(() => {
    let targets = mp.players.toArray().filter(target => [attackGet.owner, attackGet.attack].includes(_user.user.getPlayerFraction(target)));
    const attacks = targets.filter(player => _user.user.getPlayerFraction(player) === attackGet.attack && _methods.methods.distanceToPos(attackGet.position, player.position) < 150).length;
    const owners = targets.filter(player => _user.user.getPlayerFraction(player) === attackGet.owner && _methods.methods.distanceToPos(attackGet.position, player.position) < 150).length;
    targets.map(target => {
      mp.events.triggerBrowser(target, 'gangWarKill', {
        killer: `${_user.user.getRpName(killer)}`,
        who: `${_user.user.getRpName(player)}`,
        gun: "",
        attack: attackGet.attack == _user.user.getPlayerFraction(killer),
        targetattack: attackGet.attack == _user.user.getPlayerFraction(player)
      }, attackGet.killattack, attackGet.killowner, attacks, owners);
    });
  }, 500);

  if (_user.user.getPlayerFraction(player) == _user.user.getPlayerFraction(killer)) {
    if (attackGet.owner == _user.user.getPlayerFraction(killer)) attackGet.killattack += 1;
    if (attackGet.attack == _user.user.getPlayerFraction(killer)) attackGet.killowner += 1;
  } else if (attackGet.owner == _user.user.getPlayerFraction(killer)) attackGet.killowner += 1;else if (attackGet.attack == _user.user.getPlayerFraction(killer)) attackGet.killattack += 1;
});

function sendWarData(item) {
  let targets = mp.players.toArray().filter(target => [item.owner, item.attack].includes(_user.user.getPlayerFraction(target)));
  const attacks = targets.filter(player => _user.user.getPlayerFraction(player) === item.attack && _methods.methods.distanceToPos(item.position, player.position) < 150).length;
  const owners = targets.filter(player => _user.user.getPlayerFraction(player) === item.owner && _methods.methods.distanceToPos(item.position, player.position) < 150).length;
  targets.map(target => {
    mp.events.triggerBrowser(target, 'gangWarDataSend', item.killattack, item.killowner, item.attack, item.owner, item.timer, attacks, owners);
  });
  mp.players.call('gangWarPos', [JSON.stringify(item.position)]);
}

let givedmoney = false;
setInterval(() => {
  if (givedmoney) return;
  let d = new Date();
  let used = d.getMinutes() == 2;

  if (used) {
    givedmoney = true;
    setTimeout(() => {
      givedmoney = false;
    }, 120000);

    _fractions.fractionUtil.list.filter(item => item.gang).map(fraction => {
      let countter = gangzones.filter(item => item.ownerid == fraction.id).length;

      if (countter > 0) {
        let givechest = false;

        _moneyChest.moneyChests.forEach(item => {
          if (givechest) return;

          if (item.fraction == fraction.id) {
            givechest = true;
            item.money += _methods.methods.parseInt(moneyPerTer * countter);
            item.save();
          }
        });
      }
    });
  }
}, 30000);
},{"../web":"txRo","../../declaration/gangwar":"HDmV","./entity/gangWarsZone":"PCk1","../../util/fractions":"Zeqt","../user":"QE3B","./menu":"Aiz7","../modules/methods":"qXSp","./moneyChest":"HIeq"}],"WakH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logFractionGunEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let logFractionGunEntity = class logFractionGunEntity extends _sequelizeTypescript.Model {};
exports.logFractionGunEntity = logFractionGunEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], logFractionGunEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], logFractionGunEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(1024),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], logFractionGunEntity.prototype, "do", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logFractionGunEntity.prototype, "timestamp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logFractionGunEntity.prototype, "fraction_id", void 0);

exports.logFractionGunEntity = logFractionGunEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_fraction_gun"
})], logFractionGunEntity);
},{}],"sAsv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chest = void 0;

var _methods = require("./methods");

var _inventory = require("../inventory");

var _menu = require("./menu");

var _user = require("../user");

var _items = require("../items");

var _fractions = require("../../util/fractions");

var _customChest = require("./entity/customChest");

var _gangwar = require("./gangwar");

var _chest = require("./chest");

var _equip = require("../../util/equip");

var _inventory2 = require("../../util/inventory");

var _logFractionGunEntity = require("./entity/logFractionGunEntity");

var _admin = require("./admin");

const accessTimer = 10;
let accessBagPosition = [{
  x: 442.99,
  y: -1017.98,
  z: 28.67,
  d: 0
}, {
  x: 471.11,
  y: -1021.55,
  z: 28.18,
  d: 0
}, {
  x: 408.23,
  y: -983.07,
  z: 29.27,
  d: 0
}, {
  x: 127.09,
  y: -733.10,
  z: 33.13,
  d: 0
}, {
  x: 1858.05,
  y: 3678.08,
  z: 33.71,
  d: 0
}, {
  x: -453.91,
  y: 5999.53,
  z: 31.34,
  d: 0
}, {
  x: -2410.47,
  y: 3324.71,
  z: 32.83,
  d: 0
}, {
  x: -1516.71,
  y: 851.46,
  z: 181.59,
  d: 0
}, {
  x: -1366.50,
  y: 56.68,
  z: 54.10,
  d: 0
}, {
  x: -3024.25,
  y: 80.26,
  z: 11.61,
  d: 0
}, {
  x: -1886.83,
  y: 2049.96,
  z: 140.98,
  d: 0
}];

_gangwar.gangRespPosition.map(item => {
  accessBagPosition.push({
    x: item.x,
    y: item.y,
    z: item.z,
    d: 0
  });
});

class ChestElement {
  constructor(id, name, position, dimension, settings) {
    this.id = id;
    this.name = name;
    this.settings = settings;
    this.positiondata = position;
    this.dimensiondata = dimension;
    this.restrictItems = [];
    this.grabmoney = 0;
    this.point = _methods.methods.createDynamicCheckpoint(position, "Нажмите ~g~E~w~ чтобы открыть " + name, player => {
      this.open(player);
    }, 1, this.dimension);
    this.timerAmount = new Map();
    this.settings.pincode = 0;
    chest.pool.push(this);
  }

  getTimerAmount(target, item_id) {
    const player = typeof target === "number" ? target : _user.user.getId(target);
    if (!this.timerAmount.has(player + "_" + item_id)) this.timerAmount.set(player + "_" + item_id, 0);
    return this.timerAmount.get(player + "_" + item_id);
  }

  canTakeItem(player, item_id) {
    let itemsettings = this.settings.accessList.find(item => item.id === item_id);
    if (!itemsettings) return false;
    let countAccess = itemsettings.timer;
    let rankAccess = itemsettings.rank;
    let taked = this.getTimerAmount(player, item_id);
    if (rankAccess > _user.user.getPlayerFractionRank(player)) return false;
    if (countAccess <= taked) return false;
    return true;
  }

  addTimerAmount(target, item_id) {
    const player = typeof target === "number" ? target : _user.user.getId(target);
    let value = this.getTimerAmount(player, item_id);
    this.timerAmount.set(player + "_" + item_id, value + 1);
    setTimeout(() => {
      let value = this.getTimerAmount(player, item_id);
      this.timerAmount.set(player + "_" + item_id, value - 1);
    }, accessTimer * 60000);
  }

  canControl(player) {
    return _user.user.isAdminNow(player, 5) || _user.user.getPlayerFraction(player) == this.settings.fraction && _user.user.isLeader(player);
  }

  dropIllegal(player) {
    let m = _menu.menu.new(player, "Утилизация", "Список доступных предметов");

    _inventory.inventory.getItemListData(1, _user.user.getId(player)).map(item => {
      let chestItem = _chest.illegalList.find(itm => item.item_id >= itm.range[0] && item.item_id <= itm.range[1]);

      if (chestItem) {
        let desc = _items.items.getItemNameById(item.item_id);

        m.newItem({
          name: desc,
          onpress: () => {
            let reward = item.count < (0, _inventory2.getDefaultCount)(item.item_id) ? 0 : chestItem.cost;

            _inventory.inventory.deleteItem(item.id);

            _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Утилизировал на складе ' + this.name + ' ' + desc, this.settings.fraction);

            _user.user.log(player, "ChestLog", 'Утилизировал на складе ' + this.name + ' ' + desc + " " + this.settings.fraction);

            this.dropIllegal(player);

            if (reward > 0) {
              _user.user.addCashMoney(player, chestItem.cost);

              player.notify("~g~Получено за утилизацию - " + chestItem.cost + "$");
            }

            this.save();
          }
        });
      }
    });

    m.open();
  }

  open(player) {
    if (_user.user.getPlayerFraction(player) != this.settings.fraction && !_user.user.isAdminNow(player, 5)) return player.notify(`~r~У вас нет доступа`);

    let m = _menu.menu.new(player, "", this.name);

    m.sprite = "shopui_title_gr_gunmod";
    m.newItem({
      name: "Содержимое",
      onpress: () => {
        _menu.menu.close(player);

        _inventory.inventory.openInventory(player);
      }
    });

    if (_user.user.isGos(player)) {
      m.newItem({
        name: "Утилизировать конфискат",
        onpress: () => this.dropIllegal(player)
      });
    }

    if (_admin.customParams.chestorders) {
      let transferBag = _user.user.getItem(player, _inventory.inventory.types.BagTransfer);

      if (transferBag) {
        m.newItem({
          name: "Разгрузить сумку",
          onpress: () => {
            let transferBag = _user.user.getItem(player, _inventory.inventory.types.BagTransfer);

            if (!transferBag) return player.notify(`~r~У вас нет в инвентаре ~b~${_items.items.getItemNameById(_inventory.inventory.types.BagTransfer)}`);

            let allitems = _inventory.inventory.getItemListData(_inventory.inventory.types.BagTransfer, transferBag.id);

            if (allitems.length == 0) return player.notify(`~r~Сумка пустая`);

            let currentAmmount = _inventory.inventory.currentAmount(_inventory.inventory.types.StockFraction, this.id);

            let addedWeight = 0;
            allitems.map(item => {
              addedWeight += _items.items.getItemWeightById(item.item_id);
            });
            if (currentAmmount + addedWeight > _inventory.inventory.maxAmount(_inventory.inventory.types.StockFraction, this.id)) return player.notify(`~r~Склад переполнен`);
            allitems.map(item => {
              _inventory.inventory.updateItemOwnerSystem(item.id, _inventory.inventory.types.StockFraction, this.id);
            });

            _inventory.inventory.deleteItem(transferBag.id);

            _user.user.checkComponents(player);
          }
        });
      }
    }

    if (_user.user.isGos(player) && player.bankgrabmoney) {
      m.newItem({
        name: "Разгрузить сумку с деньгами",
        onpress: () => {
          if (!player.bankgrabmoney) return player.notify(`~r~У вас нет сумки с деньгами`);
          this.grabmoney += player.bankgrabmoney;
          player.bankgrabmoney = 0;
          player.notify(`~g~Вы сдали сумку`);

          _user.user.checkComponents(player);
        }
      });
    }

    if (this.settings.fraction == 4 && _user.user.getPlayerFractionRank(player) > 11 && _admin.customParams.chestorders) {
      m.newItem({
        name: "Получить транспортировочную сумку",
        desc: "Она необходима для транспортировки вещей в другие склады",
        onpress: () => {
          if (_user.user.hasItem(player, _inventory.inventory.types.BagTransfer)) return player.notify(`~r~У вас уже есть ~b~${_items.items.getItemNameById(_inventory.inventory.types.BagTransfer)}`);

          _user.user.giveItem(player, _inventory.inventory.types.BagTransfer, 1, true);
        }
      });
      m.newItem({
        name: "Новый заказ",
        onpress: () => {
          this.newOrder(player);
        }
      });
      m.newItem({
        name: "Загрузка предметов в транспортную сумку",
        onpress: () => {
          if (!_user.user.hasItem(player, _inventory.inventory.types.BagTransfer)) return player.notify(`~r~У вас нет в инвентаре ~b~${_items.items.getItemNameById(_inventory.inventory.types.BagTransfer)}`);

          let submenu2 = _menu.menu.new(player, "Выберите предметы");

          let list = new Map();
          this.settings.accessList.map(item => {
            list.set(item.id, 0);
            submenu2.newItem({
              name: _items.items.getItemNameById(item.id),
              type: "range",
              rangeselect: [0, 1000],
              onchange: v => {
                list.set(item.id, v);
              }
            });
          });
          submenu2.newItem({
            name: "~b~Выгрузить указанные предметы в сумку",
            onpress: () => {
              _user.user.accept(player, "Вы уверены?").then(status => {
                if (!status) return;

                let transferBag = _user.user.getItem(player, _inventory.inventory.types.BagTransfer);

                if (!transferBag) return player.notify(`~r~У вас нет в инвентаре ~b~${_items.items.getItemNameById(_inventory.inventory.types.BagTransfer)}`);
                let allitems = this.allItems().filter(item => list.has(item.item_id));
                list.forEach((amount, itemid) => {
                  if (amount > 0) {
                    let itms = allitems.filter(item => item.item_id == itemid);

                    if (itms.length < amount) {
                      player.notify(`~r~${_items.items.getItemNameById(itemid)} не был загружен. Причина - отсутствует на складе в достаточном количестве`);
                    } else {
                      if (_inventory.inventory.currentAmount(_inventory.inventory.types.BagTransfer, transferBag.id) + _items.items.getItemWeightById(itemid) * amount > _inventory.inventory.maxAmount(_inventory.inventory.types.BagTransfer, transferBag.id)) {
                        player.notify(`~r~${_items.items.getItemNameById(itemid)} не был загружен. Причина - недостаточно места в сумке`);
                      } else {
                        for (let id = 0; id < amount; id++) {
                          _inventory.inventory.updateItemOwnerSystem(itms[id].id, _inventory.inventory.types.BagTransfer, transferBag.id);
                        }
                      }
                    }
                  }
                });
                player.notify(`~g~Готово`);
              });
            }
          });
          submenu2.open();
        }
      });
    }

    if (this.canControl(player) || _user.user.getPlayerFractionRank(player) >= 13) {
      m.newItem({
        name: "Записи склада",
        onpress: () => {
          _menu.menu.close(player);

          _user.user.setGui(player, "chestLog");

          _logFractionGunEntity.logFractionGunEntity.findAll({
            where: {
              fraction_id: this.settings.fraction
            },
            order: [['id', 'DESC']],
            limit: 400
          }).then(data => {
            let list = [];
            data.map(item => {
              let what = String(item.do);

              if (item.do.indexOf('Взял') == 0) {
                list.push({
                  who: item.name,
                  what: what,
                  when: item.timestamp,
                  take: true
                });
              } else if (what.indexOf('Положил') == 0) {
                list.push({
                  who: item.name,
                  what: what,
                  when: item.timestamp,
                  take: false
                });
              } else {
                list.push({
                  who: item.name,
                  what: what,
                  when: item.timestamp,
                  take: false
                });
              }
            });
            mp.events.triggerBrowser(player, 'chest:log', _fractions.fractionUtil.getFractionIcon(this.settings.fraction), _fractions.fractionUtil.getFractionName(this.settings.fraction), list);
          });
        }
      });
      m.newItem({
        name: "Статус",
        more: this.settings.locked ? '~g~Закрыт' : '~r~Открыт',
        onpress: () => {
          this.settings.locked = !this.settings.locked;
          player.notify('Склад ' + (this.settings.locked ? '~g~Закрыт' : '~r~Открыт'));
          this.open(player);
          this.save();
        }
      });
      m.newItem({
        name: "Настройка доступа",
        desc: 'Вы можете указать кто какой предмет и в каком количестве может брать',
        onpress: () => {
          const submenuopen = () => {
            let submenu = _menu.menu.new(player, "Настройка доступа", "Список");

            submenu.onclose = () => {
              return this.open(player);
            };

            let itemsList = _inventory.inventory.getItemListData(_inventory.inventory.types.StockFraction, this.id);

            itemsList.map(item => {
              if (!this.settings.accessList.find(q => q.id == item.item_id)) this.settings.accessList.push({
                id: item.item_id,
                rank: 1,
                timer: 1
              });
            });
            this.settings.accessList.map(item => {
              submenu.newItem({
                name: _items.items.getItemNameById(item.id),
                more: `Р: ${item.rank} | С: ${item.timer}`,
                onpress: () => {
                  let submenu2 = _menu.menu.new(player, "Настройка");

                  submenu2.onclose = () => {
                    return submenuopen();
                  };

                  submenu2.newItem({
                    name: "Ранг для доступа",
                    type: "list",
                    list: ["~r~Необходимо выбрать", ..._fractions.fractionUtil.getFractionRanks(this.settings.fraction)],
                    listSelected: item.rank,
                    onpress: val => {
                      if (val.listSelected <= 0) return player.notify(`~r~Необходимо выбрать ранг`);
                      item.rank = val.listSelected;
                      this.save();
                      player.notify('~g~Настройка ранга для ' + _items.items.getItemNameById(item.id) + ' сохранена');
                    }
                  });
                  submenu2.newItem({
                    name: "Счётчик количества",
                    desc: "Сколько можно брать предметов за " + accessTimer + ' мин.',
                    type: "range",
                    rangeselect: [0, 20],
                    listSelected: item.timer,
                    onpress: val => {
                      if (val.listSelected <= 0) return player.notify(`~r~Небходимо выбрать больше 0`);
                      item.timer = val.listSelected;
                      this.save();
                      player.notify('~g~Настройка счётчика для ' + _items.items.getItemNameById(item.id) + ' сохранена');
                    }
                  });
                  submenu2.open();
                }
              });
            });
            submenu.open();
          };

          submenuopen();
        }
      });
    }

    if (_user.user.isAdminNow(player, 5)) {
      m.newItem({
        name: "~b~Админ раздел",
        onpress: () => {
          player.notify('~g~Серёга, епта, это просто текст, листай ниже');
        }
      });
      m.newItem({
        name: "Указать вес склада",
        onpress: () => {
          _menu.menu.input(player, "Введите вес", `${this.settings.weight / 1000}`, 5, "int").then(results => {
            if (!results) return;

            let result = _methods.methods.parseInt(results);

            if (isNaN(result) || result < 1 || result > 9999999) return player.notify(`~r~Вес введён не верно`);
            this.settings.weight = result * 1000;
            this.save();
            player.notify('~g~Новый вес установлен');
          });
        }
      });
      m.newItem({
        name: "Закинуть предметы в склад",
        onpress: () => {
          let submenu2 = _menu.menu.new(player, "Выберите предметы");

          let list = new Map();
          this.settings.accessList.map(item => {
            list.set(item.id, 0);
            submenu2.newItem({
              name: _items.items.getItemNameById(item.id),
              type: "range",
              rangeselect: [0, 1000],
              onchange: v => {
                list.set(item.id, v);
              }
            });
          });
          submenu2.newItem({
            name: "Внести указанные вещи на склад",
            onpress: () => {
              _user.user.accept(player, "Вы уверены?").then(status => {
                if (!status) return;
                list.forEach((amount, itemid) => {
                  if (amount > 0) _inventory.inventory.createManyItem(itemid, 0, _inventory.inventory.types.StockFraction, this.id, amount);
                });
                player.notify(`~g~Склад пополнен`);
              });
            }
          });
          submenu2.open();
        }
      });
      m.newItem({
        name: "Сменить фракцию склада",
        onpress: () => {
          _menu.menu.selectFraction(player).then(fra => {
            if (!_fractions.fractionUtil.getFraction(fra)) return player.notify(`~r~Отмена`);

            const fraction = _methods.methods.parseInt(fra);

            this.settings.fraction = fraction;
            this.save();
            player.notify('~g~Фракция изменена');
          });
        }
      });
      m.newItem({
        name: "~r~Удалить склад",
        onpress: () => {
          _user.user.accept(player, "Вы уверены?").then(status => {
            if (!status) return;
            this.delete();
            player.notify('~g~Склад успешно удалён');
          });
        }
      });
    }

    m.open();
  }

  allItems() {
    return _inventory.inventory.allItems().filter(item => item.owner_type == _inventory.inventory.types.StockFraction && item.owner_id == this.id);
  }

  newOrder(player) {
    let m = _menu.menu.new(player, this.name, "Список доступного арсенала");

    let itemsorder = new Map();

    _equip.EquipDataItems.map(item => {
      if (item.shiporder) {
        itemsorder.set(item.model, 0);
        m.newItem({
          name: item.name,
          type: "range",
          rangeselect: [0, 1000],
          onchange: value => itemsorder.set(item.model, value)
        });
      }
    });

    m.newItem({
      name: "~g~Заказать",
      onpress: () => {
        let resitem = [];
        let weight = 0;
        itemsorder.forEach((value, item) => {
          weight += _items.items.getItemAmountById(_methods.methods.parseInt(item)) * value;
          resitem.push({
            model: item,
            amount: value
          });
        });
        if (weight > _chest.maxShipWeight * 1000) return player.notify("~r~Заказ не может превышать вес в " + _chest.maxShipWeight + "кг. Вес вашего текущего заказа - " + _methods.methods.parseInt(weight / 1000) + " кг.");
        (0, _chest.newOrder)(player, resitem);
        this.save();
      }
    });
    m.open();
  }

  save() {
    _customChest.customChest.findOne({
      where: {
        id: this.id
      }
    }).then(item => {
      if (!item) return;
      item.pos = this.position;
      item.dimension = this.dimension;
      item.settings = this.settings;
      item.name = this.name;
      item.save();
    });
  }

  delete() {
    _customChest.customChest.destroy({
      where: {
        id: this.id
      }
    });

    this.point.delete();
    chest.pool.splice(this.getInPoolIndex(), 1);
  }

  static getInPool(id) {
    return chest.pool.find(item => item.id == id);
  }

  getInPoolIndex() {
    return chest.pool.findIndex(item => item.id == this.id);
  }

  get position() {
    return this.positiondata;
  }

  set position(value) {
    this.positiondata = value;
    if (this.point) this.point.updatePos(value);
  }

  get dimension() {
    return this.dimensiondata;
  }

  set dimension(value) {
    this.dimensiondata = value;
    if (this.point) this.point.updateDimension(value);
  }

}

const chest = {
  new: (id, name, position, dimension, settings) => {
    if (chest.pool.find(item => item.id == id)) {
      new Error("[Chest] Dublicate ID " + id);
      return null;
    }

    return new ChestElement(id, name, position, dimension, settings);
  },
  create: (player, name, fraction) => {
    return new Promise((resolve, reject) => {
      const position = {
        x: player.position.x,
        y: player.position.y,
        z: player.position.z - 1
      };
      const settings = {
        fraction,
        pincode: 0,
        accessList: [],
        locked: false,
        weight: 1000000
      };

      _customChest.customChest.create({
        name,
        dimension: player.dimension,
        pos: position,
        settings
      }).then(item => {
        resolve(chest.new(item.id, name, new mp.Vector3(position.x, position.y, position.z), player.dimension, settings));
        player.notify('~g~Склад успешно создан');
      }).catch(err => {
        player.notify('~r~Возникла ошибка');
        resolve(null);
        console.error(err);
      });
    });
  },
  get: id => chest.pool.find(item => item.id == id),
  getNearest: (player, dist = 10, useZ = true) => {
    return chest.pool.find(item => player.dimension == item.dimension && _methods.methods.distanceToPos2D(item.position, player.position) <= dist && (!useZ || _methods.methods.distanceToPos(item.position, player.position) <= dist));
  },
  canTransferBag: player => {
    if (!!accessBagPosition.find(item => _methods.methods.distanceToPos2D(item, player.position) <= 30 && (!item.d || player.dimension == item.d))) return true;
    if (chest.getNearest(player, 10, true)) return true;
    if (player.dist(_chest.order.colshapePos) < 20 && player.dimension == 0) return true;
    return false;
  },
  at: id => chest.get(id),
  pool: [],
  load: () => {
    _customChest.customChest.findAll().then(items => {
      items.map(item => {
        chest.new(item.id, item.name, new mp.Vector3(item.pos.x, item.pos.y, item.pos.z), item.dimension, item.settings);
      });
    }).catch(err => {
      console.error(err);
    });
  }
};
exports.chest = chest;
},{"./methods":"qXSp","../inventory":"m5ow","./menu":"Aiz7","../user":"QE3B","../items":"nuVl","../../util/fractions":"Zeqt","./entity/customChest":"iNNl","./gangwar":"cDXP","./chest":"eVha","../../util/equip":"EWWr","../../util/inventory":"Jhu1","./entity/logFractionGunEntity":"WakH","./admin":"s4Xg"}],"kwVd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weaponsUtil = exports.blackListWeapon = exports.WEAPON_LEVEL_MIN = void 0;
const WEAPON_LEVEL_MIN = 2;
exports.WEAPON_LEVEL_MIN = WEAPON_LEVEL_MIN;
const blackListWeapon = ["weapon_combatmg_mk2", "weapon_gusenberg", "weapon_flaregun", "weapon_marksmanpistol", "weapon_revolver_mk2", "weapon_doubleaction", "weapon_raypistol", "weapon_navyrevolver", "weapon_smg_mk2", "weapon_raycarbine", "weapon_assaultshotgun", "weapon_bullpupshotgun", "weapon_assaultrifle_mk2", "weapon_combatmg", "weapon_combatmg_mk2", "weapon_heavysniper", "weapon_heavysniper_mk2", "weapon_marksmanrifle_mk2", "weapon_rpg", "weapon_grenadelauncher", "weapon_grenadelauncher_smoke", "weapon_minigun", "weapon_firework", "weapon_railgun", "weapon_hominglauncher", "weapon_compactlauncher", "weapon_rayminigun", "weapon_grenade", "weapon_bzgas", "weapon_molotov", "weapon_stickybomb", "weapon_proxmine", "weapon_snowball", "weapon_pipebomb", "weapon_ball", "weapon_smokegrenade", "weapon_flare", "weapon_petrolcan", "weapon_hazardcan"];
exports.blackListWeapon = blackListWeapon;
const weaponsUtil = {
  hashesMap: [['SniperRifle', 100416529], ['FireExtinguisher', 101631238], ['CompactGrenadeLauncher', 1980066947], ['Snowball', 126349499], ['VintagePistol', 137902532], ['CombatPDW', 171789620], ['HeavySniper_Mk2', 1429927647], ['HeavySniper', 205991906], ['SweeperShotgun', -1652067232], ['MicroSMG', 324215364], ['Wrench', 419712736], ['Pistol', 453432689], ['PumpShotgun', 487013001], ['APPistol', 584646201], ['Ball', 600439132], ['Molotov', 615608432], ['SMG', 736523883], ['StickyBomb', 741814745], ['PetrolCan', 883325847], ['StunGun', 911657153], ['AssaultRifle_Mk2', 961495388], ['HeavyShotgun', 984333226], ['Minigun', 1119849093], ['GolfClub', 1141786504], ['FlareGun', 1198879012], ['Flare', 1233104067], ['GrenadeLauncherSmoke', -275866417], ['Hammer', 1317494643], ['CombatPistol', 1593441988], ['Gusenberg', 1627465347], ['CompactRifle', 1649403952], ['HomingLauncher', 1672152130], ['Nightstick', 1737195953], ['Railgun', 1834241177], ['SawnOffShotgun', 2017895192], ['SMG_Mk2', 166524245], ['BullpupRifle', 2132975508], ['Firework', 2138347493], ['CombatMG', 2144741730], ['CarbineRifle', -2084633992], ['Crowbar', -2067956739], ['Flashlight', -1951375401], ['Dagger', -1834847097], ['Grenade', -1813897027], ['PoolCue', -1810795771], ['Bat', -1786099057], ['Pistol50', -1716589765], ['Knife', -1716189206], ['MG', -1660422300], ['BullpupShotgun', -1654528753], ['BZGas', -1600701090], ['GrenadeLauncher', -1568386805], ['NightVision', -1843655570], ['Musket', -1466123874], ['ProximityMine', 986082911], ['AdvancedRifle', -1357824103], ['RPG', -1312131151], ['PipeBomb', -1169823560], ['MiniSMG', -1121678507], ['SNSPistol', -1076751822], ['PistolMk2', -1075685676], ['AssaultRifle', -1074790547], ['SpecialCarbine', -1063057011], ['Revolver', -1045183535], ['MarksmanRifle', -952879014], ['BattleAxe', -853065399], ['HeavyPistol', -771403250], ['Knuckle', -656458692], ['MachinePistol', -619010992], ['CombatMG_Mk2', -439798208], ['MarksmanPistol', -598887786], ['Machete', -581044007], ['SwitchBlade', -538741184], ['AssaultShotgun', -494615257], ['DoubleBarrelShotgun', -275439685], ['AssaultSMG', -270015777], ['Hatchet', -102973651], ['Bottle', -102323637], ['CarbineRifle_Mk2', 1085370391], ['BullpupRifle_Mk2', -2066285827], ['Parachute', -196322845], ['SmokeGrenade', -37975472]],
  hashes: {
    SniperRifle: 100416529,
    FireExtinguisher: 101631238,
    CompactGrenadeLauncher: 125959754,
    Snowball: 126349499,
    VintagePistol: 137902532,
    CombatPDW: 171789620,
    HeavySniperMk2: 177293209,
    HeavySniper: 205991906,
    SweeperShotgun: 317205821,
    MicroSMG: 324215364,
    Wrench: 419712736,
    Pistol: 453432689,
    PumpShotgun: 487013001,
    APPistol: 584646201,
    Ball: 600439132,
    Molotov: 615608432,
    SMG: 736523883,
    StickyBomb: 741814745,
    PetrolCan: 883325847,
    StunGun: 911657153,
    AssaultRifleMk2: 961495388,
    HeavyShotgun: 984333226,
    Minigun: 1119849093,
    GolfClub: 1141786504,
    FlareGun: 1198879012,
    Flare: 1233104067,
    GrenadeLauncherSmoke: 1305664598,
    Hammer: 1317494643,
    CombatPistol: 1593441988,
    Gusenberg: 1627465347,
    CompactRifle: 1649403952,
    HomingLauncher: 1672152130,
    Nightstick: 1737195953,
    Railgun: 1834241177,
    SawnOffShotgun: 2017895192,
    SMGMk2: 2024373456,
    BullpupRifle: 2132975508,
    Firework: 2138347493,
    CombatMG: 2144741730,
    CarbineRifle: 2210333304,
    Crowbar: 2227010557,
    Flashlight: 2343591895,
    Dagger: 2460120199,
    Grenade: 2481070269,
    PoolCue: 2484171525,
    Bat: 2508868239,
    Pistol50: 2578377531,
    Knife: 2578778090,
    MG: 2634544996,
    BullpupShotgun: 2640438543,
    BZGas: 2694266206,
    GrenadeLauncher: 2726580491,
    NightVision: 2803906140,
    Musket: 2828843422,
    ProximityMine: 2874559379,
    AdvancedRifle: 2937143193,
    RPG: 2982836145,
    PipeBomb: 3125143736,
    MiniSMG: 3173288789,
    SNSPistol: 3218215474,
    PistolMk2: 3219281620,
    AssaultRifle: 3220176749,
    SpecialCarbine: 3231910285,
    Revolver: 3249783761,
    MarksmanRifle: 3342088282,
    BattleAxe: 3441901897,
    HeavyPistol: 3523564046,
    Knuckle: 3638508604,
    MachinePistol: 3675956304,
    CombatMGMk2: 3686625920,
    MarksmanPistol: 3696079510,
    Machete: 3713923289,
    SwitchBlade: 3756226112,
    AssaultShotgun: 3800352039,
    DoubleBarrelShotgun: 4019527611,
    AssaultSMG: 4024951519,
    Hatchet: 4191993645,
    Bottle: 4192643659,
    CarbineRifleMk2: 4208062921,
    Parachute: 4222310262,
    SmokeGrenade: 4256991824
  }
};
exports.weaponsUtil = weaponsUtil;
},{}],"m5ow":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.itemsDB = exports.inventory = void 0;

var _methods = require("./modules/methods");

var _chat = require("./modules/chat");

var _user = require("./user");

var _enums = require("./enums");

var _items = require("./items");

var _vehicles = require("./vehicles");

var _weapons = require("./weapons");

var _inventory = require("./modules/entity/inventory");

var _sequelize = require("sequelize");

var _inventory2 = require("../util/inventory");

var _vehicleInfo = require("./modules/vehicleInfo");

var _sharedData = require("../util/sharedData");

var _menu = require("./modules/menu");

var _stock = require("./stock");

var _coffer = require("./coffer");

var _tablet = require("./managers/tablet.events");

var _customchest = require("./modules/customchest");

var _fractions = require("../util/fractions");

var _methods2 = require("../util/methods");

var _weapons2 = require("../util/weapons");

var _houses = require("./houses");

let props = new Map();
let itemsDB = new Map();
exports.itemsDB = itemsDB;
let inventoryBlocksData = new Map();
let updateBlock = new Map();
mp.events.add("inventory:open", (player, ownertype, ownerid) => {
  inventory.openInventory(player, ownertype, ownerid);
});
mp.events.add("inventory:close", player => {
  inventory.closeInventory(player);
});
mp.events.add('playerDeath', player => {
  if (!_user.user.isLogin(player)) return;
  const pos = {
    x: player.position.x,
    y: player.position.y,
    z: player.position.z
  };
  setTimeout(() => {
    if (!mp.players.exists(player)) return;
    player.weaponsAll.map(item => {
      inventory.addWorldItem(player, item.item, 1, 0, 0, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, _items.items.getItemHashById(item.item), 1, -1, -1, -1);
      inventory.addWorldItem(player, item.ammoType, 1, 0, 0, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, _items.items.getItemHashById(item.item), item.ammo, -1, -1, -1);
    });

    _user.user.clearWeapons(player);

    player.weaponsAll = [];
  }, 1000);
});
setTimeout(() => {
  mp.events.register("inventory:unEquipGun", unEquipWeaponEvent);
  mp.events.register("inventory:unEquipGunAmmo", async (player, item_id) => {
    if (player.spamProtect) return player.notify(`~r~Подождите пару секунд`), inventory.openInventory(player);
    if (player.isJumping) return player.notify(`~r~Чтобы снять оружие с экипировки - нужно остановится`), inventory.openInventory(player);
    player.spamProtect = true;
    setTimeout(() => {
      player.spamProtect = false;
    }, 5000);
    await _user.user.unEquipGunAmmo(player, item_id);
    inventory.updateInventory(player);
  });
  mp.events.register("inventory:close", player => {
    inventory.closeInventory(player);
  });
  mp.events.register("inventory:choiceItem", async (player, data, amount = 1) => {
    if (_user.user.isCuff(player)) {
      return player.notify("~r~Вы в наручниках"), inventory.openInventory(player);
    }

    if (player.health == 0) {
      return player.notify("~r~Вы в коме"), inventory.openInventory(player);
    }

    let task = data.task;
    let item = itemsDB.get(data.item.id);
    if (!item || item.owner_type != data.owner_type || item.owner_id != data.owner_id && _methods.methods.convertNumberToHash(data.owner_id) != item.owner_id) return player.notify("~r~Предмета больше нет в данном месте"), inventory.openInventory(player);

    if (task == "equipItemButton") {
      inventory.equipItem(player, item.id, item.item_id, item.prefix, item.number, item.key_id, item.count);
    } else if (task == "drop") {
      if (player.vehicle) return player.notify(`~r~Данное действие нельзя выполнять в транспорте`), inventory.openInventory(player);
      if (player.dimension != 0) return player.notify(`~r~Выбрасывать предметы можно только в нулевом измерении`), inventory.openInventory(player);
      inventory.dropItem(player, item.id, item.item_id, player.position.x, player.position.y, player.position.z, 0, 0, 0, (0, _inventory2.getItemHashById)(item.item_id));
    } else if (task == "take") {
      if (player.vehicle) return player.notify(`~r~Данное действие нельзя выполнять в транспорте`), inventory.openInventory(player);
      if (amount > _inventory2.maxAmountTransferItem) return player.notify('~r~Не более 10 за одну операцию'), inventory.openInventory(player);
      inventory.updateItemOwner(player, item.id, data.target_type, data.target_id, amount);
    } else if (task == "transfer") {
      if (player.vehicle) return player.notify(`~r~Данное действие нельзя выполнять в транспорте`), inventory.openInventory(player);
      if (amount > 10) return player.notify('~r~Не более 10 за одну операцию'), inventory.openInventory(player);
      let amountHave = inventory.getItemListData(item.owner_type, item.owner_id).filter(itm => itm.item_id == item.item_id).length;

      if (amountHave < amount) {
        if (amount == 1) return player.notify('~r~Данного предмета больше нет'), inventory.openInventory(player);
        return player.notify('~r~Указанное количество превышает максимальное'), inventory.openInventory(player);
      }

      inventory.updateItemOwner(player, item.id, data.target_type, data.target_id, amount);
    }
  });
  mp.events.register("player:unlock", (player, ownertype, ownerid, value) => {
    if (!player.passwordEnterBad) player.passwordEnterBad = 0;
    if (player.passwordEnterProtect) return player.notify(`~r~Повторите попытку позднее`);
    let pin = ownertype == inventory.types.StockFraction ? _customchest.chest.at(ownerid).settings.pincode : ownertype == 12 ? _stock.stock.getPin2(ownerid) : _stock.stock.getPin3(ownerid);

    let pin1 = _methods.methods.parseInt(value);

    if (pin != pin1) {
      player.passwordEnterBad++;
      player.passwordEnterProtect = true;
      setTimeout(() => {
        player.passwordEnterProtect = false;
      }, player.passwordEnterBad * 10000);
      return player.notify(`~r~Пинкод указан не верно`);
    }

    player.passwordEnterBad = 0;
    player.passwords.set(ownertype + "_" + ownerid, pin);
    player.notify(`~g~Пинкод введён`);
    inventory.openInventory(player);
  });
}, 1000);
mp.events.add('playerJoin', player => {
  player.passwords = new Map();
  player.weaponsAll = [];
});

function detectClosedInventory(player, ownertype, ownerid, reasonReturn = false, entity) {
  if (_user.user.isDead(player)) return !reasonReturn ? true : "Вы в коме";
  if (_user.user.isCuff(player)) return !reasonReturn ? true : "Вы в наручниках";

  if (ownertype == 8) {
    if (_user.user.isAdminNow(player, 5)) return !reasonReturn ? false : "";
    let veh = entity;
    if (!veh) veh = mp.vehicles.toArray().find(vehicle => vehicle.numberPlate == ownerid || _methods.methods.convertNumberToHash(vehicle.numberPlate) == ownerid);
    if (!veh) return !reasonReturn ? true : "Поблизости не обнаружен";
    if (veh.dist(player.position) > 5) return !reasonReturn ? true : "Слишком далеко";
    if (veh.bodyHealth == 0 || veh.engineHealth == 0) return !reasonReturn ? true : "Сильно повреждён";
    return !reasonReturn ? veh.locked : veh.locked ? "Закрыт" : "";
  } else if (ownertype == inventory.types.StockFraction) {
    let chestitem = _customchest.chest.at(ownerid);

    if (!chestitem) return !reasonReturn ? true : "Сломан";
    if (chestitem.settings.locked) return !reasonReturn ? true : "Закрыт";
    if (_user.user.getPlayerFraction(player) == chestitem.settings.fraction) return !reasonReturn ? false : "";
    if (_user.user.isAdminNow(player, 6)) return !reasonReturn ? false : "";
    if (!chestitem.settings.pincode) return !reasonReturn ? true : "Нет доступа";else {
      let havepass = player.passwords.get(ownertype + "_" + ownerid) == chestitem.settings.pincode;
      if (!havepass) return !reasonReturn ? true : "Требуется пинкод";
    }
  } else if (ownertype == 1) {
    if (_user.user.isAdminNow(player, 5)) return !reasonReturn ? false : "";
    let target = entity;
    if (!target) target = mp.players.toArray().find(nplayer => _user.user.getId(nplayer) == ownerid);
    if (!target && !_user.user.isAdminNow(player, 5)) return !reasonReturn ? true : "Не в сети";
    if (player.id == target.id) return !reasonReturn ? false : "";
    if (target.dist(player.position) > 5 && !_user.user.isAdminNow(player, 5)) return !reasonReturn ? true : "Слишком далеко";
    if (!_user.user.isCuff(target) && !_user.user.isAdminNow(player, 5)) return !reasonReturn ? true : "Не в наручниках";
  } else if (ownertype == 12 || ownertype == 13) {
    if (_user.user.isAdminNow(player, 5)) return !reasonReturn ? false : "";
    let pin = ownertype == 12 ? _stock.stock.getPin2(ownerid) : _stock.stock.getPin3(ownerid);
    if (_user.user.get(player, "stock_id") == ownerid) player.passwords.set(ownertype + "_" + ownerid, pin);
    let havepass = player.passwords.get(ownertype + "_" + ownerid) == pin || pin == 0;
    return !reasonReturn ? !havepass : !havepass ? "Пароль не указан" : "";
  } else if (ownertype == 7) {
    if (_user.user.isAdminNow(player, 5)) return !reasonReturn ? false : "";
    let item = itemsDB.get(ownerid);
    if (!item) return !reasonReturn ? true : "Уничтожена";

    if (item.owner_type == 0) {
      if (_methods.methods.distanceToPos2D(player.position, {
        x: item.pos_x,
        y: item.pos_y
      }) > 4) return !reasonReturn ? true : "Слишком далеко";
    } else if (detectClosedInventory(player, item.owner_type, item.owner_id)) {
      return !reasonReturn ? true : "Лежит в недоступном для вас месте";
    }
  }

  return !reasonReturn ? false : "";
}

let inventory = {
  deleteHealItemsFromPlayer: (player, notify = false) => {
    let count = 0;
    inventory.getItemListData(1, typeof player == "number" ? player : _user.user.getId(player)).map(item => {
      if ((item.item_id == 215 || item.item_id == 278) && item.prefix == 10) {
        inventory.deleteItem(item.id);
        count++;
      }
    });
    if (notify && typeof player != "number") player.notify(`~g~Вы успешно сдали аптечки в количестве ${count}шт.`);
  },
  getById: id => {
    return itemsDB.get(id);
  },
  getNearestInventoriesPoints: (player, r = 1.5) => {
    let res = [];
    if (!_user.user.isLogin(player)) return;

    _customchest.chest.pool.filter(item => _methods.methods.distanceToPos(player.position, item.position) < 3 && player.dimension == item.dimension).map(item => {
      res.push({
        type: inventory.types.StockFraction,
        id: item.id
      });
    });

    if (player.dimension > 100000 && player.dimension < 5000000) {
      _enums.enums.kitchenIntData.forEach(function (item) {
        if (_methods.methods.distanceToPos(player.position, new mp.Vector3(item[0], item[1], item[2])) <= r) {
          res.push({
            type: 10,
            id: player.dimension
          });
        }
      });
    } else if (player.dimension >= 5000000 && player.dimension < 5100000) {
      _enums.enums.kitchenIntData.forEach(function (item) {
        if (_methods.methods.distanceToPos(player.position, new mp.Vector3(item[0], item[1], item[2])) <= r) {
          res.push({
            type: 10,
            id: player.dimension
          });
        }
      });
    } else if (player.dimension >= 5100000 && player.dimension < 5200000) {
      if (_methods.methods.distanceToPos(player.position, _stock.stock.stockPos) <= r) {
        for (let q = 12; q < 23; q++) res.push({
          type: q,
          id: player.dimension - 5100000
        });

        res.push({
          type: 11,
          id: player.dimension - 5100000
        });
      }
    } else if (player.dimension > 0) {
      if (player.dimension >= 10 && player.dimension <= 13 && player.dist(new mp.Vector3(1395.11, 1144.95, 114.33)) < 20) {} else {
        _enums.enums.kitchenIntData.forEach(function (item) {
          if (_methods.methods.distanceToPos(player.position, new mp.Vector3(item[0], item[1], item[2])) <= r) {
            res.push({
              type: 10,
              id: player.dimension
            });
          }
        });
      }
    }

    return res;
  },
  allItems: () => {
    return [...itemsDB].map(([_, item]) => {
      return item;
    });
  },
  allItemsMap: () => itemsDB,
  detectClosedInventory,
  stringForLog: (type, id) => {
    if (typeof type === "object") return `@inventorytype${type.owner_type} @inventoryid${type.owner_id}`;else return `@inventorytype${type} @inventoryid${id}`;
  },
  getOwnerNameAndDesc: (ownertype, ownerid, player, veh) => {
    let name = "";
    let desc = "";
    name = "Хранилище " + ownertype, desc = "Номер: " + ownerid;
    if (ownertype == 0) name = "Предметы на земле", desc = "Радиус 2 метра";else if (ownertype == 1) {
      name = "Инвентарь игрока";
      if (_user.user.getId(player) == ownerid) desc = _user.user.getRpName(player);else if (player && _user.user.getDating(player, ownerid)) desc = _user.user.getDating(player, ownerid);else desc = `ID: ${_user.user.getPlayerById(ownerid) ? _user.user.getShowingId(_user.user.getPlayerById(ownerid)) : ownerid}`;
    } else if (ownertype == 8) {
      let vehs;
      if (vehs) veh = vehs;else vehs = mp.vehicles.toArray().find(veh => veh.numberPlate == ownerid || _methods.methods.convertNumberToHash(veh.numberPlate) == ownerid);
      let vehmodel = "";

      if (veh) {
        let vInfo = _vehicleInfo.vehicleInfo.find(veh.model);

        if (vInfo) vehmodel = ` ${vInfo.display_name}`;
      }

      name = "Багажник" + vehmodel;
      desc = veh ? "Номер ТС: " + veh.numberPlate : `#${ownerid}`;
    } else if (ownertype == 10) name = "Холодильник";else if (ownertype >= 11 && ownertype <= 22) {
      let tid = ownertype - 11;

      if (tid == 1 || tid == 2) {
        name = "Сейф #" + tid, desc = "Номер: " + ownerid;
      }

      if (tid >= 3 && tid <= 6) {
        name = "Плотный деревянный ящик #" + (tid - 2), desc = "Номер: " + ownerid;
      }

      if (tid >= 7 && tid <= 12 || tid == 0) {
        name = "Деревянный ящик #" + (tid == 0 ? 6 : tid - 6), desc = "Номер: " + ownerid;
      }
    } else if (ownertype == inventory.types.Bag) {
      name = "Пакет", desc = "#" + ownerid;
    } else if (ownertype == inventory.types.BagFull) {
      name = _items.items.getItemNameById(inventory.types.BagFull), desc = "#" + ownerid;
    } else if (ownertype == inventory.types.BagSmall) {
      name = _items.items.getItemNameById(inventory.types.BagSmall), desc = "#" + ownerid;
    } else if (ownertype == inventory.types.BagTransfer) {
      name = _items.items.getItemNameById(inventory.types.BagTransfer), desc = "#" + ownerid;
    } else if (ownertype == inventory.types.StockFraction) {
      let chestitem = _customchest.chest.at(ownerid);

      if (!chestitem) {
        name = "Склад", desc = "#" + ownerid;
      } else {
        name = "Склад", desc = chestitem.name.replace('Склад ', '');
      }
    } else name = "Хранилище " + ownertype, desc = "Номер: " + ownerid;
    return {
      name,
      desc
    };
  },
  closeInventory: player => {
    if (!mp.players.exists(player)) return;

    _user.user.setGui(player, null);

    player.openInventory = null;
  },
  openInventory: (player, ownertype, ownerid) => {
    if (!mp.players.exists(player)) return;
    if (player.duelLobby && player.dimension != 0) return;
    const start = new Date().getTime();

    _methods.methods.debug('Load Inventory', _user.user.getRpName(player), _user.user.getId(player));

    let blocks = [];

    let myid = _user.user.getId(player);

    let myinventory = [];
    inventory.getItemListData(1, myid).map(item => {
      myinventory.push([item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]);
    });
    let nearest = [];

    if (player.dimension == 0) {
      let count = 0;
      itemsDB.forEach(item => {
        if (item.owner_id == 0 && item.owner_type == 0 && _methods.methods.distanceToPos2D({
          x: item.pos_x,
          y: item.pos_y
        }, {
          x: player.position.x,
          y: player.position.y
        }) < 2 && count < 20) {
          nearest.push([item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]);
          count++;
        }
      });
    }

    myinventory = (0, _inventory2.groupItems)(myinventory);
    blocks.push({
      name: "Ваш инвентарь",
      desc: _user.user.getRpName(player),
      owner_id: myid,
      owner_type: 1,
      weight: inventory.currentAmount(1, _user.user.getId(player)),
      weight_max: inventory.maxAmount(1, _user.user.getId(player)),
      items: myinventory
    });
    blocks.push({
      name: "Предметы на земле",
      desc: "Радиус 2 метра",
      owner_id: 0,
      owner_type: 0,
      weight: 0,
      weight_max: 0,
      items: nearest
    });

    let vehicles = _user.user.getNearestVehicles(player, 4);

    let nplayers = _user.user.getNearestPlayers(player, 2);

    let chests = inventory.getNearestInventoriesPoints(player);
    chests.map(chest => {
      let locked = inventory.detectClosedInventory(player, chest.type, chest.id);
      let targetinventory = !locked ? inventory.getItemListData(chest.type, chest.id).map(item => [item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]) : [];
      targetinventory = (0, _inventory2.groupItems)(targetinventory);
      let namedesc = inventory.getOwnerNameAndDesc(chest.type, chest.id, player);
      blocks.push({
        name: namedesc.name,
        desc: namedesc.desc + (locked ? ` (${inventory.detectClosedInventory(player, chest.type, chest.id, true)})` : ""),
        owner_id: chest.id,
        owner_type: chest.type,
        weight: inventory.currentAmount(chest.type, chest.id),
        weight_max: inventory.maxAmount(chest.type, chest.id),
        items: targetinventory,
        closed: locked
      });
    });
    nplayers.forEach(nplayer => {
      if (nplayer.alpha > 0) {
        let locked = inventory.detectClosedInventory(player, 1, _user.user.getId(nplayer), false, nplayer);
        let targetinventory = !locked ? inventory.getItemListData(1, _user.user.getId(nplayer)).map(item => [item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]) : [];
        targetinventory = (0, _inventory2.groupItems)(targetinventory);
        let namedesc = inventory.getOwnerNameAndDesc(1, _user.user.getId(nplayer), player);
        blocks.push({
          name: namedesc.name,
          desc: namedesc.desc + (locked ? ` (${inventory.detectClosedInventory(player, 1, _user.user.getId(nplayer), true)})` : ""),
          owner_id: _user.user.getId(nplayer),
          owner_type: 1,
          weight: inventory.currentAmount(1, _user.user.getId(nplayer)),
          weight_max: inventory.maxAmount(1, _user.user.getId(nplayer)),
          items: targetinventory,
          closed: locked
        });
      }
    });
    vehicles.forEach(vehicle => {
      let locked = inventory.detectClosedInventory(player, 8, vehicle.numberPlate, false, vehicle);
      let targetinventory = !locked ? inventory.getItemListData(8, vehicle.numberPlate).map(item => [item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]) : [];
      targetinventory = (0, _inventory2.groupItems)(targetinventory);
      let namedesc = inventory.getOwnerNameAndDesc(8, vehicle.numberPlate, player, vehicle);
      blocks.push({
        name: namedesc.name,
        desc: namedesc.desc + (locked ? ` (${inventory.detectClosedInventory(player, 8, vehicle.numberPlate, true, vehicle)})` : ""),
        owner_id: vehicle.numberPlate,
        owner_type: 8,
        weight: inventory.currentAmount(8, vehicle.numberPlate),
        weight_max: inventory.maxAmount(8, vehicle.numberPlate),
        items: targetinventory,
        closed: locked
      });
    });

    if (player.openInventory && !ownertype && !ownerid) {
      ownertype = _methods.methods.parseInt(player.openInventory.split('_')[1]);
      ownerid = _methods.methods.parseInt(player.openInventory.split('_')[2]);
    }

    if (ownertype && ownerid) {
      let targetinventory = [];
      inventory.getItemListData(ownertype, ownerid).map(item => {
        targetinventory.push([item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]);
      });
      targetinventory = (0, _inventory2.groupItems)(targetinventory);
      let namedesc = inventory.getOwnerNameAndDesc(ownertype, ownerid);
      blocks.push({
        name: namedesc.name,
        desc: namedesc.desc,
        owner_id: ownerid,
        owner_type: ownertype,
        weight: inventory.currentAmount(ownertype, ownerid),
        weight_max: inventory.maxAmount(ownertype, ownerid),
        items: targetinventory
      });
    }

    blocks.map(block => {
      if (!block.closed) {
        block.items.forEach(itemq => {
          if ([inventory.types.BagTransfer, inventory.types.Bag, inventory.types.BagFull, inventory.types.BagSmall].includes(itemq[1])) {
            if (!blocks.find(q => q.owner_type == itemq[1] && q.owner_id == itemq[0])) {
              let targetinventory = [];
              inventory.getItemListData(itemq[1], itemq[0]).map(item => {
                targetinventory.push([item.id, item.item_id, 1, item.count, item.number, item.prefix, item.key_id]);
              });
              targetinventory = (0, _inventory2.groupItems)(targetinventory);
              let namedesc = inventory.getOwnerNameAndDesc(itemq[1], itemq[0]);
              blocks.push({
                name: namedesc.name,
                desc: namedesc.desc,
                owner_id: itemq[0],
                owner_type: itemq[1],
                weight: inventory.currentAmount(itemq[1], itemq[0]),
                weight_max: inventory.maxAmount(itemq[1], itemq[0]),
                items: targetinventory
              });
            }
          }
        });
      }
    });
    player.openInventory = `inv_${ownertype}_${ownerid}`;
    player.call("inventory:open:data", [JSON.stringify(blocks)]);
    const end = new Date().getTime();

    _methods.methods.debug('Load Inventory End', `${end - start}ms`, _user.user.getRpName(player), _user.user.getId(player));
  },
  updateInventory: player => {
    if (!mp.players.exists(player)) return;

    let targets = _user.user.getNearestPlayers(player);

    targets.map(nplayer => {
      if (_user.user.isLogin(nplayer) && player.dist(nplayer.position) < 5 && player.dimension == nplayer.dimension && nplayer.openInventory) {
        inventory.openInventory(nplayer);
      }
    });
    if (player.openInventory) inventory.openInventory(player);
  },
  getItemChoises: (player, item) => {
    let itemId = item.item_id;
    return (0, _inventory2.getItemChoises)(itemId, item.count);
  },
  getItemCountById: (player, id) => {
    if (!_user.user.isLogin(player)) return;
    let count = 0;

    let iduser = _user.user.getId(player);

    itemsDB.forEach(item => {
      if (item.owner_id == iduser && item.owner_type == 1 && item.item_id == id) count++;
    });
    return count;
  },
  saveItem: id => {
    let itm = itemsDB.get(id);
    if (!itm) return;

    _inventory.inventoryEntity.update({
      item_id: itm.item_id,
      pos_x: itm.pos_x,
      pos_y: itm.pos_y,
      pos_z: itm.pos_z,
      rot_x: itm.rot_x,
      rot_y: itm.rot_y,
      rot_z: itm.rot_z,
      owner_type: itm.owner_type,
      owner_id: itm.owner_id,
      count: itm.count,
      prefix: itm.prefix,
      number: itm.number,
      key_id: itm.key_id,
      timestamp_update: itm.timestamp_update
    }, {
      where: {
        id
      }
    });
  },
  allInventoryBlocksDataClear: () => {
    inventoryBlocksData = new Map();
  },
  deleteItemDb: id => {
    let itm = itemsDB.get(id);
    if (!itm) return false;
    inventoryBlocksData.delete(itm.owner_type + "_" + itm.owner_id);

    _inventory.inventoryEntity.destroy({
      where: {
        id
      }
    });

    itemsDB.delete(itm.id);
    return true;
  },
  loadAll: function () {
    let bags_destroy_id = [];

    _inventory.inventoryEntity.findAll({
      where: {
        [_sequelize.Op.or]: [{
          owner_type: 0,
          item_id: {
            [_sequelize.Op.in]: [inventory.types.Bag, inventory.types.BagFull, inventory.types.BagSmall]
          }
        }, {
          item_id: inventory.types.BagTransfer
        }]
      }
    }).then(bags => {
      bags.map(item => {
        bags_destroy_id.push({
          owner_type: item.item_id,
          owner_id: item.id
        });
      });

      _inventory.inventoryEntity.destroy({
        where: {
          [_sequelize.Op.or]: [{
            owner_type: 999
          }, {
            owner_type: 0
          }, {
            item_id: inventory.types.BagTransfer
          }, {
            item_id: -1
          }, ...bags_destroy_id]
        }
      }).then(() => {
        _inventory.inventoryEntity.findAll().then(items => {
          exports.itemsDB = itemsDB = new Map();
          items.forEach(itm => {
            itemsDB.set(itm.id, {
              id: itm.id,
              item_id: itm.item_id,
              pos_x: itm.pos_x,
              pos_y: itm.pos_y,
              pos_z: itm.pos_z,
              rot_x: itm.rot_x,
              rot_y: itm.rot_y,
              rot_z: itm.rot_z,
              owner_type: itm.owner_type,
              owner_id: itm.owner_id,
              count: itm.count,
              prefix: itm.prefix,
              number: itm.number,
              key_id: itm.key_id,
              timestamp_update: itm.timestamp_update
            });
          });
          inventoryBlocksData = new Map();
        });
      });
    });
  },
  deleteWorldItems: function () {
    let time = _methods.methods.getTimeStamp();

    itemsDB.forEach(item => {
      if (item.owner_type == 0 && item.timestamp_update < time - 60 * 60) {
        inventory.deleteItem(item.id);
      }
    });
  },
  getItemList: function (player, ownerType, ownerId) {
    return inventory.getItemListData(ownerType, ownerId);
  },
  getItemListData: function (ownerType, ownerId) {
    if (ownerType == 8 && ownerId.toString() != _methods.methods.parseInt(ownerId).toString()) ownerId = _methods.methods.convertNumberToHash(ownerId);
    if (inventoryBlocksData.has(ownerType + "_" + ownerId)) return inventoryBlocksData.get(ownerType + "_" + ownerId);
    let data = [];
    itemsDB.forEach(row => {
      if ([74].includes(row.item_id)) {
        return inventory.deleteItem(row.id);
      }

      if (row.owner_type == ownerType && row.owner_id == ownerId) {
        let label = "";

        if (row.prefix > 0 && row.number > 0 && row.key_id <= 0) {
          label = row.prefix + "-" + row.number;
        } else if (row.key_id > 0) {
          if (row.item_id >= 265 && row.item_id <= 268) {
            if (row.prefix == 1) {
              if (!_enums.enums.clothF[row.key_id]) return inventory.deleteItem(row.id);
              label = _enums.enums.clothF[row.key_id][9];
            } else {
              if (!_enums.enums.clothM[row.key_id]) return inventory.deleteItem(row.id);
              label = _enums.enums.clothM[row.key_id][9];
            }
          } else if (row.item_id >= 269 && row.item_id <= 273) {
            if (row.prefix == 1) {
              if (!_enums.enums.propF[row.key_id]) return inventory.deleteItem(row.id);
              label = _enums.enums.propF[row.key_id][5];
            } else {
              if (!_enums.enums.propM[row.key_id]) return inventory.deleteItem(row.id);
              label = _enums.enums.propM[row.key_id][5];
            }
          } else {
            label = "#" + row.key_id;
          }
        }

        data.push({
          id: row.id,
          label: label,
          item_id: row.item_id,
          count: row.count,
          prefix: row.prefix,
          number: row.number,
          key_id: row.key_id
        });
      }
    });
    inventoryBlocksData.set(ownerType + "_" + ownerId, data);
    return data;
  },
  getItemListInRadius: function (player, posX, posY) {},
  dropItem: async (player, id, itemId, posX, posY, posZ, rotX, rotY, rotZ, model, ownerType, ownerId) => {
    if (!_user.user.isLogin(player)) return;

    try {
      if (_vehicles.vehicles.exists(player.vehicle)) {
        player.notify('~r~Вы находитесь в транспорте'), inventory.openInventory(player);
        return;
      }

      if (player.isJumping) {
        player.notify('~r~Вы не должны прыгать'), inventory.openInventory(player);
        return;
      }

      if (_user.user.isCuff(player)) {
        return player.notify("~r~Вы в наручниках"), inventory.openInventory(player);
      }

      if (player.health == 0) {
        return player.notify("~r~Вы в коме"), inventory.openInventory(player);
      }

      if (itemId == 50) {
        return player.notify("~r~Банковскую карту нельзя выкинуть на землю"), inventory.openInventory(player);
      }

      if (itemId >= 138 && itemId <= 141) {
        return player.notify("~r~Пачку денег нельзя выкинуть на землю"), inventory.openInventory(player);
      }

      if (!_user.user.isAdminNow(player, 4)) {
        if (itemId == inventory.types.BagTransfer) {
          let nearestChest = _customchest.chest.canTransferBag(player);

          if (!nearestChest) return player.notify(`~r~${_items.items.getItemNameById(itemId)} можно выбрасывать на землю только возле склада`), inventory.openInventory(player);
        }
      }

      let item = itemsDB.get(id);
      if (!item) return;

      if (itemId == 285 && (item.owner_type != 1 || item.owner_id != _user.user.getId(player))) {
        return player.notify("~r~Устанавливать шипы можно только со своего инвентаря"), inventory.openInventory(player);
      }

      if (itemId == 285) {
        if (!_user.user.isGosPD(player)) return player.notify("~r~Устанавливать шипы могут только сотрудники гос организаций"), inventory.openInventory(player);
        player.notify('~g~Устанавливаем шипы на замлю');

        _user.user.playScenario(player, "CODE_HUMAN_MEDIC_TEND_TO_DEAD");

        _user.user.disableAllControls(player, true);

        await (0, _methods2.sleep)(15000);
        if (!mp.players.exists(player)) return;

        _user.user.disableAllControls(player, false);

        if (_vehicles.vehicles.exists(player.vehicle)) {
          player.notify('~r~Вы находитесь в транспорте'), inventory.openInventory(player);
          return;
        }

        if (player.isJumping) {
          player.notify('~r~Вы не должны прыгать'), inventory.openInventory(player);
          return;
        }

        if (_user.user.isCuff(player)) {
          return player.notify("~r~Вы в наручниках"), inventory.openInventory(player);
        }

        if (player.health == 0) {
          return player.notify("~r~Вы в коме"), inventory.openInventory(player);
        }

        _user.user.stopScenario(player);
      }

      item = itemsDB.get(id);
      if (!item) return;
      if (item.owner_type == 0) return player.notify("Данный предмет уже лежит на земле"), inventory.openInventory(player);

      if (!_user.user.isAdminNow(player, 4)) {
        if (item.owner_type == inventory.types.StockFraction) return player.notify("Нельзя выбрасывать предметы со склада на землю"), inventory.openInventory(player);
        if ([inventory.types.BagTransfer, inventory.types.Bag, inventory.types.BagFull, inventory.types.BagSmall].includes(item.owner_type)) return player.notify("Нельзя выбрасывать предметы с сумки на землю"), inventory.openInventory(player);
      }

      if ((item.item_id == 215 || item.item_id == 278) && item.prefix == 10) return player.notify(`~r~Данный предмет нельзя перемещать`), inventory.openInventory(player);

      if (item.item_id == inventory.types.BagFull) {
        if (item.owner_type == 1 && item.owner_id != _user.user.getId(player)) {
          return player.notify(`~r~Данный предмет нельзя отнимать`), inventory.openInventory(player);
        }
      }

      if (inventory.detectClosedInventory(player, item.owner_type, item.owner_id)) {
        player.notify(`~r~${inventory.detectClosedInventory(player, item.owner_type, item.owner_id, true)}`);
        inventory.openInventory(player);
        return;
      }

      let namedesc = inventory.getOwnerNameAndDesc(item.owner_type, item.owner_id);

      _user.user.playAnimation(player, 'pickup_object', 'pickup_low', 8);

      if (item.owner_type == 1 && item.owner_id == _user.user.getId(player)) _chat.chat.sendMeCommand(player, `выкинул на землю \"${_items.items.getItemNameById(itemId)}\"`);else _chat.chat.sendMeCommand(player, `выкинул на землю с ${namedesc.name} ${namedesc.desc} \"${_items.items.getItemNameById(item.item_id)}\"`);
      if (item.owner_type == 1 && item.owner_id == _user.user.getId(player)) _user.user.log(player, "PlayerInventoryInterraction", `Выкинул на землю ${_items.items.getItemNameById(itemId)} с ${inventory.stringForLog(item)} @item${item.id}`);else _user.user.log(player, "PlayerInventoryInterraction", `Выкинул на землю с ${namedesc.name} ${namedesc.desc} ${inventory.stringForLog(item)} @item${item.id}`);
      let heading = player.heading;
      let rot = new mp.Vector3(0, 0, heading);

      switch (itemId) {
        case 8:
        case 251:
          rot = new mp.Vector3(-90, 0, heading);
          break;

        case 282:
          rot = new mp.Vector3(-90, 0, heading);
          break;

        case 285:
          rot = new mp.Vector3(0, 0, heading - 180);
          break;
      }

      if (itemId >= 54 && itemId <= 126) rot = new mp.Vector3(-90, 0, heading);
      let obj = mp.objects.new(model, new mp.Vector3(posX + _methods.methods.getRandomInt(-100, 100) / 300, posY + _methods.methods.getRandomInt(-100, 100) / 400, posZ - 0.97), {
        rotation: rot,
        alpha: 255,
        dimension: 0
      });
      posX = obj.position.x;
      posY = obj.position.y;
      posZ = obj.position.z;
      rotX = rot.x;
      rotY = rot.y;
      rotZ = rot.z;
      props.set(id.toString(), obj);
      item.pos_x = posX;
      item.pos_y = posY;
      item.pos_z = posZ;
      item.rot_x = rot.x;
      item.rot_y = rot.y;
      item.rot_z = rot.z;

      const oldownertype = _methods.methods.parseInt(`${item.owner_type}`);

      const oldownerid = _methods.methods.parseInt(`${item.owner_id}`);

      item.owner_type = 0;
      item.owner_id = 0;
      inventoryBlocksData.delete(ownerType + "_" + ownerId);
      inventoryBlocksData.delete(oldownertype + "_" + oldownerid);
      inventory.saveItem(item.id);
      inventory.updateInventory(player);

      if ([inventory.types.BagTransfer, inventory.types.Bag, inventory.types.BagFull, inventory.types.BagSmall].includes(item.item_id)) {
        if (player) _user.user.checkComponents(player);

        if (oldownertype == 1) {
          let target = _user.user.getPlayerById(oldownerid);

          if (target) _user.user.checkComponents(target);
        }
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  updateItemOwnerSystem: function (id, ownerType, ownerId) {
    if (ownerType == 8 && ownerId.toString() != _methods.methods.parseInt(ownerId).toString()) ownerId = _methods.methods.convertNumberToHash(ownerId);
    let item = itemsDB.get(id);
    if (!item) return;
    inventoryBlocksData.delete(item.owner_type + "_" + item.owner_id);
    inventoryBlocksData.delete(ownerType + "_" + ownerId);
    item.owner_type = ownerType;
    item.owner_id = ownerId;
    inventory.saveItem(item.id);
  },
  updateItemOwner: async function (player, id, ownerType, ownerId, amount = 1, update = true) {
    if (ownerType == 8 && ownerId.toString() != _methods.methods.parseInt(ownerId).toString()) ownerId = _methods.methods.convertNumberToHash(ownerId);
    let item = itemsDB.get(id);
    if (!item) return;

    if (_user.user.isCuff(player)) {
      return player.notify("~r~Вы в наручниках"), inventory.openInventory(player);
    }

    if (player.health == 0) {
      return player.notify("~r~Вы в коме"), inventory.openInventory(player);
    }

    if ((item.item_id == 215 || item.item_id == 278) && item.prefix == 10) return player.notify(`~r~Данный предмет нельзя перемещать`), inventory.openInventory(player);

    if (item.item_id == inventory.types.Bag || item.item_id == inventory.types.BagFull || item.item_id == inventory.types.BagTransfer || item.item_id == inventory.types.BagSmall) {
      if (ownerType == inventory.types.Bag || ownerType == inventory.types.BagFull || ownerType == inventory.types.BagTransfer || ownerType == inventory.types.BagSmall) {
        return player.notify("~r~Нельзя складывать сумку в сумку"), inventory.openInventory(player);
      }

      if (inventory.getItemListData(ownerType, ownerId).find(itm => itm.item_id == inventory.types.Bag || itm.item_id == inventory.types.BagFull || itm.item_id == inventory.types.BagTransfer || itm.item_id == inventory.types.BagSmall)) {
        let namedesc = inventory.getOwnerNameAndDesc(ownerType, ownerId);
        return player.notify(`~r~${namedesc.name} уже имеет сумку либо чемодан для перевозки предметов`), inventory.openInventory(player);
      }

      if (item.item_id == inventory.types.BagFull && item.owner_type == 1) {
        if (_user.user.getId(player) != item.owner_id) return player.notify(`~r~Сумку нельзя отнимать`), inventory.openInventory(player);
      }
    }

    if (item.owner_type == 0) {
      if (_methods.methods.distanceToPos2D(player.position, {
        x: item.pos_x,
        y: item.pos_y
      }) > 5) return player.notify(`~r~Вы слишком далеко`), inventory.openInventory(player);

      if (ownerType == inventory.types.Bag || ownerType == inventory.types.BagFull || ownerType == inventory.types.BagTransfer || ownerType == inventory.types.BagSmall) {
        return player.notify("~r~С земли нельзя подбирать в сумку либо чемодан для перевозки предметов"), inventory.openInventory(player);
      }
    }

    if (item.item_id == 50 && item.owner_type == 1) {
      return player.notify("~r~Банковскую карту нельзя передавать"), inventory.openInventory(player);
    }

    if (item.item_id >= 138 && item.item_id <= 141 && item.owner_type == 1) {
      return player.notify("~r~Пачку денег нельзя передавать"), inventory.openInventory(player);
    }

    if (!_user.user.isAdminNow(player, 4)) {
      if (item.item_id == inventory.types.BagTransfer) {
        let nearestChest = _customchest.chest.canTransferBag(player);

        if (!nearestChest) return player.notify(`~r~${_items.items.getItemNameById(item.item_id)} можно перекладывать только возле склада`), inventory.openInventory(player);
      }
    }

    if (item.owner_type == inventory.types.StockFraction && ownerType == inventory.types.BagTransfer) {
      if (_user.user.getPlayerFractionRank(player) <= 11) return player.notify(`~r~Складывать предметы в ~b~${_items.items.getItemNameById(inventory.types.BagTransfer)}~w~ можно только с 12 ранга `), inventory.openInventory(player);
    }

    if (ownerType == 999 && ownerId == 1) return player.notify(`Сюда нельзя класть предметы`), inventory.openInventory(player);

    if (!_user.user.isAdminNow(player, 4)) {
      if (item.owner_type != 999 || item.owner_id != 1) {
        if (item.owner_type == inventory.types.BagTransfer || ownerType == inventory.types.BagTransfer) {
          let nearestChest = _customchest.chest.canTransferBag(player);

          if (!nearestChest) return player.notify(`~r~Действие доступно только возле склада`), inventory.openInventory(player);
          if (item.owner_type == inventory.types.BagTransfer && ownerType != inventory.types.StockFraction || ownerType == inventory.types.BagTransfer && item.owner_type != inventory.types.StockFraction) return player.notify(`~r~${_items.items.getItemNameById(inventory.types.BagTransfer)} предназначен для перевозки предметов в склад`), inventory.openInventory(player);
        }
      }
    }

    if (item.item_id == inventory.types.Bag) {
      if (_items.items.getItemWeightById(item.item_id) + inventory.currentAmount(inventory.types.Bag, item.id) + inventory.currentAmount(ownerType, ownerId) > inventory.maxAmount(ownerType, ownerId)) return player.notify(`~r~Сумка слишком тяжёлая`), inventory.openInventory(player);
    } else if (ownerType == inventory.types.Bag) {
      let bagitem = itemsDB.get(ownerId);

      if (bagitem.owner_type > 0) {
        if (_items.items.getItemWeightById(item.item_id) * amount + inventory.currentAmount(bagitem.owner_type, bagitem.owner_id) > inventory.maxAmount(bagitem.owner_type, bagitem.owner_id)) return player.notify(`~r~Сумка станет слишком тяжёлая`), inventory.openInventory(player);
      }
    }

    if (item.item_id == 285 && item.owner_type == 0) {
      if (!_user.user.isGosPD(player)) return player.notify(`~r~Поднимать шипы могут только сотрудники гос организаций`);
    }

    const oldownertype = _methods.methods.parseInt(`${item.owner_type}`);

    const oldownerid = _methods.methods.parseInt(`${item.owner_id}`);

    if (amount > 1 && (oldownertype == 0 || ownerType == 0)) return player.notify("~r~Выбрасывать на землю и подбирать с неё можно только по одному предмету"), inventory.openInventory(player);
    if (amount > 15) return player.notify("~r~Не более 15 предметов за раз"), inventory.openInventory(player);

    if (inventory.detectClosedInventory(player, item.owner_type, item.owner_id)) {
      let namedesc = inventory.getOwnerNameAndDesc(item.owner_type, item.owner_id);
      return player.notify(`~r~~s~${namedesc.name} ~r~${inventory.detectClosedInventory(player, item.owner_type, item.owner_id, true)}`), inventory.openInventory(player);
    }

    let notaccessOther = inventory.detectClosedInventory(player, ownerType, ownerId);

    if (notaccessOther && update) {
      if (_user.user.getId(player) == item.owner_id && item.owner_type == 1 && ownerType) {
        let target = _user.user.getPlayerById(ownerId);

        if (target) {
          amount = 1;
          notaccessOther = !(await _user.user.accept(target, "Принять x" + amount + " " + _items.items.getItemNameById(item.item_id)));
          if (notaccessOther) return player.notify(`~r~Игрок отказался принять x${amount} ${_items.items.getItemNameById(item.item_id)}`);
        }
      }
    }

    if (notaccessOther) {
      let namedesc = inventory.getOwnerNameAndDesc(ownerType, ownerId);
      return player.notify(`~r~~s~${namedesc.name} ~r~${inventory.detectClosedInventory(player, ownerType, ownerId, true)}`), inventory.openInventory(player);
    }

    if (item.owner_type == inventory.types.StockFraction && ownerType != inventory.types.BagTransfer) {
      if (amount > 1) return player.notify(`~r~Брать со склада можно только по одному предмету`), inventory.openInventory(player);

      let chestItem = _customchest.chest.at(item.owner_id);

      if (!chestItem) return player.notify(`~r~Возникла ошибка при определении склада`);
      if (!chestItem.canTakeItem(player, item.item_id) && !_user.user.isAdminNow(player, 6)) return player.notify(`~r~Вы не можете брать этот предмет. Либо ваш ранг недостаточно высок, либо вы превысили лимит.`);
      if (!_user.user.isAdminNow(player, 6) && !_user.user.isLeader(player)) chestItem.addTimerAmount(player, item.item_id);

      _user.user.log(player, "ChestLog", 'Взял ' + _items.items.getItemNameById(item.item_id) + ' со склада ' + chestItem.name + ', фракция ' + chestItem.settings.fraction);

      _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Взял ' + _items.items.getItemNameById(item.item_id) + ' со склада ' + chestItem.name, chestItem.settings.fraction);
    }

    if (amount > 1) {
      let namedesc = inventory.getOwnerNameAndDesc(ownerType, ownerId);

      if (inventory.maxAmount(ownerType, ownerId) < inventory.currentAmount(ownerType, ownerId) + _items.items.getItemWeightById(item.item_id) * amount) {
        return player.notify(`~r~~s~${namedesc.name} ~r~не может вместить все предметы`), inventory.openInventory(player);
      }

      let list = inventory.getItemListData(oldownertype, oldownerid);

      let maxamount = _methods.methods.parseInt(`${amount}`);

      let countTransfer = 0;
      list.map(itemq => {
        if (itemq.item_id == item.item_id && maxamount > 0) {
          inventory.updateItemOwner(player, itemq.id, ownerType, ownerId, 1, false);
          countTransfer++;
          maxamount--;
        }
      });

      if (countTransfer > 0) {
        let namedescold = inventory.getOwnerNameAndDesc(oldownertype, oldownerid);

        _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 48);

        if (oldownertype == 1 && oldownerid == _user.user.getId(player)) _chat.chat.sendMeCommand(player, `взял с ${namedescold.name} ${namedescold.desc} x${countTransfer} ${_items.items.getItemNameById(item.item_id)}`);else _chat.chat.sendMeCommand(player, `положил с ${namedescold.name} ${namedescold.desc} в ${namedesc.name} ${namedesc.desc} x${countTransfer} ${_items.items.getItemNameById(item.item_id)}`);

        if (ownerType == inventory.types.StockFraction) {
          let chestitem = _customchest.chest.at(ownerId);

          _user.user.log(player, "ChestLog", 'Положил на склад x' + amount + ' ' + chestitem.name + ' ' + _items.items.getItemNameById(item.item_id) + chestitem.settings.fraction);

          _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Положил на склад x' + amount + ' ' + chestitem.name + ' ' + _items.items.getItemNameById(item.item_id), chestitem.settings.fraction);
        }
      }

      inventory.updateInventory(player);
      return;
    } else {
      if (ownerType == inventory.types.StockFraction) {
        let chestitem = _customchest.chest.at(ownerId);

        _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Положил на склад ' + chestitem.name + ' ' + _items.items.getItemNameById(item.item_id), chestitem.settings.fraction);
      }
    }

    if (oldownertype >= inventory.types.UserStock && oldownertype <= inventory.types.UserStockMax) _stock.stock.addLog(_user.user.getRpName(player), "TAKE: " + _items.items.getItemNameById(item.item_id), oldownerid);else if (ownerType >= inventory.types.UserStock && ownerType <= inventory.types.UserStockMax) _stock.stock.addLog(_user.user.getRpName(player), "DROP: " + _items.items.getItemNameById(item.item_id), ownerId);

    if (updateBlock.has(id)) {
      if (update) inventory.openInventory(player);
      return;
    }

    if (update) {
      if (inventory.maxAmount(ownerType, ownerId) < inventory.currentAmount(ownerType, ownerId) + _items.items.getItemWeightById(item.item_id)) {
        let namedesc = inventory.getOwnerNameAndDesc(ownerType, ownerId);
        return player.notify(`~r~~s~${namedesc.name} ~r~переполнен`), inventory.openInventory(player);
      }
    }

    item.owner_type = ownerType;
    item.owner_id = ownerId;
    inventoryBlocksData.delete(ownerType + "_" + ownerId);
    inventoryBlocksData.delete(oldownertype + "_" + oldownerid);

    if (update) {
      let namedesc = inventory.getOwnerNameAndDesc(ownerType, ownerId);

      if (oldownertype == 0 && update) {
        _user.user.playAnimation(player, 'pickup_object', 'pickup_low', 8);

        if (ownerType == 1 && ownerId == _user.user.getId(player)) _chat.chat.sendMeCommand(player, `поднял с земли \"${_items.items.getItemNameById(item.item_id)}\"`);else _chat.chat.sendMeCommand(player, `положил с земли в ${namedesc.name} \"${_items.items.getItemNameById(item.item_id)}\"`);
        if (ownerType == 1 && ownerId == _user.user.getId(player)) _user.user.log(player, "PlayerInventoryInterraction", `поднял с земли ${inventory.stringForLog(item)} \"${_items.items.getItemNameById(item.item_id)}\"`);else _user.user.log(player, "PlayerInventoryInterraction", `положил с земли в ${namedesc.name} ${inventory.stringForLog(item)} \"${_items.items.getItemNameById(item.item_id)}\"`);
      }

      if (oldownertype != 0 && update) {
        let namedescold = inventory.getOwnerNameAndDesc(oldownertype, oldownerid);

        _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 48);

        if (ownerType == 1 && ownerId == _user.user.getId(player)) _chat.chat.sendMeCommand(player, `взял с ${namedescold.name} ${namedescold.desc} ${namedesc.desc != _user.user.getRpName(player) ? `в ${namedesc.name} ${namedesc.desc} ` : ``}\"${_items.items.getItemNameById(item.item_id)}\"`);else _chat.chat.sendMeCommand(player, `положил ${namedescold.desc != _user.user.getRpName(player) ? `с ${namedescold.name} ${namedescold.desc} ` : ``}в ${namedesc.name} ${namedesc.desc} \"${_items.items.getItemNameById(item.item_id)}\"`);
        if (ownerType == 1 && ownerId == _user.user.getId(player)) _user.user.log(player, "PlayerInventoryInterraction", `взял с ${inventory.stringForLog(oldownertype, oldownerid)} ${namedescold.name} ${namedescold.desc} ${namedesc.desc != _user.user.getRpName(player) ? `в ${namedesc.name} ${namedesc.desc} ${inventory.stringForLog(item)} ` : ``}\"${_items.items.getItemNameById(item.item_id)}\"`);else _user.user.log(player, "PlayerInventoryInterraction", `положил ${namedescold.desc != _user.user.getRpName(player) ? `с ${inventory.stringForLog(oldownertype, oldownerid)} ${namedescold.name} ${namedescold.desc} ` : ``}в ${namedesc.name} ${namedesc.desc} ${inventory.stringForLog(item)} \"${_items.items.getItemNameById(item.item_id)}\"`);
      }

      if (oldownertype == inventory.types.BagTransfer) {
        if (inventory.currentAmount(inventory.types.BagTransfer, oldownerid) == 0) {
          let itmtransferbag = itemsDB.get(oldownerid);

          if (itmtransferbag.owner_type == 1) {
            setTimeout(() => {
              let targetPl = _user.user.getPlayerById(itmtransferbag.owner_id);

              if (targetPl) _user.user.checkComponents(targetPl);
            }, 1000);
          }

          inventory.deleteItem(oldownerid);
        }
      }
    }

    updateBlock.set(id, true);
    setTimeout(() => {
      updateBlock.delete(id);
    }, 300);
    inventory.saveItem(id);

    if (update) {
      if (item.item_id == inventory.types.Bag || item.item_id == inventory.types.BagFull || item.item_id == inventory.types.BagTransfer || item.item_id == inventory.types.BagSmall) {
        if (ownerType == 1) {
          let target = _user.user.getPlayerById(ownerId);

          if (target) _user.user.checkComponents(target);
        }

        if (oldownertype == 1) {
          let target = _user.user.getPlayerById(oldownerid);

          if (target) _user.user.checkComponents(target);
        }
      }
    }

    if (oldownertype == inventory.types.World) {
      inventory.deleteDropItem(id);
    }

    if (update) inventory.updateInventory(player);
  },
  updateItemCount: function (id, count) {
    let item = itemsDB.get(id);
    if (!item) return;
    if (updateBlock.has(id)) return;
    updateBlock.set(id, true);
    setTimeout(() => {
      updateBlock.delete(id);
    }, 300);
    item.count = count;
    inventoryBlocksData.delete(item.owner_type + "_" + item.owner_id);
    inventory.saveItem(item.id);
  },
  updateAmount: function (player, ownerId, ownerType) {
    if (!_user.user.isLogin(player)) return;
    let data = new Map();
    let rows = [];
    itemsDB.forEach(item => {
      if (item.owner_type == ownerType && item.owner_id == ownerId) rows.push(item);
    });
    rows.forEach(row => {
      data.set(row.id.toString(), row.item_id);
    });

    try {
      player.call('client:sendToPlayerItemListUpdateAmountMenu', [Array.from(data), ownerType, ownerId]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  deleteDropItem: function (id) {
    try {
      let entity = props.get(id.toString());
      if (mp.objects.exists(entity)) entity.destroy();
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  reloadInventoryEntity: (owner_type, owner_id) => {
    inventoryBlocksData.delete(owner_type + "_" + owner_id);
  },
  deleteItem: function (id) {
    try {
      let item = itemsDB.get(id);
      if (item) inventoryBlocksData.delete(item.owner_type + "_" + item.owner_id), inventory.deleteItemDb(item.id);
      inventory.deleteDropItem(id);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  createManyItem: async (itemId, count, ownerType, ownerId, times = 1, key = -1, prefix = -1) => {
    if (!_items.items.itemExist(itemId)) return;
    let q = [];

    let conf = _items.items.getDefaultCount(itemId);

    let time = _methods.methods.getTimeStamp();

    for (let i = 0; i < times; i++) q.push({
      item_id: itemId,
      owner_type: ownerType,
      owner_id: ownerId,
      count: count > 0 ? count : conf,
      prefix: prefix,
      number: -1,
      key_id: key,
      timestamp_update: time
    });

    let item = await _inventory.inventoryEntity.bulkCreate(q).then(res => {
      res.map(item => {
        itemsDB.set(item.id, item);
      });
      inventoryBlocksData.delete(ownerType + "_" + ownerId);
    });
    return true;
  },
  createItem: async (itemId, count, ownerType, ownerId, prefix = -1, number = -1, keyId = -1) => {
    if (!_items.items.itemExist(itemId)) return;

    let conf = _items.items.getDefaultCount(itemId);

    let item = await _inventory.inventoryEntity.create({
      item_id: itemId,
      owner_type: ownerType,
      owner_id: ownerId,
      count: count > 0 ? count : conf,
      prefix: prefix,
      number: number,
      key_id: keyId,
      timestamp_update: _methods.methods.getTimeStamp()
    });
    itemsDB.set(item.id, item);
    inventoryBlocksData.delete(ownerType + "_" + ownerId);
    return item;
  },
  addItem: async function (player, itemId, count, ownerType, ownerId, countItems, prefix = -1, number = -1, keyId = -1) {
    if (itemId == -1) return false;
    if (count <= 0) return false;
    if (!_items.items.itemExist(itemId)) return;
    let q = [];

    for (let i = 0; i < count; i++) q.push({
      item_id: itemId,
      owner_type: ownerType,
      owner_id: ownerId,
      count: countItems,
      prefix,
      number,
      key_id: keyId,
      timestamp_update: _methods.methods.getTimeStamp()
    });

    let item = await _inventory.inventoryEntity.bulkCreate(q).then(res => {
      res.map(item => {
        itemsDB.set(item.id, item);
      });
      inventoryBlocksData.delete(ownerType + "_" + ownerId);
    });
    return true;
  },
  addWorldItem: function (player, itemId, count, ownerType, ownerId, posX, posY, posZ, rotX, rotY, rotZ, model, countItems, prefix, number, keyId) {
    if (itemId == -1) return false;
    if (count <= 0) return false;
    if (!_user.user.isLogin(player)) return;

    try {
      let currentTimestamp = _methods.methods.getTimeStamp();

      const heading = player.heading;

      for (let i = 0; i < count; i++) {
        _inventory.inventoryEntity.create({
          item_id: itemId,
          owner_type: ownerType,
          owner_id: ownerId,
          count: countItems,
          prefix: prefix,
          number: number,
          key_id: keyId,
          timestamp_update: currentTimestamp,
          pos_x: posX,
          pos_y: posY,
          pos_z: posZ,
          rot_x: rotX,
          rot_y: rotY,
          rot_z: rotZ
        }).then(item => {
          if (mp.players.exists(player)) _user.user.log(player, "PlayerInventoryInterraction", `Выбросил предмет @item_id${itemId} ${_items.items.getItemNameById(itemId)} @inventorytype${ownerType} @inventoryid${ownerId} на землю, параметры posX: ${posX} , posY: ${posY} , posZ : ${posZ} , countItems : ${countItems}`);
          itemsDB.set(item.id, item);
          posX = posX + _methods.methods.getRandomInt(-1, 1);
          posY = posY + _methods.methods.getRandomInt(-1, 1);
          posZ = posZ + 0.1;
          let rot = new mp.Vector3(0, 0, heading);

          switch (itemId) {
            case 8:
            case 251:
              rot = new mp.Vector3(-90, 0, heading);
              break;
          }

          if (itemId >= 54 && itemId <= 126) rot = new mp.Vector3(-90, 0, heading);
          let obj = mp.objects.new(model, new mp.Vector3(posX + _methods.methods.getRandomInt(-100, 100) / 300, posY + _methods.methods.getRandomInt(-100, 100) / 400, posZ - 0.98), {
            rotation: rot,
            alpha: 255,
            dimension: 0
          });
          posX = obj.position.x;
          posY = obj.position.y;
          posZ = obj.position.z;
          rotX = rot.x;
          rotY = rot.y;
          rotZ = rot.z;
          props.set(item.id.toString(), obj);
          return;
        });
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  calculatePlayerInvAmountMax: player => {
    return 45100 + _user.user.get(player, 'mp0_strength') * 100;
  },
  currentAmount: (type, id) => {
    if (type == 8 && id.toString() != _methods.methods.parseInt(id).toString()) id = _methods.methods.convertNumberToHash(id);
    let list = inventory.getItemListData(type, id);
    let weight = 0;
    list.map(item => {
      weight += _items.items.getItemWeightById(item.item_id);
      if (item.item_id == inventory.types.Bag) weight += inventory.currentAmount(inventory.types.Bag, item.id);
    });
    return weight;
  },
  maxAmount: (type, id, veh) => {
    if (type == 1) {
      if (_user.user.getPlayerById(id)) {
        return inventory.calculatePlayerInvAmountMax(_user.user.getPlayerById(id));
      } else {
        return 50000;
      }
    } else if (type == 8) {
      if (!veh) veh = mp.vehicles.toArray().find(vehs => vehs.numberPlate == id || _methods.methods.convertNumberToHash(vehs.numberPlate) == id);
      if (!veh) return 0;

      let vInfo = _vehicleInfo.vehicleInfo.findByVeh(veh);

      if (!vInfo) return 100000;
      return vInfo.stock;
    } else if (type == 999) {
      return 0;
    } else if (type == inventory.types.Fridge) {
      if (id <= 100000) {
        let houseData = _houses.houses.getHouseData(id);

        if (!houseData) return _sharedData.stockSize.Fridge;
        return _inventory2.houseFridgeAmount[houseData.get('chest')];
      } else {
        return _sharedData.stockSize.Fridge;
      }
    } else if (type == inventory.types.Bag) {
      return _sharedData.stockSize.Bag;
    } else if (type == inventory.types.BagFull) {
      return _sharedData.stockSize.BagFull;
    } else if (type == inventory.types.BagSmall) {
      return _sharedData.stockSize.BagSmall;
    } else if (type == inventory.types.BagTransfer) {
      return _sharedData.stockSize.BagTransfer;
    } else if (type == inventory.types.StockFraction) {
      let inv = _customchest.chest.at(id);

      if (!inv) return 0;
      return inv.settings.weight;
    } else if (type >= inventory.types.UserStock && type <= inventory.types.UserStockMax) {
      let tid = type - 11;
      if (tid == 1 || tid == 2) return _sharedData.stockSize.PrivateSafe;
      if (tid >= 3 && tid <= 6) return _sharedData.stockSize.BigWoodBox;
      if (tid >= 7 && tid <= 12 || tid == 0) return _sharedData.stockSize.SmallWoodBox;
    } else {
      return 0;
    }
  },
  ammoItemIdToMaxCount: _inventory2.ammoItemIdToMaxCountUtil,
  getInvAmount: function (player, id, type) {
    return inventory.currentAmount(type, id);
  },
  getInvAmountMax: function (player, id, type) {
    return inventory.maxAmount(type, id);
  },
  getListOfEquipWeapons: function (player) {
    if (!_user.user.isLogin(player)) return;

    try {
      let table = new Map();

      for (let n = 54; n < 138; n++) {
        _weapons.weapons.hashes.forEach(item => {
          if (item[0] !== _items.items.getItemNameHashById(n)) return;
          let ammo = player.getWeaponAmmo(item[1]);
          if (!ammo) return;
          table.set(n, [item[0], ammo]);
        });
      }

      player.call('client:showWeaponsInMenu', [Array.from(table)]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  useItem: async function (player, id, itemId) {
    if (!_user.user.isLogin(player)) return;

    try {
      let user_id = _user.user.getId(player);

      let item = _user.user.getItemById(player, id);

      if (!item) return player.notify("~r~У вас нет данного предмета в инвентаре");
      if (item.item_id != itemId) return player.notify("~r~Попытка вызова действия другого предмета");

      switch (itemId) {
        case 50:
          {
            if (_user.user.get(player, 'bank_prefix') == 0) {
              player.notify('~r~У Вас нет банковского счёта. Оформите в любом отделении');
              return;
            }

            let sum = item.count;
            inventory.deleteItem(id);

            _user.user.addBankMoney(player, sum);

            _user.user.notify(player, '~g~Денежные средства поступили вам на счёт');

            break;
          }

        case 252:
          {
            let ch = _customchest.chest.getNearest(player, 5, true);

            if (!ch || !_fractions.fractionUtil.getFraction(ch.settings.fraction).gos || !_user.user.isGos(player)) return player.notify(`~r~Использовать ${_items.items.getItemNameById(itemId)} можно только возле гос склада`), inventory.openInventory(player);
            if (player.armour == 100) return player.notify(`~r~На вас уже есть целый бронежилет`), inventory.openInventory(player);
            player.armour = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);
            player.notify(`~g~Вы использовали бронежилет`);

            _user.user.log(player, "PlayerInventoryInterraction", "Экипировал " + _items.items.getItemNameById(itemId));

            break;
          }

        case 6:
          {
            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

            if (!mp.vehicles.exists(veh)) return player.notify("~r~Поблизости нет ТС");
            const heading = veh.heading + 180;

            const attach = _methods.methods.calculateAttachPosition(veh.position, veh.rotation, new mp.Vector3(_user.user.getSex(player) == 1 ? -1.8 : -1.5, 0, 0));

            _user.user.playScenario(player, _user.user.getSex(player) == 1 ? "CODE_HUMAN_MEDIC_TEND_TO_DEAD" : "WORLD_HUMAN_VEHICLE_MECHANIC", attach.x, attach.y, player.position.z, _user.user.getSex(player) == 1 ? heading + 90 : heading - 90, false);

            _user.user.disableAllControls(player, true);

            if (!_user.user.getItemById(player, id)) return player.notify("~r~У вас нет данного предмета в инвентаре");
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            setTimeout(() => {
              if (!mp.players.exists(player)) return;

              _user.user.stopScenario(player);

              _user.user.disableAllControls(player, false);

              if (!mp.vehicles.exists(veh)) return player.notify("~r~ТС не обнаружен");
              if (player.dist(veh.position) > 7) return player.notify("~r~ТС слишком далеко");
              veh.repair();
              player.notify("~r~ТС отремонтирован");
            }, 15000);
            break;
          }

        case 0:
          {
            let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 1.5);

            if (!_user.user.isLogin(nplayer)) {
              player.notify("~r~Рядом с вами никого нет");
              inventory.openInventory(player);
              return;
            }

            if (nplayer.getVariable("isTie")) {
              _user.user.unTie(nplayer);

              player.notify("~y~Вы развязали игрока");

              _chat.chat.sendMeCommand(player, "развязал человека рядом");

              inventory.addItem(player, itemId, 1, inventory.types.Player, user_id, 1, -1, -1, -1);
            } else {
              if (!nplayer.getVariable("isKnockout")) {
                player.notify("~r~Игрок должен быть в нокауте");
                inventory.openInventory(player);
                return;
              }

              if (_user.user.isCuff(nplayer) || _user.user.isTie(nplayer)) {
                player.notify("~r~Этот человек уже в связан/в наручниках");
                inventory.openInventory(player);
                return;
              }

              _user.user.tie(nplayer);

              player.notify("~y~Вы связали игрока");

              _chat.chat.sendMeCommand(player, "связал человека рядом");

              inventory.deleteItem(id);
              inventory.updateInventory(player);
            }

            break;
          }

        case 1:
          {
            let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 1.5);

            if (!_user.user.isLogin(nplayer)) {
              player.notify("~r~Рядом с вами никого нет");
              inventory.openInventory(player);
              return;
            }

            if (nplayer.getVariable("isTieBandage")) {
              _user.user.unTieBandage(nplayer);

              player.notify("~y~Вы сняли мешок с головы");

              _chat.chat.sendMeCommand(player, "снял мешок с головы человеку рядом");

              inventory.addItem(player, itemId, 1, inventory.types.Player, user_id, 1, -1, -1, -1);
            } else {
              if (!nplayer.getVariable("isTie")) {
                player.notify("~r~Игрок должен быть связан");
                inventory.openInventory(player);
                return;
              }

              _user.user.tieBandage(nplayer);

              player.notify("~y~Вы надели мешок на голову");

              _chat.chat.sendMeCommand(player, "надел мешок на голову человеку рядом");

              inventory.deleteItem(id);
              inventory.updateInventory(player);
            }

            break;
          }

        case 253:
          {
            inventory.openInventory(player);
            return player.notify("~r~Игра в кости только в казино");

            _chat.chat.sendDiceCommand(player);

            break;
          }

        case 251:
          {
            player.call('client:startFishing');
            break;
          }

        case 2:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              return;
            }

            _user.user.healProtect(player);

            _chat.chat.sendMeCommand(player, "употребил кокаин");

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 1, 30);

            _user.user.playDrugAnimation(player);

            _user.user.set(player, 'useHeal', true);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 158:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил амфетамин");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 0, 30);

            _user.user.playDrugAnimation(player);

            _user.user.set(player, 'useHeal', true);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 159:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил DMT");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 2, 30);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 160:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил мефедрон");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 5, 30);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 161:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил кетамин");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 3, 30);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 162:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять наркотики');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил LSD");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.addDrugLevel(player, 4, 30);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 3:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять аптечки');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил марихуану");

            _user.user.healProtect(player);

            if (player.health <= 90) player.health = player.health + 10;else player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 5000);
            break;
          }

        case 4:
          {
            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

            if (!_vehicles.vehicles.exists(veh)) {
              player.notify("~r~Нужно быть рядом с машиной");
              inventory.openInventory(player);
              return;
            }

            let vehInfo = _methods.methods.getVehicleInfo(veh.model);

            if (vehInfo.fuel_min == 0) {
              player.notify("~r~Электрокары можно взломать только с спец.отмычками");
              return;
            }

            if (vehInfo.class_name == "Super") {
              player.notify("~r~Спорткары можно взломать только с спец.отмычками");
              return;
            }

            if (vehInfo.class_name == "Helicopters" || vehInfo.class_name == "Planes" || vehInfo.class_name == "Emergency") {
              player.notify("~r~Вы не можете взломать это транспортное средство");
              return;
            }

            if (!veh.locked) {
              player.notify("~r~Транспорт уже открыт");
              return;
            }

            if (_user.user.has(player, 'usingLockpick')) {
              player.notify("~r~Вы уже используете отмычку");
              return;
            }

            _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

            _user.user.set(player, 'usingLockpick', true);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            let chance = _methods.methods.getRandomInt(0, 5) == 1;

            if (!chance) {
              inventory.deleteItem(id);
              inventory.updateInventory(player);
            } else {
              inventory.openInventory(player);
            }

            setTimeout(function () {
              try {
                if (!_user.user.isLogin(player)) return;

                if (!_vehicles.vehicles.exists(veh)) {
                  player.notify("~r~Не удалось взломать транспорт");

                  _user.user.reset(player, 'usingLockpick');

                  return;
                }

                if (chance) {
                  veh.locked = false;
                  player.notify("~g~Вы открыли транспорт");
                  inventory.updateInventory(player);
                } else {
                  player.notify("~r~Вы сломали отмычку");
                }

                _user.user.reset(player, 'usingLockpick');
              } catch (e) {
                _methods.methods.debug(e);
              }
            }, 25000);
            break;
          }

        case 5:
          {
            if (_vehicles.vehicles.exists(player.vehicle)) {
              player.notify("~r~Вы должны находиться около открытого капота");
              inventory.openInventory(player);
              return;
            }

            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

            if (veh == null) {
              player.notify("~r~Нужно быть рядом с машиной");
              inventory.openInventory(player);
              return;
            }

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            player.notify("~g~Вы залили масло в транспорт");
            inventory.deleteItem(id);
            inventory.updateInventory(player);
            break;
          }

        case 6:
          {
            if (_vehicles.vehicles.exists(player.vehicle)) {
              player.notify("~r~Вы должны находиться около открытого капота");
              inventory.openInventory(player);
              return;
            }

            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

            if (veh == null) {
              player.notify("~r~Нужно быть рядом с машиной");
              inventory.openInventory(player);
              return;
            }

            if (veh.engineHealth < 750.0) {
              player.notify("~r~Вы не можете сами починить авто, вызывайте механика");
              inventory.openInventory(player);
              return;
            }

            if (veh.engineHealth >= 999) {
              player.notify("~r~Автомобиль не поврежден");
              inventory.openInventory(player);
              return;
            }

            veh.engineHealth = 1000.0;

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            player.notify("~g~Вы успешно починили авто");
            inventory.updateInventory(player);
            inventory.deleteItem(id);
            break;
          }

        case 7:
          {
            inventory.openInventory(player);
            player.notify(`~g~Ваш ID:~s~ ${user_id}`);
            if (_user.user.get(player, "jail_time") > 0) player.notify(`~g~Время в тюрьме:~s~ ${_user.user.get(player, "jail_time")} сек.`);
            break;
          }

        case 9:
          {
            if (_vehicles.vehicles.exists(player.vehicle)) {
              player.notify("~r~Вы должны находиться около транспорта");
              inventory.openInventory(player);
              return;
            }

            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

            if (!_vehicles.vehicles.exists(veh)) {
              player.notify("~r~Нужно быть рядом с машиной");
              inventory.openInventory(player);
              return;
            }

            let vehInfo = _methods.methods.getVehicleInfo(veh.model);

            let currentFuel = _vehicles.vehicles.getFuel(veh);

            if (vehInfo.fuel_full < currentFuel + 10) {
              _vehicles.vehicles.setFuel(veh, vehInfo.fuel_full);

              player.notify("~r~Полный бак");
              inventory.openInventory(player);
              return;
            }

            _vehicles.vehicles.setFuel(veh, currentFuel + 10);

            player.notify("~g~Вы заправили авто на 10л.");
            inventory.deleteItem(id);
            inventory.updateInventory(player);
            break;
          }

        case 63:
          {
            if (_vehicles.vehicles.exists(player.vehicle)) {
              player.notify("~r~Вы в автомобиле");
              inventory.openInventory(player);
              return;
            }

            break;
          }

        case 232:
        case 234:
        case 236:
        case 238:
          {
            _user.user.addEatLevel(player, 800);

            _chat.chat.sendMeCommand(player, "съедает мясо");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 246:
        case 247:
        case 248:
        case 249:
        case 250:
          {
            _user.user.addEatLevel(player, 850);

            _chat.chat.sendMeCommand(player, "съедает рыбу");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 237:
        case 239:
          {
            _user.user.addEatLevel(player, 500);

            _chat.chat.sendMeCommand(player, "съедает мясо");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 240:
          {
            _user.user.addEatLevel(player, 100);

            _chat.chat.sendMeCommand(player, "съедает мясо");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 233:
          {
            _user.user.addEatLevel(player, 1500);

            _chat.chat.sendMeCommand(player, "съедает мясо");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 235:
          {
            _user.user.addEatLevel(player, 1000);

            _chat.chat.sendMeCommand(player, "съедает мясо");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 10:
          {
            _user.user.addEatLevel(player, 40);

            _chat.chat.sendMeCommand(player, "съедает жвачку");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 11:
          {
            _user.user.removeWaterLevel(player, 10);

            _user.user.addEatLevel(player, 190);

            _chat.chat.sendMeCommand(player, "съедает батончик");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 12:
          {
            _user.user.removeWaterLevel(player, 20);

            _user.user.addEatLevel(player, 160);

            _chat.chat.sendMeCommand(player, "съедает чипсы");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 13:
          {
            _user.user.removeWaterLevel(player, 5);

            _user.user.addEatLevel(player, 320);

            _chat.chat.sendMeCommand(player, "съедает роллы");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 14:
          {
            _user.user.removeWaterLevel(player, 7);

            _user.user.addEatLevel(player, 380);

            _chat.chat.sendMeCommand(player, "съедает гамбургер");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 15:
          {
            _user.user.removeWaterLevel(player, 5);

            _user.user.addEatLevel(player, 420);

            _chat.chat.sendMeCommand(player, "съедает салат");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 16:
          {
            _user.user.removeWaterLevel(player, 10);

            _user.user.addEatLevel(player, 550);

            _chat.chat.sendMeCommand(player, "съедает пиццу");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 17:
          {
            _user.user.removeWaterLevel(player, 8);

            _user.user.addEatLevel(player, 780);

            _chat.chat.sendMeCommand(player, "съедает жаркое");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 18:
          {
            _user.user.removeWaterLevel(player, 10);

            _user.user.addEatLevel(player, 850);

            _chat.chat.sendMeCommand(player, "съедает кесадильи");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 19:
          {
            _user.user.removeWaterLevel(player, 10);

            _user.user.addEatLevel(player, 1100);

            _chat.chat.sendMeCommand(player, "съедает фрикасе");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 20:
          {
            _user.user.addWaterLevel(player, 20);

            _user.user.addEatLevel(player, 220);

            _chat.chat.sendMeCommand(player, "съедает фрукты");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 32:
          {
            _user.user.addWaterLevel(player, 100);

            _user.user.addEatLevel(player, 900);

            _chat.chat.sendMeCommand(player, "съедает сухпаёк");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playEatAnimation(player);

            break;
          }

        case 21:
          {
            _user.user.addWaterLevel(player, 100);

            _chat.chat.sendMeCommand(player, "выпивает бутылку воды");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 22:
          {
            _user.user.addWaterLevel(player, 95);

            _chat.chat.sendMeCommand(player, "выпивает стакан кофе");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 23:
          {
            _user.user.addWaterLevel(player, 95);

            _chat.chat.sendMeCommand(player, "выпивает стакан чая");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 24:
          {
            _user.user.addWaterLevel(player, 70);

            _chat.chat.sendMeCommand(player, "выпивает бутылку лимонада");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 25:
          {
            _user.user.addWaterLevel(player, 55);

            _chat.chat.sendMeCommand(player, "выпивает банку кока-колы");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 26:
          {
            _user.user.addWaterLevel(player, 110);

            _chat.chat.sendMeCommand(player, "выпивает банку энергетика");

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrinkAnimation(player);

            break;
          }

        case 31:
          {
            player.notify("~r~Больше не работает :c");
            inventory.openInventory(player);
            break;

            let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 1.2);

            if (!_user.user.isLogin(nplayer)) {
              player.notify("~r~Рядом с вами никого нет");
              return;
            }

            _user.user.useAdrenaline(nplayer);

            _chat.chat.sendMeCommand(player, "сделал инъекцию адреналина");

            inventory.deleteItem(id);
            break;
          }

        case 40:
          {
            let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 1.2);

            if (!_user.user.checkCanHandCuff(player, nplayer)) return inventory.openInventory(player);
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.arrestAnimation(player, nplayer).then(() => {
              if (!_user.user.checkCanHandCuff(player, nplayer)) return;

              _methods.methods.saveLog('PlayerCuff', `${_user.user.get(nplayer, 'rp_name')} (${_user.user.getId(nplayer)}) cuffed by ${_user.user.get(player, 'rp_name')} (${_user.user.getId(player)})`);

              _chat.chat.sendMeCommand(player, `надел наручники на человека рядом (${_user.user.getId(nplayer)})`);

              _user.user.loginterract(player, nplayer, "PlayerCuffed", `надел наручники`);

              _user.user.cuff(nplayer);

              if (_user.user.isGos(player)) nplayer.setVariable('cuffedByGos', true);
            });

            break;
          }

        case 215:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять аптечки');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "использовал аптечку");

            _user.user.healProtect(player);

            if (player.health >= 60) player.health = 100;else player.health = player.health + 40;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 278:
          {
            if (_user.user.has(player, 'useHeal')) {
              player.notify('~r~Нельзя так часто употреблять аптечки');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "использовал аптечку");

            _user.user.healProtect(player);

            player.health = 100;
            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.playDrugAnimation(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal');
            }, 60000);
            break;
          }

        case 221:
          {
            if (_user.user.has(player, 'useHeal1')) {
              player.notify('~r~Нельзя так часто употреблять таблетки');
              inventory.openInventory(player);
              return;
            }

            _chat.chat.sendMeCommand(player, "употребил таблетку");

            _user.user.setDrugLevel(player, 0, 0);

            _user.user.setDrugLevel(player, 1, 0);

            _user.user.setDrugLevel(player, 2, 0);

            _user.user.setDrugLevel(player, 3, 0);

            _user.user.setDrugLevel(player, 4, 0);

            _user.user.setDrugLevel(player, 5, 0);

            _user.user.setDrugLevel(player, 99, 0);

            _user.user.stopAllScreenEffects(player);

            _user.user.playDrugAnimation(player);

            inventory.deleteItem(id);
            inventory.updateInventory(player);

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            _user.user.set(player, 'useHeal1', true);

            setTimeout(function () {
              if (_user.user.isLogin(player)) _user.user.reset(player, 'useHeal1');
            }, 60000);
            break;
          }

        case 263:
          {
            if (player.dimension > 0) {
              player.notify('~r~Нельзя совершить ограбление');
              inventory.openInventory(player);
              return;
            }

            if (_user.user.isGos(player)) {
              player.notify('~r~Вы состоите в гос. организации');
              inventory.openInventory(player);
              return;
            }

            let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

            if (!_vehicles.vehicles.exists(veh)) {
              player.notify("~r~Нужно быть рядом с машиной");
              return;
            }

            let vehInfo = _methods.methods.getVehicleInfo(veh.model);

            if (vehInfo.class_name == "Emergency") {
              player.notify("~r~Вы не можете взломать это транспортное средство");
              return;
            }

            if (!veh.locked) {
              player.notify("~r~Транспорт уже открыт");
              return;
            }

            _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

            let chance = _methods.methods.getRandomInt(0, 3) == 1;

            if (!chance) {
              inventory.deleteItem(id);
              inventory.updateInventory(player);
            } else {
              inventory.openInventory(player);
            }

            _user.user.log(player, "PlayerInventoryInterraction", "Использовал " + _items.items.getItemNameById(itemId));

            setTimeout(function () {
              try {
                if (!_vehicles.vehicles.exists(veh)) {
                  player.notify("~r~Не удалось взломать транспорт");
                  return;
                }

                if (chance) {
                  veh.locked = false;
                  player.notify("~g~Вы открыли транспорт");
                } else {
                  player.notify("~r~Вы сломали отмычку");
                  inventory.deleteItem(id);
                }
              } catch (e) {
                _methods.methods.debug(e);
              }
            }, 25000);
            break;
          }

        case 262:
          {
            return player.notify("~r~Для того, чтобы заложить C4 подойдите к двери и нажмите ~g~E");
            break;
          }

        case 282:
          {
            if (_user.user.get(player, 'tablet_equip')) return player.notify(`~r~У вас уже есть экипированный планшет.`);
            inventory.deleteItem(id);

            _user.user.set(player, 'tablet_equip', id);

            _user.user.updateClientCache(player);

            player.notify('~g~Вы экипировали планшет.');
            inventory.updateInventory(player);
            break;
          }
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  types: _inventory2.inventoryTypesUtil,
  equipItem: (player, id, itemId, prefix, number, keyId, countItems) => {
    if (!_user.user.getItemById(player, id)) {
      player.notify("~r~Данного предмета у вас больше нет в инвентаре");
      let item = itemsDB.get(id);
      if (item) inventory.updateAmount(player, item.owner_id, item.owner_type);
      return;
    }

    if (itemId == 282) return _tablet.tablet.equipItem(player, id);

    if (_items.items.isWeapon(itemId)) {
      if (_weapons2.WEAPON_LEVEL_MIN > _user.user.getLevel(player)) {
        player.notify("~r~Для использования оружия требуется: " + _weapons2.WEAPON_LEVEL_MIN + " ур.");
        inventory.openInventory(player);
        return;
      }
    }

    player.call("server:inventory:equipItem", [id, itemId, prefix, number, keyId, countItems]);

    _user.user.log(player, "PlayerInventoryInterraction", "Экипировал " + _items.items.getItemNameById(itemId));

    _chat.chat.sendMeCommand(player, 'Экипировал ' + _items.items.getItemNameById(itemId));

    setTimeout(() => {
      if (mp.players.exists(player)) inventory.updateInventory(player);
    }, 1000);
  }
};
exports.inventory = inventory;
mp.events.add('healNearestByItem', async (player, pay = false) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isEms(player) && !_user.user.isUsmc(player) && _user.user.isAdminNow(player)) return player.notify("~r~У вас нет должной квалификации чтобы оказывать медицинскую помощь");
  let target = await _menu.menu.selectNearestPlayers(player, 3);
  if (!target) return player.notify("~r~Поблизости никого нет");
  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");
  if (!_user.user.hasItem(player, 215)) return player.notify("~r~У вас нет ~b~" + _items.items.getItemNameById(215));
  let status = true;
  if (pay) status = await _user.user.accept(target, "Принять помощь?", "~g~Согласится ($" + _inventory2.healItemCost + ")", "~r~Отказатся", true);

  if (!status) {
    player.notify('~r~Пациент отказался от оказания помощи');
    target.notify(`~r~Вы отказались от помощи`);
    return;
  }

  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");
  if (!_user.user.hasItem(player, 215)) return player.notify("~r~У вас нет ~b~" + _items.items.getItemNameById(215));
  if (_user.user.isCuff(player)) return;
  if (_user.user.isDead(player)) return;

  _user.user.removeItem(player, 215);

  _user.user.useAdrenaline(target);

  target.health = 10;
  setTimeout(() => {
    if (mp.players.exists(target)) _user.user.healProtect(target), target.health = 10;
  }, 1000);

  _chat.chat.sendMeCommand(player, 'использовал аптечку на пострадавшем');
});
mp.events.add('equipItemCheck', (player, id, itemId, prefix, number, keyId, countItems) => inventory.equipItem);
mp.events.add('upNearest10', async (player, pay) => {
  if (!_user.user.isEms(player) && !_user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~У вас нет должной квалификации чтобы оказывать медицинскую помощь");
  if (pay && _user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~Вы не можете оказывать платные услуги");
  if (_user.user.isUsmc(player) && !_user.user.isAdminNow(player) && _user.user.getPlayerFractionRank(player) < 5) return player.notify("~r~Доступно с 5 ранга");
  if (!_user.user.hasItem(player, 215)) return player.notify("~r~У вас нет ~b~" + _items.items.getItemNameById(215));
  let target = await _menu.menu.selectNearestPlayers(player, 3);
  if (!target) return player.notify("~r~Поблизости никого нет");
  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");
  let cost = _user.user.getLevel(target) == 1 ? 100 : _inventory2.healItemCost;
  if (!pay) cost = 0;
  let status = true;
  if (_user.user.isUsmc(player) && !_user.user.isUsmc(target)) return player.notify(`~r~Вы можете оказывать помощь только сотруднику ${_user.user.getPlayerFractionName(player)}`);
  if (pay) status = await _user.user.accept(target, "Принять лечение?", "~g~Принять ($" + cost + ")", "Нет", true);
  if (!mp.players.exists(player)) return;
  if (!mp.players.exists(target)) return;

  if (!status) {
    player.notify(`~r~Пациент отказался`);
    target.notify(`~r~Вы отказались`);
    return;
  }

  if (cost && _user.user.getCashMoney(target) < cost) {
    player.notify(`~r~У пациента недостаточно средств для оплаты`);
    target.notify(`~r~У вас недостаточно средств для оплаты`);
    return;
  }

  if (!_user.user.removeItem(player, 215)) {
    return player.notify('~r~Ваша аптечка куда то потерялась');
  }

  if (cost) {
    _user.user.removeCashMoney(target, cost);

    _user.user.addCashMoney(player, cost * 0.5);

    _coffer.coffer.addMoney(cost * 0.5);
  }

  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");

  _user.user.playScenario(player, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');

  setTimeout(() => {
    if (!mp.players.exists(player)) return;

    _user.user.stopScenario(player);

    if (!mp.players.exists(target)) return;
    if (_user.user.isCuff(player)) return;
    if (_user.user.isDead(player)) return;

    _user.user.useAdrenaline(target);

    target.health = 10;
    setTimeout(() => {
      if (mp.players.exists(target)) _user.user.healProtect(target), target.health = 10;
    }, 1000);

    _chat.chat.sendMeCommand(player, 'использовал аптечку на пострадавшем');
  }, 5000);
});
mp.events.add('upNearest100', async (player, pay) => {
  if (!_user.user.isEms(player) && !_user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~У вас нет должной квалификации чтобы оказывать медицинскую помощь");
  if (pay && _user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~Вы не можете оказывать платные услуги");
  if (_user.user.isUsmc(player) && !_user.user.isAdminNow(player) && _user.user.getPlayerFractionRank(player) < 5) return player.notify("~r~Доступно с 5 ранга");
  if (!_user.user.hasItem(player, 278)) return player.notify("~r~У вас нет ~b~" + _items.items.getItemNameById(278));
  let target = await _menu.menu.selectNearestPlayers(player, 3);
  if (!target) return player.notify("~r~Поблизости никого нет");
  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");
  let cost = _user.user.getLevel(target) == 1 ? 200 : _inventory2.healItemCost2;
  if (!pay) cost = 0;
  let status = true;
  if (_user.user.isUsmc(player) && !_user.user.isUsmc(target)) return player.notify(`~r~Вы можете оказывать помощь только сотруднику ${_user.user.getPlayerFractionName(player)}`);
  if (pay) status = await _user.user.accept(target, "Принять лечение?", "~g~Принять ($" + cost + ")", "Нет", true);
  if (!mp.players.exists(player)) return;
  if (!mp.players.exists(target)) return;

  if (!status) {
    player.notify(`~r~Пациент отказался`);
    target.notify(`~r~Вы отказались`);
    return;
  }

  if (cost && _user.user.getCashMoney(target) < cost) {
    player.notify(`~r~У пациента недостаточно средств для оплаты`);
    target.notify(`~r~У вас недостаточно средств для оплаты`);
    return;
  }

  if (!_user.user.isDead(target)) return player.notify("~r~Человеку поблизости не требуется помощь");

  if (!_user.user.removeItem(player, 278)) {
    return player.notify('~r~Ваша аптечка куда то потерялась');
  }

  if (cost) {
    _user.user.removeCashMoney(target, cost);

    _user.user.addCashMoney(player, cost * 0.5);

    _coffer.coffer.addMoney(cost * 0.5);
  }

  _user.user.playScenario(player, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');

  setTimeout(() => {
    if (!mp.players.exists(player)) return;

    _user.user.stopScenario(player, true);

    if (!mp.players.exists(target)) return;
    if (_user.user.isCuff(player)) return;
    if (_user.user.isDead(player)) return;

    _user.user.useAdrenaline(target);

    target.health = 100;
    setTimeout(() => {
      if (mp.players.exists(target)) _user.user.healProtect(target), target.health = 100;
    }, 1000);

    _chat.chat.sendMeCommand(player, 'использовал аптечку на пострадавшем');
  }, 5000);
});
mp.events.add('healNearest', async (player, pay) => {
  if (!_user.user.isEms(player) && !_user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~У вас нет должной квалификации чтобы оказывать медицинскую помощь");
  if (pay && _user.user.isUsmc(player) && !_user.user.isAdminNow(player)) return player.notify("~r~Вы не можете оказывать платные услуги");
  if (!_user.user.hasItem(player, 278) && !_user.user.hasItem(player, 215)) return player.notify("~r~У вас нет ~b~" + _items.items.getItemNameById(278) + " ~r~либо ~b~" + _items.items.getItemNameById(215));
  let target = await _menu.menu.selectNearestPlayers(player, 3);
  if (!target) return player.notify("~r~Поблизости никого нет");
  if (_user.user.isDead(target)) return player.notify("~r~Человеку поблизости требуется реанимация");
  let cost = _user.user.getLevel(target) == 1 ? 100 : _inventory2.healItemCost3;
  if (!pay) cost = 0;
  let status = true;
  if (_user.user.isUsmc(player) && !_user.user.isUsmc(target)) return player.notify(`~r~Вы можете оказывать помощь только сотруднику ${_user.user.getPlayerFractionName(player)}`);
  if (pay) status = await _user.user.accept(target, "Принять лечение?", "~g~Принять ($" + cost + ")", "Нет", true);
  if (!mp.players.exists(player)) return;
  if (!mp.players.exists(target)) return;

  if (!status) {
    player.notify(`~r~Пациент отказался`);
    target.notify(`~r~Вы отказались`);
    return;
  }

  if (_user.user.isDead(target)) return player.notify("~r~Человеку поблизости требуется реанимация");

  if (cost && _user.user.getCashMoney(target) < cost) {
    player.notify(`~r~У пациента недостаточно средств для оплаты`);
    target.notify(`~r~У вас недостаточно средств для оплаты`);
    return;
  }

  if (!_user.user.removeItem(player, 215)) {
    if (!_user.user.removeItem(player, 278)) {
      return player.notify('~r~Ваша аптечка куда то потерялась');
    }
  }

  if (_user.user.isCuff(player)) return;
  if (_user.user.isDead(player)) return;

  if (cost) {
    _user.user.removeCashMoney(target, cost);

    _user.user.addCashMoney(player, cost * 0.5);

    _coffer.coffer.addMoney(cost * 0.5);
  }

  _user.user.healProtect(target);

  target.health = 100;

  _chat.chat.sendMeCommand(player, 'использовал аптечку на пострадавшем');
});

async function unEquipWeaponEvent(player, item_id) {
  if (player.spamProtect) return player.notify(`~r~Подождите пару секунд`), inventory.openInventory(player);
  if (!_user.user.isStill(player)) return player.notify(`~r~Чтобы снять оружие с экипировки - нужно остановится`), inventory.openInventory(player);
  player.spamProtect = true;
  setTimeout(() => {
    player.spamProtect = false;
  }, 5000);
  await _user.user.unEquipWeapon(player, item_id);
  inventory.updateInventory(player);
}

mp.events.add('inventory:unequipgun', unEquipWeaponEvent);
mp.events.add('bankcardreward', (player, id) => {});
setTimeout(() => {
  _methods.methods.createDynamicCheckpoint(new mp.Vector3(353.66, -578.21, 27.79), "Нажмите ~g~Е~s~ чтобы открыть склад", player => {
    if (!_user.user.isEms(player) && !_user.user.isAdminNow(player, 6)) return player.notify(`~r~У вас нет доступа к складу`);

    let m = _menu.menu.new(player, "Склад");

    m.newItem({
      name: "Взять аптечку",
      onpress: () => {
        if (inventory.currentAmount(1, _user.user.getId(player)) + _items.items.getItemWeightById(215) > inventory.maxAmount(1, _user.user.getId(player))) return player.notify('~r~У вас недостаточно места в инвентаре');
        inventory.addItem(player, 215, 1, 1, _user.user.getId(player), 1, 10);
        player.notify('~g~Вы получили аптечку');
      }
    });
    m.newItem({
      name: "Взять спец. аптечку",
      onpress: () => {
        if (inventory.currentAmount(1, _user.user.getId(player)) + _items.items.getItemWeightById(278) > inventory.maxAmount(1, _user.user.getId(player))) return player.notify('~r~У вас недостаточно места в инвентаре');
        inventory.addItem(player, 278, 1, 1, _user.user.getId(player), 1, 10);
        player.notify('~g~Вы получили аптечку');
      }
    });
    m.newItem({
      name: "Сдать все аптечки на склад",
      onpress: () => {
        inventory.deleteHealItemsFromPlayer(player, true);
      }
    });
    m.open();
  });
}, 1000);
},{"./modules/methods":"qXSp","./modules/chat":"e1Zb","./user":"QE3B","./enums":"ZRYf","./items":"nuVl","./vehicles":"pYYy","./weapons":"YeMF","./modules/entity/inventory":"bqqA","../util/inventory":"Jhu1","./modules/vehicleInfo":"f3Ap","../util/sharedData":"bNis","./modules/menu":"Aiz7","./stock":"MdNj","./coffer":"sKID","./managers/tablet.events":"Fdqv","./modules/customchest":"sAsv","../util/fractions":"Zeqt","../util/methods":"Z5QB","../util/weapons":"kwVd","./houses":"buna"}],"rfaj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weaponChest = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let weaponChest = class weaponChest extends _sequelizeTypescript.Model {};
exports.weaponChest = weaponChest;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], weaponChest.prototype, "id", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", String)], weaponChest.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.DataType.TEXT,
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('items'));
  },

  set(value) {
    this.setDataValue('items', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], weaponChest.prototype, "items", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", Number)], weaponChest.prototype, "weight", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], weaponChest.prototype, "dimension", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", Number)], weaponChest.prototype, "fraction", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('pos'));
  },

  set(value) {
    this.setDataValue('pos', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_a = typeof Vector3Mp !== "undefined" && Vector3Mp) === "function" ? _a : Object)], weaponChest.prototype, "pos", void 0);

exports.weaponChest = weaponChest = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_weapon_chests"
})], weaponChest);
},{}],"eVha":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newChest = exports.maxShipWeight = exports.initChests = exports.illegalList = exports.baseItems = void 0;
exports.newOrder = newOrder;
exports.order = exports.oldChestPool = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _equip = require("../../util/equip");

var _inventory = require("../inventory");

var _menu = require("./menu");

var _items = require("../items");

var _dispatcher = require("../managers/dispatcher");

var _weaponChest = require("./entity/weaponChest");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const personLimitCountDownTimer = 3;
const maxShipWeight = 5000;
exports.maxShipWeight = maxShipWeight;
const maxVehWeight = 1000;
let debug = false;
setTimeout(() => {
  if (_methods.methods.isTestServer()) debug = true;
}, 10000);
let chests = new Map();
let oldChestPool = chests;
exports.oldChestPool = oldChestPool;
let order = {
  botPedModel: "s_m_y_armymech_01",
  botHeading: 0.67,
  boatEndPos: new mp.Vector3(522.87, -3189.62, 0.91),
  boatStartPos: new mp.Vector3(534.16, -3986.24, 0.78),
  boatModel: "tug",
  colshapePos: new mp.Vector3(511.74, -3189.68, 5.07),
  inProcess: false
};
exports.order = order;
const acceptedVehs = [mp.joaat("RIOT"), mp.joaat("INSURGENT2"), mp.joaat("FBI2"), mp.joaat("FIB2"), mp.joaat("Barracks"), mp.joaat("burrito3"), mp.joaat("Barracks3")];
const illegalList = [{
  name: "Другие наркотические вещества",
  range: [2, 3],
  cost: 0
}, {
  name: "Пакеты с наркотическими средствами",
  range: [70, 162],
  cost: 0
}, {
  name: "Крупные упаковки наркотических средств",
  range: [163, 170],
  cost: 100
}, {
  name: "Оружие",
  range: [54, 136],
  cost: 300
}, {
  name: "C4",
  range: [262, 262],
  cost: 500
}, {
  name: "Спец. отмычки",
  range: [263, 263],
  cost: 100
}];
exports.illegalList = illegalList;

function newOrder(player, itemslist) {
  return new Promise(async resolve => {
    if (order.inProcess) return resolve(false), player.notify("~r~Сейчас нельзя заказывать вооружение");
    order.inProcess = true;
    let weight = 0;
    itemslist.forEach(value => {
      weight += _items.items.getItemAmountById(_methods.methods.parseInt(value.model)) * value.amount;
    });

    _dispatcher.dispatcher.sendLocalPos("Заказ вооружения", "Корабль с вооружением готовится к погрузке", order.colshapePos, 4, false);

    setTimeout(() => {
      _dispatcher.dispatcher.sendLocalPos("Заказ вооружения", "Корабль с вооружением готовится к отплытию. Суммарный вес - " + _methods.methods.parseInt(weight / 1000) + "кг", order.colshapePos, 4, false);

      setTimeout(() => {
        _dispatcher.dispatcher.sendLocalPos("Заказ вооружения", "Корабль с вооружением направляется в сторону порта", order.colshapePos, 4, true);
      }, debug ? 1000 : 60000);
    }, debug ? 1000 : 60000);
    setTimeout(() => {
      _dispatcher.dispatcher.sendLocalPos("Заказ вооружения", "Корабль с вооружением прибывает через минуту", order.colshapePos, 4, true);

      setTimeout(() => {
        _dispatcher.dispatcher.sendLocalPos("Заказ вооружения", "Прибыл корабль с заказанным вооружением", order.colshapePos, 4, true);

        itemslist.map(itm => {
          _inventory.inventory.createManyItem(_methods.methods.parseInt(itm.model), 0, 999, 1, itm.amount);
        });
        setTimeout(() => {
          order.inProcess = false;
        }, debug ? 1000 : 60000 * 60);
      }, debug ? 1000 : 60000);
    }, debug ? 1000 : 9 * 60 * 1000);
  });
}

const returnAfterDestroy = entity => {
  if (entity.getVariable('chestWeaponItems')) {
    const q = JSON.parse(entity.getVariable("chestWeaponItems"));
    let resitems = q.map(([model, amount]) => {
      return {
        model,
        amount
      };
    });
  }

  if (entity.getVariable('chestWeaponItemsShip')) {
    const q = JSON.parse(entity.getVariable("chestWeaponItemsShip"));
    let resitems = q.map(([model, amount]) => {
      return {
        model,
        amount
      };
    });
  }
};

const initChests = () => {
  _weaponChest.weaponChest.findAll().then(datas => {
    datas.forEach(item => {
      newChest(item.name, item.fraction, item.pos, item.weight, item.items, item.id, item.dimension);
    });
  });
};

exports.initChests = initChests;
mp.events.add("playerQuit", player => {
  returnAfterDestroy(player);
});
mp.events.add("vehicleDestroy", vehicle => {
  returnAfterDestroy(vehicle);
});
mp.blips.new(615, order.colshapePos, {
  dimension: 0,
  name: "Военный порт",
  scale: 0.5,
  color: 8,
  shortRange: true
});
setTimeout(() => {
  _methods.methods.createDynamicCheckpoint(order.colshapePos, "Нажмите ~g~E~w~ чтобы открыть заказ", player => {
    if (_user.user.getPlayerFraction(player) != 4) return player.notify("~r~Доступно только для армии");
    if (_user.user.getPlayerFractionRank(player) < 12) return player.notify("~r~Доступно только для лидеров и замов");

    let m = _menu.menu.new(player, "Доставка груза");

    m.newItem({
      name: "Загрузка предметов в транспортную сумку",
      onpress: () => {
        let transferBag = _user.user.getItem(player, _inventory.inventory.types.BagTransfer);

        if (!transferBag) return player.notify(`~r~У вас нет в инвентаре ~b~${_items.items.getItemNameById(_inventory.inventory.types.BagTransfer)}`);

        let allitems = _inventory.inventory.getItemListData(999, 1);

        if (allitems.length == 0) return player.notify(`~r~Нечего загружать`);
        allitems.map(item => {
          if (_inventory.inventory.currentAmount(_inventory.inventory.types.BagTransfer, transferBag.id) + _items.items.getItemWeightById(item.item_id) > _inventory.inventory.maxAmount(_inventory.inventory.types.BagTransfer, transferBag.id)) {
            player.notify(`~r~${_items.items.getItemNameById(item.item_id)} не был загружен. Причина - сумка переполнена`);
          } else {
            _inventory.inventory.updateItemOwnerSystem(item.id, _inventory.inventory.types.BagTransfer, transferBag.id);
          }
        });
        allitems = _inventory.inventory.getItemListData(_inventory.inventory.types.BagTransfer, transferBag.id);
      }
    });
    m.newItem({
      name: "Содержимое",
      onpress: () => {
        _menu.menu.close(player);

        setTimeout(() => {
          if (mp.players.exists(player)) _inventory.inventory.openInventory(player, 999, 1);
        }, 100);
      }
    });
    m.open();
  });

  mp.events.register("server:chest:takeEquip", (player, model) => {
    if (typeof player.chestId != "number") return _user.user.setGui(player, null);
    let ch = Chest.get(player.chestId);
    if (!ch) return _user.user.setGui(player, null);
    ch.giveItem(player, model);
    return true;
  });
  mp.events.addRemoteCounted('server:chests:vehicle:grab', player => {
    const vehicle = player.vehicle;
    if (!vehicle) return player.notify("~r~Вы должны быть в транспорте");
    if (!vehicle.getVariable('chestWeaponItemsShip')) return player.notify("~r~В транспорте нет оружия");
    grab(player);
  });
  mp.events.addRemoteCounted('server:checstWeaponVeh:unload', player => {
    const vehicle = player.vehicle;
    if (!vehicle) return player.notify("~r~Вы должны быть в транспорте");
    if (!vehicle.getVariable('chestWeaponItems') && !vehicle.getVariable('chestWeaponItemsShip')) return player.notify("~r~В транспорте нет оружия");
    if (player.getVariable('chestWeaponItems')) return player.notify("~r~У вас уже есть сумка с оружием, вам необходимо доставить её на склад");
    const nearChests = [...chests].find(([_, chest]) => _methods.methods.distanceToPos2D(player.position, chest.pos) < 150);
    if (!nearChests) return player.notify("~r~Выгружать оружие с транcпорта можно только возле склада");
    if (vehicle.getVariable('chestWeaponItemsShip') && nearChests[1].fraction != 4) return player.notify("~r~Выгружать оружие с транcпорта можно только возле конечного склада");
    player.setVariable('chestWeaponItems', player.vehicle.getVariable(vehicle.getVariable('chestWeaponItems') ? 'chestWeaponItems' : 'chestWeaponItemsShip'));
    vehicle.setVariable('chestWeaponItems', undefined);
    vehicle.setVariable('chestWeaponItemsShip', undefined);

    _user.user.setComponentVariation(player, 5, 45, 0);

    player.notify("~g~Вы выгрузили сумку с оружием, отнесите её на склад");
  });
}, 2000);

class Chest {
  constructor(pos, name, fractionId, rank, itemss, maxSize = 1000, id, dimension) {
    this.personLimit = new Map();
    this.dimension = dimension;
    this.id = id;
    this.pos = pos;
    this.name = name;
    this.fraction = fractionId;
    this.rank = rank ? rank : 1;
    this.items = itemss;
    this.items.map(item => {
      const news = {
        model: item.model,
        amount: item.amount,
        rank: item.rank,
        personLimit: item.personLimit
      };
      item = _objectSpread({}, news);
    });
    this.maxWeight = maxSize;
    chests.set(this.id, this);
    this.checkpoint = _methods.methods.createDynamicCheckpoint(pos, "Нажмите ~g~E~w~ чтобы открыть " + name, player => {
      if (_user.user.getAdminLevel(player) != 6 && this.fraction != _user.user.getPlayerFraction(player)) return player.notify("~r~У вас нет доступа к данному складу");
      if (_user.user.getAdminLevel(player) != 6 && this.rank > _user.user.getPlayerFractionRank(player)) return player.notify("~r~У вас нет доступа к данному складу");
      player.chestId = this.id;

      let m = _menu.menu.new(player, this.name, "Действия");

      let weight = 0;
      this.items.forEach(item => {
        weight += _items.items.getItemAmountById(_methods.methods.parseInt(item.model)) * item.amount;
      });
      weight = _methods.methods.parseInt(weight / 1000);
      m.newItem({
        name: "Объём склада " + (weight > this.maxWeight ? "| ~r~Перегруз" : ""),
        desc: weight > this.maxWeight ? "~r~Вы не можете больше наполнять склад" : "",
        more: weight + "/" + this.maxWeight + " кг"
      });
      m.newItem({
        name: "Взять со склада",
        onpress: () => this.openChest(player)
      });
      m.newItem({
        name: "Сдать на склад",
        onpress: () => this.returnItemMenu(player)
      });

      if (_user.user.isGos(player)) {
        m.newItem({
          name: "Утилизировать конфискат",
          onpress: () => this.dropIllegal(player)
        });
      }

      if (this.fraction == 4 && _user.user.getPlayerFractionRank(player) > 11) {
        m.newItem({
          name: "Загрузить арсенал в транспорт",
          onpress: () => {
            this.loadInVeh(player);
          }
        });
        m.newItem({
          name: "Новый заказ",
          onpress: () => {
            this.newOrder(player);
          }
        });
      }

      if (player.getVariable("chestWeaponItems") || player.getVariable("chestWeaponItemsShip")) {
        m.newItem({
          name: "Выгрузить сумку на склад",
          onpress: () => {
            this.loadInChest(player);
          }
        });
      }

      if (_user.user.isLeader(player) || _user.user.getAdminLevel(player) == 6) {
        m.newItem({
          name: "Записи склада",
          onpress: () => {
            _menu.menu.close(player);

            _user.user.setGui(player, "chestLog");
          }
        });
        m.newItem({
          name: "Настроить доступ к складу",
          onpress: () => {
            this.rankEdit(player);
          }
        });
        m.newItem({
          name: "Настроить лимиты предметов",
          desc: "Указанный лимит - персональный на одного человека",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;

              const edits = () => {
                let submenu = _menu.menu.new(player, "Предметы");

                this.items.map(item => {
                  submenu.newItem({
                    name: this.getDescItem(item.model).name,
                    more: "x" + item.personLimit,
                    onpress: () => {
                      _menu.menu.input(player, "Введите новое количество", item.personLimit.toString(), 11, "int").then(cnt => {
                        let count = _methods.methods.parseInt(cnt);

                        if (isNaN(count) || count < 0 || count > 10000) return player.notify("~r~Количество указанно не верно");
                        item.personLimit = count;
                        this.personLimit = new Map();
                        this.save();
                        edits();
                        player.notify("~g~Количество изменено");
                      });
                    }
                  });
                });
                submenu.open();
              };

              edits();
            });
          }
        });
      }

      if (_user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "Переименовать склад",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;

              _menu.menu.input(player, "Введите имя", this.name, 30).then(name => {
                if (!name) return;
                this.name = name;
                this.save();
                player.notify("Успешно");
              });
            });
          }
        });
        m.newItem({
          name: "Сбросить лимиты",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;
              this.personLimit = new Map();
            });
          }
        });
        m.newItem({
          name: "Редактор предметов",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;

              const edits = () => {
                let submenu = _menu.menu.new(player, "Предметы");

                submenu.newItem({
                  name: "Добавить новый предмет",
                  onpress: () => {
                    let names = [];

                    _equip.EquipDataItems.map(itm => {
                      names.push(itm.name);
                    });

                    _menu.menu.selector(player, "Выберите предмет", names, true).then(id => {
                      const desc = _equip.EquipDataItems[id];

                      if (this.items.find(itm => itm.model == desc.model)) {
                        edits();
                        player.notify("~r~Данный предмет уже добавлен в данное хранилище");
                      }
                    });
                  }
                });
                this.items.map((item, index) => {
                  submenu.newItem({
                    name: this.getDescItem(item.model).name,
                    more: "x" + item.amount,
                    onpress: () => {
                      _menu.menu.input(player, "Введите новое количество (Чтобы удалить - -1)", item.amount.toString(), 11, "int").then(cnt => {
                        if (cnt == -1) {
                          this.items.splice(index, 1);
                          this.save();
                          edits();
                          return player.notify("~g~Предмет удалён");
                        }

                        let count = _methods.methods.parseInt(cnt);

                        if (isNaN(count) || count < 0 || count > 10000) return player.notify("~r~Количество указанно не верно");
                        item.amount = count;
                        this.save();
                        edits();
                        player.notify("~g~Количество изменено");
                      });
                    }
                  });
                });
                submenu.open();
              };

              edits();
            });
          }
        });
        m.newItem({
          name: "Сменить вес склада",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;

              _menu.menu.input(player, "Введите новый вес", this.maxWeight.toString(), 30).then(kgs => {
                const kg = _methods.methods.parseInt(kgs);

                if (isNaN(kg) || kg < 800 || kg > 40000) return player.notify("~r~Вес указан не верно");
                this.maxWeight = kg;
                this.save();
                player.notify("Успешно");
              });
            });
          }
        });
        m.newItem({
          name: "~r~Удалить склад",
          onpress: () => {
            _user.user.accept(player, "Точно?").then(status => {
              if (!status) return;

              _user.user.accept(player, "Вот прям точно?").then(status2 => {
                if (!status2) return;

                _user.user.accept(player, "Вот прям точно?").then(status3 => {
                  if (!status3) return;

                  _user.user.accept(player, "Серёга, ты уверен?").then(status4 => {
                    if (!status4) return;
                    this.delete();
                  });
                });
              });
            });
          }
        });
      }

      m.open();
    }, 1, this.dimension);
  }

  static get(id) {
    return chests.get(id);
  }

  static getDescItem(model) {
    return _equip.EquipDataItems.find(item => item.model == model);
  }

  delete() {
    this.checkpoint.delete();
    chests.delete(this.id);

    _weaponChest.weaponChest.destroy({
      where: {
        id: this.id
      }
    });
  }

  rankEdit(player) {
    if (!_user.user.isLeader(player) && _user.user.getAdminLevel(player) != 6) return player.notify("~r~Доступно только лидеру");

    let m = _menu.menu.new(player, this.name, "Список доступного арсенала");

    let ranks = [];

    for (let q = 1; q < 13; q++) ranks.push(q + " уровень");

    this.items.forEach(itm => {
      let desc = Chest.getDescItem(itm.model);
      m.newItem({
        name: desc.name,
        type: "list",
        list: ranks,
        listSelected: itm.rank - 1,
        onchange: value => [itm.rank = value + 1, player.notify("Ранг успешно изменён"), this.save()]
      });
    });
    m.open();
  }

  save() {
    _weaponChest.weaponChest.findOne({
      where: {
        id: this.id
      }
    }).then(item => {
      item.name = this.name;
      item.items = this.items;
      item.weight = this.maxWeight;
      item.dimension = this.dimension;
      item.save();
    });
  }

  getDescItem(name) {
    return Chest.getDescItem(name);
  }

  newOrder(player) {
    let m = _menu.menu.new(player, this.name, "Список доступного арсенала");

    let itemsorder = new Map();

    _equip.EquipDataItems.map(item => {
      if (item.shiporder) {
        itemsorder.set(item.model, 0);
        m.newItem({
          name: item.name,
          type: "range",
          rangeselect: [0, 1000],
          onchange: value => itemsorder.set(item.model, value)
        });
      }
    });

    m.newItem({
      name: "~g~Заказать",
      onpress: () => {
        let resitem = [];
        let weight = 0;
        itemsorder.forEach((value, item) => {
          weight += _items.items.getItemAmountById(_methods.methods.parseInt(item)) * value;
          resitem.push({
            model: item,
            amount: value
          });
        });
        if (weight > maxShipWeight * 1000) return player.notify("~r~Заказ не может превышать вес в " + maxShipWeight + "кг. Вес вашего текущего заказа - " + _methods.methods.parseInt(weight / 1000) + " кг.");
        newOrder(player, resitem);
        this.save();
      }
    });
    m.open();
  }

  loadInChest(player) {
    if (!player.getVariable("chestWeaponItems")) return player.notify("~r~У вас нет сумки в оружием");

    _menu.menu.close(player);

    const resitems = JSON.parse(player.getVariable("chestWeaponItems"));
    resitems.map(([item, value]) => {
      if (!this.items.find(q => q.model == item)) {
        this.items.push({
          model: item,
          amount: value,
          rank: _methods.methods.getLeaderRank(this.rank),
          personLimit: 1
        });
      } else {
        this.items.find(q => q.model == item).amount += value;
      }

      _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Разгрузил на склад ' + this.name + ' ' + this.getDescItem(item).name + " (x" + value + ")", this.fraction);

      _user.user.log(player, "ChestLog", 'Разгрузил на склад ' + this.name + ' ' + this.getDescItem(item).name + " (x" + value + ")" + this.fraction);
    });
    player.setVariable("chestWeaponItems", undefined);
    player.notify("~g~Вы успешно разгрузили оружие");

    _user.user.setComponentVariation(player, 5, 0, 0);

    this.save();
  }

  loadInVeh(player) {
    let m = _menu.menu.new(player, this.name, "Список доступного арсенала");

    let itemsorder = new Map();
    this.items.map(item => {
      itemsorder.set(item.model, 0);

      if (item.amount > 0) {
        let desc = Chest.getDescItem(item.model);
        itemsorder.set(item.model, 0);
        m.newItem({
          name: desc.name + " (x" + item.amount + ")",
          type: "range",
          rangeselect: [0, 1000],
          onchange: value => {
            itemsorder.set(item.model, value);
          }
        });
      }
    });
    m.newItem({
      name: "Загрузить",
      desc: "Загрузить указанный арсенал в ближайший транспорт",
      onpress: () => {
        let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10);

        if (!mp.vehicles.exists(veh)) return player.notify("~r~Поблизости транспорт не обнаружен");
        if (veh.getVariable('chestWeaponItemsShip')) return player.notify("~r~В транспорте уже есть погруженное оружие");
        if (veh.getVariable('chestWeaponItems')) return player.notify("~r~В транспорте уже есть погруженное оружие");
        if (acceptedVehs.indexOf(veh.model) == -1) return player.notify("~r~В данном ТС нельзя перевозить оружие");
        let err = false;
        itemsorder.forEach((value, item) => {
          if (this.items.find(q => q.model == item).amount < value) {
            err = true;
            player.notify("~r~" + this.getDescItem(item).name + " не хватает на складе");
          }
        });
        if (err) return;
        m.close();
        itemsorder.forEach((value, item) => {
          this.items.find(q => q.model == item).amount -= value;

          _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Выгрузил со склада ' + this.name + ' в ТС ' + veh.numberPlate + ' ' + this.getDescItem(item).name + " (x" + value + ")", this.fraction);

          _user.user.log(player, "ChestLog", 'Выгрузил со склада ' + this.name + ' в ТС ' + veh.numberPlate + ' ' + this.getDescItem(item).name + " (x" + value + ")" + this.fraction);
        });
        const resitems = [...itemsorder];
        veh.setVariable('chestWeaponItems', JSON.stringify(resitems));
        player.notify("~g~Вы погрузили оружие в ТС");
        this.save();
      }
    });
    m.open();
  }

  openChest(player, reopen = false) {
    _menu.menu.close(player);

    if (this.fraction != _user.user.getPlayerFraction(player)) return player.notify("~r~У вас нет доступа к данному складу");
    if (this.rank > _user.user.getPlayerFractionRank(player)) return player.notify("~r~У вас нет доступа к данному складу");
    if (!reopen) this.createPersonLimit(player), _user.user.setGui(player, "chest_equip");
    mp.events.triggerBrowser(player, "server:openChest", this.name, this.items, _user.user.getPlayerFractionRank(player));
  }

  returnItemMenu(player) {
    let weight = 0;
    this.items.forEach(item => {
      weight += _items.items.getItemAmountById(_methods.methods.parseInt(item.model)) * item.amount;
    });
    if (weight / 1000 > this.maxWeight) return player.notify("~r~Максимальный объём склада превышен");

    _menu.menu.close(player);

    let m = _menu.menu.new(player, this.name, "Список доступных предметов");

    _inventory.inventory.getItemListData(1, _user.user.getId(player)).map(item => {
      let chestItem = this.items.find(itm => item.item_id.toString() == itm.model);

      if (chestItem) {
        let desc = this.getDescItem(chestItem.model);
        m.newItem({
          name: desc.name,
          onpress: () => {
            let weight = 0;
            this.items.forEach(item => {
              weight += _items.items.getItemAmountById(_methods.methods.parseInt(item.model)) * item.amount;
            });
            if (weight / 1000 > this.maxWeight) return player.notify("~r~Максимальный объём склада превышен");

            _inventory.inventory.deleteItem(item.id);

            chestItem.amount++;

            _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Положил на склад ' + this.name + ' ' + desc.name, this.fraction);

            _user.user.log(player, "ChestLog", 'Положил на склад ' + this.name + ' ' + desc.name + " " + this.fraction);

            _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

            this.returnItemMenu(player);
            this.save();
          }
        });
      }
    });

    m.open();
  }

  dropIllegal(player) {
    let m = _menu.menu.new(player, "Утилизация", "Список доступных предметов");

    _inventory.inventory.getItemListData(1, _user.user.getId(player)).map(item => {
      let chestItem = illegalList.find(itm => item.item_id >= itm.range[0] && item.item_id <= itm.range[1]);

      if (chestItem) {
        let desc = _items.items.getItemNameById(item.item_id);

        m.newItem({
          name: desc,
          onpress: () => {
            _inventory.inventory.deleteItem(item.id);

            _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Утилизировал на складе ' + this.name + ' ' + desc, this.fraction);

            _user.user.log(player, "ChestLog", 'Утилизировал на складе ' + this.name + ' ' + desc + " " + this.fraction);

            _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

            this.dropIllegal(player);

            if (chestItem.cost > 0) {
              _user.user.addCashMoney(player, chestItem.cost);

              player.notify("~g~Получено за утилизацию - " + chestItem.cost + "$");
            }

            this.save();
          }
        });
      }
    });

    m.open();
  }

  giveItem(player, model) {
    const item = this.items.find(item => item.model == model);

    const userid = _user.user.getId(player);

    if (!item) return player.notify("~r~На складе нет такого предмета");
    let desc = this.getDescItem(item.model);
    if (!desc) return player.notify("~r~У нас такого предмета нет");
    if (item.amount == 0) return player.notify(`~r~${desc.name} закончился на складе`);
    if (item.rank > _user.user.getPlayerFractionRank(player)) return player.notify(`~r~${desc.name} доступен только с ранга ${item.rank}`);
    this.createPersonLimit(player);
    const limit = this.personLimit.get(userid + "_" + item.model);
    if (limit == 0) return player.notify(`~r~Вы больше не можете брать ${desc.name}`);
    const isweapon = item.model.toLowerCase().indexOf("weapon") == 0;

    let amount = _inventory.inventory.getInvAmount(player, _user.user.getId(player), 1);

    let itemid = _methods.methods.parseInt(item.model);

    if (itemid == 252) {
      player.armour = 100;
      player.notify(`~g~Вы экипировали бронежилет`);
    } else if (isweapon) {
      _user.user.giveWeaponByHash(player, mp.joaat(item.model.toUpperCase()), desc.ammo);

      player.notify(`~g~Вы получили ${desc.name} (x1) и патроны (x${desc.ammo})`);
    } else {
      if (amount + _items.items.getItemAmountById(itemid) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
        player.notify('~r~Инвентарь заполнен');
        return;
      }

      _inventory.inventory.addItem(player, itemid, 1, 1, userid, desc.ammo, -1, -1, -1);

      player.notify(`~g~Вы получили ${desc.name} (x${desc.ammo})`);
    }

    if (limit > 0) this.personLimit.set(userid + "_" + item.model, limit - 1);
    item.amount--;

    _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

    setTimeout(() => {
      this.openChest(player, true);
    }, 100);

    _methods.methods.saveFractionLog(_user.user.getRpName(player), 'Взял ' + desc.name + ' со склада ' + this.name, this.fraction);

    _user.user.log(player, "ChestLog", 'Взял ' + desc.name + ' со склада ' + this.name + ' ' + this.fraction);

    this.save();
    if (limit != -1 && _user.user.isLeader(player)) return this.personLimit.set(userid + "_" + item.model, this.personLimit.get(userid + "_" + item.model) + 1);
    if (limit == -1) return;
    setTimeout(() => this.personLimit.set(userid + "_" + item.model, this.personLimit.get(userid + "_" + item.model) + 1), personLimitCountDownTimer * 60000);
  }

  createPersonLimit(player) {
    const userid = _user.user.getId(player);

    this.items.map(item => {
      if (!this.personLimit.has(userid + "_" + item.model)) {
        this.personLimit.set(userid + "_" + item.model, item.personLimit ? item.personLimit : -1);
      }
    });
  }

}

function grab(player) {
  return;
  let vehicle = player.vehicle;
  if (!vehicle) return player.notify("~r~Вы должны быть в транспорте");
  if (!vehicle.getVariable('chestWeaponItemsShip')) return player.notify("~r~В транспорте нет оружия");

  let m = _menu.menu.new(player, "Содержимое");

  let resitems = JSON.parse(vehicle.getVariable('chestWeaponItemsShip'));
  let itemsorder = new Map();
  resitems.map(([model, amount]) => {
    let desc = this.getDescItem(model);
    let ammountList = [];

    for (let q = 0; q < amount + 1; q++) ammountList.push(q + " шт.");

    m.newItem({
      name: desc.name,
      type: "list",
      list: ammountList,
      onchange: value => itemsorder.set(model, value)
    });
  });
  m.newItem({
    name: "~y~Выгрузить",
    onpress: () => {
      vehicle = player.vehicle;
      if (!vehicle) return player.notify("~r~Вы должны быть в транспорте");
      if (!vehicle.getVariable('chestWeaponItemsShip')) return player.notify("~r~В транспорте нет оружия");
      resitems = JSON.parse(vehicle.getVariable('chestWeaponItemsShip'));
      let err = false;
      itemsorder.forEach((amount, model) => {
        let q = resitems.find(itm => itm[0] == model);

        if (q[1] < amount) {
          err = true;
        }
      });

      if (err) {
        player.notify("~r~Вы пытаетесь выгрузить то, чего уже нет в ТС");
      } else {
        itemsorder.forEach((amount, model) => {
          let desc = Chest.getDescItem(model);

          if (amount * _items.items.getItemAmountById(_methods.methods.parseInt(model)) > 55000) {
            player.notify('~r~Инвентарь заполнен');
            return;
          }

          const isweapon = desc.model.toLowerCase().indexOf("weapon") == 0;

          _inventory.inventory.addItem(player, _methods.methods.parseInt(model), isweapon ? amount : 1, 1, _user.user.getId(player), !isweapon ? amount : 1, -1, -1, -1);

          player.notify(`~g~Вы получили ${desc.name} (x${amount})`);
          resitems.find(itm => itm[0] == model)[1] -= amount;
        });
        let cnt = 0;
        resitems.forEach(q => {
          cnt += q[1];
        });

        if (cnt == 0) {
          vehicle.setVariable('chestWeaponItemsShip', undefined);
        } else {
          vehicle.setVariable('chestWeaponItemsShip', JSON.stringify(resitems));
        }
      }

      grab(player);
    }
  });
  m.open();
}

const baseItems = [{
  model: "59",
  amount: 10,
  rank: 1,
  personLimit: 1
}, {
  model: "66",
  amount: 10,
  rank: 1,
  personLimit: 1
}, {
  model: "82",
  amount: 15,
  rank: 1,
  personLimit: 1
}, {
  model: "78",
  amount: 15,
  rank: 1,
  personLimit: 1
}, {
  model: "90",
  amount: 15,
  rank: 2,
  personLimit: 1
}, {
  model: "103",
  amount: 15,
  rank: 3,
  personLimit: 1
}, {
  model: "110",
  amount: 15,
  rank: 4,
  personLimit: 1
}, {
  model: "119",
  amount: 15,
  rank: 5,
  personLimit: 1
}, {
  model: "146",
  amount: 10,
  rank: 4,
  personLimit: 1
}, {
  model: "153",
  amount: 20,
  rank: 2,
  personLimit: 1
}, {
  model: "27",
  amount: 20,
  rank: 2,
  personLimit: 1
}, {
  model: "28",
  amount: 20,
  rank: 2,
  personLimit: 1
}, {
  model: "30",
  amount: 20,
  rank: 3,
  personLimit: 1
}, {
  model: "29",
  amount: 20,
  rank: 3,
  personLimit: 1
}, {
  model: "252",
  amount: 30,
  rank: 1,
  personLimit: 1
}, {
  model: "199",
  amount: 30,
  rank: 1,
  personLimit: 10
}, {
  model: "201",
  amount: 20,
  rank: 1,
  personLimit: 10
}, {
  model: "202",
  amount: 20,
  rank: 1,
  personLimit: 10
}, {
  model: "40",
  amount: 50,
  rank: 1,
  personLimit: 3
}, {
  model: "278",
  amount: 20,
  rank: 1,
  personLimit: 2
}];
exports.baseItems = baseItems;

const newChest = (name, fractionId, pos, size, items, id, dimension) => {
  new Chest(pos, name, fractionId, null, items, size, id, dimension);
};

exports.newChest = newChest;
},{"./methods":"qXSp","../user":"QE3B","../../util/equip":"EWWr","../inventory":"m5ow","./menu":"Aiz7","../items":"nuVl","../managers/dispatcher":"bsac","./entity/weaponChest":"rfaj"}],"K4Bd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.garderobEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let garderobEntity = class garderobEntity extends _sequelizeTypescript.Model {};
exports.garderobEntity = garderobEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], garderobEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.DataType.TEXT,
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('dresses'));
  },

  set(value) {
    this.setDataValue('dresses', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], garderobEntity.prototype, "dresses", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", Number)], garderobEntity.prototype, "fraction", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], garderobEntity.prototype, "dimension", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('position'));
  },

  set(value) {
    this.setDataValue('position', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_a = typeof Vector3Mp !== "undefined" && Vector3Mp) === "function" ? _a : Object)], garderobEntity.prototype, "position", void 0);

exports.garderobEntity = garderobEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_garderobs"
})], garderobEntity);
},{}],"IU8T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGarderobs = exports.garderobPool = exports.dressRoom = void 0;

var _methods = require("./methods");

var _menu = require("./menu");

var _user = require("../user");

var _garderob = require("./entity/garderob");

var _fractions = require("../../util/fractions");

const loadGarderobs = () => {
  _garderob.garderobEntity.findAll().then(datas => {
    datas.forEach(item => {
      new dressRoom(item.id, item.fraction, item.position, item.dresses, item.dimension);
    });
  });
};

exports.loadGarderobs = loadGarderobs;

class dressRoom {
  constructor(id, fraction, position, dresses, dimension) {
    this.id = id;
    this.fraction = fraction;
    this.position = position;
    this.dimension = dimension;
    this.dresses = dresses;
    this.checkpoint = _methods.methods.createDynamicCheckpoint(this.position, "Нажмите ~g~E~w~ чтобы открыть гардероб", player => {
      if (_user.user.getPlayerFraction(player) != this.fraction && !_user.user.isAdminNow(player, 2)) return player.notify("~r~Доступно только сотрудникам " + _methods.methods.getFractionName(this.fraction));

      let m = _menu.menu.new(player, "Гардероб | " + _methods.methods.getFractionName(this.fraction), "Список");

      this.dresses.forEach((item, index) => {
        if (_user.user.getSex(player) == 0 && item.target == "male" || _user.user.getSex(player) == 1 && item.target == "female") {
          m.newItem({
            name: item.name,
            type: "list",
            list: ["Одеть", "Сменить ранг", "Удалить"],
            onpress: mn => {
              if (mn.listSelected == 0) {
                if (item.rank > _user.user.getPlayerFractionRank(player)) return player.notify("~r~Вы не можете одеть данную форму");
                if (player.weaponsAll.length > 0) return player.notify(`~r~Снимите оружие с экипировки`);

                _user.user.applyCustomization(player, item.config);

                player.notify("~g~Вы переоделись");
              } else if (mn.listSelected == 1) {
                if (!_user.user.isSubLeader(player) && !_user.user.isAdminNow(player, 2)) return player.notify("~r~У вас нет доступа к редактированию формы");
                let list = [];

                for (let q = 1; q < 15; q++) {
                  list.push(_methods.methods.getFractionRankName(this.fraction, q) ? _methods.methods.getFractionRankName(this.fraction, q) : "Ранг " + q);
                }

                _menu.menu.selector(player, "Уровень доступа", _fractions.fractionUtil.getFractionRanks(this.fraction), true).then(rankid => {
                  if (typeof rankid != "number") return;
                  item.rank = rankid + 1;
                  player.notify("~g~Форма изменена");
                  this.save();
                });
              } else {
                if (!_user.user.isAdminNow(player, 2) && !_methods.methods.isTestServer()) return player.notify("~r~У вас нет доступа к удалению формы");

                _user.user.accept(player, "Вы уверены?").then(status => {
                  this.dresses.splice(index, 1);
                  player.notify("~g~Форма удалена");
                  this.save();
                });
              }
            }
          });
        }
      });
      m.newItem({
        name: "Снять форму",
        onpress: async () => {
          if (player.weaponsAll.length > 0) return player.notify(`~r~Снимите оружие с экипировки`);

          _user.user.resetCustomization(player);

          player.notify("~g~Вы переоделись");
        }
      });

      if (_user.user.isAdminNow(player, 2) || _methods.methods.isTestServer()) {
        m.newItem({
          name: "Новый комплект одежды (" + (_user.user.getSex(player) == 0 ? "Мужская" : "Женская") + ")",
          onpress: () => {
            _user.user.generateCustomizationSettings(player).then(config => {
              if (!config) return;

              _menu.menu.input(player, "Введите название одежды", "", 30).then(name => {
                if (!name) return;
                if (this.dresses.find(itm => itm.name == name && (_user.user.getSex(player) == 0 ? "male" : "female") == itm.target)) return player.notify("~r~Комплект одежды с таким названием уже существует");
                let list = [];

                for (let q = 1; q < 15; q++) {
                  list.push(_methods.methods.getFractionRankName(this.fraction, q) ? _methods.methods.getFractionRankName(this.fraction, q) : "Ранг " + q);
                }

                _menu.menu.selector(player, "Уровень доступа", list).then(rankname => {
                  if (!rankname) return;
                  const rank = list.indexOf(rankname) - 1;
                  this.dresses.push({
                    rank,
                    name,
                    config,
                    target: _user.user.getSex(player) == 0 ? "male" : "female"
                  });
                  player.notify("~g~Новая форма успешно добавлена");
                  this.save();
                });
              });
            });
          }
        });
        m.newItem({
          name: "Сохранить мой комплект одежды (" + (_user.user.getSex(player) == 0 ? "Мужская" : "Женская") + ")",
          onpress: () => {
            let config = _user.user.getCustomization(player);

            if (!config) return;

            _menu.menu.input(player, "Введите название одежды", "", 30).then(name => {
              if (!name) return;
              if (this.dresses.find(itm => itm.name == name)) return player.notify("~r~Комплект одежды с таким названием уже существует");
              let list = [];

              for (let q = 1; q < 15; q++) {
                list.push(_methods.methods.getFractionRankName(this.fraction, q) ? _methods.methods.getFractionRankName(this.fraction, q) : "Ранг " + q);
              }

              _menu.menu.selector(player, "Уровень доступа", list).then(rankname => {
                if (!rankname) return;
                const rank = list.indexOf(rankname) - 1;
                this.dresses.push({
                  rank,
                  name,
                  config,
                  target: _user.user.getSex(player) == 0 ? "male" : "female"
                });
                player.notify("~g~Новая форма успешно добавлена");
                this.save();
              });
            });
          }
        });
      }

      if (_user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "~r~Удалить гардероб",
          onpress: () => {
            this.delete(player);
          }
        });
      }

      m.open();
    }, 1, this.dimension);
    garderobPool.set(this.id, this);
  }

  save() {
    _garderob.garderobEntity.update({
      fraction: this.fraction,
      position: this.position,
      dresses: this.dresses
    }, {
      where: {
        id: this.id
      }
    });
  }

  delete(player) {
    if (!_user.user.isAdminNow(player, 6)) return player.notify("~r~Вы кто такой?");

    _user.user.accept(player, "Вы уверены?", "~r~Удалить", "~g~Не удалять").then(status => {
      if (!status) return;

      _garderob.garderobEntity.destroy({
        where: {
          id: this.id
        }
      }).then(() => {
        this.checkpoint.delete();
        garderobPool.delete(this.id);
        player.notify("~g~Больше данного гардероба не существует");
      });
    });
  }

  get position() {
    return this.positiondata;
  }

  set position(value) {
    this.positiondata = value;
    if (this.checkpoint) this.checkpoint.updatePos(value);
  }

  get dimension() {
    return this.dimensiondata;
  }

  set dimension(value) {
    this.dimensiondata = value;
    if (this.checkpoint) this.checkpoint.updateDimension(value);
  }

}

exports.dressRoom = dressRoom;
const garderobPool = new Map();
exports.garderobPool = garderobPool;
},{"./methods":"qXSp","./menu":"Aiz7","../user":"QE3B","./entity/garderob":"K4Bd","../../util/fractions":"Zeqt"}],"waLt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vSync = void 0;

var _vehicles = require("../vehicles");

var _data = require("../modules/data");

var _methods = require("../modules/methods");

let vSync = {
  WindowID: {
    WindowFrontRight: 0,
    WindowFrontLeft: 1,
    WindowRearRight: 2,
    WindowRearLeft: 3
  },
  SirenState: {
    Disable: 0,
    EnableWithoutSound: 1,
    EnableWithSoundSlow: 2,
    EnableWithSoundNormal: 3,
    EnableWithSoundFast: 4
  },
  WindowState: {
    WindowFixed: 0,
    WindowDown: 1,
    WindowBroken: 2
  },
  DoorID: {
    DoorFrontLeft: 0,
    DoorFrontRight: 1,
    DoorRearLeft: 2,
    DoorRearRight: 3,
    DoorHood: 4,
    DoorTrunk: 5
  },
  DoorState: {
    DoorClosed: 0,
    DoorOpen: 1,
    DoorBroken: 2
  },
  WheelID: {
    Wheel0: 0,
    Wheel1: 1,
    Wheel2: 2,
    Wheel3: 3,
    Wheel4: 4,
    Wheel5: 5,
    Wheel6: 6,
    Wheel7: 7,
    Wheel8: 8,
    Wheel9: 9
  },
  WheelState: {
    WheelFixed: 0,
    WheelBurst: 1,
    WheelOnRim: 2
  },
  VehicleSyncData: {
    Dirt: 0,
    Siren: 0,
    RadioState: 0,
    Engine: false,
    IndicatorLeftToggle: false,
    IndicatorRightToggle: false,
    InteriorLight: false,
    TaxiLight: false,
    ModWheelSpecial: false,
    ModWheel: 0,
    Door: [0, 0, 0, 0, 0, 0, 0, 0],
    Window: [0, 0, 0, 0],
    Wheel: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  },
  set: function (vehicle, key, value) {
    if (_vehicles.vehicles.exists(vehicle)) {
      vehicle.setVariable(key, value);

      _data.Container.Set(vehicle.id + offsetId, prefix + key, true);
    }
  },
  get: function (vehicle, key) {
    if (_vehicles.vehicles.exists(vehicle)) return vehicle.getVariable(key);
    return null;
  },
  has: function (vehicle, key) {
    if (_vehicles.vehicles.exists(vehicle)) return vehicle.getVariable(key) == true;
    return false;
  },
  getVehicleSyncData: function (vehicle) {
    if (_vehicles.vehicles.exists(vehicle) && vSync.has(vehicle, 'vehicleSyncData')) {
      return vSync.get(vehicle, 'vehicleSyncData');
    }

    return vSync.VehicleSyncData;
  },
  updateVehicleSyncData: function (veh, data) {
    if (_vehicles.vehicles.exists(veh) && data) vSync.set(veh, 'vehicleSyncData', data);
  },
  setVehicleWindowState: function (v, window, state) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.Window[window] = state;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setVehicleWindowStatus", [v.id, window, state]);
  },
  getVehicleWindowState: function (v, window) {
    return _methods.methods.parseInt(vSync.getVehicleSyncData(v).Window[window]);
  },
  setVehicleWheelMod: function (v, state, isShowLabel) {
    if (!_vehicles.vehicles.exists(v)) return;
    state = _methods.methods.parseInt(state);
    let data = vSync.getVehicleSyncData(v);
    data.ModWheel = state;
    data.ModWheelSpecial = isShowLabel;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setVehicleWheelMod", [v.id, state, isShowLabel]);
  },
  setVehicleWheelState: function (v, wheel, state) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.Wheel[wheel] = state;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setVehicleWheelStatus", [v.id, wheel, state]);
  },
  getVehicleWheelState: function (v, wheel) {
    return _methods.methods.parseInt(vSync.getVehicleSyncData(v).Wheel[wheel]);
  },
  setSirenState: function (v, state) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.SirenState = state;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setSirenState", [v.id, state]);
  },
  playSound: function (v, pref, val) {
    if (!_vehicles.vehicles.exists(v)) return;
    mp.players.callInRange(v.position, streamDist, "vSync:playSound", [v.id, pref, val]);
  },
  stopSound: function (v, pref) {
    if (!_vehicles.vehicles.exists(v)) return;
    mp.players.callInRange(v.position, streamDist, "vSync:stopSound", [v.id, pref]);
  },
  setVehicleDirt: function (v, dirt) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.Dirt = dirt;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setVehicleDirt", [v.id, dirt]);
  },
  getVehicleDirt: function (v) {
    return vSync.getVehicleSyncData(v).Dirt;
  },
  setVehicleDoorState: function (v, door, state) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.Door[door] = state;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setVehicleDoorState", [v.id, door, state]);
  },
  getVehicleDoorState: function (v, door) {
    return _methods.methods.parseInt(vSync.getVehicleSyncData(v).Door[door]);
  },
  setIndicatorLeftToggle: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.IndicatorLeftToggle = status;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setIndicatorLeftToggle", [v.id, status]);
  },
  getIndicatorLeftToggle: function (v) {
    return vSync.getVehicleSyncData(v).IndicatorLeftToggle;
  },
  setIndicatorRightToggle: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.IndicatorRightToggle = status;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setIndicatorRightToggle", [v.id, status]);
  },
  getIndicatorRightToggle: function (v) {
    return vSync.getVehicleSyncData(v).IndicatorRightToggle;
  },
  setEngineState: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    v.engine = status;
    v.setVariable('engine', v.engine);
  },
  getEngineState: function (v) {
    if (!_vehicles.vehicles.exists(v)) return false;
    return v.engine;
  },
  setInteriorLightState: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.InteriorLight = status;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setInteriorLightState", [v.id, status]);
  },
  getInteriorLightState: function (v) {
    return vSync.getVehicleSyncData(v).InteriorLight;
  },
  setTaxiLightState: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.TaxiLight = status;
    vSync.updateVehicleSyncData(v, data);
    mp.players.callInRange(v.position, streamDist, "vSync:setTaxiLightState", [v.id, status]);
  },
  getTaxiLightState: function (v) {
    return vSync.getVehicleSyncData(v).TaxiLight;
  },
  setLockStatus: function (v, status) {
    if (!_vehicles.vehicles.exists(v)) return;
    v.locked = status;
    v.setVariable('locked', v.locked);
    mp.players.callInRange(v.position, streamDist, "vSync:setLockStatus", [v.id, status]);
  },
  setBodyHealth: function (v, health) {
    if (!_vehicles.vehicles.exists(v)) return;
    let data = vSync.getVehicleSyncData(v);
    data.BodyHealth = health;
    v.bodyHealth = health;
    vSync.updateVehicleSyncData(v, data);
  }
};
exports.vSync = vSync;
let streamDist = 250;
let offsetId = -999000;
let prefix = 'vSync';
mp.events.add("playerEnterVehicle", function (player, vehicle) {
  if (_vehicles.vehicles.exists(vehicle)) vSync.updateVehicleSyncData(vehicle, vSync.VehicleSyncData);
});
mp.events.add("playerExitVehicle", function (player, vehicle) {
  if (_vehicles.vehicles.exists(vehicle)) vSync.setEngineState(vehicle, vSync.getEngineState(vehicle));
});
mp.events.add('s:vSync:setDirtLevel', (player, vId, level) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setVehicleDirt(player.vehicle, level);
});
mp.events.add('s:vSync:setEngineStatus', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setEngineState(player.vehicle, status);
});
mp.events.add('s:vSync:updateValues', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setEngineState(player.vehicle, status);
});
mp.events.add('s:vSync:setInteriorLightState', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setInteriorLightState(player.vehicle, status);
});
mp.events.add('s:vSync:setTaxiLightState', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setTaxiLightState(player.vehicle, status);
});
mp.events.add('s:vSync:setIndicatorLeftState', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setIndicatorLeftToggle(player.vehicle, status);
});
mp.events.add('s:vSync:setIndicatorRightState', (player, vId, status) => {
  let veh = mp.vehicles.at(vId);
  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) vSync.setIndicatorRightToggle(player.vehicle, status);
});
mp.events.add('s:vSync:setDoorData', (player, vId, doorState1, doorState2, doorState3, doorState4, doorState5, doorState6, doorState7, doorState8) => {
  let veh = mp.vehicles.at(vId);

  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) {
    vSync.setVehicleDoorState(player.vehicle, 0, doorState1);
    vSync.setVehicleDoorState(player.vehicle, 1, doorState2);
    vSync.setVehicleDoorState(player.vehicle, 2, doorState3);
    vSync.setVehicleDoorState(player.vehicle, 3, doorState4);
    vSync.setVehicleDoorState(player.vehicle, 4, doorState5);
    vSync.setVehicleDoorState(player.vehicle, 5, doorState6);
    vSync.setVehicleDoorState(player.vehicle, 6, doorState7);
    vSync.setVehicleDoorState(player.vehicle, 7, doorState8);
  }
});
mp.events.add('s:vSync:setWindowData', (player, vId, w1, w2, w3, w4) => {
  let veh = mp.vehicles.at(vId);

  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) {
    vSync.setVehicleWindowState(player.vehicle, 0, w1);
    vSync.setVehicleWindowState(player.vehicle, 1, w2);
    vSync.setVehicleWindowState(player.vehicle, 2, w3);
    vSync.setVehicleWindowState(player.vehicle, 3, w4);
  }
});
mp.events.add('s:vSync:setWheelData', (player, vId, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10) => {
  let veh = mp.vehicles.at(vId);

  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) {
    vSync.setVehicleWheelState(player.vehicle, 0, w1);
    vSync.setVehicleWheelState(player.vehicle, 1, w2);
    vSync.setVehicleWheelState(player.vehicle, 2, w3);
    vSync.setVehicleWheelState(player.vehicle, 3, w4);
    vSync.setVehicleWheelState(player.vehicle, 5, w5);
    vSync.setVehicleWheelState(player.vehicle, 6, w6);
    vSync.setVehicleWheelState(player.vehicle, 7, w7);
    vSync.setVehicleWheelState(player.vehicle, 8, w8);
    vSync.setVehicleWheelState(player.vehicle, 9, w9);
    vSync.setVehicleWheelState(player.vehicle, 10, w10);
  }
});
mp.events.add('s:vSync:setBodyHealth', (player, vId, health) => {
  let veh = mp.vehicles.at(vId);

  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) {}
});
mp.events.add('s:vSync:setEngineHealth', (player, vId, health) => {
  let veh = mp.vehicles.at(vId);

  if (mp.players.exists(player) && _vehicles.vehicles.exists(veh)) {
    veh.engineHealth = health;
  }
});
mp.events.add('s:vSync:playSound', (player, vId, pref, value) => {
  if (mp.players.exists(player)) {
    vSync.playSound(vId, pref, value);
  }
});
mp.events.add('s:vSync:stopSound', (player, vId, pref) => {
  if (mp.players.exists(player)) {
    vSync.stopSound(vId, pref);
  }
});
mp.events.add('s:vSync:setSirenState', (player, vId, state) => {
  if (mp.players.exists(player)) {
    vSync.setSirenState(vId, state);
  }
});
},{"../vehicles":"pYYy","../modules/data":"Edcz","../modules/methods":"qXSp"}],"tmQn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fractionGarageEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let fractionGarageEntity = class fractionGarageEntity extends _sequelizeTypescript.Model {};
exports.fractionGarageEntity = fractionGarageEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], fractionGarageEntity.prototype, "id", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", String)], fractionGarageEntity.prototype, "prefix", void 0);

__decorate([_sequelizeTypescript.Column, __metadata("design:type", Number)], fractionGarageEntity.prototype, "fraction", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(1024)",

  get() {
    return JSON.parse(this.getDataValue('position'));
  },

  set(value) {
    this.setDataValue('position', JSON.stringify(value));
  }

}), __metadata("design:type", typeof (_a = typeof Vector3Mp !== "undefined" && Vector3Mp) === "function" ? _a : Object)], fractionGarageEntity.prototype, "position", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.DataType.TEXT,
  defaultValue: "[]",

  get() {
    return JSON.parse(this.getDataValue('cars'));
  },

  set(value) {
    this.setDataValue('cars', JSON.stringify(value));
  }

}), __metadata("design:type", Array)], fractionGarageEntity.prototype, "cars", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  defaultValue: 0
}), __metadata("design:type", Number)], fractionGarageEntity.prototype, "dimension", void 0);

exports.fractionGarageEntity = fractionGarageEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_garage_fractions"
})], fractionGarageEntity);
},{}],"kfmD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gangDeliverTarget = exports.gangDeliverSpawn = exports.gangDeliverRewardFraction = exports.gangDeliverReward = exports.gangDeliverGosReward = exports.gangDeliverCost = exports.gangDeliverCoolDown = void 0;
const gangDeliverCost = 500;
exports.gangDeliverCost = gangDeliverCost;
const gangDeliverReward = 2500;
exports.gangDeliverReward = gangDeliverReward;
const gangDeliverRewardFraction = 1000;
exports.gangDeliverRewardFraction = gangDeliverRewardFraction;
const gangDeliverGosReward = 2000;
exports.gangDeliverGosReward = gangDeliverGosReward;
const gangDeliverCoolDown = 10;
exports.gangDeliverCoolDown = gangDeliverCoolDown;
const gangDeliverSpawn = [{
  x: 598,
  y: -3150,
  z: 5
}, {
  x: 121,
  y: -2928,
  z: 5
}, {
  x: -333,
  y: -2623,
  z: 5
}, {
  x: -1156,
  y: -2037,
  z: 12
}, {
  x: 1055,
  y: -2472,
  z: 27
}, {
  x: 450,
  y: -2779,
  z: 5
}, {
  x: 936,
  y: -2531,
  z: 27
}, {
  x: 82,
  y: -2702,
  z: 5
}, {
  x: -180,
  y: -2722,
  z: 5
}, {
  x: -348,
  y: -2783,
  z: 5
}, {
  x: 92,
  y: -2218,
  z: 5
}, {
  x: -593,
  y: -1775,
  z: 21
}, {
  x: 900,
  y: -2538,
  z: 27
}, {
  x: -1019,
  y: -2203,
  z: 8
}, {
  x: 72,
  y: -2390,
  z: 5
}];
exports.gangDeliverSpawn = gangDeliverSpawn;
const gangDeliverTarget = [{
  x: 2545,
  y: 2581,
  z: 36
}, {
  x: 1410,
  y: 3619,
  z: 34
}, {
  x: 1977,
  y: 5170,
  z: 46
}, {
  x: 46,
  y: 6298,
  z: 30
}, {
  x: -678,
  y: 5797,
  z: 16
}, {
  x: 2671,
  y: 3516,
  z: 51
}, {
  x: 387,
  y: 3588,
  z: 32
}, {
  x: 19,
  y: 3716,
  z: 38
}, {
  x: 1337,
  y: 4378,
  z: 43
}, {
  x: 1722,
  y: 4709,
  z: 41
}, {
  x: 2150,
  y: 4796,
  z: 42
}, {
  x: 2932,
  y: 4630,
  z: 47
}, {
  x: 120,
  y: 6654,
  z: 30
}, {
  x: 183,
  y: 6394,
  z: 30
}, {
  x: 159,
  y: 6354,
  z: 30
}];
exports.gangDeliverTarget = gangDeliverTarget;
},{}],"CvBw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadFractionGarages = exports.fractionGarage = void 0;

var _methods = require("./methods");

var _menu = require("./menu");

var _vehicleInfo = require("./vehicleInfo");

var _vehicles = require("../vehicles");

var _vSync = require("../managers/vSync");

var _user = require("../user");

var _fractionGarage = require("./entity/fractionGarage");

var _gang = require("../../util/gang.deliver");

var _fractions = require("../../util/fractions");

var _coffer = require("../coffer");

let garagesList = new Map();
let generateid = 0;

class fractionGarage {
  constructor(id, fraction, position, prefix, cars, dimension) {
    this.generateid = 0;
    this.dimension = dimension;
    this.id = id;
    this.fraction = fraction;
    this.position = position;
    this.prefix = prefix;
    this.cars = cars;
    this.amountmap = new Map();
    this.cars.forEach(item => {
      if (!this.amountmap.has(item.model)) this.amountmap.set(item.model, item.amount);else this.amountmap.set(item.model, this.amountmap.get(item.model) + item.amount);
    });
    this.checkpoint = _methods.methods.createDynamicCheckpoint(this.position, "Нажмите ~g~E~w~ чтобы открыть гараж " + _methods.methods.getFractionName(this.fraction), player => {
      this.mainMenu(player);
    }, 1, this.dimension);
    garagesList.set(this.id, this);
  }

  static get(id) {
    return garagesList.get(id);
  }

  static list() {
    return garagesList;
  }

  static createNew(fraction, position, prefix, dimension) {
    return new Promise(resolve => {
      _fractionGarage.fractionGarageEntity.create({
        fraction,
        position,
        prefix,
        cars: []
      }).then(item => {
        resolve(this.newGarage(item.id, fraction, position, prefix, [], dimension));
      });
    });
  }

  static newGarage(id, fraction, position, prefix, cars, dimension) {
    return new fractionGarage(id, fraction, typeof position === "string" ? JSON.parse(position) : position, prefix, typeof cars === "string" ? JSON.parse(cars) : cars, dimension);
  }

  addVehicle(model, spawn, heading, livery, rank, color1, color2, amount) {
    const item = this.cars.find(itm => itm.model == model);

    if (!item) {
      this.cars.push({
        model,
        spawn,
        rank,
        heading,
        livery,
        color1,
        color2,
        amount
      });
      this.amountmap.set(model, amount);
    } else {
      item.amount += amount;
      this.amountmap.set(model, this.amountmap.get(model) + amount);
    }

    this.save();
  }

  getVehicle(model) {
    return this.cars.find(q => q.model == model);
  }

  delete(player) {
    if (!_user.user.isAdminNow(player, 6)) return player.notify("~r~У вас нет доступа");

    _user.user.accept(player, "Вы уверены?").then(status => {
      if (!status) return;

      _fractionGarage.fractionGarageEntity.destroy({
        where: {
          id: this.id
        }
      }).then(item => {
        this.checkpoint.delete();
        garagesList.delete(this.id);
        player.notify("~g~Гараж удалён");
      });
    });
  }

  spawn(item, player) {
    let vInfo = _vehicleInfo.vehicleInfo.find(item.model);

    if (this.amountmap.get(item.model) == 0) return player.notify("~r~В гараже больше нет " + (vInfo ? vInfo.display_name : item.model));
    if (item.rank > _user.user.getPlayerFractionRank(player) && !_user.user.isAdminNow(player)) return player.notify("~r~У вас нет доступа к данному ТС");

    let veh = _methods.methods.getNearestVehicleWithCoords(item.spawn, 3);

    if (veh) return player.notify("~r~Парковочное место занято, освободите место");
    generateid++;
    const vehid = generateid;
    let number = `${this.prefix}${vehid}`.length <= 7 ? `${this.prefix} ${vehid}` : `${this.prefix}${vehid}`;
    if (this.prefix.toUpperCase() == "A") number = _vehicles.vehicles.generateNumber(8);
    this.amountmap.set(item.model, this.amountmap.get(item.model) - 1);

    _vehicles.vehicles.newOrdered(veh => {
      veh.numberPlate = number;

      _vSync.vSync.setEngineState(veh, false);

      veh.locked = true;
      veh.livery = item.livery;
      veh.setColor(item.color1, item.color2);
      veh.setVariable('container', vehid + _vehicles.offsetFrNew);
      veh.setVariable('fuel', vInfo ? vInfo.fuel_full : 80);
      veh.setVariable('fraction_id', this.fraction);

      _vehicles.vehicles.set(vehid + _vehicles.offsetFrNew, 'fuel', vInfo ? vInfo.fuel_full : 80);

      _vehicles.vehicles.set(vehid + _vehicles.offsetFrNew, 'fraction_id', this.fraction);

      _vehicles.vehicles.set(vehid + _vehicles.offsetFrNew, 'hash', veh.model);

      veh.fractiongarage = this.id;
      veh.fraction_id = this.fraction;

      if (_user.user.isGos(player)) {
        veh.is_gos = true;
        veh.setMod(11, 2);
        veh.setMod(12, 2);
        veh.setMod(13, 3);
        veh.setMod(18, 0);
        veh.setMod(16, 2);
        veh.setVariable('boost', 1.89);
      }

      if (!mp.players.exists(player)) return;

      _user.user.setWaypoint(player, item.spawn.x, item.spawn.y);

      player.notify("~g~" + (vInfo ? vInfo.display_name : item.model) + " ожидает вас на парковке");
    }, [mp.joaat(item.model), item.spawn, {
      heading: Math.floor(item.heading),
      numberPlate: number,
      engine: false,
      dimension: 0
    }, item.model]);
  }

  save() {
    _fractionGarage.fractionGarageEntity.update({
      fraction: this.fraction,
      position: this.position,
      prefix: this.prefix,
      cars: this.cars
    }, {
      where: {
        id: this.id
      }
    });
  }

  editVeh(player) {
    if (!_user.user.isSubLeader(player) && !_user.user.isAdminNow(player, 5)) return player.notify("~r~У вас нет доступа, как вы тут оказались?");

    let m = _menu.menu.new(player, "Автопарк", "Список");

    m.onclose = () => {
      this.mainMenu(player);
    };

    this.cars.forEach((item, index) => {
      let vInfo = _vehicleInfo.vehicleInfo.find(item.model);

      m.newItem({
        name: (vInfo ? vInfo.display_name : item.model) + " Ранг доступа",
        type: "range",
        rangeselect: [1, 14],
        listSelected: item.rank - 1,
        onchange: value => {
          item.rank = value + 1;
          this.save();
        },
        onpress: () => {
          if (!_user.user.isAdminNow(player, 5)) return player.notify("~r~У вас нет доступа для удаления ТС");

          _user.user.accept(player, "Удалить ТС?").then(status => {
            if (!status) return;
            this.cars.splice(index, 1);
            this.save();
            this.editVeh(player);
          });
        }
      });
    });
    m.open();
  }

  mainMenu(player) {
    if (_user.user.getPlayerFraction(player) != this.fraction && !_user.user.isAdminNow(player, 5)) return player.notify("~r~У вас нет доступа к данному гаражу");

    let m = _menu.menu.new(player, "Гараж " + _methods.methods.getFractionName(this.fraction), "Список");

    this.cars.forEach(item => {
      let vInfo = _vehicleInfo.vehicleInfo.find(item.model);

      m.newItem({
        name: vInfo ? vInfo.display_name : item.model,
        more: `Доступно: ${this.amountmap.get(item.model) > 0 ? "В наличии" : "Нет в наличии"}`,
        onpress: () => this.spawn(item, player)
      });
    });

    if (_user.user.isSubLeader(player) || _user.user.isAdminNow(player, 5)) {
      if (_user.user.isAdminNow(player, 5) || _user.user.isGos(player)) {
        m.newItem({
          name: "Отслеживание ТС",
          onpress: () => this.searchVeh(player)
        });
      }

      m.newItem({
        name: "Настройка доступа",
        onpress: () => this.editVeh(player)
      });

      if (_user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "~r~Удалить гараж",
          onpress: () => this.delete(player)
        });
      }
    }

    if (_fractions.fractionUtil.getFraction(this.fraction).gos) {
      let vehiclesNearestGangDeliver = _user.user.getNearestVehicles(player, 5).find(veh => veh.deliverFraction);

      if (vehiclesNearestGangDeliver) {
        m.newItem({
          name: "Сдать фургон",
          onpress: () => {
            let veh = _user.user.getNearestVehicles(player, 5).find(veh => veh.deliverFraction);

            if (!veh) return player.notify("ТС не обнаружен");
            if (veh.getOccupants().length > 0) return player.notify("~r~В ТС никого не должно быть");
            veh.destroy();

            _user.user.addCashMoney(player, _gang.gangDeliverGosReward);

            _coffer.coffer.addMoney(_gang.gangDeliverGosReward / 2);

            player.notify("~g~Вы получили $" + _gang.gangDeliverGosReward + ' за доставку фургона');
          }
        });
      }
    }

    m.newItem({
      name: "Запарковать ТС",
      onpress: () => {
        let veh = _methods.methods.getNearestVehicleWithCoords(this.position, 20);

        if (!veh) return player.notify("ТС не обнаружен");
        if (veh.fractiongarage != this.id) return player.notify("~r~Данный ТС не принадлежит данному гаражу");
        if (veh.getOccupants().length > 0) return player.notify("~r~В ТС никого не должно быть");

        _vehicles.vehicles.respawn(veh);

        player.notify("~g~Транспорт запаркован");
      }
    });
    m.open();
  }

  searchVeh(player) {
    if (!_user.user.isSubLeader(player) && !_user.user.isAdminNow(player, 6)) return player.notify("~r~У вас нет доступа, как вы тут оказались?");

    let m = _menu.menu.new(player, "Автопарк", "Список");

    m.onclose = () => {
      this.mainMenu(player);
    };

    mp.vehicles.forEach(vehicle => {
      if (vehicle.fractiongarage && vehicle.fractiongarage == this.id) {
        m.newItem({
          name: vehicle.modelname,
          more: vehicle.numberPlate,
          onpress: () => {
            _menu.menu.selector(player, "Действие", ["Метка", "Эвакуировать"], true).then(res => {
              if (!mp.vehicles.exists(vehicle)) return this.searchVeh(player);
              if (typeof res !== "number") return this.searchVeh(player);
              ;

              if (res == 0) {
                if (vehicle.velocity.x > 5 || vehicle.velocity.y > 5 || vehicle.velocity.z > 5) {
                  return player.notify("~r~Транспорт в движении, не удаётся установить местоположение. Попробуйте снова.");
                }

                if (_user.user.getVehicleDriver(vehicle)) {
                  if (_user.user.get(_user.user.getVehicleDriver(vehicle), 'fraction') != this.fraction) return player.notify("~r~ТС в угоне, отследить не удалось");
                }

                _user.user.setWaypoint(player, vehicle.position.x, vehicle.position.y);

                player.notify("~g~Метка установлена");
              } else {
                if (vehicle.getOccupants().length > 0) return player.notify("~r~В ТС кто то есть."), this.searchVeh(player);
                ;

                _vehicles.vehicles.respawn(vehicle);

                player.notify("~g~Транспорт эвакуирован");
              }

              this.searchVeh(player);
            });
          }
        });
      }
    });
    m.open();
  }

}

exports.fractionGarage = fractionGarage;
mp.events.add("vehicleDestroy", vehicle => {
  if (!vehicle.fractiongarage) return;
  if (!vehicle.modelname) return;
  const garage = fractionGarage.get(vehicle.fractiongarage);
  if (!garage) return;
  garage.amountmap.set(vehicle.modelname, garage.amountmap.get(vehicle.modelname) + 1);
});

const loadFractionGarages = () => {
  _fractionGarage.fractionGarageEntity.findAll().then(q => {
    q.forEach(item => {
      fractionGarage.newGarage(item.id, item.fraction, item.position, item.prefix, item.cars, item.dimension);
    });
  });
};

exports.loadFractionGarages = loadFractionGarages;
mp.events.add("playerStartEnterVehicle", (player, vehicle, seat) => {
  if (!vehicle.fraction_id) return;
  if (seat) return;
  if (_user.user.getPlayerFraction(player) != vehicle.fraction_id) _vSync.vSync.setEngineState(vehicle, false);
});
},{"./methods":"qXSp","./menu":"Aiz7","./vehicleInfo":"f3Ap","../vehicles":"pYYy","../managers/vSync":"waLt","../user":"QE3B","./entity/fractionGarage":"tmQn","../../util/gang.deliver":"kfmD","../../util/fractions":"Zeqt","../coffer":"sKID"}],"wJlv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.socketInit = socketInit;
exports.socketPort = void 0;

var _http = _interopRequireDefault(require("http"));

var _socket = _interopRequireDefault(require("socket.io"));

var _ip = _interopRequireDefault(require("ip"));

var _methods = require("./modules/methods");

var _chat = require("./modules/chat");

var _user = require("./user");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let socketHandleList = [];

mp.events.addSocket = (name, handle) => {
  console.log("REGISTER SOCKET EVENT", name);
  socketHandleList.push([name, handle]);
  mp.events.add(name, handle);
};

let http = _http.default.createServer();

let ip_address = _ip.default.address();

const socketPort = 3400;
exports.socketPort = socketPort;
http.listen(socketPort, function () {
  console.log(`listening on *: ${socketPort}`);

  _methods.methods.saveLog('socket', `listening on ${socketPort}`);
});
const io = (0, _socket.default)(http);

const isMpEntity = entity => {
  if (!entity || typeof entity !== 'object') {
    return false;
  }

  return mp.players.exists(entity) || mp.vehicles.exists(entity) || mp.objects.exists(entity) || mp.colshapes.exists(entity) || mp.blips.exists(entity) || mp.checkpoints.exists(entity) || mp.labels.exists(entity) || mp.markers.exists(entity);
};

mp.events.addSocket("test", player => {
  console.log("test", player.id);
});
mp.events.add("playerJoin", player => {
  player.socketConnected = false;

  player.callsocket = (event, args) => {
    player.call(event, args);
  };
});
io.on('connection', socket => {
  if (!socket.handshake.query.rageKey) {
    _methods.methods.saveLog('socket', `socket connection step 2: rageKey NotFound`);

    return socket.disconnect(true);
  }

  let player = mp.players.at(_methods.methods.parseInt(socket.handshake.query.rageId));

  if (!player || !mp.players.exists(player)) {
    _methods.methods.saveLog('socket', `socket connection step 3: player not found`);

    return socket.disconnect(true);
  }

  _methods.methods.saveLog('socket', `socket connection step 4: player found ${player.name}`);

  if (!player.socketAdvancedLog && player.socketKey !== socket.handshake.query.rageKey) {
    _methods.methods.saveLog('socket', `socket connection step 5: rageKey not equal with player.socketKey`);

    return socket.disconnect(true);
  }

  player.socket = socket;
  player.socketConnected = true;

  player.callsocket = (event, args) => {
    if (!player.socketConnected) return player.call(event, args);
    if (player.socket != socket) return;
    const parsedArguments = [];

    if (args) {
      for (const arg of args) {
        if (isMpEntity(arg)) {
          parsedArguments.push({
            '!__type__!': arg.type,
            id: arg.id
          });
        } else {
          parsedArguments.push(arg);
        }
      }
    }

    player.socket.emit('eventClient', event, JSON.stringify(parsedArguments));
  };

  socket.on('disconnect', () => {
    player.socketConnected = false;
  });
  socket.on('eventServer', (event, jsArgs) => {
    const args = JSON.parse(jsArgs) || [];
    const parsedData = [];

    for (const arg of args) {
      if (typeof arg === 'object' && typeof arg['!__type__!'] === 'string') {
        parsedData.push(mp[`${arg['!__type__!']}s`].at(arg.id));
      } else {
        parsedData.push(arg);
      }
    }

    let eventq = socketHandleList.filter(item => item[0] == event);

    if (eventq.length == 0) {
      return mp.events.call(event, player, ...parsedData);
    }

    eventq.map(([_, handle]) => {
      handle(player, ...parsedData);
    });
  });
});

function makeId(length) {
  let result = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const charactersLength = characters.length;

  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }

  return result;
}

setTimeout(function () {
  _chat.chat.registerCommand('socket', (player, pass, advancedPass) => {
    if (!pass && !_user.user.isAdminNow(player)) {
      return player.notify('~r~Данная команда требует ввода пароля.');
    }

    if (pass !== _methods.methods.sha256(`SOCKET${_user.user.getId(player).toString()}`).slice(0, 5) && !_user.user.isAdminNow(player)) {
      return player.notify('~r~Пароль указан не верно');
    }

    if (player.socket) {
      return player.notify('~r~Socket.IO уже включён');
    }

    _methods.methods.saveLog('socket', `command: socket ${player.name}`);

    socketInit(player, advancedPass === 'xSr37qWdv');
  });
}, 1000);

function socketInit(player, advanced = false) {
  player.socketKey = makeId(25);
  player.socketAdvancedLog = advanced;
  const port = _methods.methods.isTestServer() ? 3400 : 80;
  player.call('web:socket', [`http://${ip_address}:${port}/web/socket.html`, socketPort, ip_address, player.socketKey, advanced]);

  _methods.methods.saveLog('socket', `${player.name} call web:socket with ${[socketPort, ip_address, player.socketKey, advanced].join(' | ')}`);
}
},{"./modules/methods":"qXSp","./modules/chat":"e1Zb","./user":"QE3B"}],"UcH2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blackListEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let blackListEntity = class blackListEntity extends _sequelizeTypescript.Model {};
exports.blackListEntity = blackListEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], blackListEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(128)",
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], blackListEntity.prototype, "steam", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], blackListEntity.prototype, "lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], blackListEntity.prototype, "guid", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "BIGINT(20)",
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", BigInt)], blackListEntity.prototype, "rgscId", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TEXT",
  allowNull: false
}), __metadata("design:type", String)], blackListEntity.prototype, "reason", void 0);

exports.blackListEntity = blackListEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_black_list"
})], blackListEntity);
},{}],"fCpW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicleBoosterEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let vehicleBoosterEntity = class vehicleBoosterEntity extends _sequelizeTypescript.Model {};
exports.vehicleBoosterEntity = vehicleBoosterEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], vehicleBoosterEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  allowNull: false
}), __metadata("design:type", Number)], vehicleBoosterEntity.prototype, "speed", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(255)",
  allowNull: false
}), __metadata("design:type", String)], vehicleBoosterEntity.prototype, "model", void 0);

exports.vehicleBoosterEntity = vehicleBoosterEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_vehicle_booster"
})], vehicleBoosterEntity);
},{}],"kxRx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restartConf = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _child_process = require("child_process");

const restartConf = {
  status: false,
  set: value => {
    restartConf.status = value;
  }
};
exports.restartConf = restartConf;
setTimeout(() => {
  setInterval(() => {
    let dateTime = new Date();
    if (dateTime.getHours() == 4 && dateTime.getMinutes() == 50) _methods.methods.notifyToAll('Рестарт сервера через 15 минут');
    if (dateTime.getHours() == 4 && dateTime.getMinutes() == 59) _methods.methods.notifyToAll('Рестарт сервера через 5 минут');

    if (dateTime.getHours() == 5 && dateTime.getMinutes() == 2) {
      _methods.methods.saveAll();

      if (restartConf.status) {
        (0, _child_process.exec)("npm run production");
      }
    }

    if (dateTime.getHours() == 5 && dateTime.getMinutes() == 3) {
      mp.players.forEach(function (p) {
        if (mp.players.exists(p)) _user.user.kick(p, 'Рестарт');
      });
      setTimeout(() => {
        _methods.methods.restartServer();
      }, 2000);
    }
  }, 60000);
}, 60000 * 60 * 5);
},{"../modules/methods":"qXSp","../user":"QE3B"}],"GoOy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whiteListTestEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let whiteListTestEntity = class whiteListTestEntity extends _sequelizeTypescript.Model {};
exports.whiteListTestEntity = whiteListTestEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], whiteListTestEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(5),
  allowNull: false
}), __metadata("design:type", Number)], whiteListTestEntity.prototype, "admin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(240),
  allowNull: false
}), __metadata("design:type", String)], whiteListTestEntity.prototype, "social", void 0);

exports.whiteListTestEntity = whiteListTestEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_users_test_whitelist"
})], whiteListTestEntity);
},{}],"HCq8":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.whitelist = void 0;

var _whiteListTest = require("./entity/whiteListTest");

var _methods = require("./methods");

var _user = require("../user");

const whitelist = {
  exist: social => {
    return whitelist.list.includes(typeof social == "string" ? social.toLowerCase() : social.socialClub.toLowerCase());
  },
  list: [],
  load: () => {
    _whiteListTest.whiteListTestEntity.findAll().then(items => {
      whitelist.list = [];
      items.map(item => {
        whitelist.list.push(item.social.toLowerCase());
      });
    });
  },
  new: (player, social) => {
    _whiteListTest.whiteListTestEntity.create({
      social: social.toLowerCase(),
      admin: player ? _user.user.getId(player) : 0
    });

    whitelist.list.push(social.toLowerCase());
  },
  remove: social => {
    _whiteListTest.whiteListTestEntity.destroy({
      where: {
        social: social.toLowerCase()
      }
    });

    whitelist.list.splice(whitelist.list.indexOf(social.toLowerCase()), 1);
    let target = mp.players.toArray().find(player => player.socialClub.toLowerCase() == social.toLowerCase());

    if (target) {
      _user.user.kickAntiCheat(target, "Пользователь исключён из списка тестеров проекта", "Удаление Social из списка доступа");
    }
  }
};
exports.whitelist = whitelist;
mp.events.add('server:login:success:after', player => {
  if (!_methods.methods.isTestServer()) return true;
  if (whitelist.list.includes(player.socialClub.toLowerCase()) || player.ip == "127.0.0.1") return true;
  setTimeout(() => {
    if (!mp.players.exists(player)) return;

    _user.user.disableAllControls(player, true);

    _user.user.hideLoadDisplay(player);

    _user.user.bigAlert(player, `У вас нет доступа к тестовому серверу`, "error", 120000);

    _user.user.kick(player, 'У вас нет доступа к тестовому серверу');
  }, 5000);
});
},{"./entity/whiteListTest":"GoOy","./methods":"qXSp","../user":"QE3B"}],"ES5W":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tempConfigs = void 0;
const tempConfigs = {
  paydayx2: false,
  jobx2: false,
  agex2: false,
  agex2new: false,
  gosx2: false,
  donatex2: false,
  donatex3: false,
  fiveAndTenBonus: false,
  logs: false,
  cofferbonus: false,
  to20: false,
  chestorders: false
};
exports.tempConfigs = tempConfigs;
},{}],"u9lD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promocodeUsingEntity = exports.promocodeEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let promocodeUsingEntity = class promocodeUsingEntity extends _sequelizeTypescript.Model {};
exports.promocodeUsingEntity = promocodeUsingEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], promocodeUsingEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false
}), __metadata("design:type", Number)], promocodeUsingEntity.prototype, "user_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(20),
  allowNull: false
}), __metadata("design:type", String)], promocodeUsingEntity.prototype, "promocode_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "timestamp",
  defaultValue: _sequelize.default.literal('CURRENT_TIMESTAMP(3)'),
  allowNull: false
}), __metadata("design:type", String)], promocodeUsingEntity.prototype, "timestamp", void 0);

exports.promocodeUsingEntity = promocodeUsingEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_promocode_using"
})], promocodeUsingEntity);
let promocodeEntity = class promocodeEntity extends _sequelizeTypescript.Model {};
exports.promocodeEntity = promocodeEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], promocodeEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false
}), __metadata("design:type", Number)], promocodeEntity.prototype, "bonus", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(32),
  allowNull: false
}), __metadata("design:type", String)], promocodeEntity.prototype, "code", void 0);

exports.promocodeEntity = promocodeEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_promocode_list"
})], promocodeEntity);
},{}],"gqKn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.addAdminTP = void 0;

var _autosalon = require("../business/autosalon");

var _business = require("../business");

let q = [["Ограбление казино перед сейфом", 999.67, 29.53, 71.76], ["Военное стрельбище", -1755.14, 2931.84, 31.96], ["Arcadius", _business.business.BusinessStreetPos.x, _business.business.BusinessStreetPos.y, _business.business.BusinessStreetPos.z], ['Maze Bank', -72.68, -816.07, 243.39], ['Точка спавна аэропорт', -1037.20, -2728.15, 20.08], ['Стандартный спавн 1', 124.8076, -1215.845, 28.33152], ['Стандартный спавн 2', 1.66987, -1225.569, 28.29525], ['Стандартный спавн 3', 462.8509, -850.47, 26.12981]];

const addAdminTP = (name, pos) => {
  q.push([name, pos.x, pos.y, pos.z]);
};

exports.addAdminTP = addAdminTP;

_autosalon.autosalon.list.map(item => {
  q.push([item[0], item[1], item[2], item[3]]);
});

var _default = q;
exports.default = _default;
},{"../business/autosalon":"JYAF","../business":"y5vZ"}],"jKJb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npc_dialog = exports.npcDialog = exports.npc = void 0;

var _user = require("../user");

var _methods = require("./methods");

class npcDialog {
  constructor(name, role, position, heading, model, radius = 1, dimension = 0, onpress) {
    const id = ids++;
    this.id = id;
    this.name = name;
    this.role = role;
    this.position = position;
    this.model = model;
    this.heading = heading;
    this.radius = radius ? radius : 1;
    this.dimension = dimension ? dimension : 0;
    npc_dialog.container.set(this.id, this);
    mp.labels.new(this.name, new mp.Vector3(this.position.x, this.position.y, this.position.z + 1.2), {
      dimension: this.dimension,
      drawDistance: 20,
      los: true,
      font: 1
    });
    mp.players.forEach(player => player.call("dialog:sendnew:npc", [{
      dimension: this.dimension,
      id: this.id,
      model: this.model,
      heading: this.heading,
      position: this.position,
      radius: this.radius
    }]));

    _methods.methods.createDynamicCheckpoint(position, "Нажмите ~g~E~w~ чтобы начать диалог с " + this.name, player => {
      player.currentDialog = this;
      onpress(player);
    }, radius, 0, [0, 0, 0, 0]);
  }

  delete() {
    mp.players.forEach(player => player.call("dialog:delete:npc", [this.id]));
    npc_dialog.container.delete(this.id);
  }

}

exports.npcDialog = npcDialog;
mp.events.add('playerJoin', player => {
  player.call("dialog:sendlist:npc", [[...npc_dialog.container].map(([_, item]) => {
    return {
      dimension: item.dimension,
      id: item.id,
      model: item.model,
      heading: item.heading,
      position: item.position,
      radius: item.radius
    };
  })]);
});
mp.events.add("playerExitColshape", (player, shape) => {
  _user.user.removeHelpKey(player);

  player.currentDialog = null;
});
let ids = 1;
let asksids = 0;
let asks = new Map();
const npc = {
  createPed: (pos, heading, model, freeze = false, invincible = false, dimension = 0) => {
    let controller;

    if (!freeze) {
      let target = _user.user.getNearestPlayerByCoord(pos, 150, dimension);

      if (target) controller = target;else return;
    }

    let ped = mp.peds.new(model, pos, {
      heading: heading,
      frozen: freeze,
      lockController: false,
      dynamic: !freeze,
      invincible,
      dimension: dimension
    });
    if (!freeze) ped.controller = controller;
    return ped;
  },
  putIntoVehicle: (ped, veh, seat = -1, timeout = 5000, speed = 1.0, flag = 1) => {
    if (!ped.controller) return;
    if (!mp.players.exists(ped.controller)) return;
    ped.controller.call('seatPedIntoVehicle', [ped.id, veh.id, seat, timeout, speed, flag]);
  },
  driveWaypoint: (ped, x, y, z, speed = 20 / 2.2, driveMode = 786603, stopRange = 20.0) => {
    if (!ped.controller) return;
    if (!mp.players.exists(ped.controller)) return;
    ped.controller.call('pedDriveWaypoint', [ped.id, x, y, z, speed, driveMode, stopRange]);
  },
  clearTask: (ped, immediately = false) => {
    if (!ped.controller) return;
    if (!mp.players.exists(ped.controller)) return;
    ped.controller.call('clearPedTask', [ped.id, immediately]);
  }
};
exports.npc = npc;
const npc_dialog = {
  container: new Map(),
  get: id => {
    let res = [...npc_dialog.container].find(([index, item]) => item.id == id);
    if (!res) return null;else return res[1];
  },
  new: (name, role, position, heading, model, onpress, radius, dimension = 0) => {
    return new npcDialog(name, role, position, heading, model, radius, dimension, onpress);
  },
  close: player => {
    _user.user.setGui(player, null);
  },
  open: (player, ask, answers) => {
    return new Promise((resolve, reject) => {
      if (!player.currentDialog) return _user.user.setGui(player, null);
      asksids++;
      const id = ids;

      _user.user.setGui(player, "npc");

      mp.events.triggerBrowser(player, "dialog:open", player.currentDialog.name, player.currentDialog.role, ask, answers, id);
      asks.set(id, resolve);
    });
  }
};
exports.npc_dialog = npc_dialog;
let shopElectro = [[new mp.Vector3(-660.317, -857.948, 24.490), 284.662], [new mp.Vector3(1135.284, -469.594, 66.718), 178.113]];
setTimeout(() => {
  shopElectro.forEach(([pos, heading]) => {
    npc_dialog.new("Майкл", "Продавец электроники", pos, heading, "ig_beverly", player => {
      npc_dialog.open(player, "На сервере игровое время отличается от настоящего. За одни реальные сутки проходит 7 игровых, поэтому не удивляйтесь частой смене дня и ночи. Имея часы, в правом нижнем углу показывается игровое время и температура. На сервере сменяются времена года, так что одевайтесь по погоде.", ["Закрыть"]).then(() => {
        npc_dialog.close(player);
      });
    });
  });
}, 1000);
mp.events.register("dialog:answer", (player, id, answerId) => {
  if (!asks.has(id)) return npc_dialog.close(player);
  asks.get(id)(answerId);
});
},{"../user":"QE3B","./methods":"qXSp"}],"s4Xg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isRestarting = exports.customParams = void 0;
exports.restartProtocol = restartProtocol;
exports.userPropertyEdit = exports.setCustomParams = void 0;

var _deathReasonList = _interopRequireDefault(require("../config/deathReasonList.json"));

var _fs = _interopRequireDefault(require("fs"));

var _discord = _interopRequireDefault(require("discord.js"));

var _user = require("../user");

var _menu = require("./menu");

var _vehicles = require("../vehicles");

var _methods = require("../modules/methods");

var _chat = require("./chat");

var _weather = require("../managers/weather");

var _business = require("../business");

var _chest = require("./chest");

var _parking = require("../managers/parking");

var _enums = require("../enums");

var _vehicleInfo = require("./vehicleInfo");

var _autosalon = require("../business/autosalon");

var _garderob = require("./garderob");

var _fractionVehicles = require("./fraction.vehicles.spawn");

var _garderob2 = require("./entity/garderob");

var _moneyChest = require("./entity/moneyChest");

var _moneyChest2 = require("./moneyChest");

var _user2 = require("./entity/user");

var _socket = require("../socket");

var _blackList = require("./entity/blackList");

var _sequelize = require("sequelize");

var _vehicleBooster = require("./entity/vehicleBooster");

var _business2 = require("./entity/business");

var _coffer = require("../coffer");

var _child_process = require("child_process");

var _restart = require("../managers/restart");

var _newrage = require("../../util/newrage");

var _fractions = require("../../util/fractions");

var _whitelist = require("./whitelist");

var _gangWarsZone = require("./entity/gangWarsZone");

var _gangwar = require("./gangwar");

var _customchest = require("../modules/customchest");

var _inventory = require("../inventory");

var _items = require("../items");

var _inventory2 = require("./entity/inventory");

var _tempConfigs = require("../../util/tempConfigs");

var _promocodeUsing = require("./entity/promocodeUsing");

var _carsModel = require("./entity/carsModel");

var _adminsTp = _interopRequireDefault(require("../config/adminsTp"));

var _weapons = require("../../util/weapons");

var _events = require("./events");

var _promisehack = require("../promisehack");

var _npc = require("./npc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const hook = new _discord.default.WebhookClient('681570762255237142', 'TU1rOAb3qv7DVkNvWezV9wnlyDzzAG4SO4lHwyEbawDhAlhbnQbVB37ALd_jSt1esTsq');
let webhookBlock = false;
setInterval(() => {
  if (webhookBlock) return;
  let players = mp.players.length;

  if (players > 100) {
    let admins = mp.players.toArray().filter(player => _user.user.isAdmin(player)).length;

    if (admins == 0) {
      if (!_methods.methods.isTestServer()) {
        hook.send('@here Внимание. На сервере ' + players + ' игроков, но при этом нет администраторов в сети. Просим зайти на сервер');
        webhookBlock = true;
        setTimeout(() => {
          webhookBlock = false;
        }, 15 * 60000);
      }
    }
  }
}, 60000);
setTimeout(() => {
  _chat.chat.registerCommand("atest", player => {
    mainMenu(player);
  });
}, 1000);
mp.events.add("admin:menu", player => {
  mainMenu(player);
});
let killers = [];
const KILL_SAVE_TIME_MIN = 30;
mp.events.add('playerDeath', (player, reason, killer) => {
  if (!killer) return;
  if (!_user.user.isLogin(killer)) return;
  if (!_user.user.isLogin(player)) return;

  let srcReason = _deathReasonList.default[reason.toString()];

  let reasonText = "";

  if (srcReason) {
    reasonText = `${srcReason} ${reason}`;
  }

  killers.push({
    user: _user.user.getId(killer),
    target: _user.user.getId(player),
    pos: killer.position,
    target_pos: player.position,
    reason: reasonText,
    time: _methods.methods.getTimeStamp()
  });
});
setInterval(() => {
  let time = _methods.methods.getTimeStamp();

  killers.map((item, index) => {
    if (item.time + KILL_SAVE_TIME_MIN * 60 < time) killers.splice(index, 1);
  });
}, 120000);

let customParams = _objectSpread({}, _tempConfigs.tempConfigs);

exports.customParams = customParams;
let admin_labels = [];

const setCustomParams = (name, value) => {
  customParams[name] = value;
  saveTempConf();
};

exports.setCustomParams = setCustomParams;

function newBiz(player, param) {
  let m = _menu.menu.new(player, "Новый офис", "Параметры");

  m.workAnyTime = true;

  m.onclose = () => {
    gameData(player);
  };

  if (!param) {
    param = {
      name: "",
      user_id: 0,
      price: 50000
    };
  }

  m.newItem({
    name: "Название",
    more: param.name,
    onpress: () => {
      _menu.menu.input(player, "Введите название", param.name, 30).then(text => {
        param.name = text;
        if (!text) param.name = '';
        newBiz(player, param);
      });
    }
  });
  m.newItem({
    name: "Ид владельца",
    more: param.user_id,
    onpress: () => {
      _menu.menu.input(player, "Введите id", param.user_id.toString(), 11).then(text => {
        param.user_id = _methods.methods.parseInt(text);
        if (!text) param.user_id = 0;
        newBiz(player, param);
      });
    }
  });
  m.newItem({
    name: "Стоимость",
    more: param.price,
    onpress: () => {
      _menu.menu.input(player, "Введите стоимость", param.price.toString(), 11).then(text => {
        param.price = _methods.methods.parseInt(text);
        if (!text) param.price = 0;
        newBiz(player, param);
      });
    }
  });
  m.newItem({
    name: "~g~Создать",
    onpress: () => {
      let target = _user.user.getPlayerById(param.user_id);

      if (!target && param.user_id != 0) return player.notify("~r~Указанного пользователя нет в сети");

      _business2.businessEntity.create({
        name: param.name,
        price: param.price,
        user_name: target ? _user.user.getRpName(target) : '',
        user_id: target ? param.user_id : 0,
        bank: 0,
        type: 10,
        price_product: 1,
        price_card1: 10,
        price_card2: 10,
        tarif: 0,
        interior: 2
      }).then(res => {
        _business.business.load(res);

        if (target && param.user_id != 0) {
          _user.user.set(target, "fraction_id2", res);

          _user.user.set(target, "rank2", 11);
        }

        player.notify("~g~Офис успешно создан");
        m.close();
      });
    }
  });
  m.open();
}

function customEnable(player) {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 6) return;

  let m = _menu.menu.new(player, "Дополнительные параметры", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  for (let param in _tempConfigs.tempConfigs) {
    m.newItem({
      name: _tempConfigs.tempConfigs[param],
      more: customParams[param] ? "~g~Включено" : "Выключено",
      onpress: () => {
        customParams[param] = !customParams[param];
        player.notify(_tempConfigs.tempConfigs[param] ? "~g~Включено" : "~r~Отключено");
        saveTempConf();
      }
    });
  }

  m.newItem({
    name: "Очистить отыгранное время",
    desc: "Время, которое для пункта выше",
    onpress: () => {
      _user.user.accept(player, "Вы уверены?").then(status => {
        if (!status) return customEnable(player);

        _user2.userEntity.update({
          played_time: 0
        }, {
          where: {}
        });

        mp.players.forEach(player => {
          player.played_time = 0;
        });
        player.notify('~g~Готово');
      });
    }
  });
  m.open();
}

function timeEdit(player) {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 6) return;

  let m = _menu.menu.new(player, "Настройка времени", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    gameData(player);
  };

  m.newItem({
    name: "Часы",
    more: _weather.weather.getHour(),
    desc: "",
    onpress: () => {
      _menu.menu.input(player, "Введите новое значение (0-23)", _weather.weather.getHour().toString(), 2).then(text => {
        if (!text) return player.notify("~r~Отмена");

        let hr = _methods.methods.parseInt(text);

        if (isNaN(hr) || hr < 0 || hr > 23) return player.notify("~r~Значение введено не верно");

        _weather.weather.setHour(hr);

        _weather.weather.timeSyncTimer();

        timeEdit(player);
      });
    }
  });
  m.newItem({
    name: "Минуты",
    more: _weather.weather.getMin(),
    desc: "",
    onpress: () => {
      _menu.menu.input(player, "Введите новое значение (0-59)", _weather.weather.getMin().toString(), 2).then(text => {
        if (!text) return player.notify("~r~Отмена");

        let hr = _methods.methods.parseInt(text);

        if (isNaN(hr) || hr < 0 || hr > 59) return player.notify("~r~Значение введено не верно");

        _weather.weather.setMin(hr);

        _weather.weather.timeSyncTimer();

        timeEdit(player);
      });
    }
  });
  m.open();
}

function vehCatalog(player) {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 5) return;

  let m = _menu.menu.new(player, "Каталог ТС", "Категории");

  m.workAnyTime = true;

  m.onclose = () => {
    gameData(player);
  };

  m.newItem({
    name: "Конфиги ТС",
    desc: "",
    onpress: () => {
      let submenu = _menu.menu.new(player, "Список конфигов");

      submenu.workAnyTime = true;

      submenu.onclose = () => {
        vehCatalog(player);
      };

      submenu.newItem({
        name: "Добавить новый",
        onpress: () => {
          _menu.menu.input(player, "Введите модель").then(model => {
            if (model.length < 2) return player.notify("~r~Необходимо ввести модель");
            model = _methods.methods.model(model);
            if (_vehicleInfo.vehicleInfo.find(model)) return player.notify("~r~Нельзя добавлять ту модель, которая уже есть в списке"), vehCatalog(player);

            _menu.menu.input(player, "Введите название").then(name => {
              if (name.length < 2) return player.notify("~r~Необходимо ввести модель");

              _menu.menu.input(player, "Введите объем багажника (кг)").then(stock2 => {
                let stock = _methods.methods.parseInt(stock2);

                if (isNaN(stock) || stock < 0 || stock > 999990999) return player.notify("~r~Параметр указан не верно");
                stock *= 1000;

                _menu.menu.input(player, "Введите расход топлива (л)").then(fuel_min2 => {
                  let fuel_min = _methods.methods.parseInt(fuel_min2);

                  if (isNaN(fuel_min) || fuel_min < 0 || fuel_min > 999990999) return player.notify("~r~Параметр указан не верно");

                  _menu.menu.input(player, "Введите объем бензобака (л)").then(fuel_full2 => {
                    let fuel_full = _methods.methods.parseInt(fuel_full2);

                    if (isNaN(fuel_full) || fuel_full < 0 || fuel_full > 999990999) return player.notify("~r~Параметр указан не верно");

                    _menu.menu.selector(player, "Выбор класса", ['Commercials', 'Compacts', 'Coupes', 'Industrial', 'Motorcycles', 'Muscle', 'Off-Road', 'Sedans', 'Sports', 'Sports Classics', 'Super', 'SUVs', 'Utility', 'Vans']).then(classs => {
                      if (!classs) return player.notify("~r~Необходимо выбрать класс"), vehCatalog(player);

                      _vehicleInfo.vehicleInfo.create(model, name, classs, stock, fuel_full, fuel_min);

                      player.notify("~g~Успешно");
                      vehCatalog(player);
                    });
                  });
                });
              });
            });
          });
        }
      });

      _enums.enums.vehicleInfo.forEach(item => {
        submenu.newItem({
          name: item.display_name,
          desc: `Вес баг.: ${(item.stock / 1000).toFixed(2)} кг, Расход топ.: ${item.fuel_min}л, Объем бенз.: ${item.fuel_full}л`,
          onpress: () => {
            const id = item.id;

            const setting = () => {
              let item = _enums.enums.vehicleInfo.find(q => q.id === id);

              if (!item) return;

              let submenu2 = _menu.menu.new(player, "Настройка", item.display_name);

              submenu2.newItem({
                name: "Электрокар",
                more: `${item.fuel_min == 0 && item.class_name != 'Cycles' ? 'Да' : 'Нет'}`
              });
              submenu2.newItem({
                name: "Вес багажника",
                more: `${(item.stock / 1000).toFixed(2)} кг`,
                onpress: () => {
                  _menu.menu.input(player, "Введите вес (кг)", `${(item.stock / 1000).toFixed(0)}`, 6, "int").then(stockfull => {
                    if (!stockfull) return setting();

                    _vehicleInfo.vehicleInfo.update({
                      stock: stockfull * 1000
                    }, id).then(res => {
                      setting();
                    });
                  });
                }
              });
              submenu2.newItem({
                name: "Объём бензобака",
                more: `${item.fuel_full} л`,
                onpress: () => {
                  _menu.menu.input(player, "Введите объём", `${item.fuel_full}`, 6, "int").then(val => {
                    if (!val) return setting();

                    _vehicleInfo.vehicleInfo.update({
                      fuel_full: val
                    }, id).then(res => {
                      setting();
                    });
                  });
                }
              });
              submenu2.newItem({
                name: "Расход в минуту",
                more: `${item.fuel_min} л`,
                onpress: () => {
                  _menu.menu.input(player, "Введите объём", `${item.fuel_min}`, 6, "int").then(val => {
                    if (!val) return setting();

                    _vehicleInfo.vehicleInfo.update({
                      fuel_min: val
                    }, id).then(res => {
                      setting();
                    });
                  });
                }
              });
              submenu2.newItem({
                name: "Настроить ТС под электрокар",
                onpress: () => {
                  if (item.class_name == 'Cycles') return player.notify(`~r~Велотранспорт не может быть электрокаром)`);

                  _vehicleInfo.vehicleInfo.update({
                    fuel_full: 1,
                    fuel_min: 0
                  }, id).then(res => {
                    setting();
                  });
                }
              });
              submenu2.newItem({
                name: '~r~Удалить',
                onpress: () => {
                  _user.user.accept(player, "Удалить запись?").then(status => {
                    if (!status) return vehCatalog(player);

                    _vehicleInfo.vehicleInfo.remove(item.id).then(() => {
                      player.notify("~g~Запись успешно удалена");
                      vehCatalog(player);
                    });
                  });
                }
              });
              submenu2.open();
            };

            setting();
          }
        });
      });

      submenu.open();
    }
  });
  m.newItem({
    name: "Автосалоны",
    desc: "",
    onpress: () => {
      let submenu = _menu.menu.new(player, "Список салонов");

      submenu.workAnyTime = true;

      submenu.onclose = () => {
        vehCatalog(player);
      };

      _autosalon.autosalon.list.map((item, index) => {
        submenu.newItem({
          name: item[0],
          onpress: () => {
            let submenu2 = _menu.menu.new(player, "Список ТС");

            submenu2.workAnyTime = true;

            submenu2.onclose = () => {
              vehCatalog(player);
            };

            submenu2.newItem({
              name: "Добавить новую модель",
              onpress: () => {
                _menu.menu.input(player, "Введите модель с большой буквы").then(model => {
                  if (!model) return;
                  model = _methods.methods.model(model);
                  let hash = mp.joaat(model);
                  if (!_vehicleInfo.vehicleInfo.find(hash)) return player.notify("~r~Данного ТС нет в каталоге конфига. Сначала его нужно добавить туда");

                  _autosalon.autosalon.addModel(index, model);

                  player.notify("~g~ТС успешно добавлен в указанный салон");
                });
              }
            });

            _autosalon.autosalon.models[index].map(model => {
              submenu2.newItem({
                name: model,
                onpress: () => {
                  _user.user.accept(player, "Удалить запись?").then(status => {
                    if (!status) return vehCatalog(player);

                    _autosalon.autosalon.removeModel(index, model);

                    player.notify("~g~Модель успешно удалена");
                    vehCatalog(player);
                  });
                }
              });
            });

            submenu2.open();
          }
        });
      });

      submenu.open();
    }
  });
  m.newItem({
    name: "Новое ТС на продажу",
    desc: "",
    onpress: async () => {
      if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить в автосалон. Мы скопируем его данные чтобы вы не заполняли их в ручную");
      if (!player.vehicle.modelname) return player.notify("~r~ТС должно быть заспавнено админом");

      const vInfo = _vehicleInfo.vehicleInfo.find(player.vehicle.model);

      if (!vInfo) {
        player.notify("~r~По какой то причине мы не обнаружили данный ТС в конфигах");
        return vehCatalog(player);
      }

      let cars = await _carsModel.carsEntity.findAll({
        where: {
          [_sequelize.Op.or]: [{
            hash: player.vehicle.model
          }, {
            hash: _methods.methods.hashToDb(player.vehicle.model)
          }]
        }
      });
      let costHelp = ``;

      if (cars.length > 0) {
        costHelp = ` (Уже существует за ${cars[0].price}$)`;
      }

      _menu.menu.input(player, "Введите стоимость" + costHelp, "", 10, "int").then(sums => {
        if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить в автосалон. Мы скопируем его данные чтобы вы не заполняли их в ручную");
        if (!player.vehicle.modelname) return player.notify("~r~ТС должно быть заспавнено админом");

        let sum = _methods.methods.parseInt(sums);

        if (isNaN(sum) || sum <= 0 || sum > 99999999) return player.notify("~r~Стоимость указана не верно");
        let q = [];

        for (let i = 1; i < 21; i++) q.push(i.toString());

        _menu.menu.selector(player, "Количество", q).then(scount => {
          if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить в автосалон. Мы скопируем его данные чтобы вы не заполняли их в ручную");
          if (!player.vehicle.modelname) return player.notify("~r~ТС должно быть заспавнено админом");
          if (!scount) return;

          let vCount = _methods.methods.parseInt(scount);

          if (isNaN(vCount) || vCount < 0 || vCount > 21) return;

          for (let i = 0; i < vCount; i++) {
            let number = _vehicles.vehicles.generateNumber();

            let color = _methods.methods.getRandomInt(0, 156);

            let vInfo = _methods.methods.getVehicleInfo(player.vehicle.model);

            if (vInfo.display_name == 'Unknown') {
              player.notify("~r~Конфига для данного ТС не существует");
              continue;
            }

            _carsModel.carsEntity.create({
              hash: player.vehicle.model,
              name: player.vehicle.modelname,
              class_type: vInfo.class_name,
              full_fuel: vInfo.fuel_full,
              fuel: vInfo.fuel_full,
              fuel_minute: vInfo.fuel_min,
              color1: color,
              color2: color,
              number: number,
              stock_full: vInfo.stock,
              price: sum,
              x: 0,
              y: 0,
              z: 0,
              rot: 0
            });
          }

          setTimeout(() => {
            _autosalon.autosalon.loadCars();
          }, 5000);
          player.notify('~b~ТС был добавлен на сервер. Кол-во: ~s~' + vCount);
        });
      });
    }
  });
  m.open();
}

function saveTempConf() {
  _fs.default.writeFile("tempdata.json", JSON.stringify(customParams), function (err) {
    if (err) {
      _methods.methods.createFile("tempdata.json");

      saveTempConf();
    }
  });
}

_fs.default.readFile("tempdata.json", "utf8", function (err, data) {
  if (err) return saveTempConf();
  let d = JSON.parse(data);

  for (let param in _tempConfigs.tempConfigs) {
    customParams[param] = false;
  }

  for (let id in d) {
    customParams[id] = d[id];
  }
});

let runTestExec = false;

function mainMenu(player) {
  if (!_methods.methods.isTestServer() && !_user.user.isAdmin(player)) return player.notify('~r~У вас нет доступа к данному меню');

  let m = _menu.menu.new(player, "", "Действия");

  m.sprite = "admin";
  m.workAnyTime = true;

  if (_newrage.RAGE_BETA) {
    m.newItem({
      name: "~r~Быстрый перезаход",
      onpress: () => {
        player.notify("Команда отправлена");
        player.kickSilent("Reconnect");
      }
    });
  }

  m.newItem({
    name: "Замер скорости ТС",
    onpress: () => {
      player.call('carCompare');
    }
  });
  m.newItem({
    name: "Точки телепортации",
    onpress: () => {
      _menu.menu.selector(player, "Выберите точку", _adminsTp.default.map(itm => {
        return itm[0];
      }), true).then(id => {
        if (typeof id != "number") return;

        _user.user.teleportVeh(player, _adminsTp.default[id][1], _adminsTp.default[id][2], _adminsTp.default[id][3]);
      });
    }
  });

  if (_methods.methods.isTestServer()) {
    m.newItem({
      name: "~g~====== ТЕСТ РАЗДЕЛ ======",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Функции тестера");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          mainMenu(player);
        };

        submenu.newItem({
          name: "ТП на метку",
          onpress: () => {
            _user.user.teleportWaypoint(player);
          }
        });
        submenu.newItem({
          name: "Спавн ТС",
          onpress: () => {
            _menu.menu.input(player, "Введите название ТС").then(model => {
              if (!model) return;

              let vehicle = _vehicles.vehicles.spawnCar(player.position, player.heading, model);

              vehicle.dimension = player.dimension;
              player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
            });
          }
        });
        submenu.newItem({
          name: "Уровень игрока",
          more: 'Текущий: ' + _user.user.getLevel(player),
          onpress: () => {
            _menu.menu.input(player, "Введите уровень", _user.user.getLevel(player).toString(), 3, "int").then(lvl => {
              if (!lvl) return mainMenu(player);
              if (isNaN(lvl) || lvl < 0 || lvl > 99) return player.notify("~r~Уровень игрока указан не верно");

              _user.user.setLevel(player, lvl);

              player.notify('~g~Уровень установлен');
              return mainMenu(player);
            });
          }
        });
        submenu.newItem({
          name: "Получить 1000000$",
          onpress: () => {
            _user.user.addCashMoney(player, 1000000);

            _user.user.addBankMoney(player, 1000000);

            player.notify('~g~Готово');
          }
        });
        submenu.newItem({
          name: "Восскреснуть",
          onpress: () => {
            _user.user.healProtect(player);

            player.spawn(player.position);
            player.health = 100;
          }
        });
        submenu.newItem({
          name: "100% армор",
          onpress: () => {
            player.armour = 100;
          }
        });
        submenu.newItem({
          name: "Выдать оружие",
          onpress: () => {
            _menu.menu.selector(player, "Выберите оружие", _weapons.weaponsUtil.hashesMap.map(([name, hashhalh]) => name), true).then(async ids => {
              if (typeof ids !== "number") return mainMenu(player);
              let weapon = _weapons.weaponsUtil.hashesMap[ids];
              let ammo = await _menu.menu.input(player, "Количество патронов", "100", 10, "int");
              if (!ammo || ammo < 1) return player.notify(`~r~Количество патронов указано не верно`), mainMenu(player);

              _user.user.giveWeaponByHash(player, mp.joaat("WEAPON_" + weapon[0].toUpperCase()), ammo);

              player.notify('~g~Оружие выдано');
              return mainMenu(player);
            });
          }
        });
        submenu.newItem({
          name: "Выдать офф фракцию",
          more: _user.user.getPlayerFractionName(player),
          onpress: () => {
            _menu.menu.selectFraction(player).then(fract => {
              if (fract == null) return;

              _user.user.set(player, "fraction_id", fract);

              _user.user.set(player, "rank", 1);

              _user.user.updateClientCache(player);

              player.notify("~g~Фракция установлена");

              _user.user.saveAccount(player);

              return mainMenu(player);
            });
          }
        });

        if (_user.user.getPlayerFraction(player)) {
          submenu.newItem({
            name: "Ранг офф фракции",
            more: `${_user.user.getRankName(_user.user.getPlayerFraction(player), _user.user.getPlayerFractionRank(player))} [${_user.user.getPlayerFractionRank(player)}]`,
            onpress: () => {
              if (!_user.user.getPlayerFraction(player)) return mainMenu(player);

              let fractionranks = _fractions.fractionUtil.getFractionRanks(_user.user.getPlayerFraction(player));

              _menu.menu.selector(player, "Выберите ранг", ["~r~Отмена", ...fractionranks], true).then(rank => {
                if (!rank) return mainMenu(player);

                _user.user.set(player, 'rank', rank);

                player.notify(`~g~Успешно`);

                _user.user.updateClientCache(player);

                _user.user.saveAccount(player);

                return mainMenu(player);
              });
            }
          });
        }

        if (_newrage.RAGE_BETA && _user.user.isAdminNow(player, 6)) {
          submenu.newItem({
            name: "NPC",
            onpress: () => {
              let submenu2 = _menu.menu.new(player, "NPC", "Действия");

              submenu2.onclose = () => {
                mainMenu(player);
              };

              submenu2.newItem({
                name: "Спавн NPC",
                type: "list",
                list: ["Динамический", "Статический"],
                onpress: item => {
                  if (item.listSelected == 0) {
                    _npc.npc.createPed(player.position, player.heading, 'ig_fbisuit_01');
                  }

                  if (item.listSelected == 1) {
                    _npc.npc.createPed(player.position, player.heading, 'ig_fbisuit_01', true);
                  }
                }
              });
              submenu2.newItem({
                name: "Спавн водителя в ближайший ТС",
                onpress: item => {
                  let veh = _user.user.getNearestVehicle(player, 5);

                  if (!veh) return player.notify("ТС не обнаружен");

                  let ped = _npc.npc.createPed(player.position, player.heading, 'ig_fbisuit_01');

                  setTimeout(() => {
                    _npc.npc.putIntoVehicle(ped, veh, -1, 5000, 2.0, 1);
                  }, 1000);
                }
              });
              submenu2.newItem({
                name: "Создать таксиста",
                onpress: item => {
                  let veh = _vehicles.vehicles.spawnCar(player.position, 0, 'taxi', "TEST");

                  if (!veh) return player.notify("ТС не обнаружен");
                  let dynamicPed = mp.peds.new(mp.joaat('player_zero'), player.position, {
                    dynamic: true
                  });
                  dynamicPed.controller = player;

                  _vehicles.vehicles.setFuelFull(veh);

                  _vehicles.vehicles.engineStatus(player, veh, true);

                  setTimeout(() => {
                    dynamicPed.putIntoVehicle(veh, -1, 5000, 1.0, 1);
                    player.putIntoVehicle(veh, 2);
                    setTimeout(() => {
                      dynamicPed.driveWaypoint(2568.86, 6177.29, 163.86);
                    }, 10000);
                  }, 15000);
                }
              });
              submenu2.newItem({
                name: "Удалить ближайшего педа",
                onpress: item => {
                  let ped = _user.user.getNearestPed(player, 10);

                  if (!ped) return player.notify("Пед не обнаружен");
                  ped.destroy();
                }
              });
              submenu2.newItem({
                name: "Заставить ехать педа по точке навигации",
                onpress: item => {
                  if (!player.waypoint) return player.notify('~r~Мы не нашли точку навигации');

                  let ped = _user.user.getNearestPed(player, 10);

                  if (!ped) return player.notify("Пед не обнаружен");

                  _npc.npc.driveWaypoint(ped, player.waypoint.x, player.waypoint.y, 0);
                }
              });
              submenu2.newItem({
                name: "Остановить действие педа",
                onpress: () => {
                  if (!player.waypoint) return player.notify('~r~Мы не нашли точку навигации');

                  let ped = _user.user.getNearestPed(player, 10);

                  if (!ped) return player.notify("Пед не обнаружен");

                  _npc.npc.clearTask(ped);
                }
              });
              submenu2.newItem({
                name: "Остановить действие педа немедленно",
                onpress: () => {
                  if (!player.waypoint) return player.notify('~r~Мы не нашли точку навигации');

                  let ped = _user.user.getNearestPed(player, 10);

                  if (!ped) return player.notify("Пед не обнаружен");

                  _npc.npc.clearTask(ped, true);
                }
              });
              submenu2.open();
            }
          });
        }

        submenu.newItem({
          name: "Сменить погоду",
          onpress: item => {
            _weather.weather.nextRandomWeather();

            player.notify('~g~Готово');
          }
        });
        submenu.open();
      }
    });
  }

  if (_user.user.isAdmin(player)) {
    m.newItem({
      name: "Ответить на жалобу",
      onpress: () => {
        _menu.menu.input(player, "Введите ID").then(ids => {
          if (!ids) return;

          let id = _methods.methods.parseInt(ids);

          let target = _user.user.getPlayerById(id);

          if (!target) return player.notify("Игрок не обнаружен");

          _menu.menu.input(player, "Введите ответ").then(text => {
            if (!text) return player.notify("~r~Отмена");
            player.notify("~g~Ответ отправлен");
            mp.events.call("server:sendAnswerReport", player, id, text);
          });
        });
      }
    });

    if (!_user.user.isAdminNow(player)) {
      m.newItem({
        name: "~g~Включить ~y~Админ-мод",
        onpress: () => {
          player.setVariable('enableAdmin', true);
          player.notify("~r~Админ-мод включён");

          _user.user.log(player, "AdminJob", "Включил админку");

          mainMenu(player);
        }
      });

      if (_user.user.getAdminLevel(player) >= 5) {
        if (!player.getVariable('enableAdminHidden')) {
          m.newItem({
            name: "~g~Включить скрытный ~y~Админ-мод",
            desc: "Никто кроме админов 5+ LVL не будет видеть что у вас включена админка",
            onpress: () => {
              player.setVariable('enableAdminHidden', true);
              setTimeout(() => {
                if (!mp.players.exists(player)) return;
                player.setVariable('enableAdmin', true);
                mainMenu(player);
              }, 500);
              player.notify("~r~Админ-мод включён в скрытном режиме");

              _user.user.log(player, "AdminJob", "Включил админку в скрытном режиме");
            }
          });
        }
      }
    } else {
      if (_user.user.getAdminLevel(player) >= 5) {
        if (!player.getVariable('enableAdminHidden')) {
          m.newItem({
            name: "~g~Включить скрытный ~y~Админ-мод",
            desc: "Никто кроме админов 5+ LVL не будет видеть что у вас включена админка",
            onpress: () => {
              player.setVariable('enableAdminHidden', true);
              player.notify("~r~Админ-мод переключён в скрытный режим");

              _user.user.log(player, "AdminJob", "Переключил админку в скрытный режим");

              mainMenu(player);
            }
          });
        } else {
          m.newItem({
            name: "~r~Выключить скрытный режим ~y~Админ-мод",
            desc: "Админка останется, однако скрытный режим пропадёт",
            onpress: () => {
              player.setVariable('enableAdminHidden', false);
              player.notify("~r~Админ-мод включён");

              _user.user.log(player, "AdminJob", "Выключил скрытный режим админки оставив админку включённой");

              mainMenu(player);
            }
          });
        }
      }

      m.newItem({
        name: "Вылечить игроков в радиусе возле себя",
        onpress: () => {
          _user.user.accept(player, "Вы уверены?").then(status => {
            mainMenu(player);
            if (!status) return;
            mp.players.toArray().filter(target => target.dist(player.position) < 50).map(target => {
              _user.user.fullHeal(target, false);
            });

            _user.user.log(player, "AdminJob", "Вылечил всех игроков в радиусе");
          });
        }
      });

      if (_user.user.isAdminNow(player, 5)) {
        m.newItem({
          name: "Блокировка на телепортацию",
          more: player.teleportBlock ? "~g~Активна" : "~r~Не активна",
          onpress: () => {
            player.teleportBlock = !player.teleportBlock;
            player.notify('~g~Статус изменён');
            mainMenu(player);
          }
        });
      }

      m.newItem({
        name: "~r~Удалить ТС в радиусе",
        onpress: () => {
          _user.user.accept(player, "Вы уверены?").then(status => {
            if (!status) return mainMenu(player);

            _menu.menu.input(player, "Введите расстояние", "10", 3, "int").then(dist => {
              if (!dist) return mainMenu(player);
              if (isNaN(dist) || dist < 0) return player.notify(`~r~Радиус указан не верно`);
              if (dist > 50) return player.notify(`~r~Указанный радиус слишком большой`);
              mp.vehicles.toArray().filter(veh => veh.dimension == player.dimension && player.dist(veh.position) < dist).map(veh => {
                veh.destroy();
              });
              player.notify('~g~Успешно');

              _user.user.log(player, "AdminJob", "Удалил все ТС в радиусе " + dist + "m");
            });
          });
        }
      });
      m.newItem({
        name: "Уведомление от нового античита",
        more: player.registerAnticheat ? "~g~Включено" : "~r~Отключено",
        onpress: () => {
          player.registerAnticheat = !player.registerAnticheat;
          player.notify('~g~Статус изменён');
          mainMenu(player);
        }
      });
      m.newItem({
        name: "Уведомление о регистрациях",
        more: player.registerAlert ? "~g~Включено" : "~r~Отключено",
        onpress: () => {
          player.registerAlert = !player.registerAlert;
          player.notify('~g~Статус изменён');
          mainMenu(player);
        }
      });

      if (_user.user.isCuff(player)) {
        m.newItem({
          name: "Снять с себя наручники",
          onpress: () => {
            _user.user.unCuff(player);

            mainMenu(player);
          }
        });
      }

      m.newItem({
        name: "Действия над игроком",
        onpress: () => {
          _menu.menu.input(player, "Введите ID").then(ids => {
            if (!ids) return;

            let id = _methods.methods.parseInt(ids);

            _user.user.checkIdUser(id).then(async fnd => {
              if (fnd == -1) return player.notify("Игрок не обнаружен");

              let target = _user.user.getPlayerById(id);

              let name = target ? _user.user.getRpName(target) : (await _user2.userEntity.findOne({
                where: {
                  id: id
                }
              })).rp_name;
              (0, _user.workUser)(player, id, name, fnd);
            });
          });
        }
      });
      m.newItem({
        name: "Транспорт",
        onpress: () => vehMenu(player)
      });
      m.newItem({
        name: "Инвиз",
        more: player.alpha == 0 ? "~g~Включен" : "~r~Выключен",
        onpress: () => {
          player.alpha = player.alpha == 0 ? 255 : 0;
          player.notify("Инвиз " + player.alpha ? "~g~Включен" : "~r~Выключен");
        }
      });
      m.newItem({
        name: "GodMode",
        onpress: () => {
          player.call("godmode:switch");

          _user.user.log(player, "AdminJob", "Переключил режим GodMode");
        }
      });
      m.newItem({
        name: "Объявление",
        onpress: () => {
          _menu.menu.input(player, "Введите заголовок").then(title => {
            if (!title) return;

            _menu.menu.input(player, "Введите текст").then(text => {
              if (!text) return;

              _methods.methods.saveLog('AdminNotify', `${_user.user.getRpName(player)} - ${title} | ${text}`);

              _methods.methods.notifyWithPictureToAll(title, 'Администрация', text, 'CHAR_ACTING_UP');

              _user.user.log(player, "AdminJob", "Подал объявление: " + title + "\n" + text);
            });
          });
        }
      });
      m.newItem({
        name: "Прогрузка ID",
        desc: "15 по умолчанию",
        onpress: () => {
          _menu.menu.input(player, "Введите новое расстояние").then(ids => {
            player.call("client:distId", [ids]);
            player.notify("Параметр изменён");
          });
        }
      });
      m.newItem({
        name: "Поиск убийц рядом",
        desc: "30 по умолчанию",
        onpress: () => {
          _menu.menu.input(player, "Введите расстояние", "30", 3, "int").then(dist => {
            if (!dist) return;
            let list = [...killers.filter(itm => _methods.methods.distanceToPos(player.position, itm.pos) <= dist || _methods.methods.distanceToPos(player.position, itm.target_pos) <= dist)].reverse();

            let submenu = _menu.menu.new(player, "Список убийств", "Радиус: " + dist + " | Время: " + KILL_SAVE_TIME_MIN + " минут");

            submenu.onclose = () => {
              mainMenu(player);
            };

            list.map(itm => {
              submenu.newItem({
                name: `[${itm.user}] (${itm.reason})`,
                more: `Цель: ${itm.target}`,
                onpress: () => {
                  (0, _user.workUser)(player, itm.user);
                }
              });
            });
            submenu.open();
          });
        }
      });

      if (_user.user.isAdmin(player, 4)) {
        m.newItem({
          name: "Отрисовка текста в мире",
          desc: "Создание табличек на карте",
          onpress: () => {
            const q = () => {
              let submenu = _menu.menu.new(player, "Список созданых табличек");

              submenu.onclose = () => {
                mainMenu(player);
              };

              submenu.newItem({
                name: `~g~Добавить на мою позицию`,
                onpress: () => {
                  _menu.menu.input(player, "Введите текст", "", 120).then(value => {
                    if (!value) return q();
                    admin_labels.push({
                      user: _user.user.getId(player),
                      label: mp.labels.new(value, player.position, {
                        dimension: player.dimension,
                        drawDistance: 10,
                        los: true
                      })
                    });
                    player.notify('~g~Табличка создана');
                    q();
                  });
                }
              });
              admin_labels.map((item, index) => {
                if (!mp.labels.exists(item.label)) return admin_labels.splice(index, 1);
                submenu.newItem({
                  name: `${item.label.text} [USER: ${item.user}]`,
                  more: `${_methods.methods.distanceToPos(player.position, item.label.position).toFixed(0)}m`,
                  desc: 'Измерение: ' + item.label.dimension,
                  onpress: () => {
                    let submenu3 = _menu.menu.new(player, "Действия");

                    submenu3.newItem({
                      name: "Телепортироватся",
                      onpress: () => {
                        if (!mp.labels.exists(item.label)) {
                          admin_labels.splice(index, 1);
                          player.notify('~r~Табличка пропала');
                          q();
                          return;
                        }

                        _user.user.teleportVeh(player, item.label.position.x, item.label.position.y, item.label.position.z);
                      }
                    });
                    submenu3.newItem({
                      name: "~r~Удалить",
                      onpress: () => {
                        if (!mp.labels.exists(item.label)) {
                          admin_labels.splice(index, 1);
                          player.notify('~r~Табличка пропала');
                          q();
                          return;
                        }

                        _user.user.accept(player, "Вы уверены?").then(status => {
                          if (!status) return q();

                          if (!mp.labels.exists(item.label)) {
                            admin_labels.splice(index, 1);
                            player.notify('~r~Табличка пропала');
                            q();
                            return;
                          }

                          item.label.destroy();
                          admin_labels.splice(index, 1);
                          player.notify('~r~Табличка удалена');
                          q();
                        });
                      }
                    });
                    submenu3.open();
                  }
                });
              });
              submenu.open();
            };

            q();
          }
        });
      }

      m.newItem({
        name: "Отладочные данные",
        onpress: () => debugData(player)
      });
      m.newItem({
        name: "~o~Игровые данные",
        onpress: () => gameData(player)
      });

      if (_user.user.getAdminLevel(player) == 6) {
        m.newItem({
          name: "~r~Выдать всем PayDay",
          onpress: () => {
            _user.user.accept(player, "Вы уверены?").then(status => {
              mainMenu(player);
              if (!status) return;
              player.notify(`~g~PayDay выдан всем`);
              mp.players.forEach(nplayer => {
                _user.user.payDay(nplayer);
              });

              _user.user.log(player, "AdminJob", "Выдал всем PayDay");
            });
          }
        });
        m.newItem({
          name: "~o~Промокоды",
          onpress: () => {
            let submenu = _menu.menu.new(player, "Промокоды");

            submenu.newItem({
              name: "~o~Статистика промокода (Медиа)",
              onpress: () => {
                _menu.menu.input(player, "Введите промокод").then(promo => {
                  if (!promo) return;

                  _user2.userEntity.count({
                    where: {
                      promocode: promo
                    }
                  }).then(count => {
                    player.notify("Количество активаций: " + count);
                    submenu.open();
                  });
                });
              }
            });
            submenu.newItem({
              name: "~o~Статистика промокода (Обычного)",
              onpress: () => {
                _menu.menu.input(player, "Введите промокод").then(promo => {
                  if (!promo) return;

                  _promocodeUsing.promocodeUsingEntity.count({
                    where: {
                      promocode_name: promo
                    }
                  }).then(count => {
                    player.notify("Количество активаций: " + count);
                    submenu.open();
                  });
                });
              }
            });
            submenu.newItem({
              name: "~g~Создать ивентовый промокод",
              onpress: () => {
                let submenu2 = _menu.menu.new(player, "Настройки");

                let range = 1;
                let los = true;
                let sum = 1000;
                submenu2.newItem({
                  name: "Дистанция прорисовки",
                  type: "range",
                  rangeselect: [1, 100],
                  onchange: val => {
                    range = val + 1;
                  }
                });
                submenu2.newItem({
                  name: "Видно ли за стенкой?",
                  type: "list",
                  list: ["~g~Не видно", "~g~Видно"],
                  onchange: val => {
                    los = !!val;
                  }
                });
                submenu2.newItem({
                  name: "Сумма в тысячах",
                  type: "range",
                  rangeselect: [1, 100],
                  onchange: val => {
                    sum = (val + 1) * 1000;
                  }
                });
                submenu2.newItem({
                  name: "~g~Запустить",
                  onpress: () => {
                    (0, _events.createTempPromocode)(player, sum, range, los);
                    player.notify('Ивентовый промокод создан');
                    mainMenu(player);
                  }
                });
                submenu2.newItem({
                  name: "~r~Отмена",
                  onpress: () => {
                    mainMenu(player);
                  }
                });
                submenu2.open();
              }
            });
            submenu.newItem({
              name: "Список ивентовых промокодов",
              onpress: () => {
                let submenu2 = _menu.menu.new(player, "Ивентовые промокоды", "Список");

                _events.tempPromocodes.forEach((item, code) => {
                  submenu2.newItem({
                    name: code,
                    more: `$${_methods.methods.numberFormat(item.sum)} | ${player.dist(item.label.position).toFixed(0)}m`,
                    onpress: () => {
                      let submenuit = _menu.menu.new(player, "Действия", `${code} $${_methods.methods.numberFormat(item.sum)}`);

                      submenuit.newItem({
                        name: "Телепортация",
                        onpress: () => {
                          if (!mp.labels.exists(item.label) || !_events.tempPromocodes.has(code)) return player.notify(`~r~Промокод уже не существует`), mainMenu(player);

                          _user.user.teleport(player, item.label.position.x, item.label.position.y, item.label.position.z, null, item.label.dimension);
                        }
                      });
                      submenuit.newItem({
                        name: "~r~Удалить",
                        onpress: () => {
                          if (!mp.labels.exists(item.label) || !_events.tempPromocodes.has(code)) return player.notify(`~r~Промокод уже не существует`), mainMenu(player);
                          item.label.destroy();

                          _events.tempPromocodes.delete(code);

                          player.notify('~g~Промокод удалён');
                          mainMenu(player);
                        }
                      });
                      submenuit.open();
                    }
                  });
                });

                submenu2.open();
              }
            });
            submenu.newItem({
              name: "~g~Создать",
              onpress: () => {
                _menu.menu.input(player, "Введите название промокода").then(promo => {
                  if (!promo) return submenu.open();

                  _promocodeUsing.promocodeEntity.count({
                    where: {
                      code: promo
                    }
                  }).then(count => {
                    if (count > 0) return player.notify("~r~Данный промокод уже создан и активен");

                    _promocodeUsing.promocodeUsingEntity.count({
                      where: {
                        promocode_name: promo
                      }
                    }).then(count2 => {
                      if (count2 > 0) return player.notify("~r~Данный промокод уже был кем то введён");

                      _menu.menu.input(player, "Введите сумму бонуса", "", 6, "int").then(sum => {
                        if (isNaN(sum) || sum <= 0) return player.notify("~r~Указанная сумма введена не верно");

                        _promocodeUsing.promocodeEntity.create({
                          code: promo,
                          bonus: sum
                        }).then(() => {
                          player.notify('~g~Промокод создан');
                          mainMenu(player);
                        });
                      });
                    });
                  });
                });
              }
            });
            submenu.newItem({
              name: "~b~Список промокодов",
              onpress: () => {
                const l = () => {
                  _promocodeUsing.promocodeEntity.findAll().then(list => {
                    let submenu2 = _menu.menu.new(player, "Список промокодов");

                    submenu2.onclose = () => {
                      mainMenu(player);
                    };

                    list.map(item => {
                      submenu2.newItem({
                        name: item.code,
                        more: item.bonus + "$",
                        onpress: () => {
                          let submenu3 = _menu.menu.new(player, "Действие");

                          submenu3.newItem({
                            name: "Количество активаций",
                            onpress: () => {
                              _promocodeUsing.promocodeUsingEntity.count({
                                where: {
                                  promocode_name: item.code
                                }
                              }).then(count => {
                                player.notify("Количество активаций: " + count);
                              });
                            }
                          });
                          submenu3.newItem({
                            name: "~r~Удалить промокод",
                            onpress: () => {
                              _user.user.accept(player, "Вы уверены?").then(status => {
                                if (!status) return submenu3.open();

                                _promocodeUsing.promocodeEntity.destroy({
                                  where: {
                                    id: item.id
                                  }
                                }).then(() => {
                                  player.notify('~g~Промокод удалён');
                                  l();
                                });
                              });
                            }
                          });
                          submenu3.open();
                        }
                      });
                    });
                    submenu2.open();
                  });
                };

                l();
              }
            });
            submenu.open();
          }
        });
      }

      if (_user.user.getAdminLevel(player) >= 5) {
        m.newItem({
          name: "~r~Занести игрока в BlackList",
          desc: "",
          onpress: () => {
            _menu.menu.input(player, "Введите ID учётной записи", "", 11, "int").then(ids => {
              if (!ids) return;

              let id = _methods.methods.parseInt(ids);

              if (isNaN(id) || id < 0) return player.notify("~r~ID указан не верно");

              _user.user.checkIdUser(id).then(rank => {
                if (rank == -1) return player.notify("~r~ID не обнаружен");
                if (rank == 6) return player.notify("~r~Вы не можете занести данного человека в BlackList");

                _user2.userEntity.findOne({
                  where: {
                    id: id
                  }
                }).then(usr => {
                  const lic = usr.lic;
                  const guid = usr.name;
                  const rgscId = usr.rgscid;

                  _blackList.blackListEntity.findOne({
                    where: {
                      lic,
                      guid
                    }
                  }).then(q => {
                    if (q) return player.notify("~r~Пользователь уже занесён в BlackList");

                    _menu.menu.input(player, "Введите причину", "", 150, "textarea").then(reason => {
                      if (!reason) return player.notify("~r~Необходимо ввести причину");

                      _user.user.accept(player, "Вы уверены?").then(status => {
                        if (!status) return;

                        const target = _user.user.getPlayerById(id);

                        _blackList.blackListEntity.create({
                          lic: usr.lic,
                          reason: `${reason} [Занёс ${_user.user.getRpName(player)} (${_user.user.getId(player)})]`,
                          guid: usr.name,
                          rgscId: target ? target.clientSocial : rgscId ? rgscId : 0
                        }).then(() => {
                          player.notify("~g~Пользователь занесён в BlackList");

                          _methods.methods.saveLog("addBlackList", _user.user.getId(player) + " занёс в BlackList " + id + " " + guid + " " + lic);

                          _user.user.log(player, "AdminJob", "Занёс в BlackList @user" + id + " " + guid + " " + lic);
                        });
                      });
                    });
                  });
                });
              });
            });
          }
        });
        m.newItem({
          name: "~y~Убрать игрока из BlackList",
          desc: "",
          onpress: () => {
            _menu.menu.input(player, "Введите ID учётной записи", "", 11, "int").then(ids => {
              if (!ids) return;

              let id = _methods.methods.parseInt(ids);

              if (isNaN(id) || id < 0) return player.notify("~r~ID указан не верно");

              _user2.userEntity.findOne({
                where: {
                  id: id
                }
              }).then(usr => {
                if (!usr) return player.notify("~r~Игрок не обнаружен");
                const lic = usr.lic;
                const guid = usr.name;

                _blackList.blackListEntity.findOne({
                  where: {
                    [_sequelize.Op.or]: [{
                      lic
                    }, {
                      guid
                    }]
                  }
                }).then(itm => {
                  if (!itm) return player.notify("~r~Пользователь не обнаружен в BlackList");
                  itm.destroy();

                  _user.user.log(player, "AdminJob", "Удалил из BlackList @user" + id + " " + guid + " " + lic);

                  return player.notify("~r~Пользователь удалён из BlackList");
                });
              });
            });
          }
        });
      }

      if (_methods.methods.isTestServer() && _user.user.isAdminNow(player, 6)) {
        m.newItem({
          name: "~g~Занести Social в доступ",
          desc: "",
          onpress: () => {
            _menu.menu.input(player, "Введите Social", "", 30, "text").then(social => {
              if (!social) return;
              social = social.toLowerCase();
              if (_whitelist.whitelist.list.includes(social)) return player.notify("~r~Уже добавлен");else _whitelist.whitelist.new(player, social), player.notify("~g~Успешно добавлен");
            });
          }
        });
        m.newItem({
          name: "~r~Удалить Social из доступа",
          desc: "",
          onpress: () => {
            _menu.menu.input(player, "Введите Social", "", 30, "text").then(social => {
              if (!social) return;
              social = social.toLowerCase();
              if (!_whitelist.whitelist.list.includes(social)) return player.notify("~r~Social не внесён");else _whitelist.whitelist.remove(social), player.notify("~g~Успешно удалён");
            });
          }
        });
      } else if (_user.user.isAdmin(player, 5)) {
        m.newItem({
          name: "~g~Занести Social белый список BlackList",
          desc: "Игрок с таким Social сможет зайти всегда",
          onpress: () => {
            _menu.menu.input(player, "Введите Social", "", 30, "text").then(social => {
              if (!social) return;
              social = social.toLowerCase();
              if (_whitelist.whitelist.list.includes(social)) return player.notify("~r~Уже добавлен");else _whitelist.whitelist.new(player, social), player.notify("~g~Успешно добавлен");
            });
          }
        });
        m.newItem({
          name: "~r~Удалить Social из белого списка BlackList",
          desc: "",
          onpress: () => {
            _menu.menu.input(player, "Введите Social", "", 30, "text").then(social => {
              if (!social) return;
              social = social.toLowerCase();
              if (!_whitelist.whitelist.list.includes(social)) return player.notify("~r~Social не внесён");else _whitelist.whitelist.remove(social), player.notify("~g~Успешно удалён");
            });
          }
        });
      }

      if (_user.user.getAdminLevel(player) >= 6) {
        m.newItem({
          name: "Socket.IO",
          onpress: () => {
            let submenu = _menu.menu.new(player, "Включение системы");

            submenu.workAnyTime = true;

            submenu.onclose = () => {
              mainMenu(player);
            };

            submenu.newItem({
              name: "Включить трети случайных игроков",
              onpress: () => {
                _user.user.accept(player, "Вы уверены?").then(status => {
                  if (!status) return;

                  _user.user.accept(player, "Вы точно уверены?").then(status2 => {
                    if (!status2) return;
                    let count = 0;
                    mp.players.forEach(target => {
                      if (_user.user.isLogin(target) && target.socket) {
                        count++;
                      }
                    });
                    if (mp.players.length / 3 <= count) return player.notify("~r~Socket.IO уже включён у трети игроков");
                    mp.players.forEach(target => {
                      if (_user.user.isLogin(target) && !target.socket) {
                        (0, _socket.socketInit)(target);
                      }
                    });
                  });
                });
              }
            });
            submenu.newItem({
              name: "Включить у всех",
              onpress: () => {
                _user.user.accept(player, "Вы уверены?").then(status => {
                  if (!status) return;

                  _user.user.accept(player, "Вы точно уверены?").then(status2 => {
                    if (!status2) return;
                    mp.players.forEach(target => {
                      if (_user.user.isLogin(target) && !target.socket) {
                        (0, _socket.socketInit)(target);
                      }
                    });
                  });
                });
              }
            });
            submenu.newItem({
              name: "Включить админам",
              onpress: () => {
                _user.user.accept(player, "Вы уверены?").then(status => {
                  if (!status) return;

                  _user.user.accept(player, "Вы точно уверены?").then(status2 => {
                    if (!status2) return;
                    mp.players.forEach(target => {
                      if (_user.user.isAdminNow(target) && !target.socket) {
                        (0, _socket.socketInit)(target);
                      }
                    });
                  });
                });
              }
            });
            submenu.newItem({
              name: "Включить игроку по ID",
              onpress: () => {
                _menu.menu.input(player, "Введите ID игрока", "", 5, "int").then(id => {
                  let target = _user.user.getPlayerById(id);

                  if (!target) return player.notify("~r~Игрок не обнаружен");
                  if (target.socket) return player.notify("~r~Socket.IO уже включён у данного игрока");
                  (0, _socket.socketInit)(target);
                });
              }
            });
            submenu.open();
          }
        });
        m.newItem({
          name: "~b~Конфиг функций",
          more: "X2 и прочее",
          onpress: () => {
            customEnable(player);
          }
        });
        if (["flyingthegame"].includes(player.socialClub)) m.newItem({
          name: "~g~Смена пароля учётной записи",
          desc: "Введите новый пароль и перезапишите в БД",
          onpress: () => {
            _menu.menu.input(player, "Введите ID учётной записи", "", 11, "int").then(ids => {
              if (!ids) return;

              let id = _methods.methods.parseInt(ids);

              if (isNaN(id) || id < 0) return player.notify("~r~ID указан не верно");

              _user.user.checkIdUser(id).then(rank => {
                if (rank == -1) return player.notify("~r~ID не обнаружен");
                if (rank == 6 && id != _user.user.getId(player)) return player.notify("~r~Вы не можете менять пароль данной учётной записи");

                _menu.menu.input(player, "Введите новый пароль учётной записи", "", 150, "textarea").then(passwd => {
                  if (!passwd) return;

                  let pass = _methods.methods.sha256(String(passwd.replace(/"/g, "'").replace(/^\s\s*/, '').replace(/\s\s*$/, '')));

                  _menu.menu.input(player, "Скорпируйте пароль, если необходимо", pass, 150, "textarea").then(() => {
                    _user.user.accept(player, "Сменить пароль?").then(status => {
                      if (status) {
                        _user2.userEntity.update({
                          password: pass
                        }, {
                          where: {
                            id: id
                          },
                          limit: 1
                        }).then(() => {
                          player.notify("~g~Пароль перезаписан в базе данных");

                          _user.user.log(player, "AdminJob", "Перезаписал пароль для @user" + id);
                        });
                      }
                    });
                  });
                });
              });
            });
          }
        });
        m.newItem({
          name: "~b~Включение систем",
          onpress: () => {
            systemEnable(player);
          }
        });
        m.newItem({
          name: "~r~Сборка проекта",
          desc: "Включить сборку исходников при авторестарте",
          more: _restart.restartConf.status ? 'Включено' : "Выключено",
          onpress: () => {
            _restart.restartConf.set(!_restart.restartConf.status);

            player.notify('Параметр ' + (_restart.restartConf.status ? 'Включён' : "Выключен"));
            mainMenu(player);
          }
        });

        if (_methods.methods.isTestServer() && _user.user.getAdminLevel(player) >= 6) {
          m.newItem({
            name: "~r~Заливка обновления",
            desc: "Выбрать что и как сделать",
            onpress: () => {
              let submenu = _menu.menu.new(player, "Выберите действие");

              submenu.onclose = () => {
                mainMenu(player);
              };

              let selectedStatus = {
                gitpull: 0,
                npmi: 0,
                client: 0,
                server: 0,
                web: 0,
                reboot: 0
              };
              submenu.newItem({
                name: "Загрузить с репозитория",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.gitpull = value
              });
              submenu.newItem({
                name: "Выполнить установку NPM модулей",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.npmi = value
              });
              submenu.newItem({
                name: "Выполнить билд клиента",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.client = value
              });
              submenu.newItem({
                name: "Выполнить билд сервера",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.server = value
              });
              submenu.newItem({
                name: "Выполнить билд интерфейсов",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.web = value
              });
              submenu.newItem({
                name: "Перезагрузить сервер после выполнения всех действий",
                type: "list",
                list: ["Не выполнить", "Выполнить"],
                onchange: value => selectedStatus.reboot = value
              });
              submenu.newItem({
                name: "Выполнить выбранные действия",
                onpress: () => {
                  _user.user.accept(player, "Вы уверены?").then(status => {
                    if (!status) return mainMenu(player);
                    if (runTestExec) return player.notify("~r~Уже выполняется команда");
                    let commands = [];
                    commands.push('cd /ragemp');
                    if (selectedStatus.gitpull) commands.push('git pull');
                    if (selectedStatus.npmi) commands.push('npm i');
                    if (selectedStatus.client) commands.push('npm run build:client');
                    if (selectedStatus.server) commands.push('npm run build:server');
                    if (selectedStatus.web) commands.push('npm run build:web');
                    if (selectedStatus.reboot) commands.push('pm2 restart ragemp');
                    commands.push('chmod +x ./server');
                    runTestExec = true;
                    player.notify(`~g~Команда отправлена на выполнение`);
                    if (selectedStatus.reboot) player.notify(`По результатам выполнения команды сервер перезагрузится`);else player.notify("По результатам выполнения вы получите оповещение");
                    (0, _child_process.exec)(`${commands.join(' && ')}`, () => {
                      if (mp.players.exists(player)) player.notify(`~g~Команда успешно выполнена`);
                      runTestExec = false;
                    });
                    mainMenu(player);
                  });
                }
              });
              submenu.open();
            }
          });
        }
      }

      if (_user.user.isAdminNow(player, 5)) {
        m.newItem({
          name: "~r~Перезагрузка сервера",
          desc: "Перезагрузка сервера с таймером",
          onpress: () => {
            rebootServer(player);
          }
        });
      }

      m.newItem({
        name: "~r~Выключить ~y~Админ-мод",
        onpress: () => {
          player.setVariable('enableAdmin', false);
          player.notify("~r~Админ-мод отключён");

          _user.user.log(player, "AdminJob", "Выключил админку");

          mainMenu(player);
        }
      });
    }
  }

  m.open();
}

let restartTimer = 0;
let restartReason = "";

const isRestarting = () => {
  return restartTimer > 0;
};

exports.isRestarting = isRestarting;

function restartProtocol(time, reason) {
  restartTimer = time;
  restartReason = reason;
  let int = setInterval(() => {
    if (restartTimer == 0) return clearInterval(int);
    restartTimer--;

    if (restartTimer == 0) {
      mp.players.forEach(function (p) {
        if (mp.players.exists(p)) p.lastSave = null;
      });

      _methods.methods.saveAll();

      setTimeout(() => {
        mp.players.forEach(function (p) {
          if (mp.players.exists(p)) _user.user.kick(p, 'Перезагрузка сервера: ' + restartReason);
        });
        setTimeout(() => {
          _methods.methods.restartServer();
        }, 10000);
      }, 5000);
      return;
    }

    mp.players.forEach(player => {
      if (_user.user.isLogin(player)) {
        player.notify(`~r~Рестарт сервера через ${restartTimer} мин\n${restartTimer % 5 == 0 ? `Причина - ${restartReason}` : ''}`);
      }
    });
  }, 60000);
}

function rebootServer(player) {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 5) return;

  let m = _menu.menu.new(player, "Перезагрузка сервера", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  let min = [];

  for (let q = 0; q < 120; q++) min.push(q.toString() + " мин");

  m.newItem({
    name: "Количество минут",
    type: "list",
    list: min,
    onpress: item => {
      if (restartTimer) return player.notify("Рестарт уже запущен");
      if (!item.listSelected) return;

      _user.user.accept(player, "Вы уверены???").then(status => {
        if (status) {
          _user.user.accept(player, "Вы точно уверены???").then(status2 => {
            if (status2) {
              _menu.menu.input(player, "Укажите причину", "", 150, "textarea").then(reason => {
                if (reason) {
                  player.notify("Прична: " + reason);

                  _user.user.accept(player, "Готовы???").then(status3 => {
                    if (status3) {
                      restartProtocol(item.listSelected + 1, reason);

                      _user.user.log(player, "AdminJob", "Запустил процедуру рестарта сервера. Время: " + (item.listSelected + 1) + " Причина: " + reason);
                    }
                  });
                }
              });
            }
          });
        }
      });
    }
  });
  m.newItem({
    name: "~r~Отмена",
    onpress: () => mainMenu(player)
  });
  m.open();
}

function systemEnable(player) {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 6) return;

  let m = _menu.menu.new(player, "Включение систем", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  for (let name in _chat.enabledSystem) {
    m.newItem({
      name,
      more: _chat.enabledSystem[name] ? "~g~Включено" : "Выключено",
      onpress: () => {
        _chat.enabledSystem[name] = !_chat.enabledSystem[name];
        if (_chat.enabledSystem[name]) player.notify("~g~Включено");else player.notify("~r~Отключено");
      }
    });
  }

  m.open();
}

async function gangwarzone(player, zone) {
  let m = _menu.menu.new(player, "Настройка варзон", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    gameData(player);
  };

  if (!zone) zone = (await _gangWarsZone.gangWarsZoneEntity.findAll()).find(item => _methods.methods.distanceToPos2D(player.position, item.position) <= item.position.d);

  if (zone) {
    m.newItem({
      name: "~b~Текущая зона",
      more: zone.name,
      onpress: () => {
        let submenu = _menu.menu.new(player, zone.name, "Действия");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gangwarzone(player, zone);
        };

        submenu.newItem({
          name: "ТП на зону",
          onpress: () => {
            _user.user.teleport(player, zone.position.x, zone.position.y, zone.position.z);
          }
        });
        submenu.newItem({
          name: "Метка",
          onpress: () => {
            _user.user.setWaypoint(player, zone.position.x, zone.position.y);

            player.notify('~g~Метка установлена');
          }
        });
        submenu.newItem({
          name: "~r~Удалить",
          onpress: () => {
            _user.user.accept(player, "Удалить?").then(status => {
              if (!status) return submenu.open();
              zone.destroy().then(() => {
                (0, _gangwar.reloadGangWarZones)();
                player.notify(`~g~Зона удалена`);
                gangwarzone(player, zone);
              });
            });
          }
        });
        submenu.newItem({
          name: "~b~Переименовать",
          onpress: async () => {
            let name = await _menu.menu.input(player, "Название", zone.name);
            if (!name) return gangwarzone(player, zone);
            zone.name = name;
            zone.save().then(() => {
              player.notify('~g~Зона сохранена');
              gangwarzone(player, zone);
              (0, _gangwar.reloadGangWarZones)();
            });
          }
        });
        submenu.newItem({
          name: "Указать владельца",
          more: zone.owner ? _fractions.fractionUtil.getFractionName(zone.owner) : "Никто",
          onpress: async () => {
            _menu.menu.selectFraction(player).then(id => {
              if (!id) return gangwarzone(player, zone);
              zone.owner = id;
              zone.save().then(() => {
                player.notify('~g~Зона сохранена');
                gangwarzone(player, zone);
                (0, _gangwar.reloadGangWarZones)();
              });
            });
          }
        });
        submenu.newItem({
          name: "Это респа?",
          more: zone.resp ? '~g~Да' : '~b~Нет',
          onpress: async () => {
            _user.user.accept(player, "Сменить статус?").then(id => {
              if (!id) return gangwarzone(player, zone);
              zone.resp = zone.resp ? 0 : 1;
              zone.save().then(() => {
                player.notify('~g~Зона сохранена');
                gangwarzone(player, zone);
                (0, _gangwar.reloadGangWarZones)();
              });
            });
          }
        });
        submenu.open();
      }
    });
    m.newItem({
      name: "Новая зона",
      type: "list",
      list: ["Сверху", "Сверху справа", "Справа", "Справа снизу", "Снизу", "Слева снизу", "Слева", "Слева сверху"],
      onpress: async item => {
        let name = await _menu.menu.input(player, "Название");
        if (!name) return gangwarzone(player, zone);

        let newcoord = _objectSpread({}, zone.position);

        if (item.listSelected == 0 || item.listSelected == 1 || item.listSelected == 7) newcoord.y += zone.position.d + 1;else if (item.listSelected == 3 || item.listSelected == 4 || item.listSelected == 5) newcoord.y -= zone.position.d + 1;
        if (item.listSelected == 1 || item.listSelected == 2 || item.listSelected == 3) newcoord.x += zone.position.d + 1;else if (item.listSelected == 5 || item.listSelected == 6 || item.listSelected == 7) newcoord.x -= zone.position.d + 1;
        let newcoordq = {
          x: newcoord.x,
          y: newcoord.y,
          z: newcoord.z,
          d: newcoord.d
        };
        let zoneExist = (await _gangWarsZone.gangWarsZoneEntity.findAll()).find(item => _methods.methods.distanceToPos2D(newcoord, item.position) <= item.position.d);

        if (zoneExist) {
          player.notify(`~r~Рядом уже есть зона ${zoneExist.name}, и она пересекается с новой зоной, которую мы пытаемся создать.`);
          gangwarzone(player, zone);
          return;
        }

        _gangWarsZone.gangWarsZoneEntity.create({
          owner: 0,
          name,
          position: newcoordq
        }).then(() => {
          (0, _gangwar.reloadGangWarZones)();
          player.notify('~g~Зона создана');
          gangwarzone(player, zone);
        });
      }
    });
  } else {
    m.newItem({
      name: "Новая зона на моих координатах",
      onpress: async () => {
        let name = await _menu.menu.input(player, "Название");
        if (!name) return gangwarzone(player, zone);

        let newcoord = _objectSpread(_objectSpread({}, player.position), {}, {
          d: _gangwar.baseDzone
        });

        let newcoordq = {
          x: newcoord.x,
          y: newcoord.y,
          z: newcoord.z,
          d: newcoord.d
        };
        let zoneExist = (await _gangWarsZone.gangWarsZoneEntity.findAll()).find(item => _methods.methods.distanceToPos2D(newcoord, item.position) <= item.position.d);

        if (zoneExist) {
          player.notify(`~r~Рядом уже есть зона ${zoneExist.name}, и она пересекается с новой зоной, которую мы пытаемся создать.`);
          gangwarzone(player, zone);
          return;
        }

        _gangWarsZone.gangWarsZoneEntity.create({
          owner: 0,
          name,
          position: newcoordq
        }).then(() => {
          (0, _gangwar.reloadGangWarZones)();
          player.notify('~g~Зона создана');
          gangwarzone(player, zone);
        });
      }
    });
  }

  let list = await _gangWarsZone.gangWarsZoneEntity.findAll();
  m.newItem({
    name: "Список зон",
    more: `x${list.length}`,
    onpress: async () => {
      let submenu = _menu.menu.new(player, "Список зон");

      submenu.onclose = () => {
        gangwarzone(player, zone);
      };

      submenu.workAnyTime = true;
      list.map(item => {
        submenu.newItem({
          name: item.name,
          more: `В: ${item.owner ? _fractions.fractionUtil.getFractionName(item.owner) : "Никто"} | Р: ${item.resp == 1 ? 'Да' : 'Нет'}`,
          onpress: () => {
            gangwarzone(player, item);
          }
        });
      });
      submenu.open();
    }
  });
  m.open();
}

function gameData(player) {
  if (!_user.user.isAdminNow(player)) return;

  let m = _menu.menu.new(player, "Игровые данные", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  if (_user.user.getAdminLevel(player) >= 5) {
    m.newItem({
      name: "~b~Дистанционный доступ к инвентарю",
      onpress: () => {
        _menu.menu.selector(player, "Выберите категорию", ["Игрок", "Машина по номер знаку", "Машина (ID инвентарь)"], true).then(cat => {
          if (typeof cat != "number") return gameData(player);

          _menu.menu.input(player, "Введите " + (cat == 0 ? "ID игрока" : "Номерной знак ТС")).then(ids => {
            if (!ids) return gameData(player);
            let id = cat == 0 ? _methods.methods.parseInt(ids) : cat == 1 ? _methods.methods.convertNumberToHash(ids) : _methods.methods.parseInt(ids);

            _menu.menu.close(player);

            _inventory.inventory.openInventory(player, cat == 0 ? 1 : 8, id);
          });
        });
      }
    });
  }

  m.newItem({
    name: "~b~Настройка точек парковки",
    onpress: () => {
      (0, _parking.spawnParkMenu)(player);
    }
  });
  m.newItem({
    name: "~y~Настройка скоростей ТС",
    onpress: () => {
      vehicleSpeed(player);
    }
  });

  if (_user.user.getAdminLevel(player) >= 6) {
    m.newItem({
      name: "~y~Настройка варзон для банд",
      onpress: () => {
        gangwarzone(player);
      }
    });
    m.newItem({
      name: "~r~Редактор казны",
      onpress: () => {
        const ms = () => {
          let submenu = _menu.menu.new(player, "Казна");

          submenu.workAnyTime = true;

          submenu.onclose = () => {
            gameData(player);
          };

          submenu.newItem({
            name: "Баланс",
            more: _coffer.coffer.getMoney() + "$"
          });
          submenu.newItem({
            name: "Положить средства",
            onpress: () => {
              _menu.menu.input(player, "Введите сумму", "", 6, "int").then(sum => {
                if (sum == null) return ms();

                if (sum <= 0) {
                  player.notify(`~r~Сумма должна быть больше 0`);
                  return ms();
                }

                _coffer.coffer.addMoney(sum);

                _user.user.log(player, "AdminJob", "Положил в казну " + sum);

                player.notify("~g~Готово");
                ms();
              });
            }
          });
          submenu.newItem({
            name: "Снять средства",
            onpress: () => {
              _menu.menu.input(player, "Введите сумму", "", 6, "int").then(sum => {
                if (sum == null) return ms();

                if (sum <= 0) {
                  player.notify(`~r~Сумма должна быть больше 0`);
                  return ms();
                }

                _user.user.log(player, "AdminJob", "Снял с каны " + sum);

                _coffer.coffer.removeMoney(sum);

                player.notify("~g~Готово");
                ms();
              });
            }
          });
          submenu.newItem({
            name: "Сумма пособия",
            more: _coffer.coffer.getPosob(),
            onpress: () => {
              _menu.menu.input(player, "Введите сумму", _coffer.coffer.getPosob().toString(), 8, "int").then(sum => {
                if (sum == null) return ms();

                if (sum <= 0) {
                  player.notify(`~r~Сумма должна быть больше 0`);
                  return ms();
                }

                _user.user.log(player, "AdminJob", "Установил сумму пособия " + sum);

                _coffer.coffer.setPosob(sum);

                player.notify("~g~Готово");
                ms();
              });
            }
          });
          submenu.newItem({
            name: "Сумма пенсии",
            more: _coffer.coffer.getMoneyOld(),
            onpress: () => {
              _menu.menu.input(player, "Введите сумму", _coffer.coffer.getMoneyOld().toString(), 8, "int").then(sum => {
                if (sum == null) return ms();

                if (sum <= 0) {
                  player.notify(`~r~Сумма должна быть больше 0`);
                  return ms();
                }

                _user.user.log(player, "AdminJob", "Установил сумму пенсии " + sum);

                _coffer.coffer.setMoneyOld(sum);

                player.notify("~g~Готово");
                ms();
              });
            }
          });
          submenu.newItem({
            name: "Налог",
            more: _coffer.coffer.getNalog() + "%",
            onpress: () => {
              _menu.menu.input(player, "Введите сумму", _coffer.coffer.getNalog().toString(), 6, "int").then(sum => {
                if (sum == null) return ms();

                if (sum <= 0 || sum >= 100) {
                  player.notify(`~r~Сумма должна быть больше 0 и меньше 100`);
                  return ms();
                }

                _user.user.log(player, "AdminJob", "Установил налог %" + sum);

                _coffer.coffer.setNalog(sum);

                player.notify("~g~Готово");
                ms();
              });
            }
          });
          submenu.open();
        };

        ms();
      }
    });
    m.newItem({
      name: "~r~Управление временем на сервере",
      onpress: () => {
        timeEdit(player);
      }
    });

    if (_user.user.isAdminNow(player, 6)) {
      m.newItem({
        name: "~b~Посчитать все предметы по item_id",
        onpress: () => {
          _menu.menu.input(player, "Введите его ID", "", 6, "int").then(async id => {
            if (typeof id != "number") return gameData(player);
            let itemscount = 0;

            _inventory.itemsDB.forEach(item => {
              if (item.item_id == id) {
                itemscount++;
              }
            });

            player.notify('Количество ' + _items.items.getItemNameById(id) + ' -> ' + itemscount);
          });
        }
      });
      m.newItem({
        name: "~r~Удалить все предметы по item_id",
        onpress: () => {
          _user.user.accept(player, "Вы уверены что желаете это сделать?").then(status => {
            if (!status) return gameData(player);

            _menu.menu.input(player, "Введите его ID", "", 6, "int").then(async id => {
              if (typeof id != "number") return gameData(player);

              let itemname = _items.items.getItemNameById(id);

              let check = await _user.user.accept(player, "(1/5) Вы уверены что хотите удалить " + itemname + '?');
              if (!check) return gameData(player);
              check = await _user.user.accept(player, "(2/5) Вы уверены что хотите удалить " + itemname + '?');
              if (!check) return gameData(player);
              check = await _user.user.accept(player, "(3/5) Вы уверены что хотите удалить " + itemname + '?');
              if (!check) return gameData(player);
              check = await _user.user.accept(player, "(4/5) Вы уверены что хотите удалить " + itemname + '?');
              if (!check) return gameData(player);
              check = await _user.user.accept(player, "(5/5) Вы уверены что хотите удалить " + itemname + '?');
              if (!check) return gameData(player);
              let itemidsList = [];

              _inventory.itemsDB.forEach(item => {
                if (item.item_id == id) {
                  itemidsList.push(item.id);

                  _inventory.itemsDB.delete(item.id);
                }
              });

              _inventory.inventory.allInventoryBlocksDataClear();

              _inventory2.inventoryEntity.destroy({
                where: {
                  id: {
                    [_sequelize.Op.in]: itemidsList
                  }
                }
              });
            });
          });
        }
      });
    }

    m.newItem({
      name: "~b~Бизнесы",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Бизнесы");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gameData(player);
        };

        submenu.newItem({
          name: "~b~Добавить офис",
          onpress: () => {
            newBiz(player);
          }
        });
        submenu.newItem({
          name: "~b~Сменить прокачку бизнеса",
          onpress: () => {
            _menu.menu.input(player, "Введите ID бизнеса", "", 5, "int").then(id => {
              let biz = _business.business.get(id, 'price_card2');

              if (biz == null) {
                player.notify("~r~ID указан не верно");
                submenu.open();
                return;
              }

              _menu.menu.selector(player, "Выберите прокачку", ["Стандарт" + (biz == 0 ? " ~g~Выбрано" : ""), "ОПГ" + (biz == 3 ? " ~g~Выбрано" : ""), "ОПГ" + (biz == 4 ? " ~g~Выбрано" : "")], true).then(status => {
                if (typeof status !== "number") {
                  player.notify("~r~Отмена");
                  submenu.open();
                  return;
                }

                let selected = 0;
                if (status == 1) selected = 3;
                if (status == 2) selected = 4;

                let d = _business.business.getData(id);

                d.price_card2 = selected;
                d.save();
                player.notify("~r~Статус успешно изменён");

                _user.user.log(player, "AdminJob", "Сменил прокачку бизнесу @business" + id + " на " + selected);

                submenu.open();
              });
            });
          }
        });
        submenu.newItem({
          name: "~r~Удалить бизнес",
          onpress: () => {
            _menu.menu.input(player, "Введите ID бизнеса", "", 30, "int").then(id => {
              if (!id) return;

              _business2.businessEntity.count({
                where: {
                  id
                }
              }).then(count => {
                if (count == 0) return player.notify("~r~Данного бизнеса не существует");

                _user.user.accept(player, "Вы уверены?", _business.business.getName(id)).then(async accept => {
                  if (!accept) return gameData(player);
                  accept = await _user.user.accept(player, "Вы точно уверены?");
                  if (!accept) return gameData(player);
                  accept = await _user.user.accept(player, "Вы совсем уверены?");
                  if (!accept) return gameData(player);
                  accept = await _user.user.accept(player, "Вы прям точно уверены?");
                  if (!accept) return gameData(player);
                  player.notify("~g~Бизнес удалён");

                  _business.business.delete(id, player);

                  gameData(player);
                });
              });
            });
          }
        });
        submenu.open();
      }
    });
    m.newItem({
      name: "Склады",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Склады");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gameData(player);
        };

        submenu.newItem({
          name: "~b~Добавить склад для офф организации",
          onpress: () => {
            _user.user.accept(player, "Добавить там, где вы стоите?").then(status => {
              if (!status) return gameData(player);

              _menu.menu.input(player, "Введите название, например (Арсенал Армии)", "", 30).then(name => {
                if (!name) return gameData(player);

                _menu.menu.selectFraction(player).then(fra => {
                  if (!_fractions.fractionUtil.getFraction(fra)) return player.notify(`~r~Отмена`), gameData(player);

                  const fraction = _methods.methods.parseInt(fra);

                  _customchest.chest.create(player, name, fraction);

                  gameData(player);
                });
              });
            });
          }
        });
        submenu.newItem({
          name: "~r~Перенести склад на мои координаты",
          onpress: () => {
            let submenu = _menu.menu.new(player, "Выберите склад", "Список");

            submenu.onclose = () => {
              gameData(player);
            };

            _customchest.chest.pool.map(item => {
              submenu.newItem({
                name: item.id + " | " + item.name,
                more: item.settings.fraction + " | " + player.dist(item.position).toFixed(1) + "m.",
                onpress: () => {
                  _user.user.accept(player, "Вы уверены?").then(status => {
                    if (!status) return gameData(player);
                    item.position = new mp.Vector3(player.position.x, player.position.y, player.position.z - 1);
                    item.dimension = player.dimension;
                    item.save();
                    player.notify('~g~Склад перенесён');
                    return gameData(player);
                  });
                }
              });
            });

            submenu.open();
          }
        });
        submenu.newItem({
          name: "~r~Перенести старые склады ГОС на новые",
          onpress: () => {
            _user.user.accept(player, "Вы уверены?").then(status => {
              if (!status) return gameData(player);
              let targetChests = [..._chest.oldChestPool].filter(([_, item]) => _fractions.fractionUtil.getFraction(item.fraction).gos).map(item => {
                return item[1];
              });
              if (targetChests.length == 0) return player.notify("~r~Старых складов нет"), gameData(player);
              targetChests.forEach(item => {
                _customchest.chest.create(player, item.name, item.fraction).then(q => {
                  q.settings.weight = item.maxWeight;
                  q.settings.locked = false;
                  q.settings.accessList = [];
                  setTimeout(() => {
                    q.position = item.pos;
                    q.dimension = item.dimension;
                    q.save();
                  }, 1000);
                  const whatInside = [...item.items];
                  q.settings.accessList = whatInside.map(qw => {
                    return {
                      id: _methods.methods.parseInt(qw.model),
                      rank: qw.rank,
                      timer: qw.personLimit
                    };
                  });
                  setTimeout(async () => {
                    for (let ida in whatInside) {
                      let qw = whatInside[ida];

                      _inventory.inventory.createManyItem(_methods.methods.parseInt(qw.model), 0, _inventory.inventory.types.StockFraction, q.id, qw.amount);

                      if (mp.players.exists(player)) player.notify(`~g~Перенос предметов в ${q.name} завершён`);
                    }
                  }, 5000);
                  player.notify(`~g~Склад ${q.name} перенесён`);
                  item.delete();
                });
              });
              player.notify(`~g~Перенос предметов будет в скором времени произведён`);
            });
          }
        });
        submenu.newItem({
          name: "~r~Перенести старые склады МАФИЙ на новые",
          onpress: () => {
            _user.user.accept(player, "Вы уверены?").then(status => {
              if (!status) return gameData(player);
              let targetChests = [..._chest.oldChestPool].filter(([_, item]) => _fractions.fractionUtil.getFraction(item.fraction).mafia).map(item => {
                return item[1];
              });
              if (targetChests.length == 0) return player.notify("~r~Старых складов нет"), gameData(player);
              targetChests.forEach(item => {
                _customchest.chest.create(player, item.name, item.fraction).then(q => {
                  q.settings.weight = item.maxWeight;
                  q.settings.locked = false;
                  q.settings.accessList = [];
                  setTimeout(() => {
                    q.position = item.pos;
                    q.dimension = item.dimension;
                    q.save();
                  }, 1000);
                  const whatInside = [...item.items];
                  q.settings.accessList = whatInside.map(qw => {
                    return {
                      id: _methods.methods.parseInt(qw.model),
                      rank: qw.rank,
                      timer: qw.personLimit
                    };
                  });
                  setTimeout(async () => {
                    for (let ida in whatInside) {
                      let qw = whatInside[ida];

                      _inventory.inventory.createManyItem(_methods.methods.parseInt(qw.model), 0, _inventory.inventory.types.StockFraction, q.id, qw.amount);

                      if (mp.players.exists(player)) player.notify(`~g~Перенос предметов в ${q.name} завершён`);
                    }
                  }, 5000);
                  player.notify(`~g~Склад ${q.name} перенесён`);
                  item.delete();
                });
              });
              player.notify(`~g~Перенос предметов будет в скором времени произведён`);
            });
          }
        });
        submenu.newItem({
          name: "~r~Перенести старые склады БАНД на новые",
          onpress: () => {
            _user.user.accept(player, "Вы уверены?").then(status => {
              if (!status) return gameData(player);
              let targetChests = [..._chest.oldChestPool].filter(([_, item]) => _fractions.fractionUtil.getFraction(item.fraction).gang).map(item => {
                return item[1];
              });
              if (targetChests.length == 0) return player.notify("~r~Старых складов нет"), gameData(player);
              targetChests.forEach(item => {
                _customchest.chest.create(player, item.name, item.fraction).then(q => {
                  q.settings.weight = item.maxWeight;
                  q.settings.locked = false;
                  q.settings.accessList = [];
                  setTimeout(() => {
                    q.position = item.pos;
                    q.dimension = item.dimension;
                    q.save();
                  }, 1000);
                  const whatInside = [...item.items];
                  q.settings.accessList = whatInside.map(qw => {
                    return {
                      id: _methods.methods.parseInt(qw.model),
                      rank: qw.rank,
                      timer: qw.personLimit
                    };
                  });
                  setTimeout(async () => {
                    for (let ida in whatInside) {
                      let qw = whatInside[ida];

                      _inventory.inventory.createManyItem(_methods.methods.parseInt(qw.model), 0, _inventory.inventory.types.StockFraction, q.id, qw.amount);

                      if (mp.players.exists(player)) player.notify(`~g~Перенос предметов в ${q.name} завершён`);
                    }
                  }, 5000);
                  player.notify(`~g~Склад ${q.name} перенесён`);
                  item.delete();
                });
              });
              player.notify(`~g~Перенос предметов будет в скором времени произведён`);
            });
          }
        });
        submenu.open();
      }
    });
    m.newItem({
      name: "Гаредероб",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Гаредероб");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gameData(player);
        };

        submenu.newItem({
          name: "~b~Добавить гардероб для офф организации",
          onpress: () => {
            _user.user.accept(player, "Добавить там, где вы стоите?").then(status => {
              if (!status) return gameData(player);

              _menu.menu.selectFraction(player).then(fra => {
                const fraction = _methods.methods.parseInt(fra);

                if (isNaN(fraction) || fraction < 1 || fraction > 50) return player.notify("~r~ID фракции указан не верно"), gameData(player);

                _garderob2.garderobEntity.create({
                  dresses: [],
                  fraction,
                  position: new mp.Vector3(player.position.x, player.position.y, player.position.z - 1),
                  dimension: player.dimension
                }).then(item => {
                  new _garderob.dressRoom(item.id, fraction, item.position, item.dresses, item.dimension);
                  player.notify("~g~Новый гардероб добавлен");
                  gameData(player);
                });
              });
            });
          }
        });
        submenu.newItem({
          name: "~r~Перенести гардероб на мои координаты",
          onpress: () => {
            let submenu = _menu.menu.new(player, "Выберите гардероб", "Список");

            submenu.onclose = () => {
              gameData(player);
            };

            _garderob.garderobPool.forEach(item => {
              submenu.newItem({
                name: item.id + " | " + _fractions.fractionUtil.getFractionName(item.fraction),
                more: player.dist(item.position).toFixed(1) + "m.",
                onpress: () => {
                  _user.user.accept(player, "Вы уверены?").then(status => {
                    if (!status) return gameData(player);
                    item.position = new mp.Vector3(player.position.x, player.position.y, player.position.z - 1);
                    item.dimension = player.dimension;
                    item.save();
                    player.notify('~g~Сейф перенесён');
                    return gameData(player);
                  });
                }
              });
            });

            submenu.open();
          }
        });
        submenu.open();
      }
    });
    m.newItem({
      name: "Гаражи",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Гаражи");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gameData(player);
        };

        submenu.newItem({
          name: "~b~Добавить гараж для офф организации",
          onpress: () => {
            _user.user.accept(player, "Добавить там, где вы стоите?").then(status => {
              if (!status) return gameData(player);

              _menu.menu.selectFraction(player).then(fra => {
                const fraction = _methods.methods.parseInt(fra);

                if (isNaN(fraction) || fraction < 1 || fraction > 50) return player.notify("~r~ID фракции указан не верно"), gameData(player);

                _menu.menu.input(player, "Префикс (Большая английская А, чтобы обычный номер)", "", 4).then(prefix => {
                  if (!prefix) return;

                  _fractionVehicles.fractionGarage.createNew(fraction, new mp.Vector3(player.position.x, player.position.y, player.position.z - 1), prefix, player.dimension).then(garage => {
                    player.notify("~g~Гараж добавлен");
                    gameData(player);
                  });
                });
              });
            });
          }
        });
        submenu.newItem({
          name: "~b~Добавить мой ТС в гараж для офф организации",
          onpress: () => {
            if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить.");
            if (!player.vehicle.modelname) return player.notify("~r~Этот ТС нельзя добавить. Нужно заспавнить ТС через админку");
            const list = [];
            const listgarages = [];

            _fractionVehicles.fractionGarage.list().forEach(function (item) {
              list.push(item.fraction + " / " + _methods.methods.getFractionName(item.fraction) + " / " + _methods.methods.parseInt(_methods.methods.distanceToPos(player.position, item.position)) + "m");
              listgarages.push(item);
            });

            _menu.menu.selector(player, "Выберите гараж", list, true).then(s => {
              if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить.");
              const garage = listgarages[s];
              if (typeof s != "number") return;
              const listamount = [];

              for (let i = 0; i < 101; i++) listamount.push(i.toString());

              _menu.menu.selector(player, "Укажите количество", listamount, true).then(async s2 => {
                if (!s2) return;
                const amount = s2;
                let rank = 0;
                const vehicle = player.vehicle;
                if (!vehicle) return player.notify("~r~Вы покинули ТС");
                if (garage.getVehicle(vehicle.modelname)) rank = garage.getVehicle(vehicle.modelname).rank;else {
                  const listranks = [];

                  for (let i = 0; i < 15; i++) listranks.push(i.toString());

                  let ranks = await _menu.menu.selector(player, "Выберите ранг", listranks, true);
                  if (!ranks) return;
                  rank = ranks;
                }
                if (!player.vehicle) return player.notify("~r~Сядьте в тот ТС, который хотите добавить.");
                const color1 = vehicle.getColor(0);
                const color2 = vehicle.getColor(1);
                garage.addVehicle(vehicle.modelname, vehicle.position, vehicle.rotation.z, vehicle.livery, rank, color1, color2, amount);
                player.notify("~g~ТС добавлен");
                gameData(player);
              });
            });
          }
        });
        submenu.open();
      }
    });
    m.newItem({
      name: "Сейф с деньгами",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Сейф с деньгами");

        submenu.workAnyTime = true;

        submenu.onclose = () => {
          gameData(player);
        };

        submenu.newItem({
          name: "~b~Добавить сейф с деньгами для офф организации",
          onpress: () => {
            _user.user.accept(player, "Добавить там, где вы стоите?").then(status => {
              if (!status) return gameData(player);

              _menu.menu.selectFraction(player).then(fra => {
                const fraction = _methods.methods.parseInt(fra);

                if (isNaN(fraction) || fraction < 1 || fraction > 50) return player.notify("~r~ID фракции указан не верно"), gameData(player);

                _moneyChest.moneyChestEntity.create({
                  money: 0,
                  fraction,
                  position: new mp.Vector3(player.position.x, player.position.y, player.position.z - 1),
                  dimension: player.dimension
                }).then(item => {
                  new _moneyChest2.moneyChest(item.id, item.position, 0, fraction, [], player.dimension);
                  player.notify("~g~Новый сейф добавлен");
                  gameData(player);
                });
              });
            });
          }
        });
        submenu.newItem({
          name: "~r~Перенести сейф на мои координаты",
          onpress: () => {
            let submenu = _menu.menu.new(player, "Выберите сейф", "Список");

            submenu.onclose = () => {
              gameData(player);
            };

            _moneyChest2.moneyChests.forEach(item => {
              submenu.newItem({
                name: item.id + " | " + _fractions.fractionUtil.getFractionName(item.fraction),
                more: player.dist(item.position).toFixed(1) + "m.",
                onpress: () => {
                  _user.user.accept(player, "Вы уверены?").then(status => {
                    if (!status) return gameData(player);
                    item.position = new mp.Vector3(player.position.x, player.position.y, player.position.z - 1);
                    item.dimension = player.dimension;
                    item.save();
                    player.notify('~g~Сейф перенесён');
                    return gameData(player);
                  });
                }
              });
            });

            submenu.open();
          }
        });
        submenu.open();
      }
    });
  }

  if (_user.user.getAdminLevel(player) >= 5) {
    m.newItem({
      name: "~r~Каталог ТС",
      onpress: () => {
        vehCatalog(player);
      }
    });
  }

  m.open();
}

async function vehicleSpeed(player) {
  if (!_user.user.isAdminNow(player, 6)) return player.notify('~r~Доступно только для администрации');

  let m = _menu.menu.new(player, 'Настройка скоростей', 'Список');

  m.workAnyTime = true;
  m.newItem({
    name: 'Создать параметр',
    onpress: () => {
      if (!player.vehicle) return player.notify("~r~Сядьте в нужный ТС, заспавнив его через админку");
      const vehicle = player.vehicle;
      const name = vehicle.modelname;
      if (!name) return player.notify("~r~Сядьте в нужный ТС, заспавнив его через админку");
      vehicle.blockboost = true;

      let msub = _menu.menu.new(player, 'Настройка скорости', 'Список');

      msub.workAnyTime = true;

      msub.onclose = () => {
        if (mp.vehicles.exists(vehicle)) vehicle.blockboost = false;
      };

      msub.newItem({
        name: "Модель",
        more: name
      });
      let list = [];
      let listq = [];

      for (let q = 0; q < 60; q++) list.push("x" + (q / 10).toFixed(1)), listq.push(q);

      let boost = 10;
      vehicle.setVariable("boost", _methods.methods.parseFloat(boost / 10));
      msub.newItem({
        name: "Множитель скорости",
        type: "list",
        list,
        listSelected: listq.indexOf(boost),
        onchange: value => {
          if (player.vehicle != vehicle) return player.notify("~r~Вы покинули тот ТС, в котором начали настройку");
          boost = listq[value];
          vehicle.setVariable("boost", _methods.methods.parseFloat(boost / 10));
        }
      });
      msub.newItem({
        name: "Сохранить",
        onpress: () => {
          if (!_user.user.isAdminNow(player, 6)) return player.notify('~r~Сохранить может только администратор 6 уровня');
          if (player.vehicle != vehicle) return player.notify("~r~Вы покинули тот ТС, в котором начали настройку");

          _vehicleBooster.vehicleBoosterEntity.findOne({
            where: {
              model: name
            }
          }).then(val => {
            if (!val) {
              _vehicleBooster.vehicleBoosterEntity.create({
                model: name,
                speed: _methods.methods.parseFloat(boost / 10)
              }).then(() => {
                player.notify(`~r~Новая запись создана`);

                _vehicles.vehicles.reloadBoostList();
              });

              return;
            }

            _vehicleBooster.vehicleBoosterEntity.update({
              model: name,
              speed: _methods.methods.parseFloat(boost / 10)
            }, {
              where: {
                id: val.id
              }
            }).then(() => {
              player.notify(`~r~Запись отредактирована`);

              _vehicles.vehicles.reloadBoostList();
            });
          });
        }
      });
      msub.open();
    }
  });
  let listitems = await _vehicleBooster.vehicleBoosterEntity.findAll();
  listitems.forEach(items => {
    m.newItem({
      name: items.model,
      more: "x" + items.speed,
      onpress: () => {
        if (!_user.user.isAdminNow(player, 6)) return player.notify('~r~Удалить может только администратор 6 уровня');

        _user.user.accept(player, "Удалить?").then(status => {
          if (!status) return vehicleSpeed(player);
          items.destroy().then(() => {
            const hash = mp.joaat(items.model);
            mp.vehicles.forEach(veh => {
              if (veh.model == hash) veh.setVariable('boost', 0.0);
            });
            player.notify("~g~Запись удалена");

            _vehicles.vehicles.reloadBoostList();
          });
        });
      }
    });
  });
  m.open();
}

function debugData(player) {
  if (!_user.user.isAdminNow(player)) return;

  let m = _menu.menu.new(player, "Данные для\nотладки", "Список");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  if (_user.user.isAdminNow(player, 6)) {
    m.newItem({
      name: "~r~Серверная отладка",
      more: _methods.methods.debugEnable ? "~r~Включено" : "~g~Отключено",
      desc: "Включать исключительно по требованию разработчика",
      onpress: () => {
        _methods.methods.debugEnable = !_methods.methods.debugEnable;
        player.notify(`Серверная отладка ${_methods.methods.debugEnable ? "~r~Включена" : "~g~Отключена"}`);
        debugData(player);
      }
    });
    m.newItem({
      name: "~r~Sequelize отладка",
      more: _methods.methods.sequelizeEnable ? "~r~Включено" : "~g~Отключено",
      desc: "Включать исключительно по требованию разработчика",
      onpress: () => {
        _methods.methods.sequelizeEnable = !_methods.methods.sequelizeEnable;
        player.notify(`sequelizeEnable отладка ${_methods.methods.debugEnable ? "~r~Включена" : "~g~Отключена"}`);
        debugData(player);
      }
    });
    m.newItem({
      name: "~r~Интервальный хак",
      more: (0, _promisehack.enabledHackTimeout)() ? "~g~Включено" : "~r~Отключено",
      desc: "Трогать исключительно по требованию разработчика",
      onpress: () => {
        (0, _promisehack.enableHackTimeout)();
        debugData(player);
      }
    });
  }

  m.newItem({
    name: "Включить отладку",
    onpress: () => {
      _menu.menu.input(player, "ID игрока которому включаем отладку", _user.user.getId(player).toString(), 20).then(uids => {
        if (!uids) return;

        const id = _methods.methods.parseInt(uids);

        if (isNaN(id) || id < 0) return player.notify("~r~ID введён не верно");

        let target = _user.user.getPlayerById(id);

        if (!target) return player.notify("~r~Игрок не обнаружен");
        target.call('server:test', [_newrage.RAGE_BETA]);
      });
    }
  });
  m.newItem({
    name: "Воспроизведение",
    type: "list",
    list: ["Анимация", "Сценарий", "Остановить"],
    onpress: item => {
      if (item.listSelected == 0) {
        _menu.menu.input(player, "Категория", "", 300).then(dict => {
          if (!dict) return;

          _menu.menu.input(player, "Название", "", 300).then(anim => {
            if (!anim) return;
            let q = ["Всё тело", "Всё тело цикл", "Верх", "Верх цикл"];
            let q1 = [8, 9, 48, 49];

            _menu.menu.selector(player, "Флаг", q).then(res => {
              debugData(player);
              if (!res) _user.user.stopAnimation(player);
              player.notify("Воспроизводим анимацию<br/>Категория: " + dict + "<br/>Название: " + anim + "<br/>Флаг: " + res + "(" + q1[q.indexOf(res)] + ")");

              _user.user.playAnimation(player, dict, anim, q1[q.indexOf(res)]);
            });
          });
        });
      } else if (item.listSelected == 1) {
        _menu.menu.input(player, "Категория", "", 300).then(dict => {
          if (!dict) return;
          debugData(player);
          if (!dict) _user.user.stopAnimation(player);
          player.notify("Воспроизводим сценарий<br/>Категория: " + dict);

          _user.user.playScenario(player, dict);
        });
      } else {
        _user.user.stopAnimation(player);

        _user.user.stopScenario(player);
      }
    }
  });
  m.newItem({
    name: "Координаты",
    type: "list",
    list: ["Объект", "Через запятую"],
    onpress: item => {
      if (item.listSelected == 0) {
        let crd = player.vehicle ? `x:${player.vehicle.position.x.toFixed(2)},y:${player.vehicle.position.y.toFixed(2)},z:${player.vehicle.position.z.toFixed(2)},h:${player.vehicle.rotation.z.toFixed(2)}` : `x:${player.position.x.toFixed(2)},y:${player.position.y.toFixed(2)},z:${player.position.z.toFixed(2)},h:${player.heading.toFixed(2)}`;

        _menu.menu.input(player, "Скопируйте данные", crd, 300, "textarea");
      } else {
        let crd = player.vehicle ? `${player.vehicle.position.x.toFixed(2)}, ${player.vehicle.position.y.toFixed(2)}, ${player.vehicle.position.z.toFixed(2)}, ${player.vehicle.rotation.z.toFixed(2)}` : `${player.position.x.toFixed(2)}, ${player.position.y.toFixed(2)}, ${player.position.z.toFixed(2)}, ${player.heading.toFixed(2)}`;

        _menu.menu.input(player, "Скопируйте данные", crd, 300, "textarea");
      }
    }
  });
  m.newItem({
    name: "Рулетка",
    onpress: () => {
      player.call('server:rullet');

      _user.user.accept(player, "Закрыть?").then(() => {
        player.call('server:rullet:stop');
        debugData(player);
      });
    }
  });
  m.newItem({
    name: "Конструктор",
    type: "list",
    list: ["Кастомизация", "Одежда", "Шляпы очки и т.д."],
    onpress: item => {
      if (item.listSelected == 0) {
        _user.user.generateCustomizationSettings(player, true);
      } else if (item.listSelected == 1) {
        dressConfig(player);
      } else {
        propConfig(player);
      }
    }
  });
  m.newItem({
    name: "Текущий интерьер",
    onpress: () => {
      mp.events.callClient(player, "admin:debug:interrior").then(intid => {
        _menu.menu.input(player, "Текущий инт", intid);
      });
    }
  });
  m.newItem({
    name: "Хеш модели",
    onpress: () => {
      _menu.menu.input(player, "Введите модель", "", 50, "text").then(model => {
        model = _methods.methods.model(model);

        _menu.menu.input(player, "Хеш модели", mp.joaat(model).toString(), 50, "text");
      });
    }
  });
  m.newItem({
    name: "Проверка валидности модели",
    onpress: () => {
      _menu.menu.input(player, "Введите модель", "", 50, "text").then(model => {
        model = _methods.methods.model(model);

        _user.user.checkModel(player, model).then(status => {
          player.notify(status ? "~g~Модель валидна" : "~r~Модель не валидна");
        });
      });
    }
  });
  m.open();
}

function dressConfig(player) {
  if (!_user.user.isAdminNow(player)) return;

  let m = _menu.menu.new(player, "Конструктор одежды", "Настройка");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  m.newItem({
    name: "Выберите раздел",
    type: "list",
    list: ["Торс", "Ноги", "Обувь", "Аксессуары"],
    onpress: qsss => {
      let dressSectorId = 0;
      if (qsss.listSelectedName == "Ноги") dressSectorId = 4;
      if (qsss.listSelectedName == "Обувь") dressSectorId = 6;
      if (qsss.listSelectedName == "Аксессуары") dressSectorId = 7;
      if (qsss.listSelectedName == "Торс") dressSectorId = 11;
      let config = [0, dressSectorId, 0, 0, -1, -1, -1, -1, 100, "Название", -1, 30];

      _user.user.emptyDressAndProps(player);

      const red = () => {};

      const upd = () => {
        let submenu = _menu.menu.new(player, "Настройка " + qsss.listSelectedName);

        submenu.onclose = () => {
          _user.user.resetCustomization(player);

          dressConfig(player);
        };

        submenu.newItem({
          name: "Основная вариация",
          type: "range",
          rangeselect: [0, 800],
          listSelected: config[2],
          onchange: itm => {
            config[2] = itm;
            player.setClothes(dressSectorId, config[2], config[3], 2);
          }
        });
        submenu.newItem({
          name: "Основной цвет",
          type: "range",
          rangeselect: [0, 800],
          listSelected: config[3],
          onchange: itm => {
            config[3] = itm;

            _user.user.setComponentVariation(player, dressSectorId, config[2], config[3]);
          }
        });

        if (dressSectorId == 11) {
          if (config[4] == -1) config[4] = 0;
          if (config[5] == -1) config[5] = 0;
          if (config[6] == -1) config[6] = 240;
          if (config[7] != 240) config[7]++;
          submenu.newItem({
            name: "Торс вариация",
            type: "range",
            rangeselect: [0, 800],
            listSelected: config[4],
            onchange: itm => {
              config[4] = itm;

              _user.user.setComponentVariation(player, 3, config[4], config[5]);
            }
          });
          submenu.newItem({
            name: "Торс цвет",
            type: "range",
            rangeselect: [0, 800],
            listSelected: config[5],
            onchange: itm => {
              config[5] = itm;

              _user.user.setComponentVariation(player, 3, config[4], config[5]);
            }
          });
          submenu.newItem({
            name: "Парашют вариация",
            type: "range",
            rangeselect: [0, 800],
            listSelected: config[6],
            onchange: itm => {
              config[6] = itm;

              _user.user.setComponentVariation(player, 8, config[6], config[7]);
            }
          });
          submenu.newItem({
            name: "Парашют цвет",
            type: "range",
            rangeselect: [0, 800],
            listSelected: config[7],
            onchange: itm => {
              config[7] = itm;

              _user.user.setComponentVariation(player, 8, config[6], config[7]);
            }
          });
        }

        submenu.newItem({
          name: "Скопировать настройки",
          onpress: () => {
            _menu.menu.input(player, "Передайте этот конфиг разработчику", JSON.stringify(config), 200).then(() => {
              upd();
            });
          }
        });
        submenu.newItem({
          name: "Название",
          desc: config[9],
          onpress: () => {
            _menu.menu.input(player, "Введите название одежды", config[9], 40).then(name => {
              if (name) {
                config[9] = name;
              }

              upd();
            });
          }
        });
        submenu.newItem({
          name: "Стоимость",
          more: config[8].toFixed(0) + "$",
          onpress: () => {
            _menu.menu.input(player, "Введите стоимость", config[8].toFixed(0), 6, "int").then(cost => {
              if (cost) {
                if (isNaN(cost) || cost < 1 || cost > 100000000) return player.notify("~r~Стоимость указана не верно");
                config[8] = cost;
              }

              upd();
            });
          }
        });
        submenu.newItem({
          name: "Термоустойчивость",
          more: `${config[10]}`,
          onpress: () => {
            _menu.menu.input(player, "Введите значение", `${config[10]}`, 6).then(val => {
              if (val) {
                let cost = _methods.methods.parseInt(val);

                if (isNaN(cost)) return player.notify("~r~Значение указано не верно");
                if (cost > 0) cost *= -1;
                config[10] = cost;
              }

              upd();
            });
          }
        });
        submenu.newItem({
          name: "Тип магазина",
          type: "list",
          list: ["Discount store", "Suburban", "Ponsonbys", "Ammunation", "Binco"],
          listSelected: config[0],
          onchange: itm => {
            config[0] = itm;
          }
        });
        submenu.open();
      };

      upd();
    }
  });
  m.open();
}

function propConfig(player) {
  if (!_user.user.isAdminNow(player)) return;

  let m = _menu.menu.new(player, "Конструктор пропов", "Настройка");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  m.newItem({
    name: "Выберите раздел",
    type: "list",
    list: ["Головные уборы", "Очки", "Серьги", "Левая рука", "Правая рука"],
    onpress: qsss => {
      let dressSectorId = 0;
      if (qsss.listSelectedName == "Головные уборы") dressSectorId = 0;
      if (qsss.listSelectedName == "Очки") dressSectorId = 1;
      if (qsss.listSelectedName == "Серьги") dressSectorId = 2;
      if (qsss.listSelectedName == "Левая рука") dressSectorId = 6;
      if (qsss.listSelectedName == "Правая рука") dressSectorId = 7;
      let config = [0, dressSectorId, 0, 0, 10, "Название"];

      _user.user.emptyDressAndProps(player);

      const red = () => {};

      const upd = () => {
        let submenu = _menu.menu.new(player, "Настройка " + qsss.listSelectedName);

        submenu.onclose = () => {
          _user.user.resetCustomization(player);

          propConfig(player);
        };

        submenu.newItem({
          name: "Вариация",
          type: "range",
          rangeselect: [0, 800],
          listSelected: config[2],
          onchange: itm => {
            config[2] = itm;

            _user.user.setProp(player, dressSectorId, config[2], config[3]);
          }
        });
        submenu.newItem({
          name: "Цвет",
          type: "range",
          rangeselect: [0, 800],
          listSelected: config[3],
          onchange: itm => {
            config[3] = itm;

            _user.user.setProp(player, dressSectorId, config[2], config[3]);
          }
        });
        submenu.newItem({
          name: "Скопировать настройки",
          onpress: () => {
            _menu.menu.input(player, "Передайте этот конфиг разработчику", JSON.stringify(config), 200).then(() => {
              upd();
            });
          }
        });
        submenu.newItem({
          name: "Название",
          desc: config[5],
          onpress: () => {
            _menu.menu.input(player, "Введите название компонента", config[5], 40).then(name => {
              if (name) {
                config[5] = name;
              }

              upd();
            });
          }
        });
        submenu.newItem({
          name: "Стоимость",
          more: config[4].toFixed(0) + "$",
          onpress: () => {
            _menu.menu.input(player, "Введите стоимость", config[4].toFixed(0), 6, "int").then(cost => {
              if (cost) {
                if (isNaN(cost) || cost < 1 || cost > 100000000) return player.notify("~r~Стоимость указана не верно");
                config[4] = cost;
              }

              upd();
            });
          }
        });
        submenu.newItem({
          name: "Тип магазина",
          type: "list",
          list: ["Discount store", "Suburban", "Ponsonbys", "Ammunation", "Binco"],
          listSelected: config[0],
          onchange: itm => {
            config[0] = itm;
          }
        });
        submenu.open();
      };

      upd();
    }
  });
  m.open();
}

function vehMenu(player) {
  if (!_user.user.isAdminNow(player)) return;

  let m = _menu.menu.new(player, "Транспорт", "Действия");

  m.workAnyTime = true;

  m.onclose = () => {
    mainMenu(player);
  };

  m.newItem({
    name: "Очистить инвентарь ТС, в которой я",
    onpress: () => {
      _user.user.accept(player, "Вы уверены?").then(status => {
        const veh = player.vehicle;
        if (!veh) return player.notify('~r~Вы не в ТС');
        if (!veh.admin) return player.notify('~r~ТС должен быть заспавнен администратором');
        mainMenu(player);
        if (!status) return;

        _inventory.inventory.getItemListData(8, veh.numberPlate).map(item => {
          _inventory.inventory.deleteItem(item.id);
        });

        _user.user.log(player, "AdminJob", "Очистил инвентарь админ машины " + veh.modelname + " номер " + veh.numberPlate + ` @inventorytype8 @inventoryid${_methods.methods.convertNumberToHash(veh.numberPlate)}`);
      });
    }
  });
  m.newItem({
    name: "Спавн ТС",
    onpress: () => {
      _menu.menu.input(player, "Введите название ТС").then(model => {
        if (!model) return;

        let vehicle = _vehicles.vehicles.spawnCar(player.position, player.heading, model);

        vehicle.dimension = player.dimension;
        vehicle.admin = true;
        player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
      });
    }
  });
  m.newItem({
    name: "Припарковать ТС",
    onpress: () => {
      if (!player.vehicle) return player.notify('~r~Вы должны находится в транспорте');
      if (!player.vehicle.getVariable('container')) return player.notify(`~r~Данный ТС не принадлежит игроку`);
      const pos = player.vehicle.position;

      _vehicles.vehicles.park(player.vehicle.getVariable('container'), pos.x, pos.y, pos.z, player.vehicle.heading);

      player.notify('~b~Вы припарковали транспорт');

      _user.user.log(player, "AdminJob", `Припарковал ТС игрока номер ${player.vehicle.getVariable('container')} на координаты X: ${pos.x.toFixed(0)}, Y: ${pos.y.toFixed(0)}, Z: ${pos.z.toFixed(0)}`);
    }
  });

  if (player.vehicle) {
    m.newItem({
      name: "Отремонтировать ТС",
      onpress: () => {
        if (player.vehicle) {
          player.vehicle.repair();
        }
      }
    });

    if (typeof player.vehicle.getVariable('fuel') == "number") {
      const vehInfo = _methods.methods.getVehicleInfo(player.vehicle.model);

      if (vehInfo.fuel_full > 1) {
        m.newItem({
          name: "Топливо",
          more: player.vehicle.getVariable('fuel') + 'л. / ' + vehInfo.fuel_full,
          onpress: () => {
            if (player.vehicle) {
              _menu.menu.input(player, "Введите количество топлива", player.vehicle.getVariable('fuel').toString()).then(fuel => {
                if (!fuel) return;
                if (!player.vehicle) return;

                const sfuel = _methods.methods.parseInt(fuel);

                if (isNaN(sfuel) || sfuel < 0 || sfuel > 100) return player.notify("~r~Количество указано не верно");
                player.vehicle.setVariable('fuel', sfuel);
                player.notify("~g~Успешно");
              });
            }
          }
        });
      }
    }
  }

  m.newItem({
    name: "Респавн ближайшего ТС",
    onpress: () => mp.events.call("server:respawnNearstVehicle", player)
  });
  m.newItem({
    name: "Удалить ближайший ТС",
    onpress: () => mp.events.call("server:deleteNearstVehicle", player)
  });
  m.newItem({
    name: "Перевернуть ближайший ТС",
    onpress: () => mp.events.call("server:flipNearstVehicle", player)
  });
  m.newItem({
    name: "Открыть/Закрыть ближайший ТС",
    onpress: () => {
      let veh = _user.user.getNearestVehicle(player);

      if (!veh) return player.notify("~r~ТС не обнаружен");

      _vehicles.vehicles.lockStatus(player, veh);
    }
  });
  m.open();
}

const userPropertyEdit = async (player, id) => {
  if (!_user.user.isAdminNow(player, 6)) return;

  let target = _user.user.getPlayerById(id);

  if (!target) {
    return player.notify("~r~Игрок не обнаружен в сети");
  }

  let nick = _user.user.getRpName(target);

  let m = _menu.menu.new(player, "Имущество [" + id + "]", "Список");

  m.workAnyTime = true;
  let data = {};
  data.business_id = _user.user.get(target, 'business_id');
  data.cars = [];

  for (let id = 1; id < 9; id++) if (_user.user.get(target, 'car_id' + id) > 0) {
    if (_vehicles.vehicles.getBySlot(target, id)) data.cars.push(_user.user.get(target, 'car_id' + id));
  }

  data.apart = _user.user.get(target, 'apartment_id');
  data.house = _user.user.get(target, 'id_house');
  data.condo = _user.user.get(target, 'condo_id');
  data.stock = _user.user.get(target, 'stock_id');

  if (data.business_id) {
    let owner = _business.business.getOwnerInfo(data.business_id);

    if (owner.id != id) {
      m.newItem({
        name: "Бизнес: #" + data.business_id,
        desc: "Владелец: " + owner.id,
        onpress: () => {
          _menu.menu.selector(player, "Действие", ["Сменить владельца", "Удалить из игрока с компенсацией"]).then(res => {
            if (!res) return userPropertyEdit(player, id);

            if (res == "Сменить владельца") {
              _business.business.updateOwnerInfo(data.business_id, id, nick);
            } else {
              _user.user.addMoney(player, _business.business.getPrice(data.business_id) * 1.1);

              _user.user.set(target, 'business_id', 0);
            }

            userPropertyEdit(player, id);
          });
        }
      });
    }
  }

  if (data.cars) {
    data.cars.forEach(async car => {
      let owner = await _vehicles.vehicles.getOwner(car);

      if (owner.id != id) {
        let price = await _vehicles.vehicles.getPrice(car);
        m.newItem({
          name: "Машина: #" + car,
          desc: "Владелец: " + owner.id,
          onpress: () => {
            _menu.menu.selector(player, "Действие", ["Сменить владельца", "Удалить из игрока с компенсацией"]).then(res => {
              if (!res) return userPropertyEdit(player, id);

              if (res == "Сменить владельца") {
                _vehicles.vehicles.updateOwnerInfo(data.business_id, id, nick);
              } else {
                _user.user.addMoney(player, price);

                for (let ids = 1; ids < 9; ids++) if (_user.user.get(player, 'car_id' + ids) == car) {
                  _user.user.set(player, 'car_id' + ids, 0);
                }
              }

              userPropertyEdit(player, id);
            });
          }
        });
      }
    });
  }

  m.open();
};

exports.userPropertyEdit = userPropertyEdit;
},{"../config/deathReasonList.json":"GEp2","../user":"QE3B","./menu":"Aiz7","../vehicles":"pYYy","../modules/methods":"qXSp","./chat":"e1Zb","../managers/weather":"uehX","../business":"y5vZ","./chest":"eVha","../managers/parking":"ipvo","../enums":"ZRYf","./vehicleInfo":"f3Ap","../business/autosalon":"JYAF","./garderob":"IU8T","./fraction.vehicles.spawn":"CvBw","./entity/garderob":"K4Bd","./entity/moneyChest":"vWYJ","./moneyChest":"HIeq","./entity/user":"xF3w","../socket":"wJlv","./entity/blackList":"UcH2","./entity/vehicleBooster":"fCpW","./entity/business":"uUTa","../coffer":"sKID","../managers/restart":"kxRx","../../util/newrage":"mgLX","../../util/fractions":"Zeqt","./whitelist":"HCq8","./entity/gangWarsZone":"PCk1","./gangwar":"cDXP","../modules/customchest":"sAsv","../inventory":"m5ow","../items":"nuVl","./entity/inventory":"bqqA","../../util/tempConfigs":"ES5W","./entity/promocodeUsing":"u9lD","./entity/carsModel":"pv82","../config/adminsTp":"gqKn","../../util/weapons":"kwVd","./events":"d3wo","../promisehack":"r9AO","./npc":"jKJb"}],"sKID":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coffer = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _admin = require("./modules/admin");

var _coffer = require("./modules/entity/coffer");

let containerId = 99999;
let coffer = {
  load: function () {
    _methods.methods.debug('coffer.load');

    _coffer.cofferEntity.findOne().then(data => {
      _data.Container.Set(containerId, 'cofferMoney', data.money);

      _data.Container.Set(containerId, 'cofferMoneyBomj', data.moneyBomj);

      _data.Container.Set(containerId, 'cofferNalog', data.nalog);

      _data.Container.Set(containerId, 'cofferNalogBizz', data.nalog_bizz);

      _data.Container.Set(containerId, 'cofferMoneyLimit', data.moneyLimit);

      _data.Container.Set(containerId, 'cofferMoneyOld', data.moneyOld);

      _methods.methods.debug('Coffer loaded: ' + data.money);
    });
  },
  save: function () {
    _methods.methods.debug('coffer.save');

    let Money = _data.Container.Get(containerId, 'cofferMoney');

    let MoneyBomj = _data.Container.Get(containerId, 'cofferMoneyBomj');

    let Nalog = _data.Container.Get(containerId, 'cofferNalog');

    let BizzNalog = _data.Container.Get(containerId, 'cofferNalogBizz');

    let MoneyOld = _data.Container.Get(containerId, 'cofferMoneyLimit');

    let MoneyLimit = _data.Container.Get(containerId, 'cofferMoneyOld');

    _coffer.cofferEntity.update({
      money: Money,
      moneyBomj: MoneyBomj,
      nalog: Nalog,
      nalog_bizz: BizzNalog,
      moneyOld: MoneyOld,
      moneyLimit: MoneyLimit
    }, {
      where: {
        id: 1
      }
    });
  },
  get: function (key) {
    return _data.Container.Get(containerId, key);
  },
  addMoney: function (money = 0) {
    coffer.setMoney(coffer.getMoney() + _methods.methods.parseInt(money));
  },
  removeMoney: function (money) {
    coffer.setMoney(coffer.getMoney() - _methods.methods.parseInt(money));
  },
  setMoney: function (money) {
    _data.Container.Set(containerId, 'cofferMoney', _methods.methods.parseInt(money));
  },
  getMoney: function () {
    if (_data.Container.Has(containerId, 'cofferMoney')) return _methods.methods.parseInt(_data.Container.Get(containerId, 'cofferMoney'));
    return 0;
  },
  getMoneyOld: function () {
    if (_data.Container.Has(containerId, 'cofferMoneyOld')) return _methods.methods.parseInt(_data.Container.Get(containerId, 'cofferMoneyOld'));
    return 50;
  },
  getPosob: function () {
    if (_data.Container.Has(containerId, 'cofferMoneyBomj')) return _methods.methods.parseInt(_data.Container.Get(containerId, 'cofferMoneyBomj'));
    return 50;
  },
  getNalog: function () {
    if (_data.Container.Has(containerId, 'cofferNalog')) return _methods.methods.parseInt(_data.Container.Get(containerId, 'cofferNalog'));
    return 5;
  },
  getNalogBizz: function () {
    if (_data.Container.Has(containerId, 'cofferNalogBizz')) return _methods.methods.parseInt(_data.Container.Get(containerId, 'cofferNalogBizz'));
    return 5;
  },
  setNalogBizz: function (value) {
    _data.Container.Set(containerId, 'cofferNalogBizz', value);

    coffer.save();
  },
  setMoneyOld: function (sum) {
    _data.Container.Set(containerId, 'cofferMoneyOld', sum);

    coffer.save();
  },
  setPosob: function (sum) {
    _data.Container.Set(containerId, 'cofferMoneyBomj', sum);

    coffer.save();
  },
  setNalog: function (sum) {
    _data.Container.Set(containerId, 'cofferNalog', sum);

    coffer.save();
  }
};
exports.coffer = coffer;
setInterval(() => {
  if (!_admin.customParams.cofferbonus) return;
  if (coffer.getMoney() > 10000000000) return;

  if (coffer.getMoney() < 1000000) {
    coffer.addMoney(_methods.methods.getRandomInt(1000000, 5000000));
  } else if (coffer.getMoney() < 5000000) {
    coffer.addMoney(_methods.methods.getRandomInt(500000, 1000000));
  } else if (coffer.getMoney() < 10000000) {
    coffer.addMoney(_methods.methods.getRandomInt(200000, 400000));
  } else if (coffer.getMoney() < 50000000) {
    coffer.addMoney(_methods.methods.getRandomInt(100000, 200000));
  } else {
    coffer.addMoney(_methods.methods.getRandomInt(1000, 5000));
  }
}, 60000);
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./modules/admin":"s4Xg","./modules/entity/coffer":"R7vB"}],"nyp7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fuel = void 0;

var _business = require("../business");

var _methods = require("../modules/methods");

let fuel = {
  markers: [[-1436.907, -276.7434, 46.2077], [1181.085, -332.457, 69.17603], [-2555.328, 2334.161, 33.07804], [820.5913, -1028.354, 26.28338], [-2096.782, -321.0891, 13.16862], [266.3101, -1262.233, 29.14289], [-1798.881, 803.0383, 138.6512], [-319.7586, -1471.749, 30.54867], [620.6727, 268.8043, 103.0894], [1208.05, -1402.304, 35.22414], [-724.5606, -935.9816, 19.21322], [-71.04662, -1761.899, 29.65545], [261.9595, 2607.725, 44.90799], [1210.331, 2660.641, 37.80556], [2680.197, 3263.732, 55.24052], [2003.131, 3773.745, 32.40389], [1699.996, 6415.61, 32.67349], [183.0834, 6602.298, 31.84904], [-94.24948, 6419.677, 31.48952], [1785.835, 3331.355, 41.36417], [2582.799, 361.9792, 108.4573], [-525.8305, -1210.831, 18.18483], [175.9581, -1561.268, 29.25868], [-976.5975, -2998.578, 12.94507], [-799.4369, -1503.509, -1.474802], [-722.5702, -1472.637, 4.000523]],
  stations: [[-1428.609, -269.087, 46.2077, 0, 0, 20, 25], [1163.282, -323.9004, 69.20513, 1, 1, 20, 26], [-2544.321, 2316.688, 33.2159, 0, 2, 20, 27], [818.1421, -1040.465, 26.75079, 0, 3, 20, 28], [-2073.842, -327.2829, 13.31597, 0, 4, 20, 29], [288.9222, -1266.991, 29.44076, 0, 5, 20, 30], [-1820.795, 792.2365, 138.121, 1, 6, 20, 31], [-342.1414, -1483.01, 30.70372, 0, 7, 20, 32], [645.6617, 267.5023, 103.2332, 0, 8, 20, 33], [1211.271, -1389.322, 35.37689, 0, 9, 15, 34], [-707.4156, -914.7997, 19.21559, 1, 10, 20, 35], [-48.44829, -1757.987, 29.42101, 1, 11, 20, 36], [265.9477, 2598.808, 44.78529, 0, 12, 10, 37], [1200.653, 2655.875, 37.85188, 0, 13, 10, 38], [2677.276, 3281.558, 55.24114, 1, 14, 10, 39], [2001.553, 3779.738, 32.18078, 0, 15, 15, 40], [1705.878, 6424.97, 32.76269, 0, 16, 15, 41], [162.0032, 6636.448, 31.56107, 0, 17, 20, 42], [-92.99864, 6410.08, 31.64046, 0, 18, 10, 43], [1776.583, 3327.637, 41.43328, 0, 19, 10, 44], [2557.362, 382.5201, 108.6229, 1, 20, 20, 45], [-531.2673, -1220.685, 18.45499, 0, 21, 20, 46], [167.0998, -1553.519, 29.26175, 0, 22, 20, 47], [-998.1706, -3031.017, 13.94507, 0, 23, 50, 81], [-784.4645, -1506.364, 1.5952133, 0, 24, 20, 82], [-706.188, -1466.079, 5.042738, 0, 25, 20, 83]],
  loadAll: function () {
    _methods.methods.debug('fuel.loadAll');

    fuel.stations.forEach(function (item, idx) {
      let fuelStationPos = new mp.Vector3(fuel.markers[idx][0], fuel.markers[idx][1], fuel.markers[idx][2]);
      let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2] - 1);

      _methods.methods.createBlip(fuelStationPos, 415, 0, 0.8, 'Заправка');

      _methods.methods.createStaticCheckpoint(fuelStationShopPos.x, fuelStationShopPos.y, fuelStationShopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

      if (item[3] == 1) _methods.methods.createBlip(fuelStationShopPos, 52, 0, 0.8, 'Магазин 24/7');
    });
  },
  getInRadius: function (pos, radius = 2) {
    let stationId = -1;
    fuel.stations.forEach(function (item, idx) {
      let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, fuelStationShopPos) < radius) stationId = _methods.methods.parseInt(item[6]);
    });
    return stationId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      fuel.stations.forEach(function (item, idx) {
        let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2]);

        if (_methods.methods.distanceToPos(playerPos, fuelStationShopPos) < 2) {
          let stationId = _methods.methods.parseInt(item[6]);

          try {
            player.call('client:menuList:showFuelMenu', [stationId, item[3] == 1, _business.business.getPrice(stationId)]);
          } catch (e) {
            _methods.methods.debug(e);
          }
        }
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('fuel.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    fuel.markers.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  }
};
exports.fuel = fuel;
},{"../business":"y5vZ","../modules/methods":"qXSp"}],"iKyq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicleSalePoints = exports.isPointInSalePosition = exports.getVehicleVisualParams = exports.getVehicleParamName = exports.VEH_SELL_MIN_PERCENT = void 0;
const VEH_SELL_MIN_PERCENT = 10;
exports.VEH_SELL_MIN_PERCENT = VEH_SELL_MIN_PERCENT;
const vehicleSalePoints = [[{
  x: -1581.81,
  y: -903.71,
  z: 8.20
}, {
  x: -1580.71,
  y: -901.07,
  z: 8.72
}], [{
  x: -1584.18,
  y: -901.52,
  z: 8.20
}, {
  x: -1583.09,
  y: -898.93,
  z: 8.72
}], [{
  x: -1586.38,
  y: -899.50,
  z: 8.20
}, {
  x: -1585.39,
  y: -896.71,
  z: 8.72
}], [{
  x: -1588.70,
  y: -897.50,
  z: 8.19
}, {
  x: -1587.74,
  y: -894.91,
  z: 8.68
}], [{
  x: -1590.97,
  y: -895.43,
  z: 8.15
}, {
  x: -1590.01,
  y: -892.91,
  z: 8.62
}], [{
  x: -1594.57,
  y: -899.81,
  z: 7.99
}, {
  x: -1597.21,
  y: -901.15,
  z: 8.32
}], [{
  x: -1592.20,
  y: -901.86,
  z: 8.01
}, {
  x: -1594.92,
  y: -903.30,
  z: 8.33
}], [{
  x: -1589.93,
  y: -903.90,
  z: 8.01
}, {
  x: -1592.49,
  y: -905.09,
  z: 8.35
}], [{
  x: -1587.63,
  y: -905.89,
  z: 8.01
}, {
  x: -1590.16,
  y: -907.31,
  z: 8.35
}], [{
  x: -1585.27,
  y: -908.03,
  z: 8.01
}, {
  x: -1587.73,
  y: -909.24,
  z: 8.35
}], [{
  x: -1602.62,
  y: -886.30,
  z: 8.17
}, {
  x: -1601.59,
  y: -883.76,
  z: 8.66
}], [{
  x: -1604.89,
  y: -884.23,
  z: 8.13
}, {
  x: -1604.03,
  y: -881.79,
  z: 8.61
}], [{
  x: -1607.32,
  y: -882.25,
  z: 8.12
}, {
  x: -1606.24,
  y: -879.84,
  z: 8.63
}], [{
  x: -1609.59,
  y: -880.29,
  z: 8.16
}, {
  x: -1608.86,
  y: -877.84,
  z: 8.67
}], [{
  x: -1611.97,
  y: -878.30,
  z: 8.17
}, {
  x: -1610.92,
  y: -875.97,
  z: 8.67
}], [{
  x: -1614.37,
  y: -876.31,
  z: 8.17
}, {
  x: -1613.32,
  y: -873.85,
  z: 8.67
}], [{
  x: -1616.70,
  y: -874.36,
  z: 8.17
}, {
  x: -1615.77,
  y: -872.11,
  z: 8.66
}], [{
  x: -1619.01,
  y: -872.27,
  z: 8.17
}, {
  x: -1617.99,
  y: -869.89,
  z: 8.67
}], [{
  x: -1621.36,
  y: -870.35,
  z: 8.17
}, {
  x: -1620.31,
  y: -867.80,
  z: 8.68
}], [{
  x: -1623.72,
  y: -868.36,
  z: 8.17
}, {
  x: -1622.91,
  y: -866.04,
  z: 8.67
}], [{
  x: -1626.07,
  y: -866.38,
  z: 8.17
}, {
  x: -1625.13,
  y: -864.17,
  z: 8.67
}], [{
  x: -1628.39,
  y: -864.45,
  z: 8.18
}, {
  x: -1627.35,
  y: -861.81,
  z: 8.68
}], [{
  x: -1630.82,
  y: -862.45,
  z: 8.18
}, {
  x: -1629.94,
  y: -859.94,
  z: 8.67
}], [{
  x: -1634.44,
  y: -859.34,
  z: 8.17
}, {
  x: -1633.49,
  y: -856.88,
  z: 8.67
}], [{
  x: -1636.76,
  y: -857.31,
  z: 8.17
}, {
  x: -1635.78,
  y: -854.74,
  z: 8.67
}], [{
  x: -1639.10,
  y: -855.28,
  z: 8.16
}, {
  x: -1638.15,
  y: -852.93,
  z: 8.66
}], [{
  x: -1641.52,
  y: -853.39,
  z: 8.14
}, {
  x: -1640.46,
  y: -850.75,
  z: 8.63
}], [{
  x: -1643.89,
  y: -851.40,
  z: 8.11
}, {
  x: -1642.70,
  y: -848.81,
  z: 8.60
}], [{
  x: -1646.20,
  y: -849.42,
  z: 8.09
}, {
  x: -1644.97,
  y: -846.77,
  z: 8.58
}], [{
  x: -1648.53,
  y: -847.47,
  z: 8.06
}, {
  x: -1647.44,
  y: -844.71,
  z: 8.57
}], [{
  x: -1650.89,
  y: -845.35,
  z: 8.07
}, {
  x: -1649.82,
  y: -842.90,
  z: 8.59
}], [{
  x: -1653.17,
  y: -843.42,
  z: 8.12
}, {
  x: -1652.27,
  y: -840.91,
  z: 8.64
}], [{
  x: -1655.52,
  y: -841.49,
  z: 8.15
}, {
  x: -1654.54,
  y: -838.98,
  z: 8.66
}], [{
  x: -1657.89,
  y: -839.40,
  z: 8.15
}, {
  x: -1656.86,
  y: -836.97,
  z: 8.65
}], [{
  x: -1660.24,
  y: -837.38,
  z: 8.15
}, {
  x: -1659.32,
  y: -834.98,
  z: 8.65
}], [{
  x: -1662.53,
  y: -835.40,
  z: 8.15
}, {
  x: -1661.58,
  y: -832.95,
  z: 8.65
}], [{
  x: -1666.12,
  y: -839.70,
  z: 8.00
}, {
  x: -1667.15,
  y: -841.98,
  z: 8.37
}], [{
  x: -1663.84,
  y: -841.78,
  z: 8.00
}, {
  x: -1664.89,
  y: -844.22,
  z: 8.37
}], [{
  x: -1661.41,
  y: -843.73,
  z: 8.00
}, {
  x: -1662.39,
  y: -846.00,
  z: 8.36
}], [{
  x: -1658.97,
  y: -845.63,
  z: 7.99
}, {
  x: -1659.97,
  y: -848.00,
  z: 8.34
}], [{
  x: -1656.67,
  y: -847.60,
  z: 7.95
}, {
  x: -1657.86,
  y: -850.16,
  z: 8.31
}], [{
  x: -1654.33,
  y: -849.53,
  z: 7.91
}, {
  x: -1655.43,
  y: -852.07,
  z: 8.30
}], [{
  x: -1651.97,
  y: -851.58,
  z: 7.93
}, {
  x: -1652.95,
  y: -853.98,
  z: 8.33
}], [{
  x: -1649.64,
  y: -853.71,
  z: 7.97
}, {
  x: -1650.76,
  y: -856.03,
  z: 8.36
}], [{
  x: -1647.30,
  y: -855.66,
  z: 8.00
}, {
  x: -1648.48,
  y: -858.06,
  z: 8.37
}], [{
  x: -1644.98,
  y: -857.67,
  z: 8.01
}, {
  x: -1646.13,
  y: -860.03,
  z: 8.38
}], [{
  x: -1642.55,
  y: -859.50,
  z: 8.02
}, {
  x: -1643.73,
  y: -861.94,
  z: 8.38
}], [{
  x: -1640.16,
  y: -861.58,
  z: 8.02
}, {
  x: -1641.31,
  y: -864.01,
  z: 8.38
}], [{
  x: -1637.75,
  y: -863.43,
  z: 8.03
}, {
  x: -1638.93,
  y: -865.86,
  z: 8.39
}], [{
  x: -1634.19,
  y: -866.46,
  z: 8.02
}, {
  x: -1635.43,
  y: -869.07,
  z: 8.38
}], [{
  x: -1631.81,
  y: -868.50,
  z: 8.02
}, {
  x: -1633.05,
  y: -871.10,
  z: 8.38
}], [{
  x: -1629.51,
  y: -870.62,
  z: 8.02
}, {
  x: -1630.78,
  y: -873.15,
  z: 8.38
}], [{
  x: -1627.27,
  y: -872.72,
  z: 8.02
}, {
  x: -1628.21,
  y: -875.14,
  z: 8.38
}], [{
  x: -1624.91,
  y: -874.71,
  z: 8.01
}, {
  x: -1626.08,
  y: -877.08,
  z: 8.38
}], [{
  x: -1622.64,
  y: -876.67,
  z: 8.02
}, {
  x: -1623.66,
  y: -879.13,
  z: 8.38
}], [{
  x: -1620.26,
  y: -878.77,
  z: 8.01
}, {
  x: -1621.28,
  y: -881.01,
  z: 8.37
}], [{
  x: -1617.89,
  y: -880.72,
  z: 8.01
}, {
  x: -1618.94,
  y: -883.04,
  z: 8.36
}], [{
  x: -1615.54,
  y: -882.72,
  z: 8.00
}, {
  x: -1616.58,
  y: -885.00,
  z: 8.34
}], [{
  x: -1613.16,
  y: -884.70,
  z: 7.98
}, {
  x: -1614.27,
  y: -887.16,
  z: 8.32
}], [{
  x: -1610.79,
  y: -886.65,
  z: 7.96
}, {
  x: -1611.95,
  y: -889.08,
  z: 8.32
}], [{
  x: -1608.53,
  y: -888.63,
  z: 7.97
}, {
  x: -1609.60,
  y: -891.08,
  z: 8.33
}], [{
  x: -1606.02,
  y: -890.63,
  z: 8.00
}, {
  x: -1607.06,
  y: -893.04,
  z: 8.34
}]];
exports.vehicleSalePoints = vehicleSalePoints;

const distanceToPos = (v1, v2) => {
  return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2) + Math.pow(v2.z - v1.z, 2)));
};

const isPointInSalePosition = pos => {
  return !!vehicleSalePoints.find(q => distanceToPos(q[0], pos) < 2);
};

exports.isPointInSalePosition = isPointInSalePosition;

const getVehicleParamName = id => {
  let name = id.toString();

  switch (id) {
    case 0:
      name = 'Спойлер';
      break;

    case 1:
      name = 'Передний бампер';
      break;

    case 2:
      name = 'Задний бампер';
      break;

    case 3:
      name = 'Юбки';
      break;

    case 4:
      name = 'Выхлоп';
      break;

    case 5:
      name = 'Рамка';
      break;

    case 6:
      name = 'Решетка';
      break;

    case 7:
      name = 'Капот';
      break;

    case 43:
      name = 'Капот-2';
      break;

    case 8:
      name = 'Крыло';
      break;

    case 10:
      name = 'Крыша';
      break;

    case 44:
      name = 'Крыша-2';
      break;

    case 14:
      name = 'Гудок';
      break;

    case 15:
      name = 'Подвеска';
      break;

    case 19:
      name = 'Решетка радиатора';
      break;

    case 23:
      name = 'Колёса';
      break;

    case 28:
      name = 'Украшения';
      break;

    case 30:
      name = 'Дизайн циферблата';
      break;

    case 32:
      name = 'Сиденья';
      break;

    case 38:
      name = 'Гидравлика';
      break;

    case 46:
      name = 'Стёкла';
      break;

    case 48:
      name = 'Винил';
      break;

    case 11:
      name = 'Двигатель';
      break;

    case 12:
      name = 'Тормоза';
      break;

    case 13:
      name = 'Трансмиссия';
      break;

    case 18:
      name = 'Турбо';
      break;

    case 69:
      name = 'Тонировка';
      break;

    case 100:
      name = 'Привод';
      break;

    case 101:
      name = 'Ускорение';
      break;

    case 102:
      name = 'Мощность двигателя';
      break;

    case 103:
      name = 'Сила торможения';
      break;

    case 104:
      name = 'Распределиние сил. торм.';
      break;

    case 105:
      name = 'Ручной тормоз';
      break;

    case 106:
      name = 'Угол поворота колёс';
      break;

    case 107:
      name = 'Сцепление колёс на повороте';
      break;

    case 108:
      name = 'Пробуксовка колёс';
      break;
  }

  return name;
};

exports.getVehicleParamName = getVehicleParamName;

const getVehicleVisualParams = datas => {
  let res = [];
  const data = JSON.parse(datas);

  for (let param in data) {
    const value = data[param];

    if (value) {
      res.push([getVehicleParamName(parseInt(param)), value.toString()]);
    }
  }

  return res;
};

exports.getVehicleVisualParams = getVehicleVisualParams;
},{}],"pYYy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicles = exports.vehicleOffset = exports.vehSalesShowChecks = exports.vehSalesPointsData = exports.offsetFrNew = exports.offsetFr = void 0;

var _data = require("./modules/data");

var _enums = require("./enums");

var _user = require("./user");

var _coffer = require("./coffer");

var _fuel = require("./business/fuel");

var _methods = require("./modules/methods");

var _vSync = require("./managers/vSync");

var _vehicleBooster = require("./modules/entity/vehicleBooster");

var _inventory = require("./inventory");

var _carsModel = require("./modules/entity/carsModel");

var _sequelizeTypescript = require("sequelize-typescript");

var _vehsell = require("../util/vehsell");

var _menu = require("./modules/menu");

var _vehicleInfo = require("./modules/vehicleInfo");

const MAX_VEHICLE_AFK_MINUTES = 30;
const AFK_TIME_INTERVAL_SECS = 30;
const offset = 200000;
const vehicleOffset = offset;
exports.vehicleOffset = vehicleOffset;
const offsetFr = -5000;
exports.offsetFr = offsetFr;
const offsetFrNew = -6000;
exports.offsetFrNew = offsetFrNew;
const offsetJob = -10000;
const offsetRent = -1000000;
const offsetAll = -2000000;
let jobCount = 0;
let boostList = new Map();
let boostListHash = new Map();
let removalQueue = [];
let CountAllCars = 0;
let CountRentCars = 0;
let vehSalesPointsData = [];
exports.vehSalesPointsData = vehSalesPointsData;
let vehSalesShowChecks = [];
exports.vehSalesShowChecks = vehSalesShowChecks;
setInterval(() => {
  vehSalesPointsData.map((item, index) => {
    if (!item) return;

    if (!mp.players.exists(item[1]) || !mp.vehicles.exists(item[0]) || !mp.labels.exists(item[2])) {
      clearSellerPos(index);
    } else {
      if (_methods.methods.distanceToPos(item[0].position, _vehsell.vehicleSalePoints[index][0]) > 2) {
        clearSellerPos(index);
      }
    }
  });
}, 30000);

const clearSellerPos = index => {
  if (vehSalesPointsData[index] && mp.labels.exists(vehSalesPointsData[index][2])) vehSalesPointsData[index][2].destroy();
  vehSalesPointsData[index] = null;
  let check = vehSalesShowChecks[index];
  if (check) check.updateDimension(1);
};

setTimeout(() => {
  mp.events.register('autosale:buyVeh', (player, cost) => {
    if (!player.vehicle) return player.notify("~r~Вы должны быть в транспорте");
    if (_user.user.isDriver(player)) return player.notify("~r~Вы не должны быть за рулём");
    const point = vehSalesPointsData.find(q => q && q[0] == player.vehicle);
    if (!point) return player.notify("~r~ТС не продаётся");
    const pointIndex = vehSalesPointsData.findIndex(q => q && q[0] == player.vehicle);
    if (!mp.players.exists(point[1])) return player.notify("~r~Продавец не в сети");
    if (point[1].vehicle !== player.vehicle) return player.notify("~r~Продавец должен быть в ТС");
    if (vehicles.getVehicleOwnerId(player.vehicle) !== _user.user.getId(point[1])) return player.notify("~r~Данный ТС больше не принадлежит продавцу");
    if (point[3] !== cost) return player.notify(`~r~Стоимость продажи изменилась`);
    let slot = vehicles.getVehSlot(point[1], player.vehicle);
    clearSellerPos(pointIndex);
    mp.events.call('server:car:sellToPlayer:accept', player, point[3], _user.user.getId(point[1]), slot);
  });

  _vehsell.vehicleSalePoints.map((item, index) => {
    const clear = () => {
      clearSellerPos(index);
    };

    const checkFree = () => {
      if (vehSalesPointsData[index]) {
        if (!mp.vehicles.exists(vehSalesPointsData[index][0]) || !mp.players.exists(vehSalesPointsData[index][1]) || !mp.labels.exists(vehSalesPointsData[index][2])) {
          clear();
          return true;
        } else if (_methods.methods.distanceToPos(vehSalesPointsData[index][0].position, item[0]) > 2) {
          clear();
          return true;
        }

        return false;
      }

      return true;
    };

    const canControl = player => {
      if (!player.vehicle) {
        player.notify("~r~Вы должны быть в транспорте");
        return false;
      }

      if (!vehSalesPointsData[index]) {
        player.notify("~r~Место свободно");
        return false;
      }

      if (checkFree()) {
        player.notify("~r~Место свободно");
        return false;
      }

      if (vehSalesPointsData[index][1].id !== player.id) {
        player.notify("~r~Данное место занято другим человеком");
        return false;
      }

      if (vehSalesPointsData[index][0].id !== player.vehicle.id) {
        player.notify("~r~Данное место занято другим ТС");
        return false;
      }

      if (!_user.user.isDriver(player)) {
        player.notify("~r~Вы должны быть за рулём");
        return false;
      }

      return true;
    };

    _methods.methods.createDynamicCheckpoint(new mp.Vector3(item[0].x, item[0].y, item[0].z + 0.5), "Нажмите ~g~E~w~ чтобы выставить ТС на продажу", player => {
      if (!player.vehicle) return player.notify("~r~Вы должны быть в транспорте");
      if (!_user.user.isDriver(player)) return player.notify("~r~Вы должны быть за рулём");
      if (vehSalesPointsData.find((q, i) => !!q && index !== i && q[0] && q[0].id === player.vehicle.id)) return player.notify("~r~Ваш ТС уже продаётся в другом месте");

      if (!checkFree()) {
        let m = _menu.menu.new(player, "Авторынок", "Действия");

        m.newItem({
          name: "~y~Сменить стоимость",
          onpress: () => {
            if (!canControl(player)) return;

            _menu.menu.input(player, "Укажите стоимость продажи", "", 9, "int").then(sum => {
              if (!canControl(player)) return;
              if (!sum) return;
              if (sum < 100) return player.notify("~r~Стоимость не может быть ниже 100$");
              if (sum > 999999999) return player.notify("~r~Укажите корректную стоимость");
              if (sum === vehSalesPointsData[index][3]) return;
              vehSalesPointsData[index][3] = sum;
              vehSalesPointsData[index][2].text = `${vehSalesPointsData[index][4]}\n$${_methods.methods.numberFormat(sum)}\n${_user.user.getRpName(player)}\n${_user.user.getPhone(player)}`;
            });
          }
        });
        m.newItem({
          name: "~g~Предложить покупку пассажиру",
          onpress: () => {
            if (!canControl(player)) return;
            const occupants = player.vehicle.getOccupants();
            if (occupants.length < 2) return player.notify("~r~В транспорте нет пассажира");
            if (occupants.length > 2) return player.notify("~r~В транспорте должны быть только вы и покупатель");
            const target = occupants.find(q => q.id !== player.id);
            const veh = vehSalesPointsData[index][0];
            let car = vehicles.getData(veh.getVariable('container'));
            let upgrade = JSON.parse(car.get('upgrade'));
            const name = vehSalesPointsData[index][4];
            m.close();
            player.notify("~g~Предложение о покупке отправлено");

            _user.user.setGui(target, "autosale");

            mp.events.triggerBrowser(target, "autosale:data", "buy", index, veh.modelname, name, veh.numberPlate, `${_user.user.getRpName(vehSalesPointsData[index][1])} ${_user.user.getPhone(vehSalesPointsData[index][1])}`, upgrade['11'], upgrade['12'], upgrade['13'], !!upgrade['14'], vehSalesPointsData[index][3], car.get('price'));
          }
        });
        m.newItem({
          name: "~r~Снять с продажи",
          onpress: () => {
            if (!canControl(player)) return;

            _user.user.accept(player, "Вы уверены?").then(status => {
              if (!canControl(player)) return;
              m.close();
              if (status) clear();
            });
          }
        });
        m.open();
        return;
      }

      const owner = vehicles.getVehicleOwnerId(player.vehicle) === _user.user.getId(player);

      if (!owner) return player.notify("~r~Вы должны быть владельцем ТС");
      if (player.vehicle.velocity.x + player.vehicle.velocity.y + player.vehicle.velocity.z > 0.1) return player.notify("~r~Остановите ТС прежде чем выставить на продажу");

      _menu.menu.input(player, "Укажите стоимость продажи", "", 9, "int").then(sum => {
        if (!sum) return;
        if (sum < 100) return player.notify("~r~Стоимость не может быть ниже 100$");
        if (sum > 999999999) return player.notify("~r~Укажите корректную стоимость");
        if (!player.vehicle) return player.notify("~r~Вы должны быть в транспорте");
        if (!_user.user.isDriver(player)) return player.notify("~r~Вы должны быть за рулём");
        if (!checkFree()) return player.notify("~r~Данное место занято");
        let name = player.vehicle.modelname;

        const cfg = _vehicleInfo.vehicleInfo.findByVeh(player.vehicle);

        if (cfg) name = cfg.display_name;
        vehSalesPointsData[index] = [player.vehicle, player, mp.labels.new(`${name}\n$${_methods.methods.numberFormat(sum)}\n${_user.user.getRpName(player)}\n${_user.user.getPhone(player)}`, new mp.Vector3(item[1].x, item[1].y, item[1].z + 1), {
          drawDistance: 5
        }), sum, name];
        showCheckpoint.updateDimension(0);
        player.notify("~g~Вы выставили ТС на продажу. Если ваш ТС покинет место продажи - объявление будет снято");
      });
    }, 2.0, 0, [0, 0, 255, 90], 1, 27);

    let showCheckpoint = _methods.methods.createDynamicCheckpoint(new mp.Vector3(item[1].x, item[1].y, item[1].z), "Нажмите ~g~E~w~ чтобы ознакомится с ТС", player => {
      if (checkFree()) return player.notify("~r~Место не занято");
      const veh = vehSalesPointsData[index][0];
      let car = vehicles.getData(veh.getVariable('container'));
      let upgrade = JSON.parse(car.get('upgrade'));
      const name = vehSalesPointsData[index][4];

      _user.user.setGui(player, "autosale");

      mp.events.triggerBrowser(player, "autosale:data", "show", index, veh.modelname, name, veh.numberPlate, `${_user.user.getRpName(vehSalesPointsData[index][1])} ${_user.user.getPhone(vehSalesPointsData[index][1])}`, upgrade['11'], upgrade['12'], upgrade['13'], !!upgrade['14'], vehSalesPointsData[index][3], car.get('price'));
    }, 1.0, 1, [0, 255, 0, 60]);

    vehSalesShowChecks[index] = showCheckpoint;
  });
}, 15000);
let vehicles = {
  reloadBoostList: () => {
    _vehicleBooster.vehicleBoosterEntity.findAll().then(items => {
      boostList = new Map();
      items.forEach(item => {
        boostList.set(item.model, item.speed);
        boostListHash.set(mp.joaat(item.model), item.speed);
      });
      mp.vehicles.forEach(vehicle => {
        if (boostListHash.has(vehicle.model)) {
          vehicle.setVariable('boost', boostListHash.get(vehicle.model));
        }
      });
    });
  },
  newOrdered: (cb, creationArguments) => {
    let vehicle = mp.vehicles.new.apply(mp.vehicles, creationArguments);
    vehicle.position = creationArguments[1];

    if (boostListHash.has(vehicle.model)) {
      vehicle.setVariable('boost', boostListHash.get(vehicle.model));
    }

    _vSync.vSync.setEngineState(vehicle, false);

    if (creationArguments[3]) vehicle.modelname = creationArguments[3];
    vehicle.modelhash = creationArguments[0];
    cb(vehicle);
  },
  destroyOrdered: vehicle => {
    if (mp.vehicles.exists(vehicle)) {
      removalQueue.push(vehicle);
    }
  },
  loadAllTimers: () => {
    _methods.methods.debug('vehicles.loadAllTimers');
  },
  loadPlayerVehicle: player => {
    _methods.methods.debug('vehicles.loadPlayerVehicle');

    const playerId = _user.user.getId(player);

    if (playerId && playerId > 0) {
      _carsModel.carsEntity.findAll({
        where: {
          id_user: playerId
        }
      }).then(rows => {
        rows.forEach(function (item) {
          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id', item.id);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id_user', item.id_user);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'name', item.name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'class_type', item.class_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'hash', item.hash);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'price', item.price);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock', item.stock);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_full', item.stock_full);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_item', item.stock_item);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel', item.fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'full_fuel', item.full_fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel_minute', item.fuel_minute);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color1', item.color1);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color2', item.color2);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_type', item.neon_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_r', item.neon_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_g', item.neon_g);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_b', item.neon_b);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'number', item.number);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'wanted_level', item.wanted_level);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'lock_status', item.lock_status);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_mp', item.s_mp);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_l', item.s_wh_bk_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_l', item.s_wh_b_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_r', item.s_wh_bk_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_r', item.s_wh_b_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_engine', item.s_engine);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_suspension', item.s_suspension);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_body', item.s_body);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_candle', item.s_candle);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_oil', item.s_oil);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'livery', item.livery);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_visible', item.is_visible);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x', item.x);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y', item.y);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z', item.z);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot', item.rot);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x_park', item.x_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y_park', item.y_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z_park', item.z_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot_park', item.rot_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'upgrade', item.upgrade);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'money_tax', item.money_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'score_tax', item.score_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'cop_park_name', item.cop_park_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_cop_park', item.is_cop_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'sell_price', item.sell_price);

          if (item.sell_price > 0) {
            return;
          }
        });

        _methods.methods.debug(`All vehicles loaded for player ${playerId} (${rows.length})`);
      });
    }
  },
  loadPlayerVehicleByPlayerId: (playerId, dim = 0) => {
    _methods.methods.debug('vehicles.loadPlayerVehicle');

    if (playerId && playerId > 0) {
      _carsModel.carsEntity.findAll({
        where: {
          id_user: playerId
        }
      }).then(rows => {
        rows.forEach(function (item) {
          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id', item.id);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id_user', item.id_user);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'name', item.name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'class_type', item.class_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'hash', item.hash);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'price', item.price);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock', item.stock);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_full', item.stock_full);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_item', item.stock_item);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel', item.fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'full_fuel', item.full_fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel_minute', item.fuel_minute);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color1', item.color1);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color2', item.color2);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_type', item.neon_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_r', item.neon_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_g', item.neon_g);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_b', item.neon_b);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'number', item.number);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'wanted_level', item.wanted_level);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'lock_status', item.lock_status);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_mp', item.s_mp);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_l', item.s_wh_bk_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_l', item.s_wh_b_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_r', item.s_wh_bk_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_r', item.s_wh_b_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_engine', item.s_engine);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_suspension', item.s_suspension);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_body', item.s_body);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_candle', item.s_candle);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_oil', item.s_oil);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'livery', item.livery);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_visible', item.is_visible);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x', item.x);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y', item.y);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z', item.z);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot', item.rot);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x_park', item.x_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y_park', item.y_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z_park', item.z_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot_park', item.rot_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'upgrade', item.upgrade);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'money_tax', item.money_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'score_tax', item.score_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'cop_park_name', item.cop_park_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_cop_park', item.is_cop_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'sell_price', item.sell_price);

          if (item.sell_price > 0) {
            return;
          }

          if (item.x_park != 0) vehicles.spawnPlayerCar(item.id, false, dim);
        });

        _methods.methods.debug(`All vehicles loaded for player ${playerId} (${rows.length})`);
      });
    }
  },
  loadPlayerVehicleById: async (player, id) => {
    _methods.methods.debug('vehicles.loadPlayerVehicleById');

    const playerId = _user.user.getId(player);

    if (playerId && playerId > 0) {
      _carsModel.carsEntity.findAll({
        where: {
          id_user: playerId,
          id: id
        }
      }).then(rows => {
        rows.forEach(function (item) {
          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id', item.id);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id_user', item.id_user);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'name', item.name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'class_type', item.class_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'hash', item.hash);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'price', item.price);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock', item.stock);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_full', item.stock_full);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_item', item.stock_item);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel', item.fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'full_fuel', item.full_fuel);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel_minute', item.fuel_minute);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color1', item.color1);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color2', item.color2);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_type', item.neon_type);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_r', item.neon_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_g', item.neon_g);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_b', item.neon_b);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'number', item.number);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'wanted_level', item.wanted_level);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'lock_status', item.lock_status);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_mp', item.s_mp);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_l', item.s_wh_bk_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_l', item.s_wh_b_l);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_r', item.s_wh_bk_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_r', item.s_wh_b_r);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_engine', item.s_engine);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_suspension', item.s_suspension);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_body', item.s_body);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_candle', item.s_candle);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_oil', item.s_oil);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'livery', item.livery);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_visible', item.is_visible);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x', item.x);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y', item.y);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z', item.z);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot', item.rot);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x_park', item.x_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y_park', item.y_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z_park', item.z_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot_park', item.rot_park);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'upgrade', item.upgrade);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'money_tax', item.money_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'score_tax', item.score_tax);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'cop_park_name', item.cop_park_name);

          _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_cop_park', item.is_cop_park);

          if (item.sell_price > 0) {
            return;
          }

          if (item.x_park != 0) vehicles.spawnPlayerCar(item.id);
        });

        _methods.methods.debug(`All vehicles loaded for player ${playerId} (${rows.length})`);
      });
    }
  },
  removePlayerVehicle: userId => {
    mp.vehicles.forEach(function (v) {
      if (vehicles.exists(v) && v.getVariable('id_user') == userId) {
        vehicles.save(v.getVariable('container'));
        v.destroy();
      }
    });
  },
  save: id => {
    if (!id) return;
    if (typeof id != "number") return;

    _methods.methods.debug('vehicles.save');

    id = offset + id;

    if (!_data.Container.Has(id, 'id')) {
      return;
    }

    if (!_data.Container.Has(id, 'id_user')) {
      return;
    }

    _carsModel.carsEntity.update({
      fuel: parseFloat(_data.Container.Get(id, 'fuel')),
      color1: _methods.methods.parseInt(_data.Container.Get(id, 'color1')),
      color2: _methods.methods.parseInt(_data.Container.Get(id, 'color2')),
      neon_type: _methods.methods.parseInt(_data.Container.Get(id, 'neon_type')),
      neon_r: _methods.methods.parseInt(_data.Container.Get(id, 'neon_r')),
      neon_g: _methods.methods.parseInt(_data.Container.Get(id, 'neon_g')),
      neon_b: _methods.methods.parseInt(_data.Container.Get(id, 'neon_b')),
      number: _data.Container.Get(id, 'number'),
      wanted_level: _methods.methods.parseInt(_data.Container.Get(id, 'wanted_level')),
      lock_status: _methods.methods.parseInt(_data.Container.Get(id, 'lock_status')),
      livery: _methods.methods.parseInt(_data.Container.Get(id, 'livery')),
      x_park: parseFloat(_data.Container.Get(id, 'x_park')),
      y_park: parseFloat(_data.Container.Get(id, 'y_park')),
      z_park: parseFloat(_data.Container.Get(id, 'z_park')),
      rot_park: parseFloat(_data.Container.Get(id, 'rot_park')),
      upgrade: _data.Container.Get(id, 'upgrade')
    }, {
      where: {
        id: _methods.methods.parseInt(_data.Container.Get(id, 'id'))
      }
    });
  },
  loadAll: (dim = 0, spawn = true) => {
    _methods.methods.debug('vehicles.loadAll');

    _carsModel.carsEntity.findAll().then(rows => {
      console.time('loadCars');
      rows.forEach(function (item) {
        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id', item.id);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'id_user', item.id_user);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'user_name', item.user_name);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'name', item.name);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'class_type', item.class_type);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'hash', item.hash);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'price', item.price);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock', item.stock);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_full', item.stock_full);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'stock_item', item.stock_item);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel', item.fuel);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'full_fuel', item.full_fuel);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'fuel_minute', item.fuel_minute);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color1', item.color1);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'color2', item.color2);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_type', item.neon_type);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_r', item.neon_r);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_g', item.neon_g);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'neon_b', item.neon_b);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'number', item.number);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'wanted_level', item.wanted_level);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'lock_status', item.lock_status);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_mp', item.s_mp);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_l', item.s_wh_bk_l);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_l', item.s_wh_b_l);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_bk_r', item.s_wh_bk_r);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_wh_b_r', item.s_wh_b_r);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_engine', item.s_engine);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_suspension', item.s_suspension);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_body', item.s_body);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_candle', item.s_candle);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 's_oil', item.s_oil);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'livery', item.livery);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_visible', item.is_visible);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x', item.x);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y', item.y);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z', item.z);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot', item.rot);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'x_park', item.x_park);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'y_park', item.y_park);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'z_park', item.z_park);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'rot_park', item.rot_park);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'upgrade', item.upgrade);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'money_tax', item.money_tax);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'score_tax', item.score_tax);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'cop_park_name', item.cop_park_name);

        _data.Container.Set(offset + _methods.methods.parseInt(item.id), 'is_cop_park', item.is_cop_park);

        if (spawn) vehicles.spawnPlayerCar(item.id, false, dim);
      });
      console.timeEnd('loadCars');
    });
  },
  set: function (id, key, val) {
    _data.Container.Set(offset + _methods.methods.parseInt(id), key, val);
  },
  get: function (id, key) {
    return _data.Container.Get(offset + _methods.methods.parseInt(id), key);
  },
  getData: function (id) {
    return _data.Container.GetAll(offset + _methods.methods.parseInt(id));
  },
  park: function (id, x, y, z, rot) {
    _methods.methods.debug('vehicles.park');

    rot = _methods.methods.parseInt(rot);
    vehicles.set(id, 'x_park', _methods.methods.parseInt(x));
    vehicles.set(id, 'y_park', _methods.methods.parseInt(y));
    vehicles.set(id, 'z_park', _methods.methods.parseInt(z));
    vehicles.set(id, 'rot_park', _methods.methods.parseInt(rot));

    _carsModel.carsEntity.update({
      x_park: _methods.methods.parseInt(x),
      y_park: _methods.methods.parseInt(y),
      z_park: _methods.methods.parseInt(z),
      rot_park: _methods.methods.parseInt(rot)
    }, {
      where: {
        id: id
      }
    });
  },
  destroy: vehicle => {
    mp.events.call("vehicleDestroy", vehicle);
    vehicle.destroy();
  },
  respawn: (vehicle, resp = true) => {
    if (!vehicles.exists(vehicle)) return;

    try {
      _methods.methods.debug('vehicles.respawn');

      let containerId = vehicle.getVariable('container');
      const iduser = vehicle.getVariable('id_user');
      vehicles.destroy(vehicle);

      if (resp) {
        setTimeout(() => {
          if (!!containerId && typeof iduser == "number" && iduser > 0) vehicles.spawnPlayerCar(containerId, true);
        }, 500);
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findVehicleByNumber: number => {
    _methods.methods.debug('vehicles.findVehicleByNumber');

    let returnVehicle = null;
    mp.vehicles.forEach(vehicle => {
      if (!vehicles.exists(vehicle)) return;
      if (vehicle.numberPlate == number) returnVehicle = vehicle;
    });
    return returnVehicle;
  },
  spawnFractionCar: id => {
    _methods.methods.debug('vehicles.spawnFractionCar');

    try {
      let vehItem = _enums.enums.vehicleList[id];
      let model = vehItem[0];
      let position = new mp.Vector3(vehItem[1], vehItem[2], vehItem[3]);
      let livery = vehItem[5];
      let fractionId = vehItem[6];
      if (fractionId > 100) fractionId = fractionId - 100;

      let color1 = _methods.methods.getRandomInt(0, 156);

      let color2 = _methods.methods.getRandomInt(0, 156);

      let number = 'SA';
      let numberStyle = 0;

      switch (fractionId) {
        case 1:
          color1 = 146;
          color2 = 146;
          number = 'GOV' + id;
          numberStyle = 4;
          break;

        case 2:
          color1 = 111;
          color2 = 0;
          number = 'LSPD' + id;
          livery = _methods.methods.getRandomInt(0, 6);
          numberStyle = 4;

          switch (model) {
            case -590854301:
            case 1982188179:
            case -1286617882:
            case -118239187:
            case 376094636:
              {
                livery = _methods.methods.getRandomInt(3, 6);
                break;
              }

            case -561505450:
            case -271532569:
            case -660061144:
              {
                livery = _methods.methods.getRandomInt(2, 4);
                break;
              }

            case 1162796823:
            case -595004596:
            case -1973172295:
              {
                let colors = [0, 2, 141, 7, 34, 134, 146];
                color1 = colors[_methods.methods.getRandomInt(0, 6)];
                color2 = color1;
                break;
              }

            case 1127131465:
              {
                let colors = [0, 3, 6, 131, 134];
                color1 = colors[_methods.methods.getRandomInt(0, 4)];
                color2 = color1;
                break;
              }

            case -1647941228:
              color1 = 112;
              color2 = 112;
              break;

            case 837858166:
            case 2071877360:
            case 745926877:
              color1 = 0;
              color2 = 0;
              break;
          }

          break;

        case 7:
          color1 = 111;
          color2 = 0;
          number = 'SHRF' + id;
          livery = _methods.methods.getRandomInt(0, 6);
          numberStyle = 4;

          switch (model) {
            case -590854301:
            case 1982188179:
            case -1286617882:
            case -118239187:
            case 376094636:
              {
                livery = _methods.methods.getRandomInt(3, 6);
                break;
              }

            case -561505450:
            case -271532569:
            case -660061144:
              {
                livery = _methods.methods.getRandomInt(2, 4);
                break;
              }

            case 1162796823:
            case -595004596:
            case -1973172295:
              {
                let colors = [0, 2, 141, 7, 34, 134, 146];
                color1 = colors[_methods.methods.getRandomInt(0, 6)];
                color2 = color1;
                break;
              }

            case 1127131465:
              {
                let colors = [0, 3, 6, 131, 134];
                color1 = colors[_methods.methods.getRandomInt(0, 4)];
                color2 = color1;
                break;
              }

            case -1647941228:
              color1 = 112;
              color2 = 112;
              break;

            case 837858166:
            case 745926877:
            case 2071877360:
              color1 = 0;
              color2 = 0;
              break;
          }

          break;

        case 3:
          {
            color1 = 0;
            color2 = 0;
            number = 'FIB' + id;
            numberStyle = 4;
            break;
          }

        case 4:
          {
            color1 = 154;
            color2 = 154;

            if (model == -823509173 || model == 321739290 || model == 1074326203 || model == 630371791) {
              color1 = 111;
              color2 = 111;
            } else if (vehItem[6] == 104) {
              color1 = 119;
              color2 = 0;
            }

            number = 'USMC' + id;
            break;
          }

        case 5:
          {
            color1 = 77;
            color2 = 77;
            number = 'PRSN' + id;
            numberStyle = 4;
            break;
          }

        case 16:
          {
            color1 = 27;
            color2 = 27;
            number = 'EMS' + id;
            numberStyle = 4;

            if (model == 1938952078) {
              color1 = 111;
              color2 = 111;
            } else if (model == 353883353) {
              livery = 1;
            }

            break;
          }
      }

      vehicles.newOrdered(veh => {
        if (!vehicles.exists(veh)) return;

        let vInfo = _methods.methods.getVehicleInfo(model);

        veh.numberPlate = number;
        veh.numberPlateType = numberStyle;

        _vSync.vSync.setEngineState(veh, false);

        veh.locked = true;
        veh.livery = livery;
        veh.setColor(color1, color2);
        veh.setVariable('container', id + offsetFr);
        veh.setVariable('fuel', vInfo.fuel_full);
        veh.setVariable('fraction_id', fractionId);

        if (fractionId == 1) {
          veh.windowTint = 1;
        }

        if (fractionId == 2 || fractionId == 4 || fractionId == 7 || fractionId == 16 || fractionId == 1 || fractionId == 3) {
          try {
            veh.setMod(11, 2);
            veh.setMod(12, 2);
            veh.setMod(13, 3);
            veh.setMod(18, 0);
            veh.setMod(16, 2);
            veh.setVariable('boost', 1.79);
          } catch (e) {
            _methods.methods.debug(e);
          }
        }

        if (fractionId == 4 && model == -808457413) veh.setMod(48, _methods.methods.getRandomInt(0, 2) == 0 ? 8 : 18);
        if (fractionId == 4 && model == -121446169) veh.setMod(48, 4);
        veh.setVariable('id', id);
        vehicles.set(id + offsetFr, 'fuel', vInfo.fuel_full);
        vehicles.set(id + offsetFr, 'fraction_id', fractionId);
        vehicles.set(id + offsetFr, 'hash', model);

        if (boostListHash.has(veh.model)) {
          veh.setVariable('boost', boostListHash.get(veh.model));
        }
      }, [model, position, {
        heading: Math.floor(vehItem[4]),
        numberPlate: number,
        engine: false,
        dimension: 0
      }]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  setFuel: (veh, fuel) => {
    if (!vehicles.exists(veh)) return;

    let vInfo = _methods.methods.getVehicleInfo(veh.model);

    if (vInfo.fuel_full == 1) return;
    if (vInfo.fuel_full < fuel) fuel = vInfo.fuel_full;
    vehicles.set(veh.getVariable('container'), 'fuel', fuel);
    veh.setVariable('fuel', fuel);
  },
  getFuel: veh => {
    if (!vehicles.exists(veh)) return 0;
    return veh.getVariable('fuel');
  },
  setFuelFull: veh => {
    if (!vehicles.exists(veh)) return;

    let vInfo = _methods.methods.getVehicleInfo(veh.model);

    if (vInfo.fuel_full == 1) return;
    vehicles.setFuel(veh, vInfo.fuel_full);
    veh.setVariable('fuel', vInfo.fuel_full);
  },
  checkVehiclesFuel: () => {
    mp.vehicles.forEach(function (veh) {
      if (!vehicles.exists(veh)) return;
      if (!_vSync.vSync.getEngineState(veh)) return;

      let vInfo = _methods.methods.getVehicleInfo(veh.model);

      if (vInfo.fuel_full == 1) return;
      let velocity = veh.velocity;
      let speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);
      let speedMph = Math.round(speed * 2.23693629);
      let fuelMinute = vInfo.fuel_full;
      let fuel = vehicles.getFuel(veh);

      if (fuel <= 0) {
        vehicles.setFuel(veh, 0);

        _vSync.vSync.setEngineState(veh, false);

        return;
      }

      if (speedMph < 1) {
        let result = fuel - fuelMinute * 0.01 / 300;
        vehicles.setFuel(veh, result < 1 ? 0 : result);
      } else if (speedMph > 0 && speedMph < 61) {
        let result = fuel - fuelMinute * 1.5 / 710;
        vehicles.setFuel(veh, result < 1 ? 0 : result);
      } else if (speedMph > 60 && speedMph < 101) {
        let result = fuel - fuelMinute * 0.75 / 480;
        vehicles.setFuel(veh, result < 1 ? 0 : result);
      } else {
        let result = fuel - fuelMinute * 0.75 / 240;
        vehicles.setFuel(veh, result < 1 ? 0 : result);
      }
    });
    setTimeout(vehicles.checkVehiclesFuel, 4500);
  },
  respBySlot: function (player, slot, tome = false) {
    _methods.methods.debug('vehicles.respBySlot');

    if (!_user.user.isLogin(player)) return false;

    let containerId = _user.user.get(player, 'car_id' + slot);

    if (!containerId) return false;
    let isFind = false;
    let jacked = false;
    mp.vehicles.forEach(veh => {
      if (isFind) return;
      if (!vehicles.exists(veh)) return;

      if (veh.getVariable('container') == containerId) {
        if (veh.getOccupants().length > 0) {
          player.notify('~r~Транспорт в угоне');
          isFind = true;
          jacked = true;
          return;
        }

        vehicles.respawn(veh, tome ? false : true);
        isFind = true;
      }
    });

    if (vehicles.get(containerId, 'sell_price') > 0) {
      player.notify('~r~Для начала необходимо убрать транспорт с PDM');
      return false;
    }

    if (!tome) {
      player.notifyWithPicture('Доставка транспорта', 'Механик', 'В течении минуты ваш транспорт будет на месте', 'CHAR_MECHANIC', 2);
    }

    if (jacked) return false;

    if (tome) {
      setTimeout(() => {
        mp.vehicles.forEach(veh => {
          if (!vehicles.exists(veh)) return;

          if (veh.getVariable('container') == containerId) {
            vehicles.respawn(veh, false);
          }
        });
      }, 3000);
    }

    setTimeout(async function () {
      if (tome) {
        if (!mp.players.exists(player)) return;
        let status = await mp.events.callClient(player, "getGround");
        if (player.position.z - status > 5) return player.notifyWithPicture('Доставка транспорта', 'Механик', '~r~Мне не удалось доставить ваш транспорт по вашему местоположению', 'CHAR_MECHANIC', 2);
        if (player.dimension != 0) return player.notifyWithPicture('Доставка транспорта', 'Механик', '~r~Мне не удалось доставить ваш транспорт по вашему местоположению', 'CHAR_MECHANIC', 2);
      }

      if (isFind == false || tome && !jacked) vehicles.spawnPlayerCar(containerId, tome ? true : false, tome ? player.dimension : 0, tome ? player : null);
    }, tome ? 60000 : 1000);
    return true;
  },
  findBySlot: function (player, slot) {
    _methods.methods.debug('vehicles.findBySlot');

    if (!_user.user.isLogin(player)) return;

    let containerId = _user.user.get(player, 'car_id' + slot);

    let isFind = false;
    mp.vehicles.forEach(function (veh) {
      if (!vehicles.exists(veh)) return;

      if (veh.getVariable('container') == containerId) {
        isFind = true;

        _user.user.setWaypoint(player, veh.position.x, veh.position.y);
      }
    });
    if (isFind == false) player.notify('~r~Транспорт не найден, зареспавните его');
  },
  searchBySlot: function (player, slot) {
    _methods.methods.debug('vehicles.findBySlot');

    if (!_user.user.isLogin(player)) return;

    let containerId = _user.user.get(player, 'car_id' + slot);

    let isFind = false;
    mp.vehicles.forEach(function (veh) {
      if (!vehicles.exists(veh)) return;

      if (veh.getVariable('container') == containerId) {
        isFind = true;
      }
    });
    return isFind;
  },
  getBySlot: function (player, slot) {
    _methods.methods.debug('vehicles.findBySlot');

    if (!_user.user.isLogin(player)) return;

    let containerId = _user.user.get(player, 'car_id' + slot);

    let res;
    mp.vehicles.forEach(function (veh) {
      if (!vehicles.exists(veh)) return;

      if (veh.getVariable('container') == containerId) {
        res = veh;
      }
    });
    return res;
  },
  getVehSlot: function (player, veh) {
    _methods.methods.debug('vehicles.findBySlot');

    if (!_user.user.isLogin(player)) return 0;
    let vehId = typeof veh === 'number' ? veh : veh.getVariable('container');
    if (!vehId) return 0;
    let slot = 0;

    for (let id = 1; id < 9; id++) if (_user.user.get(player, 'car_id' + id) === vehId) {
      slot = id;
    }

    return slot;
  },
  generateNumber: function (length = 8) {
    let text = '';
    let possible = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ';

    for (let i = 0; i < length; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
  },
  getPrice: id => {
    return new Promise(resolve => {
      _carsModel.carsEntity.findOne({
        where: {
          id: id
        }
      }).then(item => {
        if (!item) return resolve(null);else return resolve(item.price);
      });
    });
  },
  getOwner: id => {
    return new Promise(resolve => {
      _carsModel.carsEntity.findOne({
        where: {
          id: id
        }
      }).then(item => {
        if (!item) return resolve(null);else return resolve({
          id: item.id_user,
          nick: item.user_name
        });
      });
    });
  },
  buy: (id, player, pos, rot, color) => {
    return new Promise(resolve => {
      if (!mp.players.exists(player)) return resolve(false);

      _carsModel.carsEntity.update({
        color1: color,
        color2: color,
        fuel: _sequelizeTypescript.Sequelize.literal('full_fuel'),
        x: pos.x,
        y: pos.y,
        z: pos.z,
        x_park: pos.x,
        y_park: pos.y,
        z_park: pos.z,
        rot_park: rot,
        money_tax: 0,
        s_oil: 0,
        s_candle: 0,
        s_body: 0,
        s_suspension: 0,
        s_engine: 0,
        s_wh_b_r: 0,
        s_wh_bk_r: 0,
        s_wh_b_l: 0,
        s_wh_bk_l: 0,
        s_mp: 0,
        wanted_level: 0,
        lock_status: 0,
        neon_type: 0,
        sell_price: 0,
        upgrade: JSON.stringify({
          18: -1
        }),
        user_name: _user.user.getRpName(player),
        id_user: _user.user.getId(player)
      }, {
        where: {
          id: id
        }
      }).then(() => {
        if (!mp.players.exists(player)) return resolve(true);
        vehicles.loadPlayerVehicleById(player, id).then(res => {
          resolve(true);
        });
      }).catch(err => {
        console.error(err);
        resolve(false);
      });
    });
  },
  updateOwnerInfo: async (id, userId, userName) => {
    id = _methods.methods.parseInt(id);
    vehicles.set(id, 'user_name', _methods.methods.removeQuotes(userName));
    vehicles.set(id, 'id_user', _methods.methods.parseInt(userId));
    userId = _methods.methods.parseInt(userId);
    await _carsModel.carsEntity.update({
      user_name: userName,
      id_user: userId,
      money_tax: 0
    }, {
      where: {
        id: id
      }
    });

    if (userId == 0) {
      vehicles.park(id, 0, 0, 0, 0);

      _carsModel.carsEntity.update({
        user_name: userName,
        id_user: userId,
        number: vehicles.generateNumber(),
        money_tax: 0,
        s_oil: 0,
        s_candle: 0,
        s_body: 0,
        s_suspension: 0,
        s_engine: 0,
        s_wh_b_r: 0,
        s_wh_bk_r: 0,
        s_wh_b_l: 0,
        s_wh_bk_l: 0,
        s_mp: 0,
        wanted_level: 0,
        lock_status: 0,
        neon_type: 0,
        sell_price: 0,
        upgrade: '{"18":-1}'
      }, {
        where: {
          id: id
        }
      });
    }
  },
  sell: async (player, slot) => {
    _methods.methods.debug('vehicles.sell');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.get(player, 'car_id' + slot) == 0) {
      player.notify('~r~У Вас нет транспорта');
      return;
    }

    let containerId = _user.user.get(player, 'car_id' + slot);

    const veh = mp.vehicles.toArray().find(veh => veh.getVariable('container') == containerId);
    if (!vehicles.exists(veh) || !veh) return player.notify('~r~Для начала зареспавните ТС');
    let vInfo = vehicles.getData(_user.user.get(player, 'car_id' + slot));
    let nalog = vInfo.get('price') * (100 - ((_coffer.coffer.get('cofferNalog') || 15) + 20)) / 100;

    _user.user.set(player, 'car_id' + slot, 0);

    await vehicles.updateOwnerInfo(vInfo.get('id'), 0, '');

    _coffer.coffer.removeMoney(nalog);

    _user.user.addMoney(player, nalog);

    veh.destroy();

    _user.user.log(player, "PlayerSellCar", 'Продал машину @veh' + vInfo.get('id') + ' Цена: $' + _methods.methods.numberFormat(nalog));

    if (!_user.user.isLogin(player)) return;

    _user.user.addHistory(player, 3, 'Продал транспорт ' + vInfo.get('name') + '. Цена: $' + _methods.methods.numberFormat(nalog));

    player.notify('~g~Вы продали транспорт');
    player.notify(`~g~Налог:~s~ ${_coffer.coffer.get('cofferNalog') + 20}\n~g~Получено:~s~ $${_methods.methods.numberFormat(nalog)}`);

    _user.user.saveAccount(player);
  },
  setTunning: veh => {
    setTimeout(function () {
      if (vehicles.exists(veh)) {
        try {
          let car = vehicles.getData(veh.getVariable('container'));
          if (!car.has('color1')) return;
          veh.setColor(car.get('color1'), car.get('color2'));
          if (!car) return;
          if (car.get('neon_type') > 0) veh.setNeonColor(car.get('neon_r'), car.get('neon_g'), car.get('neon_b'));
          veh.livery = car.get('livery');

          if (car.has('upgrade')) {
            let upgrade = JSON.parse(car.get('upgrade'));

            for (let tune in upgrade) {
              if (_methods.methods.parseInt(tune) === 78) veh.wheelType = _methods.methods.parseInt(upgrade[tune]);
            }

            setTimeout(function () {
              try {
                if (!vehicles.exists(veh)) return;

                for (let tune in upgrade) {
                  if (_methods.methods.parseInt(tune) >= 100) continue;
                  if (_methods.methods.parseInt(tune) === 69) veh.windowTint = _methods.methods.parseInt(upgrade[tune]);else veh.setMod(_methods.methods.parseInt(tune), _methods.methods.parseInt(upgrade[tune]));
                }
              } catch (e) {
                console.log(e);
              }
            }, 500);
          }
        } catch (e) {
          console.log(e);
        }
      }
    }, 2000);
  },
  getVehicleOwnerId: vehicle => {
    if (!mp.vehicles.exists(vehicle)) return null;
    let data = vehicles.getData(vehicle.getVariable('container'));
    if (!data) return null;
    return data.get('id_user');
  },
  spawnPlayerCar: (id, isRespawn = false, dim = 0, player) => {
    _methods.methods.debug('vehicles.spawnPlayerCar');

    try {
      let car = vehicles.getData(id);
      if (!car) return console.error("We have problem with spawn player car", id);
      let position = new mp.Vector3(car.get('x'), car.get('y'), car.get('z'));
      let rot = parseFloat(car.get('rot'));

      if (car.get('x_park') != 0) {
        position = new mp.Vector3(car.get('x_park'), car.get('y_park'), car.get('z_park'));
        rot = _methods.methods.parseInt(car.get('rot_park'));
      }

      if (player) {
        if (!mp.players.exists(player)) return;
        if (player.inGreenZone) return player.notifyWithPicture('Доставка транспорта', 'Механик', 'Мне не удалось доставить транспорт в зелёную зону', 'CHAR_MECHANIC', 2);
        if (player.vehicle) return player.notifyWithPicture('Доставка транспорта', 'Механик', 'Мне не удалось доставить транспорт. Вы уже в каком то ТС?', 'CHAR_MECHANIC', 2);
        position = _methods.methods.calculateAttachPosition(player.position, new mp.Vector3(0, 0, player.heading), new mp.Vector3(0, 3, 0));
        rot = player.heading + 90;

        _user.user.log(player, "SpawnVehicle", `Заказал доставку ТС @veh${id}`);
      }

      vehicles.newOrdered(veh => {
        if (!vehicles.exists(veh)) return;
        veh.dbid = id;

        if (isRespawn) {
          veh.numberPlate = car.get('number').toString();

          _vSync.vSync.setLockStatus(veh, true);

          _vSync.vSync.setEngineState(veh, false);

          veh.setColor(car.get('color1'), car.get('color2'));
          let numberStyle = 0;
          if (car.get('id') % 3) numberStyle = 1;else if (car.get('id') % 4) numberStyle = 2;else if (car.get('id') % 5) numberStyle = 3;
          veh.numberPlateType = numberStyle;
          veh.setVariable('id_user', _methods.methods.parseInt(car.get('id_user')));
          veh.setVariable('container', id);
          veh.setVariable('fuel', car.get('fuel'));
          veh.setVariable('price', car.get('price'));
          vehicles.setTunning(veh);

          _methods.methods.debug(`[${car.get('id')}] Spawned ${car.get('name')} at ${position.x}, ${position.y}, ${position.z}`);
        } else {
          setTimeout(function () {
            if (!vehicles.exists(veh)) return;
            veh.numberPlate = car.get('number').toString();

            _vSync.vSync.setLockStatus(veh, true);

            _vSync.vSync.setEngineState(veh, false);

            veh.livery = car.get('livery');
            veh.setColor(car.get('color1'), car.get('color2'));
            let numberStyle = 0;
            if (car.get('id') % 3) numberStyle = 1;else if (car.get('id') % 4) numberStyle = 2;else if (car.get('id') % 5) numberStyle = 3;
            veh.numberPlateType = numberStyle;
            veh.setVariable('id_user', _methods.methods.parseInt(car.get('id_user')));
            veh.setVariable('container', id);
            veh.setVariable('fuel', car.get('fuel'));
            veh.setVariable('price', car.get('price'));
            vehicles.setTunning(veh);

            _methods.methods.debug(`[${car.get('id')}] Spawned ${car.get('name')} at ${position.x}, ${position.y}, ${position.z} | ${veh.dimension}`);
          }, 5000);
        }
      }, [car.get('hash'), position, {
        heading: rot,
        numberPlate: 'SA',
        engine: false,
        dimension: dim
      }]);
    } catch (e) {
      console.log(e);
    }
  },
  spawnJobCar: (position, heading, nameOrModel, job, cb) => {
    _methods.methods.debug('vehicles.spawnJobCar ' + nameOrModel);

    if (typeof nameOrModel == 'string') nameOrModel = mp.joaat(nameOrModel);
    jobCount++;
    let model = nameOrModel;
    let livery = 0;
    let id = jobCount;
    let CountCars = jobCount;

    let color1 = _methods.methods.getRandomInt(0, 156);

    let color2 = _methods.methods.getRandomInt(0, 156);

    let number = 'SA' + CountCars;

    switch (job) {
      case 'scrap':
        {
          color1 = 111;
          color2 = 111;
          number = 'SCRP' + CountCars;
          break;
        }

      case 'mail':
        {
          color1 = 111;
          color2 = 111;
          number = 'POST' + CountCars;
          break;
        }

      case 'mail2':
        {
          color1 = 111;
          color2 = 111;
          livery = 1;
          number = 'GO' + CountCars;
          break;
        }

      case 'trucker11':
        {
          color1 = 105;
          color2 = 105;
          number = 'POST' + CountCars;
          job = 'trucker1';
          break;
        }

      case 'trucker12':
        {
          color1 = 111;
          color2 = 111;
          livery = 1;
          number = 'GO' + CountCars;
          job = 'trucker1';
          break;
        }

      case 'trucker21':
        {
          color1 = 28;
          color2 = 0;
          number = 'BGO' + CountCars;
          job = 'trucker2';
          break;
        }

      case 'trucker22':
        {
          color1 = 127;
          color2 = 111;
          number = 'JET' + CountCars;
          job = 'trucker2';
          break;
        }

      case 'trucker23':
        {
          color1 = 13;
          color2 = 13;
          number = 'LAND' + CountCars;
          job = 'trucker2';
          break;
        }

      case 'trucker31':
        {
          color1 = 28;
          color2 = 0;
          number = 'BGO' + CountCars;
          job = 'trucker3';
          break;
        }

      case 'trucker32':
        {
          color1 = 127;
          color2 = 111;
          number = 'JET' + CountCars;
          job = 'trucker3';
          break;
        }

      case 'trucker33':
        {
          color1 = 8;
          color2 = 8;
          number = 'LAND' + CountCars;
          job = 'trucker3';
          break;
        }

      case 'trash':
        {
          color1 = 85;
          color2 = 59;
          number = 'TRSH' + CountCars;
          break;
        }

      case 'water':
        {
          color1 = 111;
          color2 = 111;
          livery = 3;
          number = 'LSWP' + CountCars;
          break;
        }

      case 'sunb':
        {
          color1 = 111;
          color2 = 111;
          number = 'SUN' + CountCars;
          break;
        }

      case 'bgstar':
        {
          color1 = 111;
          color2 = 111;
          number = 'BS' + CountCars;
          break;
        }

      case 'bshot':
        {
          color1 = 44;
          color2 = 44;
          number = 'BSH' + CountCars;
          break;
        }

      case 'bus1':
        {
          color1 = 38;
          color2 = 111;
          number = 'LS' + CountCars;
          break;
        }

      case 'bus2':
        {
          color1 = 134;
          color2 = 134;
          number = 'LSIA' + CountCars;
          break;
        }

      case 'bus3':
        {
          color1 = 132;
          color2 = 132;
          number = 'SA' + CountCars;
          break;
        }

      case 'hlab':
        {
          color1 = 2;
          color2 = 2;
          number = 'HLAB' + CountCars;
          break;
        }

      case 'three':
        {
          color1 = 111;
          color2 = 111;
          number = 'CNR' + CountCars;
          break;
        }

      case 'photo':
        {
          color1 = 44;
          color2 = 0;
          number = 'INV' + CountCars;
          break;
        }

      case 'gr6':
        {
          color1 = 111;
          color2 = 55;
          number = 'GR6' + CountCars;
          break;
        }

      case 'trucker1':
        {
          number = 'SA' + CountCars;
          break;
        }

      case 'taxi1':
        {
          color1 = 88;
          color2 = 0;

          if (model == -956048545) {
            color1 = 0;
            color2 = 88;
          }

          number = 'DTC' + CountCars;
          break;
        }

      case 'taxi2':
        {
          color1 = 111;
          color2 = 28;

          if (model == -1150599089) {
            color1 = 28;
            color2 = 111;
          }

          number = 'EXP' + CountCars;
          break;
        }
    }

    vehicles.newOrdered(veh => {
      if (!vehicles.exists(veh)) return;

      let vInfo = _methods.methods.getVehicleInfo(model);

      veh.isJob = true;
      veh.numberPlate = number;

      _vSync.vSync.setEngineState(veh, false);

      veh.locked = false;
      veh.livery = livery;
      veh.setColor(color1, color2);
      veh.setVariable('container', id + offsetJob);
      veh.setVariable('fuel', vInfo.fuel_full);
      veh.setVariable('job', job);
      veh.setVariable('id', id);
      veh.setVariable('gr6Money', 0);
      vehicles.set(id + offsetJob, 'fuel', vInfo.fuel_full);
      vehicles.set(id + offsetJob, 'job', job);
      vehicles.set(id + offsetJob, 'hash', model);
      cb(veh);
    }, [model, position, {
      heading: Math.floor(heading),
      numberPlate: number,
      engine: false,
      dimension: 0
    }]);
  },
  spawnRentCar: (player, position, heading, nameOrModel, color = 1) => {
    return new Promise(resolve => {
      _methods.methods.debug('vehicles.spawnRentCar ' + nameOrModel);

      if (!_user.user.isLogin(player)) return resolve(null);

      try {
        if (typeof nameOrModel == 'string') nameOrModel = mp.joaat(nameOrModel);
        let model = nameOrModel;
        CountRentCars++;
        const ids = CountRentCars;
        let number = 'RNT' + ids;

        _inventory.inventory.getItemListData(8, number).map(item => {
          _inventory.inventory.deleteItem(item.id);
        });

        vehicles.newOrdered(veh => {
          if (!vehicles.exists(veh)) return;

          let vInfo = _methods.methods.getVehicleInfo(model);

          veh.numberPlate = number;

          _vSync.vSync.setEngineState(veh, false);

          veh.locked = true;
          veh.isRent = true;
          veh.setColor(color, color);
          veh.setVariable('container', ids + offsetRent);
          veh.setVariable('fuel', vInfo.fuel_full);
          veh.setVariable('rentOwner', _user.user.getId(player));
          veh.setVariable('id', ids);
          vehicles.set(ids + offsetRent, 'fuel', vInfo.fuel_full);
          vehicles.set(ids + offsetRent, 'rentOwner', _user.user.getId(player));
          vehicles.set(ids + offsetRent, 'hash', model);
          resolve(veh);
        }, [model, position, {
          heading: Math.floor(heading),
          numberPlate: number,
          engine: false,
          dimension: 0
        }]);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  spawnCar: (position, heading, nameOrModel, number = undefined) => {
    _methods.methods.debug('vehicles.spawnCar ' + nameOrModel);

    let modelname = '';

    if (typeof nameOrModel == 'string') {
      modelname = `${nameOrModel}`;
      nameOrModel = mp.joaat(nameOrModel);
    }

    let model = nameOrModel;
    CountAllCars++;

    let color1 = _methods.methods.getRandomInt(0, 156);

    let color2 = color1;
    if (number === undefined) number = vehicles.generateNumber();
    let veh = mp.vehicles.new(model, position, {
      heading: Math.floor(heading),
      numberPlate: number,
      engine: false,
      dimension: 0
    });
    if (modelname) veh.modelname = modelname;

    let vInfo = _methods.methods.getVehicleInfo(model);

    veh.numberPlate = number;

    _vSync.vSync.setEngineState(veh, false);

    veh.locked = false;
    veh.setColor(color1, color2);
    veh.setVariable('container', CountAllCars + offsetAll);
    veh.setVariable('fuel', vInfo.fuel_full);
    veh.setVariable('id', CountAllCars);
    vehicles.set(CountAllCars + offsetAll, 'fuel', vInfo.fuel_full);
    vehicles.set(CountAllCars + offsetAll, 'hash', model);
    return veh;
  },
  spawnCar2: (cb, position, heading, nameOrModel, color1 = -1, color2 = -1, liv = -1, number = undefined) => {
    _methods.methods.debug('vehicles.spawnCar2 ' + nameOrModel);

    if (typeof nameOrModel == 'string') nameOrModel = mp.joaat(nameOrModel.toLowerCase());
    let model = nameOrModel;
    CountAllCars++;
    if (color1 == -1) color1 = _methods.methods.getRandomInt(0, 156);
    if (color2 == -1) color2 = color1;
    if (number === undefined) number = vehicles.generateNumber();
    vehicles.newOrdered(veh => {
      if (!vehicles.exists(veh)) return;

      let vInfo = _methods.methods.getVehicleInfo(model);

      veh.numberPlate = number;

      _vSync.vSync.setEngineState(veh, false);

      veh.locked = false;
      if (liv >= 0) veh.livery = liv;
      veh.setColor(color1, color2);
      veh.setVariable('container', CountAllCars + offsetAll);
      veh.setVariable('fuel', vInfo.fuel_full);
      veh.setVariable('id', CountAllCars);
      vehicles.set(CountAllCars + offsetAll, 'fuel', vInfo.fuel_full);
      vehicles.set(CountAllCars + offsetAll, 'hash', model);
      cb(veh);
    }, [model, position, {
      heading: Math.floor(heading),
      numberPlate: number,
      engine: false,
      dimension: 0
    }]);
  },
  lockStatus: (player, vehicle, status = null) => {
    _methods.methods.debug('vehicles.lockStatus');

    try {
      let currentStatus = status != null ? !status : vehicle.locked;
      vehicle.locked = !currentStatus;
      vehicle.setVariable('locked', vehicle.locked);

      _vSync.vSync.setLockStatus(vehicle, vehicle.locked);

      if (player && mp.players.exists(player)) mp.events.triggerBrowser(player, 'cef:speedometer:setLockCar', vehicle.locked);
      if (player && mp.players.exists(player)) _inventory.inventory.updateInventory(player);
      if (status != null) return;
      if (!player || !mp.players.exists(player)) return;
      if (!vehicle.locked) player.notify('~g~Вы открыли транспорт');else player.notify('~r~Вы закрыли транспорт');
    } catch (e) {
      console.log(e);
    }
  },
  engineStatus: (player, vehicle, status = null) => {
    _methods.methods.debug('vehicles.engineStatus');

    if (!_user.user.isLogin(player)) return;
    if (!vehicles.exists(vehicle)) return;

    try {
      if (vehicle.getVariable('fuel') == 0) {
        if (status != null) player.notify('~r~В транспорте закончился бензин');
        if (status != null) player.notify('~b~Метка на заправку установлена');

        if (status != null) {
          let pos = _fuel.fuel.findNearest(player.position);

          _user.user.setWaypoint(player, pos.x, pos.y);
        }

        _vSync.vSync.setEngineState(vehicle, false);

        return;
      }

      let eStatus = status ? status : !_vSync.vSync.getEngineState(vehicle);

      _vSync.vSync.setEngineState(vehicle, eStatus);

      if (status != null) return;
      if (eStatus) player.notify('~g~Вы завели двигатель');else player.notify('~r~Вы заглушили двигатель');
    } catch (e) {
      console.log(e);
    }
  },
  neonStatus: (player, vehicle) => {
    _methods.methods.debug('vehicles.neonStatus');

    if (!_user.user.isLogin(player)) return;
    if (!vehicles.exists(vehicle)) return;

    try {
      vehicle.neonEnabled = !vehicle.neonEnabled;

      if (vehicle.neonEnabled) {
        let car = vehicles.getData(vehicle.getVariable('container'));
        vehicle.setNeonColor(car.get('neon_r'), car.get('neon_g'), car.get('neon_b'));
      }
    } catch (e) {
      console.log(e);
    }
  },
  exists: vehicle => {
    return vehicle && mp.vehicles.exists(vehicle);
  }
};
exports.vehicles = vehicles;
mp.events.add('vehicleRadio', (player, vehRadio) => {
  if (!player.vehicle) return;
  player.vehicle.setVariable('radioStation', vehRadio);
});
setInterval(() => {
  let plateList = [];
  mp.vehicles.forEach(veh => {
    if (!veh.blockboost && boostListHash.has(veh.model)) {
      if (veh.getVariable('boost') != boostListHash.get(veh.model)) veh.setVariable('boost', boostListHash.get(veh.model));
    }

    if (veh.getVariable('container')) {
      if (plateList.indexOf(veh.numberPlate + veh.model + veh.getVariable('container')) > -1) veh.destroy();else plateList.push(veh.numberPlate + veh.model + veh.getVariable('container'));
    }
  });
}, 4000);
setInterval(() => {
  mp.vehicles.forEach(veh => {
    let vInfo = _methods.methods.getVehicleInfo(veh.model);

    if (vInfo) {
      if (vInfo.class_name == "Boats") return;
    }

    if (!veh.afkCount) veh.afkCount = 0;
    if (veh.getOccupants().length == 0) veh.afkCount += AFK_TIME_INTERVAL_SECS;else veh.afkCount = 0;
    let needTime = MAX_VEHICLE_AFK_MINUTES;
    if (veh.admin) needTime = 90;
    if (veh.dbid) needTime = 60;
    if (veh.fractiongarage) needTime = 180;

    if (needTime < veh.afkCount / 60) {
      vehicles.destroy(veh);
    }
  });
}, AFK_TIME_INTERVAL_SECS * 1000);
mp.events.add('server:vehicleFreeze', player => {
  if (!player.vehicle) return;
  player.vehicle.setVariable('freezePosition', !!!player.vehicle.getVariable('freezePosition'));
});
},{"./modules/data":"Edcz","./enums":"ZRYf","./user":"QE3B","./coffer":"sKID","./business/fuel":"nyp7","./modules/methods":"qXSp","./managers/vSync":"waLt","./modules/entity/vehicleBooster":"fCpW","./inventory":"m5ow","./modules/entity/carsModel":"pv82","../util/vehsell":"iKyq","./modules/menu":"Aiz7","./modules/vehicleInfo":"f3Ap"}],"e1Zb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enabledSystem = exports.chat = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _methods2 = require("../../util/methods");

var _vip = require("../../util/vip");

var _menu = require("./menu");

let commands = {};
const chat = {
  registerCommand: (name, func) => {
    console.log("[Register chat command]", name);

    if (typeof name != "string") {
      name.map(sname => {
        commands[sname] = func;
      });
    } else commands[name] = func;
  },
  clRed: '#f44336',
  clBlue: '#2196F3',
  clOrange: '#FFC107',
  clWhite: '#FFFFFF',
  clGreen: '#2ef26c',
  clBlack: '#000000',
  sendBCommand: function (player, text) {
    if (_user.user.isLogin(player)) {
      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{2196F3} Игрок (${_user.user.getShowingIdString(nplayer, player)}): !{FFFFFF}(( ${escape(text)} )) `);
      });

      _methods.methods.saveLog('ChatCmd', `/b ${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${text}`);
    }
  },
  sendTryCommand: function (player, text) {
    if (_user.user.isLogin(player)) {
      let lucky = _methods.methods.getRandomInt(0, 2) == 0 ? 'Не удачно' : 'Удачно';
      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{C2A2DA} ${lucky} ${_user.user.getShowingIdString(nplayer, player)}  ${escape(text)}`);
      });

      _methods.methods.saveLog('ChatCmd', `/try ${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${text} (${lucky})`);
    }
  },
  sendDoCommand: function (player, text) {
    if (_user.user.isLogin(player)) {
      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{C2A2DA} (( ${escape(text)} )) ${_user.user.getShowingIdString(nplayer, player)} `);
      });

      _methods.methods.saveLog('ChatCmd', `/do ${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${text}`);
    }
  },
  sendMeCommand: function (player, text) {
    if (_user.user.isLogin(player)) {
      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{C2A2DA}${_user.user.getShowingIdString(nplayer, player)} ${escape(text)}`);
      });

      _methods.methods.saveLog('ChatCmd', `/me ${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${text}`);
    }
  },
  sendDiceCommand: function (player) {
    if (_user.user.isLogin(player)) {
      let dice = _methods.methods.getRandomInt(1, 6);

      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{C2A2DA}${_user.user.getShowingIdString(nplayer, player)} бросил кости !{FF9800}(( Выпало ${dice} ))`);
      });

      _methods.methods.saveLog('Dice', `${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${dice}`);
    }
  },
  send: function (player, text) {
    if (_user.user.isLogin(player)) {
      mp.players.forEach(nplayer => {
        if (nplayer.dist(player.position) < range && nplayer.dimension == player.dimension) nplayer.outputChatBox(`[${chat.getTime()}] !{2196F3}Игрок (${_user.user.getShowingIdString(nplayer, player)}) говорит:!{FFFFFF} ${escape(text)}`);
      });

      _methods.methods.saveLog('Chat', `${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${text}`);
    }
  },
  sendPos: function (pos, range, sender, text, color = '2196F3') {
    mp.players.broadcastInRange(pos, range, `[${chat.getTime()}] !{${color}} ${sender}:!{FFFFFF} ${escape(text)}`);
  },
  sendToAll: function (sender, text, color = '2196F3') {
    mp.players.broadcast(`[${chat.getTime()}] !{${color}} ${sender}:!{FFFFFF} ${escape(text)}`);
  },
  sendAdmins: function (sender, text, color = '309c7f') {
    mp.players.forEach(nuser => {
      if (_user.user.isAdmin(nuser) && nuser.getVariable('enableAdmin')) nuser.outputChatBox(`[${chat.getTime()}] !{${color}} ADMIN ${_user.user.getRpName(sender)} (${_user.user.getId(sender)}) (LVL:${_user.user.get(sender, 'admin_level')}):!{FFFFFF} ${escape(text)}`);
    });
  },
  sendFractionMessage: function (sender, fraction, text, color = '5d98f1') {
    mp.players.forEach(nuser => {
      if (_user.user.getPlayerFraction(nuser) == fraction) nuser.outputChatBox(`[${chat.getTime()}] !{${color}} [${_user.user.getPlayerFractionName(nuser)}] ${_user.user.getRpName(sender)}:!{FFFFFF} ${escape(text)}`);
    });
  },
  broadcastAdmins: function (sender, text, color = '2196F3') {
    mp.players.forEach(nuser => {
      if (_user.user.isAdmin(nuser) && nuser.getVariable('enableAdmin')) nuser.outputChatBox(`[${chat.getTime()}] !{${color}} ${sender}:!{FFFFFF} ${escape(text)}`);
    });
  },
  sendHelpers: function (sender, text, color = 'f7a500') {
    mp.players.forEach(nuser => {
      if (_user.user.isHelper(nuser)) nuser.outputChatBox(`[${chat.getTime()}] !{${color}} HELPER ${_user.user.getRpName(sender)} (${_user.user.getId(sender)}) (LVL:${_user.user.get(sender, 'helper_level')}):!{FFFFFF} ${escape(text)}`);
    });
  },
  sendGosRank: function (sender, text, rank = 7, color = '7FADED') {
    mp.players.forEach(nuser => {
      if (_user.user.isGos(nuser) && _user.user.get(nuser, 'rank') >= rank) nuser.outputChatBox(`[${chat.getTime()}] !{${color}} [GOS] ${_user.user.getRpName(sender)} (${_user.user.getFractionName(_user.user.get(sender, 'fraction_id'))}):!{FFFFFF} ${escape(text)}`);
    });
  },
  getTime: function () {
    let dateTime = new Date();
    return `${_methods.methods.digitFormat(dateTime.getHours())}:${_methods.methods.digitFormat(dateTime.getMinutes())}:${_methods.methods.digitFormat(dateTime.getSeconds())}`;
  },
  text: args => args.join(' ')
};
exports.chat = chat;
let range = 15;
mp.events.add('server:chat:sendBCommand', function (player, text) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendBCommand(player, text);
});
mp.events.add('server:chat:sendTryCommand', function (player, text) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendTryCommand(player, text);
});
mp.events.add('server:chat:sendDoCommand', function (player, text) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendDoCommand(player, text);
});
mp.events.add('server:chat:sendMeCommand', function (player, text) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendMeCommand(player, text);
});
mp.events.add('server:chat:sendDiceCommand', function (player) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendDiceCommand(player);
});
mp.events.add('server:chat:send', function (player, text) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.send(player, text);
});
mp.events.add('server:chat:sendToAll', function (player, sender, text, color) {
  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.sendToAll(sender, text, color);
});
mp.events.add('playerChat', function (player, text) {
  if (player.health == 0) return player.outputChatBox("Вы без сознания");

  let mute = _user.user.checkMutePlayer(player, "chat");

  if (mute) {
    let date = new Date(Math.floor(mute) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
    return player.outputChatBox("У вас блокировка текстового чата до " + formattedTime);
  }

  chat.send(player, text);
});
mp.events.add('playerCommand', (player, command) => {
  const args = command.split(/[ ]+/);
  const commandName = args[0].toLowerCase();
  args.shift();
  if (commands[commandName]) commands[commandName](player, ...args);else {
    player.outputChatBox(`!{FFC107}Список доступных команд: /me, /do, /try, /b. Используйте меню на кнопку M`);
    if (_user.user.isAdminNow(player)) player.outputChatBox(`!{FFC107}Со списком команд администратора вы можете ознакомится вызвав команду /ahelp`);
    if (_user.user.isHelper(player)) player.outputChatBox(`!{FFC107}Для хелперов доступен чат, команда /h [TEXT]`);
    if (_user.user.isGos(player) && _user.user.get(player, 'rank') >= 7) player.outputChatBox(`!{FFC107}Для членов гос.фракций (>6) доступен чат /g [TEXT]`);
  }
});
let maxNumberForQuiz = 30;
let currentQuiz = 0;
let answersQuiz = ["Вы были близко, но мимо", "Неа, не верно", "Верно, а не, ошибочка", "Ответ не верный", "Мы бы хотели чтобы это был правильный ответ, но он не правильный", "В другой раз вы угадаете"];
setTimeout(() => {
  setTimeout(() => {
    runQuiz();
  }, 60000 * _methods.methods.getRandomInt(40, 60));
}, 10000);

function runQuiz() {
  maxNumberForQuiz = _methods.methods.getRandomInt(30, 50);
  currentQuiz = _methods.methods.getRandomInt(1, maxNumberForQuiz);
  chat.sendToAll('Викторина', `!{${chat.clBlue}} Внезапная викторина, отгадайте случайное число !{${chat.clWhite}}от 1 до ${maxNumberForQuiz}!{${chat.clBlue}}. Кто первый отгадает получит !{${chat.clGreen}}$${maxNumberForQuiz * 100}!{${chat.clBlue}}. Чтобы отгадать введите в чат команду !{${chat.clWhite}}/quiz ЦИФРА!{${chat.clBlue}}`, chat.clBlue);
  let tm = setInterval(() => {
    if (currentQuiz == 0) return clearInterval(tm);
    chat.sendToAll('Викторина', `!{${chat.clBlue}} Внезапная викторина, отгадайте случайное число !{${chat.clWhite}}от 1 до ${maxNumberForQuiz}!{${chat.clBlue}}. Кто первый отгадает получит !{${chat.clGreen}}$${maxNumberForQuiz * 100}!{${chat.clBlue}}. Чтобы отгадать введите в чат команду !{${chat.clWhite}}/quiz ЦИФРА!{${chat.clBlue}}`, chat.clBlue);
  }, 120000);
}

chat.registerCommand('quiz', (player, numbs) => {
  if (!_user.user.isLogin(player)) return;
  if (player.spamProtect) return player.notify(`~r~Вы не можете вводить ответ так часто.`);
  if (currentQuiz == 0) return player.notify(`~r~Сейчас нет викторины.`);
  if (!numbs) return player.notify(`~r~Вы не указали свой вариант ответа`);
  player.spamProtect = true;
  setTimeout(() => {
    player.spamProtect = false;
  }, 3000);

  let numb = _methods.methods.parseInt(numbs);

  if (isNaN(numb) || numb < 1 || numb > maxNumberForQuiz) return player.notify("~r~Допускается цифра от 1 до " + maxNumberForQuiz);

  if (numb == currentQuiz) {
    const answ = currentQuiz;
    currentQuiz = 0;
    player.notify('~g~Поздравляем, вы выиграли ' + maxNumberForQuiz * 100 + "$");

    _user.user.addCashMoney(player, maxNumberForQuiz * 100);

    chat.sendToAll('Викторина', `!{${chat.clBlue}}А вот и победитель, а его имя !{${chat.clWhite}}${_user.user.getRpName(player)} (${_user.user.getId(player)})!{${chat.clBlue}}`, chat.clBlue);
    setTimeout(() => {
      runQuiz();
    }, 60000 * _methods.methods.getRandomInt(40, 60));
  } else {
    player.notify(`~r~${(0, _methods2.randomArrayEl)(answersQuiz)}`);
  }
});
chat.registerCommand('g', (player, ...textarr) => {
  if (!_user.user.isGos(player)) return;
  if (_user.user.get(player, 'rank') < 7) return;
  let text = chat.text(textarr);
  chat.sendGosRank(player, text);
});
chat.registerCommand('cmute', (player, ids, times, ...reasonarr) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!ids) return player.outputChatBox('Синтаксис команды следующий: /cmute [id] [time] [reason]. id указывайте игрока (игрок должен быть в сети), time - время в минутах (если уже есть мут - он будет продлён), reason - причина');

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("ID указан не верно");

  let minutes = _methods.methods.parseInt(times);

  if (isNaN(minutes) || minutes < 0) return player.notify("Время указанно не верно");

  let nplayer = _user.user.getPlayerById(id);

  if (!nplayer) return player.notify("ID указан не верно");
  if (minutes == 0) return _user.user.mutePlayer(nplayer, player, minutes, "chat"), player.notify("Мут снят");
  let reason = reasonarr.join(' ');
  if (reason.length < 2) return player.notify("Укажите причину");

  _user.user.mutePlayer(nplayer, player, minutes, "chat", reason);
});
chat.registerCommand('vmute', (player, ids, times, ...reasonarr) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!ids) return player.outputChatBox('Синтаксис команды следующий: /vmute [id] [time] [reason]. id указывайте игрока (игрок должен быть в сети), time - время в минутах (если уже есть мут - он будет продлён), reason - причина');

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("ID указан не верно");

  let minutes = _methods.methods.parseInt(times);

  if (isNaN(minutes) || minutes < 0) return player.notify("Время указанно не верно");

  let nplayer = _user.user.getPlayerById(id);

  if (!nplayer) return player.notify("ID указан не верно");
  if (minutes == 0) return _user.user.mutePlayer(nplayer, player, minutes, "voice"), player.notify("Мут снят");
  let reason = reasonarr.join(' ');
  if (reason.length < 2) return player.notify("Укажите причину");

  _user.user.mutePlayer(nplayer, player, minutes, "voice", reason);
});
chat.registerCommand('ahelp', player => {
  if (!_user.user.isAdmin(player)) return;
  player.outputChatBox('Список доступных команд:');
  player.outputChatBox('/ban [id] [reason] - Забанить игрока по ID');
  player.outputChatBox('/unban [id] - Разбанить игрока');
  player.outputChatBox('/cmute [id] [time] [reason] - Выдать мут игроку в минутах в текстовом чате');
  player.outputChatBox('/vmute [id] [time] [reason] - Выдать мут игроку в минутах в голосовом чате');
  player.outputChatBox('/sp [id] - Следить за игроком');
  player.outputChatBox('/d [id] - Сменить измерение (Основное - 0)');
  player.outputChatBox('/admins - Список администраторов в сети');
  player.outputChatBox('/helpers - Список хелперов в сети');
  player.outputChatBox('/a [TEXT] - Отправить сообщение в чат администраторов');
  player.outputChatBox('/pos - Текущая позиция');
  player.outputChatBox('/tp [id] | [x] [y] [z] - Телепортироватся к игроку по ID или телепортироватся на позицию по координатам');
  player.outputChatBox('/tpm [id] - Телепортировать игрока по ID к вам');
  player.outputChatBox('/tpveh [number] - Телепортировать ТС к себе');
  player.outputChatBox('/cmp [name] [limit] - Создать точку МП (limit - опционально, количество участников)');
  player.outputChatBox('/checkmp [name] - Проверить текущее количество участников');
  player.outputChatBox('/dmp [name] - Удалить МП');
  player.outputChatBox('/stopmp [name] - Закрыть МП для участия');
});
chat.registerCommand('pos', (player, name) => {
  let text = `X: ${player.position.x} | Y: ${player.position.y} | Z: ${player.position.z} | H: ${player.heading}`;
  player.outputChatBox(text);
  if (!_user.user.isAdmin(player)) return;

  if (name) {
    if (player.vehicle) {
      let rot = player.vehicle.rotation;
      text = 'TYPE: VEHICLE | ' + text + ` | ROT: ${rot.x}, ${rot.y}, ${rot.z}`;
    } else {
      text = 'TYPE: PLAYER | ' + text;
    }

    text += ` | NAME: ${name}`;
  }

  _methods.methods.saveLog('Pos', text + '\n');
});
chat.registerCommand('tp', (player, qx, qy, qz) => {
  if (!_user.user.isAdminNow(player)) return;

  if (qx && !qy && !qz) {
    let id = _methods.methods.parseInt(qx);

    let target = _user.user.getPlayerById(id);

    if (!target) return player.notify("Игрок не обнаружен");
    if (target.teleportBlock && _user.user.getAdminLevel(player) < 5) return player.notify(`~r~Данного администратора нельзя телепортировать`);
    if (player.vehicle) player.vehicle.dimension = target.dimension;
    player.dimension = target.dimension;
    return player.vehicle ? _user.user.teleportVeh(player, target.position.x, target.position.y, target.position.z + 2) : _user.user.teleport(player, target.position.x, target.position.y, target.position.z + 2);
  }

  let x = _methods.methods.parseFloat(qx);

  let y = _methods.methods.parseFloat(qy);

  let z = _methods.methods.parseFloat(qz);

  player.vehicle ? _user.user.teleportVeh(player, x, y, z) : _user.user.teleport(player, x, y, z);
});
chat.registerCommand('tpm', (player, ids) => {
  if (!_user.user.isAdminNow(player)) return;

  if (ids) {
    let id = _methods.methods.parseInt(ids);

    let target = _user.user.getPlayerById(id);

    if (!target) return player.notify("Игрок не обнаружен");
    if (target.teleportBlock && _user.user.getAdminLevel(player) < 5) return player.notify(`~r~К данному администратору нельзя телепортироваться`);
    if (target.vehicle) target.vehicle.dimension = player.dimension;
    target.dimension = player.dimension;
    return target.vehicle ? _user.user.teleportVeh(target, player.position.x, player.position.y, player.position.z) : _user.user.teleport(target, player.position.x, player.position.y, player.position.z);
  }
});
chat.registerCommand('tpveh', (player, number) => {
  if (!_user.user.isAdminNow(player)) return;

  let veh = _vehicles.vehicles.findVehicleByNumber(number);

  if (!veh) {
    let id = _methods.methods.parseInt(number);

    if (!isNaN(id) && id > 0) veh = mp.vehicles.toArray().find(veh => veh.id == id);
  }

  if (!veh) return player.notify("ТС не обнаружен");

  _methods.methods.teleportVehicle(veh, player.position, 0, player.dimension);
});
chat.registerCommand('me', (player, ...text) => chat.sendMeCommand(player, chat.text(text)));
chat.registerCommand('do', (player, ...text) => chat.sendDoCommand(player, chat.text(text)));
chat.registerCommand('try', (player, ...text) => chat.sendTryCommand(player, chat.text(text)));
chat.registerCommand('b', (player, ...text) => chat.sendBCommand(player, chat.text(text)));
chat.registerCommand('a', (player, ...text) => {
  if (!_user.user.isAdminNow(player)) return;
  chat.sendAdmins(player, chat.text(text));
});
chat.registerCommand('h', (player, ...text) => {
  if (!_user.user.isHelper(player)) return;
  chat.sendHelpers(player, chat.text(text));
});
chat.registerCommand('sp', (player, ids) => {
  if (player.spectateTarget) return _user.user.stopSpectate(player);
  if (!_user.user.isAdminNow(player)) return;
  if (!ids) return player.notify("Формат команды: /sp [ID]");

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("ID указан не верно");

  let nplayer = _user.user.getPlayerById(id);

  if (!nplayer) return player.notify("ID указан не верно");
  if (nplayer.spectateTarget) return player.notify(`${_user.user.getRpName(nplayer)} за кем то наблюдает`);
  if (nplayer.teleportBlock && _user.user.getAdminLevel(player) < 5) return player.notify(`~r~За данным администратором нельзя наблюдать`);

  _user.user.startSpectate(player, nplayer);
});
chat.registerCommand('d', (player, ids) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!ids) return player.notify("Формат команды: /d [ID]. Ваше текущее измерение: " + player.dimension);

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("ID измерения указан не верно");
  player.dimension = id;
  player.notify("Измерение изменено на " + id);
});
chat.registerCommand('unban', (player, ids) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!ids) return player.notify("Формат команды: /unban [ID]");

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("ID указан не верно");

  _menu.menu.input(player, "Введите причину", "", 20, "text").then(val => {
    if (!val) return;

    _user.user.unbanuser(id, player, val);
  });

  player.notify("Пользователь разблокирован");
});
chat.registerCommand('ban', async (player, ids, ...reason) => {
  if (!_user.user.isAdminNow(player, 2)) return;
  if (!ids || !reason) return player.outputChatBox('Синтаксис команды следующий: /ban [id] [reason]');

  let id = _methods.methods.parseInt(ids);

  if (isNaN(id) || id < 0) return player.notify("~r~ID указан не верно");
  const data = await _user.user.getUserDataFromDB(id);
  if (!data) return player.notify("~r~ID не обнаружен");
  if (data.admin_level > _user.user.getAdminLevel(player)) return player.notify("~r~Указанный игрок выше ваш по уровню админки");
  (0, _user.banUser)(player, id, data.rp_name, data.admin_level, reason.join(" "));
});
chat.registerCommand('admins', player => {
  if (!_user.user.isAdmin(player)) return;
  player.outputChatBox(`!{70bf63}Список администраторов:`);
  setTimeout(() => {
    mp.players.toArray().map(nplayer => {
      if (_user.user.isAdmin(nplayer)) player.outputChatBox(`${_user.user.get(nplayer, 'rp_name')} (${_user.user.getId(nplayer)}) (LVL:${_user.user.get(nplayer, 'admin_level')})`);
    });
  }, 100);
});
chat.registerCommand('helpers', player => {
  if (!_user.user.isAdmin(player)) return;
  player.outputChatBox(`!{70bf63}Список хелперов:`);
  setTimeout(() => {
    mp.players.toArray().map(nplayer => {
      if (_user.user.isHelper(nplayer) && !_user.user.isAdmin(nplayer)) player.outputChatBox(`${_user.user.get(nplayer, 'rp_name')} (${_user.user.getId(nplayer)}) (LVL:${_user.user.get(nplayer, 'helper_level')})`);
    });
  }, 100);
});
chat.registerCommand(['p', 'netstat'], async player => {
  _user.user.testNet(player);
});
chat.registerCommand('fps', async player => {
  _user.user.testPC(player);
});
chat.registerCommand('vipuninvite', player => {
  if (_user.user.getVipStatusData(player) && _user.user.getVipStatusData(player).vipuninvite) {
    _user.user.set(player, 'fraction_id', 0);

    _user.user.set(player, 'rank', 0);

    _user.user.saveAccount(player);

    player.notify('~g~Вы уволились из организации');

    _user.user.updateClientCache(player);
  } else player.notify(`~r~Данная команда доступна для ${_vip.vipStatus.data.filter(item => item.vipuninvite).map(item => {
    return item.name;
  }).join(', ')}`);
});
chat.registerCommand('test', player => {
  if (_user.user.getAdminLevel(player) != 6) return;

  _user.user.setHelp(player, 'Вы не можете использовать этот предмет');

  _user.user.setHelpKey(player, 'E', 'Нажмите для взаимодействия');

  _user.user.alert(player, '<strong>Новости</strong> Операция прошла успешно', 'success', 'nn.jpg');

  _user.user.bigAlert(player, 'Операция прошла успешно', 'success');
});
chat.registerCommand('testmg', player => {
  if (_user.user.getAdminLevel(player) != 6) return;

  _user.user.minigame(player, "gr6").then(status => {
    player.notify(status ? "Удачно" : "Неудачно");
  });
});
chat.registerCommand('report', player => {
  player.call("report");
});
let enabledSystem = {
  autoschool: true,
  race: true,
  gr6: true,
  buycar: true,
  rent: true,
  npcquest: true,
  snowmangame: false
};
exports.enabledSystem = enabledSystem;
},{"./methods":"qXSp","../user":"QE3B","../vehicles":"pYYy","../../util/methods":"Z5QB","../../util/vip":"jh2U","./menu":"Aiz7"}],"MvN0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bank = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

var _user = require("../user");

var _coffer = require("../coffer");

var _inventory = require("../inventory");

var _events = require("../modules/events");

var _user2 = require("../modules/entity/user");

let bank = {
  markers: [[253.4611, 220.7204, 106.2865, 108], [251.749, 221.4658, 106.2865, 108], [248.3227, 222.5736, 106.2867, 108], [246.4875, 223.2582, 106.2867, 108], [243.1434, 224.4678, 106.2868, 108], [241.1435, 225.0419, 106.2868, 108], [148.5, -1039.971, 29.37775, 1], [1175.054, 2706.404, 38.09407, 1], [-1212.83, -330.3573, 37.78702, 1], [314.3541, -278.5519, 54.17077, 1], [-2962.951, 482.8024, 15.7031, 1], [-350.6871, -49.60739, 49.04258, 1], [-111.1722, 6467.846, 31.62671, 2], [-113.3064, 6469.969, 31.62672, 2]],
  fleecaMarkers: [[148.5, -1039.971, 29.37775], [1175.054, 2706.404, 38.09407], [-1212.83, -330.3573, 37.78702], [-2962.951, 482.8024, 14.7031], [-350.6871, -49.60739, 48.04258], [314.3541, -278.5519, 54.17077]],
  blainePos: new mp.Vector3(-110.9777, 6470.198, 31.62671),
  pacificPos: new mp.Vector3(235.5093, 216.8752, 106.2867),
  mazePos: new mp.Vector3(-66.66476, -802.0474, 44.22729),
  grabPos: [],
  doorPos: [],
  bombPos: [[254.0034, 225.1687, 100.8757], [147.2123, -1044.969, 28.36802], [311.5067, -283.4736, 53.16475], [-353.559, -54.34758, 48.03654], [1175.989, 2711.895, 37.088]],
  loadAll: function () {
    _methods.methods.debug('bank.loadAll');

    _methods.methods.createBlip(bank.pacificPos, 374, 65, 0.8, 'Частный банк "Pacific Standard"');

    _methods.methods.createBlip(bank.blainePos, 374, 67, 0.8, 'Частный банк "Blaine County"');

    bank.fleecaMarkers.forEach(function (item) {
      let bankPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(bankPos, 374, 69, 0.8, 'Частный банк "Fleeca"');
    });
    bank.markers.forEach(function (item) {
      let bankPos = new mp.Vector3(item[0], item[1], item[2] - 1);

      _methods.methods.createStaticCheckpointV(bankPos, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
    let idx = 0;

    _methods.methods.debug('LOAD ALL BANKS');
  },
  loadGrabCounts: function () {},
  sendSmsBankOperation: function (player, text, title = 'Операция со счётом') {
    _methods.methods.debug('bank.sendSmsBankOperation');

    if (!_user.user.isLogin(player)) return;

    try {
      switch (_user.user.get(player, 'bank_prefix')) {
        case 1111:
          player.notifyWithPicture(title, '~r~Maze~s~ Bank', text, 'CHAR_BANK_MAZE', 2);
          break;

        case 2222:
          player.notifyWithPicture(title, '~g~Fleeca~s~ Bank', text, 'CHAR_BANK_FLEECA', 2);
          break;

        case 3333:
          player.notifyWithPicture(title, '~b~Blaine~s~ Bank', text, 'DIA_CUSTOMER', 2);
          break;

        case 4444:
          player.notifyWithPicture(title, '~o~Pacific~s~ Bank', text, 'WEB_SIXFIGURETEMPS', 2);
          break;
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  transferMoney: function (player, bankPrefix, bankNumber, money) {
    _methods.methods.debug('bank.transferMoney');

    if (!_user.user.isLogin(player)) return;

    if (money < 1) {
      player.notify('~r~Сумма должна быть больше нуля');

      _user.user.updateClientCache(player);

      return;
    }

    const userid = _user.user.getId(player);

    if (!_events.sendMoney.has(userid)) _events.sendMoney.set(userid, 0);
    if (_events.sendMoney.get(userid) + money > _events.sendmoneymax) return player.notify('~r~Лимит передачи денег в сутки: ' + _events.sendmoneymax + '$');

    if (bankPrefix < 1) {
      player.notify('~r~Префикс карты должен быть больше нуля');

      _user.user.updateClientCache(player);

      return;
    }

    if (bankNumber < 1) {
      player.notify('~r~Номер карты должен быть больше нуля');

      _user.user.updateClientCache(player);

      return;
    }

    if (_user.user.getBankMoney(player) < money) {
      player.notify('~r~У Вас недостаточно средств');

      _user.user.updateClientCache(player);

      return;
    }

    let sumForBiz = _methods.methods.parseInt(money * 0.005);

    let sumFinal = _methods.methods.parseInt(money * 0.99);

    let isOnline = false;
    let isEquip = false;
    let pl = mp.players.toArray().find(target => _user.user.isLogin(target) && _user.user.get(target, 'bank_prefix') == bankPrefix && _user.user.get(target, 'bank_number') == bankNumber);

    if (pl) {
      _methods.methods.saveLog('GiveBank', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'bank_prefix')}-${_user.user.get(player, 'bank_number')}] to ${bankPrefix}-${bankNumber} count $${money} (${_user.user.getId(pl)} online)`);

      isOnline = true;
      bank.addBusinessBankMoneyByPrefix(bankPrefix, sumForBiz);
      bank.addBusinessBankMoneyByPrefix(_user.user.get(player, 'bank_prefix'), sumForBiz);
      bank.sendSmsBankOperation(player, 'Перевод: ~g~$' + _methods.methods.numberFormat(sumFinal));
      bank.sendSmsBankOperation(pl, 'Зачисление: ~g~$' + _methods.methods.numberFormat(sumFinal));

      _user.user.removeBankMoney(player, money);

      _events.sendMoney.set(userid, _events.sendMoney.get(userid) + money);

      _user.user.addBankMoney(pl, sumFinal);

      _user.user.loginterract(player, pl, "BankTransferMoney", 'Перевёл ' + _methods.methods.numberFormat(sumFinal));
    }

    if (!isOnline) {
      _user2.userEntity.findAll({
        where: {
          bank_number: bankNumber,
          bank_prefix: bankPrefix
        }
      }).then(rows => {
        if (rows.length == 1) {
          let item = rows[0];
          bank.addBusinessBankMoneyByPrefix(bankPrefix, sumForBiz);
          bank.addBusinessBankMoneyByPrefix(_user.user.get(player, 'bank_prefix'), sumForBiz);
          bank.sendSmsBankOperation(player, 'Перевод: ~g~$' + _methods.methods.numberFormat(sumFinal));

          _user.user.removeBankMoney(player, money);

          _events.sendMoney.set(userid, _events.sendMoney.get(userid) + money);

          _user2.userEntity.update({
            money_bank: item.money_bank + sumFinal
          }, {
            where: {
              id: item.id
            }
          });

          isEquip = true;

          _methods.methods.saveLog('GiveBank', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'bank_prefix')}-${_user.user.get(player, 'bank_number')}] to ${bankPrefix}-${bankNumber} count $${money} (${item.id} offline)`);

          _user.user.loginterract(player, item.id, "BankTransferMoney", 'Перевёл ' + _methods.methods.numberFormat(sumFinal));
        }

        if (!isEquip) {
          let rows2 = _inventory.inventory.allItems().filter(item => item.number == bankNumber && item.prefix == bankPrefix);

          if (rows2.length == 1) {
            let item2 = rows2[0];
            bank.addBusinessBankMoneyByPrefix(bankPrefix, sumForBiz);
            bank.addBusinessBankMoneyByPrefix(_user.user.get(player, 'bank_prefix'), sumForBiz);
            bank.sendSmsBankOperation(player, 'Перевод: ~g~$' + _methods.methods.numberFormat(sumFinal));

            _user.user.removeBankMoney(player, money);

            _events.sendMoney.set(userid, _events.sendMoney.get(userid) + money);

            _methods.methods.saveLog('GiveBank', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) [${_user.user.get(player, 'bank_prefix')}-${_user.user.get(player, 'bank_number')}] to ${bankPrefix}-${bankNumber} count $${money} (non equip)`);

            _inventory.inventory.updateItemCount(item2.id, item2.count + sumFinal);

            _user.user.log(player, "BankTransferMoney", `Перевёл на карту @item${item2.id} ${bankPrefix}-${bankNumber} $${_methods.methods.numberFormat(sumFinal)}. Карта не экипирована, владелец ТИП: ${item2.owner_type} ID: ${item2.owner_id}`);

            isEquip = true;
          }

          ;
          if (!isOnline && !isEquip) bank.sendSmsBankOperation(player, 'Счёт не был найден', '~r~Ошибка перевода');
        }
      });
    }

    _user.user.updateClientCache(player);
  },
  changeCardNumber: function (player, bankNumber) {
    _methods.methods.debug('bank.changeCardNumber');

    if (!_user.user.isLogin(player)) return;
    let money = 100000;

    if (_user.user.getCashMoney(player) < money) {
      player.notify('~r~У Вас недостаточно средств');
      return;
    }

    if (bankNumber < 9999) {
      player.notify('~r~Номер карты должен быть больше 4-х цифр');
      return;
    }

    let bankPrefix = _user.user.get(player, 'bank_prefix');

    _user2.userEntity.findAll({
      where: {
        bank_number: bankNumber,
        bank_prefix: bankPrefix
      }
    }).then(rows => {
      if (rows.length === 0) {
        let rows = _inventory.inventory.allItems().filter(item => item.number == bankNumber && item.prefix == bankPrefix);

        if (rows.length === 0) {
          _methods.methods.saveLog("changeCardNumber", `${_user.user.getRpName(player)} (${_user.user.getId(player)}) Сменил номер карты ${_user.user.get(player, 'bank_number')} на ${bankNumber}`);

          _user.user.set(player, 'bank_number', bankNumber);

          _user.user.removeCashMoney(player, money);

          bank.addBusinessBankMoneyByPrefix(bankPrefix, money);
          bank.sendSmsBankOperation(player, 'Ваш номер карты был изменён');

          _user.user.saveAccount(player);
        } else bank.sendSmsBankOperation(player, 'Номер карты уже существует', '~r~Ошибка');
      } else bank.sendSmsBankOperation(player, 'Номер карты уже существует', '~r~Ошибка');
    });
  },
  withdraw: function (player, money, procent = 0) {
    _methods.methods.debug('bank.withdraw');

    procent = _methods.methods.parseInt(procent);
    if (!_user.user.isLogin(player)) return;

    if (money < 1) {
      player.notify('~r~Сумам должна быть больше нуля');
      return;
    }

    if (_user.user.getBankMoney(player) < money) {
      player.notify('~r~У Вас недостаточно средств');
      return;
    }

    if (procent == 0) {
      bank.sendSmsBankOperation(player, 'Вывод: ~g~$' + _methods.methods.numberFormat(money));

      _user.user.addCashMoney(player, money);

      _user.user.removeBankMoney(player, money);
    } else {
      let sum = _methods.methods.parseInt(money * ((100 - procent) / 100));

      let sumBank = _methods.methods.parseInt(money * (procent / 100));

      bank.sendSmsBankOperation(player, 'Вывод: ~g~$' + _methods.methods.numberFormat(sum));
      bank.addBusinessBankMoneyByPrefix(_user.user.get(player, 'bank_prefix'), sumBank);

      _user.user.addCashMoney(player, sum);

      _user.user.removeBankMoney(player, money);
    }
  },
  deposit: function (player, money, procent = 0) {
    _methods.methods.debug('bank.deposit');

    procent = _methods.methods.parseInt(procent);
    if (!_user.user.isLogin(player)) return;

    if (money < 1) {
      player.notify('~r~Сумам должна быть больше нуля');
      return;
    }

    if (_user.user.getCashMoney(player) < money) {
      player.notify('~r~У Вас недостаточно средств');
      return;
    }

    if (procent == 0) {
      bank.sendSmsBankOperation(player, 'Зачисление: ~g~$' + _methods.methods.numberFormat(money));

      _user.user.addBankMoney(player, money);

      _user.user.removeCashMoney(player, money);
    } else {
      let sum = _methods.methods.parseInt(money * ((100 - procent) / 100));

      let sumBank = _methods.methods.parseInt(money * (procent / 100));

      bank.sendSmsBankOperation(player, 'Зачисление: ~g~$' + _methods.methods.numberFormat(sum));
      bank.addBusinessBankMoneyByPrefix(_user.user.get(player, 'bank_prefix'), sumBank);

      _user.user.addBankMoney(player, sum);

      _user.user.removeCashMoney(player, money);
    }
  },
  addBusinessBankMoneyByPrefix: function (prefix, money) {
    _methods.methods.debug('bank.addBusinessBankMoneyByPrefix');

    switch (prefix) {
      case 2222:
        _business.business.addMoney(1, money);

        break;

      case 3333:
        _business.business.addMoney(2, money);

        break;

      case 4444:
        _business.business.addMoney(108, money);

        break;

      default:
        _coffer.coffer.addMoney(money);

        break;
    }
  },
  openCard: function (player, bankId, price) {
    _methods.methods.debug('bank.openCard');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У Вас недостаточно средств');
      return;
    }

    if (_user.user.get(player, 'bank_prefix') > 0) {
      player.notify('~r~У Вас уже есть банковская карта');
      return;
    }

    if (price < 1) return;
    let bankPrefix = 1111;

    switch (bankId) {
      case 1:
        bankPrefix = 2222;
        break;

      case 2:
        bankPrefix = 3333;
        break;

      case 108:
        bankPrefix = 4444;
        break;
    }

    let number = _methods.methods.getRandomInt(10000, 9999999);

    _user.user.set(player, 'bank_prefix', bankPrefix);

    _user.user.set(player, 'bank_number', number);

    _methods.methods.saveLog('BuyCardNumber', `${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${bankPrefix}-${number}`);

    _user.user.removeCashMoney(player, price);

    if (bankId == 0) _coffer.coffer.addMoney(price);else _business.business.addMoney(bankId, price);
    bank.sendSmsBankOpenOperation(player);
  },
  closeCard: function (player) {
    _methods.methods.debug('bank.closeCard');

    if (!_user.user.isLogin(player)) return;
    bank.sendSmsBankCloseOperation(player);

    _user.user.set(player, 'bank_prefix', 0);

    _user.user.set(player, 'bank_number', 0);

    let currentBankMoney = _user.user.getBankMoney(player);

    _user.user.removeBankMoney(player, currentBankMoney);

    _user.user.addCashMoney(player, currentBankMoney);
  },
  sendSmsBankCloseOperation: function (player) {
    bank.sendSmsBankOperation(player, 'Ваш счёт в банке был закрыт.');
  },
  sendSmsBankOpenOperation: function (player) {
    bank.sendSmsBankOperation(player, 'Поздравляем с открытием счёта!');
  },
  getInRadius: function (pos, radius = 2) {
    let stationId = -1;
    bank.markers.forEach(function (item) {
      let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, fuelStationShopPos) < radius) stationId = _methods.methods.parseInt(item[3]);
    });
    return stationId;
  },
  getGrabInRadius: function (pos, radius = 5) {
    let idx = 0;
    let result = -1;
    return result;
  },
  getBombInRadius: function (pos, radius = 2) {
    let idx = 0;
    let result = -1;
    bank.bombPos.forEach(function (item) {
      let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, fuelStationShopPos) < radius) result = idx;
      idx++;
    });
    return result;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = bank.getInRadius(playerPos, 2);

      if (shopId == -1) {
        return;
      }

      player.call('client:menuList:showBankMenu', [shopId, _business.business.get(shopId, 'price_card1')]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('bank.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    bank.markers.forEach(function (item) {
      let fuelPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(fuelPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = fuelPos;
    });
    return prevPos;
  },
  findNearestFleeca: function (pos) {
    _methods.methods.debug('bank.findNearestFleeca');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    bank.fleecaMarkers.forEach(function (item) {
      let fuelPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(fuelPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = fuelPos;
    });
    return prevPos;
  }
};
exports.bank = bank;
},{"../modules/methods":"qXSp","../business":"y5vZ","../user":"QE3B","../coffer":"sKID","../inventory":"m5ow","../modules/events":"d3wo","../modules/entity/user":"xF3w"}],"hGLC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.banListEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let banListEntity = class banListEntity extends _sequelizeTypescript.Model {};
exports.banListEntity = banListEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], banListEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "ban_from", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "ban_to", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  allowNull: false
}), __metadata("design:type", Number)], banListEntity.prototype, "count", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  allowNull: false
}), __metadata("design:type", Number)], banListEntity.prototype, "datetime", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(8)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "format", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "reason", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(256)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "full_reason", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(64)",
  allowNull: false
}), __metadata("design:type", String)], banListEntity.prototype, "ip", void 0);

exports.banListEntity = banListEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_ban_list"
})], banListEntity);
},{}],"Sogq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PICKUP_50 = exports.PICKUP_30 = exports.PICKUP_10 = void 0;

var _user = require("../user");

const PICKUP_10 = 5000;
exports.PICKUP_10 = PICKUP_10;
const PICKUP_30 = 15000;
exports.PICKUP_30 = PICKUP_30;
const PICKUP_50 = 30000;
exports.PICKUP_50 = PICKUP_50;
mp.events.add('holidayPickups:server', (player, index) => {
  if (player.shootingPickups.indexOf(index) > -1) return;
  player.shootingPickups.push(index);
  player.notify("~g~Вы нашли коллекционный предмет");
  if (player.shootingPickups.length == 10) _user.user.addCashMoney(player, PICKUP_10), player.notify("~g~Вы получили награду за 10 предметов");
  if (player.shootingPickups.length == 30) _user.user.addCashMoney(player, PICKUP_30), player.notify("~g~Вы получили награду за 30 предметов");
  if (player.shootingPickups.length == 50) _user.user.addCashMoney(player, PICKUP_50), player.notify("~g~Вы получили награду за 50 предметов");
});
mp.events.add('playerJoin', player => {
  player.call('3vv', ["[]"]);
});
},{"../user":"QE3B"}],"CFsv":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.questData = exports.getQuest = void 0;

var _user = require("../user");

var _inventory = require("../inventory");

var _level = require("../../util/level");

var _pickup = require("../managers/pickup.gift");

const questData = [{
  group: "23 февраля",
  name: "Сбор реликвий",
  desc: "Доброго времени суток Вам предстоит найти 50 коллекционных предметов для получения награды. Все предметы разбросаны по игровой карте на суше и похожи на мигающую коробку.",
  rewards: [`10 - $${_pickup.PICKUP_10}`, `30 - $${_pickup.PICKUP_30}`, `50 - $${_pickup.PICKUP_50}`],
  access: player => {
    return _user.user.getLevel(player) <= _level.levelAccess.startQuest;
  },
  result: player => {
    return player.shootingPickups.length == 50;
  },
  reward: player => {},
  progress: player => {
    return ["Собрано: " + player.shootingPickups.length + "/50"];
  }
}, {
  group: "Начальный квест",
  name: "Начало пути",
  desc: "Сходите в офис здания правительтсва - поднявшись по лестнице, увидите вход. Оформите временную регистрацию, она вам понадобится, и ознакомьтесь с профессиями на трудовой бирже.",
  rewards: ["300$"],
  access: player => {
    return _user.user.getLevel(player) <= _level.levelAccess.startQuest;
  },
  result: player => {
    return _user.user.get(player, 'reg_status') == 1 || _user.user.get(player, 'reg_status') == 2 || _user.user.get(player, 'reg_status') == 3;
  },
  reward: player => {
    _user.user.giveQuest(player, "Легкие деньги", true);

    _user.user.addCashMoney(player, 300);
  }
}, {
  group: "Начальный квест",
  name: "Легкие деньги",
  desc: "Так как вы здесь совсем недавно, для начала вам нужно немного подзаработать. Это легко можно сделать в трех местах, и устроиться можно прямо там. Арендуйте велосипед или мопед в ближайшем пункте проката. Нажав G, выберите в GPS одну из первых трех работ(строитель, мойщик окон или дорожные работы). Когда заработаете 300$, задание будет пройдено.",
  rewards: ["400$"],
  access: player => {
    return _user.user.questCompleted(player, "Начало пути");
  },
  result: player => {
    if (!player.jobmoneyfarm) player.jobmoneyfarm = 0;
    return player.jobmoneyfarm >= 300;
  },
  reward: player => {
    _user.user.giveQuest(player, "Первые документы", true);

    _user.user.addCashMoney(player, 400);
  },
  progress: player => {
    return ["Заработано: " + player.jobmoneyfarm + "$"];
  }
}, {
  group: "Начальный квест",
  name: "Первые документы",
  desc: "Теперь у вас есть средства, чтобы приобрести права на автомобиль. Отправляйтесь в здание автошколы и получите права категории В.",
  rewards: ["2500$"],
  access: player => {
    return _user.user.questCompleted(player, "Легкие деньги");
  },
  result: player => {
    return _user.user.get(player, "b_lic");
  },
  reward: player => {
    _user.user.giveQuest(player, "Всегда на связи", true);

    _user.user.addCashMoney(player, 2500);
  }
}, {
  group: "Начальный квест",
  name: "Всегда на связи",
  desc: "Чтобы вы могли позвонить друзьям, вызвать полицию или скорую, заказать такси или подать объявление, вам нужен телефон, а так же планшет для управления собственным имуществом и коммуникацией со своей фракцией. Отправляйтесь в магазин электроники и купите телефон любой марки а так же планшет.",
  rewards: ["600$"],
  access: player => {
    return _user.user.questCompleted(player, "Первые документы");
  },
  result: player => {
    return _user.user.getPhone(player) != "0-0" && _user.user.get(player, 'tablet_equip');
  },
  reward: player => {
    _user.user.giveQuest(player, "Плати легко", true);

    _user.user.addCashMoney(player, 600);
  }
}, {
  group: "Начальный квест",
  name: "Плати легко",
  desc: "Найдите любой банк и оформите карту. С ее помощью, вы потом сможете оплачивать различные услуги.",
  rewards: ["700$"],
  access: player => {
    return _user.user.questCompleted(player, "Всегда на связи");
  },
  result: player => {
    return _user.user.get(player, 'bank_prefix') >= 1;
  },
  reward: player => {
    _user.user.giveQuest(player, "Все знаю", true);

    _user.user.addCashMoney(player, 700);
  }
}, {
  group: "Начальный квест",
  name: "Все знаю",
  desc: "Чтобы знать время и погоду в штате, вам нужны часы. Купите их в магазине электроники и обязательно подойдите к консультанту, он вам подскажет полезную информацию.",
  rewards: ["800$"],
  access: player => {
    return _user.user.questCompleted(player, "Плати легко");
  },
  result: player => {
    return _user.user.get(player, "item_clock") == 1;
  },
  reward: player => {
    _user.user.giveQuest(player, "Будь модным", true);

    _user.user.addCashMoney(player, 800);
  }
}, {
  group: "Начальный квест",
  name: "Будь модным",
  desc: "Посетите любой магазин одежды, купив любую понравившуюся вам вещь. Попробуйте убрать какой-нибудь предмет в инвентарь(клавиша I). Отметим, что в штате работают магазины с разным ассортиментом вещей, так что вы сможете подобрать одежду на ваш вкус и цвет.",
  rewards: ["900$"],
  access: player => {
    return _user.user.questCompleted(player, "Все знаю");
  },
  result: player => {
    return false;
  },
  reward: player => {
    _user.user.giveQuest(player, "Попытай удачу", true);

    _user.user.addCashMoney(player, 900);
  }
}, {
  group: "Начальный квест",
  name: "Попытай удачу",
  desc: "Посетите магазин 24/7 и приобретите лотерейный билет. Вдруг удача вам улыбнется и заодно посмотрите список товаров, может что-нибудь пригодится",
  rewards: ["1000$"],
  access: player => {
    return _user.user.questCompleted(player, "Будь модным");
  },
  result: player => {
    return _inventory.inventory.getItemCountById(player, 277) > 0;
  },
  reward: player => {
    _user.user.giveQuest(player, "Что дальше", true);

    _user.user.addCashMoney(player, 1000);
  }
}, {
  group: "Начальный квест",
  name: "Что дальше",
  desc: "Отправляйтесь к зданию правительства, Кевин вам расскажет что делать дальше и выдаст приличный бонус за ваши старания!",
  rewards: ["3000$"],
  access: player => {
    return _user.user.questCompleted(player, "Попытай удачу");
  },
  result: player => {
    return false;
  },
  reward: player => {
    _user.user.addCashMoney(player, 3000);
  }
}];
exports.questData = questData;

const getQuest = name => {
  return questData.find(item => item.name == name);
};

exports.getQuest = getQuest;
},{"../user":"QE3B","../inventory":"m5ow","../../util/level":"MpJF","../managers/pickup.gift":"Sogq"}],"mHJx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _log = require("../../log");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var _a;

let logEntity = class logEntity extends _sequelizeTypescript.Model {};
exports.logEntity = logEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], logEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(60)",
  allowNull: false
}), __metadata("design:type", typeof (_a = typeof _log.LogType !== "undefined" && _log.LogType) === "function" ? _a : Object)], logEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "INT(11)",
  allowNull: false
}), __metadata("design:type", Number)], logEntity.prototype, "timestamp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "VARCHAR(60)",
  allowNull: false,

  get() {
    return JSON.parse(this.getDataValue("interractions"));
  },

  set(value) {
    this.setDataValue("interractions", JSON.stringify(value));
  }

}), __metadata("design:type", Array)], logEntity.prototype, "interractions", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: "TEXT",
  allowNull: false
}), __metadata("design:type", String)], logEntity.prototype, "reason", void 0);

exports.logEntity = logEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_data"
})], logEntity);
},{"../../log":"MNUA"}],"MNUA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.log = void 0;

var _user = require("./user");

var _methods = require("./modules/methods");

var _logEntity = require("./modules/entity/logEntity");

var _admin = require("./modules/admin");

const log = {
  generatePlayerDump: target => {
    return new Promise(async (resolve, reject) => {
      const id = typeof target == "number" ? target : _user.user.getId(target);

      const online = _user.user.getPlayerById(id);

      let data = !online ? await _user.user.getUserDataFromDB(id) : null;
      target = _user.user.getPlayerById(id);
      resolve({
        id: id,
        status: online ? "online" : "offline",
        name: online ? _user.user.getRpName(target) : data.rp_name,
        social: online ? target.socialClub : data.name,
        ip: online ? target.ip : "",
        lic: online ? target.serial : data.lic,
        position: online ? {
          x: target.position.x,
          y: target.position.y,
          z: target.position.z,
          d: target.dimension,
          h: target.heading
        } : null,
        health: online ? target.health : -1,
        armour: online ? target.armour : -1,
        money: online ? _user.user.getCashMoney(target) : data.money,
        bank: online ? _user.user.getBankMoney(target) : data.money_bank,
        donate: data ? data.money_donate : null,
        chips: online ? _user.user.getChips(target) : data.chipsBalance,
        bank_number: online ? _user.user.get(target, 'bank_prefix') + '-' + _user.user.get(target, 'bank_number') : data.bank_prefix + '-' + data.bank_number,
        fraction: online ? _user.user.get(target, 'fraction_id') : data.fraction_id,
        rank: online ? _user.user.get(target, 'rank') : data.rank,
        fraction2: online ? _user.user.get(target, 'fraction_id2') : data.fraction_id2,
        rank2: online ? _user.user.get(target, 'rank2') : data.rank2,
        wanted_level: online ? _user.user.get(target, 'wanted_level') : data.wanted_level,
        wanted_reason: online ? _user.user.get(target, 'wanted_reason') : data.wanted_reason,
        job: online ? _user.user.get(target, 'job') : data.job,
        nearest: online ? mp.players.toArray().map(npl => {
          if (npl.dimension == target.dimension && npl.id != target.id) {
            const dist = _methods.methods.distanceToPos(npl.position, target.position);

            if (dist < 20) {
              return {
                id: _user.user.getId(npl),
                dist,
                hp: npl.health
              };
            }
          }
        }) : []
      });
    });
  },
  convertIdPlayerToData: target => {
    return typeof target == "number" ? `@user${target}` : `@user${_user.user.getId(target)}`;
  },
  new: (type, reason) => {
    if (!_admin.customParams.logs) return;
    let interractions = [];
    let list = reason.match(/@user\d+/g);

    if (list) {
      list.forEach(itm => {
        let id = _methods.methods.parseInt(itm.replace('@user', ""));

        if (!id) return;
        if (interractions.includes(id)) return;
        interractions.push(id);
      });
    }

    listLogsInserts.push({
      type,
      interractions,
      reason,
      timestamp: _methods.methods.getTimeStamp()
    });
    if (listLogsInserts.length > 20) writelogs();
  }
};
exports.log = log;
let listLogsInserts = [];
setInterval(() => {
  writelogs();
}, 5000);

function writelogs() {
  if (listLogsInserts.length == 0) return;

  _logEntity.logEntity.bulkCreate(listLogsInserts);

  listLogsInserts = [];
}
},{"./user":"QE3B","./modules/methods":"qXSp","./modules/entity/logEntity":"mHJx","./modules/admin":"s4Xg"}],"NOUi":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userWarnEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let userWarnEntity = class userWarnEntity extends _sequelizeTypescript.Model {};
exports.userWarnEntity = userWarnEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], userWarnEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], userWarnEntity.prototype, "timestamp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(5),
  allowNull: false
}), __metadata("design:type", Number)], userWarnEntity.prototype, "user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(240),
  allowNull: false
}), __metadata("design:type", String)], userWarnEntity.prototype, "reason", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(240),
  allowNull: false
}), __metadata("design:type", String)], userWarnEntity.prototype, "admin", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(1),
  defaultValue: '0',

  get() {
    return this.getDataValue('payed') == 1;
  },

  set(value) {
    this.setDataValue('payed', value ? 1 : 0);
  }

}), __metadata("design:type", Boolean)], userWarnEntity.prototype, "payed", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(1),
  defaultValue: '0',

  get() {
    return this.getDataValue('notified') == 1;
  },

  set(value) {
    this.setDataValue('notified', value ? 1 : 0);
  }

}), __metadata("design:type", Boolean)], userWarnEntity.prototype, "notified", void 0);

exports.userWarnEntity = userWarnEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_users_warns"
})], userWarnEntity);
},{}],"SYvm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.voiceDistanceRangePlus = exports.voiceDistanceRange = void 0;
const voiceDistanceRange = 15.0;
exports.voiceDistanceRange = voiceDistanceRange;
const voiceDistanceRangePlus = 5;
exports.voiceDistanceRangePlus = voiceDistanceRangePlus;
},{}],"Q3Rn":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userNotifyEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _methods = require("../methods");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let userNotifyEntity = class userNotifyEntity extends _sequelizeTypescript.Model {};
exports.userNotifyEntity = userNotifyEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], userNotifyEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(5),
  allowNull: false
}), __metadata("design:type", Number)], userNotifyEntity.prototype, "user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.TEXT,
  allowNull: false
}), __metadata("design:type", String)], userNotifyEntity.prototype, "message", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(120),
  allowNull: false
}), __metadata("design:type", String)], userNotifyEntity.prototype, "title", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(120),
  allowNull: true
}), __metadata("design:type", String)], userNotifyEntity.prototype, "icon", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(30),
  allowNull: false,
  defaultValue: "alert"
}), __metadata("design:type", String)], userNotifyEntity.prototype, "position", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(30),
  allowNull: false,
  defaultValue: "info"
}), __metadata("design:type", String)], userNotifyEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  defaultValue: () => {
    return _methods.methods.getTimeStamp();
  },
  allowNull: false
}), __metadata("design:type", Number)], userNotifyEntity.prototype, "timestamp", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(1),
  defaultValue: '0',

  get() {
    return this.getDataValue('notified') == 1;
  },

  set(value) {
    this.setDataValue('notified', value ? 1 : 0);
  }

}), __metadata("design:type", Boolean)], userNotifyEntity.prototype, "notified", void 0);

exports.userNotifyEntity = userNotifyEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_users_notify"
})], userNotifyEntity);
},{"../methods":"qXSp"}],"tSli":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logReferrerEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let logReferrerEntity = class logReferrerEntity extends _sequelizeTypescript.Model {};
exports.logReferrerEntity = logReferrerEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false,
  defaultValue: null
}), __metadata("design:type", Number)], logReferrerEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logReferrerEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(512),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logReferrerEntity.prototype, "referrer", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logReferrerEntity.prototype, "money", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logReferrerEntity.prototype, "timestamp", void 0);

exports.logReferrerEntity = logReferrerEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_referrer"
})], logReferrerEntity);
},{}],"T8aA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logAuthEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let logAuthEntity = class logAuthEntity extends _sequelizeTypescript.Model {};
exports.logAuthEntity = logAuthEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false,
  defaultValue: null
}), __metadata("design:type", Number)], logAuthEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(128),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logAuthEntity.prototype, "nick", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(512),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], logAuthEntity.prototype, "lic", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], logAuthEntity.prototype, "datetime", void 0);

exports.logAuthEntity = logAuthEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_auth"
})], logAuthEntity);
},{}],"Soei":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userDatingEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let userDatingEntity = class userDatingEntity extends _sequelizeTypescript.Model {};
exports.userDatingEntity = userDatingEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], userDatingEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false
}), __metadata("design:type", String)], userDatingEntity.prototype, "user_name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], userDatingEntity.prototype, "user_owner", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], userDatingEntity.prototype, "user_id", void 0);

exports.userDatingEntity = userDatingEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_user_dating"
})], userDatingEntity);
},{}],"JLGa":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logPlayerEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let logPlayerEntity = class logPlayerEntity extends _sequelizeTypescript.Model {};
exports.logPlayerEntity = logPlayerEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], logPlayerEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(100),
  allowNull: false
}), __metadata("design:type", String)], logPlayerEntity.prototype, "datetime", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(512),
  allowNull: false
}), __metadata("design:type", String)], logPlayerEntity.prototype, "do", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], logPlayerEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], logPlayerEntity.prototype, "user_id", void 0);

exports.logPlayerEntity = logPlayerEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_log_player"
})], logPlayerEntity);
},{}],"ixsW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promocodeTopListEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let promocodeTopListEntity = class promocodeTopListEntity extends _sequelizeTypescript.Model {};
exports.promocodeTopListEntity = promocodeTopListEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], promocodeTopListEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], promocodeTopListEntity.prototype, "promocode", void 0);

exports.promocodeTopListEntity = promocodeTopListEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_promocode_top_list"
})], promocodeTopListEntity);
},{}],"ir2T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hiddenIdMask = void 0;
const hiddenIdMask = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180];
exports.hiddenIdMask = hiddenIdMask;
},{}],"kYse":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoSQLbase = void 0;

var _jsonfile = _interopRequireDefault(require("jsonfile"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NoSQLbase {
  constructor(file = ":memory:") {
    this.file = file;
    this.data = [];
  }

  get data() {
    return this.datas;
  }

  set data(val) {
    this.datas = val;
  }

  insert(...val) {
    this.data.push(...val);
  }

  remove(val) {
    if (typeof val === "number") {
      this.data.splice(val, 1);
    } else {
      this.data.splice(this.data.indexOf(val), 1);
    }
  }

  plusMinus(value, param, plus) {
    for (let arg in value) {
      if (typeof value[arg] !== "number") {
        return console.error("Invalid argument type", arg, typeof value[arg], value[arg]);
      }
    }

    let data = this.find(param);
    if (data.length == 0) return;
    data.map(itm => {
      for (let arg in value) {
        if (typeof itm[arg] === "number") {
          if (plus) {
            itm[arg] += value[arg];
          } else {
            itm[arg] -= value[arg];
          }
        }
      }
    });
  }

  increment(value, param) {
    this.plusMinus(value, param, true);
  }

  decrement(value, param) {
    this.plusMinus(value, param, false);
  }

  clear() {
    this.data = [];
  }

  save() {
    if (this.file == ":memory:") return;

    _jsonfile.default.writeFileSync('./nosql/' + this.file + '.json', this.datas);
  }

  find(param) {
    let data = [];
    if (!param.limit) param.limit = 1;

    const check = el => {
      let ok = true;

      for (let arg in param.where) {
        if (el[arg] != param.where[arg]) ok = false;
      }

      return ok;
    };

    return this.data.filter(itm => {
      if (data.length >= param.limit) return false;
      return check(itm);
    });
  }

  findOne(param) {
    let data = this.find(_objectSpread(_objectSpread({}, param), {}, {
      limit: 1
    }));
    if (data.length > 0) return data[0];else undefined;
  }

  init() {
    return new Promise((resolve, reject) => {
      if (!_fs.default.existsSync('./nosql/')) {
        _fs.default.mkdirSync('./nosql/');
      }

      if (this.file == ":memory:") return resolve(this.data);

      _jsonfile.default.readFile('./nosql/' + this.file + '.json').then(obj => {
        this.data = obj;
        resolve(this.data);
      }).catch(err => {
        _jsonfile.default.writeFile('./nosql/' + this.file + '.json', [], function (err) {
          if (err) console.error(err);
        });

        console.warn("Create new NoSQL instance " + this.file);
        this.data = [];
        resolve(this.data);
      });
    });
  }

}

exports.NoSQLbase = NoSQLbase;
},{}],"ErXz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dayTopReward = void 0;
const dayTopReward = [100000, 95000, 90000, 85000, 80000, 75000, 70000, 65000, 60000, 55000, 50000, 45000, 40000, 35000, 30000, 25000, 20000, 15000, 10000, 5000];
exports.dayTopReward = dayTopReward;
},{}],"QE3B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.banUser = banUser;
exports.user = exports.saveNoSQLplayerData = void 0;
exports.workUser = workUser;

var _deathReasonList = _interopRequireDefault(require("./config/deathReasonList.json"));

var _methods = require("./modules/methods");

var _chat = require("./modules/chat");

var _admin = require("./modules/admin");

var _enums = require("./enums");

var _condo = require("./condo");

var _houses = require("./houses");

var _stock = require("./stock");

var _apartments = require("./apartments");

var _vehicles = require("./vehicles");

var _dispatcher = require("./managers/dispatcher");

var _weather = require("./managers/weather");

var _coffer = require("./coffer");

var _business = require("./business");

var _data = require("./modules/data");

var _bank = require("./business/bank");

var _menu = require("./modules/menu");

var _items = require("./items");

var _inventory = require("./inventory");

var _user = require("./modules/entity/user");

var _banList = require("./modules/entity/banList");

var _sequelize = _interopRequireWildcard(require("sequelize"));

var _quests = require("./config/quests");

var _log = require("./log");

var _level = require("../util/level");

var _warns = require("./modules/entity/warns");

var _fractions = require("../util/fractions");

var _voice = require("../util/voice");

var _newrage = require("../util/newrage");

var _weapons = require("../util/weapons");

var _gangwar = require("./modules/gangwar");

var _moneyChest = require("./modules/moneyChest");

var _events = require("./modules/events");

var _mafiaData = require("../util/mafiaData");

var _vip = require("../util/vip");

var _methods2 = require("../util/methods");

var _userNotifyEntity = require("./modules/entity/userNotifyEntity");

var _carsModel = require("./modules/entity/carsModel");

var _logReferrerEntity = require("./modules/entity/logReferrerEntity");

var _logAuthEntity = require("./modules/entity/logAuthEntity");

var _userDatingEntity = require("./modules/entity/userDatingEntity");

var _logPlayerEntity = require("./modules/entity/logPlayerEntity");

var _promocodeTopEntity = require("./modules/entity/promocodeTopEntity");

var _blackList = require("./modules/entity/blackList");

var _customchest = require("./modules/customchest");

var _mask = require("../util/mask");

var _whitelist = require("./modules/whitelist");

var _nosql = require("./modules/nosql");

var _progress = require("../util/progress.reward");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

mp.events.add('setSocial', (player, social) => {
  player.clientSocial = social;
});
let lastIdentityRegister = new Map();
let muteContainer = {
  voice: new Map(),
  chat: new Map()
};
let onlineUser = new Map();

function getDating(player, id) {
  if (!player.datingList) player.datingList = new Map();

  if (!id) {
    return player.datingList;
  } else {
    if (player.datingList.has(id)) return player.datingList.get(id);else return null;
  }
}

mp.events.add("client:spectate:revive", player => {
  if (!user.getId(player.spectateTarget)) return user.stopSpectate(player);
  if (!mp.players.exists(player.spectateTarget)) return user.stopSpectate(player);
  if (player.dimension != player.spectateTarget.dimension) player.dimension = player.spectateTarget.dimension;
  player.position = new mp.Vector3(player.spectateTarget.position.x, player.spectateTarget.position.y, player.spectateTarget.position.x + 10);
  player.call('admin:spectate', [player.spectateTarget]);
});
mp.events.add('atm:open', player => {
  openATMdata(player);
});
setTimeout(() => {
  mp.events.register('atm:getCash', (player, sum) => {
    if (user.getBankMoney(player) < sum) return player.notify('~r~У вас недостаточно средств для данной операции');

    _bank.bank.withdraw(player, sum, 5);

    openATMdata(player);
  });
  mp.events.register('atm:putCash', (player, sum) => {
    if (user.getCashMoney(player) <= sum) return player.notify('~r~У вас недостаточно средств для данной операции');

    _bank.bank.deposit(player, sum, 5);

    openATMdata(player);
  });
}, 1000);

const openATMdata = player => {
  user.setGui(player, 'atm');
  mp.events.triggerBrowser(player, 'atm:data', {
    cash: user.getCashMoney(player),
    bank: user.getBankMoney(player),
    bank_number: user.get(player, 'bank_prefix') + '-' + user.get(player, 'bank_number')
  });
};

setInterval(() => {
  let times = _methods.methods.getTimeStamp();

  for (let types in muteContainer) {
    let type = types;
    let data = muteContainer[type];
    data.forEach((time, userid) => {
      let player = user.getPlayerById(userid);

      if (times > time) {
        data.delete(userid);
        if (player) player.setVariable("muted:" + type, false);
      } else {
        if (player && !player.getVariable("muted:" + type)) player.setVariable("muted:" + type, true);
      }
    });
  }
}, 10000);
mp.events.add("quest:update", player => {
  user.questWorks(player);
});
setInterval(() => mp.players.forEach(player => user.questWorks(player)), 120000);

function warnUser(target, reason, admin, days = 0) {
  return new Promise(async resolve => {
    let countWarns = 0;
    let name = "";
    let data = await user.getUserDataFromDB(typeof target === "number" ? target : user.getId(target));
    if (!data) return resolve(false);
    let id = data.id;
    const rank = typeof target === "number" ? data.rank : user.getPlayerFractionRank(target);
    const fraction_id = typeof target === "number" ? data.fraction_id : user.getPlayerFraction(target);

    if (days > 0) {
      if (fraction_id && _methods.methods.getLeaderRank(fraction_id) != rank) {
        data.fraction_id = 0;
        data.rank = 0;
        data.save();
      }
    }

    if (typeof target === "number") {
      if (days > 0) {
        let nplayer = user.getPlayerById(target);

        if (nplayer) {
          if (user.getPlayerFraction(nplayer) && !user.isLeader(nplayer)) {
            user.set(nplayer, "fraction_id", 0);
            user.set(nplayer, "rank", 0);
          }
        }
      }

      name = data.rp_name;
      id = data.id;
    } else {
      name = user.getRpName(target);

      if (days > 0) {
        if (user.getPlayerFraction(target) && !user.isLeader(target)) {
          user.set(target, "fraction_id", 0);
          user.set(target, "rank", 0);
        }
      }

      id = user.getId(target);
    }

    countWarns = await user.countWarns(id);
    const needBan = countWarns >= 2;

    _warns.userWarnEntity.create({
      timestamp: days > 0 ? days * 60 * 60 * 24 + _methods.methods.getTimeStamp() : 0,
      admin: admin ? admin : "Система",
      user: id,
      reason
    });

    if (days > 0) _chat.chat.sendToAll(admin, `${name} (${id})!{${_chat.chat.clRed}} Получил предупреждение !{${_chat.chat.clWhite}}[${countWarns + 1}/3]!{${_chat.chat.clRed}} с причиной: !{${_chat.chat.clWhite}}${reason}`, _chat.chat.clRed);

    if (days > 0 && fraction_id && _fractions.fractionUtil.getLeaderRank(fraction_id) != rank) {
      setTimeout(() => {
        _user.userEntity.update({
          fraction_id: fraction_id,
          rank: rank
        }, {
          where: {
            id
          }
        });
      }, 5000);
    }

    if (days <= 0 || !admin) return;

    if (needBan) {
      user.banuser(id, admin, 60 * 60 * 24 * 10, "[3/3] Нарушений", true, "d", 10);
    } else {
      if (typeof target !== "number") user.kick(target, "Вы получили предупреждение от администрации: " + reason);else if (user.getPlayerById(target)) user.kick(user.getPlayerById(target), "Вы получили предупреждение от администрации: " + reason);
    }
  });
}

function getVipStatusData(arg) {
  if (typeof arg == "string") return _vip.vipStatus.getVipStatusData(arg);else return _vip.vipStatus.getVipStatusData(user.getVipStatus(arg));
}

function getAllAccounts(arg) {
  return new Promise(async resolve => {
    let social;
    let lic;

    if (typeof arg == "number") {
      let target = user.getPlayerById(arg);

      if (target) {
        social = target.socialClub;
        lic = target.serial;
      } else {
        let data = await user.getUserDataFromDB(arg);

        if (data) {
          social = data.name;
          lic = data.lic;
        }
      }
    } else {
      social = arg.socialClub;
      lic = arg.serial;
    }

    _user.userEntity.findAll({
      where: {
        [_sequelize.Op.or]: [{
          name: social
        }, {
          lic
        }]
      }
    }).then(items => {
      resolve(items);
    });
  });
}

function notify(arg, message, title = "", position = "alert", type = "info", icon = "CHAR_ACTING_UP") {
  let id = typeof arg === "number" ? arg : user.getId(arg);
  if (!id) return;

  _userNotifyEntity.userNotifyEntity.create({
    user: id,
    title,
    message,
    position,
    type,
    icon
  }).then(item => {
    if (typeof arg != "number" || user.getPlayerById(arg)) {
      let target = typeof arg === "number" ? user.getPlayerById(arg) : arg;
      user.reloadNotify(target);
    }
  });
}

function playSound(arg, url, volume, dist, dimension = -1) {
  if (arg.x && arg.y && arg.z) {
    const pos = arg;
    let targets = mp.players.toArray().filter(player => (player.dimension == dimension || dimension == -1) && player.dist(pos) < dist + 20);
    targets.map(target => {
      target.call('playAudioAtPosition', [url, volume, dist, arg.x, arg.y, arg.z]);
    });
  } else {
    let entity = arg;
    let id = `${entity.type}_${entity.id}`;
    let targets = mp.players.toArray().filter(player => player.dimension == entity.dimension && player.dist(entity.position) < dist + 20);
    targets.map(target => {
      target.call('playAudioAtEntity', [url, volume, dist, id]);
    });
  }
}

setTimeout(() => {
  _chat.chat.registerCommand('cheat', (player, ids) => {
    if (!user.isAdminNow(player, 5)) return player.notify("~r~Нет доступа");

    let id = _methods.methods.parseInt(ids);

    let target = user.getPlayerById(id);
    if (!target) return player.notify("~r~Игрока нет на сервере");
    user.accept(player, "Вы уверены (ID: " + user.getRpName(target) + " (" + id + "))?").then(status => {
      if (status) return user.banCheater(target, player);
    });
  });

  mp.events.register('cef:bb', player => {
    user.banCheater(player);
  });
}, 1000);
let unbanCheaterMap = new Map();
mp.events.add('playerJoin', player => {
  if (unbanCheaterMap.has(player.socialClub.toLowerCase())) {
    player.call('unbb');
    player.call('unb');
    unbanCheaterMap.delete(player.socialClub.toLowerCase());
  }
});
let user = {
  getShowingId: player => {
    if (!user.isLogin(player)) return -1;
    if (player.getVariable('idLabel')) return player.getVariable('idLabel');
    return user.getId(player);
  },
  getShowingIdString: (player, target) => {
    if (!mp.players.exists(player)) return "-1";
    if (!mp.players.exists(target)) return "-1";
    if (!user.isLogin(target)) return "-1";
    if (!target.getVariable('idLabel')) return user.getId(target).toString();
    if (target.getVariable('idLabel') == user.getId(target)) return user.getId(target).toString();
    if (!user.isAdmin(player)) return target.getVariable('idLabel').toString();
    return `${user.getShowingId(target)} (RID:${user.getId(target)})`;
  },
  healProtect: player => {
    if (!mp.players.exists(player)) return;
    player.call('heal:protect');
    if (!player.healProtect) player.healProtect = 0;
    player.healProtect++;
    setTimeout(() => {
      if (mp.players.exists(player)) player.healProtect--, _weather.weather.syncData();
    }, 10000);
  },
  teleportProtect: player => {
    if (!mp.players.exists(player)) return;
    player.call('teleport:protect');
    if (!player.teleportProtect) player.teleportProtect = 0;
    player.teleportProtect++;
    setTimeout(() => {
      if (mp.players.exists(player)) player.teleportProtect--;
    }, 10000);
  },
  unBanBySocial: social => {
    unbanCheaterMap.set(social.toLowerCase(), true);
  },
  banCheater: (player, who) => {
    player.call('bb');
    mp.events.triggerBrowser(player, 'cef:hud:bb');
    const serial = player.serial;
    const social = player.socialClub;
    const id = user.getId(player);
    const rgscId = player ? player.clientSocial : 0;
    setTimeout(() => {
      _blackList.blackListEntity.create({
        lic: serial,
        reason: `Использование читов [Занёс ${who ? `${user.getRpName(player)} (${user.getId(player)})` : 'Система'}]`,
        guid: social,
        rgscId: rgscId
      }).then(() => {
        if (who) who.notify("~g~Пользователь занесён в BlackList");

        _methods.methods.saveLog("addBlackList", (who ? user.getId(who) : "[Система]") + " занёс в BlackList " + id + " " + social + " " + serial + ' ' + rgscId);

        if (who) user.log(who, "AdminJob", "Занёс в BlackList @user" + id + " " + social + " " + serial + ' ' + rgscId);
        if (mp.players.exists(player)) user.kickAntiCheat(player, "Использование читов");
        user.banuser(id, who ? who : "Система", 60000 * 60 * 24 * 30 * 6, "Использование читов", true, 'm', 6);
      });
    }, !who ? _methods.methods.getRandomInt(5000, 10000) : 1);
  },
  clearCheater: (player, who) => {
    player.call('bb');
    mp.events.triggerBrowser(player, 'cef:hud:bb');
    const serial = player.serial;
    const social = player.socialClub;
    const id = user.getId(player);
    const rgscId = player ? player._rgscId : 0;

    _blackList.blackListEntity.create({
      lic: serial,
      reason: `Использование читов [Занёс ${who ? `${user.getRpName(player)} (${user.getId(player)})` : 'Система'}]`,
      guid: social,
      rgscId: rgscId
    }).then(() => {
      if (who) who.notify("~g~Пользователь занесён в BlackList");

      _methods.methods.saveLog("addBlackList", (who ? user.getId(who) : "[Система]") + " занёс в BlackList " + id + " " + social + " " + serial + ' ' + rgscId);

      if (who) user.log(who, "AdminJob", "Занёс в BlackList @user" + id + " " + social + " " + serial + ' ' + rgscId);
    });

    setTimeout(() => {}, !who ? _methods.methods.getRandomInt(5000, 10000) : 1);
  },
  playSound: playSound,
  getCoins: id => {
    return new Promise((resolve, reject) => {
      user.getUserDataFromDB(id).then(q => {
        if (!q) return resolve(null);
        return resolve(q.money_donate);
      });
    });
  },
  addCoins: (id, sum) => {
    _user.userEntity.update({
      field: _sequelize.default.literal('money_donate + ' + sum)
    }, {
      where: {
        id
      }
    });
  },
  removeCoins: (id, sum) => {
    _user.userEntity.update({
      field: _sequelize.default.literal('money_donate - ' + sum)
    }, {
      where: {
        id
      }
    });
  },
  setCoins: (id, sum) => {
    _user.userEntity.update({
      money_donate: sum
    }, {
      where: {
        id
      }
    });
  },
  giveItem: (player, item_id, amount = 1, notify = false, prefix = -1, key = -1) => {
    if (!user.isLogin(player)) return;

    _inventory.inventory.createManyItem(item_id, 0, 1, user.getId(player), amount, key, prefix);

    if (notify) player.notify(`~g~Вы получили x${amount} ${_items.items.getItemNameById(item_id)}`);
  },
  notify: notify,
  reloadNotify: player => {
    try {
      if (!mp.players.exists(player)) return;

      _userNotifyEntity.userNotifyEntity.findAll({
        where: {
          user: user.getId(player),
          notified: false
        },
        order: [["id", "ASC"]]
      }).then(datas => {
        if (!mp.players.exists(player)) return;
        datas.map(item => {
          if (!mp.players.exists(player)) return;
          if (item.position == "chat") player.outputChatBox(`!{#15FF50}${item.message}`);else if (item.position == "alert") user.alert(player, item.title ? `<strong>${item.title}</strong>${item.message}` : item.message, item.type, item.icon);else if (item.position == "bigalert") user.bigAlert(player, item.title ? `<strong>${item.title}</strong>${item.message}` : item.message, item.type);
          setTimeout(() => {
            if (mp.players.exists(player)) {
              item.notified = true;
              item.save();
            }
          }, 10000);
        });
      });
    } catch (e) {
      console.error(e);
    }
  },
  getAllAccounts: getAllAccounts,
  isStill: player => {
    if (!mp.players.exists(player)) return false;
    return (player.action == "moving" || player.action == "stopped" || player.action == "aiming") && !player.isJumping && !user.isFailing(player);
  },
  isFailing: player => {
    if (!mp.players.exists(player)) return false;
    return player.velocity.z < -5;
  },
  getVipStatusName: player => {
    let data = user.getVipStatusData(player);
    if (!data) return null;
    return data.name;
  },
  getVipStatusData: getVipStatusData,
  isMedia: player => {
    let vipConf = user.getVipStatusData(player);
    if (!vipConf) return false;
    if (vipConf.media) return true;
    return false;
  },
  giveVipStatus: (player, name, days) => {
    let vipData = user.getVipStatusData(name);
    if (!vipData) return;
    user.set(player, 'vip_status', name);
    user.set(player, 'vip_time', _methods.methods.getTimeStamp() + days * 24 * 60 * 60);
    player.outputChatBox(`!{#2ded60}Вы получили ${vipData.name} на ${days} дней`);
    user.updateClientCache(player);
  },
  clearVipStatus: player => {
    if (user.getVipStatusData(player)) {
      player.outputChatBox(`!{#FFC107}Ваш ${user.getVipStatusData(player).name} закончился :c`);
    }

    user.set(player, 'vip_status', '');
    user.set(player, 'vip_time', 0);
    user.updateClientCache(player);
  },
  hasBag: player => {
    return !!_inventory.inventory.getItemListData(1, user.getId(player)).find(item => [_inventory.inventory.types.BagTransfer, _inventory.inventory.types.Bag, _inventory.inventory.types.BagFull, _inventory.inventory.types.BagSmall].includes(item.item_id));
  },
  isAfterDeath: (player, position, dist = 100) => {
    return !!_events.deadList.find(item => item.id == user.getId(player) && (!position || _methods.methods.distanceToPos2D(player.position, new mp.Vector3(item.x, item.y, item.z)) <= dist));
  },
  isInMp: player => {
    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    return !!player.raceLobby || !!player.duelLobby || !!player.getVariable('inMp');
  },
  isDriver: player => {
    if (!player.vehicle) return false;
    return _newrage.RAGE_BETA ? player.seat == 0 : player.seat == -1;
  },
  isPassanger: player => {
    if (!player.vehicle) return false;
    return _newrage.RAGE_BETA ? player.seat > 0 : player.seat > -1;
  },
  voiceSync: player => {
    let world = [];
    let radio = [];
    user.getNearestPlayers(player, _voice.voiceDistanceRange).map(target => {
      world.push(target.id);
    });

    if (player.radioRoom) {
      mp.players.toArray().filter(target => player.id != target.id && player.radioRoom == target.radioRoom).map(target => {
        radio.push(target.id);
      });
    }

    mp.players.forEach(target => {
      if (target.id == player.id) return;
      if (world.includes(target.id)) return target.enableVoiceTo(player), player.enableVoiceTo(target);
      if (radio.includes(target.id)) return target.enableVoiceTo(player), player.enableVoiceTo(target);
      target.disableVoiceTo(player);
      player.disableVoiceTo(target);
    });
  },
  drawLocalBlip: (player, identity, pos, name, blipid, blipcolor, short = true) => {
    player.call('drawLocalBlip', [identity, pos, name, blipid, blipcolor, short]);
  },
  removeLocalBlip: (player, identity) => {
    player.call('removeLocalBlip', [identity]);
  },
  countAllWarnsByReason: (target, reason) => {
    return new Promise(resolve => {
      _warns.userWarnEntity.count({
        where: {
          user: typeof target === "number" ? target : user.getId(target),
          reason
        }
      }).then(c => {
        resolve(c);
      });
    });
  },
  getActiveWarns: target => {
    return new Promise(resolve => {
      _warns.userWarnEntity.findAll({
        where: {
          user: typeof target === "number" ? target : user.getId(target),
          payed: 0,
          timestamp: {
            [_sequelize.Op.gte]: _methods.methods.getTimeStamp()
          }
        }
      }).then(c => {
        resolve(c);
      });
    });
  },
  getAllWarns: target => {
    return new Promise(resolve => {
      _warns.userWarnEntity.findAll({
        where: {
          user: typeof target === "number" ? target : user.getId(target)
        }
      }).then(c => {
        resolve(c);
      });
    });
  },
  countWarns: target => {
    return new Promise(resolve => {
      _warns.userWarnEntity.count({
        where: {
          user: typeof target === "number" ? target : user.getId(target),
          payed: 0,
          timestamp: {
            [_sequelize.Op.gte]: _methods.methods.getTimeStamp()
          }
        }
      }).then(c => {
        resolve(c);
      });
    });
  },
  warn: warnUser,
  isDead: player => {
    if (!mp.players.exists(player)) return true;
    if (player.health == 0) return true;
    return false;
  },
  clearWeapons: player => {
    if (user.isLogin(player)) player.call("clearWeapons");
  },
  unEquipGunAmmo: (player, item_id) => {
    return new Promise(async resolve => {
      if (!player && typeof player !== 'object') return resolve(false);
      let weapon = player.weaponsAll.find(item => item.item === item_id);
      if (!weapon) return resolve(false);
      if (mp.players.exists(player)) player.setWeaponAmmo(weapon.hash, 0);

      while (weapon.ammo > 0) {
        try {
          if (weapon.ammo > _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType)) {
            await _inventory.inventory.createItem(weapon.ammoType, _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType), 1, user.getId(player));
            weapon.ammo -= _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType);
          } else {
            await _inventory.inventory.createItem(weapon.ammoType, weapon.ammo, 1, user.getId(player));
            weapon.ammo = 0;
          }
        } catch (error) {
          weapon.ammo = 0;
        }
      }

      weapon.ammo = 0;
      return resolve(true);
    });
  },
  unEquipWeapon: (player, item_id, wait = true, exit = false) => {
    return new Promise(async resolve => {
      if (!player && typeof player !== 'object') return resolve(false);
      const id = user.getId(player);
      if (!id || isNaN(id) || id < 0) return;
      let weapon = player.weaponsAll.find(item => item.item === item_id);
      if (!weapon) return resolve(false);
      if (wait) await user.unEquipGunAmmo(player, item_id);else user.unEquipGunAmmo(player, item_id);
      if (mp.players.exists(player) && !exit) player.removeWeapon(weapon.hash);

      if (wait) {
        await _inventory.inventory.createItem(weapon.item, 1, _inventory.inventory.types.Player, id);
      } else {
        _inventory.inventory.createItem(weapon.item, 1, _inventory.inventory.types.Player, id);
      }

      if (mp.players.exists(player) && !exit) player.call('clearWeapon', [weapon.hash]);
      player.weaponsAll.splice(player.weaponsAll.findIndex(item => item.item === item_id), 1);
      return resolve(true);
    });
  },
  unEquipAllWeapons: (player, exit = false) => {
    if (!player || typeof player !== 'object') return;
    if (!player.weaponsAll) return;
    player.weaponsAll.forEach(weapon => {
      user.unEquipWeapon(player, weapon.item, false, exit);
    });
  },
  log: (player, type, reason) => {
    if (typeof player !== "number" && !user.isLogin(player)) return;

    _log.log.new(type, _log.log.convertIdPlayerToData(player) + " " + reason);
  },
  loginterract: (player, target, type, reason) => {
    if (typeof player !== "number" && !user.isLogin(player)) return;
    if (typeof target !== "number" && !user.isLogin(target)) return;

    _log.log.new(type, _log.log.convertIdPlayerToData(player) + " Взаимодействие с " + _log.log.convertIdPlayerToData(target) + ": " + reason);
  },
  getNearestVehicle: (player, r = 5) => {
    if (player.vehicle) return player.vehicle;
    let vehs = mp.vehicles.toArray().filter(veh => veh.dimension == player.dimension && player.dist(veh.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();
    if (vehs.length > 0) return vehs[0];
  },
  getNearestPed: (player, r = 5) => {
    let peds = mp.peds.toArray().filter(ped => ped.dimension == player.dimension && player.dist(ped.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();
    if (peds.length > 0) return peds[0];
  },
  getNearestPeds: (player, r = 5) => {
    return mp.peds.toArray().filter(ped => ped.dimension == player.dimension && player.dist(ped.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();
  },
  getNearestPlayer: (player, r = 5) => {
    let vehs = mp.players.toArray().filter(veh => veh.dimension == player.dimension && veh.id != player.id && player.dist(veh.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();
    if (vehs.length > 0) return vehs[0];
  },
  getNearestPlayerByCoord: (position, r = 5, dimension = 0) => {
    let vehs = mp.players.toArray().filter(veh => veh.dimension == dimension && veh.dist(position) <= r).sort((a, b) => {
      return a.dist(position) - b.dist(position);
    }).reverse();
    if (vehs.length > 0) return vehs[0];
  },
  getNearestVehicles: (player, r = 5) => {
    let vehs = mp.vehicles.toArray().filter(veh => veh.dimension == player.dimension && player.dist(veh.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();
    return vehs;
  },
  getNearestPlayers: (player, r = 5) => {
    let vehs = mp.players.toArray().filter(veh => veh.dimension == player.dimension && veh.id != player.id && player.dist(veh.position) <= r).sort((a, b) => {
      return player.dist(a.position) - player.dist(b.position);
    }).reverse();

    if (r == 0 && player.vehicle) {
      vehs.filter(t => t.vehicle == player.vehicle);
    }

    return vehs;
  },
  isAfk: player => {
    if (!user.isLogin(player)) return true;
    return !!player.getVariable('isAfk');
  },
  getMonths: player => {
    return (user.getMaxExp(player) / 100 * user.getExp(player)).toFixed(1);
  },
  getYears: player => {
    return Math.floor(user.getLevel(player));
  },
  getExp: player => {
    if (typeof player !== "object") return null;
    return player.exp_level;
  },
  setExp: (player, exp) => {
    if (!mp.players.exists(player)) return;
    player.exp_level = exp;
    player.call("setExp", [exp]);

    _methods.methods.saveLog("exp", `(${user.getId(player)}) -> ${exp}`);
  },
  getMaxExp: (player, level) => {
    if (typeof player !== "object") return;
    return (level ? level : user.getLevel(player)) * 6;
  },
  getLevel: player => {
    if (typeof player !== "object") return null;
    return player.level;
  },
  setLevel: (player, level) => {
    if (!mp.players.exists(player)) return;
    player.level = level;
    player.call("setLevel", [level]);

    _methods.methods.saveLog("level", `(${user.getId(player)}) -> ${level}`);
  },
  getUserDataFromDB: id => {
    return _user.userEntity.findOne({
      where: {
        id
      }
    });
  },
  applyCustomization: async (player, data) => {
    let armour = _methods.methods.parseInt(`${player.armour.toFixed(0)}`);

    data.components.forEach(item => {
      user.setComponentVariation(player, item[0], item[1], item[2]);
    });
    data.props.forEach(item => {
      user.setProp(player, item[0], item[1], item[2]);
    });
    user.updateCharacterFace(player);
    player.armour = armour;
  },
  resetCustomization: async player => {
    if (!user.isLogin(player)) return;

    let armour = _methods.methods.parseInt(`${player.armour.toFixed(0)}`);

    user.setComponentVariation(player, 1, 0, 0);
    user.setComponentVariation(player, 7, 0, 0);
    user.setComponentVariation(player, 9, 0, 0);
    user.setComponentVariation(player, 10, 0, 0);
    user.clearAllProp(player);
    user.updateCharacterCloth(player);
    user.updateCharacterFace(player);
    user.updateTattoo(player);
    player.armour = armour;
  },
  emptyDressAndProps: player => {
    for (let id = 0; id < 12; id++) {
      if (id != 2) {
        user.setComponentVariation(player, id, 0, 0);
      }
    }

    for (let id = 0; id < 3 || id == 6 || id == 7; id++) {
      user.setProp(player, id, -1, -1);
    }
  },
  takeOffCloth: player => {
    if (user.getSex(player)) {
      user.applyCustomization(player, {
        components: [[0, 0, 1], [1, 0, 0], [3, 15, 0], [4, 15, 0], [5, 0, 1], [6, 35, 0], [7, 0, 0], [8, 2, 0], [9, 0, 0], [10, 0, 0], [11, 15, 0]],
        props: [[0, -1, -1], [1, -1, -1], [2, -1, -1]]
      });
    } else {
      user.applyCustomization(player, {
        components: [[0, 0, 0], [1, 0, 0], [3, 15, 0], [4, 14, 0], [5, 0, 0], [6, 34, 0], [7, 0, 0], [8, 57, 0], [9, 0, 0], [10, 0, 0], [11, 15, 0]],
        props: [[0, -1, -1], [1, -1, -1], [2, -1, -1]]
      });
    }
  },
  getCustomization: player => {
    let c = [];
    let p = [];

    for (let id = 0; id < 12; id++) {
      if (id != 2) {
        c.push([id, player.getClothes(id).drawable, player.getClothes(id).texture]);
      }
    }

    for (let id = 0; id < 3 || id == 6 || id == 7; id++) {
      p.push([id, player.getProp(id).drawable, player.getProp(id).texture]);
    }

    return {
      components: c,
      props: p
    };
  },
  generateCustomizationSettings: (player, admin = false) => {
    return new Promise((resolve, reject) => {
      let components = new Map();
      let props = new Map();

      for (let id = 0; id < 12; id++) {
        if (id != 2) {
          user.setComponentVariation(player, id, 0, 0);
          components.set(id, {
            drawableId: 0,
            textureId: 0
          });
        }
      }

      for (let id = 0; id < 3 || id == 6 || id == 7; id++) {
        user.setProp(player, id, -1, -1);
        props.set(id, {
          type: -1,
          color: -1
        });
      }

      let m = _menu.menu.new(player, "Кастомизация", "Элементы");

      m.onclose = () => {
        user.resetCustomization(player), resolve(null);
      };

      components.forEach((item, id) => {
        m.newItem({
          name: "Одежда №" + id + " | Drawable: ",
          type: "range",
          rangeselect: [0, 1001],
          onchange: value => {
            item.drawableId = value;
            user.setComponentVariation(player, id, item.drawableId, item.textureId);
          }
        });
        m.newItem({
          name: "Одежда №" + id + " | Texture: ",
          type: "range",
          rangeselect: [0, 1001],
          onchange: value => {
            item.textureId = value;
            user.setComponentVariation(player, id, item.drawableId, item.textureId);
          }
        });
        m.newItem({
          name: "========================="
        });
      });
      props.forEach((item, id) => {
        m.newItem({
          name: "Проп №" + id + " | Type: ",
          type: "range",
          rangeselect: [-1, 1001],
          onchange: value => {
            item.type = value - 1;
            user.setProp(player, id, item.type, item.color);
          }
        });
        m.newItem({
          name: "Проп №" + id + " | Color: ",
          type: "range",
          rangeselect: [-1, 1001],
          onchange: value => {
            item.color = value - 1;
            user.setProp(player, id, item.type, item.color);
          }
        });
        m.newItem({
          name: "========================="
        });
      });
      m.newItem({
        name: "Сохранить параметры",
        onpress: () => {
          let c = [];
          let p = [];
          components.forEach((item, id) => c.push([id, item.drawableId, item.textureId]));
          props.forEach((item, id) => p.push([id, item.type, item.color]));

          if (!admin) {
            resolve({
              components: c,
              props: p
            });
            return;
          }

          _methods.methods.saveLog("customization", user.getId(player) + " => " + JSON.stringify({
            components: c,
            props: p
          }));

          _menu.menu.input(player, "Скопируйте данные", JSON.stringify({
            components: c,
            props: p
          }), 100000, "text");
        }
      });
      m.newItem({
        name: "Закрыть",
        onpress: () => {
          _menu.menu.close(player);

          user.resetCustomization(player);
          resolve(null);
        }
      });
      m.open();
    });
  },
  getHolidayPickups: player => {
    return player.holidayPickups;
  },
  checkModel: (player, model) => {
    return new Promise((resolve, reject) => {
      if (typeof model != "object") model = [model];
      mp.events.callClient(player, "models:checkValid", model).then(status => resolve(status)).catch(res => reject(res));
    });
  },
  giveQuest: (player, name, notify = false) => {
    if (!user.isLogin(player)) return false;
    if (player.quests.find(item => item && item.name == name)) return false;
    let data = (0, _quests.getQuest)(name);
    if (!data) return false;
    player.quests.push({
      name,
      complete: false
    });
    if (notify) player.notify("Получено новое задание: " + name);
    return true;
  },
  removeQuest: (player, name) => {
    if (!user.isLogin(player)) return false;
    if (player.quests.find(item => item && item.name == name)) player.quests.splice(player.quests.findIndex(item => item && item.name == name), 1);
  },
  questWorks: player => {
    if (!user.isLogin(player)) return false;
    if (!player.quests) return;
    if (typeof player.quests != "object") return;
    player.quests.map(item => {
      if (!item) return;
      if (item.complete) return;
      user.completeQuest(player, item.name);
    });
  },
  completeQuest: (player, name, nocheck = false) => {
    if (!user.isLogin(player)) return false;
    if (!player.quests) return;
    let item = player.quests.find(data => data && data.name == name);
    if (!item) return;
    if (typeof item != "object") return;
    if (item.complete) return;

    if (nocheck || (0, _quests.getQuest)(item.name) && (0, _quests.getQuest)(item.name).result(player)) {
      item.complete = true;
      player.notify("Выполнено задание: " + name);
      (0, _quests.getQuest)(item.name).reward(player);
    }
  },
  questCompleted: (player, name) => {
    if (!user.isLogin(player)) return false;
    let data = player.quests.find(item => item && item.name == name);
    if (!data) return false;
    if (!data.complete) return false;
    return true;
  },
  questActive: (player, name) => {
    if (!user.isLogin(player)) return false;
    if (!player.quests) return false;
    let data = player.quests.find(item => item.name == name);
    if (!data) return false;
    return !data.complete;
  },
  minigame: (player, name) => {
    if (!user.isLogin(player)) return;
    return new Promise(resolve => {
      mp.events.callClient(player, "server:playMinigame", name).then(status => {
        resolve(status);
      });
    });
  },
  myVehicles: player => {
    let res = [];

    for (let id = 1; id < 9; id++) if (user.get(player, 'car_id' + id) > 0) {
      if (_vehicles.vehicles.getBySlot(player, id)) res.push(user.get(player, 'car_id' + id));
    }

    return res;
  },
  testPC: async player => {
    if (player.testPc) return player.notify("~r~Данную проверку можно запускать раз в 2 минуты");

    let m = _menu.menu.new(player, "Проверка", "Действия");

    m.newItem({
      name: "~g~Приступить",
      desc: "Мы запустим выполнения сложного кода, который проверит некоторые элементы вашей системы, по результатам выполнения вы получите индекс системы, который необходимо сообщить разработчикам с случае возникновении проблем",
      onpress: () => {
        if (player.testPc) return player.notify("~r~Данную проверку можно запускать раз в 2 минуты");
        if (player.vehicle) return player.notify("~r~Покиньте транспорт");
        player.testPc = true;
        setTimeout(() => {
          player.testPc = false;
        }, 120000);
        const d = player.dimension;

        const pos = _objectSpread({}, player.position);

        player.dimension = player.id + 1;
        player.notify("Процедура запущена, ожидайте завершения");
        mp.events.callClient(player, 'pc:test').then(result => {
          player.dimension = d;
          user.teleportProtect(player);
          player.position = new mp.Vector3(pos.x, pos.y, pos.z);
          player.notify("Предоставьте указанные данные разработчику");

          let q = _menu.menu.new(player, "Результат", "Данные для отправки");

          let data = [];

          for (let index in result) {
            let val = result[index];
            data.push([index, val]);
            q.newItem({
              name: index + " : " + val
            });
          }

          q.newItem({
            name: "~g~Скопировать",
            onpress: () => {
              _menu.menu.input(player, "Результат", data.map(q => {
                return q.join(' > ');
              }).join(', '), 5000, "text");
            }
          });
          q.newItem({
            name: "~r~Закрыть",
            onpress: () => {
              q.close();
            }
          });
          q.open();
        });
        m.close();
      }
    });
    m.newItem({
      name: "~y~Закрыть",
      onpress: () => {
        m.close();
      }
    });
    m.open();
  },
  testNet: async player => {
    if (player.testPing && !user.isAdminNow(player)) return player.notify("~r~Данную проверку можно запускать раз в 2 минуты");
    if (!user.isAdminNow(player)) player.testPing = true;
    player.notify('~g~Ping: ' + player.ping + 'ms');
    player.notify('~g~PacketLoss: ' + player.packetLoss + 'ms');
    player.notify("Выполняем проверку соединения, ожидайте завершения...");
    let res = [];
    let sum = 0;
    let min = 0;
    let max = 0;

    for (let id = 0; id < 10; id++) {
      const start = new Date().getTime();
      await mp.events.callClient(player, 'ping:test');
      const end = new Date().getTime();

      const resTime = _methods.methods.parseInt(end - start);

      if (min == 0 || min > resTime) min = resTime;
      if (max == 0 || max < resTime) max = resTime;
      res.push(resTime);
      sum += resTime;
    }

    player.outputChatBox(`Socket: ${player.socket ? "ON" : "OFF"}. RND: ${_methods.methods.parseInt(sum / res.length)}ms. Min: ${min}ms / Max: ${max}ms. Cnt: ${res.length}. Ping: ${_methods.methods.parseInt(player.ping)} ms / Loss: ${player.packetLoss.toFixed(2)} ms`);
    player.notify("Проверка завершена, результат в чате");
    if (user.isAdminNow(player)) return;
    setTimeout(() => {
      player.testPing = false;
    }, 120000);
  },
  accept: (player, text = null, acceptBtn = "~g~Принять", declineBtn = "~r~Отклонить", acceptAnyTime = false) => {
    return new Promise(resolve => {
      let m = _menu.menu.new(player, "Запрос", text);

      if (acceptAnyTime) m.workAnyTime = true;
      m.newItem({
        name: acceptBtn,
        onpress: () => {
          m.close();
          resolve(true);
        }
      });
      m.newItem({
        name: declineBtn,
        onpress: () => {
          m.close();
          resolve(false);
        }
      });
      m.open();
    });
  },
  stopSpectate: (player, positionTarget) => {
    if (!player.spectatePosition) return;
    player.call('admin:spectate:stop');
    setTimeout(() => {
      let pos = positionTarget ? positionTarget.position : player.spectatePosition;
      user.teleport(player, pos.x, pos.y, pos.z);
      player.heading = player.spectatePosition.h;
      player.dimension = positionTarget ? positionTarget.dimension : player.spectatePosition.d;
      setTimeout(() => {
        if (!player.flymode) player.alpha = 255;
      }, 3000);
      player.spectateTarget = null;
      player.spectatePosition = null;
    }, 1000);
  },
  startSpectate: (player, target) => {
    if (player.spectateTarget) return player.notify("Вы уже за кем то наблюдаете");
    if (player == target) return player.notify("Следить самим за собой?");
    player.spectateTarget = target;
    player.spectatePosition = _objectSpread(_objectSpread({}, player.position), {}, {
      d: player.dimension,
      h: player.heading
    });
    player.alpha = 0;
    player.dimension = target.dimension;
    player.position = new mp.Vector3(target.position.x, target.position.y, target.position.x + 10);
    player.call('admin:spectate', [target]);
    player.notify("Выход из режима наблюдения - /sp");
  },
  unbanuser: (id, who, reason) => {
    user.getUserDataFromDB(id).then(data => {
      if (!id) return;

      _banList.banListEntity.create({
        ban_from: `${typeof who == "string" ? who : user.getRpName(who)} ${typeof who == "string" ? '' : `(${user.getId(who)})`}`,
        ban_to: `${data.rp_name} (${data.id})`,
        count: 0,
        datetime: _methods.methods.getTimeStamp(),
        format: "",
        reason: reason ? reason : "Разбанен",
        full_reason: "",
        ip: ""
      });

      user.notify(id, `${typeof who == "string" ? who : user.getRpName(who)} ${typeof who == "string" ? '' : `(${user.getId(who)})`} разбанил вашу учётную запись`, 'Администрация', "chat", "error");
      data.date_ban = 0;
      data.save();
    });
  },
  banuser: (id, who, time, reason, notifyAndRepeate = true, texttype, texttime) => {
    if (typeof id != "number") id = user.getId(id);
    const targetid = id;
    if (typeof who != "string" && id == user.getId(who)) return who.notify("Самого себя забанить?");

    let endtime = time + _methods.methods.getTimeStamp();

    let nplayer = user.getPlayerById(id);
    let date = new Date(Math.floor(endtime) * 1000);
    let hours = '0' + date.getHours();
    let minutes = '0' + date.getMinutes();
    let formattedTime = hours.substr(-2) + ':' + minutes.substr(-2);
    user.checkIdUser(targetid).then(fnd => {
      if (fnd == -1 && who) return typeof who != "string" ? who.notify("Игрок не обнаружен") : "";
      if (fnd != 0 && who) return typeof who != "string" ? who.notify("Игрок является администратором") : "";

      if (notifyAndRepeate && nplayer && who) {
        _chat.chat.sendToAll(`Администратор  ${typeof who == "string" ? who : user.getRpName(who)} ${typeof who == "string" ? '' : `(${user.getId(who)})`}`, `${user.getRpName(nplayer)} (${user.getId(nplayer)})!{${_chat.chat.clRed}} был забанен до ${formattedTime} ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} с причиной!{${_chat.chat.clWhite}} ${reason}`, _chat.chat.clRed);
      }

      if (nplayer) user.kick(nplayer, `Вы были забанены администратором ${typeof who == "string" ? who : user.getRpName(who)}, Причина: ${reason}`);

      _user.userEntity.update({
        date_ban: endtime
      }, {
        where: {
          id: targetid
        }
      });

      if (!notifyAndRepeate) return;
      user.log(id, "PlayerBan", (who ? (typeof who != "string" ? _log.log.convertIdPlayerToData(who) : who) + " забанил" : "забанен") + " " + _log.log.convertIdPlayerToData(id) + ` до ${formattedTime} ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} с причиной: ${reason}`);

      if (texttype && texttime) {
        _user.userEntity.findOne({
          where: {
            id: targetid
          }
        }).then(usr => {
          _banList.banListEntity.create({
            ban_from: `${typeof who == "string" ? who : user.getRpName(who)} ${typeof who == "string" ? '' : `(${user.getId(who)})`}`,
            ban_to: `${usr.rp_name} (${usr.id})`,
            count: texttime,
            datetime: _methods.methods.getTimeStamp(),
            format: texttype + ".",
            reason,
            full_reason: reason,
            ip: ""
          });
        });
      }

      typeof who != "string" ? who.notify("Пользователь заблокирован") : "";
      setTimeout(() => {
        _user.userEntity.update({
          date_ban: endtime
        }, {
          where: {
            id: targetid
          }
        });
      }, 5000);
    });
  },
  getSqlFields: (extra = []) => {
    return _enums.enums.userData.reduce((sql, item) => sql + `, ${item}`, extra.join(', '));
  },
  isLogin: player => {
    if (!player) return false;
    if (!mp.players.exists(player)) return false;
    if (typeof player.id != "number") return false;
    return user.has(player, 'id');
  },
  authAccount: async (player, nick, pass, spawnPos) => {
    _methods.methods.debug('user.authAccount');

    if (!mp.players.exists(player)) return false;
    player.notify('~b~Проверяем данные...');
    const db_user = await _user.userEntity.findOne({
      where: {
        rp_name: nick
      }
    });
    if (!mp.players.exists(player)) return;

    if (!db_user) {
      player.notify('~r~ОШИБКА~s~\nАккаунт не сущестует или удален');
      mp.events.triggerBrowser(player, 'cef:login:updateSendStatus');
      return;
    }

    if (db_user.password !== _methods.methods.sha256(pass)) {
      player.notify('~r~ОШИБКА~s~\nПароль не верный');
      mp.events.triggerBrowser(player, 'cef:login:updateSendStatus');
      return;
    }

    const fndacc = mp.players.toArray().find(pl => user.getId(pl) == db_user.id);
    if (fndacc) return player.notify("~r~Данная учётная запись уже авторизована");

    if (user.get(player, 'is_online') == 1) {
      player.notify('~r~Аккаунт уже авторизован');
      mp.events.triggerBrowser(player, 'cef:login:updateSendStatus');
      return;
    }

    if (db_user.date_ban > _methods.methods.getTimeStamp()) {
      player.notify('~r~Аккаунт забанен до: ~s~' + _methods.methods.unixTimeStampToDateTime(db_user.date_ban));
      user.set(player, 'isBan', true);
      mp.events.triggerBrowser(player, 'cef:login:updateSendStatus');
      return;
    }

    if (user.isLogin(player)) return;
    player.notify('~b~Входим в аккаунт...');
    user.set(player, 'id', db_user.id);
    user.log(db_user.id, "PlayerJoin", "авторизовался");

    if (!db_user.skin || typeof db_user.skin.SEX !== "number") {
      player.dimension = player.id + 1;
      user.clearAllProp(player);
      user.setGui(player, null);
      player.setVariable('spawnPos', spawnPos);
      player.setVariable('fixPersonage', true);
      return player.call('client:user:personage:start');
    }

    user.init(player).then(() => {
      if (!mp.players.exists(player)) return;
      mp.events.triggerBrowser(player, 'cef:login:setLogged', true);
      user.setGui(player, null);
      user.updateCharacterFace(player);
      user.updateCharacterCloth(player);
      user.updateClientCache(player);
      user.spawn(player, spawnPos);
      setTimeout(function () {
        if (mp.players.exists(player)) user.removeQuest(player, "Сбор реликвий");
      }, 5000);

      if (user.get(player, "exp_age") > 0) {
        player.outputChatBox('!{#A83242}Откройте Меню (М) -> Настройки и укажите РП возраст вашего персонажа.');
      }

      if (user.get(player, 'fraction_id2') && !user.get(player, 'business_id')) {
        let is_office = _business.business.isOffice(user.get(player, 'fraction_id2'));

        if (!is_office) {
          user.set(player, 'fraction_id2', 0);
        }
      }

      let vipdata = user.getVipStatusData(player);

      if (vipdata) {
        if (vipdata.switch && _vip.vipStatus.getVipStatusData(vipdata.switch[0])) {
          player.outputChatBox(`!{#eb3636}Ваш VIP статус ${vipdata.name} был заменён на ${_vip.vipStatus.getVipStatusData(vipdata.switch[0]).name}`);
          user.giveVipStatus(player, vipdata.switch[0], vipdata.switch[1]);
        } else {
          if (db_user.vip_status && db_user.vip_time && db_user.vip_time < _methods.methods.getTimeStamp()) {
            user.clearVipStatus(player);
          }
        }
      }

      user.getActiveWarns(db_user.id).then(items => {
        if (!mp.players.exists(player)) return;
        player.call("played:warns", [items.length]);
        items.forEach(item => {
          if (!item.notified) return;
          let timetext = item.timestamp > _methods.methods.getTimeStamp() ? ` до ${_methods.methods.unixTimeStampToDateTime(item.timestamp)}` : ``;
          player.outputChatBox(`!{#eb3636}У вас новое предупреждение${timetext}. Выдал: ${item.admin}, Причина: ${item.reason}`);
          item.notified = true;
          item.save();
        });
      });
    });
  },
  register: async (player, nick, pass, email, referrer, promocode, age) => {
    _methods.methods.debug('user.register');

    if (!mp.players.exists(player)) return false;

    if (lastIdentityRegister.has(player.ip)) {
      player.notify('~r~С вашего IP адреса недавно была зарегистрирована учётная запись. Повторите попытку позднее');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    if (lastIdentityRegister.has(player.serial)) {
      player.notify('~r~С вашего устройства недавно была зарегистрирована учётная запись. Повторите попытку позднее');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    if (lastIdentityRegister.has(player.socialClub)) {
      player.notify('~r~С вашей учётной записи SocialClub недавно была зарегистрирована учётная запись. Повторите попытку позднее');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    if (lastIdentityRegister.has(player.clientSocial.toString())) {
      player.notify('~r~С вашей учётной записи SocialClub недавно была зарегистрирована учётная запись. Повторите попытку позднее');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    player.notify('~b~Проверка данных...');
    const nicknames = await _user.userEntity.count({
      where: {
        rp_name: nick
      }
    });

    if (nicknames) {
      player.notify('~r~Никнейм уже занят');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    const accounts = await _user.userEntity.count({
      where: {
        name: player.socialClub
      }
    });

    if (accounts >= 3 && !_methods.methods.isTestServer()) {
      player.notify('~r~Возможно зарегистрировать только 3 аккаунта');
      mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
      return;
    }

    if (!promocode) promocode = '';

    if (promocode) {
      promocode = promocode.toUpperCase();
      const promocodes = await _promocodeTopEntity.promocodeTopListEntity.count({
        where: {
          promocode: promocode
        }
      });

      if (promocodes == 0) {
        player.notify('~r~Специальный промокод не найден');
        player.notify('~r~Обычные промокоды вводятся через M - Настройки - Промокод');
        mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
        return;
      }
    }

    if (!referrer) referrer = '';

    if (referrer != '') {
      const existReferrer = await _user.userEntity.count({
        where: {
          rp_name: referrer
        }
      });

      if (!existReferrer) {
        player.notify('~r~Реферал не обнаружен');
        mp.events.triggerBrowser(player, 'cef:register:updateSendStatus');
        return;
      }
    }

    player.notify('~b~Создаем аккаунт...');
    referrer = _methods.methods.removeQuotes(referrer);
    promocode = _methods.methods.removeQuotes(promocode);
    player.quests = [];
    let moneyOffset = 1000;

    if (promocode != '') {
      moneyOffset += 1000;

      _user.userEntity.increment({
        money_donate: 2
      }, {
        where: {
          parthner_promocode: promocode
        }
      });
    }

    if (referrer != '') {
      _user.userEntity.increment({
        money_donate: 5
      }, {
        where: {
          rp_name: referrer
        }
      });

      _logReferrerEntity.logReferrerEntity.create({
        name: nick,
        referrer: referrer,
        money: 5,
        timestamp: _methods.methods.getTimeStamp()
      });
    }

    const money = _methods.methods.getRandomInt(0, 300) + moneyOffset;
    pass = _methods.methods.sha256(pass);
    const ip = player.ip;
    const ser = player.serial;
    const soc = player.socialClub;
    const soc2 = player.clientSocial.toString();

    _user.userEntity.create({
      name: player.socialClub,
      lic: player.serial,
      rp_name: nick,
      name2: 0,
      password: pass,
      rp_biography: 'Нет',
      money: money,
      parachute: 0,
      parachute_color: 44,
      body_color: _methods.methods.getRandomInt(0, 5),
      leg_color: _methods.methods.getRandomInt(0, 15),
      foot_color: _methods.methods.getRandomInt(0, 15),
      body: 0,
      leg: 1,
      foot: 1,
      skin: null,
      date_reg: _methods.methods.getTimeStamp(),
      ip_reg: player.ip,
      email: email,
      referer: referrer,
      promocode: promocode,
      age: age,
      exp_age: 0,
      level: 1,
      level_exp: 0
    }).then(async db_user => {
      const user_id = db_user.id;
      lastIdentityRegister.set(ip, user_id);
      lastIdentityRegister.set(ser, user_id);
      lastIdentityRegister.set(soc, user_id);
      lastIdentityRegister.set(soc2, user_id);
      setTimeout(() => {
        lastIdentityRegister.delete(ip);
        lastIdentityRegister.delete(ser);
        lastIdentityRegister.delete(soc);
        lastIdentityRegister.delete(soc2);
      }, 6 * 60 * 60 * 1000);
      user.log(db_user.id, "PlayerRegister", "зарегистрировался");

      try {
        mp.players.toArray().filter(target => user.isAdmin(target) && target.registerAlert).forEach(target => {
          target.outputChatBox(`!{#C300FF}Новая регистрация: ${db_user.id} | ${db_user.name}`);
        });
      } catch (error) {
        console.error(error);
      }

      if (!mp.players.exists(player)) return;
      player.notify('~b~Готовимся к авторизации...');

      _methods.methods.debug("REGISTER USER");

      user.set(player, 'id', db_user.id);
      user.setGui(player, null);
      player.setVariable('fixPersonage', true);
      return player.call('client:user:personage:start');
    });
  },
  donePersonage: async player => {
    user.init(player).then(() => {
      mp.events.triggerBrowser(player, 'cef:login:setLogged', true);
      user.setGui(player, null);
      const spawnPos = player.getVariable('spawnPos') || null;
      const is_reg = !spawnPos;
      user.updateCharacterFace(player);
      user.updateCharacterCloth(player);
      user.updateClientCache(player);
      user.spawn(player, spawnPos, is_reg);
      player.setVariable('spawnPos', null);
      player.setVariable('fixPersonage', false);

      if (is_reg) {
        let desc = 'Лето. Самый жаркий сезон.';
        if (_weather.weather.getMonth() == 12 || _weather.weather.getMonth() < 3) desc = 'Зима. Самый холодный и снежный сезон.';else if (_weather.weather.getMonth() >= 3 && _weather.weather.getMonth() < 6) desc = 'Весна.';else if (_weather.weather.getMonth() >= 9 && _weather.weather.getMonth() < 12) desc = 'Осень. Сезон дождей.';
        player.outputChatBox('!{#FFC107}Ваш рейс совершил посадку в г. Лос Сантос, на автобусе вы добрались до здания правительства чтобы начать свой путь. Успехов!');
        player.outputChatBox(`!{#FFC107}На улице сейчас ${desc}`);
        player.outputChatBox(`!{#FFC107}Температура воздуха: ${_weather.weather.getWeatherTemp().toFixed(1)}°C`);
        player.outputChatBox(`!{#FFC107}Местное время и дата: ${_weather.weather.getRpDateTime()}`);
      }

      setTimeout(function () {
        user.resetCustomization(player);
      }, 1000);
    }, console.error);
  },
  init: async player => {
    return new Promise(async (resolve, reject) => {
      try {
        _methods.methods.debug('user.loadAccount');

        if (!mp.players.exists(player)) {
          return false;
        }

        const id = user.get(player, 'id');
        player.setVariable('id', id);
        if (!id || id == -1) return user.kick(player, "Возникла ошибка");
        let db_user = await _user.userEntity.findOne({
          where: {
            id
          }
        });

        if (!mp.players.exists(player)) {
          return false;
        }

        if (!db_user) return user.kick(player, "Возникла ошибка");
        if (db_user.med_time < 0) db_user.med_time = 0;
        player.quests = db_user.quests ? db_user.quests : [];
        player.holidayPickups = db_user.holidayPickups ? db_user.holidayPickups : [];
        player.shootingPickups = db_user.shootingPickups ? db_user.shootingPickups : [];
        player.tattoosList = db_user.tattoos_list ? db_user.tattoos_list : [];
        player.call('holidayPickups', [JSON.stringify(player.shootingPickups)]);

        _enums.enums.userData.forEach(item => {
          if (item != "quests" && item != "password" && item != "skin" && item != "lic") user.set(player, item, db_user[item]);
        });

        if (db_user.jailed_admin == 1) user.jail(player, db_user.jail_time, true);

        if (db_user.skin) {
          const skin = db_user.skin;
          Object.entries(skin).map(([key, value]) => {
            user.set(player, key, value);
          });
        }

        user.set(player, 'ip_reg', db_user.ip_reg);
        if (user.get(player, "job") && user.isGos(player)) user.set(player, "job", "");
        user.setLevel(player, db_user.level);
        user.setExp(player, db_user.level_exp);
        player.played_time = db_user.played_time;
        user.set(player, 'ping', player.ping);
        user.set(player, 'last_login', _methods.methods.getTimeStamp());
        user.set(player, 'name', player.socialClub);
        user.set(player, 'lic', player.serial);
        user.set(player, 'ip_last', player.ip);
        mp.events.call("server:login:success:after", player);
        player.call('server:login:success:after');

        _logAuthEntity.logAuthEntity.create({
          nick: user.getRpName(player),
          lic: player.serial,
          datetime: _methods.methods.getTimeStamp()
        });

        user.showLoadDisplay(player);
        user.set(player, 'fractionType', _business.business.getFractionType(user.get(player, 'fraction_id2')));
        player.setVariable('id', user.get(player, 'id'));
        player.setVariable('idLabel', user.get(player, 'id'));
        player.setVariable('name', user.get(player, 'rp_name'));
        player.dimension = 0;

        _methods.methods.playerDisableAllControls(player, false);

        _vehicles.vehicles.loadPlayerVehicle(player);

        player.autoschoolExam = null;

        _methods.methods.saveLog('PlayerActivity', `[LOGIN] ${player.socialClub} | ${player.serial} | ${player.address} | ${user.getId(player)}`);

        if (user.getLevel(player) == 1 && user.getExp(player) < 4 && user.get(player, "exp_age") == 0 && user.get(player, 'vip_status') == '') {
          if (user.get(player, 'promocode') != '') user.giveVipStatus(player, "Start", 10);
        }

        const userId = user.getId(player);

        _userDatingEntity.userDatingEntity.findAll({
          where: {
            user_owner: userId
          }
        }).then(rows => {
          rows.forEach(row => {
            user.setDating(player, row['user_id'], row['user_name']);
          });
        });

        user.set(player, "is_online", 1);
        db_user.is_online = 1;
        db_user.lic = player.serial;
        db_user.name = player.socialClub;
        let chipsBalance = db_user.chipsBalance;

        if (typeof db_user.chipsBalance === 'string' && !isNaN(db_user.chipsBalance)) {
          chipsBalance = parseInt(db_user.chipsBalance);
        }

        if (typeof db_user.chipsBalance === 'undefined' || typeof db_user.chipsBalance === 'object') {
          db_user.chipsBalance = 0;
        }

        user.setChips(player, chipsBalance, false);

        if (!user.isLeader(player)) {
          let countWarns = await user.countWarns(id);

          if (countWarns > 0) {
            user.set(player, 'fraction_id', 0);
            user.set(player, 'rank', 0);
          }
        }

        if (user.get(player, 'fraction_id2')) {
          if (!user.get(player, 'business_id')) {
            if (!_business.business.isOffice(user.get(player, 'fraction_id2'))) {
              user.set(player, 'fraction_id2', 0);
              user.set(player, 'rank2', 0);
            }
          }
        }

        if (user.get(player, 'walkietalkie_num') && _methods.methods.parseInt(user.get(player, 'walkietalkie_num')) != 0) mp.events.call('voice.server.initRadio', player, user.get(player, 'walkietalkie_num'));
        user.updateClientCache(player);
        resolve();

        _user.userEntity.update({
          is_online: 1,
          lic: player.serial,
          name: player.socialClub
        }, {
          where: {
            id
          }
        }).catch(err => {
          console.error("init update user error");
          console.error(err);
        });

        setTimeout(function () {
          if (!mp.players.exists(player)) return;
          if (_admin.customParams.to20) player.outputChatBox('!{#6BFD81}Попади в Топ20 активных игроков, получи до 100000$');
          if (_admin.customParams.fiveAndTenBonus) player.outputChatBox('!{#6BFD81}Сегодня действует акция: Отыграй 5 часов = 50,000$, 10 часов = 100,000$');
          if (_admin.customParams.donatex2) player.outputChatBox('!{#6BFD81}Сегодня действует акция: X2 донат');
          if (_admin.customParams.donatex3) player.outputChatBox('!{#6BFD81}Сегодня действует акция: X3 донат');
          if (_admin.customParams.agex2) player.outputChatBox('!{#6BFD81}Для всех игроков включён X2 опыт');
          if (_admin.customParams.agex2new) player.outputChatBox('!{#6BFD81}Для игроков 1-' + _level.levelAccess.x2lvlNewPlayers + ' уровня включён X2 опыт');
          if (_admin.customParams.jobx2) player.outputChatBox('!{#6BFD81}На сервере сейчас действует акция: X2 на начальных работах');
          if (_admin.customParams.gosx2) player.outputChatBox('!{#6BFD81}На сервере сейчас действует акция: X2 к заплате для сотрудников государственных организаций');
          if (user.getPlayerFraction(player) && !user.get(player, "tablet_equip")) player.outputChatBox('!{#FF0711}Приобретите и экипируйте планшет для доступа к меню фракции. Это можно сделать в магазине электроники');
          user.reloadNotify(player);
        }, 5000);
        if (_whitelist.whitelist.exist(player)) return;
        const backlist = await _blackList.blackListEntity.findOne({
          where: player.clientSocial ? {
            [_sequelize.Op.or]: [{
              lic: player.serial
            }, {
              guid: player.socialClub
            }, {
              rgscId: player.clientSocial
            }]
          } : {
            [_sequelize.Op.or]: [{
              lic: player.serial
            }, {
              guid: player.socialClub
            }]
          }
        });

        if (backlist) {
          setTimeout(() => {
            if (!mp.players.exists(player)) return;
            user.disableAllControls(player, true);
            user.hideLoadDisplay(player);
            user.log(player, "TryBlackList", `ID: ${backlist.id}, Причина: ${backlist.reason ? `: ${backlist.reason}` : ''}, Social: ${player.socialClub}, RGSCID: ${player.clientSocial}, Lic: ${player.serial}`);
            user.bigAlert(player, `Вы находитесь в чёрном списке проекта${backlist.reason ? `: ${backlist.reason}` : ''}. Номер записи ${backlist.id}`, "error", 100000);
            user.kick(player, 'BlackList');
          }, 3000);

          _methods.methods.saveLog('TryBlackList', `${player.socialClub} | ${player.serial}`);
        }
      } catch (e) {
        reject(e);
      }
    });
  },
  spawn: (player, spawnPos, is_reg = false) => {
    user.setChips(player, player.chipsBalance, false);
    user.healProtect(player);

    if (player.health == 0) {
      player.spawn(new mp.Vector3(player.position.x, player.position.y, player.position.z));
      player.health = 0;
    }

    if (player.health < 2) {
      player.call('client:user:login:success', [288.61148, -1345.5358, 23.5378017, 0, Array.from(_data.Container.GetAll(player.id))]);
      return;
    }

    if (spawnPos) {
      if (typeof spawnPos[4] == 'number') player.dimension = spawnPos[4];else player.dimension = 0;
      if (typeof spawnPos[5] == 'number') player.health = spawnPos[5];
      if (spawnPos.length > 4) spawnPos = spawnPos.slice(0, 4);
      player.call('client:user:login:success', [...spawnPos, Array.from(_data.Container.GetAll(player.id))]);
      return;
    }

    if (is_reg) {
      player.call('client:user:login:success', [-520.84, -256.94, 35.63, 326.06, Array.from(_data.Container.GetAll(player.id)), is_reg]);
      if (user.get(player, 'promocode') != '') user.giveVipStatus(player, "Start", 10);
      return;
    }

    if (!spawnPos) {
      player.call('client:user:login:success', [-520.84, -256.94, 35.63, 326.06, Array.from(_data.Container.GetAll(player.id))]);
      return;
    }
  },
  revive: function (player, hp = 20) {
    _methods.methods.debug('user.revive');

    if (!mp.players.exists(player)) return false;
    player.call('client:user:revive', [hp]);
  },
  saveAccount: function (player, withReset = false) {
    return new Promise((resolve, reject) => {
      try {
        _methods.methods.debug('user.saveAccount');

        if (!mp.players.exists(player)) {
          resolve("Игрок не в пуле");
          return;
        }

        if (!user.isLogin(player)) {
          resolve("Игрок не авторизован");
          return;
        }

        const playerid = player.id;
        const id = user.get(player, 'id');
        if (player.getVariable("fixPersonage")) return resolve(null);
        if (!id || id == -1) return resolve("Не удалось получить ID пользователя");
        if (!user.get(playerid, 'age')) return resolve("Не удалось задетектить возраст игрока");
        const quests = player.quests ? [...player.quests] : null;
        const holidayPickups = player.holidayPickups ? [...player.holidayPickups] : null;
        const shootingPickups = player.shootingPickups ? [...player.shootingPickups] : null;
        const chipsBalance = typeof player.chipsBalance == "number" ? player.chipsBalance : null;
        const lic = player.serial ? player.serial : null;
        const rgscid = player.clientSocial;
        const level = user.getLevel(player);
        const level_exp = user.getExp(player);
        const played_time = player.played_time;
        const tattoosList = player.tattoosList;
        let skin = {
          SEX: _methods.methods.parseInt(user.get(playerid, 'SEX')),
          GTAO_SHAPE_THRID_ID: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SHAPE_THRID_ID')),
          GTAO_SKIN_THRID_ID: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SKIN_THRID_ID')),
          GTAO_SHAPE_SECOND_ID: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SHAPE_SECOND_ID')),
          GTAO_SKIN_SECOND_ID: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SKIN_SECOND_ID')),
          GTAO_SHAPE_MIX: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SHAPE_MIX')),
          GTAO_SKIN_MIX: _methods.methods.parseFloat(user.get(playerid, 'GTAO_SKIN_MIX')),
          GTAO_HAIR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_HAIR')),
          GTAO_HAIR_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_HAIR_COLOR')),
          GTAO_HAIR_COLOR2: _methods.methods.parseFloat(user.get(playerid, 'GTAO_HAIR_COLOR2')),
          GTAO_EYE_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_EYE_COLOR')),
          GTAO_EYEBROWS: _methods.methods.parseFloat(user.get(playerid, 'GTAO_EYEBROWS')),
          GTAO_EYEBROWS_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_EYEBROWS_COLOR')),
          GTAO_OVERLAY: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY')),
          GTAO_OVERLAY_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY_COLOR')),
          GTAO_OVERLAY9: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY9')),
          GTAO_OVERLAY9_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY9_COLOR')),
          GTAO_OVERLAY8: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY8')),
          GTAO_OVERLAY8_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY8_COLOR')),
          GTAO_OVERLAY5: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY5')),
          GTAO_OVERLAY5_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY5_COLOR')),
          GTAO_OVERLAY4: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY4')),
          GTAO_OVERLAY4_COLOR: _methods.methods.parseFloat(user.get(playerid, 'GTAO_OVERLAY4_COLOR')),
          GTAO_FACE_SPECIFICATIONS: user.get(playerid, 'GTAO_FACE_SPECIFICATIONS')
        };
        user.set(playerid, 'skin', JSON.stringify(skin));
        let usr = {};
        if (level != null && typeof level == "number" && !isNaN(level)) usr.level = level;
        if (level_exp != null && typeof level_exp == "number" && !isNaN(level_exp)) usr.level_exp = level_exp;
        if (played_time != null && typeof played_time == "number" && !isNaN(played_time)) usr.played_time = played_time;
        if (tattoosList != null && typeof tattoosList == "object") usr.tattoos_list = tattoosList;

        if (rgscid) {
          usr.rgscid = rgscid;
        }

        if (lic !== null) usr.lic = lic;
        if (quests !== null) usr.quests = quests;
        if (holidayPickups !== null) usr.holidayPickups = holidayPickups;
        if (shootingPickups !== null) usr.shootingPickups = shootingPickups;
        if (chipsBalance !== null && typeof chipsBalance == "number" && !isNaN(chipsBalance)) usr.chipsBalance = chipsBalance;
        usr.skin = skin;
        usr.is_online = user.get(playerid, 'is_online');
        usr.job = user.get(playerid, 'job');
        usr.reg_status = user.get(playerid, 'reg_status');
        usr.reg_time = user.get(playerid, 'reg_time');
        usr.age = user.get(playerid, 'age');
        usr.exp_age = user.get(playerid, 'exp_age');
        usr.wanted_level = user.get(playerid, 'wanted_level');
        usr.wanted_reason = user.get(playerid, 'wanted_reason');
        usr.health = user.get(playerid, 'health');
        usr.money = user.get(playerid, 'money');
        usr.money_bank = user.get(playerid, 'money_bank');
        usr.money_payday = user.get(playerid, 'money_payday');
        usr.money_tax = user.get(playerid, 'money_tax');
        usr.posob = user.get(playerid, 'posob');
        usr.id_house = user.get(playerid, 'id_house');
        usr.apartment_id = user.get(playerid, 'apartment_id');
        usr.business_id = user.get(playerid, 'business_id');
        usr.stock_id = user.get(playerid, 'stock_id');
        usr.condo_id = user.get(playerid, 'condo_id');
        usr.car_id1 = user.get(playerid, 'car_id1');
        usr.car_id2 = user.get(playerid, 'car_id2');
        usr.car_id3 = user.get(playerid, 'car_id3');
        usr.car_id4 = user.get(playerid, 'car_id4');
        usr.car_id5 = user.get(playerid, 'car_id5');
        usr.car_id6 = user.get(playerid, 'car_id6');
        usr.car_id7 = user.get(playerid, 'car_id7');
        usr.car_id8 = user.get(playerid, 'car_id8');
        usr.jailed = user.get(playerid, 'jailed');
        usr.jail_time = user.get(playerid, 'jail_time');
        usr.med_time = user.get(playerid, 'med_time');
        usr.last_login = user.get(playerid, 'last_login');
        usr.date_mute = user.get(playerid, 'date_mute');
        usr.warn = user.get(playerid, 'warn');
        usr.fraction_id = user.get(playerid, 'fraction_id') | 0;
        usr.rank = user.get(playerid, 'rank') | 0;
        usr.fraction_id2 = user.get(playerid, 'fraction_id2') | 0;
        usr.rank2 = user.get(playerid, 'rank2') | 0;
        usr.tag = user.get(playerid, 'tag');
        usr.is_gos_blacklist = user.get(playerid, 'is_gos_blacklist');
        usr.gos_blacklist_reason = user.get(playerid, 'gos_blacklist_reason');
        usr.admin_level = user.get(playerid, 'admin_level');
        usr.helper_level = user.get(playerid, 'helper_level');
        usr.bank_prefix = user.get(playerid, 'bank_prefix');
        usr.bank_number = user.get(playerid, 'bank_number');
        usr.phone_code = user.get(playerid, 'phone_code');
        usr.phone = user.get(playerid, 'phone');
        usr.item_clock = user.get(playerid, 'item_clock');
        usr.is_buy_walkietalkie = user.get(playerid, 'is_buy_walkietalkie');
        usr.walkietalkie_num = user.get(playerid, 'walkietalkie_num');
        usr.is_old_money = user.get(playerid, 'is_old_money');
        usr.mask = user.get(playerid, 'mask');
        usr.mask_color = user.get(playerid, 'mask_color');
        usr.torso = user.get(playerid, 'torso');
        usr.torso_color = user.get(playerid, 'torso_color');
        usr.leg = user.get(playerid, 'leg');
        usr.leg_color = user.get(playerid, 'leg_color');
        usr.hand = user.get(playerid, 'hand');
        usr.hand_color = user.get(playerid, 'hand_color');
        usr.foot = user.get(playerid, 'foot');
        usr.foot_color = user.get(playerid, 'foot_color');
        usr.accessorie = user.get(playerid, 'accessorie');
        usr.accessorie_color = user.get(playerid, 'accessorie_color');
        usr.parachute = user.get(playerid, 'parachute');
        usr.parachute_color = user.get(playerid, 'parachute_color');
        usr.armor = user.get(playerid, 'armor');
        usr.armor_color = user.get(playerid, 'armor_color');
        usr.decal = user.get(playerid, 'decal');
        usr.decal_color = user.get(playerid, 'decal_color');
        usr.body = user.get(playerid, 'body');
        usr.body_color = user.get(playerid, 'body_color');
        usr.hat = user.get(playerid, 'hat');
        usr.hat_color = user.get(playerid, 'hat_color');
        usr.glasses = user.get(playerid, 'glasses');
        usr.glasses_color = user.get(playerid, 'glasses_color');
        usr.ear = user.get(playerid, 'ear');
        usr.ear_color = user.get(playerid, 'ear_color');
        usr.watch = user.get(playerid, 'watch');
        usr.watch_color = user.get(playerid, 'watch_color');
        usr.bracelet = user.get(playerid, 'bracelet');
        usr.bracelet_color = user.get(playerid, 'bracelet_color');
        usr.tattoo_head_c = user.get(playerid, 'tattoo_head_c');
        usr.tattoo_head_o = user.get(playerid, 'tattoo_head_o');
        usr.tattoo_torso_c = user.get(playerid, 'tattoo_torso_c');
        usr.tattoo_torso_o = user.get(playerid, "tattoo_torso_o");
        usr.tattoo_left_arm_c = user.get(playerid, "tattoo_left_arm_c");
        usr.tattoo_left_arm_o = user.get(playerid, "tattoo_left_arm_o");
        usr.tattoo_right_arm_c = user.get(playerid, "tattoo_right_arm_c");
        usr.tattoo_right_arm_o = user.get(playerid, "tattoo_right_arm_o");
        usr.tattoo_left_leg_c = user.get(playerid, "tattoo_left_leg_c");
        usr.tattoo_left_leg_o = user.get(playerid, "tattoo_left_leg_o");
        usr.tattoo_right_leg_c = user.get(playerid, "tattoo_right_leg_c");
        usr.tattoo_right_leg_o = user.get(playerid, "tattoo_right_leg_o");
        usr.tprint_c = user.get(playerid, "tprint_c");
        usr.tprint_o = user.get(playerid, "tprint_o");
        usr.allow_marg = user.get(playerid, "allow_marg");
        usr.allow_antipohmel = user.get(playerid, "allow_antipohmel");
        usr.vip_status = user.get(playerid, "vip_status");
        usr.vip_time = user.get(playerid, "vip_time");
        usr.animal = user.get(playerid, "animal");
        usr.animal_name = user.get(playerid, "animal_name");
        usr.a_lic = user.get(playerid, "a_lic");
        usr.b_lic = user.get(playerid, "b_lic");
        usr.c_lic = user.get(playerid, "c_lic");
        usr.air_lic = user.get(playerid, "air_lic");
        usr.taxi_lic = user.get(playerid, "taxi_lic");
        usr.ship_lic = user.get(playerid, "ship_lic");
        usr.gun_lic = user.get(playerid, "gun_lic");
        usr.law_lic = user.get(playerid, "law_lic");
        usr.med_lic = user.get(playerid, "med_lic");
        usr.biz_lic = user.get(playerid, "biz_lic");
        usr.animal_lic = user.get(playerid, "animal_lic");
        usr.fish_lic = user.get(playerid, "fish_lic");
        usr.s_radio_vol = user.get(playerid, "s_radio_vol");
        usr.s_voice_vol = user.get(playerid, "s_voice_vol");
        usr.ip_last = user.get(playerid, "ip_last");
        usr.promocode = user.get(playerid, "promocode");
        usr.mp0_stamina = user.get(playerid, "mp0_stamina");
        usr.mp0_strength = user.get(playerid, "mp0_strength");
        usr.mp0_lung_capacity = user.get(playerid, "mp0_lung_capacity");
        usr.mp0_wheelie_ability = user.get(playerid, "mp0_wheelie_ability");
        usr.mp0_flying_ability = user.get(playerid, "mp0_flying_ability");
        usr.mp0_shooting_ability = user.get(playerid, "mp0_shooting_ability");
        usr.mp0_stealth_ability = user.get(playerid, "mp0_stealth_ability");
        usr.mp0_watchdogs = user.get(playerid, "mp0_watchdogs");
        usr.skill_builder = user.get(playerid, "skill_builder");
        usr.skill_scrap = user.get(playerid, "skill_scrap");
        usr.skill_shop = user.get(playerid, "skill_shop");
        usr.skill_taxi = user.get(playerid, "skill_taxi");
        usr.skill_mail = user.get(playerid, "skill_mail");
        usr.skill_mail2 = user.get(playerid, "skill_mail2");
        usr.skill_photo = user.get(playerid, "skill_photo");
        usr.skill_sunb = user.get(playerid, "skill_sunb");
        usr.skill_bgstar = user.get(playerid, "skill_bgstar");
        usr.skill_bshot = user.get(playerid, "skill_bshot");
        usr.skill_three = user.get(playerid, "skill_three");
        usr.skill_water = user.get(playerid, "skill_water");
        usr.skill_bus1 = user.get(playerid, "skill_bus1");
        usr.skill_bus2 = user.get(playerid, "skill_bus2");
        usr.skill_bus3 = user.get(playerid, "skill_bus3");
        usr.skill_gr6 = user.get(playerid, "skill_gr6");
        usr.skill_trucker = user.get(playerid, "skill_trucker");
        usr.is_online = user.get(playerid, "is_online");
        usr.count_hask = user.get(playerid, "count_hask");
        usr.count_aask = user.get(playerid, "count_aask");
        usr.jailed_admin = user.get(playerid, "jailed_admin");
        usr.tablet_equip = user.get(playerid, "tablet_equip");

        _user.userEntity.update(usr, {
          where: {
            id
          }
        }).then(() => {
          resolve(null);
        });
      } catch (e) {
        console.error(e);
        reject(e);
      }
    });
  },
  doesNameAccountExist: function (nick, callback) {
    _methods.methods.debug('user.doesNameAccountExist');

    _user.userEntity.count({
      where: {
        rp_name: nick
      }
    }).then(count => {
      callback(count > 0);
    }).catch(err => {
      _methods.methods.debug('[DATABASE | ERROR]');

      _methods.methods.debug(err);

      return callback(true);
    });
  },
  doesLimitAccount: function (serial, callback) {
    _methods.methods.debug('user.doesLimitAccount');

    _user.userEntity.count({
      where: {
        name: serial
      }
    }).then(count => {
      callback(count >= 3);
    }).catch(err => {
      _methods.methods.debug('[DATABASE | ERROR]');

      _methods.methods.debug(err);

      return callback(true);
    });
  },
  ready: async player => {
    if (!mp.players.exists(player)) return;
    player.dimension = player.id + 1;

    _user.userEntity.findAll({
      where: {
        name: player.socialClub
      },
      limit: 20,
      order: [['id', 'DESC']]
    }).then(async rows => {
      if (!mp.players.exists(player)) return;
      user.clearChat(player);

      if (rows.length == 0) {
        player.call('client:player:init', [null]);
        return;
      }

      let accounts = [];

      for (let q in rows) {
        const row = rows[q];
        const spawns = [];
        let userId = row.id;

        if (user.hasById(userId, 'timestamp') && user.getById(userId, 'timestamp') + 60 * 15 > _methods.methods.getTimeStamp()) {
          spawns.push(['Точка выхода', user.getById(userId, 'pos_x'), user.getById(userId, 'pos_y'), user.getById(userId, 'pos_z'), user.getById(userId, 'rot'), user.getById(userId, 'dimension'), user.getById(userId, 'hp')]);
        } else {
          if (row.fraction_id2 == 500) {
            spawns.push(['Пентхаус', 988.42, 71.50, 115.18, 0]);
          }

          for (let i = 1; i < 9; i++) {
            let carId = row['car_id' + i];

            if (carId > 0) {
              const rows = await _carsModel.carsEntity.findAll({
                where: {
                  id: carId
                }
              });

              if (rows.length) {
                const {
                  hash,
                  x_park,
                  y_park,
                  z_park,
                  x,
                  y,
                  z
                } = rows[0];

                if (hash == 1876516712 || hash == -120287622) {
                  let posX = (x_park != 0 ? x_park : x) + 4;
                  let posY = (y_park != 0 ? y_park : y) + 4;
                  let posZ = z_park != 0 ? z_park : z;
                  spawns.push(['Трейлер', posX, posY, posZ, 0]);
                }
              }
            }
          }

          if (row.apartment_id > 0) {
            let buildData = _apartments.apartments.getApartData(row.apartment_id);

            if (buildData) {
              let buildId = buildData.get('build_id');

              if (typeof buildId == "number") {
                spawns.push(['Апартаменты', _enums.enums.buildListData[buildId][0], _enums.enums.buildListData[buildId][1], _enums.enums.buildListData[buildId][2], 0]);
              }
            }
          }

          if (row.condo_id > 0) {
            let hData = _condo.condo.getHouseData(row.condo_id);

            if (hData) spawns.push(['Квартира', hData.get('x'), hData.get('y'), hData.get('z'), 0]);
          }

          if (row.id_house > 0) {
            let hData = _houses.houses.getHouseData(row.id_house);

            if (hData) spawns.push(['Дом', hData.get('x'), hData.get('y'), hData.get('z'), 0]);
          }

          if (row.stock_id > 0) {
            let hData = _stock.stock.getData(row.stock_id);

            if (hData) spawns.push(['Склад', hData.get('x'), hData.get('y'), hData.get('z'), 0]);
          }

          switch (_methods.methods.getRandomInt(0, 3)) {
            case 0:
              spawns.push(['Стандартный спавн', 124.8076, -1215.845, 28.33152, 0]);
              break;

            case 1:
              spawns.push(['Стандартный спавн', 1.66987, -1225.569, 28.29525, 0]);
              break;

            case 2:
              spawns.push(['Стандартный спавн', 462.8509, -850.47, 26.12981, 0]);
              break;
          }
        }

        const {
          id,
          rp_name,
          skin,
          money,
          money_bank,
          age,
          exp_age,
          apartment_id,
          condo_id,
          stock_id,
          car_id1,
          car_id2,
          car_id3,
          car_id4,
          car_id5,
          car_id6,
          car_id7,
          car_id8,
          id_house,
          vip_status
        } = row;
        accounts.push({
          id,
          rp_name,
          skin,
          money,
          money_bank,
          age,
          exp_age,
          apartment_id,
          condo_id,
          stock_id,
          car_id1,
          car_id2,
          car_id3,
          car_id4,
          car_id5,
          car_id6,
          car_id7,
          car_id8,
          id_house,
          vip_status,
          spawns
        });
      }

      ;
      if (mp.players.exists(player)) player.call('client:player:init', [accounts.reverse()]);
    }).catch(err => {
      console.error(err);
    });
  },
  updateCharacterFace: function (player) {
    if (!mp.players.exists(player)) return;

    try {
      let health = player.health;
      let skin = {};
      skin.SEX = _methods.methods.parseInt(user.get(player, 'SEX'));
      skin.GTAO_SHAPE_THRID_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_THRID_ID'));
      skin.GTAO_SKIN_THRID_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_THRID_ID'));
      skin.GTAO_SHAPE_SECOND_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_SECOND_ID'));
      skin.GTAO_SKIN_SECOND_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_SECOND_ID'));
      skin.GTAO_SHAPE_MIX = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_MIX'));
      skin.GTAO_SKIN_MIX = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_MIX'));
      skin.GTAO_HAIR = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR'));
      skin.GTAO_HAIR_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR_COLOR'));
      skin.GTAO_HAIR_COLOR2 = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR_COLOR2'));
      skin.GTAO_EYE_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_EYE_COLOR'));
      skin.GTAO_EYEBROWS = _methods.methods.parseFloat(user.get(player, 'GTAO_EYEBROWS'));
      skin.GTAO_EYEBROWS_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_EYEBROWS_COLOR'));
      skin.GTAO_OVERLAY = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY'));
      skin.GTAO_OVERLAY_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY_COLOR'));
      skin.GTAO_OVERLAY9 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY9'));
      skin.GTAO_OVERLAY9_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY9_COLOR'));
      skin.GTAO_OVERLAY8 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY8'));
      skin.GTAO_OVERLAY8_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY8_COLOR'));
      skin.GTAO_OVERLAY5 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY5'));
      skin.GTAO_OVERLAY5_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY5_COLOR'));
      skin.GTAO_OVERLAY4 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY4'));
      skin.GTAO_OVERLAY4_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY4_COLOR'));

      if (typeof user.get(player, 'GTAO_FACE_SPECIFICATIONS') == 'string') {
        skin.GTAO_FACE_SPECIFICATIONS = JSON.parse(user.get(player, 'GTAO_FACE_SPECIFICATIONS'));
      } else {
        skin.GTAO_FACE_SPECIFICATIONS = user.get(player, 'GTAO_FACE_SPECIFICATIONS');
      }

      player.setCustomization(skin.SEX == 0, skin.GTAO_SHAPE_THRID_ID, skin.GTAO_SHAPE_SECOND_ID, 0, skin.GTAO_SKIN_THRID_ID, skin.GTAO_SKIN_SECOND_ID, 0, skin.GTAO_SHAPE_MIX, skin.GTAO_SKIN_MIX, 0, skin.GTAO_EYE_COLOR, skin.GTAO_HAIR_COLOR, skin.GTAO_HAIR_COLOR2, skin.GTAO_FACE_SPECIFICATIONS || [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
      player.setClothes(2, skin.GTAO_HAIR, 0, 0);
      player.setHeadOverlay(2, [skin.GTAO_EYEBROWS, 1, skin.GTAO_EYEBROWS_COLOR, 0]);

      if (skin.GTAO_FACE_SPECIFICATIONS) {
        skin.GTAO_FACE_SPECIFICATIONS.forEach((item, id) => {
          try {
            player.setFaceFeature(id, item);
          } catch (e) {
            _methods.methods.debug(e);
          }
        });
      }

      user.updateTattoo(player);
      if (user.get(player, 'age') > 72) player.setHeadOverlay(3, [14, 1, 1, 1]);else if (user.get(player, 'age') > 69) player.setHeadOverlay(3, [16, 1, 1, 1]);else if (user.get(player, 'age') > 66) player.setHeadOverlay(3, [12, 1, 1, 1]);else if (user.get(player, 'age') > 63) player.setHeadOverlay(3, [11, 0.9, 1, 1]);else if (user.get(player, 'age') > 60) player.setHeadOverlay(3, [10, 0.9, 1, 1]);else if (user.get(player, 'age') > 57) player.setHeadOverlay(3, [9, 0.9, 1, 1]);else if (user.get(player, 'age') > 54) player.setHeadOverlay(3, [8, 0.8, 1, 1]);else if (user.get(player, 'age') > 51) player.setHeadOverlay(3, [7, 0.7, 1, 1]);else if (user.get(player, 'age') > 48) player.setHeadOverlay(3, [6, 0.6, 1, 1]);else if (user.get(player, 'age') > 45) player.setHeadOverlay(3, [5, 0.5, 1, 1]);else if (user.get(player, 'age') > 42) player.setHeadOverlay(3, [4, 0.4, 1, 1]);else if (user.get(player, 'age') > 39) player.setHeadOverlay(3, [4, 0.4, 1, 1]);else if (user.get(player, 'age') > 36) player.setHeadOverlay(3, [3, 0.3, 1, 1]);else if (user.get(player, 'age') > 33) player.setHeadOverlay(3, [1, 0.2, 1, 1]);else if (user.get(player, 'age') > 30) player.setHeadOverlay(3, [0, 0.1, 1, 1]);
      player.setHeadOverlay(9, [skin.GTAO_OVERLAY9, 1, skin.GTAO_OVERLAY9_COLOR, skin.GTAO_OVERLAY9_COLOR]);

      if (skin.SEX == 0) {
        if (skin.GTAO_OVERLAY10 !== undefined) player.setHeadOverlay(1, [skin.GTAO_OVERLAY10, 1, skin.GTAO_OVERLAY10_COLOR, skin.GTAO_OVERLAY10_COLOR]);
        if (skin.GTAO_OVERLAY !== undefined) player.setHeadOverlay(1, [skin.GTAO_OVERLAY, 1, skin.GTAO_OVERLAY_COLOR, skin.GTAO_OVERLAY_COLOR]);
      } else if (skin.SEX == 1) {
        if (skin.GTAO_OVERLAY4 !== undefined) player.setHeadOverlay(4, [skin.GTAO_OVERLAY4, 1, skin.GTAO_OVERLAY4_COLOR, skin.GTAO_OVERLAY4_COLOR]);
        if (skin.GTAO_OVERLAY5 !== undefined) player.setHeadOverlay(5, [skin.GTAO_OVERLAY5, 1, skin.GTAO_OVERLAY5_COLOR, skin.GTAO_OVERLAY5_COLOR]);
        if (skin.GTAO_OVERLAY8 !== undefined) player.setHeadOverlay(8, [skin.GTAO_OVERLAY8, 1, skin.GTAO_OVERLAY8_COLOR, skin.GTAO_OVERLAY8_COLOR]);
      }

      player.health = health;
    } catch (e) {
      _methods.methods.debug('Exception: user.updateCharacterFace');

      _methods.methods.debug(e);

      setTimeout(function () {
        user.updateCharacterFace(player);
      }, 2500);
    }
  },
  updateCharacterCloth: function (player) {
    if (!mp.players.exists(player)) return;

    try {
      user.updateTattoo(player);
      user.clearAllProp(player);
      let cloth_data = {};
      cloth_data.torso = user.get(player, 'torso');
      cloth_data.torso_color = user.get(player, 'torso_color');
      cloth_data.leg = user.get(player, 'leg');
      cloth_data.leg_color = user.get(player, 'leg_color');
      cloth_data.hand = user.get(player, 'hand');
      cloth_data.hand_color = user.get(player, 'hand_color');
      cloth_data.foot = user.get(player, 'foot');
      cloth_data.foot_color = user.get(player, 'foot_color');
      cloth_data.accessorie = user.get(player, 'accessorie');
      cloth_data.accessorie_color = user.get(player, 'accessorie_color');
      cloth_data.parachute = user.get(player, 'parachute');
      cloth_data.parachute_color = user.get(player, 'parachute_color');
      cloth_data.armor = user.get(player, 'armor');
      cloth_data.armor_color = user.get(player, 'armor_color');
      cloth_data.decal = user.get(player, 'decal');
      cloth_data.decal_color = user.get(player, 'decal_color');
      cloth_data.body = user.get(player, 'body');
      cloth_data.body_color = user.get(player, 'body_color');
      cloth_data.mask = user.get(player, 'mask');
      cloth_data.mask_color = user.get(player, 'mask_color');
      cloth_data.hat = user.get(player, 'hat');
      cloth_data.hat_color = user.get(player, 'hat_color');
      cloth_data.glasses = user.get(player, 'glasses');
      cloth_data.glasses_color = user.get(player, 'glasses_color');
      cloth_data.ear = user.get(player, 'ear');
      cloth_data.ear_color = user.get(player, 'ear_color');
      cloth_data.watch = user.get(player, 'watch');
      cloth_data.watch_color = user.get(player, 'watch_color');
      cloth_data.bracelet = user.get(player, 'bracelet');
      cloth_data.bracelet_color = user.get(player, 'bracelet_color');
      user.setComponentVariation(player, 1, cloth_data['mask'], cloth_data['mask_color']);
      user.setComponentVariation(player, 3, cloth_data['torso'], cloth_data['torso_color']);
      user.setComponentVariation(player, 4, cloth_data['leg'], cloth_data['leg_color']);
      user.setComponentVariation(player, 5, cloth_data['hand'], cloth_data['hand_color']);
      user.setComponentVariation(player, 6, cloth_data['foot'], cloth_data['foot_color']);
      user.setComponentVariation(player, 7, cloth_data['accessorie'], cloth_data['accessorie_color']);
      user.setComponentVariation(player, 8, cloth_data['parachute'], cloth_data['parachute_color']);
      user.setComponentVariation(player, 9, cloth_data['armor'], cloth_data['armor_color']);
      user.setComponentVariation(player, 10, cloth_data['decal'], cloth_data['decal_color']);
      user.setComponentVariation(player, 11, cloth_data['body'], cloth_data['body_color']);
      setTimeout(function () {
        if (!mp.players.exists(player)) return;

        if (cloth_data['hat'] >= 0) {
          user.setProp(player, 0, cloth_data['hat'], cloth_data['hat_color']);
        }

        if (cloth_data['glasses'] >= 0) {
          user.setProp(player, 1, cloth_data['glasses'], cloth_data['glasses_color']);
        }

        if (cloth_data['ear'] >= 0) {
          user.setProp(player, 2, cloth_data['ear'], cloth_data['ear_color']);
        }

        if (cloth_data['watch'] >= 0) {
          user.setProp(player, 6, cloth_data['watch'], cloth_data['watch_color']);
        }

        if (cloth_data['bracelet'] >= 0) {
          user.setProp(player, 7, cloth_data['bracelet'], cloth_data['bracelet_color']);
        }
      }, 100);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  addTattoo: (player, collection, overlay) => {
    if (!mp.players.exists(player)) return;
    if (!player.tattoosList) player.tattoosList = [];
    if (player.tattoosList.find(item => item[0] == collection && item[1] == overlay)) return;
    player.tattoosList.push([collection, overlay]);
    player.setDecoration(mp.joaat(collection), mp.joaat(overlay));
  },
  removeTattoo: (player, collection, overlay) => {
    if (!mp.players.exists(player)) return;

    if (!player.tattoosList) {
      player.tattoosList = [];
      return;
    }

    if (!player.tattoosList.find(item => item[0] == collection && item[1] == overlay)) return;
    player.tattoosList.splice(player.tattoosList.findIndex(item => item[0] == collection && item[1] == overlay), 1);
    user.updateTattoo(player);
  },
  hasTattoo: (player, collection, overlay) => {
    if (!mp.players.exists(player)) return false;

    if (!player.tattoosList) {
      player.tattoosList = [];
      return false;
    }

    if (!player.tattoosList.find(item => item[0] == collection && item[1] == overlay)) return false;
    return true;
  },
  updateTattoo: function (player) {
    if (!mp.players.exists(player)) return;
    if (!player.tattoosList) player.tattoosList = [];

    try {
      player.clearDecorations();
      player.tattoosList.map(([collection, overlay]) => {
        player.setDecoration(mp.joaat(collection), mp.joaat(overlay));
      });

      if (user.get(player, 'tattoo_head_c') && user.get(player, 'tattoo_head_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_head_c'), user.get(player, 'tattoo_head_o'));
        user.set(player, 'tattoo_head_c', "");
        user.set(player, 'tattoo_head_o', "");
      }

      if (user.get(player, 'tattoo_torso_c') && user.get(player, 'tattoo_torso_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_torso_c'), user.get(player, 'tattoo_torso_o'));
        user.set(player, 'tattoo_torso_c', "");
        user.set(player, 'tattoo_torso_o', "");
      }

      if (user.get(player, 'tattoo_left_arm_c') && user.get(player, 'tattoo_left_arm_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_left_arm_c'), user.get(player, 'tattoo_left_arm_o'));
        user.set(player, 'tattoo_left_arm_c', "");
        user.set(player, 'tattoo_left_arm_o', "");
      }

      if (user.get(player, 'tattoo_right_arm_c') && user.get(player, 'tattoo_right_arm_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_right_arm_c'), user.get(player, 'tattoo_right_arm_o'));
        user.set(player, 'tattoo_right_arm_c', "");
        user.set(player, 'tattoo_right_arm_o', "");
      }

      if (user.get(player, 'tattoo_left_leg_c') && user.get(player, 'tattoo_left_leg_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_left_leg_c'), user.get(player, 'tattoo_left_leg_o'));
        user.set(player, 'tattoo_left_leg_c', "");
        user.set(player, 'tattoo_left_leg_o', "");
      }

      if (user.get(player, 'tattoo_right_leg_c') && user.get(player, 'tattoo_right_leg_o')) {
        user.addTattoo(player, user.get(player, 'tattoo_right_leg_c'), user.get(player, 'tattoo_right_leg_o'));
        user.set(player, 'tattoo_right_leg_c', "");
        user.set(player, 'tattoo_right_leg_o', "");
      }

      user.setDecoration(player, user.get(player, 'tprint_c'), user.get(player, 'tprint_o'));
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  getSex: function (player) {
    if (!mp.players.exists(player)) return null;

    if (user.isLogin(player)) {
      if (user.has(player, 'sex')) return user.get(player, 'sex');else {
        let skin = JSON.parse(user.get(player, 'skin'));
        user.set(player, 'sex', skin['SEX']);
        return skin['SEX'];
      }
    }

    return 0;
  },
  setSkinData: (player, data) => {
    if (!mp.players.exists(player)) return false;

    if (user.isLogin(player)) {
      let skin = !data ? JSON.parse(user.get(player, 'skin')) : data;
      Object.entries(skin).map(([key, value]) => {
        user.set(player, key, value);
      });
    }
  },
  clearAllProp: function (player) {
    if (!mp.players.exists(player)) return false;

    for (let i = 0; i < 8; i++) user.setProp(player, i, -1, -1);

    let pos = player.position;
    mp.players.forEach(p => {
      if (_methods.methods.distanceToPos(pos, p.position) < 300) p.call('client:user:clearAllProp', [player.id]);
    });
  },
  checkComponents: player => {
    if (player.bankgrabmoney) {
      user.setComponentVariation(player, 5, 40, 0, true);
    } else if (player.getVariable("chestWeaponItems")) {
      user.setComponentVariation(player, 5, 40, 0, true);
    } else if (user.hasItem(player, _inventory.inventory.types.BagFull)) {
      user.setComponentVariation(player, 5, 45, 0, true);
    } else if (user.hasItem(player, _inventory.inventory.types.BagTransfer)) {
      user.setComponentVariation(player, 5, 82, 0, true);
    } else if (user.hasItem(player, _inventory.inventory.types.BagSmall)) {
      user.setComponentVariation(player, 5, 31, 0, true);
    } else {
      user.setComponentVariation(player, 5, 0, 0, true);
    }
  },
  setComponentVariation: function (player, component, drawableId, textureId, nocheck = false) {
    if (!mp.players.exists(player)) return false;
    component = _methods.methods.parseInt(component);
    drawableId = _methods.methods.parseInt(drawableId);
    textureId = _methods.methods.parseInt(textureId);

    if (component == 8 && drawableId == -1 && textureId == 240) {
      textureId = -1;
      drawableId = 0;
    }

    if (!player.dressData) {
      player.dressData = {};
    }

    player.dressData[component.toString()] = [drawableId, textureId];
    if (!nocheck) user.checkComponents(player);
    if (player.dressSync) return;
    player.dressSync = true;
    setTimeout(() => {
      if (mp.players.exists(player)) {
        player.setVariable('dressSync', JSON.stringify(player.dressData));
        player.dressSync = false;
      }
    }, 100);
  },
  setProp: function (player, slot, type, color, check = false) {
    if (!mp.players.exists(player)) return false;
    slot = _methods.methods.parseInt(slot);
    type = _methods.methods.parseInt(type);
    color = _methods.methods.parseInt(color);

    if (!player.dressData) {
      player.dressData = {};
    }

    player.dressData['p' + slot.toString()] = [type, color];
    if (player.dressSync) return;
    player.dressSync = true;
    setTimeout(() => {
      if (mp.players.exists(player)) {
        player.setVariable('dressSync', JSON.stringify(player.dressData));
        player.dressSync = false;
      }
    }, 100);
  },
  setDecoration: function (player, slot, overlay) {
    if (!mp.players.exists(player)) return false;
    if (!slot || !overlay) return;
    player.setDecoration(mp.joaat(slot), mp.joaat(overlay));
  },
  getDating,
  setDating: function (player, key, value) {
    if (!mp.players.exists(player)) return;
    if (!player.datingList) player.datingList = new Map();
    player.datingList.set(key, value);
    player.call('client:user:setDating', [key, value]);
  },
  set: function (player, key, val) {
    if (typeof player != "number" && !mp.players.exists(player)) return false;

    if (key == "fraction_id" || key == "rank") {
      if (typeof player != "number" && mp.players.exists(player)) {
        player.setVariable(key, val);
      }
    }

    _data.Container.Set(typeof player != "number" ? player.id : player, key, val);
  },
  setById: function (id, key, val) {
    _data.Container.Set(id, key, val);
  },
  hasById: function (id, key) {
    return _data.Container.Has(id, key);
  },
  getById: function (id, key) {
    try {
      return _data.Container.Get(id, key);
    } catch (e) {
      _methods.methods.debug(e);
    }

    return null;
  },
  reset: function (player, key) {
    if (!mp.players.exists(player)) return false;

    _methods.methods.debug('user.reset', user.getRpName(player), key);

    _data.Container.Reset(player.id, key);
  },
  get: function (player, key) {
    if (typeof player != "number" && !mp.players.exists(player)) return null;

    try {
      return _data.Container.Get(typeof player == "number" ? player : player.id, key);
    } catch (e) {
      _methods.methods.debug(e);
    }

    return null;
  },
  getPlayerById: function (id) {
    let player = null;
    mp.players.forEach(pl => {
      if (user.isLogin(pl) && user.getId(pl) == id) player = pl;
    });
    return player;
  },
  checkMutePlayer: (target, type) => {
    let id = typeof target == "number" ? target : user.getId(target);
    return muteContainer[type].get(id) ? muteContainer[type].get(id) : 0;
  },
  getTimeFormat: time => {
    let date = new Date(Math.floor(time) * 1000);
    return ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2) + ` ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
  },
  unmutePlayer: (target, type) => {
    let id = user.getId(target);
    muteContainer[type].set(id, 0);
  },
  mutePlayer: (target, who, minutes, type, reason) => {
    let id = user.getId(target);

    if (minutes == 0) {
      return muteContainer[type].set(id, minutes);
    }

    let endtime = minutes * 60 + (muteContainer[type].get(id) ? muteContainer[type].get(id) : _methods.methods.getTimeStamp());
    let date = new Date(Math.floor(endtime) * 1000);
    let formattedTime = ('0' + date.getHours()).substr(-2) + ':' + ('0' + date.getMinutes()).substr(-2);

    _chat.chat.sendToAll(`Администратор  ${user.getRpName(who)} (${user.getId(who)})`, `${user.getRpName(target)} (${user.getId(target)})!{${_chat.chat.clRed}} получил ${muteContainer[type].get(id) ? 'продление мута' : 'мут'} ${type == "voice" ? 'голосового чата' : 'текстового чата'} до ${formattedTime} ${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} с причиной!{${_chat.chat.clWhite}} ${reason}`, _chat.chat.clRed);

    setTimeout(() => {
      muteContainer[type].set(id, endtime);
    }, 100);
  },
  getVehicleDriver: function (vehicle) {
    if (!mp.vehicles.exists(vehicle)) return null;
    let driver;
    vehicle.getOccupants().forEach(p => {
      if (p.seat == -1) {
        driver = p;
      }
    });
    return driver;
  },
  has: function (player, key) {
    if (!mp.players.exists(player)) return false;
    return _data.Container.Has(player.id, key);
  },
  clearChat: function (player) {
    if (!mp.players.exists(player)) return false;
    player.call('client:clearChat');
  },
  teleportWaypoint: function (player) {
    if (!mp.players.exists(player)) return false;
    user.teleportProtect(player);
    player.call('client:teleportWaypoint');
  },
  teleport: function (player, x, y, z, h = null, d = null) {
    if (!mp.players.exists(player)) return false;
    user.teleportProtect(player);
    player.call('client:teleport', [x, y, z, h]);
    if (d !== null) player.dimension = d;
  },
  teleportVeh: function (player, x, y, z) {
    if (!mp.players.exists(player)) return false;
    user.teleportProtect(player);
    player.call('client:teleportVeh', [x, y, z]);
  },
  setWaypoint: function (player, x, y) {
    if (!mp.players.exists(player)) return false;
    player.call('client:user:setWaypoint', [x, y]);
  },
  setWaypointTarget: function (player, x, y, z) {
    if (!mp.players.exists(player)) return false;
    player.call('client:user:setWaypointTarget', [x, y, z]);
  },
  clearWaypointTarget: player => {
    if (!mp.players.exists(player)) return false;
    player.call('client:user:removeWaypointTarget');
  },
  isReadyForSmth: player => {
    if (user.isCuff(player)) return false;
    if (user.isTie(player)) return false;
    if (player.getVariable("isKnockout")) return false;
    if (player.getVariable("isTieBandage")) return false;
    if (user.get(player, 'med_time') && user.get(player, 'med_time') > 0) return false;
    if (user.get(player, 'jail_time') && user.get(player, 'jail_time') > 0) return false;
    return true;
  },
  showMenu: function (player, title, desc, menuData, workAnyTime = false) {
    _methods.methods.debug('user.showMenu');

    if (!mp.players.exists(player)) return false;

    let m = _menu.menu.new(player, title, desc);

    menuData.forEach((more, name) => {
      m.newItem({
        name,
        more
      });
    });
    m.workAnyTime = workAnyTime;
    m.open();
  },
  giveItemAnimation: (player, target) => {
    user.playAnimation(player, 'mp_common', 'givetake1_a', 8);
    user.headingToTarget(player, target.id);
    user.headingToTarget(target, player.id);
    setTimeout(() => {
      if (mp.players.exists(target)) user.playAnimation(target, 'mp_common', 'givetake2_a', 8);
    }, 1500);
  },
  arrestAnimation: (player, target) => {
    return new Promise((resolve, reject) => {
      if (!mp.players.exists(player)) return;
      if (!mp.players.exists(target)) return;

      const pos = _methods.methods.calculateAttachPosition(player.position, player.heading, new mp.Vector3(0, 0.2, 0));

      user.teleportProtect(target);
      target.position = pos;
      target.call("set:heading", [player.heading]);
      target.heading = player.heading;
      setTimeout(function () {
        if (!mp.players.exists(player)) return;
        if (!mp.players.exists(target)) return;
        const dictionary = 'mp_arresting';
        user.playAnimation(player, dictionary, "a_uncuff", 8);
        user.playAnimation(target, dictionary, "arrested_spin_l_0", 8);
        setTimeout(() => {
          setTimeout(() => {
            if (mp.players.exists(player) && mp.players.exists(target)) if (!mp.players.exists(player)) return;
            if (mp.players.exists(player)) user.stopAnimation(player);
            if (mp.players.exists(target)) user.stopAnimation(target);
          }, 2000);
          if (mp.players.exists(player) && mp.players.exists(target)) return resolve(true);
          resolve(false);
        }, 2000);
      }, 100);
    });
  },
  isPlayAnimation: (player, dict, anim) => {
    return new Promise((resolve, reject) => {
      if (!mp.players.exists(player)) return resolve(false);
      mp.events.callClient(player, "isPlayAnimation", dict, anim).then(res => {
        resolve(res);
      });
    });
  },
  isPlayTask: player => {
    return new Promise((resolve, reject) => {
      if (!mp.players.exists(player)) return resolve(false);
      mp.events.callClient(player, "isPlayTask").then(res => {
        resolve(res);
      });
    });
  },
  playAnimation: function (player, dict, anim, flag = 49, accessVeh = false) {
    _methods.methods.debug('user.playAnimation');

    if (!mp.players.exists(player)) return false;

    if (!_newrage.RAGE_BETA) {
      let pos = player.position;
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncAnimation', [player.id, dict, anim, flag, accessVeh]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.call('client:syncAnimation', [player.id, dict, anim, flag, accessVeh]);
    }
  },
  playArrestAnimation: function (player) {
    _methods.methods.debug('user.playAnimation');

    if (!mp.players.exists(player)) return false;
    let pos = player.position;

    if (!_newrage.RAGE_BETA) {
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncArrestAnimation', [player.id]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.callsocket('client:syncArrestAnimation', [player.id]);
    }
  },
  headingToCoord: function (player, x, y, z) {
    _methods.methods.debug('user.headingToCoord');

    if (!mp.players.exists(player)) return false;
    let pos = player.position;

    if (!_newrage.RAGE_BETA) {
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncHeadingToCoord', [player.id, x, y, z]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.callsocket('client:syncHeadingToCoord', [player.id, x, y, z]);
    }
  },
  headingToTarget: function (player, targetId) {
    _methods.methods.debug('user.headingToCoord');

    if (!mp.players.exists(player)) return false;
    let pos = player.position;

    if (!_newrage.RAGE_BETA) {
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncHeadingToTarget', [player.id, targetId]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.callsocket('client:syncHeadingToTarget', [player.id, targetId]);
    }
  },
  takeNewItem: function (player, itemId, count = 1) {
    _methods.methods.debug('user.takeNewItem');

    if (!mp.players.exists(player)) return;

    _inventory.inventory.addItem(player, itemId, 1, 1, user.getId(player), count);
  },
  hasItem: function (player, itemId) {
    return !!user.getItem(player, itemId);
  },
  getItem: function (player, itemId) {
    return _inventory.inventory.getItemListData(1, user.getId(player)).find(item => item.item_id == itemId);
  },
  removeItem: (player, item_id) => {
    let item = user.getItem(player, item_id);

    if (item) {
      _inventory.inventory.deleteItem(item.id);

      return true;
    } else return false;
  },
  getItemById: function (player, id) {
    return _inventory.inventory.getItemListData(1, user.getId(player)).find(item => item.id == id);
  },
  stopAnimation: function (player) {
    _methods.methods.debug('user.stopAnimation');

    if (!mp.players.exists(player)) return false;

    if (!player.getVariable('isBlockAnimation')) {
      player.call('client:user:stopAnimation');
      user.stopSyncAnimation(player);
    }
  },
  stopSyncAnimation: function (player) {
    _methods.methods.debug('user.stopSyncAnimation');

    player.setVariable('use_scenario', null);
    if (!mp.players.exists(player)) return false;
    let pos = player.position;

    if (!_newrage.RAGE_BETA) {
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncStopAnimation', [player.id]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.callsocket('client:syncStopAnimation', [player.id]);
    }
  },
  playScenario: function (player, name, x, y, z, h, teleport = true) {
    _methods.methods.debug('user.playScenario');

    if (!mp.players.exists(player)) return false;

    if (!player.getVariable('isBlockAnimation')) {
      let pos = player.position;

      if (!_newrage.RAGE_BETA) {
        player.setVariable('use_scenario', JSON.stringify([name, x, y, z, h, teleport]));
        mp.players.forEach(p => {
          try {
            if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncScenario', [player.id, name, x, y, z, h, teleport]);
          } catch (e) {
            _methods.methods.debug(e);
          }
        });
      } else {
        player.callsocket('client:syncScenario', [player.id, name, x, y, z, h, teleport]);
      }
    }
  },
  stopScenario: function (player, quick = false) {
    _methods.methods.debug('user.stopScenario');

    if (!mp.players.exists(player)) return false;
    let pos = player.position;

    if (!_newrage.RAGE_BETA) {
      player.setVariable('use_scenario', null);
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncStopScenario', [player.id, quick]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    } else {
      player.callsocket('client:syncStopScenario', [player.id, quick]);
    }
  },
  playNearestScenarioCoord: function (player, x, y, z, r) {
    _methods.methods.debug('user.playScenario');

    if (!mp.players.exists(player)) return false;

    if (!player.getVariable('isBlockAnimation')) {
      let pos = player.position;
      player.setVariable('use_scenario', true);
      mp.players.forEach(p => {
        try {
          if (_methods.methods.distanceToPos(pos, p.position) < 300) p.callsocket('client:syncScenarioCoord', [player.id, x, y, z, r]);
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    }
  },
  hideLoadDisplay: (player, hud = true) => {
    _methods.methods.debug('user.hideLoadDisplay');

    if (!mp.players.exists(player)) return false;
    player.callsocket('client:user:hideLoadDisplay', [hud]);
  },
  showLoadDisplay: (player, hud = true) => {
    _methods.methods.debug('user.showLoadDisplay');

    if (!mp.players.exists(player)) return false;
    player.callsocket('client:user:showLoadDisplay', [hud]);
  },
  removeWaypoint: function (player) {
    _methods.methods.debug('user.removeWaypoint');

    if (!mp.players.exists(player)) return false;
    user.setWaypoint(player, player.position.x, player.position.y);
  },
  getRpName: function (player) {
    if (!mp.players.exists(player)) return 'NO_NAME';
    if (user.has(player, 'rp_name')) return user.get(player, 'rp_name').replace(/\'/g, '').replace(/\"/g, '').replace(/\`/g, '');
    return player.socialClub;
  },
  getPhone: function (player) {
    if (!user.isLogin(player)) return;
    return user.get(player, 'phone_code') + '-' + user.get(player, 'phone');
  },
  getId: function (player) {
    if (!mp.players.exists(player)) return -1;
    if (player.getVariable('id')) return _methods.methods.parseInt(player.getVariable('id'));
    return -1;
  },
  getRegStatusName: function (player) {
    _methods.methods.debug('user.getRegStatusName');

    if (!mp.players.exists(player)) return '~r~Нет';

    switch (user.get(player, 'reg_status')) {
      case 1:
        return 'временная';

      case 2:
        return 'получение гражданства';

      case 3:
        return 'гражданство США';

      default:
        return '~r~Нет';
    }
  },
  updateClientCache: function (player) {
    _methods.methods.debug('user.updateClientCache');

    if (!mp.players.exists(player)) return;

    try {
      let skin = {};
      skin.SEX = _methods.methods.parseInt(user.get(player, 'SEX'));
      skin.GTAO_SHAPE_THRID_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_THRID_ID'));
      skin.GTAO_SKIN_THRID_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_THRID_ID'));
      skin.GTAO_SHAPE_SECOND_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_SECOND_ID'));
      skin.GTAO_SKIN_SECOND_ID = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_SECOND_ID'));
      skin.GTAO_SHAPE_MIX = _methods.methods.parseFloat(user.get(player, 'GTAO_SHAPE_MIX'));
      skin.GTAO_SKIN_MIX = _methods.methods.parseFloat(user.get(player, 'GTAO_SKIN_MIX'));
      skin.GTAO_HAIR = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR'));
      skin.GTAO_HAIR_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR_COLOR'));
      skin.GTAO_HAIR_COLOR2 = _methods.methods.parseFloat(user.get(player, 'GTAO_HAIR_COLOR2'));
      skin.GTAO_EYE_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_EYE_COLOR'));
      skin.GTAO_EYEBROWS = _methods.methods.parseFloat(user.get(player, 'GTAO_EYEBROWS'));
      skin.GTAO_EYEBROWS_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_EYEBROWS_COLOR'));
      skin.GTAO_OVERLAY = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY'));
      skin.GTAO_OVERLAY_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY_COLOR'));
      skin.GTAO_OVERLAY9 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY9'));
      skin.GTAO_OVERLAY9_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY9_COLOR'));
      skin.GTAO_OVERLAY8 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY8'));
      skin.GTAO_OVERLAY8_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY8_COLOR'));
      skin.GTAO_OVERLAY5 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY5'));
      skin.GTAO_OVERLAY5_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY5_COLOR'));
      skin.GTAO_OVERLAY4 = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY4'));
      skin.GTAO_OVERLAY4_COLOR = _methods.methods.parseFloat(user.get(player, 'GTAO_OVERLAY4_COLOR'));

      if (typeof user.get(player, 'GTAO_FACE_SPECIFICATIONS') == 'string') {
        skin.GTAO_FACE_SPECIFICATIONS = JSON.parse(user.get(player, 'GTAO_FACE_SPECIFICATIONS'));
      } else {
        skin.GTAO_FACE_SPECIFICATIONS = user.get(player, 'GTAO_FACE_SPECIFICATIONS');
      }

      user.set(player, 'skin', JSON.stringify(skin));
      player.callsocket('client:user:updateCache', [Array.from(_data.Container.GetAll(player.id))]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  getChips: function (player) {
    if (player && player.chipsBalance) return player.chipsBalance;
    return 0;
  },
  setChips: function (player, money, save = true) {
    if (!mp.players.exists(player) || typeof money !== "number" || isNaN(money)) {
      return;
    }

    if (save) user.log(player, "PlayerSystem", "смена баланса фишек казино с " + player.chipsBalance + " на " + money);
    player.chipsBalance = money;

    if (player.chipsBalance < 0) {
      player.chipsBalance = 0;
    }

    player.call('user.client.updateChips', [player.chipsBalance]);
  },
  addChips: function (player, money) {
    if (typeof money != "number" || isNaN(money)) return;
    if (!mp.players.exists(player)) return;
    user.setChips(player, user.getChips(player) + money);

    _methods.methods.saveLog("chips", user.getId(player) + " add " + money + " | res " + user.getChips(player));
  },
  removeChips: function (player, money) {
    if (typeof money != "number" || isNaN(money)) return;
    if (!mp.players.exists(player)) return;
    user.setChips(player, user.getChips(player) - money);

    _methods.methods.saveLog("chips", user.getId(player) + " remove " + money + " | res " + user.getChips(player));
  },
  addMoneyOffline: function (id, money, notify) {
    if (notify) user.notify(id, `${notify}: ~g~$${_methods.methods.numberFormat(money)}`, null, "chat", "success");
    let target = user.getPlayerById(id);

    if (target) {
      user.addMoney(target, money);
      return;
    }

    user.getUserDataFromDB(id).then(player => {
      if (!player) return;
      player.money += money;
      player.save();
    });
  },
  addMoney: function (player, money) {
    user.addCashMoney(player, money);
  },
  removeMoney: function (player, money) {
    user.removeCashMoney(player, money);
  },
  setMoney: function (player, money) {
    user.setCashMoney(player, money);
  },
  getMoney: function (player) {
    return user.getCashMoney(player);
  },
  addCashMoney: function (player, money) {
    _methods.methods.saveLog('Money', `[ADD_CASH] ${user.getRpName(player)} (${user.getId(player)}) ${user.getCashMoney(player)} - ${money}`);

    user.setCashMoney(player, user.getCashMoney(player) + _methods.methods.parseInt(money));
  },
  removeCashMoney: function (player, money) {
    _methods.methods.saveLog('Money', `[REMOVE_CASH] ${user.getRpName(player)} (${user.getId(player)}) ${user.getCashMoney(player)} + ${money}`);

    user.setCashMoney(player, user.getCashMoney(player) - _methods.methods.parseInt(money));
  },
  setCashMoney: function (player, money) {
    user.log(player, "PlayerSystem", "смена баланса на руках с " + user.getCashMoney(player) + "$ на " + money + "$");
    user.set(player, 'money', _methods.methods.parseInt(money));
    user.updateClientCache(player);
    mp.events.triggerBrowser(player, 'cef:hud:setMoney', money);
  },
  getCashMoney: function (player) {
    if (user.has(player, 'money')) return _methods.methods.parseInt(user.get(player, 'money'));
    return 0;
  },
  addBankMoney: function (player, money) {
    _methods.methods.saveLog('Money', `[ADD_BANK] ${user.getRpName(player)} (${user.getId(player)}) ${user.getBankMoney(player)} - ${money}`);

    user.setBankMoney(player, user.getBankMoney(player) + _methods.methods.parseInt(money));
  },
  removeBankMoney: function (player, money) {
    _methods.methods.saveLog('Money', `[REMOVE_BANK] ${user.getRpName(player)} (${user.getId(player)}) ${user.getBankMoney(player)} + ${money}`);

    user.setBankMoney(player, user.getBankMoney(player) - _methods.methods.parseInt(money));
  },
  setBankMoney: function (player, money) {
    user.log(player, "PlayerSystem", "смена баланса в банке с " + user.getBankMoney(player) + "$ на " + money + "$");
    user.set(player, 'money_bank', _methods.methods.parseInt(money));
    user.updateClientCache(player);
    mp.events.triggerBrowser(player, 'cef:hud:setMoneyBank', money);
  },
  getBankMoney: function (player) {
    if (user.has(player, 'money_bank')) return _methods.methods.parseInt(user.get(player, 'money_bank'));
    return 0;
  },
  addPayDayMoney: function (player, money) {
    user.setPayDayMoney(player, user.getPayDayMoney(player) + _methods.methods.parseInt(money));
  },
  removePayDayMoney: function (player, money) {
    user.setPayDayMoney(player, user.getPayDayMoney(player) - _methods.methods.parseInt(money));
  },
  setPayDayMoney: function (player, money) {
    user.set(player, 'money_payday', _methods.methods.parseInt(money));
    user.saveAccount(player);
  },
  getPayDayMoney: function (player) {
    if (user.has(player, 'money_payday')) return _methods.methods.parseInt(user.get(player, 'money_payday'));
    return 0;
  },
  addGrabMoney: function (player, money) {
    if (user.isLogin(player)) player.call('client:user:addGrabMoney', [money]);
  },
  removeGrabMoney: function (player, money) {
    if (user.isLogin(player)) player.call('client:user:removeGrabMoney', [money]);
  },
  setGrabMoney: function (player, money) {
    if (user.isLogin(player)) player.call('client:user:setGrabMoney', [money]);
  },
  giveTaxiJobMoney: function (player, money) {
    if (!user.isLogin(player)) return;
    let businessId = user.get(player, 'job') == 'taxi2' ? 147 : 114;

    let taxiMoney = _methods.methods.parseInt(money * ((100 - _business.business.getPrice(businessId) * 2) / 100));

    let businessMoney = _methods.methods.parseInt(money * (_business.business.getPrice(businessId) * 2 / 100));

    if (user.get(player, 'bank_prefix') < 1) {
      user.addCashMoney(player, taxiMoney);
      player.notify('Вы заработали: ~g~$' + taxiMoney);
    } else {
      user.addBankMoney(player, taxiMoney);

      _bank.bank.sendSmsBankOperation(player, `Зачисление средств: ~g~$${taxiMoney}`);
    }

    _business.business.addMoney(businessId, businessMoney);
  },
  giveJobMoney: function (player, money) {
    if (!user.isLogin(player)) return;
    money = _methods.methods.parseInt(money);

    if (user.get(player, 'bank_prefix') < 1) {
      user.addCashMoney(player, money);
      player.notify('Вы заработали: ~g~$' + money);
    } else {
      user.addBankMoney(player, money);

      _bank.bank.sendSmsBankOperation(player, `Зачисление средств: ~g~$${money}`);
    }

    _coffer.coffer.removeMoney(money);
  },
  jail: function (player, sec, withIzol = false) {
    _methods.methods.debug('user.jail');

    if (!user.isLogin(player)) return false;
    player.call('client:jail:jailPlayer', [sec, withIzol]);
  },
  arrest: function (player) {
    user.log(player, "GosJail", 'Был посажен в тюрьму на ' + user.get(player, 'wanted_level') + ' лет');

    _methods.methods.debug('user.arrest');

    if (!user.isLogin(player)) return false;
    if (parseInt(user.get(player, 'wanted_level')) <= 0) return false;
    user.addHistory(player, 1, 'Был посажен в тюрьму на ' + user.get(player, 'wanted_level') + ' лет');
    user.jail(player, _methods.methods.parseInt(user.get(player, 'wanted_level')) * 450);
    mp.events.call("playerArrested", player);
  },
  arrestAdmin: (player, admin, time, reason, name) => {
    return new Promise(resolve => {
      if (typeof admin != "string" && !user.isAdminNow(admin)) return resolve(true);
      if (typeof player == "string") player = _methods.methods.parseInt(player);
      let id = typeof player == "number" ? player : user.getId(player);
      if (!name && typeof player != "number") name = user.getRpName(player);
      if (typeof time != 'number') time = _methods.methods.parseInt(time);
      if (isNaN(time) || time < 0) return typeof admin == "string" ? null : admin.notify("Время указанно не верно"), resolve(true);
      if (!reason || reason.length < 2) return typeof admin == "string" ? null : admin.notify("Укажите причину ареста"), resolve(true);
      user.checkIdUser(id).then(fnd => {
        if (fnd == -1 && typeof admin != "string") return admin.notify("Игрок не обнаружен"), resolve(true);
        if (fnd == -1) return resolve(true);
        if (fnd > 0 && typeof admin != "string" && time > 0) return admin.notify("Нельзя посадить в тюрьму администратора"), resolve(true);
        if (typeof player == "number" && mp.players.toArray().find(usr => user.getId(usr) == id)) player = mp.players.toArray().find(usr => user.getId(usr) == id);
        if (typeof player != "number" && time > 0) _chat.chat.sendToAll(`Администратор ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`}`, `${user.getRpName(player)} (${user.getId(player)})!{${_chat.chat.clRed}} был посажен в тюрьму с причиной!{${_chat.chat.clWhite}} ${reason} на ${time} мин.`, _chat.chat.clRed);else if (name && time > 0) {
          _chat.chat.sendToAll(`Администратор ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`}`, `${name} (${id})!{${_chat.chat.clRed}} был посажен в тюрьму с причиной!{${_chat.chat.clWhite}} ${reason} на ${time} мин.`, _chat.chat.clRed);
        } else if (typeof admin != "string" && time > 0) admin.outputChatBox(`!{#f44336}Вы посадили!{FFFFFF} Игрока ID: ${id} в тюрьму с причиной: !{${_chat.chat.clWhite}}${reason} на ${time} мин.`);

        if (time == 0) {
          _chat.chat.broadcastAdmins(`Администратор ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`}`, `${name ? name : "Игрок"} (${id})!{${_chat.chat.clRed}} был выпущен из тюрьмы`, _chat.chat.clRed);
        }

        if (typeof admin == "string") {
          user.log(player, "AdminJail", `Был посажен в тюрьму администратором ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`} на ` + time + ' лет с причиной: ' + reason);
        } else {
          user.loginterract(player, admin, "AdminJail", `Был посажен в тюрьму администратором ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`} на ` + time + ' лет с причиной: ' + reason);
        }

        user.notify(id, `Вы были посажены в тюрьму администратором ${typeof admin == "string" ? admin : `${user.getRpName(admin)} (${user.getId(admin)})`} на ${time} минут с причиной: ${reason}`, "Администрация", "chat", "error");
        if (typeof player != "number") user.jail(player, time * 60, true), mp.events.call("playerArrested", player);else user.offlineJail(id, time);
        user.set(id, 'jailed', time != 0);
        if (time != 0) user.set(id, 'jailed_admin', 1);else user.set(id, 'jailed_admin', 0);
        resolve(true);
      });
    });
  },
  offlineJail: (id, time) => {
    _user.userEntity.update({
      jailed: 1,
      jail_time: time * 60,
      jailed_admin: time > 0 ? 1 : 0
    }, {
      where: {
        id: id
      }
    });
  },
  checkIdUser: (id, onlyOnline = false) => {
    return new Promise(resolve => {
      let checkOnline = mp.players.toArray().find(usr => user.getId(usr) == id);
      if (checkOnline) return resolve(user.get(checkOnline, 'admin_level'));
      if (onlyOnline) return resolve(-1);

      _user.userEntity.findOne({
        where: {
          id: id
        }
      }).then(res => {
        if (!res) return resolve(-1);else return resolve(res.admin_level);
      });
    });
  },
  hasWeapon: (player, weapon) => {
    if (!user.isLogin(player)) return;
    return player.weaponsAll.find(itm => itm.hash == weapon || itm.item == weapon);
  },
  hasAnyWeapon: player => {
    if (!user.isLogin(player)) return;
    return player.weaponsAll.length > 0;
  },
  giveWeaponByHash: function (player, hash, pt, inHand = false) {
    _methods.methods.debug('user.giveWeaponByHash');

    if (!user.isLogin(player)) return false;
    player.call('client:user:giveWeaponByHash', [hash, pt, inHand]);
  },
  giveWanted: function (player, level, reason) {
    _methods.methods.debug('user.giveWanted');

    if (!user.isLogin(player)) return false;

    if (reason == 'clear') {
      user.log(player, "GosUnWanted", `был снят розыск`);
      user.set(player, 'wanted_level', 0);
      user.set(player, 'wanted_reason', 0);
      player.notifyWithPicture('Уведомление', 'Police Department', 'Вы больше не находитесь в розыске', 'WEB_LOSSANTOSPOLICEDEPT', 2);
      user.addHistory(player, 1, 'Был очищен розыск');
    } else {
      if (user.isInMp(player)) return false;
      if (user.get(player, 'mask') > 0) return false;
      if (_mask.hiddenIdMask.includes(player.getClothes(1).drawable)) return false;
      user.log(player, "GosWanted", `был выдан розыск ${level}, причина: ${reason}`);
      let currentLvl = user.get(player, 'wanted_level');

      if (currentLvl + level >= 10) {
        user.set(player, 'wanted_level', 10);
      } else user.set(player, 'wanted_level', currentLvl + level);

      user.set(player, 'wanted_reason', reason);
      player.notifyWithPicture('Уведомление', 'Police Department', 'Просим Вас явиться в участок Los Santos Police Department', 'WEB_LOSSANTOSPOLICEDEPT', 2);
      user.addHistory(player, 1, 'Был выдан розыск ' + level + '. Причина: ' + reason);
    }

    user.updateClientCache(player);
  },
  setIzol: function (player, number, reason) {
    _methods.methods.debug('user.setIzol');

    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    player.call('client:jail:izol', [number]);
    player.notify('~r~Вас посадили в изолятор №' + number + ' с причиной:');
    player.notify('~r~' + reason);
  },
  giveJailRun: function (player) {
    _methods.methods.debug('user.giveJailRun');

    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    player.call('client:jail:giveJailRun');
    player.notify('~g~Вам выдали допуск к прогулке');
  },
  takeJailRun: function (player) {
    _methods.methods.debug('user.takeJailRun');

    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    player.call('client:jail:takeJailRun');
    player.notify('~g~У вас забрали допуск к прогулке');
  },
  isAdmin: function (player, adminLevel = 1) {
    return user.isLogin(player) && user.get(player, 'admin_level') >= adminLevel;
  },
  isAdminNow: function (player, adminLevel = 1) {
    if (user.isLogin(player) && user.get(player, 'admin_level') >= adminLevel && player.getVariable('enableAdmin')) return true;
    return false;
  },
  getAdminLevel: function (player) {
    return user.get(player, 'admin_level');
  },
  setAdminLevel: function (player, lvl) {
    lvl = _methods.methods.parseInt(lvl);
    user.set(player, 'admin_level', lvl);
    user.updateClientCache(player);
  },
  isHelper: function (player) {
    return user.isLogin(player) && user.get(player, 'helper_level') >= 1;
  },
  getHelperLevel: function (player) {
    return user.isLogin(player) ? user.get(player, 'helper_level') : 0;
  },
  setHelperLevel: function (player, level) {
    if (!user.isLogin(player)) return;
    user.set(player, 'helper_level', level);
    user.updateClientCache(player);
  },
  isLeader2: function (player) {
    return user.isLogin(player) && user.get(player, 'rank2') == 11;
  },
  isLeader: function (player) {
    return user.isLogin(player) && _fractions.fractionUtil.isLeader(user.get(player, 'fraction_id'), user.get(player, 'rank'));
  },
  isSubLeader: function (player) {
    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    return _fractions.fractionUtil.isSubLeader(user.get(player, 'fraction_id'), user.get(player, 'rank'));
  },
  isGang: player => {
    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    if (!user.getPlayerFraction(player)) return false;
    return !!_fractions.fractionUtil.getFraction(user.getPlayerFraction(player)).gang;
  },
  isGos: function (player) {
    return user.isLogin(player) && (user.isSapd(player) || user.isFib(player) || user.isUsmc(player) || user.isGov(player) || user.isEms(player) || user.isSheriff(player) || user.isPrison(player));
  },
  isGosPD: function (player) {
    return user.isLogin(player) && (user.isSapd(player) || user.isFib(player) || user.isUsmc(player) || user.isGov(player) || user.isSheriff(player) || user.isPrison(player));
  },
  isGov: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 1;
  },
  isSapd: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 2;
  },
  isFib: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 3;
  },
  isUsmc: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 4;
  },
  isSheriff: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 7;
  },
  isPrison: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 5;
  },
  isRussianMafia: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 8;
  },
  isCosaNostra: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 9;
  },
  isYakuza: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 10;
  },
  isLaEme: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 11;
  },
  isMafia: function (player) {
    let fraction = user.getPlayerFraction(player);
    if (!fraction) return false;
    return !!_fractions.fractionUtil.getFraction(fraction).mafia;
  },
  isEms: function (player) {
    return user.isLogin(player) && user.get(player, 'fraction_id') == 16;
  },
  getFractionName: function (fractionId) {
    return _fractions.fractionUtil.getFractionName(fractionId);
  },
  getPlayerFraction: function (player) {
    if (!mp.players.exists(player)) return;
    return user.get(player, "fraction_id");
  },
  getPlayerFractionRank: function (player) {
    if (!mp.players.exists(player)) return;
    return user.get(player, "rank");
  },
  getPlayerFractionName: function (player) {
    if (!mp.players.exists(player)) return;
    return user.getFractionName(user.getPlayerFraction(player));
  },
  getRankName: function (fractionId, rank) {
    return _fractions.fractionUtil.getRankName(fractionId, rank);
  },
  setOnlineStatus: function (player, isOnline) {
    if (isOnline == undefined) isOnline = 0;
    if (user.isLogin(player)) _user.userEntity.update({
      is_online: isOnline
    }, {
      where: {
        id: user.getId(player)
      }
    });
  },
  kick: function (player, reason, title = 'Вы были кикнуты.') {
    if (!mp.players.exists(player)) return;

    _methods.methods.debug('user.kick ' + player.socialClub + ' ' + reason);

    player.outputChatBox('!{f44336}' + title);
    player.outputChatBox('!{f44336}Причина: !{FFFFFF}' + reason);
    user.log(player, "PlayerKick", `${title}, причина: ${reason}`);
    user.notify(player, reason, title, 'chat', 'error');
    player.kick(reason);
  },
  kickAntiCheat: function (player, reason, title = 'Вы были кикнуты.') {
    if (!mp.players.exists(player)) return;
    player.weaponsAll = [];

    _methods.methods.debug('user.kickAntiCheat');

    user.kick(player, reason, title);
    user.log(player, "PlayerKick", `[Античит] ${title}, причина: ${reason}`);

    if (user.isLogin(player)) {
      _methods.methods.saveLog('AntiCheat', `${user.getRpName(player)} (${user.getId(player)}) - ${reason}`);

      _chat.chat.sendToAll('Anti-Cheat System', `${user.getRpName(player)} (${user.getId(player)})!{${_chat.chat.clRed}} был кикнут с причиной!{${_chat.chat.clWhite}} ${reason}`, _chat.chat.clRed);
    }
  },
  freeze: function (player, isFreeze) {
    if (!user.isLogin(player)) return;
    player.call('client:user:freeze', [isFreeze]);
  },
  disableAllControls: function (player, disable) {
    if (!user.isLogin(player)) return;
    player.call('client:user:disableAllControls', [disable]);
  },
  addHistory: function (player, type, reason) {
    if (typeof player != "number" && !user.isLogin(player)) return;

    let time = _methods.methods.getTimeWithoutSec();

    let date = _methods.methods.getDate();

    let rpDateTime = _weather.weather.getRpDateTime();

    let dateTime = time + ' ' + date;

    _logPlayerEntity.logPlayerEntity.create({
      user_id: typeof player != "number" ? user.getId(player) : player,
      datetime: `${rpDateTime} (( ${dateTime} ))`,
      type: type,
      do: reason
    });
  },
  grab: function (player, shopId) {
    if (!user.isLogin(player)) return;

    if (!user.isGang(player) && !user.isMafia(player) && !_business.business.isGang(user.get(player, 'fraction_id2'))) {
      player.notify('~r~Вы не можете грабить');
      return;
    }

    if (mp.players.length < 75) {
      player.notify('~r~Онлайн на сервере должен быть более 75 человек');
      return;
    }

    if (player.dimension != 0) {
      player.notify('~r~Нельзя грабить в виртуальном мире');
      return;
    }

    if (_data.Container.Has(shopId, 'isGrabShop')) {
      player.notify('~r~Данный магазин уже ограблен');
      return;
    }

    if (_data.Container.Has(shopId, 'isGrabGunShop')) {
      player.notify('~r~Магазин уже был ограблен');
      return;
    }

    const pos = new mp.Vector3(player.position.x, player.position.y, player.position.z);
    user.set(player, 'isGrabingShop', true);

    _data.Container.Set(shopId, 'isGrabShop', true);

    user.playAnimation(player, 'anim@heists@money_grab@duffel', 'loop', 9);

    if (_methods.methods.getRandomInt(0, 1) == 0) {
      _dispatcher.dispatcher.sendPos('Код 3', 'Всем патрулям, ограбление', pos, true, null, [2, 7, 3]);

      player.notify('~y~Сработала сигнализация');
    }

    setTimeout(function () {
      if (!user.isLogin(player)) return;

      if (_methods.methods.distanceToPos(pos, player.position) > 2) {
        return player.notify("~r~Вы отошли слишком далеко");
      }

      user.isPlayAnimation(player, 'anim@heists@money_grab@duffel', 'loop').then(stas => {
        if (!stas) return player.notify("~r~Вы прервали анимацию");
        user.minigame(player, "gr6").then(status => {
          if (_methods.methods.distanceToPos(pos, player.position) > 2) {
            player.notify("~r~Вы отошли слишком далеко");
          } else {
            user.reset(player, 'isGrabingShop');
            user.giveWanted(player, 4, 'Ограбление');

            const sum = _methods.methods.getRandomInt(4500, 5000);

            if (!player.bankgrabmoney) player.bankgrabmoney = 0;
            player.notify(`~g~Вы ограбили магазин на сумму $${sum}`);
            player.bankgrabmoney += sum;
            user.setComponentVariation(player, 5, 45, 0);

            if (user.isGang(player) || user.isMafia(player)) {
              player.notify('~y~Теперь необходимо отнести сумку с деньгами в сейф фракции');
            } else {
              player.notify('~y~Теперь необходимо отмыть средства');
            }
          }

          user.stopAnimation(player);
          setTimeout(function () {
            _data.Container.Set(shopId, 'isGrabGunShop', true);
          }, 1000 * 1000);
        });
      });
    }, 70 * 1000);
  },
  payDay: async function (player) {
    if (!mp.players.exists(player)) return false;
    if (!user.isLogin(player)) return false;
    if (!player.played_time) player.played_time = 0;
    player.played_time++;
    let addExp = 1;
    if (_admin.customParams.agex2) addExp++;
    if (_admin.customParams.agex2new && user.getLevel(player) <= _level.levelAccess.x2lvlNewPlayers) addExp++;
    let vipConfig = user.getVipStatusData(player);

    if (vipConfig) {
      addExp += vipConfig.expbonus;

      if (vipConfig.givecoin > 0) {
        _user.userEntity.increment({
          money_donate: vipConfig.givecoin
        }, {
          where: {
            id: user.getId(player)
          }
        });
      }
    }

    if (addExp > 5) addExp = 5;
    user.setExp(player, user.getExp(player) + addExp);
    if (user.get(player, 'reg_time') <= 0 && user.get(player, 'reg_status') == 1) user.set(player, 'reg_status', 0);

    if (user.get(player, 'reg_time') <= 0 && user.get(player, 'reg_status') == 2) {
      user.set(player, 'reg_status', 3);
      player.notifyWithPicture('323-555-0001', 'Адвокат', 'Поздравляю, Вы получили гражданство США.', 'CHAR_BARRY', 2);
    }

    if (user.getExp(player) >= user.getMaxExp(player)) {
      user.setExp(player, 0);
      user.setLevel(player, user.getLevel(player) + 1);
      const moneylevel = user.getLevel(player) * 200;

      _bank.bank.sendSmsBankOperation(player, 'В честь достижения нового уровня (' + user.getLevel(player) + '), мы дарим Вам ~g~$' + moneylevel, 'Новый уровень');

      user.addCashMoney(player, moneylevel);

      if (user.getLevel(player) == 3 && user.get(player, 'referer') != '' && user.get(player, "exp_age") == 0) {
        user.addCashMoney(player, 25000);
        player.notify(`~g~Вы получили $25,000 по реферальной системе`);
        player.notify(`~g~Пригласивший ${user.get(player, 'referer')} получил 200ac на личный счёт`);

        _user.userEntity.increment({
          money_donate: 200
        }, {
          where: {
            rp_name: user.get(player, 'referer')
          }
        });

        _logReferrerEntity.logReferrerEntity.create({
          name: user.getRpName(player),
          referrer: user.get(player, 'referer'),
          money: 200,
          timestamp: _methods.methods.getTimeStamp()
        });
      }

      if (user.getLevel(player) == 3 && user.get(player, 'promocode') != '' && user.get(player, "exp_age") == 0) {
        player.notify(`~g~Вы получили ~s~$25000 ~g~по промокоду ~s~${user.get(player, 'promocode')}`);
        user.addCashMoney(player, 25000);

        _user.userEntity.increment({
          money_donate: 50
        }, {
          where: {
            parthner_promocode: user.get(player, 'promocode')
          }
        });
      }
    }

    let money = 0;
    let moneyBonus = 0;
    const moneyMultipler = 9;
    let rank = user.getPlayerFractionRank(player) > 14 ? 14 : user.getPlayerFractionRank(player);
    let fraction = user.getPlayerFraction(player);
    let lvladmin = user.getAdminLevel(player);
    let lvlhelper = user.get(player, 'helper_level');

    if (user.isAfk(player)) {
      if (!user.isLogin(player)) return;
      return player.notify(`~r~Зарплату вы не получили, связи с тем, что вы AFK`);
    }

    if (!user.isAdmin(player)) {
      if (user.isGang(player)) {
        let countter = _gangwar.gangzones.filter(item => item.ownerid == fraction).length;

        if (countter > 0) {
          money += _gangwar.moneyPerTer * countter;
          let givechest = false;

          _moneyChest.moneyChests.forEach(item => {
            if (givechest) return;

            if (item.fraction == fraction) {
              givechest = true;
              item.money += _methods.methods.parseInt(_gangwar.moneyPerTer * countter * 0.1);
            }
          });
        }
      }

      if (user.isGos(player)) {
        let ch = _customchest.chest.pool.find(q => q.settings.fraction == fraction);

        if (ch) {
          if (ch.grabmoney > 0) {
            let res = _methods.methods.parseInt(ch.grabmoney / 100);

            if (res > 3000) res = 3000;
            money += res;
          }
        }
      }

      if (user.isMafia(player)) {
        for (let id in _mafiaData.mafiaTerritoriesData) {
          let data1 = await _data.Container.GetAll(_mafiaData.containerMafiaTerritoryId + (parseInt(id) + 1));

          if (data1.get('mafiaWarownerId') == user.getPlayerFraction(player)) {
            money += rank * 300 + 1500;
          }
        }
      }

      let fractiondata = _fractions.fractionUtil.getFraction(fraction);

      if (fractiondata) money += fractiondata.moneybase + rank * fractiondata.moneymultipler;
    }

    if (_admin.customParams.gosx2) money *= 2;

    if (user.get(player, 'is_old_money')) {
      if (money == 0) money += _coffer.coffer.getMoneyOld();else player.notify('~r~Пенсионный фонд обнаружил у вас доходы, пенсии вам не видать');
    } else if (user.get(player, 'posob')) {
      if (money == 0) money += _coffer.coffer.getPosob();else player.notify('~r~Фонд социальной помощи обнаружил у вас доходы, пособия вам не видать');
    }

    if (_admin.customParams.fiveAndTenBonus) {
      if (player.played_time == 5) moneyBonus += 50000, player.notify('~g~Вы получили бонус за 5 часов отыгранного времени');
      if (player.played_time == 10) moneyBonus += 50000, player.notify('~g~Вы получили бонус за 10 часов отыгранного времени');
    }

    if (lvladmin == 1) moneyBonus += 4000;
    if (lvladmin == 2) moneyBonus += 9000;
    if (lvladmin == 3) moneyBonus += 14000;
    if (lvladmin == 4) moneyBonus += 16000;
    if (lvladmin == 5) moneyBonus += 18000;
    if (lvlhelper == 1) moneyBonus += 150;else if (lvlhelper == 2) moneyBonus += 300;else if (lvlhelper == 3) moneyBonus += 450;

    if (vipConfig) {
      moneyBonus += vipConfig.moneybonus;
    }

    if (money > 0 || moneyBonus > 0) {
      let nalog = _methods.methods.parseInt(money / 100 * _coffer.coffer.getNalog());

      money = _methods.methods.parseInt(money - nalog);

      if (user.get(player, 'bank_prefix') > 0) {
        user.addBankMoney(player, money + moneyBonus);
      } else {
        user.addCashMoney(player, money + moneyBonus);
        player.notify(`~r~Настоятельно рекомендуем оформить банковскую карту`);
      }

      _bank.bank.sendSmsBankOperation(player, `~g~~b~Сумма: ~g~$${money}${!user.get(player, 'is_old_money') && money > 0 ? `\n~b~Налог: ~g~$${nalog} ~w~${_coffer.coffer.getNalog()}%` : ``}${moneyBonus > 0 ? `\n~b~Прибавка: ~g~$${moneyBonus}` : ``}`, 'Зачисление средств');
    }

    _coffer.coffer.removeMoney(money + moneyBonus);

    return true;
  },
  getVipStatus: function (player) {
    return user.get(player, 'vip_status') == '' ? 'none' : user.get(player, 'vip_status');
  },
  playDrugAnimation: function (player) {
    if (!mp.players.exists(player)) return;
    player.setVariable('isBlockAnimation', true);
    user.playAnimation(player, 'move_m@drunk@transitions', 'slightly_to_idle', 8);
    setTimeout(() => {
      if (!mp.players.exists(player)) return;
      player.setVariable('isBlockAnimation', false);
    }, 5000);
  },
  addDrugLevel: function (player, drugType, level) {
    if (user.isLogin(player)) player.call('client:user:addDrugLevel', [drugType, level]);
  },
  removeDrugLevel: function (player, drugType, level) {
    if (user.isLogin(player)) player.call('client:user:removeDrugLevel', [drugType, level]);
  },
  setDrugLevel: function (player, drugType, level) {
    if (user.isLogin(player)) player.call('client:user:setDrugLevel', [drugType, level]);
  },
  getWaterLevel: function (player) {
    return user.get(player, 'water_level');
  },
  stopAllScreenEffects: function (player) {
    if (user.isLogin(player)) player.call('client:user:stopAllScreenEffects');
  },
  playEatAnimation: function (player) {
    user.playAnimation(player, 'mp_player_inteat@burger', 'mp_player_int_eat_burger', 48);
  },
  addEatLevel: function (player, level) {
    if (level > 100) {
      user.setEatLevel(player, 110);
      return true;
    }

    if (user.getEatLevel(player) + level > 100) {
      user.setEatLevel(player, 100);
      return true;
    }

    user.setEatLevel(player, user.getEatLevel(player) + level);
    return true;
  },
  removeEatLevel: function (player, level) {
    if (user.getEatLevel(player) - level < 0) {
      user.setEatLevel(player, 0);
      return true;
    }

    user.setEatLevel(player, user.getEatLevel(player) - level);
    return true;
  },
  setEatLevel: function (player, level) {
    user.set(player, 'eat_level', level);
    return true;
  },
  getEatLevel: function (player) {
    return user.get(player, 'eat_level');
  },
  playDrinkAnimation: function (player) {
    user.playAnimation(player, 'mp_player_intdrink', 'loop_bottle', 48);
  },
  giveJobSkill: function (player) {
    if (user.isLogin(player)) {
      let job = user.get(player, 'job');
      let skillCount = 500;

      switch (job) {
        case 'mail':
        case 'mail2':
          skillCount = 1000;
          break;

        case 'taxi1':
        case 'taxi2':
          skillCount = 400;
          job = 'taxi';
          break;

        case 'trucker1':
        case 'trucker2':
        case 'trucker3':
          job = 'trucker';
          skillCount = 1500;
          break;
      }

      if (user.has(player, 'skill_' + job)) {
        let currentSkill = user.get(player, 'skill_' + job);
        if (currentSkill >= skillCount) return;

        if (currentSkill == skillCount - 1) {
          user.set(player, 'skill_' + job, skillCount);

          _methods.methods.getSkillCountPlayers(job, currentSkill, function (count) {
            if (count < 3) {
              _chat.chat.sendToAll('Конкурс', `${user.getRpName(player)} !{${_chat.chat.clBlue}} стал одним из лучших работников штата San Andreas, получив вознаграждение $10,000`, _chat.chat.clBlue);

              user.addMoney(player, 10000);
            }
          });
        } else {
          user.set(player, 'skill_' + job, currentSkill + 1);
          let vipData = user.getVipStatusData(player);

          if (vipData) {
            if (vipData.skilljobbonus > 0 && user.get(player, 'skill_' + job) && user.get(player, 'skill_' + job) % vipData.skilljobbonus === 0) user.set(player, 'skill_' + job, user.get(player, 'skill_' + job) + 1);
          }

          player.notify('~g~Навык вашей профессии был повышен');
        }
      }
    }
  },
  addWaterLevel: function (player, level) {
    if (level > 100) {
      user.setWaterLevel(player, 110);
      return true;
    }

    if (user.getWaterLevel(player) + level > 100) {
      user.setWaterLevel(player, 100);
      return true;
    }

    user.setWaterLevel(player, user.getWaterLevel(player) + level);
    return true;
  },
  removeWaterLevel: function (player, level) {
    if (user.getWaterLevel(player) - level < 0) {
      user.setWaterLevel(player, 0);
      return true;
    }

    user.setWaterLevel(player, user.getWaterLevel(player) - level);
    return true;
  },
  setWaterLevel: function (player, level) {
    user.set(player, 'water_level', level);
    return true;
  },
  useAdrenaline: function (player) {
    if (!mp.players.exists(player)) return false;
    user.revive(player);
  },
  checkCanHandCuff: (player, target) => {
    if (!user.isLogin(player)) return false;
    if (!user.isLogin(target)) return false;

    if (user.isCuff(target)) {
      player.notify('~r~Игрок уже в наручниках');
      return false;
    }

    if (user.isCuff(player) || user.isTie(player)) {
      player.notify("~r~Вы в наручниках либо связаны");
      return false;
    }

    if (target.vehicle) {
      player.notify("~r~Нельзя надевать наручники на человека в транспорте");
      return;
    }

    if (target.health == 0) {
      player.notify("~r~Нельзя надевать наручники на человека в коме");
      return false;
    }

    if (player.health == 0) {
      player.notify("~r~Вы в коме");
      return false;
    }

    if (player.vehicle) {
      player.notify("~r~Нельзя надевать наручники на человека в транспорте");
      return false;
    }

    if (target.inGreenZone && !user.isGosPD(player)) {
      player.notify("~r~Нельзя надевать наручники на человека в зелёной зоне");
      return false;
    }

    if (!user.isGosPD(player) && !user.isMafia(player) && !user.isGang(player)) {
      player.notify("~r~Вы не можете пользоваться наручниками");
      return false;
    }

    if (user.isInMp(target) && target.dimension != 0) {
      player.notify("~r~В данном месте нельзя надевать наручники");
      return false;
    }

    return true;
  },
  cuff: function (player) {
    if (!mp.players.exists(player)) return false;
    if (user.isCuff(player)) return;
    user.unEquipAllWeapons(player);
    player.setVariable('isCuff', true);
    user.playAnimation(player, 'mp_arresting', 'idle', 49);
    player.call('client:handcuffs', [true]);
    player.setVariable('isBlockAnimation', true);

    _inventory.inventory.updateInventory(player);
  },
  unCuff: function (player) {
    if (!mp.players.exists(player)) return false;
    player.call('client:handcuffs', [false]);
    player.setVariable('isBlockAnimation', false);
    player.setVariable('isCuff', false);
    player.setVariable('cuffedByGos', false);
    player.call('client:user:stopAnimation');
    user.stopSyncAnimation(player);

    _inventory.inventory.updateInventory(player);
  },
  isCuff: function (player) {
    if (!mp.players.exists(player)) return false;
    return player.getVariable('isCuff') === true;
  },
  tie: function (player) {
    if (!mp.players.exists(player)) return false;
    user.playAnimation(player, 'mp_arresting', 'idle', 49);
    player.call('client:handcuffs', [true]);
    user.unEquipAllWeapons(player);
    player.setVariable('isTie', true);
    player.setVariable('isBlockAnimation', true);
    player.notify('~r~Вас связали');
  },
  isTie: function (player) {
    if (!mp.players.exists(player)) return false;
    return player.getVariable('isTie') === true;
  },
  unTie: function (player) {
    if (!mp.players.exists(player)) return false;
    player.call('client:handcuffs', [false]);
    player.setVariable('isTie', false);
    player.setVariable('isBlockAnimation', false);

    _methods.methods.playerDisableAllControls(player, false);
  },
  tieBandage: function (player) {
    if (!mp.players.exists(player)) return false;
    player.setVariable('isTieBandage', true);
    player.notify('~r~На вас надели повязку');
  },
  unTieBandage: function (player) {
    if (!mp.players.exists(player)) return false;
    player.setVariable('isTieBandage', false);
    player.notify('~g~С вас сняли повязку');
  },
  setGui: (player, gui) => {
    if (!mp.players.exists(player)) return;
    player.call('client:gui:set', [gui]);
  },
  alert: (player, text, type, img) => {
    if (!mp.players.exists(player)) return;
    mp.events.triggerBrowser(player, 'cef:alert:setAlert', type, escape(text), img);
  },
  bigAlert: (player, text, type, time = 5000) => {
    if (!mp.players.exists(player)) return;
    mp.events.triggerBrowser(player, 'cef:alert:setBigAlert', type, escape(text), time);
  },
  setHelp: (player, text) => {
    if (!mp.players.exists(player)) return;
    mp.events.triggerBrowser(player, 'cef:alert:setHelp', escape(text));
  },
  setHelpKey: (player, key, text, time) => {
    if (!mp.players.exists(player)) return;
    mp.events.triggerBrowser(player, 'cef:alert:setHelpKey', key, escape(text));
    if (!time) return;
    setTimeout(() => {
      user.removeHelpKey(player);
    }, time);
  },
  removeHelpKey: player => {
    if (!mp.players.exists(player)) return;
    mp.events.triggerBrowser(player, 'cef:alert:removeHelpKey');
  },
  fullHeal: (player, pay = true) => {
    if (!mp.players.exists(player)) return;
    user.healProtect(player);

    if (player.health == 0) {
      player.spawn(new mp.Vector3(player.position.x, player.position.y, player.position.z));
    }

    player.health = 100;
    user.set(player, "med_time", 0);
    player.call('client:medTimerFree', [pay]);
  }
};
exports.user = user;

function banUser(player, id, name, lvl, reason) {
  if (!mp.players.exists(player)) return;
  if (user.getAdminLevel(player) < 2) return player.notify("~r~У вас нет доступа к бану игроков");
  let target = user.getPlayerById(id);

  let block = _menu.menu.new(player, `Бан пользователя`, `${name} (${id}) ${target ? 'Online' : 'Offline'}`);

  let month = 0;
  let days = 0;
  let hours = 0;
  block.newItem({
    name: "Количество месяцев",
    type: "range",
    rangeselect: [0, 56],
    onchange: value => month = value
  });
  block.newItem({
    name: "Количество дней",
    type: "range",
    rangeselect: [0, 31],
    onchange: value => days = value
  });
  block.newItem({
    name: "Количество часов",
    type: "range",
    rangeselect: [0, 24],
    onchange: value => hours = value
  });
  block.newItem({
    name: "~r~Забанить",
    type: "select",
    onpress: () => {
      let time = hours * 60 * 60 + days * 60 * 60 * 24 + month * 60 * 60 * 24 * 30;
      if (time <= 0) return player.notify("~r~Время не указано");
      let timetype = month > 0 ? `m` : days > 0 ? 'd' : 'h';
      let timetext = month > 0 ? month : days > 0 ? days : hours;
      user.banuser(target ? target : id, player, time, reason, true, timetype, timetext);
    }
  });
  block.newItem({
    name: "Назад",
    type: "select",
    onpress: () => workUser(player, id, name, lvl)
  });
  block.open();
}

async function workUser(player, id, name, lvl) {
  if (!mp.players.exists(player)) return;
  let target = user.getPlayerById(id);

  if (!name || typeof lvl != "number") {
    if (mp.players.exists(target)) {
      name = user.getRpName(target);
      lvl = user.getAdminLevel(target);
    } else {
      let data = await user.getUserDataFromDB(id);
      if (!data) return;
      name = data.rp_name;
      lvl = data.admin_level;
    }

    workUser(player, id, name, lvl);
    return;
  }

  if (_methods.methods.isTestServer() && !user.isAdminNow(player) && target) {
    let block = _menu.menu.new(player, `Действие`);

    block.newItem({
      name: "ТП к игроку",
      onpress: () => {
        if (target.teleportBlock && user.getAdminLevel(player) < 5) return player.notify(`~r~К данному администратору нельзя телепортироваться`);
        user.teleportVeh(player, target.position.x, target.position.y, target.position.z + 3);
        player.dimension = target.dimension;
        if (player.vehicle) player.vehicle.dimension = target.dimension;
      }
    });
    block.open();
    return;
  }

  let adminLvl = user.getAdminLevel(player);
  if (!user.isAdminNow(player)) return player.notify("Действия доступны только администраторам");

  let block = _menu.menu.new(player, `Действие`, `${name} (${id}) ${target ? 'Online' : 'Offline'}`);

  if (target) {
    if (adminLvl > lvl) block.newItem({
      name: "Кикнуть",
      onpress: () => {
        if (lvl > 0) return workUser(player, id, name, lvl), player.notify("Нельзя кикнуть администратора");

        _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
          if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");
          user.kick(target, res, 'Кикнут администратором');
          user.loginterract(player, target, "AdminJob", "Кикнул");
          player.notify("Игрок кикнут");
        });
      }
    });
    block.newItem({
      name: "Снять/Надеть наручники",
      onpress: () => {
        if (mp.players.exists(target)) {
          if (user.isCuff(target)) {
            user.unCuff(target);
          } else {
            user.cuff(target);
          }
        } else {
          player.notify('~r~Игрок покинул сервер');
        }
      }
    });
    block.newItem({
      name: "ТП к игроку",
      onpress: () => {
        if (target.teleportBlock && user.getAdminLevel(player) < 5) return player.notify(`~r~К данному администратору нельзя телепортироваться`);
        user.teleportVeh(player, target.position.x, target.position.y, target.position.z + 3);
        player.dimension = target.dimension;
        if (player.vehicle) player.vehicle.dimension = target.dimension;
        user.loginterract(player, target, "AdminJob", "Телепортировался к игроку");
      }
    });
    block.newItem({
      name: "ТП игрока",
      onpress: () => {
        if (target.teleportBlock && user.getAdminLevel(player) < 5) return player.notify(`~r~Данного администратора нельзя телепортировать`);
        user.teleportVeh(target, player.position.x, player.position.y, player.position.z);
        target.dimension = player.dimension;
        if (target.vehicle) target.vehicle.dimension = player.dimension;
        user.loginterract(player, target, "AdminJob", "Телепортировал игрока");
      }
    });
    block.newItem({
      name: "Проследить",
      onpress: () => {
        if (target.teleportBlock && user.getAdminLevel(player) < 5) return player.notify(`~r~За данным администратором нельзя наблюдать`);
        user.startSpectate(player, target);
      }
    });
    block.newItem({
      name: "~y~Выйти из слежки у текущего игрока",
      onpress: () => user.stopSpectate(player, target)
    });
    block.newItem({
      name: "~y~Остановить текущую слежку",
      onpress: () => user.stopSpectate(player)
    });

    if (user.isAdminNow(player, 5)) {
      block.newItem({
        name: "~g~50% армор",
        onpress: () => {
          target.armour = 50;
          user.loginterract(player, target, "AdminJob", "Выдал 50% армор");
        }
      });
      block.newItem({
        name: "~g~100% армор",
        onpress: () => {
          target.armour = 100;
          user.loginterract(player, target, "AdminJob", "Выдал 100% армор");
        }
      });
    }

    block.newItem({
      name: "~g~Исцелить",
      onpress: () => {
        user.fullHeal(target);
        user.loginterract(player, target, "AdminJob", "Исцелил");
      }
    });
    block.newItem({
      name: "~r~Убить",
      onpress: () => {
        target.health = 0;
        user.loginterract(player, target, "AdminJob", "Убил");
      }
    });
    block.newItem({
      name: "~y~Сохранить игрока в БД",
      desc: "Необходимо для просмотра актуальных данных на сайте",
      onpress: () => {
        if (mp.players.exists(target)) return;
        if (player.spamProtect) return player.notify("~r~Не спамьте этой кнопкой");
        player.spamProtect = true;
        setTimeout(() => {
          if (mp.players.exists(player)) player.spamProtect = false;
        }, 5000);
        user.saveAccount(target);
        user.loginterract(player, target, "AdminJob", "Принудительно сохранил игрока в базе данных");
      }
    });

    if (adminLvl >= 4) {
      if (target) {
        block.newItem({
          name: "Выдать офф фракцию",
          more: user.getPlayerFractionName(target),
          onpress: () => {
            _menu.menu.selectFraction(player).then(fract => {
              if (fract == null) return;
              user.loginterract(player, target, "AdminJob", "Выдал фракцию " + fract);
              user.set(target, "fraction_id", fract);
              user.set(target, "rank", 1);

              _methods.methods.saveLog('adminJob', user.getId(player) + " выдал фракцию " + fract + " пользователю " + user.getId(target));

              user.updateClientCache(target);
              player.notify("~g~Фракция установлена");
              user.saveAccount(target);
              return workUser(player, id, name, lvl);
            });
          }
        });

        if (user.getPlayerFraction(target)) {
          block.newItem({
            name: "Ранг офф фракции",
            more: `${user.getRankName(user.getPlayerFraction(target), user.getPlayerFractionRank(target))} [${user.getPlayerFractionRank(target)}]`,
            onpress: () => {
              if (!user.getPlayerFraction(target)) return workUser(player, id, name, lvl);

              let fractionranks = _fractions.fractionUtil.getFractionRanks(user.getPlayerFraction(target));

              _menu.menu.selector(player, "Выберите ранг", ["~r~Отмена", ...fractionranks], true).then(rank => {
                if (!rank) return workUser(player, id, name, lvl);
                user.set(target, 'rank', rank);
                player.notify(`~g~Успешно`);
                user.updateClientCache(target);
                user.saveAccount(target);

                _methods.methods.saveLog('adminJob', user.getId(player) + " выдал ранг " + rank + " пользователю " + user.getId(target));

                return workUser(player, id, name, lvl);
              });
            }
          });
        }
      }
    }

    if (adminLvl > 5) {
      block.newItem({
        name: "~o~VIP Статус",
        desc: user.getVipStatusData(target) ? user.getVipStatusData(target).name + " до " + _methods.methods.unixTimeStampToDateTime(user.get(target, 'vip_time')) : "~r~Нет",
        onpress: () => {
          _menu.menu.selector(player, "Выберите VIP", ["~r~Отмена", "~b~Снять", ..._vip.vipStatus.data.filter(item => !item.switch).map(item => {
            return item.name;
          })], true).then(vipid => {
            if (typeof vipid != "number" || !vipid) return workUser(player, id, name, lvl);

            if (vipid == 1) {
              user.accept(player, 'Снять випку?').then(status => {
                if (!status) return workUser(player, id, name, lvl);

                if (!user.getVipStatusData(target)) {
                  player.notify('~r~У игрока нет ВИП статуса');
                  return workUser(player, id, name, lvl);
                }

                user.loginterract(player, target, "AdminJob", "Снял вип статус " + user.getVipStatusData(target).name);
                user.clearVipStatus(target);
                player.notify('~g~Вы сняли VIP статус');
                workUser(player, id, name, lvl);
              });
              return;
            }

            vipid -= 2;

            let vipcfg = _vip.vipStatus.data.filter(item => !item.switch)[vipid];

            user.accept(player, "Выдать " + vipcfg.name + "?").then(status => {
              if (!status) return workUser(player, id, name, lvl);

              _menu.menu.input(player, "Введите количество дней", "30", 6, "int").then(m => {
                let days = _methods.methods.parseInt(m);

                if (isNaN(days) || days < 0) return player.notify("Срок указан не верно");
                user.loginterract(player, target, "AdminJob", "Выдал випку " + vipcfg.name + " на " + days);
                player.notify("Випка выдана");
                workUser(player, id, name, lvl);
                user.giveVipStatus(target, vipcfg.id, days);
              });
            });
          });
        }
      });
      block.newItem({
        name: "~o~Уровень",
        desc: "~g~" + user.getLevel(target),
        onpress: () => {
          _menu.menu.input(player, "Введите уровень", user.getLevel(target).toString()).then(m => {
            let money = _methods.methods.parseInt(m);

            if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
            user.loginterract(player, target, "AdminJob", "Выдал уровень " + money);
            user.setLevel(target, money);
            player.notify("Баланс установлен");
            workUser(player, id, name, lvl);
          });
        }
      });
      block.newItem({
        name: "~b~Гражданство",
        desc: "~g~" + user.getRegStatusName(target),
        onpress: () => {
          let list = ["~r~Нет", "временная", "получение гражданства", "гражданство США"];

          let submenu = _menu.menu.new(player, "Выберите новый статус");

          list.map((q, ind) => {
            submenu.newItem({
              name: q,
              onpress: () => {
                workUser(player, id, name, lvl);
                if (!mp.players.exists(target)) return player.notify(`~r~Игрок покинул сервер`);
                user.set(target, 'reg_status', ind);
                user.updateClientCache(target);
                player.notify('~g~Статус изменён');
              }
            });
          });
          submenu.open();

          _menu.menu.input(player, "Введите уровень", user.getLevel(target).toString()).then(m => {
            let money = _methods.methods.parseInt(m);

            if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
            user.loginterract(player, target, "AdminJob", "Выдал уровень " + money);
            user.setLevel(target, money);
            player.notify("Баланс установлен");
            workUser(player, id, name, lvl);
          });
        }
      });
      block.newItem({
        name: "~o~Фишки казино",
        desc: "~g~" + user.getChips(target),
        onpress: () => {
          _menu.menu.input(player, "Введите баланс", user.getChips(target).toString()).then(m => {
            let money = _methods.methods.parseInt(m);

            if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
            user.loginterract(player, target, "AdminJob", "Выдал " + (user.getMoney(target) - money) + " фишек казино ");

            _methods.methods.saveLog('adminJob', user.getId(player) + " выдал " + (user.getMoney(target) - money) + " фишек казино " + user.getId(target));

            user.setChips(target, money);
            player.notify("Баланс установлен");
            workUser(player, id, name, lvl);
          });
        }
      });
      block.newItem({
        name: "~o~Баланс",
        desc: "$~g~" + user.getMoney(target),
        onpress: () => {
          _menu.menu.input(player, "Введите баланс", user.getMoney(target).toString()).then(m => {
            let money = _methods.methods.parseInt(m);

            if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
            user.loginterract(player, target, "AdminJob", "Выдал " + (user.getMoney(target) - money) + "$ на руки ");

            _methods.methods.saveLog('adminJob', user.getId(player) + " выдал " + (user.getMoney(target) - money) + "$ на руки " + user.getId(target));

            user.setMoney(target, money);
            player.notify("Баланс установлен");
            workUser(player, id, name, lvl);
          });
        }
      });
      block.newItem({
        name: "~o~Банковский баланс",
        desc: "$~g~" + user.getBankMoney(target),
        onpress: () => {
          _menu.menu.input(player, "Введите баланс", user.getBankMoney(target).toString()).then(m => {
            let money = _methods.methods.parseInt(m);

            if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
            user.loginterract(player, target, "AdminJob", "Выдал " + (user.getMoney(target) - money) + "$ на банк ");

            _methods.methods.saveLog('adminJob', user.getId(player) + " выдал " + (user.getMoney(target) - money) + "$ в банк " + user.getId(target));

            user.setBankMoney(target, money);
            player.notify("Баланс установлен");
            workUser(player, id, name, lvl);
          });
        }
      });

      if (adminLvl >= 6) {
        block.newItem({
          name: `~r~Выдать PayDay`,
          onpress: () => {
            user.payDay(target);
            player.notify(`~g~PayDay выдан`);
            user.loginterract(player, target, "AdminJob", "Выдал PayDay");
          }
        });
        block.newItem({
          name: `~b~Уровень админки (${user.getAdminLevel(target)})`,
          onpress: () => {
            _menu.menu.input(player, "Введите уровень (0-5)", user.getAdminLevel(target).toString()).then(m => {
              let lvl = _methods.methods.parseInt(m);

              if (isNaN(lvl) || lvl < 0 || lvl > 6 || lvl > 5 && !_methods.methods.isTestServer()) return player.notify("Уровень указан не верно");
              user.loginterract(player, target, "AdminJob", "Выдал админку " + lvl);

              _methods.methods.saveLog('adminJob', user.getId(player) + " выдал админку " + lvl + " " + user.getId(target));

              user.setAdminLevel(target, lvl);
              player.notify("Уровень админки установлен");
              workUser(player, id, name, lvl);
            });
          }
        });
        block.newItem({
          name: `~b~Уровень хелперки (${user.getHelperLevel(target)})`,
          onpress: () => {
            _menu.menu.input(player, "Введите уровень (0-3)", user.getHelperLevel(target).toString()).then(m => {
              let lvl = _methods.methods.parseInt(m);

              if (isNaN(lvl) || lvl < 0 || lvl > 3) return player.notify("Уровень указан не верно");
              user.loginterract(player, target, "AdminJob", "Выдал хелперку " + lvl);

              _methods.methods.saveLog('adminJob', user.getId(player) + " выдал хелперку " + lvl + " " + user.getId(target));

              user.setHelperLevel(target, lvl);
              player.notify("Уровень хелперки установлен");
              workUser(player, id, name, lvl);
            });
          }
        });
      }
    }

    if (lvl == 0) block.newItem({
      name: "Выдать мут текстового чата",
      onpress: () => {
        _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
          if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");

          _menu.menu.input(player, "Введите количество минут").then(m => {
            let minute = _methods.methods.parseInt(m);

            if (isNaN(minute) || minute < 0) return player.notify("Количество минут указано не верно");
            user.mutePlayer(target, player, minute, "chat", res);
            user.loginterract(player, target, "AdminJob", "Выдал мут текстового чата на " + minute);
            player.notify("Мут выдан");
            userList(player);
          });
        });
      }
    });
    if (lvl == 0) block.newItem({
      name: "Выдать мут голосового чата",
      onpress: () => {
        _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
          if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");

          _menu.menu.input(player, "Введите количество минут").then(m => {
            let minute = _methods.methods.parseInt(m);

            if (isNaN(minute) || minute < 0) return player.notify("Количество минут указано не верно");
            user.mutePlayer(target, player, minute, "voice", res);
            user.loginterract(player, target, "AdminJob", "Выдал мут голосового чата на " + minute);
            player.notify("Мут выдан");
            userList(player);
          });
        });
      }
    });
    block.newItem({
      name: "Снять мут текстового чата",
      onpress: () => {
        user.unmutePlayer(target, "chat");
        player.notify("Мут снят");
        user.loginterract(player, target, "AdminJob", "Снял мут текстового чата");
      }
    });
    block.newItem({
      name: "Снять мут голосового чата",
      onpress: () => {
        user.unmutePlayer(target, "voice");
        player.notify("Мут снят");
        user.loginterract(player, target, "AdminJob", "Снял мут голосового чата");
      }
    });
  }

  block.newItem({
    name: "Транспорт игрока",
    onpress: () => {
      const q = () => {
        _carsModel.carsEntity.findAll({
          where: {
            id_user: id
          }
        }).then(cars => {
          let submenu = _menu.menu.new(player, "Список транспорта");

          cars.map(car => {
            let excar = mp.vehicles.toArray().find(veh => veh.dbid == car.id);
            submenu.newItem({
              name: `(${car.id}) ${car.name}`,
              more: car.number,
              desc: excar ? "~g~На сервере" : "~r~Не на сервере",
              onpress: () => {
                excar = mp.vehicles.toArray().find(veh => veh.dbid == car.id);

                let submenu2 = _menu.menu.new(player, "Действия", `(${car.id}) ${car.name} | ${car.number}`);

                submenu2.onclose = () => {
                  q();
                };

                submenu2.newItem({
                  name: "Багажник",
                  onpress: () => {
                    excar = mp.vehicles.toArray().find(veh => veh.dbid == car.id);
                    if (user.getAdminLevel(player) < 5) return player.notify(`~r~Вы не можете удалённо просматривать инветарь ТС`);
                    if (excar) return player.notify(`~r~ТС на сервере, используйте обычный метод доступа к инвентарю`);

                    _menu.menu.close(player);

                    _inventory.inventory.openInventory(player, 8, _methods.methods.convertNumberToHash(car.number));
                  }
                });
                submenu2.newItem({
                  name: "ТП машины к себе",
                  onpress: () => {
                    excar = mp.vehicles.toArray().find(veh => veh.dbid == car.id);
                    if (!excar) return player.notify(`~r~ТС не на сервере`);

                    try {
                      _methods.methods.teleportVehicle(excar, player.position, player.heading - 90, player.dimension);
                    } catch (error) {
                      console.error(error);
                    }
                  }
                });
                submenu2.open();
              }
            });
          });
          submenu.open();
        });
      };

      q();
    }
  });

  if (user.getAdminLevel(player) >= 5) {
    block.newItem({
      name: "~b~Заглянуть в инвентарь",
      onpress: () => {
        if (target) return player.notify(`~r~Игрок в сети, используйте обычный метод доступа к инвентарю`);

        _menu.menu.close(player);

        _inventory.inventory.openInventory(player, 1, id);
      }
    });
  }

  if (adminLvl > lvl) block.newItem({
    name: "Забанить",
    onpress: () => {
      if (user.getAdminLevel(player) == 1) {
        if (mp.players.toArray().find(t => user.getAdminLevel(t) > 1)) return player.notify(`~r~Забанить игрока на вашем уровне админки можно только тогда когда нет админов более высокого уровня`);else player.notify(`~g~В связи с тем что в сети нет админов более высокого уровня вам временно предоставлен доступ к бану игроков`);
      }

      if (lvl > 0) return workUser(player, id, name, lvl), player.notify("Нельзя забанить администратора");

      _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
        if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");
        banUser(player, id, name, lvl, res);
      });
    }
  });
  let warns = await user.getActiveWarns(id);
  let warnsall = await user.getAllWarns(id);

  if (warns.length > 0 && adminLvl > lvl) {
    block.newItem({
      name: "Активные варны",
      more: warns.length + " шт",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Список активных варнов");

        warns.map(itm => {
          submenu.newItem({
            name: `ID: ${itm.id} | ${_methods.methods.unixTimeStampToDateTime(itm.timestamp)}`,
            more: itm.admin,
            desc: itm.reason,
            onpress: () => {
              if (user.getAdminLevel(player) <= 4) return player.notify(`~r~Удаление доступно только администраторам 5+ ЛВЛ`);
              user.accept(player, "Удалить?").then(status => {
                if (status) {
                  user.loginterract(player, target, "AdminJob", `Удалил варн ${itm.id}, выдал ${itm.admin} до ${_methods.methods.unixTimeStampToDateTime(itm.timestamp)} с причиной ${itm.reason}`);
                  itm.destroy();
                }

                workUser(player, id, name, lvl);
              });
            }
          });
        });
        submenu.open();
      }
    });
  }

  if (user.getAdminLevel(player) > 5) {
    let coins = await user.getCoins(id);
    block.newItem({
      name: "~o~Коины",
      more: "~g~" + coins,
      onpress: () => {
        _menu.menu.input(player, "Введите количество коинов", coins.toString()).then(m => {
          let money = _methods.methods.parseInt(m);

          if (isNaN(money) || money < 0) return player.notify("Новый баланс указан не верно");
          user.loginterract(player, id, "AdminJob", "Установил значение коинов " + money);
          user.setCoins(id, money);
          player.notify("Баланс установлен");
          workUser(player, id, name, lvl);
        });
      }
    });
  }

  if (warnsall.length > 0 && user.getAdminLevel(player) > 5 && adminLvl > lvl) {
    block.newItem({
      name: "Все варны",
      more: warnsall.length + " шт",
      onpress: () => {
        let submenu = _menu.menu.new(player, "Список всех варнов");

        warns.map(itm => {
          submenu.newItem({
            name: (itm.timestamp > _methods.methods.getTimeStamp() ? "~r~[АКТИВНЫЙ] " : "~g~[ИСТЁК] ") + _methods.methods.unixTimeStampToDateTime(itm.timestamp),
            more: itm.admin,
            desc: itm.reason,
            onpress: () => {
              user.accept(player, "Удалить?").then(status => {
                if (status) itm.destroy();
                workUser(player, id, name, lvl);
              });
            }
          });
        });
        submenu.open();
      }
    });
  }

  block.newItem({
    name: "Выдать предупреждение",
    more: `Активных: [${warns.length}/3]`,
    onpress: () => {
      if (user.getAdminLevel(player) <= 1 || adminLvl <= lvl) return player.notify(`~r~Вы не можете выдать предупреждение`), workUser(player, id, name, lvl);
      if (warns.length >= 3) return player.notify(`~r~Количество предупреждение больше либо превышает 3`), workUser(player, id, name, lvl);

      _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
        if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");
        user.warn(id, res, "Администратор " + user.getRpName(player), 7);
        player.notify("~g~Предупреждение выдано");
        user.loginterract(player, id, "AdminJob", "Выдал предупреждение игроку: " + res);
      });
    }
  });
  block.newItem({
    name: "Разбанить",
    onpress: () => {
      _menu.menu.input(player, "Введите причину (3 симв. минимум)", '[Разбанен] ').then(res => {
        if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");
        user.unbanuser(id, player, res);
        user.loginterract(player, id, "AdminJob", "Разбанил игрока");
      });
    }
  });
  if (lvl == 0) block.newItem({
    name: "Посадить в тюрьму",
    onpress: () => {
      if (lvl > 0) return workUser(player, id, name, lvl), player.notify("Нельзя посадить в тюрьму администратора");

      _menu.menu.input(player, "Введите причину (3 симв. минимум)").then(res => {
        if (!res || res.length < 3) return workUser(player, id, name, lvl), player.notify("Причина не указана");

        _menu.menu.input(player, "Введите количество минут").then(m => {
          let minute = _methods.methods.parseInt(m);

          if (isNaN(minute) || minute < 0) return player.notify("Количество минут указано не верно");

          if (target) {
            user.fullHeal(target);
            setTimeout(() => {
              user.arrestAdmin(id, player, minute, res, name);
            }, 1000);
          } else {
            user.arrestAdmin(id, player, minute, res, name);
          }

          userList(player);
        });
      });
    }
  });
  block.newItem({
    name: "Освободить из тюрьмы",
    onpress: () => {
      user.arrestAdmin(id, player, 0, "Освобождён");
      player.notify("Игрок освобождён");
      userList(player);
      user.loginterract(player, id, "AdminJob", "Освободил из тюрьмы");
    }
  });

  if (adminLvl > 5) {
    block.newItem({
      name: "Выдать предмет по ID",
      onpress: () => {
        _menu.menu.input(player, "Введите ID предмета").then(m => {
          let itemq = _methods.methods.parseInt(m);

          if (isNaN(itemq) || itemq < 0) return player.notify("~r~ID предмета указан не верно"), workUser(player, id, name, lvl);
          if (_items.items.getItemNameById(itemq) == "UNKNOWN") return player.notify(`~r~Такого предмета не существует`), workUser(player, id, name, lvl);
          user.accept(player, "Выдать " + _items.items.getItemNameById(itemq) + "?").then(status => {
            if (!status) return workUser(player, id, name, lvl);

            _menu.menu.input(player, "Введите количество", "1", 5, "int").then(count => {
              if (!count) return player.notify(`~r~Количество указанно не верно`), workUser(player, id, name, lvl);
              if (count > 50) return player.notify(`~r~Количество не более 50`), workUser(player, id, name, lvl);

              _inventory.inventory.createManyItem(itemq, 0, 1, id, count);

              user.loginterract(player, id, "AdminJob", "Выдал предмет " + _items.items.getItemNameById(itemq) + " x" + count);
              workUser(player, id, name, lvl);
            });
          });
        });
      }
    });
    block.newItem({
      name: "Выдать оружие",
      onpress: () => {
        _menu.menu.selector(player, "Выберите оружие", _weapons.weaponsUtil.hashesMap.map(([name, hashhalh]) => name), true).then(async ids => {
          if (typeof ids !== "number") return workUser(player, id, name, lvl);
          let weapon = _weapons.weaponsUtil.hashesMap[ids];
          let ammo = await _menu.menu.input(player, "Количество патронов", "100", 10, "int");
          if (!ammo || ammo < 1) return player.notify(`~r~Количество патронов указано не верно`), workUser(player, id, name, lvl);
          user.giveWeaponByHash(player, mp.joaat("WEAPON_" + weapon[0].toUpperCase()), ammo);
          player.notify('~g~Оружие выдано');
          return workUser(player, id, name, lvl);
        });
      }
    });

    if (target) {
      block.newItem({
        name: "Сделать владельцем имущества",
        onpress: () => {
          let list = ["Дом", "Склад", "Квартира", "Апартаменты"];

          _menu.menu.selector(player, "Выберите тип", list, true).then(ids => {
            if (ids == null) return;
            let itq = ids == 0 ? _houses.houses : ids == 1 ? _stock.stock : ids == 2 ? _condo.condo : _apartments.apartments;
            const itqs = ids == 0 ? "id_house" : ids == 1 ? "stock_id" : ids == 2 ? "condo_id" : "apartment_id";

            _menu.menu.input(player, "Введите ID").then(m => {
              let itemq = _methods.methods.parseInt(m);

              if (isNaN(itemq) || itemq <= 0) return player.notify("~r~ID указан не верно");
              itq.updateOwnerInfo(itemq, id, user.getRpName(target));
              user.set(target, itqs, itemq);
              user.updateClientCache(target);
              if (itqs == "id_house") user.loginterract(player, id, "AdminJob", "Сделал владельцем дома @house" + itemq);else if (itqs == "apartment_id") user.loginterract(player, id, "AdminJob", "Сделал владельцем апаратаментов @apartment" + itemq);else if (itqs == "condo_id") user.loginterract(player, id, "AdminJob", "Сделал владельцем квартиры @condo" + itemq);else if (itqs == "stock_id") user.loginterract(player, id, "AdminJob", "Сделал владельцем склада @stock" + itemq);
              player.notify("~g~Успешно");
            });
          });
        }
      });
      block.newItem({
        name: "Сделать владельцем бизнеса",
        onpress: () => {
          _menu.menu.input(player, "Введите ID бизнеса").then(m => {
            let itemq = _methods.methods.parseInt(m);

            if (isNaN(itemq) || itemq <= 0) return player.notify("~r~ID указан не верно");

            _business.business.updateOwnerInfo(itemq, id, user.getRpName(target));

            user.set(target, 'business_id', itemq);
            user.set(target, 'fraction_id2', itemq);
            user.set(target, 'rank2', 11);
            user.loginterract(player, id, "AdminJob", "Сделал владельцем бизнеса @business" + itemq);
            user.updateClientCache(target);
            player.notify("~g~Успешно");
          });
        }
      });
    }

    block.newItem({
      name: "Редактор статистики",
      onpress: () => {
        statUserEdit(player, id, name, lvl);
      }
    });
    block.newItem({
      name: "Проверка имущества",
      onpress: () => {
        (0, _admin.userPropertyEdit)(player, id);
      }
    });
  }

  block.newItem({
    name: "Назад",
    type: "select",
    onpress: () => userList(player)
  });
  block.open();
}

async function statUserEdit(player, id, name, lvl) {
  let adminLvl = user.getAdminLevel(player);
  if (!user.isAdminNow(player)) return player.notify("Действия доступны только администраторам");
  let target = user.getPlayerById(id);

  let block = _menu.menu.new(player, `Редактор статы`, `${name} (${id}) ${target ? 'Online' : 'Offline'}`);

  let statData;

  if (!target) {
    let q = await _user.userEntity.findOne({
      where: {
        id: id
      }
    });
    if (!q) return player.notify("Неверный ID");
    statData = q;
  }

  const statList = ["age", "exp_age", "id_house", "apartment_id", "condo_id", "business_id", "stock_id", "car_id1", "car_id2", "car_id3", "car_id4", "car_id5", "car_id6", "car_id7", "car_id8", "fraction_id", "rank", "fraction_id2", "rank2", "jail_time", "jailed_admin", "med_time", "a_lic", "b_lic", "c_lic", "air_lic", "ship_lic", "gun_lic", "fish_lic", "taxi_lic", "skill_builder", "skill_scrap", "skill_shop", "skill_taxi", "skill_mail", "skill_mail2", "skill_photo", "skill_sunb", "skill_bgstar", "skill_bshot", "skill_three", "skill_water", "skill_bus1", "skill_bus2", "skill_bus3", "skill_gr6", "skill_trucker", "money", "money_bank"];
  const statListText = ["job", "vip_status"];
  statList.map(item => {
    let value = target ? user.get(target, item) : statData[item];
    block.newItem({
      name: `${item} (${value})`,
      onpress: () => {
        _menu.menu.input(player, "Новое значение", value, 20, "int").then(async res => {
          if (res == null) return;

          let newitem = _methods.methods.parseInt(res);

          if (target) {
            user.set(target, item, newitem);
            user.updateClientCache(target);
            user.saveAccount(target);
          } else {
            let datas = {};
            datas[item] = newitem;
            await _user.userEntity.update(_objectSpread({}, datas), {
              where: {
                id
              }
            });
          }

          _methods.methods.saveLog('adminJob', user.getId(player) + " сменил параметр " + item + " => " + value + " на " + newitem + " " + id);

          user.loginterract(player, id, "AdminJob", "Сменил параметр " + item + " => " + value + " на " + newitem);
          statUserEdit(player, id, name, lvl);
        });
      }
    });
  });
  statListText.map(item => {
    let value = target ? user.get(target, item) : statData[item];
    block.newItem({
      name: `${item} (${value})`,
      onpress: () => {
        _menu.menu.input(player, "Новое значение", value).then(async res => {
          let newitem = res;

          if (target) {
            user.set(target, item, newitem);
            user.saveAccount(target);
          } else {
            let datas = {};
            datas[item] = newitem;
            await _user.userEntity.update(_objectSpread({}, datas), {
              where: {
                id
              }
            });
          }

          _methods.methods.saveLog('adminJob', user.getId(player) + " сменил параметр " + item + " => " + value + " на " + newitem + " " + id);

          user.loginterract(player, id, "AdminJob", "Сменил параметр " + item + " => " + value + " на " + newitem);
          statUserEdit(player, id, name, lvl);
        });
      }
    });
  });
  block.newItem({
    name: "Назад",
    type: "select",
    onpress: () => workUser(player, id, name, lvl)
  });
  block.open();
}

async function userList(player, offline = false, search = "") {
  _menu.menu.close(player);

  if (offline && !user.isAdminNow(player)) return player.notify("Доступно только для администраторов");

  let block = _menu.menu.new(player, "Пользователи");

  let isAdmin = user.isAdminNow(player);

  let id = _methods.methods.parseInt(search);

  block.newItem({
    name: `~y~Закрыть`,
    onpress: () => block.close()
  });
  if (isNaN(id) || id < 0) id = 0;
  block.newItem({
    name: `Поиск игрока ${search ? `(${search})` : ''}`,
    onpress: () => {
      _menu.menu.input(player, "Введите имя или ID", search).then(res => {
        if (!res) res = "";
        userList(player, offline, res);
      });
    }
  });
  block.newItem({
    name: `~g~Игроки онлайн`
  });
  let players = mp.players.toArray();
  const myid = user.getId(player);
  players.sort((a, b) => {
    if (!user.isLogin(a)) return 1;
    if (!user.isLogin(b)) return 1;
    if (user.getId(a) == myid) return -1;
    if (user.getId(b) == myid) return -1;
    if (a.level > b.level) return -1;
    return 1;
  });
  players.forEach(target => {
    const targetid = user.getId(target);
    if (targetid == -1) return;
    let name = user.getRpName(target);

    if (search) {
      if (id != targetid && name.toLowerCase().indexOf(search.toLowerCase()) == -1) return;
    }

    let crdPos = `X: ${target.position.x.toFixed(3)}\nY: ${target.position.y.toFixed(3)}\nZ: ${target.position.z.toFixed(3)}`;
    block.newItem({
      name: (isAdmin ? `${name} | ` : '') + (user.getDating(player, targetid) ? user.getDating(player, targetid) : myid == targetid ? "Вы" : "Незнакомец") + ` (${targetid})`,
      more: "Уровень: " + user.getLevel(target),
      desc: !isAdmin ? "~g~Online" : `~g~Online\nIP: ${target.ip}\nMoney: $${user.getMoney(target)} / ${user.getBankMoney(target)}\nPing: ${target.ping.toFixed(0)}ms`,
      type: "select",
      onpress: () => workUser(player, targetid, user.getRpName(target), user.get(target, "admin_level"))
    });
  });

  if (isAdmin) {
    block.newItem({
      name: offline ? `~r~Игроки offline ~g~(Включён)~w~ (500 max)` : `~r~Игроки offline (Отключён)`,
      onpress: () => {
        userList(player, !offline, search);
      }
    });

    if (offline) {
      let usersdb = await _user.userEntity.findAll({
        where: {
          [_sequelize.Op.or]: [{
            id
          }, {
            rp_name: {
              [_sequelize.Op.like]: `%${search}%`
            }
          }]
        },
        limit: 500
      });
      usersdb.forEach(user => {
        block.newItem({
          name: user.rp_name + ` (${user.id})`,
          desc: "~r~Offline",
          type: "select",
          onpress: () => workUser(player, user.id, user.rp_name, user.admin_level)
        });
      });
    }
  }

  block.open();
}

mp.events.add("users:top", player => {
  let m = _menu.menu.new(player, "Топ игроков", "Категории");

  m.newItem({
    name: "Топ 20 активных за сутки",
    onpress: () => {
      let submenu = _menu.menu.new(player, "Список");

      let daydata = [...playerDataSQL.data];
      daydata.sort((c, b) => {
        return b.played_time_day - c.played_time_day;
      });
      let mypos = daydata.findIndex(a => a.id == user.getId(player)) + 1;

      if (mypos > 0) {
        submenu.newItem({
          name: "Ваша позиция",
          more: `${mypos} (${_methods.methods.secondsToTime(daydata[mypos - 1].played_time_day * 60)})`
        });
      }

      let res = daydata.splice(0, 20);
      res.map((itm, index) => {
        submenu.newItem({
          name: `${index + 1}) Игрок: ${itm.id}`,
          more: `(${_methods.methods.secondsToTime(itm.played_time_day * 60)})`
        });
      });
      submenu.open();
    }
  });
  m.open();
});
mp.events.add("server:users:list", player => {
  userList(player);
});
mp.events.add("setAge", player => {
  if (user.get(player, "exp_age") == 0) return player.notify("~r~Вы не можете указывать возраст");

  _menu.menu.input(player, "Укажите возраст (16 - 90)", user.get(player, "age"), 3, "int").then(age => {
    if (user.get(player, "exp_age") == 0) return player.notify("~r~Вы не можете указывать возраст");
    if (age == null) return player.notify("~r~Отмена");
    age = _methods.methods.parseInt(age);
    if (isNaN(age)) return player.notify("~r~Возраст указан не верно");
    if (age < 16 || age > 90) return player.notify("~r~Возраст должен быть от 16 до 90 лет");
    const currentage = user.get(player, "age");
    if (currentage >= 40 && user.getLevel(player) < 15) user.setLevel(player, 15), user.setExp(player, 0);else if (currentage >= 35 && user.getLevel(player) < 10) user.setLevel(player, 10), user.setExp(player, 0);else if (currentage >= 30 && user.getLevel(player) < 7) user.setLevel(player, 7), user.setExp(player, 0);else if (currentage >= 25 && user.getLevel(player) < 5) user.setLevel(player, 5), user.setExp(player, 0);else if (currentage >= 20 && user.getLevel(player) < 4) user.setLevel(player, 4), user.setExp(player, 0);
    user.set(player, "exp_age", 0);
    user.set(player, "age", age);
    user.updateCharacterFace(player);
    user.updateCharacterCloth(player);
    user.updateClientCache(player);
    player.notify("~g~Возраст указан, уровень вашего персонажа теперь: " + user.getLevel(player));
  });
});

const dropBag = player => {
  if (!mp.players.exists(player)) return;
  if (!player.bankgrabmoney) return;
  user.log(player, "Grab", `Выронил сумку с деньгами, количество: ${player.bankgrabmoney}$`);
  let existSum = true;

  const countSum = _methods.methods.parseInt(`${player.bankgrabmoney}`);

  player.bankgrabmoney = 0;
  user.checkComponents(player);

  let check = _methods.methods.createDynamicCheckpoint(new mp.Vector3(player.position.x, player.position.y, player.position.z - 1), "Нажмите ~g~Е~s~ чтобы взять сумку с деньгами", target => {
    if (!user.isGos(target) && !user.isMafia(target) && !user.isGang(target)) return target.notify(`~r~Вам эта сумка не нужна`);
    if (!existSum) return target.notify(`~r~Сумку уже подняли`);
    user.playAnimation(target, 'anim@heists@money_grab@duffel', 'loop', 9);
    user.disableAllControls(target, true);
    setTimeout(() => {
      user.disableAllControls(target, false);
      user.stopAnimation(target);
      if (!existSum) return target.notify(`~r~Сумку уже подняли`);
      if (!target.bankgrabmoney) target.bankgrabmoney = 0;
      target.bankgrabmoney += countSum;
      player.notify(`~g~Вы подняли сумку с деньгами на сумму $${_methods.methods.numberFormat(countSum)}`);
      user.setComponentVariation(target, 5, 45, 0);
      existSum = false;
      check.delete();
    }, 5000);
  }, 1.2, player.dimension, [0, 255, 50, 40]);

  setTimeout(() => {
    if (existSum && check) check.delete();
  }, 15 * 60000);
};

mp.events.add('playerQuit', (player, exitType, reason) => {
  if (!user.isLogin(player)) return;
  user.set(player, 'is_online', 0);
  const id = user.getId(player);
  if (!id || id == -1) return;
  dropBag(player);
  user.log(id, "PlayerLeave", "покинул сервер, тип выхода: " + exitType + ", причина: " + reason);

  _user.userEntity.update({
    is_online: 0
  }, {
    where: {
      id
    }
  });
});
mp.events.add('playerDeath', (player, reason, killer) => {
  dropBag(player);
  user.setDrugLevel(player, 0, 0);
  user.setDrugLevel(player, 1, 0);
  user.setDrugLevel(player, 2, 0);
  user.setDrugLevel(player, 3, 0);
  user.setDrugLevel(player, 4, 0);
  user.setDrugLevel(player, 5, 0);
  user.setDrugLevel(player, 99, 0);
  user.stopAllScreenEffects(player);

  if (killer) {
    if (user.isGos(player) && !user.isGos(killer)) {
      user.giveWanted(killer, 1, 'Убийство сотрудника гос.организации');
    }
  }

  let reasonText = ``;

  if (killer) {
    reasonText += `Убил ${user.getRpName(killer)} @user${user.getId(killer)} `;
  }

  if (reason) {
    let srcReason = _deathReasonList.default[reason.toString()];

    if (srcReason) {
      reasonText += ` (${srcReason} ${reason})`;
    }
  }

  if (!reasonText) reasonText = 'Погиб';
  if (killer) user.loginterract(player, killer, "PlayerKill", reasonText);else user.log(player, "PlayerKill", reasonText);
});
let givedAutoPayday = false;
setInterval(() => {
  if (givedAutoPayday) return;
  let d = new Date();
  let used = d.getMinutes() == 0;

  if (used) {
    givedAutoPayday = true;
    setTimeout(() => {
      givedAutoPayday = false;
    }, 120000);
    mp.players.forEach(player => {
      if (!user.isLogin(player)) return;
      if (!onlineUser.has(user.getId(player))) onlineUser.set(user.getId(player), 0);
      if (onlineUser.get(user.getId(player)) < 25) return player.notify(`~r~Вы не получили PayDay поскольку отыграли менее 25 минут`);
      if (user.isAfk(player)) return player.notify(`~r~Вы не получили PayDay поскольку стоите AFK`);
      user.payDay(player);
      onlineUser.set(user.getId(player), 0);
    });
    setTimeout(() => {
      _customchest.chest.pool.map(ch => {
        ch.grabmoney = 0;
      });
    }, 5000);

    if (d.getHours() == 0) {
      setTimeout(() => {
        _user.userEntity.update({
          played_time: 0
        }, {
          where: {}
        });

        mp.players.forEach(player => {
          player.played_time = 0;
        });
      }, 10000);
    }

    if (d.getHours() == 18) {
      let players = mp.players.toArray().filter(player => user.isLogin(player) && !user.isAfk(player) && !user.getVipStatusData(player) && player.played_time && player.played_time >= 3);
      let winner1 = (0, _methods2.randomArrayEl)(players);
      let winner2 = (0, _methods2.randomArrayEl)(players);
      let winner3 = (0, _methods2.randomArrayEl)(players);
      let winners = [winner1, winner2, winner3];
      winners.map(winner => {
        if (mp.players.exists(winner)) user.giveVipStatus(winner, "Bonus", 4);
      });

      _methods.methods.notifyToAll('~b~Результаты розыгрыша ~b~' + user.getVipStatusData("Bonus").name + ' на 4 дня\r~g~Поздравляем! победители: ~s~' + winners.map(player => {
        return user.getRpName(player);
      }).join(', '));
    }
  }
}, 10000);
setInterval(() => {
  mp.players.forEach(player => {
    if (!user.isLogin(player)) return;
    if (!onlineUser.has(user.getId(player))) onlineUser.set(user.getId(player), 0);

    if (!user.isAfk(player)) {
      onlineUser.set(user.getId(player), onlineUser.get(user.getId(player)) + 2);
      player.call("played:time", [onlineUser.get(user.getId(player)), player.played_time]);
    }
  });
}, 120000);
let playerDataSQL = new _nosql.NoSQLbase('playerData');
playerDataSQL.init().then(() => {
  setInterval(() => {
    let badID = playerDataSQL.findOne({
      where: {
        id: -1
      }
    });

    if (badID) {
      badID.played_time_day = 0;
    }

    let d = new Date();
    let newday = d.getMinutes() == 0 && d.getHours() == 0;

    if (newday) {
      let daydata = [...playerDataSQL.data];
      daydata.sort((c, b) => {
        return b.played_time_day - c.played_time_day;
      });
      let res = daydata.splice(0, _progress.dayTopReward.length);
      res.map((itm, index) => {
        user.addMoneyOffline(itm.id, _progress.dayTopReward[index], `Вы получили бонус как самый активный игрок дня (${index + 1} место)`);
      });
      playerDataSQL.clear();
    }

    mp.players.toArray().filter(player => user.isLogin(player) && !user.isAfk(player)).map(player => {
      const user_id = user.getId(player);
      let data = playerDataSQL.findOne({
        where: {
          id: user_id
        }
      });

      if (!data) {
        playerDataSQL.insert({
          id: user_id,
          played_time_day: 0
        });
      } else {
        data.played_time_day++;
      }
    });
  }, 60000);
  setInterval(() => {
    playerDataSQL.save();
  }, 120000);
});

const saveNoSQLplayerData = () => {
  playerDataSQL.save();
};

exports.saveNoSQLplayerData = saveNoSQLplayerData;
},{"./config/deathReasonList.json":"GEp2","./modules/methods":"qXSp","./modules/chat":"e1Zb","./modules/admin":"s4Xg","./enums":"ZRYf","./condo":"YoDO","./houses":"buna","./stock":"MdNj","./apartments":"qIZj","./vehicles":"pYYy","./managers/dispatcher":"bsac","./managers/weather":"uehX","./coffer":"sKID","./business":"y5vZ","./modules/data":"Edcz","./business/bank":"MvN0","./modules/menu":"Aiz7","./items":"nuVl","./inventory":"m5ow","./modules/entity/user":"xF3w","./modules/entity/banList":"hGLC","./config/quests":"CFsv","./log":"MNUA","../util/level":"MpJF","./modules/entity/warns":"NOUi","../util/fractions":"Zeqt","../util/voice":"SYvm","../util/newrage":"mgLX","../util/weapons":"kwVd","./modules/gangwar":"cDXP","./modules/moneyChest":"HIeq","./modules/events":"d3wo","../util/mafiaData":"nT9M","../util/vip":"jh2U","../util/methods":"Z5QB","./modules/entity/userNotifyEntity":"Q3Rn","./modules/entity/carsModel":"pv82","./modules/entity/logReferrerEntity":"tSli","./modules/entity/logAuthEntity":"T8aA","./modules/entity/userDatingEntity":"Soei","./modules/entity/logPlayerEntity":"JLGa","./modules/entity/promocodeTopEntity":"ixsW","./modules/entity/blackList":"UcH2","./modules/customchest":"sAsv","../util/mask":"ir2T","./modules/whitelist":"HCq8","./modules/nosql":"kYse","../util/progress.reward":"ErXz"}],"Lio2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloth = void 0;

var _enums = require("../enums");

var _methods = require("../modules/methods");

var _user = require("../user");

var _business = require("../business");

let shopList = _enums.enums.shopList;
let cloth = {
  maskShop: new mp.Vector3(-1337.255, -1277.948, 3.872962),
  findNearest: function (pos) {
    _methods.methods.debug('shop.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    shopList.forEach(function (item) {
      let shopPos = new mp.Vector3(item[3], item[4], item[5]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  loadAll: function () {
    _methods.methods.debug('barberShop.loadAll');

    _methods.methods.createBlip(cloth.maskShop, 362, 0, 0.8, 'Магазин масок');

    _methods.methods.createStaticCheckpoint(cloth.maskShop.x, cloth.maskShop.y, cloth.maskShop.z, "Нажмите ~g~E~s~ чтобы открыть меню магазина", 0.8, -1, [33, 150, 243, 100], 0.3);

    try {
      for (let i = 0; i < shopList.length; i++) {
        let pos = new mp.Vector3(shopList[i][3], shopList[i][4], shopList[i][5]);
        let shopId = shopList[i][1];
        let shopType = shopList[i][0];
        let type = shopList[i][2];

        if (type == 0) {
          switch (shopType) {
            case 0:
              _methods.methods.createBlip(pos, 73, 68, 0.8, 'Магазин одежды "Discount Store"');

              break;

            case 1:
              _methods.methods.createBlip(pos, 73, 0, 0.8, 'Магазин одежды "Suburban"');

              break;

            case 2:
              _methods.methods.createBlip(pos, 73, 21, 0.8, 'Магазин одежды "Ponsonbys"');

              break;

            case 3:
              _methods.methods.createBlip(pos, 73, 73, 0.8, 'Магазин одежды "AmmoNation"');

              break;

            case 4:
              _methods.methods.createBlip(pos, 617, 0, 0.8, 'Ювелирный магазин');

              break;

            case 5:
              _methods.methods.createBlip(pos, 73, 81, 0.8, 'Магазин одежды "Binco"');

              break;
          }
        }

        _methods.methods.createStaticCheckpoint(pos.x, pos.y, pos.z, "Нажмите ~g~E~s~ чтобы открыть меню магазина", 0.8, -1, [33, 150, 243, 100], 0.3);
      }
    } catch (e) {
      console.log(e);
      throw e;
    }
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;

      if (_methods.methods.distanceToPos(cloth.maskShop, playerPos) < 2) {
        player.call('client:menuList:showShopMaskMenu', [74]);
        return;
      }

      for (let i = 0; i < shopList.length; i++) {
        if (_methods.methods.distanceToPos(playerPos, new mp.Vector3(shopList[i][3], shopList[i][4], shopList[i][5])) < 2.0) {
          player.call('client:menuList:showShopClothMenu', [shopList[i][1], shopList[i][0], shopList[i][2]]);
          return;
        }
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  changeProp: function (player, body, clothId, color) {
    try {
      _user.user.setProp(player, body, clothId, color);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  buyProp: function (player, price, body, clothId, color, shopId, isFree) {
    _methods.methods.debug('barberShop.buyProp');

    if (price < 1) return;
    if (!_user.user.isLogin(player)) return;

    if (_user.user.getCashMoney(player) < price && !isFree) {
      player.notify('~r~У Вас недостаточно денег');

      _user.user.updateCharacterCloth(player);

      return;
    }

    switch (body) {
      case 0:
        _user.user.set(player, 'hat', clothId);

        _user.user.set(player, 'hat_color', color);

        break;

      case 1:
        _user.user.set(player, 'glasses', clothId);

        _user.user.set(player, 'glasses_color', color);

        break;

      case 2:
        _user.user.set(player, 'ear', clothId);

        _user.user.set(player, 'ear_color', color);

        break;

      case 6:
        _user.user.set(player, 'watch', clothId);

        _user.user.set(player, 'watch_color', color);

        break;

      case 7:
        _user.user.set(player, 'bracelet', clothId);

        _user.user.set(player, 'bracelet_color', color);

        break;
    }

    if (!isFree) {
      _user.user.removeCashMoney(player, price);

      _business.business.addMoney(shopId, price);

      player.notify("~g~Вы купили аксессуар");

      _user.user.log(player, "PlayerBuy", `Покупка аксессуара за ${price}`);
    }

    _user.user.updateCharacterCloth(player);

    _user.user.setProp(player, body, clothId, color);
  },
  change: function (player, body, cloth, color, torso, torsoColor, parachute, parachuteColor) {
    if (body == 11) {
      if (torso == -1) torso = 0;
      if (torsoColor == -1) torsoColor = 0;
      if (parachuteColor == -1) parachuteColor = 240;
      if (parachuteColor != 240) parachuteColor++;

      _user.user.setComponentVariation(player, 3, torso, torsoColor);

      _user.user.setComponentVariation(player, 8, parachute, parachuteColor);
    }

    _user.user.setComponentVariation(player, body, cloth, color);
  },
  buy: function (player, price, body, cloth, color, torso, torsoColor, parachute, parachuteColor, shopId = 0, isFree = false) {
    _methods.methods.debug('barberShop.buy', JSON.stringify({
      price,
      body,
      cloth,
      color,
      torso,
      torsoColor,
      parachute,
      parachuteColor,
      shopId,
      isFree
    }));

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getCashMoney(player) < price && !isFree) {
      player.notify('~r~У Вас недостаточно денег');

      _user.user.updateCharacterCloth(player);

      return;
    }

    if (price < 1) return;

    switch (body) {
      case 1:
        _user.user.set(player, 'mask', cloth);

        _user.user.set(player, 'mask_color', color);

        break;

      case 4:
        _user.user.set(player, 'leg', cloth);

        _user.user.set(player, 'leg_color', color);

        break;

      case 5:
        _user.user.set(player, 'hand', cloth);

        _user.user.set(player, 'hand_color', color);

        break;

      case 6:
        _user.user.set(player, 'foot', cloth);

        _user.user.set(player, 'foot_color', color);

        break;

      case 7:
        _user.user.set(player, 'accessorie', cloth);

        _user.user.set(player, 'accessorie_color', color);

        break;

      case 10:
        _user.user.set(player, 'decal', cloth);

        _user.user.set(player, 'decal_color', color);

        break;

      case 11:
        if (torso == -1) torso = 0;
        if (torsoColor == -1) torsoColor = 0;
        if (parachuteColor == -1) parachuteColor = 240;
        if (parachuteColor != 240) parachuteColor++;

        _user.user.set(player, 'body', cloth);

        _user.user.set(player, 'body_color', color);

        _user.user.set(player, 'torso', torso);

        _user.user.set(player, 'torso_color', torsoColor);

        _user.user.setComponentVariation(player, 3, torso, torsoColor);

        _user.user.set(player, 'parachute', parachute);

        _user.user.set(player, 'parachute_color', parachuteColor);

        _user.user.set(player, 'tprint_c', '');

        _user.user.set(player, 'tprint_o', '');

        _user.user.setComponentVariation(player, 8, parachute, parachuteColor);

        break;
    }

    if (!isFree) {
      _user.user.removeCashMoney(player, price);

      _business.business.addMoney(shopId, price);

      player.notify("~g~Вы купили одежду");

      _user.user.completeQuest(player, "Будь модным", true);

      _user.user.log(player, "PlayerBuy", `Покупка одежды за ${price}`);
    }

    _user.user.updateCharacterCloth(player);

    _user.user.setComponentVariation(player, body, cloth, color);
  },
  changeMask: function (player, clothId, color) {
    _methods.methods.debug('barberShop.buy');

    if (!_user.user.isLogin(player)) return;

    _user.user.setComponentVariation(player, 1, clothId, color);
  },
  buyMask: function (player, price, clothId, color, shopId) {
    _methods.methods.debug('barberShop.buy');

    if (!_user.user.isLogin(player)) return;

    if (price > 10) {
      if (_user.user.getCashMoney(player) < price) {
        player.notify('~r~У Вас недостаточно денег');

        _user.user.updateCharacterCloth(player);

        return;
      }
    }

    if (price < 1) return;

    _user.user.set(player, 'mask', clothId);

    _user.user.set(player, 'mask_color', color);

    _user.user.updateCharacterCloth(player);

    _user.user.setComponentVariation(player, 1, clothId, color);

    if (shopId == 0) return;

    _user.user.removeCashMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify("~g~Вы купили маску");
  }
};
exports.cloth = cloth;
},{"../enums":"ZRYf","../modules/methods":"qXSp","../user":"QE3B","../business":"y5vZ"}],"aeoE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lotoList = exports.itemLoto = void 0;
const itemLoto = 277;
exports.itemLoto = itemLoto;
const lotoList = [{
  prize: 10000,
  count: 100,
  cost: 150
}, {
  prize: 100000,
  count: 150,
  cost: 1000
}, {
  prize: 1000000,
  count: 1000,
  cost: 1500
}];
exports.lotoList = lotoList;
},{}],"e2yF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shop = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

var _user = require("../user");

var _items = require("../items");

var _inventory = require("../inventory");

var _pickups = require("../modules/pickups");

var _menu = require("../modules/menu");

var _loto = require("../../util/loto");

mp.events.add('openLoto', (player, shopId) => {
  shop.lotoMenu(player, shopId);
});
let shop = {
  lotoMenu: (player, shopId, addedNalog = 0) => {
    let m = _menu.menu.new(player, "American Loto");

    if (player.spamProtect) return;

    let itemsLoto = _inventory.inventory.allItems().filter(item => item.item_id == _loto.itemLoto && item.key_id == 0);

    _loto.lotoList.map(loto => {
      m.newItem({
        name: `Розыгрыш на ~g~$${_methods.methods.numberFormat(loto.prize)}`,
        more: `$${_methods.methods.numberFormat(loto.cost)}`,
        desc: `Осталось билетов: ${loto.count - itemsLoto.filter(item => item.item_id == _loto.itemLoto && item.prefix == loto.prize && item.key_id == 0).length}`,
        onpress: () => {
          m.close();
          player.spamProtect = true;
          setTimeout(() => {
            if (mp.players.exists(player)) player.spamProtect = false;
          }, 5000);
          if (_user.user.getCashMoney(player) < loto.cost) return player.notify("~r~У вас недостаточно средств для покупки билета");
          if (loto.count - itemsLoto.filter(item => item.item_id == _loto.itemLoto && item.prefix == loto.prize && item.key_id == 0).length <= 0) return player.notify("~r~Билеты закончились, ожидайте розыгрыша");

          if (_inventory.inventory.currentAmount(1, _user.user.getId(player)) + _items.items.getItemWeightById(_loto.itemLoto) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
            player.notify('~r~В инвентаре нет места');
            return;
          }

          _user.user.removeCashMoney(player, loto.cost);

          let price = loto.cost;
          let toShop = 10;
          let toBusiness = 40;

          if (price == 150) {
            toShop = 10;
            toBusiness = 40;
          } else if (price == 1000) {
            toShop = 50;
            toBusiness = 150;
          } else if (price == 1500) {
            toShop = 50;
            toBusiness = 450;
          } else price = 150;

          _inventory.inventory.addItem(player, _loto.itemLoto, 1, 1, _user.user.getId(player), 1, loto.prize, -1, 0);

          player.notify('~g~Вы купили лотерейный билет по цене: ~s~$' + price);

          _business.business.addMoney(167, toBusiness);

          if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);
        }
      });
    });

    m.newItem({
      name: "~y~Обменять все билетики на выигрыш",
      onpress: () => {
        m.close();
        if (player.spamProtect) return;
        player.spamProtect = true;
        setTimeout(() => {
          if (mp.players.exists(player)) player.spamProtect = false;
        }, 5000);

        let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 277 && item.key_id == 1);

        if (rows.length > 0) {
          rows.forEach(item => {
            _user.user.addCashMoney(player, item.prefix);

            _inventory.inventory.deleteItem(item.id);

            _methods.methods.notifyWithPictureToPlayer(player, 'Поздравляем!', `#${item['number']}`, `~g~Вы обменяли билетик: ~s~$${_methods.methods.numberFormat(item['prefix'])}`, 'WEB_PILLPHARM');
          });
        } else {
          player.notify('~r~У Вас нет билетиков');
        }
      }
    });
    m.newItem({
      name: "~y~Сдать все билетики",
      onpress: () => {
        m.close();
        if (player.spamProtect) return;
        player.spamProtect = true;
        setTimeout(() => {
          if (mp.players.exists(player)) player.spamProtect = false;
        }, 5000);

        let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 277 && item.key_id == -1);

        rows.map(item => {
          _inventory.inventory.deleteItem(item.id);
        });

        _methods.methods.notifyWithPictureToPlayer(player, 'American Loto', `Спасибо!`, `~g~Вы сдали все просроченные билетики`, 'WEB_PILLPHARM');
      }
    });
    m.open();
  },
  digitalDen: new mp.Vector3(-657.087, -857.313, 23.490),
  digitalDenMirror: new mp.Vector3(1133.0963, -472.6430, 65.7651),
  apteka: new mp.Vector3(318.2640, -1076.7376, 28.4785),
  apteka2: new mp.Vector3(92.8906, -229.4265, 53.6636),
  apteka3: new mp.Vector3(301.4576, -733.25683, 28.37248),
  list: [[26.213, -1345.442, 29.49702, 3], [-1223.059, -906.7239, 12.32635, 4], [-1487.533, -379.3019, 40.16339, 5], [1135.979, -982.2205, 46.4158, 6], [1699.741, 4924.002, 42.06367, 7], [374.3559, 327.7817, 103.5664, 8], [-3241.895, 1001.701, 12.83071, 9], [-3039.184, 586.3903, 7.90893, 11], [-2968.295, 390.9566, 15.04331, 10], [547.8511, 2669.281, 42.1565, 50], [1165.314, 2709.109, 38.15772, 51], [1960.845, 3741.882, 32.34375, 84], [1729.792, 6414.979, 35.03723, 85]],
  loadAll: function () {
    _methods.methods.debug('shop.loadAll');

    shop.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2] - 1);

      _methods.methods.createBlip(shopPos, 52, 0, 0.8, 'Магазин 24/7');

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });

    _methods.methods.createBlip(_pickups.pickups.PrintShopPos, 72, 0, 0.8, 'Магазин принтов на одежду');

    _methods.methods.createBlip(shop.digitalDen, 521, 0, 0.8, 'Магазин электроники Digital Den');

    _methods.methods.createStaticCheckpoint(shop.digitalDen.x, shop.digitalDen.y, shop.digitalDen.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _methods.methods.createBlip(shop.digitalDenMirror, 521, 0, 0.8, 'Магазин электроники Digital Den');

    _methods.methods.createStaticCheckpoint(shop.digitalDenMirror.x, shop.digitalDenMirror.y, shop.digitalDenMirror.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _methods.methods.createBlip(shop.apteka, 153, 69, 0.8, 'Аптека');

    _methods.methods.createStaticCheckpoint(shop.apteka.x, shop.apteka.y, shop.apteka.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _methods.methods.createBlip(shop.apteka2, 153, 69, 0.8, 'Аптека');

    _methods.methods.createStaticCheckpoint(shop.apteka2.x, shop.apteka2.y, shop.apteka2.z, "Нажмите ~g~Е~s~ чтобы открыть меню");

    _methods.methods.createBlip(shop.apteka3, 153, 69, 0.8, 'Аптека');

    _methods.methods.createStaticCheckpoint(shop.apteka3.x, shop.apteka3.y, shop.apteka3.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    shop.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = shop.getInRadius(playerPos, 2);

      if (shopId == -1) {
        if (_methods.methods.distanceToPos(playerPos, shop.digitalDen) < 2) player.call('client:menuList:showElectroShopMenu', [120]);else if (_methods.methods.distanceToPos(playerPos, shop.digitalDenMirror) < 2) player.call('client:menuList:showElectroShopMenu', [126]);else if (_methods.methods.distanceToPos(playerPos, shop.apteka) < 2) player.call('client:menuList:showAptekaShopMenu', [124]);else if (_methods.methods.distanceToPos(playerPos, shop.apteka2) < 2) player.call('client:menuList:showAptekaShopMenu', [154]);else if (_methods.methods.distanceToPos(playerPos, shop.apteka3) < 2) player.call('client:menuList:showAptekaShopMenu', [158]);
        return;
      }

      player.call('client:menuList:showShopMenu', [shopId, _business.business.getPrice(shopId)]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('shop.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    shop.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  buy: function (player, itemId, price, shopId, addedNalog = 0) {
    _methods.methods.debug('shop.buy');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    if ([_inventory.inventory.types.BagTransfer, _inventory.inventory.types.Bag, _inventory.inventory.types.BagFull, _inventory.inventory.types.BagSmall].includes(itemId)) {
      if (_user.user.hasBag(player)) return player.notify(`~r~У вас уже есть сумка в инвентаре`);else {
        setTimeout(() => {
          if (mp.players.exists(player)) {
            _user.user.checkComponents(player);
          }
        }, 2000);
      }
    }

    switch (itemId) {
      case 221:
        if (!_user.user.get(player, "allow_antipohmel")) return player.notify("~r~У вас нет рецепта на Антипохмелин");

        _inventory.inventory.addItem(player, 221, 10, 1, _user.user.getId(player), 1);

        _user.user.removeMoney(player, price);

        _user.user.set(player, 'allow_antipohmel', 0);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);
        break;

      case 8:
        if (_user.user.get(player, 'phone_code') > 0 && _user.user.get(player, 'phone') > 0) {
          player.notify('~r~Для начала снимите с экипировки телефон');
          return;
        }

        _user.user.set(player, 'phone_code', 555);

        _user.user.set(player, 'phone', _methods.methods.getRandomInt(10000, 999999));

        player.notify('~g~Вы купили телефон по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);
        break;

      case 10008:
        if (_user.user.get(player, 'phone_code') > 0 && _user.user.get(player, 'phone') > 0) {
          player.notify('~r~Для начала снимите с экипировки телефон');
          return;
        }

        _user.user.set(player, 'phone_code', 777);

        _user.user.set(player, 'phone', _methods.methods.getRandomInt(10000, 999999));

        player.notify('~g~Вы купили телефон по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);

        _business.business.addMoney(92, price / 2);

        break;

      case 20008:
        if (_user.user.get(player, 'phone_code') > 0 && _user.user.get(player, 'phone') > 0) {
          player.notify('~r~Для начала снимите с экипировки телефон');
          return;
        }

        _user.user.set(player, 'phone_code', 111);

        _user.user.set(player, 'phone', _methods.methods.getRandomInt(10000, 999999));

        player.notify('~g~Вы купили телефон по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, (price - price / 100 * addedNalog) / 2);else _business.business.addMoney(shopId, price / 2);

        _business.business.addMoney(92, price / 2);

        break;

      case 2820000:
        if (_user.user.get(player, 'tablet_equip') > 0) {
          player.notify('~r~Для начала снимите с экипировки планшет');
          return;
        }

        _user.user.set(player, 'tablet_equip', 1);

        player.notify('~g~Вы купили планшет по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, (price - price / 100 * addedNalog) / 2);else _business.business.addMoney(shopId, price / 2);

        _business.business.addMoney(92, price / 2);

        break;

      case 7:
        if (_user.user.get(player, 'item_clock')) {
          player.notify('~r~Для начала снимите с экипировки часы');
          return;
        }

        player.notify('~g~Вы купили часы по цене: ~s~$' + price);

        _user.user.set(player, 'item_clock', true);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);
        break;

      case 47:
        if (_user.user.get(player, 'is_buy_walkietalkie')) {
          player.notify('~r~У Вас уже есть рация');
          return;
        }

        player.notify('~g~Вы купили рацию по цене: ~s~$' + price);

        _user.user.set(player, 'is_buy_walkietalkie', true);

        _user.user.set(player, 'walkietalkie_num', "70");

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);
        break;

      case 277:
        {
          let amount = _inventory.inventory.getInvAmount(player, _user.user.getId(player), 1);

          if (amount + _items.items.getItemAmountById(itemId) > 55000) {
            player.notify('~r~В инвентаре нет места');
            return;
          }

          let toShop = 10;
          let toBusiness = 40;
          let countItems = 10000;

          if (price == 150) {
            toShop = 10;
            toBusiness = 40;
            countItems = 10000;
          } else if (price == 1000) {
            toShop = 50;
            toBusiness = 150;
            countItems = 100000;
          } else if (price == 1500) {
            toShop = 50;
            toBusiness = 450;
            countItems = 1000000;
          } else price = 150;

          _inventory.inventory.addItem(player, 277, 1, 1, _user.user.getId(player), 1, countItems, _methods.methods.getRandomInt(100000, 999999), 0);

          player.notify('~g~Вы купили лотерейный билет по цене: ~s~$' + price);

          _user.user.removeMoney(player, price);

          _business.business.addMoney(167, toBusiness);

          if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);

          _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

          break;
        }

      default:
        let amount = _inventory.inventory.getInvAmount(player, _user.user.getId(player), 1);

        if (amount + _items.items.getItemAmountById(itemId) > 55000) {
          player.notify('~r~В инвентаре нет места');
          return;
        }

        if (itemId == 155 && !_user.user.get(player, 'allow_marg')) {
          player.notify('~r~У Вас нет рецепта');
          return;
        }

        if (_inventory.inventory.currentAmount(1, _user.user.getId(player)) + _items.items.getItemAmountById(itemId) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
          player.notify('~r~Инвентарь заполнен');
          return;
        }

        if (itemId == 155) {
          _user.user.set(player, 'allow_marg', false);
        }

        _inventory.inventory.addItem(player, itemId, 1, 1, _user.user.getId(player), itemId == 155 || itemId == 275 ? 10 : 1, -1, -1, -1);

        player.notify('~g~Вы купили товар по цене: ~s~$' + price);

        _user.user.log(player, "PlayerBuy", `Покупка в магазине за $${price} ${_items.items.getItemNameById(itemId)}`);

        _user.user.removeMoney(player, price);

        if (addedNalog) _business.business.addMoney(shopId, price - price / 100 * addedNalog);else _business.business.addMoney(shopId, price);

        _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

        break;
    }
  }
};
exports.shop = shop;
},{"../modules/methods":"qXSp","../business":"y5vZ","../user":"QE3B","../items":"nuVl","../inventory":"m5ow","../modules/pickups":"xTdX","../modules/menu":"Aiz7","../../util/loto":"aeoE"}],"bktO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.barberShop = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

let barberShop = {
  list: [[138.7087, -1705.711, 28.29162, 109], [1214.091, -472.9952, 65.208, 109], [-276.4055, 6226.398, 30.69552, 109], [-1282.688, -1117.432, 5.990113, 110], [1931.844, 3730.305, 31.84443, 111], [-33.34319, -154.1892, 56.07654, 48], [-813.5332, -183.2378, 36.5689, 112]],
  loadAll: function () {
    _methods.methods.debug('barberShop.loadAll');

    barberShop.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(shopPos, 71, 0, 0.8, 'Парикмахерская');

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    barberShop.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = barberShop.getInRadius(playerPos, 2);
      if (shopId == -1) return;
      if (_user.user.hasAnyWeapon(player)) return player.notify(`~r~Снимите оружие прежде чем посетить барбершоп`);
      player.call('client:menuList:showBarberShopMenu', [shopId]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('barberShop.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    barberShop.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  }
};
exports.barberShop = barberShop;
},{"../modules/methods":"qXSp","../user":"QE3B"}],"uLEY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.licenseCenter = void 0;

var _methods = require("../modules/methods");

var _pickups = require("../modules/pickups");

var _coffer = require("../coffer");

var _user = require("../user");

let licenseCenter = {
  checkPosForOpenMenu: function (player) {
    let playerPos = player.position;

    if (_methods.methods.distanceToPos(playerPos, _pickups.pickups.LicBuyPos) < 2.0) {
      player.call('client:menuList:showLicBuyMenu');
    }
  },
  buy: function (player, type, price) {
    _methods.methods.debug('licenseCenter.buy');

    if (!_user.user.isLogin(player)) return;
    if (price < 1) return;

    try {
      if (_user.user.get(player, 'reg_status') == 0) {
        player.notify('~r~У Вас нет регистрации');
        player.notify('~r~(M - GPS - Важные места - Здание правительства)');
        return;
      }

      if (!_user.user.get(player, type)) {
        if (_user.user.getMoney(player) < price) {
          player.notify("~r~У Вас недостаточно средств");
          return;
        }

        _user.user.set(player, type, true);

        _user.user.removeMoney(player, price);

        _coffer.coffer.addMoney(price);

        player.notify("~g~Поздравляем с покупкой лицензии");
        return;
      }

      player.notify("~r~У вас уже есть данная лицензия");
    } catch (e) {
      _methods.methods.debug('Exception: licenseCenter.buy');

      _methods.methods.debug(e);
    }
  }
};
exports.licenseCenter = licenseCenter;
},{"../modules/methods":"qXSp","../modules/pickups":"xTdX","../coffer":"sKID","../user":"QE3B"}],"G8F2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rent = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _newrage = require("../../util/newrage");

let rent = {
  listBike: [[-1012.002, -2682.319, 12.98185, 15], [56.84695, -1332.3, 28.31281, 16], [318.2011, 133.5345, 102.5149, 17], [-511.15, -290.38, 34.41, 18], [-3239.305, 978.7662, 11.71953, 19], [-264.9207, 6285.907, 30.47458, 20], [1681.711, 4849.298, 41.10908, 21], [1868.006, 3684.482, 32.73838, 22], [1932.747, 2624.953, 45.1698, 23], [297.4761, -602.786, 42.30347, 24], [1128.115, -504.1843, 63.19245, 148], [-53.82885, -914.3015, 28.43705, 149], [-873.4641, -811.7601, 18.29254, 150], [-824.2698, -116.8545, 36.58223, 151], [-734.49, -1299.63, 4.05, 152], [287.8639, 2594.688, 43.43363, 153], [387.4266, -948.5322, 28.42553, 157]],
  loadAll: function () {
    _methods.methods.debug('rent.loadAll');

    rent.listBike.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(shopPos, 226, 33, 0.7, 'Пункт аренды вело/мото');

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, 'Нажмите ~g~Е~s~ чтобы открыть меню', 0.8, -1, [33, 150, 243, 100], 0.3);
    });
  },
  getBikeInRadius: function (pos, radius = 2) {
    let shopId = -1;
    rent.listBike.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenBikeMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = rent.getBikeInRadius(playerPos, 2);
      if (shopId == -1) return;
      player.call('client:menuList:showRentBikeMenu', [shopId, _business.business.getPrice(shopId)]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('rent.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    rent.listBike.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  buy: function (player, hash, spawnPoint, price, shopId) {
    _methods.methods.debug('rent.buy');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    let className = _methods.methods.getVehicleInfo(hash).class_name;

    const find = mp.vehicles.toArray().find(veh => veh.getVariable('rentOwner') == _user.user.getId(player));

    if (find) {
      player.notify('~y~Вы уже арендовали ТС, закончите аренду ~b~(/unrent)');
      return;
    }

    switch (className) {
      case 'Planes':
      case 'Helicopters':
        if (!_user.user.get(player, 'air_lic')) {
          player.notify('~r~У Вас нет лицензии пилота');
          return;
        }

        break;

      case 'Boats':
        if (!_user.user.get(player, 'ship_lic')) {
          player.notify('~r~У Вас нет лицензии на водный транспорт');
          return;
        }

        break;

      case 'Commercials':
      case 'Industrial':
        if (!_user.user.get(player, 'c_lic')) {
          player.notify('~r~У Вас нет лицензии категории C');
          return;
        }

        break;

      case 'Compacts':
      case 'Coupes':
      case 'Muscle':
      case 'Off-Road':
      case 'Sedans':
      case 'Sports':
      case 'Sports Classics':
      case 'Super':
      case 'SUVs':
      case 'Utility':
      case 'Vans':
        if (!_user.user.get(player, 'b_lic')) {
          player.notify('~r~У Вас нет лицензии категории B');
          return;
        }

        break;

      case 'Motorcycles':
        if (hash != -1842748181 && !_user.user.get(player, 'a_lic')) {
          player.notify('~r~У Вас нет лицензии категории А. Вы можете взять Faggio');
          return;
        }

        break;
    }

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы арендовали транспорт');
    player.notify('~g~Для того чтобы его открыть, нажмите ~s~L');

    _vehicles.vehicles.spawnRentCar(player, spawnPoint, 0, hash).then(veh => {
      if (veh) player.putIntoVehicle(veh, _newrage.RAGE_BETA ? 0 : -1);
    });
  }
};
exports.rent = rent;
},{"../modules/methods":"qXSp","../business":"y5vZ","../user":"QE3B","../vehicles":"pYYy","../../util/newrage":"mgLX"}],"Y0m3":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gun = void 0;

var _business = require("../business");

var _methods = require("../modules/methods");

var _user = require("../user");

var _items = require("../items");

var _inventory = require("../inventory");

let gun = {
  list: [[22.08832, -1106.986, 29.79703, 75], [252.17, -50.08245, 69.94106, 76], [842.2239, -1033.294, 28.19486, 77], [-661.947, -935.6796, 21.82924, 78], [-1305.899, -394.5485, 36.69577, 79], [809.9118, -2157.209, 28.61901, 102], [2567.651, 294.4759, 107.7349, 103], [-3171.98, 1087.908, 19.83874, 104], [-1117.679, 2698.744, 17.55415, 105], [1693.555, 3759.9, 33.70533, 106], [-330.36, 6083.885, 30.45477, 107]],
  loadAll: function () {
    _methods.methods.debug('gun.loadAll');

    gun.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2] - 1);

      _methods.methods.createBlip(shopPos, 110, 0, 0.8);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    gun.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = gun.getInRadius(playerPos, 2);
      if (shopId == -1) return;
      player.call('client:menuList:showGunShopMenu', [shopId, _business.business.getPrice(shopId)]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('gun.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    gun.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  buy: function (player, itemId, price, count, shopId) {
    _methods.methods.debug('gun.buy');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    if (_inventory.inventory.currentAmount(1, _user.user.getId(player)) + _items.items.getItemAmountById(itemId) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
      player.notify('~r~Инвентарь заполнен');
      return;
    }

    switch (itemId) {
      case 27:
      case 28:
      case 29:
      case 30:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
        _inventory.inventory.addItem(player, itemId, 1, 1, _user.user.getId(player), count, -1, -1, -1);

        player.notify('~g~Вы купили товар по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        _business.business.addMoney(shopId, price);

        _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

        _user.user.log(player, "PlayerBuy", `Покупка в оружейном магазине за $${price} ${_items.items.getItemNameById(itemId)}`);

        break;

      default:
        _inventory.inventory.addItem(player, itemId, 1, 1, _user.user.getId(player), 1, -1, -1, -1);

        player.notify('~g~Вы купили товар по цене: ~s~$' + price);

        _user.user.removeMoney(player, price);

        _business.business.addMoney(shopId, price);

        _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

        _user.user.log(player, "PlayerBuy", `Покупка в оружейном магазине за ${price} ${_items.items.getItemNameById(itemId)}`);

        break;
    }
  }
};
exports.gun = gun;
},{"../business":"y5vZ","../modules/methods":"qXSp","../user":"QE3B","../items":"nuVl","../inventory":"m5ow"}],"C62B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lsc = void 0;

var _vehicles = require("../vehicles");

var _user = require("../user");

var _business = require("../business");

var _methods = require("../modules/methods");

var _carsModel = require("../modules/entity/carsModel");

var _inventory = require("../inventory");

let lsc = {
  carPos: [[-1159.827, -2015.182, 12.16598, 338.3167], [-330.8568, -137.6985, 38.00612, 95.85743], [732.1998, -1088.71, 21.15658, 89.10553], [-222.6972, -1329.915, 29.87796, 269.8108], [1174.876, 2640.67, 36.7454, 0.5306945], [110.3291, 6626.977, 30.7735, 223.695], [-147.4434, -599.0691, 166.0058, 315.3235], [481.2153, -1317.698, 28.09073, 296.715]],
  carColorPos: [[-1167.36, -2013.42, 11.63059, 136.2973], [-327.3558, -144.5778, 38.04641, 250.0263], [735.6607, -1072.729, 21.2193, 179.3472], [-206.2765, -1323.342, 29.87665, 2.203119], [1182.65, 2638.49, 36.78132, 357.8441], [103.6963, 6622.596, 30.81484, 224.0517], [-151.0918, -594.4427, 166.0052, 308.8605], [478.4267, -1308.524, 28.01912, 27.1145]],
  camColorPos: [[-1167.856, -2016.76, 13.53096], [-323.593, -143.7437, 39.26034], [733.7505, -1069.566, 22.43295], [-209.2587, -1319.221, 31.09041], [1184.5, 2635.391, 38.0], [100.3815, 6623.296, 32.12886], [-146.051, -593.9824, 167.5002], [475.9341, -1307.055, 29.43324]],
  list: [[-1148.878, -2000.123, 12.18026, 14], [-347.0815, -133.3432, 38.00966, 54], [737.0179, -1082.413, 21.11101, 55], [-207.0201, -1331.493, 33.89437, 56], [1187.764, 2639.15, 37.43521, 57], [101.0262, 6618.267, 31.43771, 71], [-146.2072, -584.2731, 166.0002, 121], [472.2666, -1310.529, 28.22178, 123]],
  loadAll: function () {
    _methods.methods.debug('lsc.loadAll');

    lsc.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(shopPos, 446, 0, 0.8, 'Автомастерская');

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
    lsc.carColorPos.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "~b~Место для перекраски ТС", 4, -1, [33, 150, 243, 100], 0.3);
    });
    lsc.carPos.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "~b~Место тюнинга ТС", 4, -1, [33, 150, 243, 100], 0.3);
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    lsc.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = -1;
      lsc.list.forEach(function (item, idx) {
        let shopPos = new mp.Vector3(item[0], item[1], item[2]);

        if (_methods.methods.distanceToPos(playerPos, shopPos) < 2) {
          shopId = _methods.methods.parseInt(item[3]);

          let vehicleList1 = _methods.methods.getListOfVehicleNumberInRadius(new mp.Vector3(lsc.carPos[idx][0], lsc.carPos[idx][1], lsc.carPos[idx][2]), 4);

          let vehicleList2 = _methods.methods.getListOfVehicleNumberInRadius(new mp.Vector3(lsc.carColorPos[idx][0], lsc.carColorPos[idx][1], lsc.carColorPos[idx][2]), 4);

          try {
            player.call('client:menuList:showLscMenu', [shopId, _business.business.getPrice(shopId), idx, vehicleList1, vehicleList2]);
          } catch (e) {
            _methods.methods.debug(e);
          }
        }
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('lsc.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    lsc.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  buy: function (player, number, price, shopId, action, newNumber) {
    _methods.methods.debug('lsc.buy');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    switch (action) {
      case 'setNeon':
        {
          if (veh.getVariable('id_user') < 1) {
            player.notify('~r~Транспорт должен быть личный');
            return;
          }

          if (veh.getVariable('id_user') != _user.user.getId(player)) {
            player.notify('~r~Это должен быть ваш транспорт');
            return;
          }

          if (_vehicles.vehicles.get(veh.getVariable('container'), 'neon_type') > 1) {
            player.notify('~r~На транспорте уже установлен неон');
            return;
          }

          let vInfo = _methods.methods.getVehicleInfo(veh.model);

          if (vInfo && vInfo.class_name == "Commercials") {
            player.notify('~r~На данный транспорт нельзя устанавливать неон');
            return;
          }

          _vehicles.vehicles.set(veh.getVariable('container'), 'neon_type', 2);

          _vehicles.vehicles.set(veh.getVariable('container'), 'neon_r', 255);

          _vehicles.vehicles.set(veh.getVariable('container'), 'neon_g', 255);

          _vehicles.vehicles.set(veh.getVariable('container'), 'neon_b', 255);

          _vehicles.vehicles.neonStatus(player, veh);

          _user.user.removeMoney(player, price);

          _business.business.addMoney(shopId, price);

          player.notify('~g~Вы установили неон');

          _user.user.saveAccount(player);

          _vehicles.vehicles.save(veh.getVariable('container'));

          break;
        }

      case 'repair':
        {
          veh.repair();

          _user.user.removeMoney(player, price);

          _business.business.addMoney(shopId, price);

          player.notify('~g~Вы отремонтировали трансопрт');
          break;
        }

      case 'setNumber':
        {
          if (veh.getVariable('id_user') < 1) {
            player.notify('~r~Транспорт должен быть личный');
            return;
          }

          if (veh.getVariable('id_user') != _user.user.getId(player)) {
            player.notify('~r~Это должен быть ваш транспорт');
            return;
          }

          if (newNumber.length < 1) {
            player.notify('~r~Минимум 1 символ');
            return;
          }

          if (!lsc.checkValidNumber(newNumber)) {
            player.notify('~r~Вы не правильно ввели номер');
            player.notify('~r~Только цифры (0-9) и буквы на англ. (A-Z)');
            return;
          }

          if (newNumber.length == 1 && _user.user.getMoney(player) < 1000000) {
            player.notify('~r~Номер из 1 символа стоит $1.000.000');
            return;
          }

          if (newNumber.length == 2 && _user.user.getMoney(player) < 500000) {
            player.notify('~r~Номер из 2 символов стоит $500.000');
            return;
          }

          if (newNumber.length == 3 && _user.user.getMoney(player) < 250000) {
            player.notify('~r~Номер из 3 символов стоит $250.000');
            return;
          }

          if (newNumber.length == 4 && _user.user.getMoney(player) < 100000) {
            player.notify('~r~Номер из 4 символов стоит $100.000');
            return;
          }

          _carsModel.carsEntity.findAll({
            where: {
              number: newNumber
            },
            limit: 1
          }).then(rows => {
            if (rows.length === 0) {
              let valid = true;
              mp.vehicles.forEach(function (v) {
                if (!_vehicles.vehicles.exists(v)) return;
                if (v.numberPlate == newNumber) valid = false;
              });

              if (valid) {
                _vehicles.vehicles.set(veh.getVariable('container'), 'number', newNumber);

                veh.numberPlate = newNumber;

                if (newNumber.length == 1) {
                  _user.user.removeMoney(player, 1000000);

                  _business.business.addMoney(shopId, 500000);
                } else if (newNumber.length == 2) {
                  _user.user.removeMoney(player, 500000);

                  _business.business.addMoney(shopId, 200000);
                } else if (newNumber.length == 3) {
                  _user.user.removeMoney(player, 250000);

                  _business.business.addMoney(shopId, 100000);
                } else if (newNumber.length == 4) {
                  _user.user.removeMoney(player, 100000);

                  _business.business.addMoney(shopId, 50000);
                } else {
                  _user.user.removeMoney(player, price);

                  _business.business.addMoney(shopId, price);
                }

                _user.user.saveAccount(player);

                _vehicles.vehicles.save(veh.getVariable('container'));

                _inventory.inventory.allItems().filter(itm => itm.owner_id == mp.joaat(veh.numberPlate) && (itm.owner_type == 2 || itm.owner_type == 3 || itm.owner_type == 4)).map(q => {
                  _inventory.inventory.updateItemOwnerSystem(q.id, q.owner_type, mp.joaat(newNumber));
                });

                player.notify('~g~Вы изменили номер');
                return;
              }
            }

            player.notify('~r~Номер уже занят');
          });

          break;
        }
    }
  },
  showTun: function (player, vehNumber, modType, idx) {
    _methods.methods.debug('lsc.showTun');

    let veh = _vehicles.vehicles.findVehicleByNumber(vehNumber);

    if (!_vehicles.vehicles.exists(veh)) return;
    if (modType == 69) veh.windowTint = idx;else veh.setMod(modType, idx);
  },
  showColor1: function (player, number, idx) {
    _methods.methods.debug('lsc.showColor1');

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    veh.setColor(idx, veh.getColor(1));
  },
  showColor2: function (player, number, idx) {
    _methods.methods.debug('lsc.showColor2');

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    veh.setColor(veh.getColor(0), idx);
  },
  buyTun: function (player, number, modType, idx, price, shopId) {
    _methods.methods.debug('lsc.buyTun');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 0) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    if (veh.getVariable('id_user') != _user.user.getId(player)) {
      player.notify('~r~Это должен быть ваш транспорт');
      return;
    }

    if (modType == 77) {
      _vehicles.vehicles.set(veh.getVariable('container'), 'livery', idx);
    } else {
      let car = _vehicles.vehicles.getData(veh.getVariable('container'));

      let upgrade = JSON.parse(car.get('upgrade'));
      upgrade[modType.toString()] = idx;

      _vehicles.vehicles.set(veh.getVariable('container'), 'upgrade', JSON.stringify(upgrade));
    }

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы установили деталь, цена: ~s~$' + _methods.methods.numberFormat(price));
    lsc.resetMod(number);

    _vehicles.vehicles.save(veh.getVariable('container'));
  },
  buySTun: function (player, number, modType, idx, price, shopId) {
    _methods.methods.debug('lsc.buyTun');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 0) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') != _user.user.getId(player)) {
      player.notify('~r~Это должен быть ваш транспорт');
      return;
    }

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    modType = modType + 100;

    if (modType == 0) {
      switch (idx) {
        case 0:
          idx = -1;
          break;

        case 1:
          idx = 0;
          break;

        case 2:
          idx = 0.5;
          break;

        case 3:
          idx = 1;
          break;
      }
    }

    let car = _vehicles.vehicles.getData(veh.getVariable('container'));

    let upgrade = JSON.parse(car.get('upgrade'));
    upgrade[modType.toString()] = idx;

    _vehicles.vehicles.set(veh.getVariable('container'), 'upgrade', JSON.stringify(upgrade));

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы обновили ТС, цена: ~s~$' + _methods.methods.numberFormat(price));

    _vehicles.vehicles.save(veh.getVariable('container'));
  },
  resetSTun: function (player, number, modType) {
    _methods.methods.debug('lsc.resetSTun');

    if (!_user.user.isLogin(player)) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    if (veh.getVariable('id_user') != _user.user.getId(player)) {
      player.notify('~r~Это должен быть ваш транспорт');
      return;
    }

    modType = modType + 100;

    let car = _vehicles.vehicles.getData(veh.getVariable('container'));

    let upgrade = JSON.parse(car.get('upgrade'));
    upgrade[modType.toString()] = -1;

    _vehicles.vehicles.set(veh.getVariable('container'), 'upgrade', JSON.stringify(upgrade));

    player.notify('~g~Вы обновили ТС, на стандартные настройки');

    _vehicles.vehicles.save(veh.getVariable('container'));
  },
  buyColor1: function (player, number, idx, price, shopId) {
    _methods.methods.debug('lsc.buyColor1');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    veh.setColor(veh.getColor(0), idx);

    _vehicles.vehicles.set(veh.getVariable('container'), 'color1', idx);

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы изменили цвет транспорта');
    lsc.resetMod(number);

    _vehicles.vehicles.save(veh.getVariable('container'));
  },
  buyColor2: function (player, number, idx, price, shopId) {
    _methods.methods.debug('lsc.buyColor2');

    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    let veh = _vehicles.vehicles.findVehicleByNumber(number);

    if (!_vehicles.vehicles.exists(veh)) return;

    if (veh.getVariable('id_user') < 1) {
      player.notify('~r~Транспорт должен быть личный');
      return;
    }

    veh.setColor(veh.getColor(0), idx);

    _vehicles.vehicles.set(veh.getVariable('container'), 'color2', idx);

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы изменили цвет транспорта');
    lsc.resetMod(number);

    _vehicles.vehicles.save(veh.getVariable('container'));
  },
  resetMod: function (number) {
    _methods.methods.debug('lsc.resetMod');

    try {
      let veh = _vehicles.vehicles.findVehicleByNumber(number);

      if (!_vehicles.vehicles.exists(veh)) return;

      let car = _vehicles.vehicles.getData(veh.getVariable('container'));

      if (!car) return;
      veh.setColor(car.get('color1'), car.get('color2'));
      if (car.get('neon_type') > 0) veh.setNeonColor(car.get('neon_r'), car.get('neon_g'), car.get('neon_b'));

      for (let i = 0; i < 80; i++) veh.setMod(0, 0);

      if (typeof car.get('livery') == "number") veh.livery = car.get('livery');

      if (car.has('upgrade')) {
        let upgrade = JSON.parse(car.get('upgrade'));

        for (let tune in upgrade) {
          if (_methods.methods.parseInt(tune) >= 100) continue;
          if (_methods.methods.parseInt(tune) === 69) veh.windowTint = _methods.methods.parseInt(upgrade[tune]);else if (_methods.methods.parseInt(tune) === 78) veh.wheelType = _methods.methods.parseInt(upgrade[tune]);else veh.setMod(_methods.methods.parseInt(tune), _methods.methods.parseInt(upgrade[tune]));
        }
      }
    } catch (e) {
      console.log(e);
    }
  },
  checkValidNumber: function (number) {
    _methods.methods.debug('lsc.checkValidNumber');

    number = number.toUpperCase();
    let chars = "1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    for (let i = 0; i < number.length; i++) {
      let isValid = false;

      for (let j = 0; j < chars.length; j++) {
        if (number.charAt(i) == chars.charAt(j)) isValid = true;
      }

      if (!isValid) return false;
    }

    return true;
  }
};
exports.lsc = lsc;
},{"../vehicles":"pYYy","../user":"QE3B","../business":"y5vZ","../modules/methods":"qXSp","../modules/entity/carsModel":"pv82","../inventory":"m5ow"}],"ZO2Y":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bar = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

let bar = {
  list: [[127.024, -1284.24, 28.28062, 49], [-560.0792, 287.0196, 81.17641, 52], [-1394.226, -605.4658, 29.31955, 53], [988.5745, -96.85889, 73.84525, 72], [1986.267, 3054.349, 46.21521, 73], [-450.5867, 280.9324, 77.52147, 80], [-1587.188, -3012.827, -77.00496, 0], [-1578.218, -3014.328, -80.00593, 122]],
  listFree: [[-2055.519, -1024.646, 10.90755], [-1402.890869140625, 6748.33837890625, 10.907529830932617], [-2092.460693359375, -1015.4134521484375, 7.9804534912109375], [945.2969970703125, 17.03707504272461, 115.16423034667969], [-1437.54736328125, 6758.40478515625, 7.9730329513549805], [-1772.515, 448.7928, 126.4369], [-657.7393, 857.7365, 224.1475]],
  loadAll: function () {
    _methods.methods.debug('bar.loadAll');

    bar.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      switch (item[3]) {
        case 49:
          _methods.methods.createBlip(shopPos, 121, 0, 0.8);

          break;

        case 53:
          _methods.methods.createBlip(shopPos, 614, 0, 0.8, 'Клуб');

          break;

        case 80:
          _methods.methods.createBlip(shopPos, 102, 0, 0.8, 'Камеди-клаб');

          break;

        case 122:
          _methods.methods.createBlip(new mp.Vector3(4.723007, 220.3487, 106.7251), 614, 0, 0.8, 'Клуб');

          break;

        default:
          if (item[3] != 0) _methods.methods.createBlip(shopPos, 93, 0, 0.8);
          break;
      }

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню бара");
    });
    bar.listFree.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню бара");
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    bar.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    bar.listFree.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = 999;
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = bar.getInRadius(playerPos, 2);
      if (shopId == -1) return;

      if (shopId == 999) {
        player.call('client:menuList:showBarFreeMenu');
        return;
      }

      player.call('client:menuList:showBarMenu', [shopId, _business.business.getPrice(shopId)]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('shop.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    bar.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  }
};
exports.bar = bar;
},{"../modules/methods":"qXSp","../business":"y5vZ"}],"L23J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.carWash = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

var _vSync = require("../managers/vSync");

var _user = require("../user");

let carWash = {
  list: [[-700.0402, -932.4921, 17.34011], [22.56987, -1391.852, 27.91351], [170.6151, -1718.647, 27.88343]],
  loadAll: function () {
    _methods.methods.debug('carWash.loadAll');

    carWash.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(shopPos, 100, 0, 0.8);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы воспользоваться", 4, 0, [0, 0, 0, 0]);
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    carWash.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[0]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = carWash.getInRadius(playerPos, 2);
      if (shopId == -1) return;

      if (player.vehicle) {
        if (_user.user.getCashMoney(player) < 100) {
          player.notify('~r~Необходимо иметь 100$ для того чтобы помыть ТС');
          return;
        }

        _user.user.showLoadDisplay(player);

        setTimeout(function () {
          if (!_user.user.isLogin(player)) return;
          if (!player.vehicle) return;

          _user.user.removeCashMoney(player, 100);

          _business.business.addMoney(113, 100);

          _vSync.vSync.setVehicleDirt(player.vehicle, 0);

          player.notify('~g~Ваш транспорт теперь чист');
          player.notify('~g~Стоимость услуги:~s~ $51');
          setTimeout(function () {
            if (!_user.user.isLogin(player)) return;

            _user.user.hideLoadDisplay(player);
          }, 500);
        }, 500);
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('shop.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    carWash.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  }
};
exports.carWash = carWash;
},{"../modules/methods":"qXSp","../business":"y5vZ","../managers/vSync":"waLt","../user":"QE3B"}],"Iy5w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tattoo = void 0;

var _methods = require("../modules/methods");

var _business = require("../business");

var _user = require("../user");

var _menu = require("../modules/menu");

var _coffer = require("../coffer");

let config = [["Turbulence", "mpairraces_overlays", "MP_Airraces_Tattoo_000_M", "MP_Airraces_Tattoo_000_F", "ZONE_TORSO", 13205], ["Pilot Skull", "mpairraces_overlays", "MP_Airraces_Tattoo_001_M", "MP_Airraces_Tattoo_001_F", "ZONE_TORSO", 18105], ["Winged Bombshell", "mpairraces_overlays", "MP_Airraces_Tattoo_002_M", "MP_Airraces_Tattoo_002_F", "ZONE_TORSO", 16485], ["Toxic Trails", "mpairraces_overlays", "MP_Airraces_Tattoo_003_M", "MP_Airraces_Tattoo_003_F", "ZONE_LEFT_ARM", 11985], ["Balloon Pioneer", "mpairraces_overlays", "MP_Airraces_Tattoo_004_M", "MP_Airraces_Tattoo_004_F", "ZONE_TORSO", 10390], ["Parachute Belle", "mpairraces_overlays", "MP_Airraces_Tattoo_005_M", "MP_Airraces_Tattoo_005_F", "ZONE_TORSO", 15270], ["Bombs Away", "mpairraces_overlays", "MP_Airraces_Tattoo_006_M", "MP_Airraces_Tattoo_006_F", "ZONE_TORSO", 12520], ["Eagle Eyes", "mpairraces_overlays", "MP_Airraces_Tattoo_007_M", "MP_Airraces_Tattoo_007_F", "ZONE_TORSO", 13925], ["Ship Arms", "mpbeach_overlays", "MP_Bea_M_Back_000", "", "ZONE_TORSO", 7250], ["Tribal Hammerhead", "mpbeach_overlays", "MP_Bea_M_Chest_000", "", "ZONE_TORSO", 5800], ["Tribal Shark", "mpbeach_overlays", "MP_Bea_M_Chest_001", "", "ZONE_TORSO", 5900], ["Pirate Skull", "mpbeach_overlays", "MP_Bea_M_Head_000", "", "ZONE_HEAD", 12000], ["Surf LS", "mpbeach_overlays", "MP_Bea_M_Head_001", "", "ZONE_HEAD", 1450], ["Shark", "mpbeach_overlays", "MP_Bea_M_Head_002", "", "ZONE_HEAD", 1850], ["Tribal Star", "mpbeach_overlays", "MP_Bea_M_Lleg_000", "", "ZONE_LEFT_LEG", 4450], ["Tribal Tiki Tower", "mpbeach_overlays", "MP_Bea_M_Rleg_000", "", "ZONE_RIGHT_LEG", 6500], ["Tribal Sun", "mpbeach_overlays", "MP_Bea_M_RArm_000", "", "ZONE_RIGHT_ARM", 6200], ["Tiki Tower", "mpbeach_overlays", "MP_Bea_M_LArm_000", "", "ZONE_LEFT_ARM", 4800], ["Mermaid L.S.", "mpbeach_overlays", "MP_Bea_M_LArm_001", "", "ZONE_LEFT_ARM", 6600], ["Little Fish", "mpbeach_overlays", "MP_Bea_M_Neck_000", "", "ZONE_HEAD", 1650], ["Surfs Up", "mpbeach_overlays", "MP_Bea_M_Neck_001", "", "ZONE_HEAD", 2250], ["Vespucci Beauty", "mpbeach_overlays", "MP_Bea_M_RArm_001", "", "ZONE_RIGHT_ARM", 7000], ["Swordfish", "mpbeach_overlays", "MP_Bea_M_Stom_000", "", "ZONE_TORSO", 3100], ["Wheel", "mpbeach_overlays", "MP_Bea_M_Stom_001", "", "ZONE_TORSO", 5500], ["Rock Solid", "mpbeach_overlays", "", "MP_Bea_F_Back_000", "ZONE_TORSO", 5500], ["Hibiscus Flower Duo", "mpbeach_overlays", "", "MP_Bea_F_Back_001", "ZONE_TORSO", 6900], ["Shrimp", "mpbeach_overlays", "", "MP_Bea_F_Back_002", "ZONE_TORSO", 2500], ["Anchor", "mpbeach_overlays", "", "MP_Bea_F_Chest_000", "ZONE_TORSO", 2500], ["Anchor", "mpbeach_overlays", "", "MP_Bea_F_Chest_001", "ZONE_TORSO", 2500], ["Los Santos Wreath", "mpbeach_overlays", "", "MP_Bea_F_Chest_002", "ZONE_TORSO", 8500], ["Love Dagger", "mpbeach_overlays", "", "MP_Bea_F_RSide_000", "ZONE_TORSO", 6850], ["School of Fish", "mpbeach_overlays", "", "MP_Bea_F_RLeg_000", "ZONE_RIGHT_LEG", 2950], ["Tribal Fish", "mpbeach_overlays", "", "MP_Bea_F_RArm_001", "ZONE_RIGHT_ARM", 3700], ["Tribal Butterfly", "mpbeach_overlays", "", "MP_Bea_F_Neck_000", "ZONE_HEAD", 1700], ["Sea Horses", "mpbeach_overlays", "", "MP_Bea_F_Should_000", "ZONE_TORSO", 5100], ["Catfish", "mpbeach_overlays", "", "MP_Bea_F_Should_001", "ZONE_TORSO", 5250], ["Swallow", "mpbeach_overlays", "", "MP_Bea_F_Stom_000", "ZONE_TORSO", 2100], ["Hibiscus Flower", "mpbeach_overlays", "", "MP_Bea_F_Stom_001", "ZONE_TORSO", 2650], ["Dolphin", "mpbeach_overlays", "", "MP_Bea_F_Stom_002", "ZONE_TORSO", 1900], ["Tribal Flower", "mpbeach_overlays", "", "MP_Bea_F_LArm_000", "ZONE_LEFT_ARM", 3500], ["Parrot", "mpbeach_overlays", "", "MP_Bea_F_LArm_001", "ZONE_LEFT_ARM", 5250], ["Demon Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_000_M", "MP_MP_Biker_Tat_000_F", "ZONE_TORSO", 6720], ["Both Barrels", "mpbiker_overlays", "MP_MP_Biker_Tat_001_M", "MP_MP_Biker_Tat_001_F", "ZONE_TORSO", 10800], ["Rose Tribute", "mpbiker_overlays", "MP_MP_Biker_Tat_002_M", "MP_MP_Biker_Tat_002_F", "ZONE_LEFT_LEG", 16820], ["Web Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_003_M", "MP_MP_Biker_Tat_003_F", "ZONE_TORSO", 10850], ["Dragon's Fury", "mpbiker_overlays", "MP_MP_Biker_Tat_004_M", "MP_MP_Biker_Tat_004_F", "ZONE_RIGHT_LEG", 17950], ["Made In America", "mpbiker_overlays", "MP_MP_Biker_Tat_005_M", "MP_MP_Biker_Tat_005_F", "ZONE_TORSO", 9230], ["Chopper Freedom", "mpbiker_overlays", "MP_MP_Biker_Tat_006_M", "MP_MP_Biker_Tat_006_F", "ZONE_TORSO", 10400], ["Swooping Eagle", "mpbiker_overlays", "MP_MP_Biker_Tat_007_M", "MP_MP_Biker_Tat_007_F", "ZONE_RIGHT_ARM", 5100], ["Freedom Wheels", "mpbiker_overlays", "MP_MP_Biker_Tat_008_M", "MP_MP_Biker_Tat_008_F", "ZONE_TORSO", 8785], ["Morbid Arachnid", "mpbiker_overlays", "MP_MP_Biker_Tat_009_M", "MP_MP_Biker_Tat_009_F", "ZONE_HEAD", 6350], ["Skull Of Taurus", "mpbiker_overlays", "MP_MP_Biker_Tat_010_M", "MP_MP_Biker_Tat_010_F", "ZONE_TORSO", 11350], ["R.I.P. My Brothers", "mpbiker_overlays", "MP_MP_Biker_Tat_011_M", "MP_MP_Biker_Tat_011_F", "ZONE_TORSO", 12350], ["Urban Stunter", "mpbiker_overlays", "MP_MP_Biker_Tat_012_M", "MP_MP_Biker_Tat_012_F", "ZONE_LEFT_ARM", 4985], ["Demon Crossbones", "mpbiker_overlays", "MP_MP_Biker_Tat_013_M", "MP_MP_Biker_Tat_013_F", "ZONE_TORSO", 11140], ["Lady Mortality", "mpbiker_overlays", "MP_MP_Biker_Tat_014_M", "MP_MP_Biker_Tat_014_F", "ZONE_RIGHT_ARM", 8300], ["Ride or Die", "mpbiker_overlays", "MP_MP_Biker_Tat_015_M", "MP_MP_Biker_Tat_015_F", "ZONE_LEFT_LEG", 8975], ["Macabre Tree", "mpbiker_overlays", "MP_MP_Biker_Tat_016_M", "MP_MP_Biker_Tat_016_F", "ZONE_LEFT_ARM", 9000], ["Clawed Beast", "mpbiker_overlays", "MP_MP_Biker_Tat_017_M", "MP_MP_Biker_Tat_017_F", "ZONE_TORSO", 15650], ["Skeletal Chopper", "mpbiker_overlays", "MP_MP_Biker_Tat_018_M", "MP_MP_Biker_Tat_018_F", "ZONE_TORSO", 7650], ["Gruesome Talons", "mpbiker_overlays", "MP_MP_Biker_Tat_019_M", "MP_MP_Biker_Tat_019_F", "ZONE_TORSO", 9900], ["Cranial Rose", "mpbiker_overlays", "MP_MP_Biker_Tat_020_M", "MP_MP_Biker_Tat_020_F", "ZONE_LEFT_ARM", 9745], ["Flaming Reaper", "mpbiker_overlays", "MP_MP_Biker_Tat_021_M", "MP_MP_Biker_Tat_021_F", "ZONE_TORSO", 13700], ["Western Insignia", "mpbiker_overlays", "MP_MP_Biker_Tat_022_M", "MP_MP_Biker_Tat_022_F", "ZONE_RIGHT_LEG", 9385], ["Western MC", "mpbiker_overlays", "MP_MP_Biker_Tat_023_M", "MP_MP_Biker_Tat_023_F", "ZONE_TORSO", 10000], ["Live to Ride", "mpbiker_overlays", "MP_MP_Biker_Tat_024_M", "MP_MP_Biker_Tat_024_F", "ZONE_LEFT_ARM", 15320], ["Good Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_025_M", "MP_MP_Biker_Tat_025_F", "ZONE_LEFT_ARM", 12950], ["American Dream", "mpbiker_overlays", "MP_MP_Biker_Tat_026_M", "MP_MP_Biker_Tat_026_F", "ZONE_TORSO", 11000], ["Bad Luck", "mpbiker_overlays", "MP_MP_Biker_Tat_027_M", "MP_MP_Biker_Tat_027_F", "ZONE_LEFT_LEG", 6960], ["Dusk Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_028_M", "MP_MP_Biker_Tat_028_F", "ZONE_RIGHT_LEG", 14520], ["Bone Wrench", "mpbiker_overlays", "MP_MP_Biker_Tat_029_M", "MP_MP_Biker_Tat_029_F", "ZONE_TORSO", 9630], ["Brothers For Life", "mpbiker_overlays", "MP_MP_Biker_Tat_030_M", "MP_MP_Biker_Tat_030_F", "ZONE_TORSO", 9810], ["Gear Head", "mpbiker_overlays", "MP_MP_Biker_Tat_031_M", "MP_MP_Biker_Tat_031_F", "ZONE_TORSO", 8600], ["Western Eagle", "mpbiker_overlays", "MP_MP_Biker_Tat_032_M", "MP_MP_Biker_Tat_032_F", "ZONE_TORSO", 7655], ["Eagle Emblem", "mpbiker_overlays", "MP_MP_Biker_Tat_033_M", "MP_MP_Biker_Tat_033_F", "ZONE_RIGHT_ARM", 4385], ["Brotherhood of Bikes", "mpbiker_overlays", "MP_MP_Biker_Tat_034_M", "MP_MP_Biker_Tat_034_F", "ZONE_TORSO", 9975], ["Chain Fist", "mpbiker_overlays", "MP_MP_Biker_Tat_035_M", "MP_MP_Biker_Tat_035_F", "ZONE_LEFT_ARM", 5780], ["Engulfed Skull", "mpbiker_overlays", "MP_MP_Biker_Tat_036_M", "MP_MP_Biker_Tat_036_F", "ZONE_LEFT_LEG", 9300], ["Scorched Soul", "mpbiker_overlays", "MP_MP_Biker_Tat_037_M", "MP_MP_Biker_Tat_037_F", "ZONE_LEFT_LEG", 12495], ["FTW", "mpbiker_overlays", "MP_MP_Biker_Tat_038_M", "MP_MP_Biker_Tat_038_F", "ZONE_HEAD", 3900], ["Gas Guzzler", "mpbiker_overlays", "MP_MP_Biker_Tat_039_M", "MP_MP_Biker_Tat_039_F", "ZONE_TORSO", 10950], ["American Made", "mpbiker_overlays", "MP_MP_Biker_Tat_040_M", "MP_MP_Biker_Tat_040_F", "ZONE_RIGHT_LEG", 13620], ["No Regrets", "mpbiker_overlays", "MP_MP_Biker_Tat_041_M", "MP_MP_Biker_Tat_041_F", "ZONE_TORSO", 8320], ["Grim Rider", "mpbiker_overlays", "MP_MP_Biker_Tat_042_M", "MP_MP_Biker_Tat_042_F", "ZONE_RIGHT_ARM", 7865], ["Ride Forever", "mpbiker_overlays", "MP_MP_Biker_Tat_043_M", "MP_MP_Biker_Tat_043_F", "ZONE_TORSO", 6850], ["Ride Free", "mpbiker_overlays", "MP_MP_Biker_Tat_044_M", "MP_MP_Biker_Tat_044_F", "ZONE_LEFT_LEG", 11900], ["Ride Hard Die Fast", "mpbiker_overlays", "MP_MP_Biker_Tat_045_M", "MP_MP_Biker_Tat_045_F", "ZONE_LEFT_ARM", 6320], ["Skull Chain", "mpbiker_overlays", "MP_MP_Biker_Tat_046_M", "MP_MP_Biker_Tat_046_F", "ZONE_RIGHT_ARM", 4985], ["Snake Bike", "mpbiker_overlays", "MP_MP_Biker_Tat_047_M", "MP_MP_Biker_Tat_047_F", "ZONE_RIGHT_ARM", 13500], ["STFU", "mpbiker_overlays", "MP_MP_Biker_Tat_048_M", "MP_MP_Biker_Tat_048_F", "ZONE_RIGHT_LEG", 8930], ["These Colors Don't Run", "mpbiker_overlays", "MP_MP_Biker_Tat_049_M", "MP_MP_Biker_Tat_049_F", "ZONE_RIGHT_ARM", 8790], ["Unforgiven", "mpbiker_overlays", "MP_MP_Biker_Tat_050_M", "MP_MP_Biker_Tat_050_F", "ZONE_TORSO", 8720], ["Western Stylized", "mpbiker_overlays", "MP_MP_Biker_Tat_051_M", "MP_MP_Biker_Tat_051_F", "ZONE_HEAD", 4125], ["Biker Mount", "mpbiker_overlays", "MP_MP_Biker_Tat_052_M", "MP_MP_Biker_Tat_052_F", "ZONE_TORSO", 9135], ["Muffler Helmet", "mpbiker_overlays", "MP_MP_Biker_Tat_053_M", "MP_MP_Biker_Tat_053_F", "ZONE_LEFT_ARM", 8400], ["Mum", "mpbiker_overlays", "MP_MP_Biker_Tat_054_M", "MP_MP_Biker_Tat_054_F", "ZONE_RIGHT_ARM", 10450], ["Poison Scorpion", "mpbiker_overlays", "MP_MP_Biker_Tat_055_M", "MP_MP_Biker_Tat_055_F", "ZONE_LEFT_ARM", 10995], ["Bone Cruiser", "mpbiker_overlays", "MP_MP_Biker_Tat_056_M", "MP_MP_Biker_Tat_056_F", "ZONE_LEFT_LEG", 14960], ["Laughing Skull", "mpbiker_overlays", "MP_MP_Biker_Tat_057_M", "MP_MP_Biker_Tat_057_F", "ZONE_LEFT_LEG", 13865], ["Reaper Vulture", "mpbiker_overlays", "MP_MP_Biker_Tat_058_M", "MP_MP_Biker_Tat_058_F", "ZONE_TORSO", 7985], ["Faggio", "mpbiker_overlays", "MP_MP_Biker_Tat_059_M", "MP_MP_Biker_Tat_059_F", "ZONE_TORSO", 6395], ["We Are The Mods!", "mpbiker_overlays", "MP_MP_Biker_Tat_060_M", "MP_MP_Biker_Tat_060_F", "ZONE_TORSO", 7105], ["Cash is King", "mpbusiness_overlays", "MP_Buis_M_Neck_000", "", "ZONE_HEAD", 5000], ["Bold Dollar Sign", "mpbusiness_overlays", "MP_Buis_M_Neck_001", "", "ZONE_HEAD", 1600], ["Script Dollar Sign", "mpbusiness_overlays", "MP_Buis_M_Neck_002", "", "ZONE_HEAD", 1750], ["$100", "mpbusiness_overlays", "MP_Buis_M_Neck_003", "", "ZONE_HEAD", 6900], ["$100 Bill", "mpbusiness_overlays", "MP_Buis_M_LeftArm_000", "", "ZONE_LEFT_ARM", 3500], ["All-Seeing Eye", "mpbusiness_overlays", "MP_Buis_M_LeftArm_001", "", "ZONE_LEFT_ARM", 7300], ["Dollar Skull", "mpbusiness_overlays", "MP_Buis_M_RightArm_000", "", "ZONE_RIGHT_ARM", 4800], ["Green", "mpbusiness_overlays", "MP_Buis_M_RightArm_001", "", "ZONE_RIGHT_ARM", 1500], ["Refined Hustler", "mpbusiness_overlays", "MP_Buis_M_Stomach_000", "", "ZONE_TORSO", 6400], ["Rich", "mpbusiness_overlays", "MP_Buis_M_Chest_000", "", "ZONE_TORSO", 3250], ["$$$", "mpbusiness_overlays", "MP_Buis_M_Chest_001", "", "ZONE_TORSO", 3500], ["Makin' Paper", "mpbusiness_overlays", "MP_Buis_M_Back_000", "", "ZONE_TORSO", 5500], ["High Roller", "mpbusiness_overlays", "", "MP_Buis_F_Chest_000", "ZONE_TORSO", 7000], ["Makin' Money", "mpbusiness_overlays", "", "MP_Buis_F_Chest_001", "ZONE_TORSO", 7200], ["Love Money", "mpbusiness_overlays", "", "MP_Buis_F_Chest_002", "ZONE_TORSO", 1600], ["Diamond Back", "mpbusiness_overlays", "", "MP_Buis_F_Stom_000", "ZONE_TORSO", 6800], ["Santo Capra Logo", "mpbusiness_overlays", "", "MP_Buis_F_Stom_001", "ZONE_TORSO", 1800], ["Money Bag", "mpbusiness_overlays", "", "MP_Buis_F_Stom_002", "ZONE_TORSO", 1500], ["Respect", "mpbusiness_overlays", "", "MP_Buis_F_Back_000", "ZONE_TORSO", 4200], ["Gold Digger", "mpbusiness_overlays", "", "MP_Buis_F_Back_001", "ZONE_TORSO", 4000], ["Val-de-Grace Logo", "mpbusiness_overlays", "", "MP_Buis_F_Neck_000", "ZONE_HEAD", 1900], ["Money Rose", "mpbusiness_overlays", "", "MP_Buis_F_Neck_001", "ZONE_HEAD", 2500], ["Dollar Sign", "mpbusiness_overlays", "", "MP_Buis_F_RArm_000", "ZONE_RIGHT_ARM", 4900], ["Greed is Good", "mpbusiness_overlays", "", "MP_Buis_F_LArm_000", "ZONE_LEFT_ARM", 5500], ["Single", "mpbusiness_overlays", "", "MP_Buis_F_LLeg_000", "ZONE_LEFT_LEG", 4850], ["Diamond Crown", "mpbusiness_overlays", "", "MP_Buis_F_RLeg_000", "ZONE_RIGHT_LEG", 4500], ["Skull Rider", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_000", "MP_Xmas2_F_Tat_000", "ZONE_LEFT_ARM", 5950], ["Spider Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_001", "MP_Xmas2_F_Tat_001", "ZONE_LEFT_LEG", 4650], ["Spider Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_002", "MP_Xmas2_F_Tat_002", "ZONE_LEFT_LEG", 6350], ["Snake Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_003", "MP_Xmas2_F_Tat_003", "ZONE_RIGHT_ARM", 8450], ["Snake Shaded", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_004", "MP_Xmas2_F_Tat_004", "ZONE_RIGHT_ARM", 13250], ["Carp Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_005", "MP_Xmas2_F_Tat_005", "ZONE_TORSO", 8750], ["Carp Shaded", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_006", "MP_Xmas2_F_Tat_006", "ZONE_TORSO", 14500], ["Los Muertos", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_007", "MP_Xmas2_F_Tat_007", "ZONE_HEAD", 3950], ["Death Before Dishonor", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_008", "MP_Xmas2_F_Tat_008", "ZONE_RIGHT_ARM", 4300], ["Time To Die", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_009", "MP_Xmas2_F_Tat_009", "ZONE_TORSO", 7800], ["Electric Snake", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_010", "MP_Xmas2_F_Tat_010", "ZONE_LEFT_ARM", 6200], ["Roaring Tiger", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_011", "MP_Xmas2_F_Tat_011", "ZONE_TORSO", 6850], ["8 Ball Skull", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_012", "MP_Xmas2_F_Tat_012", "ZONE_LEFT_ARM", 8250], ["Lizard", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_013", "MP_Xmas2_F_Tat_013", "ZONE_TORSO", 7900], ["Floral Dagger", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_014", "MP_Xmas2_F_Tat_014", "ZONE_RIGHT_LEG", 10500], ["Japanese Warrior", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_015", "MP_Xmas2_F_Tat_015", "ZONE_TORSO", 11000], ["Loose Lips Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_016", "MP_Xmas2_F_Tat_016", "ZONE_TORSO", 3150], ["Loose Lips Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_017", "MP_Xmas2_F_Tat_017", "ZONE_TORSO", 6350], ["Royal Dagger Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_018", "MP_Xmas2_F_Tat_018", "ZONE_TORSO", 4300], ["Royal Dagger Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_019", "MP_Xmas2_F_Tat_019", "ZONE_TORSO", 7500], ["Time's Up Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_020", "MP_Xmas2_F_Tat_020", "ZONE_LEFT_ARM", 2500], ["Time's Up Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_021", "MP_Xmas2_F_Tat_021", "ZONE_LEFT_ARM", 3750], ["You're Next Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_022", "MP_Xmas2_F_Tat_022", "ZONE_RIGHT_ARM", 3800], ["You're Next Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_023", "MP_Xmas2_F_Tat_023", "ZONE_RIGHT_ARM", 5100], ["Snake Head Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_024", "MP_Xmas2_F_Tat_024", "ZONE_HEAD", 2100], ["Snake Head Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_025", "MP_Xmas2_F_Tat_025", "ZONE_HEAD", 4600], ["Fuck Luck Outline", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_026", "MP_Xmas2_F_Tat_026", "ZONE_RIGHT_ARM", 1300], ["Fuck Luck Color", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_027", "MP_Xmas2_F_Tat_027", "ZONE_RIGHT_ARM", 2200], ["Executioner", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_028", "MP_Xmas2_F_Tat_028", "ZONE_TORSO", 5700], ["Beautiful Death", "mpchristmas2_overlays", "MP_Xmas2_M_Tat_029", "MP_Xmas2_F_Tat_029", "ZONE_HEAD", 3150], ["Bullet Proof", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_000_M", "MP_Gunrunning_Tattoo_000_F", "ZONE_TORSO", 16985], ["Crossed Weapons", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_001_M", "MP_Gunrunning_Tattoo_001_F", "ZONE_TORSO", 19355], ["Grenade", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_002_M", "MP_Gunrunning_Tattoo_002_F", "ZONE_RIGHT_ARM", 14650], ["Lock &amp; Load", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_003_M", "MP_Gunrunning_Tattoo_003_F", "ZONE_HEAD", 8750], ["Sidearm", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_004_M", "MP_Gunrunning_Tattoo_004_F", "ZONE_LEFT_ARM", 11285], ["Patriot Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_005_M", "MP_Gunrunning_Tattoo_005_F", "ZONE_LEFT_LEG", 9120], ["Combat Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_006_M", "MP_Gunrunning_Tattoo_006_F", "ZONE_RIGHT_LEG", 10670], ["Stylized Tiger", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_007_M", "MP_Gunrunning_Tattoo_007_F", "ZONE_LEFT_LEG", 9660], ["Bandolier", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_008_M", "MP_Gunrunning_Tattoo_008_F", "ZONE_LEFT_ARM", 13445], ["Butterfly Knife", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_009_M", "MP_Gunrunning_Tattoo_009_F", "ZONE_TORSO", 14650], ["Cash Money", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_010_M", "MP_Gunrunning_Tattoo_010_F", "ZONE_TORSO", 19050], ["Death Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_011_M", "MP_Gunrunning_Tattoo_011_F", "ZONE_LEFT_LEG", 9785], ["Dollar Daggers", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_012_M", "MP_Gunrunning_Tattoo_012_F", "ZONE_TORSO", 15060], ["Wolf Insignia", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_013_M", "MP_Gunrunning_Tattoo_013_F", "ZONE_TORSO", 16115], ["Backstabber", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_014_M", "MP_Gunrunning_Tattoo_014_F", "ZONE_TORSO", 17200], ["Spiked Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_015_M", "MP_Gunrunning_Tattoo_015_F", "ZONE_LEFT_ARM", 10425], ["Blood Money", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_016_M", "MP_Gunrunning_Tattoo_016_F", "ZONE_LEFT_ARM", 10360], ["Dog Tags", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_017_M", "MP_Gunrunning_Tattoo_017_F", "ZONE_TORSO", 8980], ["Dual Wield Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_018_M", "MP_Gunrunning_Tattoo_018_F", "ZONE_TORSO", 17755], ["Pistol Wings", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_019_M", "MP_Gunrunning_Tattoo_019_F", "ZONE_TORSO", 18025], ["Crowned Weapons", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_020_M", "MP_Gunrunning_Tattoo_020_F", "ZONE_TORSO", 19875], ["Have a Nice Day", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_021_M", "MP_Gunrunning_Tattoo_021_F", "ZONE_RIGHT_ARM", 9460], ["Explosive Heart", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_022_M", "MP_Gunrunning_Tattoo_022_F", "ZONE_TORSO", 10825], ["Rose Revolver", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_023_M", "MP_Gunrunning_Tattoo_023_F", "ZONE_LEFT_LEG", 8880], ["Combat Reaper", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_024_M", "MP_Gunrunning_Tattoo_024_F", "ZONE_RIGHT_ARM", 10340], ["Praying Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_025_M", "MP_Gunrunning_Tattoo_025_F", "ZONE_LEFT_ARM", 12150], ["Restless Skull", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_026_M", "MP_Gunrunning_Tattoo_026_F", "ZONE_RIGHT_LEG", 11510], ["Serpent Revolver", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_027_M", "MP_Gunrunning_Tattoo_027_F", "ZONE_LEFT_ARM", 8420], ["Micro SMG Chain", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_028_M", "MP_Gunrunning_Tattoo_028_F", "ZONE_TORSO", 9960], ["Win Some Lose Some", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_029_M", "MP_Gunrunning_Tattoo_029_F", "ZONE_TORSO", 14090], ["Pistol Ace", "mpgunrunning_overlays", "MP_Gunrunning_Tattoo_030_M", "MP_Gunrunning_Tattoo_030_F", "ZONE_RIGHT_LEG", 11050], ["Crossed Arrows", "mphipster_overlays", "FM_Hip_M_Tat_000", "FM_Hip_F_Tat_000", "ZONE_TORSO", 6750], ["Single Arrow", "mphipster_overlays", "FM_Hip_M_Tat_001", "FM_Hip_F_Tat_001", "ZONE_RIGHT_ARM", 2000], ["Chemistry", "mphipster_overlays", "FM_Hip_M_Tat_002", "FM_Hip_F_Tat_002", "ZONE_TORSO", 2900], ["Diamond Sparkle", "mphipster_overlays", "FM_Hip_M_Tat_003", "FM_Hip_F_Tat_003", "ZONE_LEFT_ARM", 2100], ["Bone", "mphipster_overlays", "FM_Hip_M_Tat_004", "FM_Hip_F_Tat_004", "ZONE_RIGHT_ARM", 2900], ["Beautiful Eye", "mphipster_overlays", "FM_Hip_M_Tat_005", "FM_Hip_F_Tat_005", "ZONE_HEAD", 7450], ["Feather Birds", "mphipster_overlays", "FM_Hip_M_Tat_006", "FM_Hip_F_Tat_006", "ZONE_TORSO", 4550], ["Bricks", "mphipster_overlays", "FM_Hip_M_Tat_007", "FM_Hip_F_Tat_007", "ZONE_LEFT_ARM", 6000], ["Cube", "mphipster_overlays", "FM_Hip_M_Tat_008", "FM_Hip_F_Tat_008", "ZONE_RIGHT_ARM", 4850], ["Squares", "mphipster_overlays", "FM_Hip_M_Tat_009", "FM_Hip_F_Tat_009", "ZONE_LEFT_LEG", 4000], ["Horseshoe", "mphipster_overlays", "FM_Hip_M_Tat_010", "FM_Hip_F_Tat_010", "ZONE_RIGHT_ARM", 3150], ["Infinity", "mphipster_overlays", "FM_Hip_M_Tat_011", "FM_Hip_F_Tat_011", "ZONE_TORSO", 3000], ["Antlers", "mphipster_overlays", "FM_Hip_M_Tat_012", "FM_Hip_F_Tat_012", "ZONE_TORSO", 6500], ["Boombox", "mphipster_overlays", "FM_Hip_M_Tat_013", "FM_Hip_F_Tat_013", "ZONE_TORSO", 6950], ["Spray Can", "mphipster_overlays", "FM_Hip_M_Tat_014", "FM_Hip_F_Tat_014", "ZONE_RIGHT_ARM", 4300], ["Mustache", "mphipster_overlays", "FM_Hip_M_Tat_015", "FM_Hip_F_Tat_015", "ZONE_LEFT_ARM", 3400], ["Lightning Bolt", "mphipster_overlays", "FM_Hip_M_Tat_016", "FM_Hip_F_Tat_016", "ZONE_LEFT_ARM", 3700], ["Eye Triangle", "mphipster_overlays", "FM_Hip_M_Tat_017", "FM_Hip_F_Tat_017", "ZONE_RIGHT_ARM", 2650], ["Origami", "mphipster_overlays", "FM_Hip_M_Tat_018", "FM_Hip_F_Tat_018", "ZONE_RIGHT_ARM", 1800], ["Charm", "mphipster_overlays", "FM_Hip_M_Tat_019", "FM_Hip_F_Tat_019", "ZONE_LEFT_LEG", 3400], ["Geo Pattern", "mphipster_overlays", "FM_Hip_M_Tat_020", "FM_Hip_F_Tat_020", "ZONE_RIGHT_ARM", 7350], ["Geo Fox", "mphipster_overlays", "FM_Hip_M_Tat_021", "FM_Hip_F_Tat_021", "ZONE_HEAD", 7850], ["Pencil", "mphipster_overlays", "FM_Hip_M_Tat_022", "FM_Hip_F_Tat_022", "ZONE_RIGHT_ARM", 2250], ["Smiley", "mphipster_overlays", "FM_Hip_M_Tat_023", "FM_Hip_F_Tat_023", "ZONE_RIGHT_ARM", 7000], ["Pyramid", "mphipster_overlays", "FM_Hip_M_Tat_024", "FM_Hip_F_Tat_024", "ZONE_TORSO", 2950], ["Watch Your Step", "mphipster_overlays", "FM_Hip_M_Tat_025", "FM_Hip_F_Tat_025", "ZONE_TORSO", 3500], ["Pizza", "mphipster_overlays", "FM_Hip_M_Tat_026", "FM_Hip_F_Tat_026", "ZONE_LEFT_ARM", 2400], ["Padlock", "mphipster_overlays", "FM_Hip_M_Tat_027", "FM_Hip_F_Tat_027", "ZONE_LEFT_ARM", 5750], ["Thorny Rose", "mphipster_overlays", "FM_Hip_M_Tat_028", "FM_Hip_F_Tat_028", "ZONE_LEFT_ARM", 4800], ["Sad", "mphipster_overlays", "FM_Hip_M_Tat_029", "FM_Hip_F_Tat_029", "ZONE_TORSO", 1850], ["Shark Fin", "mphipster_overlays", "FM_Hip_M_Tat_030", "FM_Hip_F_Tat_030", "ZONE_TORSO", 2250], ["Skateboard", "mphipster_overlays", "FM_Hip_M_Tat_031", "FM_Hip_F_Tat_031", "ZONE_TORSO", 4950], ["Paper Plane", "mphipster_overlays", "FM_Hip_M_Tat_032", "FM_Hip_F_Tat_032", "ZONE_TORSO", 4350], ["Stag", "mphipster_overlays", "FM_Hip_M_Tat_033", "FM_Hip_F_Tat_033", "ZONE_TORSO", 6950], ["Stop", "mphipster_overlays", "FM_Hip_M_Tat_034", "FM_Hip_F_Tat_034", "ZONE_LEFT_ARM", 9500], ["Sewn Heart", "mphipster_overlays", "FM_Hip_M_Tat_035", "FM_Hip_F_Tat_035", "ZONE_TORSO", 7500], ["Shapes", "mphipster_overlays", "FM_Hip_M_Tat_036", "FM_Hip_F_Tat_036", "ZONE_RIGHT_ARM", 5150], ["Sunrise", "mphipster_overlays", "FM_Hip_M_Tat_037", "FM_Hip_F_Tat_037", "ZONE_LEFT_ARM", 3750], ["Grub", "mphipster_overlays", "FM_Hip_M_Tat_038", "FM_Hip_F_Tat_038", "ZONE_RIGHT_LEG", 3500], ["Sleeve", "mphipster_overlays", "FM_Hip_M_Tat_039", "FM_Hip_F_Tat_039", "ZONE_LEFT_ARM", 10000], ["Black Anchor", "mphipster_overlays", "FM_Hip_M_Tat_040", "FM_Hip_F_Tat_040", "ZONE_LEFT_LEG", 2950], ["Tooth", "mphipster_overlays", "FM_Hip_M_Tat_041", "FM_Hip_F_Tat_041", "ZONE_TORSO", 2575], ["Sparkplug", "mphipster_overlays", "FM_Hip_M_Tat_042", "FM_Hip_F_Tat_042", "ZONE_RIGHT_LEG", 4300], ["Triangle White", "mphipster_overlays", "FM_Hip_M_Tat_043", "FM_Hip_F_Tat_043", "ZONE_LEFT_ARM", 5500], ["Triangle Black", "mphipster_overlays", "FM_Hip_M_Tat_044", "FM_Hip_F_Tat_044", "ZONE_RIGHT_ARM", 5500], ["Mesh Band", "mphipster_overlays", "FM_Hip_M_Tat_045", "FM_Hip_F_Tat_045", "ZONE_RIGHT_ARM", 4000], ["Triangles", "mphipster_overlays", "FM_Hip_M_Tat_046", "FM_Hip_F_Tat_046", "ZONE_TORSO", 3750], ["Cassette", "mphipster_overlays", "FM_Hip_M_Tat_047", "FM_Hip_F_Tat_047", "ZONE_TORSO", 1900], ["Peace", "mphipster_overlays", "FM_Hip_M_Tat_048", "FM_Hip_F_Tat_048", "ZONE_LEFT_ARM", 7850], ["Block Back", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_000_M", "MP_MP_ImportExport_Tat_000_F", "ZONE_TORSO", 13780], ["Power Plant", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_001_M", "MP_MP_ImportExport_Tat_001_F", "ZONE_TORSO", 12900], ["Tuned to Death", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_002_M", "MP_MP_ImportExport_Tat_002_F", "ZONE_TORSO", 12120], ["Mechanical Sleeve", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_003_M", "MP_MP_ImportExport_Tat_003_F", "ZONE_RIGHT_ARM", 17200], ["Piston Sleeve", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_004_M", "MP_MP_ImportExport_Tat_004_F", "ZONE_LEFT_ARM", 16350], ["Dialed In", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_005_M", "MP_MP_ImportExport_Tat_005_F", "ZONE_RIGHT_ARM", 18615], ["Engulfed Block", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_006_M", "MP_MP_ImportExport_Tat_006_F", "ZONE_RIGHT_ARM", 15720], ["Drive Forever", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_007_M", "MP_MP_ImportExport_Tat_007_F", "ZONE_RIGHT_ARM", 16685], ["Scarlett", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_008_M", "MP_MP_ImportExport_Tat_008_F", "ZONE_LEFT_ARM", 19900], ["Serpents of Destruction", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_009_M", "MP_MP_ImportExport_Tat_009_F", "ZONE_TORSO", 16500], ["Take the Wheel", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_010_M", "MP_MP_ImportExport_Tat_010_F", "ZONE_TORSO", 14235], ["Talk Shit Get Hit", "mpimportexport_overlays", "MP_MP_ImportExport_Tat_011_M", "MP_MP_ImportExport_Tat_011_F", "ZONE_TORSO", 15985], ["King Fight", "mplowrider_overlays", "MP_LR_Tat_001_M", "MP_LR_Tat_001_F", "ZONE_TORSO", 6100], ["Holy Mary", "mplowrider_overlays", "MP_LR_Tat_002_M", "MP_LR_Tat_002_F", "ZONE_TORSO", 10250], ["Gun Mic", "mplowrider_overlays", "MP_LR_Tat_004_M", "MP_LR_Tat_004_F", "ZONE_TORSO", 3500], ["No Evil", "mplowrider_overlays", "MP_LR_Tat_005_M", "MP_LR_Tat_005_F", "ZONE_LEFT_ARM", 5900], ["LS Serpent", "mplowrider_overlays", "MP_LR_Tat_007_M", "MP_LR_Tat_007_F", "ZONE_LEFT_LEG", 5500], ["Amazon", "mplowrider_overlays", "MP_LR_Tat_009_M", "MP_LR_Tat_009_F", "ZONE_TORSO", 9500], ["Bad Angel", "mplowrider_overlays", "MP_LR_Tat_010_M", "MP_LR_Tat_010_F", "ZONE_TORSO", 16500], ["Love Gamble", "mplowrider_overlays", "MP_LR_Tat_013_M", "MP_LR_Tat_013_F", "ZONE_TORSO", 8300], ["Love is Blind", "mplowrider_overlays", "MP_LR_Tat_014_M", "MP_LR_Tat_014_F", "ZONE_TORSO", 17750], ["Seductress", "mplowrider_overlays", "MP_LR_Tat_015_M", "MP_LR_Tat_015_F", "ZONE_RIGHT_ARM", 6150], ["Ink Me", "mplowrider_overlays", "MP_LR_Tat_017_M", "MP_LR_Tat_017_F", "ZONE_RIGHT_LEG", 7700], ["Presidents", "mplowrider_overlays", "MP_LR_Tat_020_M", "MP_LR_Tat_020_F", "ZONE_LEFT_LEG", 6850], ["Sad Angel", "mplowrider_overlays", "MP_LR_Tat_021_M", "MP_LR_Tat_021_F", "ZONE_TORSO", 15000], ["Dance of Hearts", "mplowrider_overlays", "MP_LR_Tat_023_M", "MP_LR_Tat_023_F", "ZONE_RIGHT_LEG", 6500], ["Royal Takeover", "mplowrider_overlays", "MP_LR_Tat_026_M", "MP_LR_Tat_026_F", "ZONE_TORSO", 7400], ["Los Santos Life", "mplowrider_overlays", "MP_LR_Tat_027_M", "MP_LR_Tat_027_F", "ZONE_LEFT_ARM", 7800], ["City Sorrow", "mplowrider_overlays", "MP_LR_Tat_033_M", "MP_LR_Tat_033_F", "ZONE_LEFT_ARM", 10000], ["SA Assault", "mplowrider2_overlays", "MP_LR_Tat_000_M", "MP_LR_Tat_000_F", "ZONE_TORSO", 19000], ["Lady Vamp", "mplowrider2_overlays", "MP_LR_Tat_003_M", "MP_LR_Tat_003_F", "ZONE_RIGHT_ARM", 5950], ["Love Hustle", "mplowrider2_overlays", "MP_LR_Tat_006_M", "MP_LR_Tat_006_F", "ZONE_LEFT_ARM", 7450], ["Love the Game", "mplowrider2_overlays", "MP_LR_Tat_008_M", "MP_LR_Tat_008_F", "ZONE_TORSO", 18750], ["Lady Liberty", "mplowrider2_overlays", "MP_LR_Tat_011_M", "MP_LR_Tat_011_F", "ZONE_TORSO", 8000], ["Royal Kiss", "mplowrider2_overlays", "MP_LR_Tat_012_M", "MP_LR_Tat_012_F", "ZONE_TORSO", 7650], ["Two Face", "mplowrider2_overlays", "MP_LR_Tat_016_M", "MP_LR_Tat_016_F", "ZONE_TORSO", 6400], ["Skeleton Party", "mplowrider2_overlays", "MP_LR_Tat_018_M", "MP_LR_Tat_018_F", "ZONE_LEFT_ARM", 11000], ["Death Behind", "mplowrider2_overlays", "MP_LR_Tat_019_M", "MP_LR_Tat_019_F", "ZONE_TORSO", 9750], ["My Crazy Life", "mplowrider2_overlays", "MP_LR_Tat_022_M", "MP_LR_Tat_022_F", "ZONE_LEFT_ARM", 7350], ["Loving Los Muertos", "mplowrider2_overlays", "MP_LR_Tat_028_M", "MP_LR_Tat_028_F", "ZONE_RIGHT_ARM", 8800], ["Death Us Do Part", "mplowrider2_overlays", "MP_LR_Tat_029_M", "MP_LR_Tat_029_F", "ZONE_LEFT_LEG", 6250], ["San Andreas Prayer", "mplowrider2_overlays", "MP_LR_Tat_030_M", "MP_LR_Tat_030_F", "ZONE_RIGHT_LEG", 8150], ["Dead Pretty", "mplowrider2_overlays", "MP_LR_Tat_031_M", "MP_LR_Tat_031_F", "ZONE_TORSO", 16500], ["Reign Over", "mplowrider2_overlays", "MP_LR_Tat_032_M", "MP_LR_Tat_032_F", "ZONE_TORSO", 18500], ["Black Tears", "mplowrider2_overlays", "MP_LR_Tat_035_M", "MP_LR_Tat_035_F", "ZONE_RIGHT_ARM", 8250], ["Serpent of Death", "mpluxe_overlays", "MP_LUXE_TAT_000_M", "MP_LUXE_TAT_000_F", "ZONE_LEFT_LEG", 11900], ["Elaborate Los Muertos", "mpluxe_overlays", "MP_LUXE_TAT_001_M", "MP_LUXE_TAT_001_F", "ZONE_RIGHT_LEG", 14350], ["Abstract Skull", "mpluxe_overlays", "MP_LUXE_TAT_003_M", "MP_LUXE_TAT_003_F", "ZONE_TORSO", 8350], ["Floral Raven", "mpluxe_overlays", "MP_LUXE_TAT_004_M", "MP_LUXE_TAT_004_F", "ZONE_RIGHT_ARM", 12200], ["Adorned Wolf", "mpluxe_overlays", "MP_LUXE_TAT_006_M", "MP_LUXE_TAT_006_F", "ZONE_TORSO", 25000], ["Eye of the Griffin", "mpluxe_overlays", "MP_LUXE_TAT_007_M", "MP_LUXE_TAT_007_F", "ZONE_TORSO", 12450], ["Flying Eye", "mpluxe_overlays", "MP_LUXE_TAT_008_M", "MP_LUXE_TAT_008_F", "ZONE_TORSO", 18000], ["Floral Symmetry", "mpluxe_overlays", "MP_LUXE_TAT_009_M", "MP_LUXE_TAT_009_F", "ZONE_LEFT_ARM", 19150], ["Mermaid Harpist", "mpluxe_overlays", "MP_LUXE_TAT_013_M", "MP_LUXE_TAT_013_F", "ZONE_RIGHT_ARM", 16900], ["Ancient Queen", "mpluxe_overlays", "MP_LUXE_TAT_014_M", "MP_LUXE_TAT_014_F", "ZONE_TORSO", 18200], ["Smoking Sisters", "mpluxe_overlays", "MP_LUXE_TAT_015_M", "MP_LUXE_TAT_015_F", "ZONE_TORSO", 16250], ["Geisha Bloom", "mpluxe_overlays", "MP_LUXE_TAT_019_M", "MP_LUXE_TAT_019_F", "ZONE_RIGHT_ARM", 16850], ["Archangel &amp; Mary", "mpluxe_overlays", "MP_LUXE_TAT_020_M", "MP_LUXE_TAT_020_F", "ZONE_LEFT_ARM", 22500], ["Gabriel", "mpluxe_overlays", "MP_LUXE_TAT_021_M", "MP_LUXE_TAT_021_F", "ZONE_LEFT_ARM", 12850], ["Feather Mural", "mpluxe_overlays", "MP_LUXE_TAT_024_M", "MP_LUXE_TAT_024_F", "ZONE_TORSO", 27250], ["The Howler", "mpluxe2_overlays", "MP_LUXE_TAT_002_M", "MP_LUXE_TAT_002_F", "ZONE_TORSO", 11000], ["Fatal Dagger", "mpluxe2_overlays", "MP_LUXE_TAT_005_M", "MP_LUXE_TAT_005_F", "ZONE_LEFT_ARM", 10250], ["Intrometric", "mpluxe2_overlays", "MP_LUXE_TAT_010_M", "MP_LUXE_TAT_010_F", "ZONE_RIGHT_ARM", 14650], ["Cross of Roses", "mpluxe2_overlays", "MP_LUXE_TAT_011_M", "MP_LUXE_TAT_011_F", "ZONE_LEFT_LEG", 13250], ["Geometric Galaxy", "mpluxe2_overlays", "MP_LUXE_TAT_012_M", "MP_LUXE_TAT_012_F", "ZONE_TORSO", 26500], ["Egyptian Mural", "mpluxe2_overlays", "MP_LUXE_TAT_016_M", "MP_LUXE_TAT_016_F", "ZONE_LEFT_ARM", 18600], ["Heavenly Deity", "mpluxe2_overlays", "MP_LUXE_TAT_017_M", "MP_LUXE_TAT_017_F", "ZONE_RIGHT_ARM", 21550], ["Divine Goddess", "mpluxe2_overlays", "MP_LUXE_TAT_018_M", "MP_LUXE_TAT_018_F", "ZONE_LEFT_ARM", 23400], ["Cloaked Angel", "mpluxe2_overlays", "MP_LUXE_TAT_022_M", "MP_LUXE_TAT_022_F", "ZONE_TORSO", 28500], ["Starmetric", "mpluxe2_overlays", "MP_LUXE_TAT_023_M", "MP_LUXE_TAT_023_F", "ZONE_RIGHT_LEG", 15600], ["Reaper Sway", "mpluxe2_overlays", "MP_LUXE_TAT_025_M", "MP_LUXE_TAT_025_F", "ZONE_TORSO", 11500], ["Floral Print", "mpluxe2_overlays", "MP_LUXE_TAT_026_M", "MP_LUXE_TAT_026_F", "ZONE_RIGHT_ARM", 14700], ["Cobra Dawn", "mpluxe2_overlays", "MP_LUXE_TAT_027_M", "MP_LUXE_TAT_027_F", "ZONE_TORSO", 12750], ["Python Skull", "mpluxe2_overlays", "MP_LUXE_TAT_028_M", "MP_LUXE_TAT_028_F", "ZONE_LEFT_ARM", 11300], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_029_M", "MP_LUXE_TAT_029_F", "ZONE_TORSO", 30000], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_030_M", "MP_LUXE_TAT_030_F", "ZONE_RIGHT_ARM", 8000], ["Geometric Design", "mpluxe2_overlays", "MP_LUXE_TAT_031_M", "MP_LUXE_TAT_031_F", "ZONE_LEFT_ARM", 8000], ["Bless The Dead", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_000_M", "MP_Smuggler_Tattoo_000_F", "ZONE_TORSO", 11270], ["Crackshot", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_001_M", "MP_Smuggler_Tattoo_001_F", "ZONE_RIGHT_ARM", 10825], ["Dead Lies", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_002_M", "MP_Smuggler_Tattoo_002_F", "ZONE_TORSO", 12430], ["Give Nothing Back", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_003_M", "MP_Smuggler_Tattoo_003_F", "ZONE_TORSO", 13090], ["Honor", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_004_M", "MP_Smuggler_Tattoo_004_F", "ZONE_LEFT_ARM", 8150], ["Mutiny", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_005_M", "MP_Smuggler_Tattoo_005_F", "ZONE_RIGHT_ARM", 7920], ["Never Surrender", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_006_M", "MP_Smuggler_Tattoo_006_F", "ZONE_TORSO", 9475], ["No Honor", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_007_M", "MP_Smuggler_Tattoo_007_F", "ZONE_TORSO", 8525], ["Horrors Of The Deep", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_008_M", "MP_Smuggler_Tattoo_008_F", "ZONE_LEFT_ARM", 11045], ["Tall Ship Conflict", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_009_M", "MP_Smuggler_Tattoo_009_F", "ZONE_TORSO", 16625], ["See You In Hell", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_010_M", "MP_Smuggler_Tattoo_010_F", "ZONE_TORSO", 12815], ["Sinner", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_011_M", "MP_Smuggler_Tattoo_011_F", "ZONE_HEAD", 8110], ["Thief", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_012_M", "MP_Smuggler_Tattoo_012_F", "ZONE_HEAD", 10720], ["Torn Wings", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_013_M", "MP_Smuggler_Tattoo_013_F", "ZONE_TORSO", 10540], ["Mermaid's Curse", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_014_M", "MP_Smuggler_Tattoo_014_F", "ZONE_LEFT_ARM", 8825], ["Jolly Roger", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_015_M", "MP_Smuggler_Tattoo_015_F", "ZONE_TORSO", 9765], ["Skull Compass", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_016_M", "MP_Smuggler_Tattoo_016_F", "ZONE_TORSO", 13790], ["Framed Tall Ship", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_017_M", "MP_Smuggler_Tattoo_017_F", "ZONE_TORSO", 18850], ["Finders Keepers", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_018_M", "MP_Smuggler_Tattoo_018_F", "ZONE_TORSO", 16990], ["Lost At Sea", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_019_M", "MP_Smuggler_Tattoo_019_F", "ZONE_TORSO", 11105], ["Homeward Bound", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_020_M", "MP_Smuggler_Tattoo_020_F", "ZONE_RIGHT_LEG", 9155], ["Dead Tales", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_021_M", "MP_Smuggler_Tattoo_021_F", "ZONE_TORSO", 14860], ["X Marks The Spot", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_022_M", "MP_Smuggler_Tattoo_022_F", "ZONE_TORSO", 16710], ["Stylized Kraken", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_023_M", "MP_Smuggler_Tattoo_023_F", "ZONE_RIGHT_ARM", 14400], ["Pirate Captain", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_024_M", "MP_Smuggler_Tattoo_024_F", "ZONE_TORSO", 18210], ["Claimed By The Beast", "mpsmuggler_overlays", "MP_Smuggler_Tattoo_025_M", "MP_Smuggler_Tattoo_025_F", "ZONE_TORSO", 17450], ["Stunt Skull", "mpstunt_overlays", "MP_MP_Stunt_Tat_000_M", "MP_MP_Stunt_Tat_000_F", "ZONE_HEAD", 4850], ["8 Eyed Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_001_M", "MP_MP_Stunt_tat_001_F", "ZONE_LEFT_ARM", 11600], ["Big Cat", "mpstunt_overlays", "MP_MP_Stunt_tat_002_M", "MP_MP_Stunt_tat_002_F", "ZONE_LEFT_ARM", 8850], ["Poison Wrench", "mpstunt_overlays", "MP_MP_Stunt_tat_003_M", "MP_MP_Stunt_tat_003_F", "ZONE_RIGHT_ARM", 4300], ["Scorpion", "mpstunt_overlays", "MP_MP_Stunt_tat_004_M", "MP_MP_Stunt_tat_004_F", "ZONE_HEAD", 6350], ["Demon Spark Plug", "mpstunt_overlays", "MP_MP_Stunt_tat_005_M", "MP_MP_Stunt_tat_005_F", "ZONE_RIGHT_LEG", 8850], ["Toxic Spider", "mpstunt_overlays", "MP_MP_Stunt_tat_006_M", "MP_MP_Stunt_tat_006_F", "ZONE_HEAD", 5900], ["Dagger Devil", "mpstunt_overlays", "MP_MP_Stunt_tat_007_M", "MP_MP_Stunt_tat_007_F", "ZONE_LEFT_LEG", 8150], ["Moonlight Ride", "mpstunt_overlays", "MP_MP_Stunt_tat_008_M", "MP_MP_Stunt_tat_008_F", "ZONE_LEFT_ARM", 14750], ["Arachnid of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_009_M", "MP_MP_Stunt_tat_009_F", "ZONE_RIGHT_ARM", 10800], ["Grave Vulture", "mpstunt_overlays", "MP_MP_Stunt_tat_010_M", "MP_MP_Stunt_tat_010_F", "ZONE_RIGHT_ARM", 11000], ["Wheels of Death", "mpstunt_overlays", "MP_MP_Stunt_tat_011_M", "MP_MP_Stunt_tat_011_F", "ZONE_TORSO", 10750], ["Punk Biker", "mpstunt_overlays", "MP_MP_Stunt_tat_012_M", "MP_MP_Stunt_tat_012_F", "ZONE_TORSO", 11950], ["Dirt Track Hero", "mpstunt_overlays", "MP_MP_Stunt_tat_013_M", "MP_MP_Stunt_tat_013_F", "ZONE_LEFT_LEG", 15500], ["Bat Cat of Spades", "mpstunt_overlays", "MP_MP_Stunt_tat_014_M", "MP_MP_Stunt_tat_014_F", "ZONE_TORSO", 8300], ["Praying Gloves", "mpstunt_overlays", "MP_MP_Stunt_tat_015_M", "MP_MP_Stunt_tat_015_F", "ZONE_RIGHT_LEG", 13400], ["Coffin Racer", "mpstunt_overlays", "MP_MP_Stunt_tat_016_M", "MP_MP_Stunt_tat_016_F", "ZONE_RIGHT_ARM", 12950], ["Bat Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_017_M", "MP_MP_Stunt_tat_017_F", "ZONE_HEAD", 3800], ["Vintage Bully", "mpstunt_overlays", "MP_MP_Stunt_tat_018_M", "MP_MP_Stunt_tat_018_F", "ZONE_TORSO", 5400], ["Engine Heart", "mpstunt_overlays", "MP_MP_Stunt_tat_019_M", "MP_MP_Stunt_tat_019_F", "ZONE_TORSO", 8900], ["Piston Angel", "mpstunt_overlays", "MP_MP_Stunt_tat_020_M", "MP_MP_Stunt_tat_020_F", "ZONE_RIGHT_LEG", 6950], ["Golden Cobra", "mpstunt_overlays", "MP_MP_Stunt_tat_021_M", "MP_MP_Stunt_tat_021_F", "ZONE_LEFT_LEG", 21200], ["Piston Head", "mpstunt_overlays", "MP_MP_Stunt_tat_022_M", "MP_MP_Stunt_tat_022_F", "ZONE_LEFT_ARM", 16850], ["Tanked", "mpstunt_overlays", "MP_MP_Stunt_tat_023_M", "MP_MP_Stunt_tat_023_F", "ZONE_LEFT_ARM", 18500], ["Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_024_M", "MP_MP_Stunt_tat_024_F", "ZONE_TORSO", 8650], ["Speed Freak", "mpstunt_overlays", "MP_MP_Stunt_tat_025_M", "MP_MP_Stunt_tat_025_F", "ZONE_RIGHT_LEG", 7200], ["Winged Wheel", "mpstunt_overlays", "MP_MP_Stunt_tat_026_M", "MP_MP_Stunt_tat_026_F", "ZONE_TORSO", 12300], ["Punk Road Hog", "mpstunt_overlays", "MP_MP_Stunt_tat_027_M", "MP_MP_Stunt_tat_027_F", "ZONE_TORSO", 8950], ["Quad Goblin", "mpstunt_overlays", "MP_MP_Stunt_tat_028_M", "MP_MP_Stunt_tat_028_F", "ZONE_LEFT_LEG", 9850], ["Majestic Finish", "mpstunt_overlays", "MP_MP_Stunt_tat_029_M", "MP_MP_Stunt_tat_029_F", "ZONE_TORSO", 17350], ["Man's Ruin", "mpstunt_overlays", "MP_MP_Stunt_tat_030_M", "MP_MP_Stunt_tat_030_F", "ZONE_TORSO", 8150], ["Stunt Jesus", "mpstunt_overlays", "MP_MP_Stunt_tat_031_M", "MP_MP_Stunt_tat_031_F", "ZONE_LEFT_LEG", 11000], ["Wheelie Mouse", "mpstunt_overlays", "MP_MP_Stunt_tat_032_M", "MP_MP_Stunt_tat_032_F", "ZONE_RIGHT_LEG", 10350], ["Sugar Skull Trucker", "mpstunt_overlays", "MP_MP_Stunt_tat_033_M", "MP_MP_Stunt_tat_033_F", "ZONE_TORSO", 10400], ["Feather Road Kill", "mpstunt_overlays", "MP_MP_Stunt_tat_034_M", "MP_MP_Stunt_tat_034_F", "ZONE_TORSO", 9900], ["Stuntman's End", "mpstunt_overlays", "MP_MP_Stunt_tat_035_M", "MP_MP_Stunt_tat_035_F", "ZONE_LEFT_ARM", 12700], ["Biker Stallion", "mpstunt_overlays", "MP_MP_Stunt_tat_036_M", "MP_MP_Stunt_tat_036_F", "ZONE_RIGHT_ARM", 2350], ["Big Grills", "mpstunt_overlays", "MP_MP_Stunt_tat_037_M", "MP_MP_Stunt_tat_037_F", "ZONE_TORSO", 6850], ["One Down Five Up", "mpstunt_overlays", "MP_MP_Stunt_tat_038_M", "MP_MP_Stunt_tat_038_F", "ZONE_RIGHT_ARM", 5750], ["Kaboom", "mpstunt_overlays", "MP_MP_Stunt_tat_039_M", "MP_MP_Stunt_tat_039_F", "ZONE_LEFT_ARM", 9350], ["Monkey Chopper", "mpstunt_overlays", "MP_MP_Stunt_tat_040_M", "MP_MP_Stunt_tat_040_F", "ZONE_TORSO", 15950], ["Brapp", "mpstunt_overlays", "MP_MP_Stunt_tat_041_M", "MP_MP_Stunt_tat_041_F", "ZONE_TORSO", 10100], ["Flaming Quad", "mpstunt_overlays", "MP_MP_Stunt_tat_042_M", "MP_MP_Stunt_tat_042_F", "ZONE_HEAD", 4150], ["Engine Arm", "mpstunt_overlays", "MP_MP_Stunt_tat_043_M", "MP_MP_Stunt_tat_043_F", "ZONE_LEFT_ARM", 10300], ["Ram Skull", "mpstunt_overlays", "MP_MP_Stunt_tat_044_M", "MP_MP_Stunt_tat_044_F", "ZONE_TORSO", 13900], ["Severed Hand", "mpstunt_overlays", "MP_MP_Stunt_tat_045_M", "MP_MP_Stunt_tat_045_F", "ZONE_RIGHT_LEG", 19650], ["Full Throttle", "mpstunt_overlays", "MP_MP_Stunt_tat_046_M", "MP_MP_Stunt_tat_046_F", "ZONE_TORSO", 12750], ["Brake Knife", "mpstunt_overlays", "MP_MP_Stunt_tat_047_M", "MP_MP_Stunt_tat_047_F", "ZONE_RIGHT_LEG", 9200], ["Racing Doll", "mpstunt_overlays", "MP_MP_Stunt_tat_048_M", "MP_MP_Stunt_tat_048_F", "ZONE_TORSO", 11300], ["Seductive Mechanic", "mpstunt_overlays", "MP_MP_Stunt_tat_049_M", "MP_MP_Stunt_tat_049_F", "ZONE_RIGHT_ARM", 23000], ["Skull", "multiplayer_overlays", "FM_Tat_Award_M_000", "FM_Tat_Award_F_000", "ZONE_HEAD", 20000], ["Burning Heart", "multiplayer_overlays", "FM_Tat_Award_M_001", "FM_Tat_Award_F_001", "ZONE_LEFT_ARM", 1400], ["Grim Reaper Smoking Gun", "multiplayer_overlays", "FM_Tat_Award_M_002", "FM_Tat_Award_F_002", "ZONE_RIGHT_ARM", 9750], ["Blackjack", "multiplayer_overlays", "FM_Tat_Award_M_003", "FM_Tat_Award_F_003", "ZONE_TORSO", 2150], ["Hustler", "multiplayer_overlays", "FM_Tat_Award_M_004", "FM_Tat_Award_F_004", "ZONE_TORSO", 10000], ["Angel", "multiplayer_overlays", "FM_Tat_Award_M_005", "FM_Tat_Award_F_005", "ZONE_TORSO", 12400], ["Skull and Sword", "multiplayer_overlays", "FM_Tat_Award_M_006", "FM_Tat_Award_F_006", "ZONE_RIGHT_LEG", 3500], ["Racing Blonde", "multiplayer_overlays", "FM_Tat_Award_M_007", "FM_Tat_Award_F_007", "ZONE_LEFT_ARM", 4950], ["Los Santos Customs", "multiplayer_overlays", "FM_Tat_Award_M_008", "FM_Tat_Award_F_008", "ZONE_TORSO", 1350], ["Dragon and Dagger", "multiplayer_overlays", "FM_Tat_Award_M_009", "FM_Tat_Award_F_009", "ZONE_LEFT_LEG", 1450], ["Ride or Die", "multiplayer_overlays", "FM_Tat_Award_M_010", "FM_Tat_Award_F_010", "ZONE_RIGHT_ARM", 2700], ["Blank Scroll", "multiplayer_overlays", "FM_Tat_Award_M_011", "FM_Tat_Award_F_011", "ZONE_TORSO", 1200], ["Embellished Scroll", "multiplayer_overlays", "FM_Tat_Award_M_012", "FM_Tat_Award_F_012", "ZONE_TORSO", 1500], ["Seven Deadly Sins", "multiplayer_overlays", "FM_Tat_Award_M_013", "FM_Tat_Award_F_013", "ZONE_TORSO", 2650], ["Trust No One", "multiplayer_overlays", "FM_Tat_Award_M_014", "FM_Tat_Award_F_014", "ZONE_TORSO", 1900], ["Racing Brunette", "multiplayer_overlays", "FM_Tat_Award_M_015", "FM_Tat_Award_F_015", "ZONE_LEFT_ARM", 4950], ["Clown", "multiplayer_overlays", "FM_Tat_Award_M_016", "FM_Tat_Award_F_016", "ZONE_TORSO", 2400], ["Clown and Gun", "multiplayer_overlays", "FM_Tat_Award_M_017", "FM_Tat_Award_F_017", "ZONE_TORSO", 5100], ["Clown Dual Wield", "multiplayer_overlays", "FM_Tat_Award_M_018", "FM_Tat_Award_F_018", "ZONE_TORSO", 7400], ["Clown Dual Wield Dollars", "multiplayer_overlays", "FM_Tat_Award_M_019", "FM_Tat_Award_F_019", "ZONE_TORSO", 10000], ["Brotherhood", "multiplayer_overlays", "FM_Tat_M_000", "FM_Tat_F_000", "ZONE_RIGHT_ARM", 10000], ["Dragons", "multiplayer_overlays", "FM_Tat_M_001", "FM_Tat_F_001", "ZONE_RIGHT_ARM", 12500], ["Melting Skull", "multiplayer_overlays", "FM_Tat_M_002", "FM_Tat_F_002", "ZONE_LEFT_LEG", 3750], ["Dragons and Skull", "multiplayer_overlays", "FM_Tat_M_003", "FM_Tat_F_003", "ZONE_RIGHT_ARM", 10000], ["Faith", "multiplayer_overlays", "FM_Tat_M_004", "FM_Tat_F_004", "ZONE_TORSO", 10000], ["Serpents", "multiplayer_overlays", "FM_Tat_M_005", "FM_Tat_F_005", "ZONE_LEFT_ARM", 2400], ["Oriental Mural", "multiplayer_overlays", "FM_Tat_M_006", "FM_Tat_F_006", "ZONE_LEFT_ARM", 5100], ["The Warrior", "multiplayer_overlays", "FM_Tat_M_007", "FM_Tat_F_007", "ZONE_RIGHT_LEG", 3750], ["Dragon Mural", "multiplayer_overlays", "FM_Tat_M_008", "FM_Tat_F_008", "ZONE_LEFT_LEG", 4800], ["Skull on the Cross", "multiplayer_overlays", "FM_Tat_M_009", "FM_Tat_F_009", "ZONE_TORSO", 12350], ["LS Flames", "multiplayer_overlays", "FM_Tat_M_010", "FM_Tat_F_010", "ZONE_TORSO", 2500], ["LS Script", "multiplayer_overlays", "FM_Tat_M_011", "FM_Tat_F_011", "ZONE_TORSO", 1900], ["Los Santos Bills", "multiplayer_overlays", "FM_Tat_M_012", "FM_Tat_F_012", "ZONE_TORSO", 10000], ["Eagle and Serpent", "multiplayer_overlays", "FM_Tat_M_013", "FM_Tat_F_013", "ZONE_TORSO", 4500], ["Flower Mural", "multiplayer_overlays", "FM_Tat_M_014", "FM_Tat_F_014", "ZONE_RIGHT_ARM", 5000], ["Zodiac Skull", "multiplayer_overlays", "FM_Tat_M_015", "FM_Tat_F_015", "ZONE_LEFT_ARM", 3600], ["Evil Clown", "multiplayer_overlays", "FM_Tat_M_016", "FM_Tat_F_016", "ZONE_TORSO", 12250], ["Tribal", "multiplayer_overlays", "FM_Tat_M_017", "FM_Tat_F_017", "ZONE_RIGHT_LEG", 3500], ["Serpent Skull", "multiplayer_overlays", "FM_Tat_M_018", "FM_Tat_F_018", "ZONE_RIGHT_ARM", 7500], ["The Wages of Sin", "multiplayer_overlays", "FM_Tat_M_019", "FM_Tat_F_019", "ZONE_TORSO", 12300], ["Dragon", "multiplayer_overlays", "FM_Tat_M_020", "FM_Tat_F_020", "ZONE_TORSO", 7500], ["Fiery Dragon", "multiplayer_overlays", "FM_Tat_M_022", "FM_Tat_F_022", "ZONE_RIGHT_LEG", 7300], ["Hottie", "multiplayer_overlays", "FM_Tat_M_023", "FM_Tat_F_023", "ZONE_LEFT_LEG", 7250], ["Flaming Cross", "multiplayer_overlays", "FM_Tat_M_024", "FM_Tat_F_024", "ZONE_TORSO", 11900], ["LS Bold", "multiplayer_overlays", "FM_Tat_M_025", "FM_Tat_F_025", "ZONE_TORSO", 2750], ["Smoking Dagger", "multiplayer_overlays", "FM_Tat_M_026", "FM_Tat_F_026", "ZONE_LEFT_LEG", 1750], ["Virgin Mary", "multiplayer_overlays", "FM_Tat_M_027", "FM_Tat_F_027", "ZONE_RIGHT_ARM", 7300], ["Mermaid", "multiplayer_overlays", "FM_Tat_M_028", "FM_Tat_F_028", "ZONE_RIGHT_ARM", 3250], ["Trinity Knot", "multiplayer_overlays", "FM_Tat_M_029", "FM_Tat_F_029", "ZONE_TORSO", 1000], ["Lucky Celtic Dogs", "multiplayer_overlays", "FM_Tat_M_030", "FM_Tat_F_030", "ZONE_TORSO", 5000], ["Lady M", "multiplayer_overlays", "FM_Tat_M_031", "FM_Tat_F_031", "ZONE_LEFT_ARM", 7500], ["Faith", "multiplayer_overlays", "FM_Tat_M_032", "FM_Tat_F_032", "ZONE_LEFT_LEG", 5100], ["Chinese Dragon", "multiplayer_overlays", "FM_Tat_M_033", "FM_Tat_F_033", "ZONE_LEFT_LEG", 5050], ["Flaming Shamrock", "multiplayer_overlays", "FM_Tat_M_034", "FM_Tat_F_034", "ZONE_TORSO", 2450], ["Dragon", "multiplayer_overlays", "FM_Tat_M_035", "FM_Tat_F_035", "ZONE_TORSO", 4950], ["Way of the Gun", "multiplayer_overlays", "FM_Tat_M_036", "FM_Tat_F_036", "ZONE_TORSO", 5100], ["Grim Reaper", "multiplayer_overlays", "FM_Tat_M_037", "FM_Tat_F_037", "ZONE_LEFT_LEG", 12250], ["Dagger", "multiplayer_overlays", "FM_Tat_M_038", "FM_Tat_F_038", "ZONE_RIGHT_ARM", 1150], ["Broken Skull", "multiplayer_overlays", "FM_Tat_M_039", "FM_Tat_F_039", "ZONE_RIGHT_LEG", 7500], ["Flaming Skull", "multiplayer_overlays", "FM_Tat_M_040", "FM_Tat_F_040", "ZONE_RIGHT_LEG", 7600], ["Dope Skull", "multiplayer_overlays", "FM_Tat_M_041", "FM_Tat_F_041", "ZONE_LEFT_ARM", 2600], ["Flaming Scorpion", "multiplayer_overlays", "FM_Tat_M_042", "FM_Tat_F_042", "ZONE_RIGHT_LEG", 2500], ["Indian Ram", "multiplayer_overlays", "FM_Tat_M_043", "FM_Tat_F_043", "ZONE_RIGHT_LEG", 7450], ["Stone Cross", "multiplayer_overlays", "FM_Tat_M_044", "FM_Tat_F_044", "ZONE_TORSO", 7500], ["Skulls and Rose", "multiplayer_overlays", "FM_Tat_M_045", "FM_Tat_F_045", "ZONE_TORSO", 10000], ["Lion", "multiplayer_overlays", "FM_Tat_M_047", "FM_Tat_F_047", "ZONE_RIGHT_ARM", 2500], ['Wolf', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_000_M', 'MP_Christmas2017_Tattoo_000_F', 'ZONE_TORSO', 1500], ['Mkb', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_001_M', 'MP_Christmas2017_Tattoo_001_F', 'ZONE_LEFT_ARM', 1900], ['Diabolo 1080', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_002_M', 'MP_Christmas2017_Tattoo_002_F', 'ZONE_TORSO', 1420], ['RedPep', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_003_M', 'MP_Christmas2017_Tattoo_003_F', 'ZONE_TORSO', 1600], ['DSnake', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_004_M', 'MP_Christmas2017_Tattoo_004_F', 'ZONE_LEFT_ARM', 2800], ['DWarrior', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_005_M', 'MP_Christmas2017_Tattoo_005_F', 'ZONE_TORSO', 4450], ['Jellyfish', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_006_M', 'MP_Christmas2017_Tattoo_006_F', 'ZONE_RIGHT_ARM', 2800], ['PSkin', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_007_M', 'MP_Christmas2017_Tattoo_007_F', 'ZONE_LEFT_ARM', 3150], ['DeadRome', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_008_M', 'MP_Christmas2017_Tattoo_008_F', 'ZONE_TORSO', 2950], ['IGnome', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_009_M', 'MP_Christmas2017_Tattoo_009_F', 'ZONE_TORSO', 2650], ['RWarrior', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_010_M', 'MP_Christmas2017_Tattoo_010_F', 'ZONE_TORSO', 3000], ['Skull', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_011_M', 'MP_Christmas2017_Tattoo_011_F', 'ZONE_TORSO', 3350], ['Catwoman', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_012_M', 'MP_Christmas2017_Tattoo_012_F', 'ZONE_RIGHT_ARM', 1050], ['Katana', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_013_M', 'MP_Christmas2017_Tattoo_013_F', 'ZONE_LEFT_ARM', 3450], ['Bracelet', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_014_M', 'MP_Christmas2017_Tattoo_014_F', 'ZONE_RIGHT_ARM', 850], ['Samurai', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_015_M', 'MP_Christmas2017_Tattoo_015_F', 'ZONE_TORSO', 3550], ['Raven', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_016_M', 'MP_Christmas2017_Tattoo_016_F', 'ZONE_TORSO', 3850], ['Wing', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_017_M', 'MP_Christmas2017_Tattoo_017_F', 'ZONE_RIGHT_ARM', 2900], ['Meat', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_018_M', 'MP_Christmas2017_Tattoo_018_F', 'ZONE_RIGHT_ARM', 2350], ['SForce', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_019_M', 'MP_Christmas2017_Tattoo_019_F', 'ZONE_TORSO', 2150], ['Jellyfish2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_020_M', 'MP_Christmas2017_Tattoo_020_F', 'ZONE_TORSO', 3200], ['Battle', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_021_M', 'MP_Christmas2017_Tattoo_021_F', 'ZONE_TORSO', 3750], ['RRider', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_022_M', 'MP_Christmas2017_Tattoo_022_F', 'ZONE_TORSO', 4000], ['Demon', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_023_M', 'MP_Christmas2017_Tattoo_023_F', 'ZONE_RIGHT_ARM', 3800], ['Dragon', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_024_M', 'MP_Christmas2017_Tattoo_024_F', 'ZONE_TORSO', 3150], ['FSnake', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_025_M', 'MP_Christmas2017_Tattoo_025_F', 'ZONE_LEFT_ARM', 3600], ['Skull2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_026_M', 'MP_Christmas2017_Tattoo_026_F', 'ZONE_TORSO', 2500], ['Swords', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_027_M', 'MP_Christmas2017_Tattoo_027_F', 'ZONE_TORSO', 3000], ['Bracelet2', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_028_M', 'MP_Christmas2017_Tattoo_028_F', 'ZONE_RIGHT_ARM', 1800], ['DDogs', 'mpchristmas2017_overlays', 'MP_Christmas2017_Tattoo_029_M', 'MP_Christmas2017_Tattoo_029_F', 'ZONE_LEFT_ARM', 3100], ['Knife', 'mpvinewood_overlays', 'MP_Vinewood_Tat_000_M', 'MP_Vinewood_Tat_000_F', 'ZONE_TORSO', 2850], ['Jackpot', 'mpvinewood_overlays', 'MP_Vinewood_Tat_001_M', 'MP_Vinewood_Tat_001_F', 'ZONE_TORSO', 2950], ['Cards', 'mpvinewood_overlays', 'MP_Vinewood_Tat_002_M', 'MP_Vinewood_Tat_002_F', 'ZONE_LEFT_ARM', 2650], ['Skull3', 'mpvinewood_overlays', 'MP_Vinewood_Tat_003_M', 'MP_Vinewood_Tat_003_F', 'ZONE_TORSO', 2600], ['LadyLuck', 'mpvinewood_overlays', 'MP_Vinewood_Tat_004_M', 'MP_Vinewood_Tat_004_F', 'ZONE_RIGHT_ARM', 3100], ['GetLucky', 'mpvinewood_overlays', 'MP_Vinewood_Tat_005_M', 'MP_Vinewood_Tat_005_F', 'ZONE_LEFT_ARM', 3000], ['Pattern', 'mpvinewood_overlays', 'MP_Vinewood_Tat_006_M', 'MP_Vinewood_Tat_006_F', 'ZONE_TORSO', 6500], ['777', 'mpvinewood_overlays', 'MP_Vinewood_Tat_007_M', 'MP_Vinewood_Tat_007_F', 'ZONE_TORSO', 2750], ['LuckySnake', 'mpvinewood_overlays', 'MP_Vinewood_Tat_008_M', 'MP_Vinewood_Tat_008_F', 'ZONE_TORSO', 3400], ['FillDeath', 'mpvinewood_overlays', 'MP_Vinewood_Tat_009_M', 'MP_Vinewood_Tat_009_F', 'ZONE_TORSO', 4000], ['Races', 'mpvinewood_overlays', 'MP_Vinewood_Tat_010_M', 'MP_Vinewood_Tat_010_F', 'ZONE_TORSO', 4150], ['Gamble', 'mpvinewood_overlays', 'MP_Vinewood_Tat_011_M', 'MP_Vinewood_Tat_011_F', 'ZONE_TORSO', 4000], ['LuckySkull', 'mpvinewood_overlays', 'MP_Vinewood_Tat_012_M', 'MP_Vinewood_Tat_012_F', 'ZONE_TORSO', 3100], ['Cowboy', 'mpvinewood_overlays', 'MP_Vinewood_Tat_013_M', 'MP_Vinewood_Tat_013_F', 'ZONE_LEFT_LEG', 2000], ['Lady', 'mpvinewood_overlays', 'MP_Vinewood_Tat_014_M', 'MP_Vinewood_Tat_014_F', 'ZONE_LEFT_ARM', 2400], ['Joker', 'mpvinewood_overlays', 'MP_Vinewood_Tat_015_M', 'MP_Vinewood_Tat_015_F', 'ZONE_TORSO', 3750], ['Ace', 'mpvinewood_overlays', 'MP_Vinewood_Tat_016_M', 'MP_Vinewood_Tat_016_F', 'ZONE_TORSO', 3000], ['LadyLuck2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_017_M', 'MP_Vinewood_Tat_017_F', 'ZONE_TORSO', 3800], ['Win', 'mpvinewood_overlays', 'MP_Vinewood_Tat_018_M', 'MP_Vinewood_Tat_018_F', 'ZONE_RIGHT_ARM', 3600], ['Excitement', 'mpvinewood_overlays', 'MP_Vinewood_Tat_019_M', 'MP_Vinewood_Tat_019_F', 'ZONE_LEFT_ARM', 2800], ['Dollar', 'mpvinewood_overlays', 'MP_Vinewood_Tat_020_M', 'MP_Vinewood_Tat_020_F', 'ZONE_RIGHT_LEG', 1000], ['Lady', 'mpvinewood_overlays', 'MP_Vinewood_Tat_021_M', 'MP_Vinewood_Tat_021_F', 'ZONE_TORSO', 3000], ['Cash', 'mpvinewood_overlays', 'MP_Vinewood_Tat_022_M', 'MP_Vinewood_Tat_022_F', 'ZONE_TORSO', 1500], ['Horseshoe', 'mpvinewood_overlays', 'MP_Vinewood_Tat_023_M', 'MP_Vinewood_Tat_023_F', 'ZONE_TORSO', 2750], ['Lips', 'mpvinewood_overlays', 'MP_Vinewood_Tat_024_M', 'MP_Vinewood_Tat_024_F', 'ZONE_TORSO', 2800], ['Queen', 'mpvinewood_overlays', 'MP_Vinewood_Tat_025_M', 'MP_Vinewood_Tat_025_F', 'ZONE_RIGHT_ARM', 1500], ['Rose', 'mpvinewood_overlays', 'MP_Vinewood_Tat_026_M', 'MP_Vinewood_Tat_026_F', 'ZONE_LEFT_ARM', 3150], ['Ball', 'mpvinewood_overlays', 'MP_Vinewood_Tat_027_M', 'MP_Vinewood_Tat_027_F', 'ZONE_LEFT_LEG', 1600], ['Skull4', 'mpvinewood_overlays', 'MP_Vinewood_Tat_028_M', 'MP_Vinewood_Tat_028_F', 'ZONE_RIGHT_ARM', 1450], ['Casino', 'mpvinewood_overlays', 'MP_Vinewood_Tat_029_M', 'MP_Vinewood_Tat_029_F', 'ZONE_TORSO', 3750], ['Cards2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_030_M', 'MP_Vinewood_Tat_030_F', 'ZONE_TORSO', 3400], ['Win2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_031_M', 'MP_Vinewood_Tat_031_F', 'ZONE_TORSO', 2650], ['Excitement2', 'mpvinewood_overlays', 'MP_Vinewood_Tat_032_M', 'MP_Vinewood_Tat_032_F', 'ZONE_TORSO', 4000]];
let tattoo = {
  openMenu: (player, shopId) => {
    if (_user.user.hasAnyWeapon(player)) return player.notify(`~r~Спрячьте оружие, мастер нервничает`);

    let m = _menu.menu.new(player, "", "Категории");

    switch (shopId) {
      case 94:
        m.sprite = "shopui_title_tattoos";
        break;

      case 95:
        m.sprite = "shopui_title_tattoos2";
        break;

      case 96:
        m.sprite = "shopui_title_tattoos3";
        break;

      case 97:
        m.sprite = "shopui_title_tattoos4";
        break;

      case 98:
        m.sprite = "shopui_title_tattoos5";
        break;

      default:
        m.title = 'Тату салон';
        break;
    }

    let categorys = [["Голова", "ZONE_HEAD"], ["Торс", "ZONE_TORSO"], ["Левая рука", "ZONE_LEFT_ARM"], ["Правая рука", "ZONE_RIGHT_ARM"], ["Левая нога", "ZONE_LEFT_LEG"], ["Правая нога", "ZONE_RIGHT_LEG"]];
    categorys.map(qs => {
      let list = config.filter(itm => itm[4] == qs[1]);
      if (_user.user.getSex(player)) list = list.filter(item => item[3]);else list = list.filter(item => item[2]);
      m.newItem({
        name: qs[0],
        more: "Вариаций: x" + list.length,
        onpress: () => {
          let srch = "";

          const op = () => {
            _user.user.takeOffCloth(player);

            if (srch) list = list.filter(item => item[0].toLowerCase().indexOf(srch) > -1);

            let submenu = _menu.menu.new(player, "Тату салон", "Список тату");

            submenu.onclose = () => {
              _user.user.resetCustomization(player);
            };

            submenu.newItem({
              name: "Поиск по названию",
              onpress: () => {
                _menu.menu.input(player, "Введите название для поиска").then(name => {
                  if (!name) srch = "";else srch = name.toLowerCase();
                  op();
                });
              }
            });

            if (list.length == 0) {
              submenu.newItem({
                name: "~r~Пусто"
              });
            } else {
              list.map(item => {
                if (_user.user.hasTattoo(player, item[1], _user.user.getSex(player) ? item[3] : item[2])) {
                  submenu.newItem({
                    name: item[0],
                    more: "~g~Набито",
                    desc: "Свести: ~g~$" + item[5] * 2,
                    onpress: () => {
                      if (!_user.user.hasTattoo(player, item[1], _user.user.getSex(player) ? item[3] : item[2])) return player.notify(`~r~Вы уже свели данное тату`);
                      if (_user.user.getCashMoney(player) < item[5] * 2) return player.notify(`~r~У вас недостаточно средств для оплаты услуг мастера`);

                      _user.user.removeCashMoney(player, item[5] * 2);

                      player.notify(`~g~Тату сведено`);

                      _user.user.log(player, "Tattoo", `Свёл тату ${mp.joaat(item[1])} ${mp.joaat(_user.user.getSex(player) ? item[3] : item[2])} $${item[5] * 2} ${shopId}`);

                      _coffer.coffer.addMoney(item[5] * 2 * 0.1);

                      _business.business.addMoney(shopId, item[5] * 2 * 0.9);

                      _user.user.removeTattoo(player, item[1], _user.user.getSex(player) ? item[3] : item[2]);
                    }
                  });
                } else {
                  let showed = false;
                  submenu.newItem({
                    name: item[0],
                    type: "list",
                    list: ["Предпросмотр", "Набить: ~g~$" + item[5]],
                    onpress: it => {
                      if (_user.user.hasTattoo(player, item[1], _user.user.getSex(player) ? item[3] : item[2])) return player.notify(`~r~Вы уже набили данное тату`);

                      if (it.listSelected == 0) {
                        if (showed) {
                          player.removeDecoration(mp.joaat(item[1]), mp.joaat(_user.user.getSex(player) ? item[3] : item[2]));
                          showed = false;
                        } else {
                          player.setDecoration(mp.joaat(item[1]), mp.joaat(_user.user.getSex(player) ? item[3] : item[2]));
                          showed = true;
                        }
                      } else {
                        if (_user.user.getCashMoney(player) < item[5]) return player.notify(`~r~У вас недостаточно средств для оплаты услуг мастера`);
                        if (player.tattoosList.length > 50) return player.notify(`~r~На вас так много тату, что уже нет места набивать`);

                        _user.user.removeCashMoney(player, item[5]);

                        player.notify(`~g~Тату набито`);

                        _user.user.log(player, "Tattoo", `Набил тату ${mp.joaat(item[1])} ${mp.joaat(_user.user.getSex(player) ? item[3] : item[2])} $${item[5]} ${shopId}`);

                        _user.user.addTattoo(player, item[1], _user.user.getSex(player) ? item[3] : item[2]);

                        _coffer.coffer.addMoney(item[5] * 0.1);

                        _business.business.addMoney(shopId, item[5] * 0.9);

                        player.setDecoration(mp.joaat(item[1]), mp.joaat(_user.user.getSex(player) ? item[3] : item[2]));
                      }
                    }
                  });
                }
              });
            }

            submenu.open();
          };

          op();
        }
      });
    });
    m.open();
  },
  list: [[324.2816, 180.2105, 102.5865, 94], [1864.066, 3746.909, 32.03188, 95], [-294.0927, 6200.76, 30.48712, 98], [-1155.336, -1427.223, 3.954459, 96], [1321.756, -1653.431, 51.27526, 97]],
  loadAll: function () {
    _methods.methods.debug('tattoo.loadAll');

    tattoo.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);

      _methods.methods.createBlip(shopPos, 75, 0, 0.8);

      _methods.methods.createStaticCheckpoint(shopPos.x, shopPos.y, shopPos.z, "Нажмите ~g~Е~s~ чтобы открыть меню");
    });
  },
  getInRadius: function (pos, radius = 2) {
    let shopId = -1;
    tattoo.list.forEach(function (item, idx) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(pos, shopPos) < radius) shopId = _methods.methods.parseInt(item[3]);
    });
    return shopId;
  },
  checkPosForOpenMenu: function (player) {
    try {
      let playerPos = player.position;
      let shopId = tattoo.getInRadius(playerPos, 2);
      if (shopId == -1) return;
      return tattoo.openMenu(player, shopId);

      switch (shopId) {
        case 94:
          player.call('client:menuList:showTattooShopMenu', ["shopui_title_tattoos", "shopui_title_tattoos", shopId]);
          break;

        case 95:
          player.call('client:menuList:showTattooShopMenu', ["shopui_title_tattoos2", "shopui_title_tattoos2", shopId]);
          break;

        case 96:
          player.call('client:menuList:showTattooShopMenu', ["shopui_title_tattoos3", "shopui_title_tattoos3", shopId]);
          break;

        case 97:
          player.call('client:menuList:showTattooShopMenu', ["shopui_title_tattoos4", "shopui_title_tattoos4", shopId]);
          break;

        case 98:
          player.call('client:menuList:showTattooShopMenu', ["shopui_title_tattoos5", "shopui_title_tattoos5", shopId]);
          break;
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  findNearest: function (pos) {
    _methods.methods.debug('tattoo.findNearest');

    let prevPos = new mp.Vector3(9999, 9999, 9999);
    tattoo.list.forEach(function (item) {
      let shopPos = new mp.Vector3(item[0], item[1], item[2]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(prevPos, pos)) prevPos = shopPos;
    });
    return prevPos;
  },
  buy: function (player, collection, overlay, zone, price, shopId) {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    switch (zone) {
      case "ZONE_HEAD":
        if (_user.user.get(player, 'tattoo_head_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_head_c", collection);

        _user.user.set(player, "tattoo_head_o", overlay);

        break;

      case "ZONE_TORSO":
        if (_user.user.get(player, 'tattoo_torso_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_torso_c", collection);

        _user.user.set(player, "tattoo_torso_o", overlay);

        break;

      case "ZONE_LEFT_ARM":
        if (_user.user.get(player, 'tattoo_left_arm_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_left_arm_c", collection);

        _user.user.set(player, "tattoo_left_arm_o", overlay);

        break;

      case "ZONE_RIGHT_ARM":
        if (_user.user.get(player, 'tattoo_right_arm_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_right_arm_c", collection);

        _user.user.set(player, "tattoo_right_arm_o", overlay);

        break;

      case "ZONE_RIGHT_LEG":
        if (_user.user.get(player, 'tattoo_right_leg_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_right_leg_c", collection);

        _user.user.set(player, "tattoo_right_leg_o", overlay);

        break;

      case "ZONE_LEFT_LEG":
        if (_user.user.get(player, 'tattoo_left_leg_c') != '') {
          player.notify("~r~Татуировку сначала нужно свести");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_left_leg_c", collection);

        _user.user.set(player, "tattoo_left_leg_o", overlay);

        break;
    }

    _user.user.log(player, "Tattoo", `Набил тату ${collection} ${overlay} ${zone} ${price} ${shopId}`);

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы набили татуировку');

    _user.user.updateTattoo(player);
  },
  buyPrint: function (player, collection, overlay, price) {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;

    if (_user.user.get(player, 'tprint_c') != '') {
      player.notify("~r~На данном предмете одежды уже есть принт");

      _user.user.updateTattoo(player);

      return;
    }

    _user.user.set(player, "tprint_c", collection);

    _user.user.set(player, "tprint_o", overlay);

    _user.user.removeMoney(player, price);

    _business.business.addMoney(166, price);

    _user.user.log(player, "Print", `Купил принт ${collection} ${overlay} ${price}`);

    player.notify('~g~Вы купили принт');

    _user.user.updateTattoo(player);
  },
  clear: function (player, zone, price, shopId) {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.getMoney(player) < price) {
      player.notify('~r~У вас недостаточно средств');
      return;
    }

    if (price < 1) return;
    let collection = '';
    let overlay = '';

    switch (zone) {
      case "ZONE_HEAD":
        if (_user.user.get(player, 'tattoo_head_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_head_c", collection);

        _user.user.set(player, "tattoo_head_o", overlay);

        break;

      case "ZONE_TORSO":
        if (_user.user.get(player, 'tattoo_torso_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_torso_c", collection);

        _user.user.set(player, "tattoo_torso_o", overlay);

        break;

      case "ZONE_LEFT_ARM":
        if (_user.user.get(player, 'tattoo_left_arm_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_left_arm_c", collection);

        _user.user.set(player, "tattoo_left_arm_o", overlay);

        break;

      case "ZONE_RIGHT_ARM":
        if (_user.user.get(player, 'tattoo_right_arm_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_right_arm_c", collection);

        _user.user.set(player, "tattoo_right_arm_o", overlay);

        break;

      case "ZONE_RIGHT_LEG":
        if (_user.user.get(player, 'tattoo_right_leg_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_right_leg_c", collection);

        _user.user.set(player, "tattoo_right_leg_o", overlay);

        break;

      case "ZONE_LEFT_LEG":
        if (_user.user.get(player, 'tattoo_left_leg_c') == '') {
          player.notify("~r~У вас нет татуировки");

          _user.user.updateTattoo(player);

          return;
        }

        _user.user.set(player, "tattoo_left_leg_c", collection);

        _user.user.set(player, "tattoo_left_leg_o", overlay);

        break;
    }

    _user.user.removeMoney(player, price);

    _business.business.addMoney(shopId, price);

    player.notify('~g~Вы свели татуировку');

    _user.user.updateTattoo(player);
  }
};
exports.tattoo = tattoo;
},{"../modules/methods":"qXSp","../business":"y5vZ","../user":"QE3B","../modules/menu":"Aiz7","../coffer":"sKID"}],"xTdX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickups = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _fuel = require("../business/fuel");

var _cloth = require("../business/cloth");

var _shop = require("../business/shop");

var _barberShop = require("../business/barberShop");

var _bank = require("../business/bank");

var _licenseCenter = require("../business/licenseCenter");

var _rent = require("../business/rent");

var _gun = require("../business/gun");

var _lsc = require("../business/lsc");

var _bar = require("../business/bar");

var _carWash = require("../business/carWash");

var _tattoo = require("../business/tattoo");

var _autosalon = require("../business/autosalon");

let distanceCheck = 1.4;
let pickups = {
  Red: [244, 67, 54, 100],
  Green: [139, 195, 74, 100],
  Blue: [33, 150, 243, 100],
  Yellow: [255, 235, 59, 100],
  Blue100: [187, 222, 251, 100],
  White: [255, 255, 255, 100],
  PrintShopPos: new mp.Vector3(-1234.7786865234375, -1477.7230224609375, 3.324739933013916),
  StockSapdPos: new mp.Vector3(477.2227, -984.3262, 23.91476),
  BankMazeLiftOfficePos: new mp.Vector3(-77.77799, -829.6542, 242.3859),
  BankMazeLiftStreetPos: new mp.Vector3(-66.66476, -802.0474, 43.22729),
  BankMazeLiftRoofPos: new mp.Vector3(-67.13605, -821.9, 320.2874),
  BankMazeLiftGaragePos: new mp.Vector3(-84.9765, -818.7122, 35.02804),
  BankMazeOfficePos: new mp.Vector3(-72.80013, -816.4397, 242.3859),
  LifeInvaderShopPos: new mp.Vector3(-1083.074, -248.3521, 36.76329),
  HackerSpaceShopPos: new mp.Vector3(522.0684, 167.0983, 98.38704),
  HackerSpaceOutPos: new mp.Vector3(1672.243, -26.09709, 172.7747),
  HackerSpaceInPos: new mp.Vector3(1671.604, -23.82703, 177.2864),
  MeriaUpPos: new mp.Vector3(-1395.997, -479.8439, 71.04215),
  MeriaDownPos: new mp.Vector3(-1379.659, -499.748, 32.15739),
  MeriaRoofPos: new mp.Vector3(-1369, -471.5994, 83.44699),
  MeriaGarPos: new mp.Vector3(-1360.679, -471.8841, 30.59572),
  MeriaHelpPos: new mp.Vector3(-555.69, -188.61, 37.23),
  SapdDutyPos: new mp.Vector3(457.5687, -992.9395, 29.69),
  SapdArrestPos: new mp.Vector3(459.6778, -989.071, 23.91487),
  SapdToCyberRoomPos: new mp.Vector3(464.357, -983.8818, 34.89194),
  SapdFromCyberRoomPos: new mp.Vector3(463.7193, -1003.186, 31.7847),
  SapdToBalconPos: new mp.Vector3(463.0852, -1009.47, 31.78511),
  SapdFromBalconPos: new mp.Vector3(463.5898, -1012.111, 31.9835),
  SapdToBalcon2Pos: new mp.Vector3(428.4888, -995.2952, 34.68689),
  SapdFromBalcon2Pos: new mp.Vector3(464.1708, -984.0346, 38.89184),
  SapdToInterrogationPos: new mp.Vector3(404.0302, -997.302, -100.004),
  SapdFromInterrogationPos: new mp.Vector3(446.7996, -985.8127, 25.67422),
  SheriffArrestPos: new mp.Vector3(-441.605, 6012.786, 26.985),
  SheriffArrestPos1: new mp.Vector3(1857.12, 3694.97, 29.25),
  PrisonArrestPos: new mp.Vector3(1690.606, 2591.926, 44.83793),
  PrisonPos1: new mp.Vector3(1846.5198, 2585.9008, 44.6720),
  PrisonPos2: new mp.Vector3(1774.8231, 2552.00925, 44.5649),
  UsmcPos1: new mp.Vector3(556.8799, -3119.107, 17.76859),
  UsmcPos2: new mp.Vector3(556.9783, -3120.458, 17.76858),
  UsmcPos11: new mp.Vector3(581.3184, -3119.271, 17.76858),
  UsmcPos22: new mp.Vector3(581.518, -3120.49, 17.76858),
  FibArrestPos: new mp.Vector3(2500.21, -409.59, 89.10),
  FibDutyPos: new mp.Vector3(131.0169, -729.158, 257.1521),
  FibLift0StationPos: new mp.Vector3(122.9873, -741.1865, 32.13323),
  FibLift1StationPos: new mp.Vector3(136.2213, -761.6816, 44.75201),
  FibLift2StationPos: new mp.Vector3(136.2213, -761.6816, 241.152),
  FibLift3StationPos: new mp.Vector3(114.9807, -741.8279, 257.1521),
  FibLift4StationPos: new mp.Vector3(141.4099, -735.3376, 261.8516),
  LicUpPos: new mp.Vector3(-1580.642, -561.7131, 107.523),
  LicDownPos: new mp.Vector3(-1581.576, -557.9908, 33.953),
  LicRoofPos: new mp.Vector3(-1581.576, -557.9908, 33.953),
  LicGaragePos: new mp.Vector3(-1540.117, -576.3737, 24.70784),
  LicBuyPos: new mp.Vector3(-1576.237, -579.495, 107.523),
  PrisonKeyPos: new mp.Vector3(1840.7513, 2529.2451, 44.67202),
  TrashKeyPos: new mp.Vector3(1569.828, -2130.211, 77.33018),
  BusKeyPos: new mp.Vector3(-675.2166, -2166.933, 4.992994),
  Taxi1KeyPos: new mp.Vector3(895.4368, -179.3315, 73.70035),
  Taxi2KeyPos: new mp.Vector3(896.4077, -1035.7718, 34.109),
  SunbKeyPos: new mp.Vector3(-1185.243, -1508.272, 3.379671),
  LabKeyPos: new mp.Vector3(3605.323, 3733.005, 28.6894),
  ConnorKeyPos: new mp.Vector3(-1158.08, -742.0112, 18.66016),
  BgstarKeyPos: new mp.Vector3(152.6678, -3077.842, 4.896314),
  BshotKeyPos: new mp.Vector3(-1178.1021, -891.6275, 12.7608),
  WapKeyPos: new mp.Vector3(598.5981, 90.37159, 91.82394),
  ScrapKeyPos: new mp.Vector3(-429.1001, -1728, 18.78384),
  PhotoKeyPos: new mp.Vector3(-1041.409, -241.3437, 36.84774),
  Trucker23KeyPos1: new mp.Vector3(858.682, -3203.116, 4.994998),
  Trucker23KeyPos2: new mp.Vector3(114.1641, -2569.154, 5.004592),
  Trucker23KeyPos3: new mp.Vector3(671.4843, -2667.671, 5.081176),
  Mail1KeyPos: new mp.Vector3(-409.8598, -2803.78, 5.000382),
  Mail2KeyPos: new mp.Vector3(78.81596, 112.1012, 80.16817),
  EmsDuty1Pos: new mp.Vector3(198.1601, -1646.53, 28.80321),
  EmsDuty2Pos: new mp.Vector3(265.9458, -1364.34, 23.53779),
  EmsTakeMedPos: new mp.Vector3(251.6622, -1346.598, 23.53781),
  EmsInPos: new mp.Vector3(279.73, -1349.40, 23.54),
  EmsOutPos: new mp.Vector3(341.09, -595.49, 27.79),
  EmsElevatorRoofPos: new mp.Vector3(339.11, -584.11, 73.17),
  EmsElevatorPos: new mp.Vector3(247.0811, -1371.92, 23.53779),
  AptekaPos: new mp.Vector3(318.3438, -1078.762, 18.68166),
  AptekaEnterPos1: new mp.Vector3(326.5005, -1074.198, 28.47986),
  AptekaEnterPos2: new mp.Vector3(325.4413, -1076.997, 18.68166),
  AptekaEnterPos11: new mp.Vector3(307.633544921875, -734.6121826171875, 28.316791534423828),
  AptekaEnterPos22: new mp.Vector3(305.29156494140625, -733.535888671875, 28.353723526000977),
  TheLostPos1: new mp.Vector3(982.47, -103.51, 73.848),
  TheLostPos2: new mp.Vector3(981.03, -101.79, 73.845),
  ElShopPos1: new mp.Vector3(-658.8024, -855.8863, 23.50986),
  ElShopPos2: new mp.Vector3(-658.6975, -854.5909, 23.50342),
  ElShopPos11: new mp.Vector3(1137.675, -470.7754, 65.66285),
  ElShopPos12: new mp.Vector3(1136.156, -470.4759, 65.70986),
  ClubGalaxyUserPos1: new mp.Vector3(-1569.33, -3016.98, -75.40616),
  ClubGalaxyUserPos2: new mp.Vector3(4.723007, 220.3487, 106.7251),
  ClubGalaxyVPos1: new mp.Vector3(-1640.193, -2989.592, -78.22095),
  ClubGalaxyVPos2: new mp.Vector3(-22.13015, 217.3953, 105.5861),
  ArcMotorsPos1: new mp.Vector3(-142.2805, -590.9449, 166.0),
  ArcMotorsPos2: new mp.Vector3(-144.3968, -577.2031, 31.42448),
  Apart19RoofPos: new mp.Vector3(109.9076, -867.6014, 133.7701),
  Apart16RoofPos: new mp.Vector3(-902.897, -369.9444, 135.2822),
  Apart5GaragePos: new mp.Vector3(-761.8995, 352.0111, 86.99801),
  Apart0GaragePos: new mp.Vector3(-15.46794, -612.5906, 34.86151),
  WzlInPos: new mp.Vector3(-569.2264, -927.8373, 35.83355),
  WzlOutPos: new mp.Vector3(-598.7546, -929.9592, 22.86355),
  Ems1InPos: new mp.Vector3(-292.4272, -602.7892, 47.43756),
  Ems1OutPos: new mp.Vector3(-292.3299, -600.8806, 32.55319),
  BannanaInPos: new mp.Vector3(-1387.63, -588.0929, 29.31953),
  BannanaOutPos: new mp.Vector3(-1388.737, -586.4232, 29.21938),
  ComedyInPos: new mp.Vector3(-458.3946, 284.7393, 77.52148),
  ComedyOutPos: new mp.Vector3(-430.0718, 261.1223, 82.00773),
  AutoRepairsPos1: new mp.Vector3(1130.324, -776.4052, 56.61017),
  AutoRepairsPos2: new mp.Vector3(1130.287, -778.5369, 56.62984),
  AutoRepairsPosShop: new mp.Vector3(1128.081, -780.6564, 56.62164),
  AutoRepairsPosCarShop: new mp.Vector3(1154.168, -785.3322, 56.59872),
  AutoRepairsPosCarPos: new mp.Vector3(1150.372, -776.313, 56.59872),
  EatPrisonPos: new mp.Vector3(1753.543, 2566.54, 44.56501),
  ClothMaskPos: new mp.Vector3(-1337.255, -1277.948, 3.872962),
  RoadWorkerStartPos: new mp.Vector3(52.84556, -722.4211, 30.7647),
  MainerStartPos: new mp.Vector3(2947.1118, 2745.2358, 42.37148),
  BuilderStartPos: new mp.Vector3(-142.2255, -936.2115, 28.29189),
  BuilderUpPos: new mp.Vector3(-155.5601, -945.4041, 268.1353),
  BuilderDownPos: new mp.Vector3(-163.4722, -942.6283, 28.28476),
  CleanerStartPos: new mp.Vector3(-1539.165, -448.0839, 34.88203),
  SpawnHelpPos: new mp.Vector3(-1026.957, -2734.395, 13.75665),
  InvaderPos1: new mp.Vector3(-1078.19, -254.3557, 43.02112),
  InvaderPos2: new mp.Vector3(-1072.305, -246.3927, 53.00602),
  House253Pos1: new mp.Vector3(-1788.01, 425.4173, 121.6412),
  House253Pos2: new mp.Vector3(-1787.942, 419.7598, 131.3078),
  House253Pos11: new mp.Vector3(-1798.054, 409.0267, 112.4533),
  House253Pos22: new mp.Vector3(-1799.5, 414.1857, 127.3076),
  House253Pos111: new mp.Vector3(-1838.613, 437.3826, 125.1088),
  House253Pos222: new mp.Vector3(-1843.037, 438.5938, 128.7066),
  StartHelpPos: new mp.Vector3(-1033.243, -2735.249, 19.16927),
  GrabPos: new mp.Vector3(973.4865, -2190.531, 29.55157),
  checkPressLAlt: function (player) {
    _methods.methods.debug('checkPressLAlt');

    if (!_user.user.isLogin(player)) return;
    let playerPos = player.position;
    if (_methods.methods.distanceToPos(pickups.BankMazeLiftGaragePos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.BankMazeLiftOfficePos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.BankMazeLiftStreetPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.BankMazeLiftRoofPos, playerPos) < distanceCheck) player.call('client:menuList:showMazeOfficeTeleportMenu');
    if (_methods.methods.distanceToPos(pickups.FibLift0StationPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.FibLift1StationPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.FibLift2StationPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.FibLift3StationPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.FibLift4StationPos, playerPos) < distanceCheck) player.call('client:menuList:showFibOfficeTeleportMenu');
    if (_methods.methods.distanceToPos(pickups.MeriaDownPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.MeriaGarPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.MeriaRoofPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.MeriaUpPos, playerPos) < distanceCheck) player.call('client:menuList:showGovOfficeTeleportMenu');
    if (_user.user.isGos(player)) _methods.methods.checkTeleport(player, pickups.PrisonPos1, pickups.PrisonPos2);

    _methods.methods.checkTeleport(player, pickups.AptekaEnterPos11, pickups.AptekaEnterPos22);

    _methods.methods.checkTeleport(player, pickups.UsmcPos1, pickups.UsmcPos2);

    _methods.methods.checkTeleport(player, pickups.UsmcPos11, pickups.UsmcPos22);

    _methods.methods.checkTeleport(player, pickups.EmsInPos, pickups.EmsOutPos);

    _methods.methods.checkTeleport(player, pickups.ComedyInPos, pickups.ComedyOutPos);

    _methods.methods.checkTeleport(player, pickups.ClubGalaxyUserPos1, pickups.ClubGalaxyUserPos2);

    _methods.methods.checkTeleport(player, pickups.Ems1OutPos, pickups.Ems1InPos);

    _methods.methods.checkTeleport(player, pickups.WzlInPos, pickups.WzlOutPos);

    _methods.methods.checkTeleport(player, pickups.LicDownPos, pickups.LicUpPos);

    _methods.methods.checkTeleport(player, pickups.BuilderDownPos, pickups.BuilderUpPos);

    _methods.methods.checkTeleport(player, pickups.InvaderPos2, pickups.InvaderPos1);

    _methods.methods.checkTeleport(player, pickups.House253Pos1, pickups.House253Pos2);

    _methods.methods.checkTeleport(player, pickups.House253Pos11, pickups.House253Pos22);

    _methods.methods.checkTeleport(player, pickups.House253Pos111, pickups.House253Pos222);

    _methods.methods.checkTeleport(player, pickups.EmsElevatorRoofPos, pickups.EmsElevatorPos);

    _methods.methods.checkTeleport(player, new mp.Vector3(486.0731, -1075.497, 28.00087), new mp.Vector3(486.0519, -1078.475, 28.19953));

    _methods.methods.checkTeleportVeh(player, pickups.ArcMotorsPos1, pickups.ArcMotorsPos2);

    _methods.methods.checkTeleportVeh(player, pickups.ClubGalaxyVPos1, pickups.ClubGalaxyVPos2);
  },
  checkPressE: function (player) {
    if (!_user.user.isLogin(player)) return;
    let playerPos = player.position;

    _tattoo.tattoo.checkPosForOpenMenu(player);

    _fuel.fuel.checkPosForOpenMenu(player);

    _carWash.carWash.checkPosForOpenMenu(player);

    _shop.shop.checkPosForOpenMenu(player);

    _bank.bank.checkPosForOpenMenu(player);

    _cloth.cloth.checkPosForOpenMenu(player);

    _licenseCenter.licenseCenter.checkPosForOpenMenu(player);

    _barberShop.barberShop.checkPosForOpenMenu(player);

    _bar.bar.checkPosForOpenMenu(player);

    _rent.rent.checkPosForOpenBikeMenu(player);

    _gun.gun.checkPosForOpenMenu(player);

    _lsc.lsc.checkPosForOpenMenu(player);

    _autosalon.autosalon.checkPosForOpenMenu(player);

    if (_methods.methods.distanceToPos(pickups.LifeInvaderShopPos, playerPos) < distanceCheck) player.call('client:menuList:showInvaderShopMenu');
    if (_methods.methods.distanceToPos(pickups.PrintShopPos, playerPos) < distanceCheck) player.call('client:menuList:showPrintShopMenu');
    if (_methods.methods.distanceToPos(pickups.BankMazeOfficePos, playerPos) < distanceCheck) player.call('client:menuList:showMazeOfficeMenu');
    if (_methods.methods.distanceToPos(pickups.MeriaHelpPos, playerPos) < distanceCheck) player.call('client:menuList:showMeriaMainMenu');
    if (_methods.methods.distanceToPos(pickups.Mail1KeyPos, playerPos) < distanceCheck || _methods.methods.distanceToPos(pickups.Mail2KeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehMailMenu');
    if (_methods.methods.distanceToPos(pickups.BusKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehBusMenu');
    if (_methods.methods.distanceToPos(pickups.Taxi1KeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehTaxi1Menu');
    if (_methods.methods.distanceToPos(pickups.Taxi2KeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehTaxi2Menu');
    if (_methods.methods.distanceToPos(pickups.BgstarKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehBugstarMenu');
    if (_methods.methods.distanceToPos(pickups.BshotKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehBshotMenu');
    if (_methods.methods.distanceToPos(pickups.SunbKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehSunsetBleachMenu');
    if (_methods.methods.distanceToPos(pickups.WapKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehWaterPowerMenu');
    if (_methods.methods.distanceToPos(pickups.ConnorKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehGardenerMenu');
    if (_methods.methods.distanceToPos(pickups.PhotoKeyPos, playerPos) < distanceCheck) player.call('client:menuList:showRentVehPhotoMenu');
    if (_methods.methods.distanceToPos(pickups.Trucker23KeyPos1, playerPos) < distanceCheck) player.call('client:menuList:showRentVehTruckerMenu', [1]);
    if (_methods.methods.distanceToPos(pickups.Trucker23KeyPos2, playerPos) < distanceCheck) player.call('client:menuList:showRentVehTruckerMenu', [2]);
    if (_methods.methods.distanceToPos(pickups.Trucker23KeyPos3, playerPos) < distanceCheck) player.call('client:menuList:showRentVehTruckerMenu', [3]);

    if (_user.user.isSapd(player)) {
      if (_methods.methods.distanceToPos(pickups.SapdArrestPos, playerPos) < distanceCheck) player.call('client:menuList:showSapdArrestMenu');
    }

    if (_user.user.isSheriff(player)) {
      if (_methods.methods.distanceToPos(pickups.SheriffArrestPos, playerPos) < distanceCheck) player.call('client:menuList:showSapdArrestMenu');
      if (_methods.methods.distanceToPos(pickups.SheriffArrestPos1, playerPos) < distanceCheck) player.call('client:menuList:showSapdArrestMenu');
    }

    if (_user.user.isSheriff(player) || _user.user.isFib(player) || _user.user.isSapd(player)) {
      if (_methods.methods.distanceToPos(pickups.PrisonArrestPos, playerPos) < distanceCheck) player.call('client:menuList:showSapdArrestMenu');
    }

    if (_user.user.isFib(player)) {
      if (_methods.methods.distanceToPos(pickups.FibArrestPos, playerPos) < distanceCheck) player.call('client:menuList:showSapdArrestMenu');
    }
  },
  createPickups: function () {
    _methods.methods.debug('createPickups');

    _methods.methods.createStaticCheckpointV(pickups.EatPrisonPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.PrisonPos1, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.PrisonPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.AptekaEnterPos11, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.AptekaEnterPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.AptekaEnterPos22, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.UsmcPos1, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.UsmcPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.UsmcPos11, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.UsmcPos22, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.TrashKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.BusKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Taxi1KeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Taxi2KeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.SunbKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.LabKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.ConnorKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.BgstarKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.BshotKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.WapKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.PhotoKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Trucker23KeyPos1, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Trucker23KeyPos2, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Trucker23KeyPos3, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Mail1KeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Mail2KeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.HackerSpaceShopPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.PrintShopPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.LifeInvaderShopPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.EmsInPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.EmsOutPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.EmsElevatorPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.EmsElevatorRoofPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BankMazeLiftOfficePos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BankMazeLiftStreetPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BankMazeLiftRoofPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BankMazeLiftGaragePos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BankMazeOfficePos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.MeriaUpPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.MeriaDownPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.MeriaRoofPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.MeriaGarPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.MeriaHelpPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.SapdArrestPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.PrisonKeyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.SheriffArrestPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.SheriffArrestPos1, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.PrisonArrestPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.FibArrestPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.FibLift0StationPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.FibLift1StationPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.FibLift2StationPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.FibLift3StationPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.FibLift4StationPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.ComedyInPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.ComedyOutPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.Apart0GaragePos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Apart5GaragePos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Apart16RoofPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.Apart19RoofPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.ClubGalaxyUserPos1, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.ClubGalaxyUserPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.ClubGalaxyVPos2, "Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом", 4, -1, pickups.Blue100, 0.3);

    _methods.methods.createStaticCheckpointV(pickups.ArcMotorsPos1, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 4, -1, pickups.Blue100, 0.3);

    _methods.methods.createStaticCheckpointV(pickups.ArcMotorsPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 4, -1, pickups.Blue100, 0.3);

    _methods.methods.createStaticCheckpointV(pickups.Ems1OutPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.Ems1InPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.WzlInPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.WzlOutPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.LicUpPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.LicDownPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.LicRoofPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.LicGaragePos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.LicBuyPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.RoadWorkerStartPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.MainerStartPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.BuilderStartPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.BuilderUpPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.BuilderDownPos, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.CleanerStartPos, 'Нажмите ~g~E~s~ чтобы открыть меню', 1, -1, pickups.Blue);

    _methods.methods.createStaticCheckpointV(pickups.InvaderPos1, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);

    _methods.methods.createStaticCheckpointV(pickups.InvaderPos2, 'Нажмите ~g~Left Alt~s~ чтобы воспользоваться пикапом', 1, -1, pickups.Blue100);
  }
};
exports.pickups = pickups;
},{"./methods":"qXSp","../user":"QE3B","../business/fuel":"nyp7","../business/cloth":"Lio2","../business/shop":"e2yF","../business/barberShop":"bktO","../business/bank":"MvN0","../business/licenseCenter":"uLEY","../business/rent":"G8F2","../business/gun":"Y0m3","../business/lsc":"C62B","../business/bar":"ZO2Y","../business/carWash":"L23J","../business/tattoo":"Iy5w","../business/autosalon":"JYAF"}],"iryQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCompanyName = void 0;

const getCompanyName = company => {
  switch (company) {
    case 'swater':
    case 'sground':
      return 'Humane Labs';

    case 'water':
      return 'Water & Power';

    case 'sunb':
      return 'Sunset Bleach';

    case 'bgstar':
      return 'Bugstars';

    case 'lawyer1':
      return 'Slaughter, Slaughter & Slaughter';

    case 'lawyer2':
      return 'Bullhead';

    case 'lawyer3':
      return 'Pearson Specter';

    case 'mail':
      return 'PostOp';

    case 'mail2':
      return 'GoPostal';

    case 'gr6':
      return 'Gruppe6';

    case 'three':
      return 'OConnor';

    case 'photo':
      return 'Life Invader';

    case 'taxi1':
      return 'Downtown Cab Co.';

    case 'taxi2':
      return 'Express Car Service';

    default:
      return 'Государство';
  }
};

exports.getCompanyName = getCompanyName;
},{}],"qXSp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.methods = exports.lastMessageLog = exports.DynamicCheckpoint = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _data = require("./data");

var _crypto = _interopRequireDefault(require("crypto"));

var _enums = require("../enums");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _coffer = require("../coffer");

var _child_process = require("child_process");

var _menu = require("./menu");

var _inventory = require("../inventory");

var _dispatcher = require("../managers/dispatcher");

var _fractions = require("../../util/fractions");

var _pickups = require("./pickups");

var _houses = require("../houses");

var _condo = require("../condo");

var _stock = require("../stock");

var _apartments = require("../apartments");

var _newrage = require("../../util/newrage");

var _loto = require("../../util/loto");

var _methods = require("../../util/methods");

var _logFractionGunEntity = require("./entity/logFractionGunEntity");

var _user2 = require("./entity/user");

var _company = require("../../util/company.names");

var _inventory2 = require("../../util/inventory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let lastMessageLog = [];
exports.lastMessageLog = lastMessageLog;
let checkPointStaticList = [];
let lotoMoney = 10;
let pedId = 0;
let containerDynamicHandle = [];

class DynamicCheckpoint {
  constructor(pos, message, handle, scale = 1, dimension = 0, color = [33, 150, 243, 100], type = 1) {
    methods.tempDynamicId++;
    const id = methods.tempDynamicId;
    this.id = id;
    this.type = type;
    this.position = pos;
    this.message = message;
    this.handle = handle;
    this.scale = scale;
    this.dimension = dimension;
    this.color = color;
    this.recreate();
  }

  recreate() {
    if (this.marker && mp.markers.exists(this.marker)) this.marker.destroy();

    if (this.colshape && mp.colshapes.exists(this.colshape)) {
      mp.players.toArray().filter(player => player.colshapeHandleId == this.id).map(target => {
        mp.events.call('playerExitColshape', target, this.colshape);
      });
      this.colshape.destroy();
    }

    this.marker = mp.markers.new(this.type, this.position, this.scale, {
      color: this.color ? this.color : undefined,
      dimension: this.dimension
    });
    this.colshape = mp.colshapes.newSphere(this.position.x, this.position.y, this.position.z, this.scale + 0.4, this.dimension);
    this.marker.dimension = this.dimension;
    this.colshape.dimension = this.dimension;
    this.colshape.dynamicData = {
      handle: this.handle,
      message: this.message,
      id: this.id
    };
  }

  delete() {
    if (mp.markers.exists(this.marker)) this.marker.destroy();

    if (mp.colshapes.exists(this.colshape)) {
      mp.players.toArray().filter(target => target.colshape == this.colshape).map(target => {
        mp.events.call('playerExitColshape', target, this.colshape);
      });
      this.colshape.destroy();
    }
  }

  updatePos(posnew) {
    this.position = posnew;
    setTimeout(() => {
      this.recreate();
    }, 100);
  }

  updateDimension(value) {
    this.dimension = value;
    setTimeout(() => {
      this.recreate();
    }, 100);
  }

  updatePosAndDimension(posnew, value) {
    this.position = posnew;
    this.dimension = value;
    setTimeout(() => {
      this.recreate();
    }, 100);
  }

  updateName(name) {
    this.message = name;
    this.recreate();
  }

}

exports.DynamicCheckpoint = DynamicCheckpoint;
mp.events.add('onKeyPress:E', player => {
  if (player.duelLobby && player.dimension != 0) return;
  if (player.keyEspam) return;
  player.keyEspam = true;
  setTimeout(() => {
    if (mp.players.exists(player)) player.keyEspam = false;
  }, 500);
  if (!_user.user.isLogin(player)) return;
  if (_user.user.isDead(player)) return;
  if (player.colshapeHandle) return player.colshapeHandle(player);
  let fndhandle = containerDynamicHandle.find(([pos, scale, handle, dimension, id]) => player.dist(pos) <= scale + 0.2 && (player.dimension == dimension || dimension == -1));
  if (fndhandle) return fndhandle[2](player);

  _houses.houses.getAllHouses().forEach((val, key) => {
    if (methods.distanceToPos(player.position, val.position) < 1.5) {
      let houseData = _houses.houses.getHouseData(key);

      if (!houseData) return;

      if (!houseData.get('is_buy')) {
        let m = _menu.menu.new(player, ``, `~b~Адрес: ~s~${houseData.get('address')} ${houseData.get('id')}`);

        m.sprite = "house";
        m.newItem({
          name: `Купить дом за ~g~$${methods.numberFormat(houseData.get('price'))}`,
          onpress: () => {
            _houses.houses.buy(player, houseData.id);
          }
        });
        if (houseData.int_x > 0) m.newItem({
          name: `~g~Осмотреть дом`,
          onpress: () => {
            _user.user.teleport(player, houseData.int_x, houseData.int_y, houseData.int_z, null, houseData.id);
          }
        });

        if (_user.user.get(player, 'job') == 'mail' || _user.user.get(player, 'job') == 'mail2') {
          if (!_data.Container.Has(houseData.get('id'), 'isMail')) m.newItem({
            name: `~g~Положить почту`,
            onpress: () => {
              player.call('sendMail', [houseData.id]);
            }
          });else m.newItem({
            name: `~o~Дом уже обслуживался`
          });
        }

        m.open();
      } else {
        if (houseData.get('int_x') == 0) {
          let m = _menu.menu.new(player, ``, `~b~Адрес: ~s~${houseData.get('address')} ${houseData.get('id')}`);

          m.sprite = "house";
          m.newItem({
            name: `~b~Владелец:~s~ ${houseData.get('name_user')}`
          });

          if (_user.user.get(player, 'job') == 'mail' || _user.user.get(player, 'job') == 'mail2') {
            if (!_data.Container.Has(houseData.get('id'), 'isMail')) m.newItem({
              name: `~g~Положить почту`,
              onpress: () => {
                player.call('sendMail', [houseData.id]);
              }
            });else m.newItem({
              name: `~o~Дом уже обслуживался`
            });
          }

          m.open();
        } else {
          let m = _menu.menu.new(player, `№${houseData.get('id')}`, `~b~Адрес: ~s~${houseData.get('address')} ${houseData.get('id')}`);

          m.newItem({
            name: `~b~Владелец:~s~ ${houseData.get('name_user')}`
          });
          m.newItem({
            name: `~g~Войти`,
            onpress: async () => {
              if (houseData.get('pin') > 0 && _user.user.getId(player) != houseData.get('id_user')) {
                if (player.spamProtect) return player.notify("~r~Подождите перед вводом пароля");
                player.spamProtect = true;
                setTimeout(() => {
                  if (mp.players.exists(player)) player.spamProtect = false;
                }, 5000);
                let q = await _menu.menu.input(player, "Введите пинкод", "", 10, "password");
                if (!q) return;
                let pass = methods.parseInt(q);
                if (pass == houseData.get('pin')) _user.user.teleport(player, houseData.int_x, houseData.int_y, houseData.int_z, null, houseData.id);else player.notify('~r~Вы ввели не правильный пинкод');
              } else _user.user.teleport(player, houseData.int_x, houseData.int_y, houseData.int_z, null, houseData.id);
            }
          });

          if (_user.user.get(player, 'job') == 'mail' || _user.user.get(player, 'job') == 'mail2') {
            if (!_data.Container.Has(houseData.get('id'), 'isMail')) m.newItem({
              name: `~g~Положить почту`,
              onpress: () => {
                player.call('sendMail', [houseData.id]);
              }
            });else m.newItem({
              name: `~o~Дом уже обслуживался`
            });
          }

          m.open();
        }
      }
    }
  });

  _condo.condo.getAllHouses().forEach((val, key) => {
    if (methods.distanceToPos(player.position, val.position) < 1.5) {
      let houseData = _condo.condo.getHouseData(key);

      if (!houseData) return;
      if (houseData.get('id_user') == 0) player.call('client:showCondoBuyMenu', [Array.from(houseData)]);else player.call('client:showCondoOutMenu', [Array.from(houseData)]);
    }
  });

  _stock.stock.getAll().forEach((pos, key) => {
    if (methods.distanceToPos(player.position, pos) < 1.5) {
      let houseData = _stock.stock.getData(key);

      if (!houseData) return;
      if (houseData.get('user_id') == 0) player.call('client:showStockBuyMenu', [Array.from(houseData)]);else player.call('client:showStockOutMenu', [Array.from(houseData)]);
    }
  });

  _enums.enums.buildListData.forEach((val, idx) => {
    let pos = new mp.Vector3(val[0], val[1], val[2]);

    if (methods.distanceToPos(player.position, pos) < 1.5) {
      player.call('client:showApartmentListMenu', [val[3], idx]);
    }
  });

  if (player.dimension > 100000 && player.dimension < 5000000) {
    _enums.enums.apartIntData.forEach(function (item) {
      let pos = new mp.Vector3(item[0], item[1], item[2]);

      if (methods.distanceToPos(player.position, pos) < 1.5) {
        let apartData = _apartments.apartments.getApartData(player.dimension - 100000);

        player.call('client:showApartmentInfoMenu', [Array.from(apartData)]);
      }
    });

    _enums.enums.houseIntData.forEach(function (item) {
      let pos = new mp.Vector3(item[0], item[1], item[2]);

      if (methods.distanceToPos(player.position, pos) < 1.5) {
        let apartData = _apartments.apartments.getApartData(player.dimension - 100000);

        player.call('client:showApartmentInfoMenu', [Array.from(apartData)]);
      }
    });
  } else if (player.dimension >= 5000000 && player.dimension < 5100000) {
    let houseData = _condo.condo.getHouseData(player.dimension - 5000000);

    if (houseData && methods.distanceToPos(player.position, new mp.Vector3(houseData.get('int_x'), houseData.get('int_y'), houseData.get('int_z'))) < 1.5) player.call('client:showCondoInMenu', [Array.from(houseData)]);
  } else if (player.dimension >= 5100000 && player.dimension < 5200000) {
    let houseData = _stock.stock.getData(player.dimension - 5100000);

    if (methods.distanceToPos(player.position, _stock.stock.exitPos) < 1.5) player.call('client:showStockInMenu', [Array.from(houseData)]);
  } else if (player.dimension > 0) {
    let houseData = _houses.houses.getHouseData(player.dimension);

    if (houseData && methods.distanceToPos(player.position, new mp.Vector3(houseData.get('int_x'), houseData.get('int_y'), houseData.get('int_z'))) < 1.5) {
      let m = _menu.menu.new(player, `№${houseData.get('id')}`, `~b~Адрес: ~s~${houseData.get('address')} ${houseData.get('id')}`);

      m.newItem({
        name: `~b~Владелец:~s~ ${houseData.get('name_user')}`
      });
      m.newItem({
        name: `~g~Выйти из дома`,
        onpress: async () => {
          _user.user.teleport(player, houseData.x, houseData.y, houseData.z, null, 0);
        }
      });
      if (_user.user.getId(player) == houseData.get('id_user')) m.newItem({
        name: `~y~Сменить пинкод`,
        onpress: async () => {
          let q = await _menu.menu.input(player, "Введите новый пинкод", "", 10, "password");
          if (!q) return;
          let pass = methods.parseInt(q);
          if (!pass || isNaN(pass) || pass < 1 || pass > 99999) return player.notify('~r~Вы ввели не правильный пинкод');

          _houses.houses.updatePin(houseData.id, pass);
        }
      });

      if (_user.user.get(player, 'job') == 'mail' || _user.user.get(player, 'job') == 'mail2') {
        if (!_data.Container.Has(houseData.get('id'), 'isMail')) m.newItem({
          name: `~g~Положить почту`,
          onpress: () => {
            player.call('sendMail', [houseData.id]);
          }
        });else m.newItem({
          name: `~o~Дом уже обслуживался`
        });
      }

      m.open();
    }

    let kitchen = _enums.enums.kitchenIntData.find(item => methods.distanceToPos(player.position, new mp.Vector3(item[0], item[1], item[2])) < 1.5);

    if (kitchen && houseData) {
      let m = _menu.menu.new(player, "Холодильник");

      m.newItem({
        name: "Открыть холодильник",
        onpress: () => {
          _menu.menu.close(player);

          _inventory.inventory.openInventory(player);
        }
      });
      m.newItem({
        name: "Улучшение",
        more: `Текущее: ${houseData.get('chest')}ур. (${methods.numberFormat(_inventory2.houseFridgeAmount[houseData.get('chest')] / 1000)} кг)`,
        onpress: () => {
          if (houseData.get('id_user') != _user.user.getId(player)) return player.notify("~r~Заказывать улучшения дома может только владелец");
          if (houseData.get('chest') != 0) return player.notify(`~r~Дальнейшее улучшение доступно на сайте gta-5.ru/trade`);

          let submenu = _menu.menu.new(player, "Выберите улучшение");

          submenu.newItem({
            name: `Ур. 1 (${methods.numberFormat(_inventory2.houseFridgeAmount[1] / 1000)} кг)`,
            more: `$${methods.numberFormat(_inventory2.houseFridgeCost)}`,
            onpress: () => {
              _user.user.accept(player, "Вы уверены?").then(status => {
                if (!status) return;
                if (houseData.get('chest') != 0) return player.notify(`~r~Дальнейшее улучшение доступно на сайте gta-5.ru/trade`);
                if (_user.user.getCashMoney(player) < _inventory2.houseFridgeCost) return player.notify("~r~У вас недостаточно средств");

                _user.user.removeCashMoney(player, _inventory2.houseFridgeCost);

                _houses.houses.setChestLevel(houseData.get('id'), 1);

                player.notify('~g~Заказ обработан');
              });
            }
          });
          submenu.newItem({
            name: `Ур. 2 (${methods.numberFormat(_inventory2.houseFridgeAmount[2] / 1000)} кг)`,
            onpress: () => {
              return player.notify(`~r~Данное улучшение доступно к приобретению на сайте gta-5.ru/trade`);
            }
          });
          submenu.open();
        }
      });
      m.open();
      return;
    }
  }

  if (_inventory.inventory.getNearestInventoriesPoints(player).length > 0) return _inventory.inventory.openInventory(player);

  _pickups.pickups.checkPressE(player);
});
mp.events.add('playerEnterColshape', (player, colshape) => {
  if (!colshape.dynamicData) return;
  let text = colshape.dynamicData.message;

  if (colshape.dynamicData.onenter) {
    colshape.dynamicData.handle(player);
    return;
  }

  if (colshape.dynamicData.handle) player.colshapeHandle = colshape.dynamicData.handle, player.colshapeHandleId = colshape.dynamicData.id;

  if (text.regexIndexOf(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, 0) == 0) {
    let res = text.replace(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, '');
    res = res[0].toUpperCase() + res.slice(1);

    _user.user.setHelpKey(player, text.split(/Нажмите ~[a-zA-Z]~/g)[1].split(/~[a-zA-Z]~ чтобы /g)[0], res, 10000);
  } else player.notify(text);

  player.colshape = colshape;
});
mp.events.add('playerExitColshape', (player, colshape) => {
  if (colshape && colshape.dynamicData && colshape.dynamicData.onLeave) {
    colshape.dynamicData.onLeave(player);
  }

  _user.user.removeHelpKey(player);

  _menu.menu.close(player);

  player.colshapeHandle = null;
  player.colshapeHandleId = null;
  player.colshape = null;
});
let ids = 10000000;

function calculateAttachPosition(position, rotation, offset) {
  if (typeof rotation == "number") rotation = new mp.Vector3(0, 0, rotation);

  const _rotation = new mp.Vector3(rotation.x / 180 * Math.PI, rotation.y / 180 * Math.PI, rotation.z / 180 * Math.PI);

  const cos_rx = Math.cos(_rotation.x);
  const cos_ry = Math.cos(_rotation.y);
  const cos_rz = Math.cos(_rotation.z);
  const sin_rx = Math.sin(_rotation.x);
  const sin_ry = Math.sin(_rotation.y);
  const sin_rz = Math.sin(_rotation.z);
  return new mp.Vector3(position.x + offset.x * cos_ry * cos_rz - offset.x * sin_rx * sin_ry * sin_rz - offset.y * cos_rx * sin_rz + offset.z * sin_ry * cos_rz + offset.z * sin_rx * cos_ry * sin_rz, position.y + offset.x * cos_ry * sin_rz + offset.x * sin_rx * sin_ry * cos_rz + offset.y * cos_rx * cos_rz + offset.z * sin_ry * sin_rz - offset.z * sin_rx * cos_ry * cos_rz, position.z - offset.x * cos_rx * sin_ry + offset.y * sin_rx + offset.z * cos_rx * cos_ry);
}

;
let methods = {
  getCompanyName: _company.getCompanyName,
  teleportVehicle: (vehicle, position, rotaion, dimension) => {
    if (!mp.vehicles.exists(vehicle)) return;
    vehicle.getOccupants().map(target => {
      if (typeof dimension === "number") target.dimension = dimension;

      _user.user.teleportProtect(target);
    });

    if (typeof dimension === "number") {
      vehicle.dimension = dimension;
    }

    if (typeof rotaion === "number") vehicle.rotation.z = rotaion;
    vehicle.position = position;
  },
  coordBoxToPoints: (crd, line) => {
    let polygon = [];
    const r = line / 2;
    polygon.push([crd.x - r, crd.y - r], [crd.x - r, crd.y + r], [crd.x + r, crd.y - r], [crd.x + r, crd.y + r]);
    return polygon;
  },
  pointInBox: (point, vs) => {
    let min1 = 99999999999999;
    let max1 = -1111111111111;
    let min2 = 99999999999999;
    let max2 = -1111111111111;

    for (let id in vs) {
      let item = vs[id];
      let item1 = item[0];
      let item2 = item[1];
      if (item1 < min1) min1 = item1;
      if (item2 < min2) min2 = item2;
      if (item1 > max1) max1 = item1;
      if (item2 > max2) max2 = item2;
    }

    let point1 = point[0];
    let point2 = point[1];
    if (point1 < min1) return false;
    if (point2 < min2) return false;
    if (point1 > max1) return false;
    if (point2 > max2) return false;
    return true;
  },
  filter: str => {
    if (!str) return str;
    if (typeof str !== "string") return str;
    return str.replace(/[^-0-9A-Zа-я-"<>/[\]() ]/gim, '').replace(/<script>/gi, '').replace(/<\/script>/gi, '').replace(/<body>/gi, '').replace(/<\/body>/gi, '').replace(/<html>/gi, '').replace(/<\/body>/gi, '');
  },
  model: model => {
    return model.replace(/[^a-z0-9]/gi, '');
  },
  hashToDb: hash => {
    return typeof hash === "string" ? mp.joaat(hash) : hash;
  },
  explodeDoorsList: [],
  calculateAttachPosition,
  setBlipAlert: (blip, time = 60000) => {
    if (!mp.blips.exists(blip)) return;
    let end = false;
    const changeShortRange = blip.shortRange;
    const baseScale = blip.scale;
    let big = false;
    if (changeShortRange) blip.shortRange = false;

    const interval_alert = () => {
      if (end) return;
      setTimeout(() => {
        if (end) return;
        if (!mp.blips.exists(blip)) return;
        if (!big) blip.scale = blip.scale * 1.5;else blip.scale = blip.scale / 1.5;
        big = !big;
        interval_alert();
      }, 500);
    };

    interval_alert();
    setTimeout(() => {
      if (!mp.blips.exists(blip)) return;
      end = true;
      if (changeShortRange) blip.shortRange = true;
      if (big) blip.scale /= 1.5;
    }, time);
  },
  getRandomPoint: (pos, range, notz = true) => {
    return new mp.Vector3(methods.getRandomInt(pos.x - range, pos.x + range), methods.getRandomInt(pos.y - range, pos.y + range), notz ? pos.z : methods.getRandomInt(pos.z - range, pos.z + range));
  },
  moveEntityToCoord: (entity, coord, distance, movez = false) => {
    let entitypos = entity.position;
    if (entitypos.x - coord.x < -distance) entitypos.x += distance;else if (entitypos.x - coord.x > distance) entitypos.x -= distance;
    if (entitypos.y - coord.y < -distance) entitypos.y += distance;else if (entitypos.y - coord.y > distance) entitypos.y -= distance;
    if (movez && entitypos.z - coord.z < -distance) entitypos.z += distance;else if (movez && entitypos.z - coord.z > distance) entitypos.z -= distance;
    entity.position = entitypos;
    return entitypos;
  },
  interpolateCoord: (pos1, pos2, position) => {
    let newPos = new mp.Vector3(pos1.x - pos2.x, pos1.y - pos2.y, pos1.z - pos2.z);
    newPos.x *= position;
    newPos.y *= position;
    newPos.z *= position;
    newPos.x += pos1.x;
    newPos.y += pos1.y;
    newPos.z += pos1.z;
    return newPos;
  },
  saveFractionLog: (name, doName, fractionId) => {
    _logFractionGunEntity.logFractionGunEntity.create({
      name: name,
      do: doName,
      fraction_id: fractionId,
      timestamp: methods.getTimeStamp()
    });
  },
  newDimention: () => {
    return ids++;
  },
  restartServer: () => {
    if (!methods.isTestServer()) (0, _child_process.exec)("pm2 restart ragemp");
  },
  isTestServer: () => {
    return !mp.config.announce;
  },
  sha256: function (text) {
    return _crypto.default.createHash('sha256').update(text).digest('hex');
  },
  playerDisableAllControls: function (player, disable) {
    try {
      player.call('modules:client:player:DisableAllControls', [disable]);
    } catch (e) {
      console.log(e);
    }
  },
  sleep: ms => new Promise(res => setTimeout(res, ms)),
  getRandomInt: function (min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
  },
  getRandomFloat: function () {
    return methods.getRandomInt(0, 10000) / 10000;
  },
  daysInMonth: function (month, year) {
    return new Date(year, month, 0).getDate();
  },
  distanceToPos: function (v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2) + Math.pow(v2.z - v1.z, 2)));
  },
  distanceToPos2D: function (v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2)));
  },
  removeQuotes: function (str) {
    if (typeof str != "string") return str;
    return str.replace('\'', '');
  },
  notifyWithPictureToAll: function (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) {
    mp.players.call("BN_ShowWithPicture", [title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor]);
  },
  notifyWithPictureToFraction: function (title, sender, message, notifPic, fractionId = 0, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.get(p, 'fraction_id') == fractionId) {
        try {
          p.notifyWithPicture(title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
        } catch (e) {}
      }
    });
  },
  notifyWithPictureToFraction2: function (title, sender, message, notifPic, fractionId = 0, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.get(p, 'fraction_id2') == fractionId) {
        try {
          p.notifyWithPicture(title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
        } catch (e) {}
      }
    });
  },
  notifyWithPictureToJob: function (title, sender, message, notifPic, job, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.get(p, 'job') == job) {
        try {
          p.notifyWithPicture(title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
        } catch (e) {}
      }
    });
  },
  notifyWithPictureToPlayer: function (p, title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) {
    if (mp.players.exists(p)) p.notifyWithPicture(title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
  },
  notifyToFraction: function (message, fractionId = 0) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.get(p, 'fraction_id') == fractionId) p.notify(message);
    });
  },
  notifyToAll: function (message) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p)) p.notify(message);
    });
  },
  getOrbitPosition: function (x, y, z, rot, range) {
    let newPos = new mp.Vector3(range * Math.sin(rot) + x, range * Math.cos(rot) + y, z);
    return newPos;
  },
  updatePlayersFractionType: function (fractionId, type) {
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.get(p, 'fraction_id2') == fractionId) _user.user.set(p, 'fractionType', type);
    });
  },
  getCountFractionUsers: function (fractionId, cb) {
    _user2.userEntity.count({
      where: {
        fraction_id: fractionId
      }
    }).then(count => {
      cb(count);
    });
  },
  getCountFraction2Users: function (fractionId, cb) {
    _user2.userEntity.count({
      where: {
        fraction_id2: fractionId
      }
    }).then(count => {
      cb(count);
    });
  },
  updateLoto: function () {
    let alllotoItems = _inventory.inventory.allItems().filter(item => item.item_id == _loto.itemLoto && item.key_id == 0);

    _loto.lotoList.map(loto => {
      let lotoItems = alllotoItems.filter(item => item.prefix == loto.prize);

      if (loto.count <= lotoItems.length) {
        let winner = (0, _methods.randomArrayEl)(lotoItems);
        lotoItems.map(items => {
          if (items.id == winner.id) {
            items.key_id = 1;
            methods.notifyWithPictureToAll('American Loto', "Розыгрыш $" + methods.numberFormat(loto.prize), `Победил номер билета: ${winner.id}`, "WEB_PILLPHARM", 1);

            if (items.owner_type == 1) {
              let target = _user.user.getPlayerById(items.owner_id);

              if (target) target.notify('~g~Ваш билет оказался выигрышным');
            }
          } else {
            items.key_id = -1;
          }

          _inventory.inventory.reloadInventoryEntity(items.owner_type, items.owner_id);

          _inventory.inventory.saveItem(items.id);
        });
      }
    });
  },
  resetLoto: function () {
    lotoMoney = methods.getRandomInt(400, 800);
  },
  secondsToTime: secs => {
    let hours = Math.floor(secs / (60 * 60));
    let divisor_for_minutes = secs % (60 * 60);
    let minutes = Math.floor(divisor_for_minutes / 60);
    let divisor_for_seconds = divisor_for_minutes % 60;
    let seconds = Math.ceil(divisor_for_seconds);
    return (hours ? hours + "ч. :" : "") + minutes + "м." + (secs < 60 ? ": " + seconds + "с." : "");
  },
  unixTimeStampToDateTime: function (timestamp) {
    let dateTime = new Date(timestamp * 1000);
    return `${methods.digitFormat(dateTime.getDate())}/${methods.digitFormat(dateTime.getMonth() + 1)}/${dateTime.getFullYear()} ${methods.digitFormat(dateTime.getHours())}:${methods.digitFormat(dateTime.getMinutes())}`;
  },
  unixTimeStampToDateTimeShort: function (timestamp) {
    let dateTime = new Date(timestamp * 1000);
    return `${methods.digitFormat(dateTime.getDate())}/${methods.digitFormat(dateTime.getMonth() + 1)} ${methods.digitFormat(dateTime.getHours())}:${methods.digitFormat(dateTime.getMinutes())}`;
  },
  getTimeStamp: function () {
    return Date.now() / 1000 | 0;
  },
  parseInt: function (str) {
    if (typeof str == "number") return Math.floor(str);
    return parseInt(str) || 0;
  },
  parseFloat: function (str) {
    if (typeof str == "number") return str;
    return parseFloat(str) || 0.0;
  },
  saveAll: function () {
    methods.saveAllAnother();
    methods.saveAllUser();
  },
  saveAllAnother: async function () {
    console.log('Save All Another');

    _coffer.coffer.save();

    setTimeout(() => {
      console.time('saveVehicle');
      mp.vehicles.forEach(v => {
        if (_vehicles.vehicles.exists(v)) {
          try {
            if (v.getVariable('container')) {
              _vehicles.vehicles.save(v.getVariable('container'));
            }
          } catch (e) {
            methods.debug(e);
          }
        }
      });
      console.timeEnd('saveVehicle');
    }, 10000);
  },
  saveAllUser: function () {
    console.log('Save All User', mp.players.length);
    console.time('saveAllUser');
    let time = methods.getTimeStamp();
    mp.players.forEach(p => {
      if (mp.players.exists(p)) {
        if (_user.user.isLogin(p)) {
          try {
            _user.user.saveAccount(p).then(notSaved => {
              if (notSaved) {
                p.notify('~r~Ошибка сохранения аккаунта, сообщите разработчикам');
                p.notify('~r~Обязательно запомните время');
                console.error(`SAVE ERROR: ${_user.user.get(p, 'id')} | ${_user.user.has(p, 'id')} | ${time} | ${notSaved}`);
                methods.saveLog("saveError", `SAVE ERROR: ${_user.user.get(p, 'id')} | ${_user.user.has(p, 'id')} | ${time} | ${notSaved}`);
              }
            });
          } catch (e) {
            console.error(e);
          }
        }
      }
    });
    console.timeEnd('saveAllUser');
  },
  createBlip: function (pos, sprite, color, scale, name, dimension) {
    if (scale == undefined) scale = 0.8;
    if (dimension == undefined) dimension = -1;
    if (name == undefined) return mp.blips.new(sprite, pos, {
      color: color,
      scale: scale,
      shortRange: true,
      dimension: dimension
    });
    return mp.blips.new(sprite, pos, {
      name: name,
      color: color,
      scale: scale,
      shortRange: true,
      dimension: dimension
    });
  },
  getVehicleInfo: function (model) {
    let hash;
    if (typeof model == "string") hash = mp.joaat(model);else hash = model;
    let vehInfo = _enums.enums.vehicleInfo;

    for (let item in vehInfo) {
      let vItem = vehInfo[item];
      if (vItem.hash == model || vItem.display_name == model || mp.joaat(vItem.display_name.toString().toLowerCase()) == model) return vItem;
    }

    return {
      id: 0,
      hash,
      display_name: 'Unknown',
      class_name: 'Unknown',
      stock: 205000,
      fuel_full: 75,
      fuel_min: 8
    };
  },
  getTaxiModalClass: function (model) {
    if (methods.getVehicleInfo(model).display_name == 'Oracle2') return 1;else if (methods.getVehicleInfo(model).display_name == 'Schafter4') return 2;else if (methods.getVehicleInfo(model).display_name == 'Revolter') return 3;else if (methods.getVehicleInfo(model).display_name == 'SC1') return 4;
    return 0;
  },
  getTaxiDistPrice: function (pos1, pos2, type = 0) {
    let typePrice = 20;
    let distance = methods.distanceToPos(pos1, pos2);

    switch (type) {
      case 1:
        typePrice = 16;
        break;

      case 2:
        typePrice = 13;
        break;

      case 3:
        typePrice = 7;
        break;

      case 4:
        typePrice = 5;
        break;
    }

    let price = methods.parseInt(distance / typePrice);
    if (price > 2000) price = 2000;
    return price;
  },
  createGlobalPedInVehicle: function (model, vehicleId) {
    mp.players.call('client:methods:createGlobalPedInVehicle', [pedId++, model, vehicleId]);
  },
  deleteGlobalPed: function (id) {
    mp.players.call('client:methods:deleteGlobalPed', [id]);
  },
  getRanks: _fractions.fractionUtil.getFractionRanks,
  getLeaderRank: _fractions.fractionUtil.getLeaderRank,
  getFractionRankName: _fractions.fractionUtil.getRankName,
  getFractionName: _fractions.fractionUtil.getFractionName,
  getMafiaName: _fractions.fractionUtil.getFractionName,
  getPlayerById: function (id) {
    let player = undefined;
    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p) && _user.user.getId(p) == id) {
        player = p;
      }
    });
    return player;
  },
  checkTeleport: function (player, pos1, pos2) {
    try {
      let distanceCheck = 1.4;
      let playerPos = player.position;
      if (methods.distanceToPos(pos1, playerPos) < distanceCheck) _user.user.teleport(player, pos2.x, pos2.y, pos2.z + 1);
      if (methods.distanceToPos(pos2, playerPos) < distanceCheck) _user.user.teleport(player, pos1.x, pos1.y, pos1.z + 1);
    } catch (e) {
      methods.debug(e);
    }
  },
  checkTeleportVeh: function (player, pos1, pos2) {
    try {
      let distanceCheck = 1.4;
      let playerPos = player.position;

      if (methods.distanceToPos(pos1, playerPos) < distanceCheck) {
        let notfree = mp.vehicles.toArray().find(vehicle => methods.distanceToPos(pos2, vehicle.position) < 3);

        if (notfree) {
          if (notfree.getOccupants().length == 0) notfree.destroy();else return player.notify('~r~Движение невозможно, место выхода занято другим ТС');
        }

        _user.user.teleportVeh(player, pos2.x, pos2.y, pos2.z);
      }

      if (methods.distanceToPos(pos2, playerPos) < distanceCheck) {
        let notfree = mp.vehicles.toArray().find(vehicle => methods.distanceToPos(pos1, vehicle.position) < 3);

        if (notfree) {
          if (notfree.getOccupants().length == 0) notfree.destroy();else return player.notify('~r~Движение невозможно, место выхода занято другим ТС');
        }

        _user.user.teleportVeh(player, pos1.x, pos1.y, pos1.z);
      }
    } catch (e) {
      methods.debug(e);
    }
  },
  getFractionAllowCarList: function (fractionId) {
    let carAllowList = [];

    for (let id in _enums.enums.vehicleList) {
      if (_enums.enums.vehicleList[id][6] == fractionId) {
        if (!!!mp.vehicles.toArray().find(veh => veh.getVariable('id') == id && veh.getVariable('fraction_id') == fractionId)) {
          let name = methods.getVehicleInfo(_enums.enums.vehicleList[id][0]);
          carAllowList.push({
            name: name.display_name,
            id: methods.parseInt(id),
            rank: methods.parseInt(_enums.enums.vehicleList[id][7])
          });
        }
      }
    }

    return carAllowList;
  },
  getNearestVehicleWithCoords: function (pos, r) {
    let nearest = undefined,
        dist;
    let min = r;
    methods.getListOfVehicleInRadius(pos, r).forEach(vehicle => {
      dist = methods.distanceToPos(pos, vehicle.position);

      if (dist < min) {
        nearest = vehicle;
        min = dist;
      }
    });
    return nearest;
  },
  getListOfVehicleInRadius: function (pos, r) {
    let returnVehicles = [];
    mp.vehicles.forEachInRange(pos, r, vehicle => {
      if (!_vehicles.vehicles.exists(vehicle)) return;
      returnVehicles.push(vehicle);
    });
    return returnVehicles;
  },
  getListOfVehicleNumberInRadius: function (pos, r) {
    let returnVehicles = [];
    mp.vehicles.forEachInRange(pos, r, vehicle => {
      if (!_vehicles.vehicles.exists(vehicle)) return;
      returnVehicles.push(vehicle.numberPlate);
    });
    return returnVehicles;
  },
  getNearestPlayerWithCoords: function (pos, r) {
    let nearest = undefined,
        dist;
    let min = r;
    methods.getListOfPlayerInRadius(pos, r).forEach(player => {
      if (!_user.user.isLogin(player)) return;
      dist = methods.distanceToPos(pos, player.position);

      if (dist < min) {
        nearest = player;
        min = dist;
      }
    });
    return nearest;
  },
  getNearestPlayerWithPlayer: function (pl, r) {
    let nearest = undefined,
        dist;
    let min = r;
    let pos = pl.position;
    methods.getListOfPlayerInRadius(pos, r).forEach(player => {
      if (!_user.user.isLogin(player)) return;
      if (pl == player) return;
      if (pl.dimension != player.dimension) return;
      dist = methods.distanceToPos(pos, player.position);

      if (dist < min) {
        nearest = player;
        min = dist;
      }
    });
    return nearest;
  },
  getListOfPlayerInRadius: function (pos, r) {
    let returnPlayers = [];
    mp.players.forEachInRange(pos, r, player => {
      if (!_user.user.isLogin(player)) return;
      returnPlayers.push(player);
    });
    return returnPlayers;
  },
  getSkillCountPlayers: function (job, skill = 500, cb) {
    _user2.userEntity.count({
      where: {
        ['skill_' + job]: skill
      }
    }).then(count => {
      cb(count);
    });
  },
  deleteObjectGlobal: function (x, y, z, hash) {
    mp.players.call('client:deleteObject', [x, y, z, hash]);
  },
  deleteObjectLocal: function (x, y, z, hash, range = 1) {
    mp.players.call('client:deleteObject', [x, y, z, hash, range]);
  },
  restoreObjectGlobal: function (x, y, z, hash) {},
  explodeObjectGlobal: function (x, y, z, hash) {
    mp.players.call('client:explodeObject', [x, y, z, hash]);
  },
  openDoorExplode: function (x, y, z, hash, player) {
    if (!player) return mp.players.call('client:openDoorExplode', [x, y, z, hash]);
    player.call('client:openDoorExplode', [x, y, z, hash]);
  },
  openDoorRestore: function (x, y, z, hash, player) {
    if (!player) return mp.players.call('client:openDoorRestore', [x, y, z, hash]);
    player.call('client:openDoorRestore', [x, y, z, hash]);
  },
  getCheckPointStaticList: function () {
    return checkPointStaticList;
  },
  createStaticCheckpointV: function (pos, message, scale, dimension, color, height) {
    return methods.createStaticCheckpoint(pos.x, pos.y, pos.z, message, scale, dimension, color, height);
  },
  tempDynamicId: 0,
  createExplopeCheckpoint: (pos, model, check, cb, chance = 6, bankreport = true, fraction) => {
    const hash = typeof model == "string" ? mp.joaat(model) : model;
    if (!(pos instanceof Array)) pos = [pos];
    pos.map(item => {
      methods.explodeDoorsList.push([item.x, item.y, item.z, hash]);
      let used = false;
      methods.createDynamicCheckpoint(item, "Нажмите ~g~E~w~ чтобы заложить C4", player => {
        const userid = _user.user.getId(player);

        if (check) {
          if (!check(player)) return;
        }

        if (player.vehicle) return;
        if (_user.user.isGos(player)) return player.notify("~r~Вы не можете закладывать бомбу");
        if (!_user.user.getItem(player, 262)) return player.notify("~r~У вас нет C4");
        if (used) return player.notify("~r~Кто то уже закладывает C4");
        if (methods.explodedDoors.find(itm => methods.distanceToPos(new mp.Vector3(itm[0], itm[1], itm[2]), new mp.Vector3(item.x, item.y, item.z)) < 5 && itm[3] == hash)) return player.notify("~r~Дверь уже взорвана");

        _user.user.playScenario(player, "CODE_HUMAN_MEDIC_TEND_TO_DEAD", item.x, item.y, item.z);

        _user.user.disableAllControls(player, true);

        used = true;
        setTimeout(() => {
          used = false;
        }, 27000);
        setTimeout(() => {
          if (!mp.players.exists(player)) return;
          setTimeout(() => {
            if (!mp.players.exists(player)) return;

            _user.user.stopScenario(player);

            setTimeout(() => {
              if (!mp.players.exists(player)) return;

              _user.user.disableAllControls(player, false);

              if (!_user.user.getItem(player, 262)) return player.notify("~r~У вас нет C4");

              _inventory.inventory.deleteItem(_user.user.getItem(player, 262).id);

              let object = mp.objects.new(-1110203649, new mp.Vector3(player.position.x, player.position.y, player.position.z - 1.0));
              player.notify("~g~Взрывчатка установлена, подождите 10 секунд");
              setTimeout(() => {
                if (mp.players.exists(player)) player.notify("~g~До взрыва осталось 5 секунд");
                setTimeout(() => {
                  if (mp.objects.exists(object)) object.destroy();
                  if (!mp.players.exists(player)) return;

                  if (methods.getRandomInt(1, 10) <= chance) {
                    _user.user.log(player, "ExplodeDoor", `успешно заложил C4 ${bankreport ? "С сигнализацией" : "Без сигнализации"}`);

                    if (bankreport) {
                      if (fraction) {
                        _dispatcher.dispatcher.sendLocalPos("Код 0", `В ${model == 3309500160 ? 'хранилище казино' : 'банке'} сработала сигнализация`, player.position, fraction, true);
                      } else {
                        _dispatcher.dispatcher.sendPos("Код 0", `В ${model == 3309500160 ? 'хранилище казино' : 'банке'} сработала сигнализация`, player.position);
                      }
                    }

                    methods.openDoorExplode(item.x, item.y, item.z, hash);
                    methods.explodedDoors.push([item.x, item.y, item.z, hash]);
                    if (cb) cb(player);
                  } else {
                    _user.user.log(player, "ExplodeDoor", `НЕуспешно заложил C4`);

                    if (mp.players.exists(player)) player.notify("~r~Взрывчатка не сработала");
                  }
                }, 5000);
              }, 5000);
            }, 4000);
          }, 10000);
        }, 5000);
      }, 2, 0, [0, 0, 0, 0]);
    });
  },
  createDynamicCheckpoint: (pos, message, handle, scale = 1, dimension = 0, color = [33, 150, 243, 100], height, type = 1) => {
    return new DynamicCheckpoint(pos, message, handle, scale, dimension, color, type);
  },
  createEnterCheckpoint: (pos, handle, scale = 1, dimension = 0, color = null, onLeave) => {
    methods.tempDynamicId++;
    const id = methods.tempDynamicId;
    let colshapes = [];
    let markers = [];
    if (!(pos instanceof Array)) pos = [pos];
    pos.map(item => {
      containerDynamicHandle.push([item, scale, handle, dimension, id]);
      let colshape = mp.colshapes.newSphere(item.x, item.y, item.z, scale + 0.4, dimension);
      colshape.dynamicData = {
        handle,
        id,
        onenter: true,
        onLeave
      };

      if (color) {
        markers.push(mp.markers.new(1, item, scale, {
          color: color ? color : undefined,
          dimension
        }));
      }

      colshapes.push(colshape);
    });
    let res = {
      delete: () => {
        containerDynamicHandle.map(([_q, _a, _b, _c, ids], index) => {
          if (ids == id) containerDynamicHandle.splice(index, 1);
        });
        colshapes.forEach(item => {
          if (mp.colshapes.exists(item) && item.dynamicData && item.dynamicData.id == id) item.destroy();
        });
        markers.map(item => {
          item.destroy();
        });
        res = undefined;
      },
      updatePos: posnew => {
        containerDynamicHandle.map(([qpos, _a, _b, _c, ids], index) => {
          if (ids == id) qpos = posnew;
        });
        colshapes.forEach(item => {
          if (mp.colshapes.exists(item) && item.dynamicData && item.dynamicData.id == id) item.position = posnew;
        });
        markers.map(item => {
          item.position = posnew;
        });
      },
      updateName: name => {
        colshapes.forEach(item => {
          if (mp.colshapes.exists(item) && item.dynamicData && item.dynamicData.id == id) item.dynamicData.message = name;
        });
      }
    };
    return res;
  },
  getTimeWithoutSec: function () {
    let dateTime = new Date();
    return `${methods.digitFormat(dateTime.getHours())}:${methods.digitFormat(dateTime.getMinutes())}`;
  },
  getTime: function () {
    let dateTime = new Date();
    return `${methods.digitFormat(dateTime.getHours())}:${methods.digitFormat(dateTime.getMinutes())}:${methods.digitFormat(dateTime.getSeconds())}`;
  },
  getDate: function () {
    let dateTime = new Date();
    return `${methods.digitFormat(dateTime.getDate())}/${methods.digitFormat(dateTime.getMonth() + 1)}/${methods.digitFormat(dateTime.getFullYear())}`;
  },
  debugEnable: false,
  sequelizeEnable: false,
  debug: function (...text) {
    if (!methods.isTestServer() && !methods.debugEnable) return;
    lastMessageLog.push(...text);
    if (lastMessageLog.length > 100) lastMessageLog.splice(0, lastMessageLog.length - 100);
    console.log(`[${methods.getTime()}]`, ...text);
  },
  debugSeq: function (...text) {
    if (!methods.sequelizeEnable) return;
    console.log(`[${methods.getTime()}]`, text[0]);
  },
  debugStart: function (name) {
    if (!methods.isTestServer() && !methods.debugEnable) return;
    console.time('saveBusiness');
  },
  debugEnd: function (name) {
    if (!methods.isTestServer() && !methods.debugEnable) return;
    console.timeEnd(name);
  },
  convertNumberToHash: function (number) {
    return mp.joaat(number.toString().toUpperCase());
  },
  escapeRegExp: function (str) {
    return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  },
  replaceAll: function (str, find, replace) {
    return str.replace(new RegExp(methods.escapeRegExp(find), 'g'), replace);
  },
  createStaticCheckpoint: function (x, y, z, message, scale, dimension, color, height) {
    if (scale == undefined) scale = 1;
    if (color == undefined) color = [33, 150, 243, 100];
    if (height == undefined) height = scale;
    if (dimension == undefined) dimension = -1;else dimension = methods.parseInt(dimension);
    let checkpointID = checkPointStaticList.length;
    checkPointStaticList.push({
      x,
      y,
      z,
      color,
      scale,
      height
    });
    if (message != undefined) _data.Container.Set(999999, 'checkpointStaticLabel' + checkpointID, message);
    mp.markers.new(1, new mp.Vector3(x, y, z), scale, {
      color: color,
      dimension: dimension
    });
    return checkpointID;
  },
  digitFormat: function (number) {
    return ("0" + number).slice(-2);
  },
  numberFormat: function (currentMoney) {
    return currentMoney.toString().replace(/.+?(?=\D|$)/, function (f) {
      return f.replace(/(\d)(?=(?:\d\d\d)+$)/g, "$1,");
    });
  },
  saveLog: function (name, log) {
    _fs.default.appendFile("log/" + name + ".log", `[${methods.getDate()}] [${methods.getTime()}] ${log}\n`, function (err) {
      if (err) {
        methods.createFile("log/" + name + ".log");
        return methods.debug(err);
      }
    });
  },
  createFile: function (filename) {
    _fs.default.open(filename, 'r', function (err, fd) {
      if (err) {
        _fs.default.writeFile(filename, '', function (err) {
          if (err) methods.debug(err);else methods.debug("The file was saved!");
        });
      } else {
        methods.debug("The file exists!");
      }
    });
  },
  loadInteriorCheckpoints: function () {
    _enums.enums.houseIntData.forEach(function (item) {
      let checkpoint = methods.createStaticCheckpoint(item[0], item[1], item[2], "Нажмите ~g~Е~s~ чтобы открыть меню");
    });

    _enums.enums.apartIntData.forEach(function (item) {
      let checkpoint = methods.createStaticCheckpoint(item[0], item[1], item[2], "Нажмите ~g~Е~s~ чтобы открыть меню");
    });

    _enums.enums.kitchenIntData.forEach(function (item) {
      let checkpoint = methods.createStaticCheckpoint(item[0], item[1], item[2], "Нажмите ~g~Е~s~ чтобы открыть меню кухни");
    });

    _enums.enums.buildListData.forEach(function (item) {
      let checkpoint = methods.createStaticCheckpoint(item[0], item[1], item[2], "Нажмите ~g~Е~s~ чтобы открыть меню");
      let blip = methods.createBlip(new mp.Vector3(item[0], item[1], item[2]), 475, 0, 0.4, 'Апартаменты');
    });
  },
  loadAllBlips: function () {
    methods.createBlip(new mp.Vector3(-1581.81, -903.71, 8.20), 641, 0, 0.8, 'Авторынок');
    methods.createBlip(new mp.Vector3(-2303.5, 3388.43, 31.25), 598, 0, 0.8, 'United States Marine Corps');
    methods.createBlip(new mp.Vector3(437.5687, -982.9395, 30.69), 60, 0, 0.8, 'Police Department');
    methods.createBlip(new mp.Vector3(-448.6859, 6012.703, 30.71638), 60, 16, 0.8, 'Sheriff Department');
    methods.createBlip(new mp.Vector3(1853.22, 3686.6796875, 33.2670), 60, 16, 0.8, 'Sheriff Department');
    methods.createBlip(new mp.Vector3(-138.8656, -634.0953, 168.8204), 535, 67, 0.8, 'Arcadius - Бизнес Центр');
    methods.createBlip(new mp.Vector3(-66.66476, -802.0474, 44.22729), 475, 59, 0.8, 'Государственный банк "Maze"');
    methods.createBlip(new mp.Vector3(1830.489, 2603.093, 45.8891), 238, 0, 0.8, 'Федеральная тюрьма');
    methods.createBlip(new mp.Vector3(-546.04, -202.54, 38.23), 419, 0, 0.8, 'Здание правительства');
    methods.createBlip(new mp.Vector3(354.65, -595.92, 28.79), 489, 59, 0.8, 'Здание больницы LS');
    methods.createBlip(new mp.Vector3(46.947, -1753.859, 46.508), 78, 68, 0.4, 'Торговый центр MegaMoll');
    methods.createBlip(new mp.Vector3(-3544, 6135, 0), 68, 59, 0.8, 'Рыбалка запрещена');
    methods.createBlip(new mp.Vector3(4989, 1712, 0), 68, 59, 0.8, 'Рыбалка запрещена');
    methods.createBlip(new mp.Vector3(-1337.255, -1277.948, 3.872962), 362, 0, 0.8, 'Магазин масок');
    methods.createBlip(new mp.Vector3(-1516.71, 851.46, 181.59), 78, 71, 0.8, 'Украинское посольство');
    methods.createBlip(new mp.Vector3(-1366.50, 56.68, 54.10), 78, 4, 0.8, 'Русское посольство');
    methods.createBlip(new mp.Vector3(-348.33, 178.55, 87.92), 78, 1, 0.8, 'Японское посольство');
    methods.createBlip(new mp.Vector3(-1886.83, 2049.96, 140.98), 78, 2, 0.8, 'Итальянское посольство');
  },
  explodedDoors: [],
  createEvent: (id, name, x, y, z, range) => {
    const item = {
      id,
      name,
      x,
      y,
      z,
      range
    };
    mapEventList.push(item);
    mp.players.call('mapEvent:new', [JSON.stringify(item)]);
  },
  removeEvent: id => {
    mapEventList.map((item, i) => {
      if (item.id === id) mapEventList.splice(i, 1);
    });
    mp.players.call('mapEvent:remove', [id]);
  }
};
exports.methods = methods;
let mapEventList = [];
mp.events.add('playerJoin', player => {
  if (methods.isTestServer()) player.call('server:test', [_newrage.RAGE_BETA]);
  player.call('client:explodeDoorsAll', [JSON.stringify(methods.explodeDoorsList)]);
  player.call('mapEvent:load', [JSON.stringify(mapEventList)]);
  setTimeout(() => {
    if (!mp.players.exists(player)) return;
    methods.explodedDoors.forEach(item => {
      methods.openDoorExplode(item[0], item[1], item[2], item[3], player);
    });
  }, 5000);
});

function dec2binInt(decString) {
  let bufferSize = 13;
  let bufferMax = 10000000000000;
  let remainder;
  let padDecString;
  let bufferArray = new Array();
  let indexArray;
  let lengthArray;
  let zeroIndex;
  let roundNumberFigures;
  let indexFigures;
  let binArray = new Array("000", "001", "010", "011", "100", "101", "110", "111");
  let outputBin;
  let checkAllZero;
  roundNumberFigures = Math.floor((Math.floor(Math.log(Math.pow(10, decString.length)) / Math.LN2) + 1) / 3) * 3 + 3;
  let carry;
  let temp;
  remainder = decString.length - Math.floor(decString.length / bufferSize) * bufferSize;
  padDecString = decString;

  if (remainder != 0) {
    for (let index = remainder; index < bufferSize; index++) {
      padDecString = "0" + padDecString;
    }
  }

  indexArray = 0;

  for (let index = 0; index < padDecString.length; index += bufferSize) {
    bufferArray[indexArray] = parseInt(padDecString.substr(index, bufferSize), 10);
    indexArray++;
  }

  lengthArray = indexArray;
  outputBin = "";
  indexFigures = 0;
  let zerosCount = 0;
  checkAllZero = 1;

  while (indexFigures < roundNumberFigures && checkAllZero != 0) {
    carry = 0;
    checkAllZero = 0;

    for (let index = 0; index < lengthArray; index++) {
      bufferArray[index] += carry * bufferMax;
      temp = Math.floor(bufferArray[index] / 8);
      carry = bufferArray[index] - temp * 8;
      bufferArray[index] = temp;
      checkAllZero += bufferArray[index];
    }

    outputBin = binArray[carry] + outputBin;

    if (indexFigures != 0) {
      indexFigures += 3;
    } else {
      if (binArray[carry].indexOf("1") != -1) {
        indexFigures = 3 - binArray[carry].indexOf("1");
        zerosCount += 2 - binArray[carry].indexOf("1");
      } else {
        zerosCount += 3;
      }
    }
  }

  if (outputBin.indexOf("1") == -1) {
    outputBin = "0";
  } else {
    outputBin = outputBin.substr(outputBin.indexOf("1"));
  }

  return outputBin;
}

function dec2binFrac(decString, numberFigures, intPartIsZero) {
  let bufferSize = 15;
  let bufferMax = 1000000000000000;
  let remainder;
  let padDecString;
  let bufferArray = new Array();
  let indexArray;
  let lengthArray;
  let zeroIndex;
  let roundNumberFigures;
  let indexFigures;
  let binArray = new Array("000", "001", "010", "011", "100", "101", "110", "111");
  let outputBin;
  let checkAllZero;
  let zerosCount;
  roundNumberFigures = Math.floor(numberFigures / 3) * 3 + 3;
  let carry;
  let temp;
  remainder = decString.length - Math.floor(decString.length / bufferSize) * bufferSize;
  padDecString = decString;

  if (remainder != 0) {
    for (let index = remainder; index < bufferSize; index++) {
      padDecString += "0";
    }
  }

  indexArray = 0;

  for (let index = 0; index < padDecString.length; index += bufferSize) {
    bufferArray[indexArray] = parseInt(padDecString.substr(index, bufferSize), 10);
    indexArray++;
  }

  lengthArray = indexArray;
  outputBin = "";

  if (intPartIsZero == 0) {
    indexFigures = 0;
  } else {
    indexFigures = -1;
  }

  zerosCount = 0;
  checkAllZero = 1;

  while (indexFigures < roundNumberFigures && checkAllZero != 0) {
    carry = 0;
    checkAllZero = 0;

    for (let index = lengthArray - 1; index >= 0; index--) {
      bufferArray[index] = bufferArray[index] * 8 + carry;
      carry = Math.floor(bufferArray[index] / bufferMax);
      bufferArray[index] -= carry * bufferMax;
      checkAllZero += bufferArray[index];
    }

    outputBin += binArray[carry];

    if (indexFigures != -1) {
      indexFigures += 3;
    } else {
      if (binArray[carry].indexOf("1") != -1) {
        indexFigures = 3 - binArray[carry].indexOf("1");
        zerosCount += binArray[carry].indexOf("1");
      } else {
        zerosCount += 3;
      }
    }
  }

  if (outputBin.length < numberFigures) {
    temp = numberFigures - outputBin.length;

    for (let index = 0; index < temp; index++) {
      outputBin += "0";
    }
  } else {
    outputBin = outputBin.substr(0, zerosCount + numberFigures);
  }

  return outputBin;
}

function bin2decInt(binString) {
  let bufferSize = 15;
  let bufferMax = 1000000000000000;
  let bufferArray = new Array();
  let bufferLength;
  let remainder;
  let padString;
  let decString;
  let temp;

  if (binString.length < 1024) {
    bufferLength = Math.floor((Math.floor(Math.log(Math.pow(2, binString.length)) / Math.LN10) + 1) / bufferSize) + 1;
  } else {
    bufferLength = Math.floor((Math.floor(308.2547) + 1) / bufferSize) + 1;
    ;
  }

  remainder = binString.length - Math.floor(binString.length / 3) * 3;
  padString = binString;

  if (remainder != 0) {
    for (let index = 0; index < 3 - remainder; index++) {
      padString = "0" + padString;
    }
  }

  for (let index = 0; index < bufferLength; index++) {
    bufferArray[index] = 0;
  }

  for (let indexBin = 0; indexBin < padString.length; indexBin += 3) {
    let carry = parseInt(padString.substr(indexBin, 3), 2);

    for (let index = bufferLength - 1; index >= 0; index--) {
      bufferArray[index] = bufferArray[index] * 8 + carry;
      carry = Math.floor(bufferArray[index] / bufferMax);
      bufferArray[index] -= carry * bufferMax;
    }
  }

  decString = "";

  for (let index = 0; index < bufferLength; index++) {
    for (let index2 = 0; index2 < bufferSize - (bufferArray[index] + "").length; index2++) {
      decString += "0";
    }

    decString += bufferArray[index];
  }

  temp = -1;

  for (let index = 0; index < decString.length; index++) {
    if (decString.charAt(index) != "0") {
      temp = index;
      break;
    }
  }

  if (temp == -1) {
    decString = "0";
  } else {
    decString = decString.substr(temp);
  }

  return decString;
}

function bin2decFrac(binString, numberFigures) {
  let bufferSize = 13;
  let bufferMax = 10000000000000;
  let bufferLength;
  let remainder;
  let bufferArray = new Array();
  let indexArray;
  let lengthArray;
  let padString;
  let carry;
  let temp;
  let decString;
  bufferLength = Math.floor(numberFigures / bufferSize) + 1;
  remainder = binString.length - Math.floor(binString.length / 3) * 3;
  padString = binString;

  if (remainder != 0) {
    for (let index = 0; index < 3 - remainder; index++) {
      padString = padString + "0";
    }
  }

  for (let index = 0; index < bufferLength; index++) {
    bufferArray[index] = 0;
  }

  for (let indexBin = padString.length - 3; indexBin >= 0; indexBin -= 3) {
    carry = parseInt(padString.substr(indexBin, 3), 2);

    for (let index = 0; index < bufferLength; index++) {
      bufferArray[index] += carry * bufferMax;
      temp = Math.floor(bufferArray[index] / 8);
      carry = bufferArray[index] - temp * 8;
      bufferArray[index] = temp;
    }
  }

  decString = "";

  for (let index = 0; index < bufferLength; index++) {
    for (let index2 = 0; index2 < bufferSize - (bufferArray[index] + "").length; index2++) {
      decString += "0";
    }

    decString += bufferArray[index];
  }

  temp = decString.length;

  if (decString.length < numberFigures) {
    for (let index = 0; index < numberFigures - temp; index++) {
      decString += "0";
    }
  } else {
    decString = decString.substr(0, numberFigures);
  }

  return decString;
}

function roundBinary(binString, carry) {
  let roundString;
  let sum;
  let digit;

  if (carry == 1) {
    roundString = "";

    for (let index = binString.length - 1; index >= 0; index--) {
      digit = parseInt(binString.charAt(index), 10);

      if (carry == 1 && digit == 1) {
        sum = 0;
        carry = 1;
      } else if (carry == 0 && digit == 0) {
        sum = 0;
        carry = 0;
      } else {
        sum = 1;
        carry = 0;
      }

      roundString = sum + roundString;
    }

    if (carry == 1) {
      roundString = carry + roundString;
    }
  } else {
    roundString = binString;
  }

  return roundString;
}

function bin2hex(binNumber) {
  let arrayHex = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F");
  let hexNumber;
  hexNumber = "";

  for (let index = 0; index < binNumber.length; index += 4) {
    hexNumber += arrayHex[parseInt(binNumber.substr(index, 4), 2)];
  }

  return hexNumber;
}

function hex2bin(hexNumber) {
  let hexaString = "0123456789ABCDEF";
  let binaryArray = new Array("0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111");
  let binaryString;
  binaryString = "";

  for (let index = 0; index < hexNumber.length; index++) {
    binaryString += binaryArray[hexaString.indexOf(hexNumber.charAt(index))];
  }

  return binaryString;
}

function fastDec2Bin(compareArray, numberCompare, expression) {
  let binString;
  binString = "";

  for (let index = 0; index < numberCompare; index++) {
    if (expression - compareArray[index] >= 0) {
      expression -= compareArray[index];
      binString += "1";
    } else {
      binString += "0";
    }
  }

  return binString;
}

function fastBin2Dec(binString) {
  let decNumber;
  decNumber = 0;

  for (let index = 0; index < binString.length; index++) {
    if (binString.charAt(index) == "1") {
      decNumber += Math.pow(2, binString.length - index - 1);
    }
  }

  return decNumber;
}

function padZerosLeft(expression, numberZeros) {
  for (let index = 0; index < numberZeros; index++) {
    expression = "0" + expression;
  }

  return expression;
}

function padZerosRight(expression, numberZeros) {
  for (let index = 0; index < numberZeros; index++) {
    expression = expression + "0";
  }

  return expression;
}

function completeZerosLeft(expression, length) {
  return padZerosLeft(expression.substr(0, length), length - expression.length);
}

function completeZerosRight(expression, length) {
  return padZerosRight(expression.substr(0, length), length - expression.length);
}

function validateExpression(expression, numberFigures, reference) {
  let newExpression;
  let validChar;

  for (let index = 0; index < expression.length; index++) {
    validChar = 0;

    for (let index2 = 0; index2 < reference.length; index2++) {
      if (expression.charAt(index) == reference.charAt(index2)) {
        validChar = 1;
      }
    }

    if (validChar == 0) {
      expression = "0";
      break;
    }
  }

  if (expression.length < numberFigures) {
    newExpression = expression;

    for (let index = 0; index < numberFigures - expression.length; index++) {
      newExpression = reference.charAt(0) + newExpression;
    }
  }

  if (expression.length >= numberFigures) {
    newExpression = expression.substr(0, numberFigures);
  }

  return newExpression;
}

function validateBinary(expression, numberFigures) {
  return validateExpression(expression, numberFigures, "01");
}

function validateHexadecimal(expression, numberFigures) {
  return validateExpression(expression.toUpperCase(), numberFigures, "0123456789ABCDEF");
}

function integerFitRange(value, min, max) {
  let temp;
  temp = parseInt(Math.floor(value) + "");

  if (temp < min) {
    temp = min;
  }

  if (temp > max) {
    temp = max;
  }

  return temp;
}

function ScientificNumber(sign, firstCoefficient, otherCoefficients, exponent) {
  this.sign = sign;
  this.firstCoefficient = firstCoefficient;
  this.otherCoefficients = otherCoefficients;
  this.exponent = exponent;
  this.NaN = 0;
  this.infinity = 0;
  this.getNumber = ScientificNumber_getNumber;
  this.parse = ScientificNumber_parse;
  this.round = ScientificNumber_round;
  this.roundRemoveExtraZeros = ScientificNumber_roundRemoveExtraZeros;
}

function ScientificNumber_getNumber() {
  let sign;

  if (this.NaN == 0) {
    if (this.sign == "-") {
      sign = "-";
    } else {
      sign = "";
    }

    if (this.infinity == 0) {
      return sign + this.firstCoefficient + "." + this.otherCoefficients + "E" + this.exponent;
    } else {
      return sign + "infinity";
    }
  } else {
    return "NaN";
  }
}

function ScientificNumber_parse(numberString) {
  let char;
  let state;
  let PLUS;
  let MINUS;
  let DOT;
  let NZF;
  let F;
  let Z;
  let E;
  let sign;
  let coefficientFirst;
  let coefficientOthers;
  let expSign;
  let exponent;
  let noZeroCoefficientOthers;
  let temp;
  PLUS = "+";
  MINUS = "-";
  DOT = ".";
  NZF = "123456789";
  F = "0123456789";
  Z = "0";
  E = "Ee";
  sign = "+";
  coefficientFirst = "";
  coefficientOthers = "";
  expSign = 1;
  let shift = 0;
  exponent = "";
  state = 0;

  for (let index = 0; index < numberString.length; index++) {
    char = numberString.charAt(index);

    switch (state) {
      case 0:
        state = -1;

        if (PLUS.indexOf(char) != -1) {
          state = 1;
          sign = "+";
        }

        if (MINUS.indexOf(char) != -1) {
          state = 2;
          sign = "-";
        }

        if (NZF.indexOf(char) != -1) {
          state = 3;
          sign = "+";
          coefficientFirst = char;
        }

        if (DOT.indexOf(char) != -1) {
          state = 4;
          sign = "+";
          shift--;
        }

        if (Z.indexOf(char) != -1) {
          state = 5;
          sign = "+";
        }

        break;

      case 1:
        state = -1;

        if (NZF.indexOf(char) != -1) {
          state = 3;
          coefficientFirst = char;
        }

        if (DOT.indexOf(char) != -1) {
          state = 4;
          shift--;
        }

        if (Z.indexOf(char) != -1) {
          state = 5;
        }

        break;

      case 2:
        state = -1;

        if (NZF.indexOf(char) != -1) {
          state = 3;
          coefficientFirst = char;
        }

        if (DOT.indexOf(char) != -1) {
          state = 4;
          shift--;
        }

        if (Z.indexOf(char) != -1) {
          state = 5;
        }

        break;

      case 3:
        state = -1;

        if (DOT.indexOf(char) != -1) {
          state = 6;
        }

        if (F.indexOf(char) != -1) {
          state = 3;
          shift++;
          coefficientOthers += char;
        }

        if (E.indexOf(char) != -1) {
          state = 9;
        }

        break;

      case 4:
        state = -1;

        if (NZF.indexOf(char) != -1) {
          state = 8;
          coefficientFirst = char;
        }

        if (Z.indexOf(char) != -1) {
          state = 7;
          shift--;
        }

        break;

      case 5:
        state = -1;

        if (NZF.indexOf(char) != -1) {
          state = 3;
          coefficientFirst = char;
        }

        if (DOT.indexOf(char) != -1) {
          state = 4;
          shift--;
        }

        if (Z.indexOf(char) != -1) {
          state = 5;
        }

        break;

      case 6:
        state = -1;

        if (F.indexOf(char) != -1) {
          state = 6;
          coefficientOthers += char;
        }

        if (E.indexOf(char) != -1) {
          state = 9;
        }

        break;

      case 7:
        state = -1;

        if (Z.indexOf(char) != -1) {
          state = 7;
          shift--;
        }

        if (NZF.indexOf(char) != -1) {
          state = 8;
          coefficientFirst = char;
        }

        if (E.indexOf(char) != -1) {
          state = 9;
        }

        break;

      case 8:
        state = -1;

        if (F.indexOf(char) != -1) {
          state = 8;
          coefficientOthers += char;
        }

        if (E.indexOf(char) != -1) {
          state = 9;
        }

        break;

      case 9:
        state = -1;

        if (PLUS.indexOf(char) != -1) {
          state = 10;
          expSign = 1;
        }

        if (MINUS.indexOf(char) != -1) {
          state = 11;
          expSign = -1;
        }

        if (F.indexOf(char) != -1) {
          state = 12;
          expSign = 1;
          exponent += char;
        }

        break;

      case 10:
        state = -1;

        if (F.indexOf(char) != -1) {
          state = 12;
          exponent += char;
        }

        break;

      case 11:
        state = -1;

        if (F.indexOf(char) != -1) {
          state = 12;
          exponent += char;
        }

        break;

      case 12:
        state = -1;

        if (F.indexOf(char) != -1) {
          state = 12;
          exponent += char;
        }

        break;
    }
  }

  noZeroCoefficientOthers = "";

  if (state == -1) {
    if (numberString.toLowerCase() == "infinity") {
      this.sign = "+";
      this.firstCoefficient = "";
      this.otherCoefficients = "";
      this.exponent = 0;
      this.NaN = 0;
      this.infinity = 1;
      return 0;
    } else if (numberString.toLowerCase() == "+infinity") {
      this.sign = "+";
      this.firstCoefficient = "";
      this.otherCoefficients = "";
      this.exponent = 0;
      this.NaN = 0;
      this.infinity = 1;
      return 0;
    } else if (numberString.toLowerCase() == "-infinity") {
      this.sign = "-";
      this.firstCoefficient = "";
      this.otherCoefficients = "";
      this.exponent = 0;
      this.NaN = 0;
      this.infinity = 1;
      return 0;
    } else {
      this.sign = "";
      this.firstCoefficient = "";
      this.otherCoefficients = "";
      this.exponent = 0;
      this.NaN = 1;
      this.infinity = 0;
      return -1;
    }
  }

  state = 0;

  for (let index = coefficientOthers.length - 1; index >= 0; index--) {
    char = coefficientOthers.charAt(index);

    switch (state) {
      case 0:
        if (Z.indexOf(char) != -1) {
          state = 1;
        }

        if (NZF.indexOf(char) != -1) {
          state = 2;
          noZeroCoefficientOthers = char + noZeroCoefficientOthers;
        }

        break;

      case 1:
        if (Z.indexOf(char) != -1) {
          state = 1;
        }

        if (NZF.indexOf(char) != -1) {
          state = 2;
          noZeroCoefficientOthers = char + noZeroCoefficientOthers;
        }

        break;

      case 2:
        if (F.indexOf(char) != -1) {
          state = 2;
          noZeroCoefficientOthers = char + noZeroCoefficientOthers;
        }

        break;
    }
  }

  if (exponent == "") {
    exponent = "0";
  }

  exponent = parseInt(exponent, 10) * expSign + shift + "";

  if (noZeroCoefficientOthers == "") {
    noZeroCoefficientOthers = "0";
  }

  if (coefficientFirst == "") {
    coefficientFirst = "0";
    noZeroCoefficientOthers = "0";
    expSign = "+";
    exponent = "0";
  }

  this.sign = sign;
  this.firstCoefficient = coefficientFirst;
  this.otherCoefficients = noZeroCoefficientOthers;
  this.exponent = parseInt(exponent, 10);
  this.NaN = 0;
  this.infinity = 0;
  return 0;
}

function ScientificNumber_round(numberFigures) {
  let otherCoefficients;
  let completeNumber;
  let char;
  let carry;
  let sum;
  let roundedNumber;
  otherCoefficients = completeZerosRight(this.otherCoefficients, numberFigures);
  completeNumber = this.firstCoefficient + otherCoefficients;

  if (parseInt(completeNumber.charAt(completeNumber.length - 1), 10) >= 5) {
    carry = 1;
  } else {
    carry = 0;
  }

  completeNumber = completeNumber.substr(0, completeNumber.length - 1);
  roundedNumber = "";

  for (let index = completeNumber.length - 1; index >= 0; index--) {
    char = completeNumber.charAt(index);
    sum = parseInt(char, 10) + carry;

    if (sum == 10) {
      sum = 0;
      carry = 1;
    } else {
      carry = 0;
    }

    roundedNumber = sum + roundedNumber;
  }

  if (carry == 1) {
    this.firstCoefficient = "1";
    this.otherCoefficients = roundedNumber;
    this.exponent = this.exponent + 1;
  } else {
    this.firstCoefficient = roundedNumber.substr(0, 1);
    this.otherCoefficients = roundedNumber.substr(1);
  }
}

function ScientificNumber_roundRemoveExtraZeros(numberFigures) {
  this.round(numberFigures);
  this.parse(this.getNumber());
}

function DecimalNumber(decInt, decFrac, sign, status) {
  this.integer = decInt;
  this.fractional = decFrac;
  this.sign = sign;
  this.status = status;
  this.getNumber = DecimalNumber_getNumber;
  this.fromScientific = DecimalNumber_fromScientific;
  this.fromSingle = DecimalNumber_fromSingle;
  this.fromDouble = DecimalNumber_fromDouble;
}

function DecimalNumber_getNumber() {
  if (this.status == "NaN") {
    return this.status;
  } else if (this.status == "infinity") {
    return this.sign + this.status;
  } else {
    return this.sign + this.integer + "." + this.fractional;
  }
}

function DecimalNumber_fromScientific(sciNumber, expMin, expMax) {
  let integer;
  let fractional;

  if (sciNumber.NaN == 0) {
    if (sciNumber.infinity == 1) {
      this.integer = "0";
      this.fractional = "0";
      this.sign = sciNumber.sign;
      this.status = "infinity";
    } else if (sciNumber.exponent >= expMin && sciNumber.exponent <= expMax) {
      if (sciNumber.exponent < 0) {
        integer = "0";
        fractional = padZerosLeft(sciNumber.firstCoefficient + sciNumber.otherCoefficients, -1 * sciNumber.exponent - 1);
      }

      if (sciNumber.exponent >= 0) {
        integer = sciNumber.firstCoefficient + sciNumber.otherCoefficients.substr(0, sciNumber.exponent);
        integer = padZerosRight(integer, sciNumber.exponent - sciNumber.otherCoefficients.length);
        fractional = sciNumber.otherCoefficients.substr(sciNumber.exponent);

        if (fractional == "") {
          fractional = "0";
        }
      }

      this.integer = integer;
      this.fractional = fractional;
      this.sign = sciNumber.sign;
      this.status = "normal";
    } else if (sciNumber.exponent < expMin) {
      this.integer = "0";
      this.fractional = "0";
      this.sign = sciNumber.sign;
      this.status = "normal";
    } else if (sciNumber.exponent > expMax) {
      this.integer = "";
      this.fractional = "";
      this.sign = sciNumber.sign;
      this.status = "infinity";
    }
  } else {
    this.integer = "";
    this.fractional = "";
    this.sign = "";
    this.status = "NaN";
  }
}

function DecimalNumber_fromSingle(ieeeNumber) {
  let mantissa;
  let exponent;
  let sign;
  let binInt;
  let binFrac;
  let decInt;
  let decFrac;
  let status;
  let temp;
  mantissa = ieeeNumber.mantissa;
  exponent = ieeeNumber.exponent;
  sign = ieeeNumber.sign;

  if (exponent == 128) {
    if (parseInt(mantissa, 10) == 0) {
      status = "infinity";
    } else {
      status = "NaN";
    }
  } else {
    if (exponent == -127) {
      if (parseInt(mantissa, 10) == 0) {
        status = "zero";
      } else {
        exponent = -126;
        mantissa = "0" + mantissa;
        status = "denormalized";
      }
    } else {
      mantissa = "1" + mantissa;
      status = "normalized";
    }

    temp = mantissa.length;

    for (let index = 0; index < 24 - temp; index++) {
      mantissa = mantissa + "0";
    }

    for (let index = 0; index < -exponent - 1; index++) {
      mantissa = "0" + mantissa;
    }

    for (let index = 0; index < exponent - 23; index++) {
      mantissa = mantissa + "0";
    }

    binInt = mantissa.substr(0, exponent + 1);
    binFrac = mantissa.substr(binInt.length);
    decInt = bin2decInt(binInt);
    decFrac = bin2decFrac(binFrac, 149);
  }

  this.integer = decInt;
  this.fractional = decFrac;
  this.sign = sign;
  this.status = status;
}

function DecimalNumber_fromDouble(ieeeNumber) {
  let mantissa;
  let exponent;
  let sign;
  let binInt;
  let binFrac;
  let decInt;
  let decFrac;
  let status;
  let temp;
  mantissa = ieeeNumber.mantissa;
  exponent = ieeeNumber.exponent;
  sign = ieeeNumber.sign;

  if (exponent == 1024) {
    if (parseInt(mantissa, 10) == 0) {
      status = "infinity";
    } else {
      status = "NaN";
    }
  } else {
    if (exponent == -1023) {
      if (parseInt(mantissa, 10) == 0) {
        status = "zero";
      } else {
        exponent = -1022;
        mantissa = "0" + mantissa;
        status = "denormalized";
      }
    } else {
      mantissa = "1" + mantissa;
      status = "normalized";
    }

    temp = mantissa.length;

    for (let index = 0; index < 53 - temp; index++) {
      mantissa = mantissa + "0";
    }

    for (let index = 0; index < -exponent - 1; index++) {
      mantissa = "0" + mantissa;
    }

    for (let index = 0; index < exponent - 52; index++) {
      mantissa = mantissa + "0";
    }

    binInt = mantissa.substr(0, exponent + 1);
    binFrac = mantissa.substr(binInt.length);
    decInt = bin2decInt(binInt);
    decFrac = bin2decFrac(binFrac, 1074);
  }

  this.integer = decInt;
  this.fractional = decFrac;
  this.sign = sign;
  this.status = status;
}

function IEEESingle(mantissa, exponent, sign) {
  this.mantissa = mantissa;
  this.exponent = exponent;
  this.sign = sign;
  this.getBinary = IEEESingle_getBinary;
  this.getHex = IEEESingle_getHex;
  this.fromDecimal = IEEESingle_fromDecimal;
  this.fromHex = IEEESingle_fromHex;
}

function IEEESingle_getBinary() {
  let exponent;
  let sign;
  let temp;
  exponent = dec2binInt(this.exponent + 127 + "");
  temp = 8 - exponent.length;

  for (let index = 0; index < temp; index++) {
    exponent = "0" + exponent;
  }

  if (this.sign == "+") {
    sign = "0";
  } else {
    sign = "1";
  }

  return sign + exponent + this.mantissa;
}

function IEEESingle_getHex() {
  return bin2hex(this.getBinary());
}

function IEEESingle_fromHex(hexNumber) {
  let binNumber;
  hexNumber = completeZerosLeft(hexNumber, 8);
  binNumber = hex2bin(hexNumber);

  if (binNumber.substr(0, 1) == "0") {
    this.sign = "+";
  } else {
    this.sign = "-";
  }

  this.exponent = parseInt(binNumber.substr(1, 8), 2) - 127;
  this.mantissa = binNumber.substr(9, 23);
}

function IEEESingle_fromDecimal(decNumber) {
  let decInt;
  let decFrac;
  let sign;
  decInt = decNumber.integer;
  decFrac = decNumber.fractional;
  sign = decNumber.sign;
  let binInt;
  let binFrac;
  let allString;
  let deNorm;
  let exponent;
  let mantissa;
  let temp;

  if (decNumber.status == "infinity") {
    this.mantissa = "00000000000000000000000";
    this.exponent = 128;
    this.sign = sign;
  } else if (decNumber.status == "NaN") {
    this.mantissa = "11111111111111111111111";
    this.exponent = 128;
    this.sign = "+";
  } else {
    binInt = dec2binInt(decInt);

    if (binInt != "0") {
      binFrac = dec2binFrac(decFrac, 25 - binInt.length, 0);
    } else {
      binFrac = dec2binFrac(decFrac, 25, 1);
    }

    if (parseInt(binInt, 10) == 0 && parseInt(binFrac, 10) == 0) {
      exponent = -127;
      mantissa = "00000000000000000000000";
    } else {
      allString = binInt + "." + binFrac;
      exponent = allString.indexOf(".") - allString.indexOf("1");

      if (exponent > 0) {
        exponent--;
      }

      if (exponent < -126) {
        deNorm = -126 - exponent;
      } else {
        deNorm = 0;
      }

      allString = binInt + binFrac;
      mantissa = allString.substr(allString.indexOf("1") + 1 - deNorm, 24);
      temp = mantissa.length;

      for (let index = 0; index < 23 - temp; index++) {
        mantissa += "0";
      }

      temp = roundBinary(mantissa.substr(0, 23), parseInt(mantissa.charAt(23), 10));

      if (temp.length > 23) {
        mantissa = temp.substr(1);
        exponent++;
      } else {
        mantissa = temp;
      }

      if (exponent < -126) {
        exponent = -127;
      }

      if (exponent > 127) {
        exponent = 128;
        mantissa = "00000000000000000000000";
      }
    }

    this.mantissa = mantissa;
    this.exponent = exponent;
    this.sign = sign;
  }
}

function IEEEDouble(mantissa, exponent, sign) {
  this.mantissa = mantissa;
  this.exponent = exponent;
  this.sign = sign;
  this.getBinary = IEEEDouble_getBinary;
  this.getHex = IEEEDouble_getHex;
  this.fromDecimal = IEEEDouble_fromDecimal;
  this.fromHex = IEEEDouble_fromHex;
}

function IEEEDouble_getBinary() {
  let exponent;
  let sign;
  let temp;
  exponent = dec2binInt(this.exponent + 1023 + "");
  temp = 11 - exponent.length;

  for (let index = 0; index < temp; index++) {
    exponent = "0" + exponent;
  }

  if (this.sign == "+") {
    sign = "0";
  } else {
    sign = "1";
  }

  return sign + exponent + this.mantissa;
}

function IEEEDouble_getHex() {
  return bin2hex(this.getBinary());
}

function IEEEDouble_fromHex(hexNumber) {
  let binNumber;
  hexNumber = completeZerosLeft(hexNumber, 16);
  binNumber = hex2bin(hexNumber);

  if (binNumber.substr(0, 1) == "0") {
    this.sign = "+";
  } else {
    this.sign = "-";
  }

  this.exponent = parseInt(binNumber.substr(1, 11), 2) - 1023;
  this.mantissa = binNumber.substr(12, 52);
}

function IEEEDouble_fromDecimal(decNumber) {
  let decInt;
  let decFrac;
  let sign;
  decInt = decNumber.integer;
  decFrac = decNumber.fractional;
  sign = decNumber.sign;
  let binInt;
  let binFrac;
  let allString;
  let deNorm;
  let exponent;
  let mantissa;
  let temp;

  if (decNumber.status == "infinity") {
    this.mantissa = "0000000000000000000000000000000000000000000000000000";
    this.exponent = 1024;
    this.sign = sign;
  } else if (decNumber.status == "NaN") {
    this.mantissa = "1111111111111111111111111111111111111111111111111111";
    this.exponent = 1024;
    this.sign = "+";
  } else {
    binInt = dec2binInt(decInt);

    if (binInt != "0") {
      binFrac = dec2binFrac(decFrac, 54 - binInt.length, 0);
    } else {
      binFrac = dec2binFrac(decFrac, 54, 1);
    }

    if (parseInt(binInt, 10) == 0 && parseInt(binFrac, 10) == 0) {
      exponent = -1023;
      mantissa = "0000000000000000000000000000000000000000000000000000";
    } else {
      allString = binInt + "." + binFrac;
      exponent = allString.indexOf(".") - allString.indexOf("1");

      if (exponent > 0) {
        exponent--;
      }

      if (exponent < -1022) {
        deNorm = -1022 - exponent;
      } else {
        deNorm = 0;
      }

      allString = binInt + binFrac;
      mantissa = allString.substr(allString.indexOf("1") + 1 - deNorm, 53);
      temp = mantissa.length;

      for (let index = 0; index < 52 - temp; index++) {
        mantissa += "0";
      }

      temp = roundBinary(mantissa.substr(0, 52), parseInt(mantissa.charAt(52), 10));

      if (temp.length > 52) {
        mantissa = temp.substr(1);
        exponent++;
      } else {
        mantissa = temp;
      }

      if (exponent < -1022) {
        exponent = -1023;
      }

      if (exponent > 1023) {
        exponent = 1024;
        mantissa = "0000000000000000000000000000000000000000000000000000";
      }
    }

    this.mantissa = mantissa;
    this.exponent = exponent;
    this.sign = sign;
  }
}

function dec2Float(expression) {
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  let single = new IEEESingle("", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, -45, 45);
  single.fromDecimal(dec);
  return single.getHex();
}

function dec2Double(expression) {
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  let double = new IEEEDouble("", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, -324, 324);
  double.fromDecimal(dec);
  return double.getHex();
}

function float2Dec(expression, numberFigures) {
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  let single = new IEEESingle("", "", "");
  single.fromHex(expression);
  dec.fromSingle(single);
  sci.parse(dec.getNumber());

  if (numberFigures != -1) {
    sci.roundRemoveExtraZeros(numberFigures);
  }

  return sci.getNumber();
}

function double2Dec(expression, numberFigures) {
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  let double = new IEEEDouble("", "", "");
  double.fromHex(expression);
  dec.fromDouble(double);
  sci.parse(dec.getNumber());

  if (numberFigures != -1) {
    sci.roundRemoveExtraZeros(numberFigures);
  }

  return sci.getNumber();
}

function mostAccurateFloat(expression, numberFigures) {
  return float2Dec(dec2Float(expression), numberFigures);
}

function mostAccurateDouble(expression, numberFigures) {
  return double2Dec(dec2Double(expression), numberFigures);
}

function unsignedCharDec2Bin(expression) {
  let compareArray = new Array(128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 2);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, 0, 255);
  return fastDec2Bin(compareArray, 8, value);
}

function unsignedCharBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 255);
  return value;
}

function mostAccurateUnsignedChar(expression) {
  return unsignedCharBin2Dec(unsignedCharDec2Bin(expression));
}

function signedCharDec2Bin(expression) {
  let compareArray = new Array(128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 2);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, -128, 127);

  if (value < 0) {
    value += compareArray[0] * 2;
  }

  return fastDec2Bin(compareArray, 8, value);
}

function signedCharBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 255);

  if (value > 127) {
    value -= 256;
  }

  return value;
}

function mostAccurateSignedChar(expression) {
  return signedCharBin2Dec(signedCharDec2Bin(expression));
}

function unsignedShortDec2Bin(expression) {
  let compareArray = new Array(32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 5);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, 0, 65535);
  return fastDec2Bin(compareArray, 16, value);
}

function unsignedShortBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 65535);
  return value;
}

function mostAccurateUnsignedShort(expression) {
  return unsignedShortBin2Dec(unsignedShortDec2Bin(expression));
}

function signedShortDec2Bin(expression) {
  let compareArray = new Array(32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 5);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, -32768, 32767);

  if (value < 0) {
    value += compareArray[0] * 2;
  }

  return fastDec2Bin(compareArray, 16, value);
}

function signedShortBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 65535);

  if (value > 32767) {
    value -= 65536;
  }

  return value;
}

function mostAccurateSignedShort(expression) {
  return signedShortBin2Dec(signedShortDec2Bin(expression));
}

function unsignedIntDec2Bin(expression) {
  let compareArray = new Array(2147483648, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 9);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, 0, 4294967295);
  return fastDec2Bin(compareArray, 32, value);
}

function unsignedIntBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 4294967295);
  return value;
}

function mostAccurateUnsignedInt(expression) {
  return unsignedIntBin2Dec(unsignedIntDec2Bin(expression));
}

function signedIntDec2Bin(expression) {
  let compareArray = new Array(2147483648, 1073741824, 536870912, 268435456, 134217728, 67108864, 33554432, 16777216, 8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1);
  let value;
  let sci = new ScientificNumber("", "", "", "");
  let dec = new DecimalNumber("", "", "", "");
  sci.parse(expression);
  dec.fromScientific(sci, 0, 9);
  value = dec.integer;

  if (dec.sign == "-") {
    value *= -1;
  }

  value = integerFitRange(value, -2147483648, 2147483647);

  if (value < 0) {
    value += compareArray[0] * 2;
  }

  return fastDec2Bin(compareArray, 32, value);
}

function signedIntBin2Dec(expression) {
  let value;
  value = fastBin2Dec(expression);
  value = integerFitRange(value, 0, 4294967295);

  if (value > 2147483647) {
    value -= 4294967296;
  }

  return value;
}

function mostAccurateSignedInt(expression) {
  return signedIntBin2Dec(signedIntDec2Bin(expression));
}

function formatInput(expression, maxChar) {
  if (expression.length > maxChar) {
    return expression.substr(0, maxChar) + "...";
  } else {
    return expression;
  }
}

function getFloatSign(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(0, 1);
}

function getFloatExponent(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(1, 8);
}

function getFloatMantissa(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(9, 23);
}

function getDoubleSign(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(0, 1);
}

function getDoubleExponent(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(1, 11);
}

function getDoubleMantissa(hexNumber) {
  let binNumber;
  binNumber = hex2bin(hexNumber);
  return binNumber.substr(12, 52);
}
},{"./data":"Edcz","../enums":"ZRYf","../user":"QE3B","../vehicles":"pYYy","../coffer":"sKID","./menu":"Aiz7","../inventory":"m5ow","../managers/dispatcher":"bsac","../../util/fractions":"Zeqt","./pickups":"xTdX","../houses":"buna","../condo":"YoDO","../stock":"MdNj","../apartments":"qIZj","../../util/newrage":"mgLX","../../util/loto":"aeoE","../../util/methods":"Z5QB","./entity/logFractionGunEntity":"WakH","./entity/user":"xF3w","../../util/company.names":"iryQ","../../util/inventory":"Jhu1"}],"Edcz":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = void 0;

var _methods = require("./methods");

let _data = new Map();

let Debug = false;

class Container {
  static SetClient(id, key, value) {
    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [SET-CLIENT-SRV] ID: ${id}, KEY: ${key}, OBJECT: ${value}`);
      }

      this.Set(id, key, value);
    } catch (e) {
      _methods.methods.debug(`SRV: [SET-CLIENT-SRV] ERR: ${e}`);
    }
  }

  static Set(id, key, value) {
    id = _methods.methods.parseInt(id);

    try {
      if (_data.has(id) && _data.get(id) !== undefined && _data.get(id) !== null) {
        _data.set(id, _data.get(id).set(key, value));
      } else {
        _data.set(id, new Map().set(key, value));
      }

      if (Debug) {
        _methods.methods.debug(`SRV: [SET] ID: ${id}, KEY: ${key}, OBJECT: ${value}`);
      }
    } catch (e) {
      _methods.methods.debug(`SRV: [SET] ERR: ${e}`);
    }
  }

  static Reset(id, key) {
    _methods.methods.debug('Container.Reset');

    id = _methods.methods.parseInt(id);

    try {
      if (!_data.has(id)) return;
      if (!_data.get(id).has(key)) return;

      _data.get(id).delete(key);

      if (Debug) {
        _methods.methods.debug(`SRV: [RESET] ID: ${id}, KEY: ${key}`);
      }
    } catch (e) {
      _methods.methods.debug(`SRV: [RESET] ERR: ${e}`);
    }
  }

  static ResetAll(id) {
    _methods.methods.debug('Container.ResetAll');

    id = _methods.methods.parseInt(id);

    try {
      if (!_data.has(id)) return;

      _data.delete(id);

      if (Debug) {
        _methods.methods.debug(`SRV: [RESETALL] ID: ${id}`);
      }
    } catch (e) {
      _methods.methods.debug(`SRV: [RESETALL] ERR: ${e}`);
    }
  }

  static Get(id, key) {
    id = _methods.methods.parseInt(id);

    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [GET] ID: ${id}, KEY: ${key}`);
      }

      if (_data.has(id)) {
        if (_data.get(id).has(key)) {
          return _data.get(id).get(key);
        }
      }

      return null;
    } catch (e) {
      _methods.methods.debug(`SRV: [GET] ERR: ${e}`);
    }
  }

  static Has(id, key) {
    id = _methods.methods.parseInt(id);

    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [HAS] ID: ${id}, KEY: ${key}`);
      }

      if (_data.has(id)) {
        return _data.get(id).has(key);
      } else {
        return false;
      }
    } catch (e) {
      _methods.methods.debug(`SRV: [HAS] ERR: ${e}`);
    }
  }

  static GetAll(id) {
    id = _methods.methods.parseInt(id);

    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [GETALL] ID: ${id}, KEY: ${_data.get(id)}`);
      }

      if (!_data.has(id)) {
        return null;
      }

      if (_data.get(id) == undefined) return null;
      return _data.get(id);
    } catch (e) {
      _methods.methods.debug(`SRV: [GETALL] ERR: ${e}`);
    }
  }

  static GetAllClient(player, promiseId, id) {
    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [GET ALL CLIENT] ID: ${id}`);
      }

      player.call('modules:client:data:GetAll', [promiseId, Array.from(this.GetAll(id))]);
    } catch (e) {
      _methods.methods.debug(`SRV: [GET ALL CLIENT] ERR: ${e}`);
    }
  }

  static GetClient(player, promiseId, id, key) {
    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [GETCLIENT] ID: ${id}, KEY: ${key}`);
      }

      player.call('modules:client:data:Get', [promiseId, this.Get(id, key)]);
    } catch (e) {
      _methods.methods.debug(`SRV: [GETCLIENT] ERR: ${e}`);
    }
  }

  static HasClient(player, promiseId, id, key) {
    try {
      if (Debug) {
        _methods.methods.debug(`SRV: [HASCLIENT] ID: ${id}, KEY: ${key}`);
      }

      player.call('modules:client:data:Has', [promiseId, this.Has(id, key)]);
    } catch (e) {
      _methods.methods.debug(`SRV: [HASCLIENT] ERR: ${e}`);
    }
  }

}

exports.Container = Container;
Container.protectKeys = [];
},{"./methods":"qXSp"}],"K9Zo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phoneSMSEntity = exports.phoneContactEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let phoneContactEntity = class phoneContactEntity extends _sequelizeTypescript.Model {};
exports.phoneContactEntity = phoneContactEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], phoneContactEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(32),
  allowNull: false
}), __metadata("design:type", String)], phoneContactEntity.prototype, "number", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(32),
  allowNull: false
}), __metadata("design:type", String)], phoneContactEntity.prototype, "title", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(50),
  allowNull: false
}), __metadata("design:type", String)], phoneContactEntity.prototype, "text_number", void 0);

exports.phoneContactEntity = phoneContactEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_phone_contact"
})], phoneContactEntity);
let phoneSMSEntity = class phoneSMSEntity extends _sequelizeTypescript.Model {};
exports.phoneSMSEntity = phoneSMSEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], phoneSMSEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(16),
  allowNull: false
}), __metadata("design:type", String)], phoneSMSEntity.prototype, "number_from", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(16),
  allowNull: false
}), __metadata("design:type", String)], phoneSMSEntity.prototype, "number_to", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(512),
  allowNull: false
}), __metadata("design:type", String)], phoneSMSEntity.prototype, "text", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(32),
  allowNull: false
}), __metadata("design:type", String)], phoneSMSEntity.prototype, "datetime", void 0);

exports.phoneSMSEntity = phoneSMSEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_phone_sms"
})], phoneSMSEntity);
},{}],"Gt5n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phone = void 0;

var _methods = require("./modules/methods");

var _weather = require("./managers/weather");

var _user = require("./user");

var _phone = require("./modules/entity/phone");

var _sequelize = require("sequelize");

let phone = {
  getByNumber: number => {
    let nmbr = null;
    mp.players.forEach(pl => {
      if (!_user.user.isLogin(pl)) return;

      let phoneNumber = _user.user.get(pl, "phone_code") + "-" + _user.user.get(pl, "phone");

      if (phoneNumber != number) return;
      nmbr = pl;
    });
    return nmbr;
  },
  getNumber: player => {
    return _user.user.get(player, "phone_code") + "-" + _user.user.get(player, "phone");
  },
  sendSms: function (player, number, text) {
    _methods.methods.debug('phone.sendSms');

    if (!_user.user.isLogin(player)) return;

    try {
      let numberFrom = _user.user.get(player, "phone_code") + "-" + _user.user.get(player, "phone");

      mp.players.forEach(pl => {
        if (!_user.user.isLogin(pl)) return;

        let phoneNumber = _user.user.get(pl, "phone_code") + "-" + _user.user.get(pl, "phone");

        if (phoneNumber != number) return;
        let numberToCont = numberFrom;

        _phone.phoneContactEntity.findOne({
          where: {
            number: number,
            text_number: numberFrom
          }
        }).then(item => {
          if (item) numberToCont = item.title;
        });

        setTimeout(function () {
          if (!_user.user.isLogin(pl)) return;
          pl.call("client:phone:addNewSms", [numberToCont, text]);
        }, 1000);
      });

      _phone.phoneSMSEntity.create({
        number_from: numberFrom,
        number_to: number,
        text: text,
        datetime: _weather.weather.getRpDateTime()
      });

      player.notify("~g~Отправлено~s~\nСМС была отправлена получателю");
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  openSmsListMenu: function (player, number) {
    _methods.methods.debug('phone.openSmsListMenu');

    if (!_user.user.isLogin(player)) return;

    try {
      let data = new Map();

      _phone.phoneSMSEntity.findAll({
        where: {
          [_sequelize.Op.or]: [{
            number_from: number
          }, {
            number_to: number
          }]
        },
        order: [["id", "DESC"]],
        limit: 100
      }).then(rows => {
        rows.forEach(row => {
          data.set(row['id'].toString(), [row["number_from"], row["number_to"], row["datetime"], row["text"]]);
        });
        if (!_user.user.isLogin(player)) return;
        player.call("client:phone:sendToPlayerSmsListMenu", [Array.from(data), number]);
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  openContactListMenu: function (player, number) {
    _methods.methods.debug('phone.openContactListMenu');

    if (!_user.user.isLogin(player)) return;

    try {
      let data = new Map();

      _phone.phoneContactEntity.findAll({
        where: {
          number: number
        },
        order: [["title", "ASC"]],
        limit: 100
      }).then(rows => {
        rows.forEach(row => {
          data.set(row['id'].toString(), [row["title"], row["text_number"]]);
        });
        if (!_user.user.isLogin(player)) return;
        player.call("client:phone:sendToPlayerContactListMenu", [Array.from(data)]);
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  addContact: function (player, phone, title, num) {
    _methods.methods.debug('phone.addContact');

    if (!_user.user.isLogin(player)) return;

    try {
      if (title.length >= 50) return player.notify(`~r~Длинна имени контакта не более 50`);

      _phone.phoneContactEntity.create({
        number: phone,
        title: title,
        text_number: num
      });

      player.notify("~g~Контакт был добавлен");
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  deleteContact: function (player, id) {
    _methods.methods.debug('phone.deleteContact');

    _phone.phoneContactEntity.destroy({
      where: {
        id: id
      }
    });

    if (!_user.user.isLogin(player)) return;

    try {
      player.notify("~g~Контакт был удален");
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  renameContact: function (player, id, newName) {
    _methods.methods.debug('phone.renameContact');

    _phone.phoneContactEntity.update({
      title: newName
    }, {
      where: {
        id: id
      }
    });

    if (!_user.user.isLogin(player)) return;

    try {
      player.notify("~g~Контакт был переименован");
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  openSmsInfoMenu: function (player, id) {
    _methods.methods.debug('phone.openSmsInfoMenu');

    if (!_user.user.isLogin(player)) return;

    try {
      _phone.phoneSMSEntity.findOne({
        where: {
          id: id
        }
      }).then(item => {
        if (!item) return;
        if (!_user.user.isLogin(player)) return;
        player.call("client:phone:sendToPlayerSmsInfoMenu", [item.id, item.number_from, item.number_to, item.text, item.datetime]);
        return;
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  openContInfoMenu: function (player, id) {
    _methods.methods.debug('phone.openContInfoMenu');

    if (!_user.user.isLogin(player)) return;

    try {
      _phone.phoneContactEntity.findOne({
        where: {
          id: id
        }
      }).then(item => {
        if (!_user.user.isLogin(player)) return;
        if (item) player.call("client:phone:sendToPlayerContInfoMenu", [item.id, item.title, item.text_number]);
        return;
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  deleteSms: function (player, id) {
    _methods.methods.debug('phone.deleteSms');

    _phone.phoneSMSEntity.destroy({
      where: {
        id: id
      }
    });

    if (!_user.user.isLogin(player)) return;

    try {
      player.notify("~g~Смс была удалена");
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
};
exports.phone = phone;
},{"./modules/methods":"qXSp","./managers/weather":"uehX","./user":"QE3B","./modules/entity/phone":"K9Zo"}],"dIe4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpInvaderAdEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let rpInvaderAdEntity = class rpInvaderAdEntity extends _sequelizeTypescript.Model {};
exports.rpInvaderAdEntity = rpInvaderAdEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], rpInvaderAdEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(64),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], rpInvaderAdEntity.prototype, "datetime", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], rpInvaderAdEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(32),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], rpInvaderAdEntity.prototype, "phone", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(32),
  allowNull: false,
  defaultValue: 'Разное'
}), __metadata("design:type", String)], rpInvaderAdEntity.prototype, "title", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(256),
  allowNull: false,
  defaultValue: ''
}), __metadata("design:type", String)], rpInvaderAdEntity.prototype, "text", void 0);

exports.rpInvaderAdEntity = rpInvaderAdEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_rp_invader_ad"
})], rpInvaderAdEntity);
},{}],"KRHF":[function(require,module,exports) {
module.exports = {
  "host": "127.0.0.1",
  "db_user": "root",
  "password": "",
  "database": "diamond",
  "port": 3306
};
},{}],"ocv0":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shootingRecordsEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let shootingRecordsEntity = class shootingRecordsEntity extends _sequelizeTypescript.Model {};
exports.shootingRecordsEntity = shootingRecordsEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], shootingRecordsEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], shootingRecordsEntity.prototype, "count", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], shootingRecordsEntity.prototype, "user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(50),
  allowNull: false
}), __metadata("design:type", String)], shootingRecordsEntity.prototype, "username", void 0);

exports.shootingRecordsEntity = shootingRecordsEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_shooting_records"
})], shootingRecordsEntity);
},{}],"Pudb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eventToServerEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let eventToServerEntity = class eventToServerEntity extends _sequelizeTypescript.Model {};
exports.eventToServerEntity = eventToServerEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], eventToServerEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], eventToServerEntity.prototype, "type", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], eventToServerEntity.prototype, "item_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(128),
  allowNull: false
}), __metadata("design:type", String)], eventToServerEntity.prototype, "action", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(128),
  allowNull: false
}), __metadata("design:type", String)], eventToServerEntity.prototype, "params", void 0);

exports.eventToServerEntity = eventToServerEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_event_to_server"
})], eventToServerEntity);
},{}],"hvel":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monitoringEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let monitoringEntity = class monitoringEntity extends _sequelizeTypescript.Model {};
exports.monitoringEntity = monitoringEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true
}), __metadata("design:type", Number)], monitoringEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(512),
  allowNull: false
}), __metadata("design:type", String)], monitoringEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(32),
  allowNull: false
}), __metadata("design:type", String)], monitoringEntity.prototype, "ip", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], monitoringEntity.prototype, "online", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], monitoringEntity.prototype, "max_online", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false
}), __metadata("design:type", Number)], monitoringEntity.prototype, "last_update", void 0);

exports.monitoringEntity = monitoringEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_monitoring"
})], monitoringEntity);
},{}],"GUii":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mafiaWarEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let mafiaWarEntity = class mafiaWarEntity extends _sequelizeTypescript.Model {};
exports.mafiaWarEntity = mafiaWarEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], mafiaWarEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], mafiaWarEntity.prototype, "owner_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], mafiaWarEntity.prototype, "money", void 0);

exports.mafiaWarEntity = mafiaWarEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_mafia_war"
})], mafiaWarEntity);
},{}],"s1kb":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auctionSettingsEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let auctionSettingsEntity = class auctionSettingsEntity extends _sequelizeTypescript.Model {};
exports.auctionSettingsEntity = auctionSettingsEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], auctionSettingsEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.STRING(500),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], auctionSettingsEntity.prototype, "data", void 0);

exports.auctionSettingsEntity = auctionSettingsEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_auction_settings"
})], auctionSettingsEntity);
},{}],"fQUH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auctionEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let auctionEntity = class auctionEntity extends _sequelizeTypescript.Model {};
exports.auctionEntity = auctionEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], auctionEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], auctionEntity.prototype, "user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelizeTypescript.Sequelize.INTEGER(11),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], auctionEntity.prototype, "sum", void 0);

exports.auctionEntity = auctionEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_auction"
})], auctionEntity);
},{}],"ZMA7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.raceCfgEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let raceCfgEntity = class raceCfgEntity extends _sequelizeTypescript.Model {};
exports.raceCfgEntity = raceCfgEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], raceCfgEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], raceCfgEntity.prototype, "user", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 1
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], raceCfgEntity.prototype, "ready", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(60),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], raceCfgEntity.prototype, "vehiclesSeries", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(60),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], raceCfgEntity.prototype, "name", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(10000),
  allowNull: true,
  defaultValue: null
}), __metadata("design:type", String)], raceCfgEntity.prototype, "checkpoints", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(10000),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], raceCfgEntity.prototype, "spawns", void 0);

exports.raceCfgEntity = raceCfgEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_race_cfg"
})], raceCfgEntity);
},{}],"zzFV":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tradeLogEntity = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

var _sequelize = _interopRequireDefault(require("sequelize"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __metadata = void 0 && (void 0).__metadata || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

let tradeLogEntity = class tradeLogEntity extends _sequelizeTypescript.Model {};
exports.tradeLogEntity = tradeLogEntity;

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  primaryKey: true,
  autoIncrement: true,
  allowNull: false
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "user_id", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(256),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], tradeLogEntity.prototype, "action", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "price", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "coins_before", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "coins_after", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.STRING(22),
  allowNull: false,
  defaultValue: ""
}), __metadata("design:type", String)], tradeLogEntity.prototype, "datetime", void 0);

__decorate([(0, _sequelizeTypescript.Column)({
  type: _sequelize.default.INTEGER({
    length: 11
  }),
  allowNull: false,
  defaultValue: 0
}), __metadata("design:type", Number)], tradeLogEntity.prototype, "timestamp", void 0);

exports.tradeLogEntity = tradeLogEntity = __decorate([(0, _sequelizeTypescript.Table)({
  modelName: "pAFk3qiAgG1_trade_log"
})], tradeLogEntity);
},{}],"ylsz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sequelizeInit = exports.sequelize = exports.mysqlpool = void 0;

var _sequelizeTypescript = require("sequelize-typescript");

require("reflect-metadata");

var _ip = _interopRequireDefault(require("ip"));

var _mysql = _interopRequireDefault(require("../config/mysql.json"));

var _methods = require("./methods");

var _weaponChest = require("./entity/weaponChest");

var _garderob = require("./entity/garderob");

var _moneyChest = require("./entity/moneyChest");

var _user = require("./entity/user");

var _inventory = require("./entity/inventory");

var _fractionGarage = require("./entity/fractionGarage");

var _banList = require("./entity/banList");

var _business = require("./entity/business");

var _blackList = require("./entity/blackList");

var _logEntity = require("./entity/logEntity");

var _vehicleBooster = require("./entity/vehicleBooster");

var _warns = require("./entity/warns");

var _coffer = require("./entity/coffer");

var _rpNews = require("./entity/rpNews");

var _shooting = require("./entity/shooting");

var _whiteListTest = require("./entity/whiteListTest");

var _gangWarsZone = require("./entity/gangWarsZone");

var _customChest = require("./entity/customChest");

var _promocodeUsing = require("./entity/promocodeUsing");

var _userNotifyEntity = require("./entity/userNotifyEntity");

var _carsModel = require("./entity/carsModel");

var _eventToServer = require("./entity/eventToServer");

var _monitoringEntity = require("./entity/monitoringEntity");

var _userDatingEntity = require("./entity/userDatingEntity");

var _logPlayerEntity = require("./entity/logPlayerEntity");

var _apartmentEntity = require("./entity/apartmentEntity");

var _condoEntity = require("./entity/condoEntity");

var _housesEntity = require("./entity/housesEntity");

var _phone = require("./entity/phone");

var _stockEntity = require("./entity/stockEntity");

var _logReferrerEntity = require("./entity/logReferrerEntity");

var _logAuthEntity = require("./entity/logAuthEntity");

var _mafiaWarEntity = require("./entity/mafiaWarEntity");

var _parkPlaceEntity = require("./entity/parkPlaceEntity");

var _carRent = require("./entity/carRent");

var _autosalonPercent = require("./entity/autosalonPercent");

var _autosalonModels = require("./entity/autosalonModels");

var _rpInvaderAdEntity = require("./entity/rpInvaderAdEntity");

var _daynightEntity = require("./entity/daynightEntity");

var _auctionSettingsEntity = require("./entity/auctionSettingsEntity");

var _auctionEntity = require("./entity/auctionEntity");

var _promocodeTopEntity = require("./entity/promocodeTopEntity");

var _logFractionGunEntity = require("./entity/logFractionGunEntity");

var _vehInfoEntity = require("./entity/vehInfoEntity");

var _raceCfgEntity = require("./entity/raceCfgEntity");

var _tradeLogEntity = require("./entity/tradeLogEntity");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ip_address = _ip.default.address();

let sequelize;
exports.sequelize = sequelize;
let mysqlpool;
exports.mysqlpool = mysqlpool;

const sequelizeInit = () => {
  return new Promise(resolve => {
    exports.sequelize = sequelize = new _sequelizeTypescript.Sequelize({
      dialect: 'mariadb',
      host: _mysql.default.host,
      port: _mysql.default.port || 5981,
      username: _mysql.default.db_user,
      password: _mysql.default.password,
      database: _mysql.default.database,
      dialectOptions: {
        timezone: 'Etc/GMT+3',
        connectTimeout: 60000
      },
      define: {
        charset: 'utf8',
        collate: 'utf8_general_ci',
        timestamps: false,
        freezeTableName: true
      },
      logging: _methods.methods.debugSeq,
      pool: {
        max: _methods.methods.isTestServer() ? 10 : 300,
        min: _methods.methods.isTestServer() ? 0 : 200
      }
    });
    sequelize.addModels([_promocodeTopEntity.promocodeTopListEntity, _userNotifyEntity.userNotifyEntity, _condoEntity.condoEntity, _logAuthEntity.logAuthEntity, _mafiaWarEntity.mafiaWarEntity, _parkPlaceEntity.parkPlaceEntity, _logFractionGunEntity.logFractionGunEntity, _carRent.carRentEntity, _stockEntity.stocksEntity, _stockEntity.logStockEntity, _housesEntity.housesEntity, _logReferrerEntity.logReferrerEntity, _phone.phoneSMSEntity, _phone.phoneContactEntity, _customChest.customChest, _weaponChest.weaponChest, _garderob.garderobEntity, _moneyChest.moneyChestEntity, _user.userEntity, _inventory.inventoryEntity, _fractionGarage.fractionGarageEntity, _banList.banListEntity, _business.businessEntity, _blackList.blackListEntity, _logEntity.logEntity, _vehicleBooster.vehicleBoosterEntity, _warns.userWarnEntity, _coffer.cofferDonateEntity, _coffer.cofferEntity, _rpNews.rpNewsEntity, _shooting.shootingRecordsEntity, _whiteListTest.whiteListTestEntity, _gangWarsZone.gangWarsZoneEntity, _auctionEntity.auctionEntity, _promocodeUsing.promocodeEntity, _promocodeUsing.promocodeUsingEntity, _eventToServer.eventToServerEntity, _monitoringEntity.monitoringEntity, _apartmentEntity.apartmentEntity, _userDatingEntity.userDatingEntity, _logPlayerEntity.logPlayerEntity, _autosalonModels.autosalonModelsEntity, _rpInvaderAdEntity.rpInvaderAdEntity, _auctionSettingsEntity.auctionSettingsEntity, _daynightEntity.daynightEntity, _carsModel.carsEntity, _autosalonPercent.autosalonPercentEntity, _vehInfoEntity.vehInfoEntity, _raceCfgEntity.raceCfgEntity, _tradeLogEntity.tradeLogEntity]);
    setTimeout(() => {
      sequelize.sync().then(() => {
        _user.userEntity.update({
          quests: []
        }, {
          where: {
            quests: '["[","]"]'
          }
        }).then(() => {
          resolve();
        });
      });
    }, 500);
  });
};

exports.sequelizeInit = sequelizeInit;
},{"../config/mysql.json":"KRHF","./methods":"qXSp","./entity/weaponChest":"rfaj","./entity/garderob":"K4Bd","./entity/moneyChest":"vWYJ","./entity/user":"xF3w","./entity/inventory":"bqqA","./entity/fractionGarage":"tmQn","./entity/banList":"hGLC","./entity/business":"uUTa","./entity/blackList":"UcH2","./entity/logEntity":"mHJx","./entity/vehicleBooster":"fCpW","./entity/warns":"NOUi","./entity/coffer":"R7vB","./entity/rpNews":"wgLG","./entity/shooting":"ocv0","./entity/whiteListTest":"GoOy","./entity/gangWarsZone":"PCk1","./entity/customChest":"iNNl","./entity/promocodeUsing":"u9lD","./entity/userNotifyEntity":"Q3Rn","./entity/carsModel":"pv82","./entity/eventToServer":"Pudb","./entity/monitoringEntity":"hvel","./entity/userDatingEntity":"Soei","./entity/logPlayerEntity":"JLGa","./entity/apartmentEntity":"K5GH","./entity/condoEntity":"JZQ2","./entity/housesEntity":"kvtc","./entity/phone":"K9Zo","./entity/stockEntity":"oqg0","./entity/logReferrerEntity":"tSli","./entity/logAuthEntity":"T8aA","./entity/mafiaWarEntity":"GUii","./entity/parkPlaceEntity":"BQ3k","./entity/carRent":"wd09","./entity/autosalonPercent":"qqav","./entity/autosalonModels":"SdUa","./entity/rpInvaderAdEntity":"dIe4","./entity/daynightEntity":"w9k0","./entity/auctionSettingsEntity":"s1kb","./entity/auctionEntity":"fQUH","./entity/promocodeTopEntity":"ixsW","./entity/logFractionGunEntity":"WakH","./entity/vehInfoEntity":"Ogpy","./entity/raceCfgEntity":"ZMA7","./entity/tradeLogEntity":"zzFV"}],"PN4J":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tax = void 0;

var _data = require("../modules/data");

var _methods = require("../modules/methods");

var _user = require("../user");

var _bank = require("../business/bank");

var _condo = require("../condo");

var _houses = require("../houses");

var _apartments = require("../apartments");

var _business = require("../business");

var _vehicles = require("../vehicles");

var _stock = require("../stock");

var _weather = require("./weather");

var _business2 = require("../modules/entity/business");

var _sequelize = require("sequelize");

var _user2 = require("../modules/entity/user");

var _housesEntity = require("../modules/entity/housesEntity");

var _sequelizeTypescript = require("sequelize-typescript");

var _condoEntity = require("../modules/entity/condoEntity");

var _apartmentEntity = require("../modules/entity/apartmentEntity");

var _stockEntity = require("../modules/entity/stockEntity");

var _carsModel = require("../modules/entity/carsModel");

var _rpInvaderAdEntity = require("../modules/entity/rpInvaderAdEntity");

var _sequelize2 = require("../modules/sequelize");

let _currentTax = 0.0001;
let _taxMin = 10;
let _taxDays = 21;
let tax = {
  loadAll: function () {
    setTimeout(() => {
      setInterval(tax.removeTax, _methods.methods.parseInt(60000 * 60 * 3.4));
    }, 60000 * 60 * 3);

    _business2.businessEntity.update({
      score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 10000000')
    }, {
      where: {}
    }).then(() => {
      _business.business.loadAll();

      _housesEntity.housesEntity.update({
        score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 50000000')
      }, {
        where: {}
      }).then(() => {
        _condoEntity.condoEntity.update({
          score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 40000000')
        }, {
          where: {}
        }).then(() => {
          _apartmentEntity.apartmentEntity.update({
            score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 70000000')
          }, {
            where: {}
          }).then(() => {
            _stockEntity.stocksEntity.update({
              score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 90000000')
            }, {
              where: {}
            }).then(() => {
              _carsModel.carsEntity.update({
                score_tax: _sequelizeTypescript.Sequelize.literal('rand()*10000000 + 30000000')
              }, {
                where: {}
              }).then(() => {
                tax.updateTax();
              });
            });
          });
        });
      });
    });
  },
  adLiveInvader: function (text) {
    _methods.methods.debug('tax.adLiveInvader');

    _rpInvaderAdEntity.rpInvaderAdEntity.create({
      datetime: _weather.weather.getRpDateTime(),
      name: 'Государство',
      phone: 'gov.sa',
      title: 'Продажа',
      text: text
    });

    text = text.length > 49 ? text.slice(0, 50) + "..." : text;

    _methods.methods.notifyWithPictureToAll("Государство", "~g~Реклама", text, "CHAR_LIFEINVADER", 2);
  },
  sell: function () {
    _methods.methods.debug('tax.sell');

    _stockEntity.stocksEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        user_id: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;
        mp.players.forEach(function (p) {
          if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["user_id"])) {
            _user.user.set(p, 'stock_id', 0);

            _user.user.addBankMoney(p, price);

            _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

            p.notify('~r~Ваш склад был изъят государством за неуплату');

            _user.user.saveAccount(p);
          }
        });

        _stock.stock.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

        _user2.userEntity.update({
          money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
          stock_id: 0
        }, {
          where: {
            id: _methods.methods.parseInt(row["user_id"])
          }
        });

        _methods.methods.saveLog('SellInactive', `"USER: ${row["user_id"]} STOCK ${row["id"]}"`);
      });
      if (rows.length > 0) tax.adLiveInvader(`Склады поступили в продажу`);
    });

    _housesEntity.housesEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        id_user: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;
        mp.players.forEach(function (p) {
          if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["id_user"])) {
            _user.user.set(p, 'id_house', 0);

            _user.user.updateClientCache(p);

            _user.user.addBankMoney(p, price);

            _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

            p.notify('~r~Ваш дом был изъят государством за неуплату');

            _user.user.saveAccount(p);
          } else if (_user.user.isLogin(p) && _user.user.get(p, 'id_house') == _methods.methods.parseInt(row['id'])) {
            _user.user.set(p, 'id_house', 0);

            _user.user.updateClientCache(p);

            p.notify('~r~Дом, в котором вы были прописаны был изъят государством за неуплату');
          }
        });

        _houses.houses.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

        _user2.userEntity.update({
          money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
          id_house: 0
        }, {
          where: {
            id: _methods.methods.parseInt(row["id_user"])
          }
        });

        _user2.userEntity.update({
          id_house: 0
        }, {
          where: {
            id_house: _methods.methods.parseInt(row['id'])
          }
        });

        _methods.methods.saveLog('SellInactive', `"USER: ${row["id_user"]} HOUSE ${row["id"]}"`);
      });
      if (rows.length > 0) tax.adLiveInvader(`Дома поступили в продажу`);
    });

    _condoEntity.condoEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        id_user: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;
        mp.players.forEach(function (p) {
          if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["id_user"])) {
            _user.user.set(p, 'condo_id', 0);

            _user.user.addBankMoney(p, price);

            _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

            p.notify('~r~Ваша квартира была изъята государством за неуплату');

            _user.user.saveAccount(p);
          }
        });

        _condo.condo.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

        _user2.userEntity.update({
          money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
          condo_id: 0
        }, {
          where: {
            id: _methods.methods.parseInt(row["id_user"])
          }
        });

        _methods.methods.saveLog('SellInactive', `"USER: ${row["id_user"]} CONDO ${row["id"]}"`);
      });
      if (rows.length > 0) tax.adLiveInvader(`Квартиры поступили в продажу`);
    });

    _business2.businessEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        user_id: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;
        mp.players.forEach(function (p) {
          if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["user_id"])) {
            _user.user.set(p, 'business_id', 0);

            _user.user.addBankMoney(p, price);

            _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

            p.notify('~r~Ваш бизнес был изъят государством за неуплату');

            _user.user.saveAccount(p);
          }
        });

        _business.business.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

        _user2.userEntity.update({
          money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
          business_id: 0
        }, {
          where: {
            id: _methods.methods.parseInt(row["user_id"])
          }
        });

        tax.adLiveInvader(`Бизнес ${row["name"]} поступил в продажу`);

        _methods.methods.saveLog('SellInactive', `"USER: ${row["user_id"]} BIZZ ${row["id"]}"`);
      });
      if (rows.length > 0) tax.adLiveInvader(`Бизнесы поступили в продажу`);
    });

    _apartmentEntity.apartmentEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        user_id: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;
        mp.players.forEach(function (p) {
          if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["user_id"])) {
            _user.user.set(p, 'apartment_id', 0);

            _user.user.addBankMoney(p, price);

            _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

            p.notify('~r~Ваши апартаменты были изъяты государством за неуплату');

            _user.user.saveAccount(p);
          }
        });

        _apartments.apartments.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

        _user2.userEntity.update({
          money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
          apartment_id: 0
        }, {
          where: {
            id: _methods.methods.parseInt(row["user_id"])
          }
        });

        _methods.methods.saveLog('SellInactive', `"USER: ${row["user_id"]} APART ${row["id"]}"`);
      });
      if (rows.length > 0) tax.adLiveInvader(`Апартаменты поступили в продажу`);
    });

    _carsModel.carsEntity.findAll({
      where: {
        money_tax: {
          [_sequelize.Op.lte]: _sequelizeTypescript.Sequelize.literal("(round(price * '0.0001' + '10', 0) * '" + _taxDays + "') * '-1'")
        },
        id_user: {
          [_sequelize.Op.gt]: 0
        }
      },
      limit: 20
    }).then(rows => {
      rows.forEach(row => {
        let price = _methods.methods.parseInt(row['price']);

        if (_methods.methods.parseInt(row["money_tax"]) < -100000) price = _methods.methods.parseInt(price * 1.3);
        price = price * 0.7;

        _user2.userEntity.findAll({
          where: {
            [_sequelize.Op.or]: [{
              car_id1: row["id"]
            }, {
              car_id2: row["id"]
            }, {
              car_id3: row["id"]
            }, {
              car_id4: row["id"]
            }, {
              car_id5: row["id"]
            }, {
              car_id6: row["id"]
            }, {
              car_id7: row["id"]
            }, {
              car_id8: row["id"]
            }]
          }
        }).then(rows1 => {
          let carId = "1";
          rows1.forEach(item => {
            if (item["car_id2"] == row["id"]) carId = "2";
            if (item["car_id3"] == row["id"]) carId = "3";
            if (item["car_id4"] == row["id"]) carId = "4";
            if (item["car_id5"] == row["id"]) carId = "5";
            if (item["car_id6"] == row["id"]) carId = "6";
            if (item["car_id7"] == row["id"]) carId = "7";
            if (item["car_id8"] == row["id"]) carId = "8";
          });
          mp.players.forEach(function (p) {
            if (_user.user.isLogin(p) && _user.user.getId(p) == _methods.methods.parseInt(row["id_user"])) {
              _user.user.set(p, 'car_id' + carId, 0);

              _user.user.addBankMoney(p, price);

              _bank.bank.sendSmsBankOperation(p, `Зачисление: $${_methods.methods.numberFormat(price)}`);

              p.notify('~r~Ваш транспорт были изъяты государством за неуплату');

              _user.user.saveAccount(p);
            }
          });

          _vehicles.vehicles.updateOwnerInfo(_methods.methods.parseInt(row['id']), 0, '');

          _user2.userEntity.update({
            money_bank: _sequelizeTypescript.Sequelize.literal("money_bank + " + _methods.methods.parseInt(price)),
            ["car_id" + carId]: 0
          }, {
            where: {
              id: _methods.methods.parseInt(row["id_user"])
            }
          });

          _methods.methods.saveLog('SellInactive', `"USER: ${row["id_user"]} CAR ${row["id"]}"`);
        });

        if (rows.length > 0) tax.adLiveInvader(`Новый транспорт поступили в продажу`);
      });
    });
  },
  payTax: function (player, type, sum, score) {
    _methods.methods.debug('tax.payTax');

    if (!_user.user.isLogin(player)) return;

    if (sum < 1) {
      player.notify('~r~Сумма должна быть больше нуля');
      return;
    }

    let table = 'cars';
    if (score.toString()[0] == "1") table = 'business';else if (score.toString()[0] == "3") table = 'cars';else if (score.toString()[0] == "4") table = 'condo';else if (score.toString()[0] == "5") table = 'houses';else if (score.toString()[0] == "7") table = 'apartment';else if (score.toString()[0] == "9") table = 'stocks';
    let model = table == "cars" ? _carsModel.carsEntity : table == "business" ? _business2.businessEntity : table == "condo" ? _condoEntity.condoEntity : table == "houses" ? _housesEntity.housesEntity : table == "apartment" ? _apartmentEntity.apartmentEntity : table == "stocks" ? _stockEntity.stocksEntity : _carsModel.carsEntity;

    _methods.methods.debug(table);

    model.findAll({
      where: {
        score_tax: score
      },
      limit: 1
    }).then(rows => {
      if (rows.length == 0) return player.notify('~r~Номер счёта не найден');
      let row = rows[0];

      if (sum > _methods.methods.parseInt(row["money_tax"]) * -1) {
        player.notify('~r~Сумма оплаты не должна привышать суммы долга (#1)');
        player.notify(`~r~Ваш долг равен: $${row["money_tax"]}`);
        return;
      }

      if (type == 0) _user.user.removeCashMoney(player, sum);else _user.user.removeBankMoney(player, sum);
      model.update({
        money_tax: _methods.methods.parseInt(row["money_tax"]) + sum
      }, {
        where: {
          score_tax: score
        }
      });
      player.notify(`~g~Счёт ${score} был оплачен на сумму $${sum}`);
      setTimeout(() => tax.updateTax(score), 1000);
    });
  },
  removeTax: function () {
    _methods.methods.debug('tax.removeTax');

    _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_houses SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE id_user > 0").then(() => {
      _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_condo SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE id_user > 0").then(() => {
        _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_apartment SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE user_id > 0").then(() => {
          _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_business SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE user_id > 0").then(() => {
            _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_stocks SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE user_id > 0").then(() => {
              _sequelize2.sequelize.query("UPDATE pAFk3qiAgG1_cars SET money_tax = money_tax - (round((price * '" + _currentTax + "' + '" + _taxMin + "') / '7', 0)) WHERE id_user > 0").then(() => {});
            });
          });
        });
      });
    });

    _methods.methods.notifyWithPictureToAll('~y~Оплата налогов', 'Новости правительства', 'Не забудьте оплатить налог за ваше имущество', 'CHAR_BANK_MAZE');

    setTimeout(tax.sell, 15000);
    setTimeout(tax.updateTax, 20000);
  },
  updateTax: function (score) {
    if (!score || score.toString()[0] == "4") {
      _condoEntity.condoEntity.findAll({
        where: {
          id_user: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          _data.Container.Set(300000 + _methods.methods.parseInt(item['id']), 'money_tax', item['money_tax']);

          _data.Container.Set(300000 + _methods.methods.parseInt(item['id']), 'score_tax', item['score_tax']);
        });
      });
    }

    if (!score || score.toString()[0] == "5") {
      _housesEntity.housesEntity.findAll({
        where: {
          id_user: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          let q = _houses.houses.getHouseData(item.id);

          if (q) {
            q.money_tax = item.money_tax;
            q.score_tax = item.score_tax;
          }
        });
      });
    }

    if (!score || score.toString()[0] == "3") {
      _carsModel.carsEntity.findAll({
        where: {
          id_user: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          _data.Container.Set(200000 + _methods.methods.parseInt(item['id']), 'money_tax', item['money_tax']);

          _data.Container.Set(200000 + _methods.methods.parseInt(item['id']), 'score_tax', item['score_tax']);
        });
      });
    }

    if (!score || score.toString()[0] == "9") {
      _stockEntity.stocksEntity.findAll({
        where: {
          user_id: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          _data.Container.Set(400000 + _methods.methods.parseInt(item['id']), 'money_tax', item['money_tax']);

          _data.Container.Set(400000 + _methods.methods.parseInt(item['id']), 'score_tax', item['score_tax']);
        });
      });
    }

    if (!score || score.toString()[0] == "7") {
      _apartmentEntity.apartmentEntity.findAll({
        where: {
          user_id: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          _data.Container.Set(-100000 + _methods.methods.parseInt(item['id']), 'money_tax', item['money_tax']);

          _data.Container.Set(-100000 + _methods.methods.parseInt(item['id']), 'score_tax', item['score_tax']);
        });
      });
    }

    if (!score || score.toString()[0] == "1") {
      _business2.businessEntity.findAll({
        where: {
          user_id: {
            [_sequelize.Op.not]: 0
          }
        },
        attributes: ["id", "score_tax", "money_tax"]
      }).then(rows => {
        rows.forEach(item => {
          let q = _business.business.getData(item.id);

          if (q) {
            q.money_tax = item.money_tax;
            q.score_tax = item.score_tax;
            q.save();
          }
        });
      });
    }
  }
};
exports.tax = tax;
},{"../modules/data":"Edcz","../modules/methods":"qXSp","../user":"QE3B","../business/bank":"MvN0","../condo":"YoDO","../houses":"buna","../apartments":"qIZj","../business":"y5vZ","../vehicles":"pYYy","../stock":"MdNj","./weather":"uehX","../modules/entity/business":"uUTa","../modules/entity/user":"xF3w","../modules/entity/housesEntity":"kvtc","../modules/entity/condoEntity":"JZQ2","../modules/entity/apartmentEntity":"K5GH","../modules/entity/stockEntity":"oqg0","../modules/entity/carsModel":"pv82","../modules/entity/rpInvaderAdEntity":"dIe4","../modules/sequelize":"ylsz"}],"LIqP":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trucker = void 0;

var _user = require("../user");

var _methods = require("../modules/methods");

var _data = require("../modules/data");

var _business = require("../business");

var _vehicles = require("../vehicles");

let count = 1;
let trucker = {
  w1: [['Ванилин', '1966 Digestive co.', 1176.739, -3272.887, 4.842545, 694.0635, -833.3184, 23.39188, 400, 500, 1], ['Микрофоны', 'AKAN Records', 1248.18, -3148.986, 4.76891, -992.722, -295.7742, 36.82506, 800, 1000, 2], ['Виниловые пластинки', 'AKAN Records', 1248.167, -3142.517, 4.767723, -992.722, -295.7742, 36.82506, 800, 1000, 2], ['Усилители', 'AKAN Records', 1247.896, -3135.533, 4.748992, -992.722, -295.7742, 36.82506, 800, 1000, 2], ['Рекордеры', 'AKAN Records', 1189.483, -3103.883, 4.786432, -992.722, -295.7742, 36.82506, 800, 1000, 2], ['Канцелярия', 'Albany', 1177.482, -3288.834, 4.789845, -23.15799, -1678.217, 28.46997, 400, 600, 0], ['Ткани', 'Alphabetz', 1177.482, -3288.834, 4.789845, -1258.123, -1142.472, 6.447406, 900, 1000, 0], ['Нитки', 'Alphabetz', 1177.482, -3288.834, 4.789845, 47.02713, -101.6483, 55.21708, 900, 1000, 0], ['Нитки', 'Alphabetz', 1177.482, -3288.834, 4.789845, -1258.123, -1142.472, 6.447406, 900, 1000, 0], ['Нитки', 'Alphabetz', 1177.482, -3288.834, 4.789845, -1305.9, -604.2043, 26.9569, 900, 1000, 0], ['Канцелярия', 'Anna Rex', 1247.01, -3288.55, 4.82778, -647.4616, -199.6646, 36.50945, 800, 900, 0], ['Яйца', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 450, 600, 0], ['Соусы, Специи', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 450, 600, 0], ['Овощи', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 450, 600, 0], ['Инструменты', 'Bay Hardware', 1246.469, -3262.552, 4.789814, -3.7077817916870117, 6488.53173828125, 30.508758544921875, 1500, 1600, 0], ['Удобрения', 'Bay Hardware', 1246.469, -3262.552, 4.789814, -3.7077817916870117, 6488.53173828125, 30.508758544921875, 1500, 1600, 0], ['Садовые приборы', 'Bay Hardware', 1246.469, -3262.552, 4.789814, -3.7077817916870117, 6488.53173828125, 30.508758544921875, 1500, 1600, 0], ['Яйца', 'Beachwalk Bistro', 1247.896, -3135.533, 4.748992, -1288.0269775390625, -1325.3994140625, 3.2284440994262695, 600, 700, 0], ['Напитки', 'Beachwalk Bistro', 1247.896, -3135.533, 4.748992, -1288.0269775390625, -1325.3994140625, 3.2284440994262695, 600, 700, 0], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, -669.7341, 290.0461, 80.65161, 700, 900, 0], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, -1237.469, -327.0368, 36.22047, 700, 900, 0], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, 1146.536, -466.5147, 65.54852, 700, 900, 0], ['Аксессуары', 'Bikini Universe', 1248.18, -3148.986, 4.76891, -1217.006, -1526.73, 3.282896, 700, 900, 1], ['Майки', 'Bikini Universe', 1248.18, -3148.986, 4.76891, -1217.006, -1526.73, 3.282896, 600, 700, 0], ['Напитки', 'Bishop’s Chicken', 1246.994, -3272.652, 4.826261, 159.6689, -1646.977, 28.29167, 700, 800, 0], ['Соусы, Специи', 'Bishop’s Chicken', 1246.994, -3272.652, 4.826261, 159.6689, -1646.977, 28.29167, 700, 800, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, 1146.081, -466.439, 65.56268, 800, 900, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, 1146.081, -466.439, 65.56268, 800, 900, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, 83.31238, -672.2915, 43.11325, 800, 900, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, 83.31238, -672.2915, 43.11325, 800, 900, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, -1239.914, -299.9608, 36.3982, 900, 1000, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, -1239.914, -299.9608, 36.3982, 900, 1000, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, -276.9223, -899.1955, 30.08061, 600, 800, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, -276.9223, -899.1955, 30.08061, 600, 800, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, 239.7054, -12.55212, 72.65054, 600, 700, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, 239.7054, -12.55212, 72.65054, 600, 700, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, -1534.518, -435.3698, 34.44209, 600, 700, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, -1534.518, -435.3698, 34.44209, 600, 700, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, 90.51542, -215.8247, 53.49169, 600, 700, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, 90.51542, -215.8247, 53.49169, 600, 700, 0], ['Напитки', 'Bite!', 1246.994, -3272.652, 4.826261, -255.0688, -342.427, 28.83808, 600, 700, 0], ['Соусы, Специи', 'Bite!', 1246.994, -3272.652, 4.826261, -255.0688, -342.427, 28.83808, 600, 700, 0], ['Аксессуары для велосипедов', 'Bourgeois Bicyles', 1177.424, -3262.583, 4.794122, -493.8318, -51.65614, 38.96881, 1100, 1200, 1], ['Бижутерия, Блузки, Юбки', 'Caca', 1246.469, -3262.552, 4.789814, -282.6442, -95.1025, 46.27415, 800, 900, 0], ['Кофе', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 600, 700, 0], ['Напитки', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 600, 700, 0], ['Соусы, Специи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 600, 700, 0], ['Кофе', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 700, 800, 0], ['Напитки', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 700, 800, 0], ['Соусы, Специи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 700, 800, 0], ['Кофе', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 700, 800, 0], ['Напитки', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 700, 800, 0], ['Соусы, Специи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 700, 800, 0], ['Краска', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 700, 800, 0], ['Фары', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 700, 800, 0], ['Зеркала', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 700, 800, 0], ['Аксессуары', 'Chaps', 1177.424, -3262.583, 4.794122, -491.6205, -60.24947, 38.9837, 800, 900, 0], ['Аксессуары', 'Chaps', 1177.424, -3262.583, 4.794122, -1298.032, -377.8098, 35.57209, 800, 900, 0], ['Аксессуары', 'Chaps', 1177.424, -3262.583, 4.794122, 64.32887, -1417.537, 28.31173, 600, 800, 0], ['Чистящие средства', 'Chico\'s Hypermarket', 1177.616, -3298.665, 4.780886, 1088.995, -792.6378, 57.2627, 800, 900, 0], ['Средства гигиены', 'Chico\'s Hypermarket', 1177.616, -3298.665, 4.780886, 1088.995, -792.6378, 57.2627, 800, 900, 0], ['Напитки', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, -1514.074, -422.8463, 34.44212, 800, 900, 0], ['Соусы, Специи', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, -1514.074, -422.8463, 34.44212, 800, 900, 0], ['Напитки', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, 37.03512, -1005.002, 28.4633, 700, 800, 0], ['Соусы, Специи', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, 37.03512, -1005.002, 28.4633, 700, 800, 0], ['Чистящие средства', 'Cine Areola', 1247.896, -3135.533, 4.748992, 397.4186, 60.15658, 96.97795, 900, 1200, 1], ['Напитки', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 800, 1000, 0], ['Чистящие средства', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 800, 1000, 0], ['Специи, Соусы', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 800, 1000, 0], ['Соусы, Специи', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -176.97, -1426.962, 30.27832, 700, 800, 0], ['Соусы, Специи', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -1705.782, -1083.873, 12.07399, 800, 900, 0], ['Соусы, Специи', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -131.5051, -261.7775, 41.98965, 800, 900, 0], ['Микрофоны', 'CNT', 1177.616, -3298.665, 4.780886, 777.815, 226.4473, 84.63857, 1100, 1300, 1], ['Объективы', 'CNT', 1177.616, -3298.665, 4.780886, 777.815, 226.4473, 84.63857, 1100, 1300, 1], ['Соусы, Специи', 'Coconut Café', 1248.167, -3142.517, 4.767723, -1129.939, -1452.252, 3.952911, 700, 800, 0], ['Напитки', 'Coconut Café', 1248.167, -3142.517, 4.767723, -1129.939, -1452.252, 3.952911, 700, 800, 0], ['Напитки', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 800, 900, 0], ['Соусы, Специи', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 800, 900, 0], ['Напитки', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 700, 800, 0], ['Соусы, Специи', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 700, 800, 0], ['Напитки', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 700, 900, 0], ['Соусы, Специи', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 700, 900, 0], ['Аксессуары', 'Croq a Hoop', 1176.739, -3272.887, 4.842545, -736.1667, -134.4009, 36.27246, 700, 900, 0], ['Бижутерия', 'Croq a Hoop', 1176.739, -3272.887, 4.842545, -736.1667, -134.4009, 36.27246, 700, 900, 0], ['Напитки', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 700, 800, 0], ['Соусы, Специи', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 700, 800, 0], ['Напитки', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 700, 800, 0], ['Соусы, Специи', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 700, 800, 0], ['Майки', 'Del Perro Gifts', 1177.616, -3298.665, 4.780886, -1534.76953125, -909.52001953125, 9.134655952453613, 800, 900, 0], ['Шляпы', 'Del Perro Gifts', 1177.616, -3298.665, 4.780886, -1534.76953125, -909.52001953125, 9.134655952453613, 800, 900, 0], ['Полотенца', 'Del Perro Gifts', 1177.616, -3298.665, 4.780886, -1534.76953125, -909.52001953125, 9.134655952453613, 800, 900, 0], ['Сувениры', 'Del Perro Gifts', 1177.616, -3298.665, 4.780886, -1534.76953125, -909.52001953125, 9.134655952453613, 800, 900, 0], ['Напитки', 'Del Perro Plaza', 1177.424, -3262.583, 4.794122, -1347.505, -749.4619, 21.31466, 700, 900, 0], ['Соусы, Специи', 'Del Perro Plaza', 1177.424, -3262.583, 4.794122, -1347.505, -749.4619, 21.31466, 700, 900, 0], ['Напитки', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1212.921, -1150.016, 6.706697, 600, 800, 0], ['Сахар, Сливки', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1212.921, -1150.016, 6.706697, 600, 800, 0], ['Напитки', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1299.223, -267.9978, 38.92126, 700, 900, 0], ['Сахар, Сливки', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1299.223, -267.9978, 38.92126, 700, 900, 0], ['Аксессуары', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -274.2895, -997.4741, 24.49889, 700, 800, 0], ['Бижутерия', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -274.2895, -997.4741, 24.49889, 700, 800, 0], ['Аксессуары', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -792.4308, -175.3817, 36.28366, 800, 900, 0], ['Бижутерия', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -792.4308, -175.3817, 36.28366, 800, 900, 0], ['Аксессуары', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -1185.682, -738.9219, 19.24377, 800, 900, 0], ['Бижутерия', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -1185.682, -738.9219, 19.24377, 900, 900, 0], ['Канцелярия', 'Doppler', 1247.01, -3288.55, 4.82778, 373.104, 258.6537, 101.8852, 800, 1000, 0], ['Чистящие средства', 'Doppler', 1247.01, -3288.55, 4.82778, 373.104, 258.6537, 101.8852, 800, 1000, 0], ['Чистящие средства', 'Elkridge Hotel', 1177.616, -3298.665, 4.780886, 278.6501, -915.621, 27.94688, 700, 800, 0], ['Канцелярия', 'Elkridge Hotel', 1177.616, -3298.665, 4.780886, 278.6501, -915.621, 27.94688, 700, 800, 0], ['Аксессуары', 'Enema', 1176.739, -3272.887, 4.842545, -679.186, -166.2349, 36.65343, 800, 900, 0], ['Украшения', 'Enema', 1176.739, -3272.887, 4.842545, -679.186, -166.2349, 36.65343, 800, 900, 0], ['Канцелярия', 'Fallen Angels', 1247.756, -3155.405, 4.73872, 80.22607, -1300.145, 28.21379, 600, 800, 0], ['Шприцы', 'Fallen Angels', 1247.756, -3155.405, 4.73872, 80.22607, -1300.145, 28.21379, 1200, 1400, 1], ['Напитки', 'Fallen Angels', 1247.756, -3155.405, 4.73872, 80.22607, -1300.145, 28.21379, 600, 800, 0], ['Спец. оборудование', 'Family Dental', 1248.18, -3148.986, 4.76891, 68.40414, -1429.689, 28.31165, 1100, 1300, 1], ['Канцелярия', 'Family Dental', 1248.18, -3148.986, 4.76891, 68.40414, -1429.689, 28.31165, 600, 700, 0], ['Нитки, Иглы', 'G&B', 1248.18, -3148.986, 4.76891, -1339.917, -265.9008, 41.27707, 800, 900, 0], ['Чистящие средства', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 800, 900, 0], ['Журналы', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 800, 900, 0], ['Расходная электроника', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 800, 900, 0], ['Аксессуары', 'Gloria\'s Fashion Boutique', 1176.739, -3272.887, 4.842545, 184.1463, -1266.266, 28.19846, 750, 800, 0], ['Сувениры', 'Gloria\'s Fashion Boutique', 1176.739, -3272.887, 4.842545, 184.1463, -1266.266, 28.19846, 750, 800, 0], ['Напитки', 'Ground & Pound Café', 1247.01, -3288.55, 4.82778, 372.293, -1036.914, 28.20326, 600, 700, 0], ['Фрукты', 'Ground & Pound Café', 1247.01, -3288.55, 4.82778, 372.293, -1036.914, 28.20326, 600, 700, 0], ['Напитки', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 1107.186, -363.73, 65.91722, 800, 900, 0], ['Соусы, Специи', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 1107.186, -363.73, 65.91722, 800, 900, 0], ['Напитки', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 438.803, -1456.889, 28.20174, 700, 800, 0], ['Соусы, Специи', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 438.803, -1456.889, 28.20174, 700, 800, 0], ['Спортивные аксессуары', 'Heat', 1246.469, -3262.552, 4.789814, -1312.039, -595.1053, 27.51493, 700, 900, 0], ['Спортивные украшения', 'Heat', 1246.469, -3262.552, 4.789814, -1312.039, -595.1053, 27.51493, 700, 900, 0], ['Нитки, Иголки', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1289.273, -795.5506, 16.59293, 700, 800, 0], ['Нитки, Иголки', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1212.205, -1309.351, 3.662347, 700, 800, 0], ['Сувениры', 'High Time', 1247.896, -3135.533, 4.748992, 156.7241, -261.5158, 50.37927, 700, 800, 0], ['Аксессуары для обуви', 'Hippy Feet', 1248.18, -3148.986, 4.76891, 146.2802, -204.1069, 53.25352, 700, 800, 0], ['Напитки', 'Hit \'n\' Run Coffee', 1189.483, -3103.883, 4.786432, -552.7731, -690.2885, 32.15757, 600, 700, 0], ['Соусы, Специи', 'Hit \'n\' Run Coffee', 1189.483, -3103.883, 4.786432, -552.7731, -690.2885, 32.15757, 600, 700, 0], ['Аксессуары', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1443.705, -259.1526, 45.20773, 800, 900, 0], ['Бижутерия', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1443.705, -259.1526, 45.20773, 800, 900, 0], ['Аксессуары', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1409.986, -257.7107, 45.36119, 800, 900, 0], ['Бижутерия', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1409.986, -257.7107, 45.36119, 800, 900, 0], ['Аксессуары', 'Homme Gina', 1247.896, -3135.533, 4.748992, -679.4575, -242.7679, 35.58676, 800, 900, 0], ['Бижутерия', 'Homme Gina', 1247.896, -3135.533, 4.748992, -679.4575, -242.7679, 35.58676, 800, 900, 0], ['Напитки', 'Horny\'s Burgers', 1248.18, -3148.986, 4.76891, 1247.934, -345.3344, 68.08203, 800, 900, 0], ['Соусы, Специи', 'Horny\'s Burgers', 1248.18, -3148.986, 4.76891, 1247.934, -345.3344, 68.08203, 800, 900, 0], ['Напитки', 'Hwan Café', 1248.18, -3148.986, 4.76891, -652.9146, -914.715, 22.89181, 600, 800, 0], ['Соусы, Специи', 'Hwan Café', 1248.18, -3148.986, 4.76891, -652.9146, -914.715, 22.89181, 600, 800, 0], ['Канцелярия', 'J\'s Bonds', 1247.756, -3155.405, 4.73872, -228.6619, 6350.804, 31.30903, 1800, 2000, 0], ['Канцелярия', 'J\'s Bonds', 1247.756, -3155.405, 4.73872, -528.8524, 19.95355, 43.21664, 700, 800, 0], ['Канцелярия', 'J\'s Bonds', 1247.756, -3155.405, 4.73872, 318.7922, -807.8198, 28.17899, 500, 600, 0], ['Напитки', 'Java Update Coffeeshop', 1247.01, -3288.55, 4.82778, -1267.758, -295.8237, 36.31553, 700, 900, 0], ['Фаст-фуд', 'Java Update Coffeeshop', 1247.01, -3288.55, 4.82778, -1267.758, -295.8237, 36.31553, 700, 900, 0], ['Напитки', 'Lagoon\'s Diner', 1246.469, -3262.552, 4.789814, -1699.517, -1077.39, 12.01736, 700, 900, 0], ['Соусы, Специи', 'Lagoon\'s Diner', 1246.469, -3262.552, 4.789814, -1699.517, -1077.39, 12.01736, 700, 900, 0], ['Канцелярия', 'Larry\'s RV Sales', 1247.756, -3155.405, 4.73872, 1224.564, 2720.561, 37.00457, 1300, 1400, 0], ['Напитки', 'Last Train in Los Santos', 1246.469, -3262.552, 4.789814, -383.9094, 279.9946, 83.79972, 800, 1000, 0], ['Соусы, Специи', 'Last Train in Los Santos', 1246.469, -3262.552, 4.789814, -383.9094, 279.9946, 83.79972, 800, 1000, 0], ['Пласт. стаканы', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1243.56, -256.8912, 38.02166, 700, 900, 0], ['Пласт. стаканы', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1524.408, -421.1407, 34.44219, 700, 900, 0], ['Соусы, Специи', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, -291.9013, -1344.832, 30.29802, 600, 700, 0], ['Напитки', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, -291.9013, -1344.832, 30.29802, 600, 700, 0], ['Соусы, Специи', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, 416.9493, -1927.244, 23.59029, 400, 500, 0], ['Напитки', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, 416.9493, -1927.244, 23.59029, 400, 500, 0], ['Мячи', 'Los Santos Golf Club', 1246.469, -3262.552, 4.789814, -1353.222, 130.1936, 55.23882, 1000, 1100, 1], ['Напитки', 'Los Santos Meteor', 1247.01, -3288.55, 4.82778, -156.0574, -1302.705, 30.32649, 600, 700, 0], ['Чернила', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 600, 700, 0], ['Накопители', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 600, 700, 0], ['Чернила', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 800, 900, 0], ['Накопители', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 800, 900, 0], ['Чернила', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 600, 700, 0], ['Накопители', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 600, 700, 0], ['Чернила', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 700, 800, 0], ['Накопители', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 700, 800, 0], ['Чернила', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 600, 700, 0], ['Накопители', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 600, 700, 0], ['Грим', 'Los Santos Theatre', 1177.482, -3288.834, 4.789845, 302.9688, -904.2477, 28.29317, 900, 1000, 1], ['Парики', 'Los Santos Theatre', 1177.482, -3288.834, 4.789845, 302.9688, -904.2477, 28.29317, 900, 1000, 1], ['Напитки', 'Lucky Plucker', 1177.424, -3262.583, 4.794122, 155.5885, -1481.431, 28.14162, 500, 700, 0], ['Специи, Соусы', 'Lucky Plucker', 1177.424, -3262.583, 4.794122, 155.5885, -1481.431, 28.14162, 500, 700, 0], ['Аксессуары', 'Lârss & Elbö', 1189.483, -3103.883, 4.786432, 145.9881, -125.5803, 53.82679, 700, 900, 0], ['Бижутерия', 'Lârss & Elbö', 1189.483, -3103.883, 4.786432, 145.9881, -125.5803, 53.82679, 700, 900, 0], ['Аксессуары', 'Miss T', 1247.896, -3135.533, 4.748992, -1450.012, -218.8076, 47.73064, 800, 900, 0], ['Бижутерия', 'Miss T', 1247.896, -3135.533, 4.748992, -1450.012, -218.8076, 47.73064, 800, 900, 0], ['Аксессуары', 'Miss T', 1247.896, -3135.533, 4.748992, -1321.64, -579.9012, 28.4409, 800, 900, 0], ['Бижутерия', 'Miss T', 1247.896, -3135.533, 4.748992, -1321.64, -579.9012, 28.4409, 800, 900, 0], ['Аксессуары', 'Miss T', 1247.896, -3135.533, 4.748992, 222.1279, 174.6025, 104.2503, 800, 900, 0], ['Бижутерия', 'Miss T', 1247.896, -3135.533, 4.748992, 222.1279, 174.6025, 104.2503, 800, 900, 0], ['Парикмахерские инструменты', 'New Do Barber Shop', 1176.739, -3272.887, 4.842545, 155.5733, -1301.582, 28.20229, 700, 900, 1], ['Косметика', 'New Do Barber Shop', 1176.739, -3272.887, 4.842545, 155.5733, -1301.582, 28.20229, 700, 900, 1], ['Парикмахерские инструменты', 'New Do Barber Shop', 1176.739, -3272.887, 4.842545, 1241.673, -386.7844, 67.99102, 900, 1100, 1], ['Косметика', 'New Do Barber Shop', 1176.739, -3272.887, 4.842545, 1241.673, -386.7844, 67.99102, 900, 1100, 1], ['Напитки', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, 256.0749, -979.6636, 28.27825, 600, 700, 0], ['Специи, Соусы', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, 256.0749, -979.6636, 28.27825, 600, 700, 0], ['Напитки', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1243.143, -256.8353, 38.01562, 800, 900, 0], ['Специи, Соусы', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1243.143, -256.8353, 38.01562, 800, 900, 0], ['Напитки', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1168.707, -1150.437, 4.660981, 700, 800, 0], ['Специи, Соусы', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1168.707, -1150.437, 4.660981, 700, 800, 0], ['Напитки', 'Nut Buster', 1177.482, -3288.834, 4.789845, -1269.969, -1218.507, 3.714286, 700, 800, 0], ['Специи, Соусы', 'Nut Buster', 1177.482, -3288.834, 4.789845, -1269.969, -1218.507, 3.714286, 700, 800, 0], ['Напитки', 'Nutsaki', 1177.482, -3288.834, 4.789845, -1269.083, -823.0386, 16.09916, 700, 800, 0], ['Специи, Соусы', 'Nutsaki', 1177.482, -3288.834, 4.789845, -1269.083, -823.0386, 16.09916, 700, 800, 0], ['Парафин', 'Papa Surf', 1246.994, -3272.652, 4.826261, -1305.216, -1312.805, 3.882299, 900, 1000, 1], ['Канцелярия', 'Pawn & Jewelry', 1246.469, -3262.552, 4.789814, 163.5057, -1324.298, 28.13354, 1100, 1200, 0], ['Инструменты', 'Pawn & Jewelry', 1246.469, -3262.552, 4.789814, 163.5057, -1324.298, 28.13354, 1100, 1200, 0], ['Канцелярия', 'Pawn & Jewelry', 1246.469, -3262.552, 4.789814, -1466.728, -392.3107, 37.48353, 1400, 1500, 0], ['Инструменты', 'Pawn & Jewelry', 1246.469, -3262.552, 4.789814, -1466.728, -392.3107, 37.48353, 1400, 1500, 0], ['Напитки', 'Pearl`s Seafood', 1177.482, -3288.834, 4.789845, -1800.601, -1180.288, 12.01747, 700, 900, 0], ['Специи, Соусы', 'Pearl`s Seafood', 1177.482, -3288.834, 4.789845, -1800.601, -1180.288, 12.01747, 700, 900, 0], ['Напитки', 'Pebble Dash Pizza', 1177.482, -3288.834, 4.789845, -1305.188, -1309.014, 3.852269, 700, 800, 0], ['Специи, Соусы', 'Pebble Dash Pizza', 1177.482, -3288.834, 4.789845, -1305.188, -1309.014, 3.852269, 700, 800, 0], ['Сувениры', 'Pfister Design', 1247.756, -3155.405, 4.73872, -593.4905, -246.6295, 35.15224, 700, 900, 0], ['Канцелярия', 'Pfister Design', 1247.756, -3155.405, 4.73872, -593.4905, -246.6295, 35.15224, 700, 900, 0], ['Напитки', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 600, 700, 0], ['Соусы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 600, 700, 0], ['Овощи', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 600, 700, 0], ['Напитки', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 800, 900, 0], ['Соусы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 800, 900, 0], ['Овощи', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 800, 900, 0], ['Напитки', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 800, 900, 0], ['Соусы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 800, 900, 0], ['Овощи', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 800, 900, 0], ['Напитки', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 800, 900, 0], ['Соусы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 800, 900, 0], ['Овощи', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 800, 900, 0], ['Напитки', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 700, 800, 0], ['Соусы', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 700, 800, 0], ['Овощи', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 700, 800, 0], ['DVD с порно', 'Porn Crackers', 1177.616, -3298.665, 4.780886, 193.3331, -1495.756, 28.14161, 800, 1000, 1], ['Фаллоимитаторы', 'Porn Crackers', 1177.616, -3298.665, 4.780886, 193.3331, -1495.756, 28.14161, 800, 1000, 1], ['Презервативы', 'Porn Crackers', 1177.616, -3298.665, 4.780886, 193.3331, -1495.756, 28.14161, 800, 1000, 1], ['Сексуальные игрушки', 'Porn Crackers', 1177.616, -3298.665, 4.780886, 193.3331, -1495.756, 28.14161, 800, 1000, 1], ['Порножурналы', 'Porn Crackers', 1177.616, -3298.665, 4.780886, 193.3331, -1495.756, 28.14161, 800, 1000, 1], ['Аксессуары', 'Ranch', 1246.994, -3272.652, 4.826261, -1554.986, -470.299, 34.70235, 800, 900, 0], ['Бижутерия', 'Ranch', 1246.994, -3272.652, 4.826261, -1554.986, -470.299, 34.70235, 800, 900, 0], ['Аксессуары', 'Ranch', 1246.994, -3272.652, 4.826261, -1220.568, -889.2198, 11.5447, 700, 800, 0], ['Бижутерия', 'Ranch', 1246.994, -3272.652, 4.826261, -1220.568, -889.2198, 11.5447, 700, 800, 0], ['Аксессуары', 'Ranch', 1246.994, -3272.652, 4.826261, -607.7878, -1032.258, 20.78753, 600, 700, 0], ['Бижутерия', 'Ranch', 1246.994, -3272.652, 4.826261, -607.7878, -1032.258, 20.78753, 600, 700, 0], ['Аксессуары', 'Ranch', 1246.994, -3272.652, 4.826261, 410.5782, -768.0493, 28.17724, 500, 600, 0], ['Бижутерия', 'Ranch', 1246.994, -3272.652, 4.826261, 410.5782, -768.0493, 28.17724, 500, 600, 0], ['Аксессуары', 'Ranch', 1246.994, -3272.652, 4.826261, -161.7716, -38.84959, 51.98118, 600, 700, 0], ['Бижутерия', 'Ranch', 1246.994, -3272.652, 4.826261, -161.7716, -38.84959, 51.98118, 600, 700, 0], ['Яйца', 'Ring of Fire Chili House', 1189.483, -3103.883, 4.786432, 191.6209, -1455.283, 28.14162, 500, 600, 0], ['Дрожжи', 'Ring of Fire Chili House', 1189.483, -3103.883, 4.786432, 191.6209, -1455.283, 28.14162, 500, 600, 0], ['Сахар', 'Ring of Fire Chili House', 1189.483, -3103.883, 4.786432, 191.6209, -1455.283, 28.14162, 500, 600, 0], ['Чистящие средства', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 800, 900, 0], ['Посуда', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 800, 900, 0], ['Коньяк', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 1700, 1900, 2], ['Провизия', 'The Pink Cage Motel', 1247.896, -3135.533, 4.748992, 327.985, -204.4751, 53.08627, 700, 800, 0], ['Чистящие средства', 'The Pink Cage Motel', 1247.896, -3135.533, 4.748992, 327.985, -204.4751, 53.08627, 700, 800, 0], ['Постельное бельё', 'The Pink Cage Motel', 1247.896, -3135.533, 4.748992, 327.985, -204.4751, 53.08627, 700, 800, 0], ['Алкоголь', 'The Pink Cage Motel', 1247.896, -3135.533, 4.748992, 327.985, -204.4751, 53.08627, 1300, 1400, 1], ['Напитки', 'The Pink Cage Motel', 1247.896, -3135.533, 4.748992, 327.985, -204.4751, 53.08627, 700, 800, 0], ['Напитки', 'The Sundae Post', 1248.167, -3142.517, 4.767723, -1196.023, -1534.684, 3.423592, 600, 700, 0], ['Напитки', 'The Taco Farmer', 1248.18, -3148.986, 4.76891, 19.97245, -1597.479, 28.28243, 500, 600, 0], ['Специи, Соусы', 'The Taco Farmer', 1248.18, -3148.986, 4.76891, 19.97245, -1597.479, 28.28243, 500, 600, 0], ['Напитки', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 600, 700, 0], ['Чистящие средства', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 600, 700, 0], ['Инструменты', 'Timmy`s Flowers', 1246.994, -3272.652, 4.826261, 137.2045, -1491.066, 28.11743, 600, 700, 0], ['Семена', 'Timmy`s Flowers', 1246.994, -3272.652, 4.826261, 137.2045, -1491.066, 28.11743, 600, 700, 0], ['Удобрения', 'Timmy`s Flowers', 1246.994, -3272.652, 4.826261, 137.2045, -1491.066, 28.11743, 600, 700, 0], ['DVD с порно', 'Tits and Bobs', 1177.616, -3298.665, 4.780886, 327.2008, -1287.201, 30.7416, 800, 1000, 1], ['Фаллоимитаторы', 'Tits and Bobs', 1177.616, -3298.665, 4.780886, 327.2008, -1287.201, 30.7416, 800, 1000, 1], ['Презервативы', 'Tits and Bobs', 1177.616, -3298.665, 4.780886, 327.2008, -1287.201, 30.7416, 800, 1000, 1], ['Сексуальные игрушки', 'Tits and Bobs', 1177.616, -3298.665, 4.780886, 327.2008, -1287.201, 30.7416, 800, 1000, 1], ['Зерна Попкорна', 'Tivoli Cinema', 1246.994, -3272.652, 4.826261, -1421.906, -241.5036, 45.37916, 800, 900, 0], ['Напитки', 'Tivoli Cinema', 1246.994, -3272.652, 4.826261, -1421.906, -241.5036, 45.37916, 800, 900, 0], ['Чистящие средства', 'Tivoli Cinema', 1246.994, -3272.652, 4.826261, -1421.906, -241.5036, 45.37916, 800, 900, 0], ['Провизия', 'Tivoli Cinema', 1246.994, -3272.652, 4.826261, -1421.906, -241.5036, 45.37916, 800, 900, 0], ['Канцелярия', 'Tivoli Cinema', 1246.994, -3272.652, 4.826261, -1421.906, -241.5036, 45.37916, 800, 900, 0], ['Канцелярия', 'Totally Rental', 1177.424, -3262.583, 4.794122, 61.10703, -1627.38, 28.42426, 600, 700, 0], ['Канцелярия', 'Touchdown Car Rentals', 1177.424, -3262.583, 4.794122, -830.3537, -2344.026, 13.57062, 500, 600, 0], ['Фаст-фуд', 'TW@', 1176.739, -3272.887, 4.842545, -767.3617, -591.5817, 29.12627, 600, 700, 0], ['Напитки', 'TW@', 1176.739, -3272.887, 4.842545, -767.3617, -591.5817, 29.12627, 600, 700, 0], ['Чистящие средства', 'TW@', 1176.739, -3272.887, 4.842545, -767.3617, -591.5817, 29.12627, 800, 900, 1], ['Фаст-фуд', 'TW@', 1176.739, -3272.887, 4.842545, -612.2119, -1060.163, 20.78755, 600, 700, 0], ['Напитки', 'TW@', 1176.739, -3272.887, 4.842545, -612.2119, -1060.163, 20.78755, 600, 700, 0], ['Чистящие средства', 'TW@', 1176.739, -3272.887, 4.842545, -612.2119, -1060.163, 20.78755, 700, 800, 1], ['Фаст-фуд', 'TW@', 1176.739, -3272.887, 4.842545, -683.4301, -880.2512, 23.49901, 600, 700, 0], ['Напитки', 'TW@', 1176.739, -3272.887, 4.842545, -683.4301, -880.2512, 23.49901, 600, 700, 0], ['Чистящие средства', 'TW@', 1176.739, -3272.887, 4.842545, -683.4301, -880.2512, 23.49901, 800, 900, 1], ['Фаст-фуд', 'TW@', 1176.739, -3272.887, 4.842545, -708.4053, -880.0361, 22.59839, 600, 700, 0], ['Напитки', 'TW@', 1176.739, -3272.887, 4.842545, -708.4053, -880.0361, 22.59839, 600, 700, 0], ['Чистящие средства', 'TW@', 1176.739, -3272.887, 4.842545, -708.4053, -880.0361, 22.59839, 800, 900, 1], ['Напитки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 88.26479, 304.5907, 108.9992, 800, 900, 0], ['Соусы, Специи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 88.26479, 304.5907, 108.9992, 800, 900, 0], ['Напитки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, -1552.886, -469.6979, 34.67694, 800, 900, 0], ['Соусы, Специи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, -1552.886, -469.6979, 34.67694, 800, 900, 0], ['Напитки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 1602.053, 6450.111, 24.21856, 1800, 1900, 0], ['Соусы, Специи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 1602.053, 6450.111, 24.21856, 1800, 1900, 0], ['Чистящие средства', 'Vankhov', 1247.896, -3135.533, 4.748992, 50.56637, -917.8481, 28.80546, 600, 700, 0], ['Крема для загара', 'Vespucci Surfing', 1248.167, -3142.517, 4.767723, -1223.588, -1518.244, 3.280532, 700, 800, 0], ['Доски для серфинга', 'Vespucci Surfing', 1248.167, -3142.517, 4.767723, -1223.588, -1518.244, 3.280532, 700, 800, 0], ['Пляжные принадлежности', 'Vespucci Surfing', 1248.167, -3142.517, 4.767723, -1223.588, -1518.244, 3.280532, 700, 800, 0], ['Алкоголь', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 1000, 1100, 1], ['Напитки', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 700, 800, 0], ['Специи, Соусы', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 700, 800, 0], ['Алкоголь', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 1200, 1300, 1], ['Напитки', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 800, 900, 0], ['Специи, Соусы', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 800, 900, 0], ['Микрофоны', 'Weazel', 1177.616, -3298.665, 4.780886, -561.9981, -905.2781, 22.88613, 900, 1000, 1], ['Объективы', 'Weazel', 1177.616, -3298.665, 4.780886, -561.9981, -905.2781, 22.88613, 900, 1000, 1], ['Чистящие средства', 'Wenger Institute', 1246.469, -3262.552, 4.789814, -359.7782, -228.2643, 36.25945, 800, 900, 1], ['Чистящие средства', 'Whirligig Theater', 1246.994, -3272.652, 4.826261, 303.0919, 144.4959, 102.7237, 800, 900, 0], ['Напитки', 'Whirligig Theater', 1246.994, -3272.652, 4.826261, 303.0919, 144.4959, 102.7237, 800, 900, 0], ['Грим', 'Whirligig Theater', 1246.994, -3272.652, 4.826261, 303.0919, 144.4959, 102.7237, 1100, 1200, 1], ['Нитки, Иглы', 'White Widow', 1247.01, -3288.55, 4.82778, -251.2991, -250.8687, 35.51898, 700, 800, 0], ['Швейные инструменты', 'White Widow', 1247.01, -3288.55, 4.82778, -251.2991, -250.8687, 35.51898, 700, 800, 0], ['Напитки', 'Wigwam Burger', 1177.616, -3298.665, 4.780886, -1525.918, -446.4672, 34.442, 700, 800, 0], ['Специи, Соусы', 'Wigwam Burger', 1177.616, -3298.665, 4.780886, -1525.918, -446.4672, 34.442, 700, 800, 0], ['Чистящие средства', 'Robert Dazzler International Jewelry Exchange', 1176.739, -3272.887, 4.842545, 291.2857, -884.6104, 28.0396, 600, 700, 0], ['Начинка', 'Rusty Brown`s Ring Donuts', 1189.483, -3103.883, 4.786432, 347.7404, -997.9477, 28.29018, 600, 700, 0], ['Напитки', 'Rusty Brown`s Ring Donuts', 1189.483, -3103.883, 4.786432, 347.7404, -997.9477, 28.29018, 600, 700, 0], ['Чистящие средства', 'Rusty Brown`s Ring Donuts', 1189.483, -3103.883, 4.786432, 347.7404, -997.9477, 28.29018, 600, 700, 0], ['Напитки', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 600, 700, 0], ['Соусы, Специи', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 600, 700, 0], ['Алкоголь', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 900, 1000, 1], ['Чистящие средства', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 600, 700, 0], ['Посуда', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 900, 1000, 1], ['Крема да загара', 'Sally Surf shop', 1248.167, -3142.517, 4.767723, -216.4901, 6346.889, 30.68838, 1600, 1800, 0], ['Чистящие средства', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -205.4285, -695.3956, 32.82534, 600, 700, 0], ['Чистящие средства', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, 142.1961, -1081.504, 28.19235, 600, 700, 0], ['Чистящие средства', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -710.4504, 285.751, 83.07227, 800, 900, 0], ['Напитки', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 700, 800, 0], ['Соусы, Специи', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 700, 800, 0], ['Алкоголь', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 1200, 1300, 1], ['Напитки', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 700, 800, 0], ['Соусы, Специи', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 700, 800, 0], ['Мороженое', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 600, 700, 0], ['Напитки', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 600, 700, 0], ['Соусы, Специи', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 600, 700, 0], ['Стиральный порошок', 'Suds Law Laundromat', 1246.994, -3272.652, 4.826261, 109.256, -1565.77, 28.60273, 500, 600, 0], ['Чистящие средства', 'Suds Law Laundromat', 1246.994, -3272.652, 4.826261, 109.256, -1565.77, 28.60273, 500, 600, 0], ['Электроника, Запчасти', 'Suds Law Laundromat', 1246.994, -3272.652, 4.826261, 109.256, -1565.77, 28.60273, 900, 1000, 2], ['Чистящие средства', 'Super sonic', 1247.01, -3288.55, 4.82778, 310.4863, -956.297, 28.34788, 800, 900, 1], ['Аксессуары', 'Swallow', 1177.616, -3298.665, 4.780886, -1216.701, -885.7822, 11.74768, 700, 800, 0], ['Бижутерия', 'Swallow', 1177.616, -3298.665, 4.780886, -1216.701, -885.7822, 11.74768, 700, 800, 0], ['Аксессуары', 'Swallow', 1177.616, -3298.665, 4.780886, -1425.557, -649.5603, 27.67359, 700, 800, 0], ['Бижутерия', 'Swallow', 1177.616, -3298.665, 4.780886, -1425.557, -649.5603, 27.67359, 700, 800, 0], ['Аксессуары', 'Swallow', 1177.616, -3298.665, 4.780886, -223.0512, -44.99522, 48.57965, 700, 800, 0], ['Бижутерия', 'Swallow', 1177.616, -3298.665, 4.780886, -223.0512, -44.99522, 48.57965, 700, 800, 0], ['Аксессуары', 'Swallow', 1177.616, -3298.665, 4.780886, -637.8674, -243.0631, 37.13279, 700, 800, 0], ['Бижутерия', 'Swallow', 1177.616, -3298.665, 4.780886, -637.8674, -243.0631, 37.13279, 700, 800, 0], ['Аксессуары', 'T-Shirts XXS-XXXL', 1177.616, -3298.665, 4.780886, 264.203, 129.8575, 101.8075, 800, 900, 0], ['Бижутерия', 'T-Shirts XXS-XXXL', 1177.616, -3298.665, 4.780886, 264.203, 129.8575, 101.8075, 800, 900, 0], ['Напитки', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1551.21, -420.8625, 40.99286, 800, 900, 0], ['Соусы, Специи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1551.21, -420.8625, 40.99286, 800, 900, 0], ['Напитки', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1203.412, -794.8759, 15.26769, 700, 800, 0], ['Соусы, Специи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1203.412, -794.8759, 15.26769, 700, 800, 0], ['Напитки', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -662.2255, -713.9471, 26.52068, 600, 700, 0], ['Соусы, Специи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -662.2255, -713.9471, 26.52068, 600, 700, 0], ['Напитки', 'Ten cent Theater', 1176.739, -3272.887, 4.842545, 387.5392, -740.7101, 28.29445, 600, 700, 0], ['Чистящие средства', 'Ten cent Theater', 1176.739, -3272.887, 4.842545, 387.5392, -740.7101, 28.29445, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -853.0405, -618.0876, 27.88634, 600, 700, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -853.0405, -618.0876, 27.88634, 600, 700, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -853.0405, -618.0876, 27.88634, 900, 1000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -853.0405, -618.0876, 27.88634, 600, 700, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -853.0405, -618.0876, 27.88634, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1374.672, -212.5499, 43.39458, 800, 900, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1374.672, -212.5499, 43.39458, 800, 900, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1374.672, -212.5499, 43.39458, 1200, 1300, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1374.672, -212.5499, 43.39458, 800, 900, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1374.672, -212.5499, 43.39458, 800, 900, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 455.4103, -721.2219, 26.35907, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 455.4103, -721.2219, 26.35907, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 455.4103, -721.2219, 26.35907, 800, 900, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 455.4103, -721.2219, 26.35907, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 455.4103, -721.2219, 26.35907, 500, 600, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -683.881, -880.9009, 23.49901, 600, 700, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -683.881, -880.9009, 23.49901, 600, 700, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -683.881, -880.9009, 23.49901, 900, 1000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -683.881, -880.9009, 23.49901, 600, 700, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -683.881, -880.9009, 23.49901, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 281.1082, -956.1661, 28.31944, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 281.1082, -956.1661, 28.31944, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 281.1082, -956.1661, 28.31944, 800, 900, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 281.1082, -956.1661, 28.31944, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 281.1082, -956.1661, 28.31944, 500, 600, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1362.94, -596.4483, 28.17555, 700, 800, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1362.94, -596.4483, 28.17555, 700, 800, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1362.94, -596.4483, 28.17555, 1000, 1100, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1362.94, -596.4483, 28.17555, 700, 800, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1362.94, -596.4483, 28.17555, 700, 800, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1223.321, -706.3781, 21.51645, 700, 800, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1223.321, -706.3781, 21.51645, 700, 800, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1223.321, -706.3781, 21.51645, 1000, 1100, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1223.321, -706.3781, 21.51645, 700, 800, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1223.321, -706.3781, 21.51645, 700, 800, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1713.709, -1093.126, 12.0715, 700, 800, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1713.709, -1093.126, 12.0715, 700, 800, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1713.709, -1093.126, 12.0715, 1000, 1100, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1713.709, -1093.126, 12.0715, 700, 800, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1713.709, -1093.126, 12.0715, 700, 800, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -647.8759, -799.9212, 23.87869, 600, 700, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -647.8759, -799.9212, 23.87869, 600, 700, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -647.8759, -799.9212, 23.87869, 900, 1000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -647.8759, -799.9212, 23.87869, 600, 700, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -647.8759, -799.9212, 23.87869, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -621.3596, -1112.063, 21.17823, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -621.3596, -1112.063, 21.17823, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -621.3596, -1112.063, 21.17823, 800, 9000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -621.3596, -1112.063, 21.17823, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -621.3596, -1112.063, 21.17823, 500, 600, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -322.0896, -838.4672, 30.53352, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -322.0896, -838.4672, 30.53352, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -322.0896, -838.4672, 30.53352, 1000, 900, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -322.0896, -838.4672, 30.53352, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -322.0896, -838.4672, 30.53352, 500, 600, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -827.0234, -360.0332, 36.89632, 600, 700, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -827.0234, -360.0332, 36.89632, 600, 700, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -827.0234, -360.0332, 36.89632, 900, 1000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -827.0234, -360.0332, 36.89632, 600, 700, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -827.0234, -360.0332, 36.89632, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -688.4866, 292.114, 81.57179, 800, 900, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -688.4866, 292.114, 81.57179, 800, 900, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -688.4866, 292.114, 81.57179, 1100, 1200, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -688.4866, 292.114, 81.57179, 800, 900, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -688.4866, 292.114, 81.57179, 800, 900, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -626.1395, 254.6423, 80.54806, 800, 900, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -626.1395, 254.6423, 80.54806, 800, 900, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -626.1395, 254.6423, 80.54806, 1100, 1200, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -626.1395, 254.6423, 80.54806, 800, 900, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -626.1395, 254.6423, 80.54806, 800, 900, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1262.504, -1128.411, 6.601367, 600, 700, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1262.504, -1128.411, 6.601367, 600, 700, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1262.504, -1128.411, 6.601367, 900, 1000, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1262.504, -1128.411, 6.601367, 600, 700, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1262.504, -1128.411, 6.601367, 600, 700, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 125.2149, -1045.332, 28.23438, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 125.2149, -1045.332, 28.23438, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 125.2149, -1045.332, 28.23438, 800, 900, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 125.2149, -1045.332, 28.23438, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, 125.2149, -1045.332, 28.23438, 500, 600, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1534.959, -434.8761, 34.4421, 800, 900, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1534.959, -434.8761, 34.4421, 800, 900, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1534.959, -434.8761, 34.4421, 1100, 1200, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1534.959, -434.8761, 34.4421, 800, 900, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -1534.959, -434.8761, 34.4421, 800, 900, 0], ['Кофе', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -235.2667, -987.1707, 28.17716, 500, 600, 0], ['Мучная продукция', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -235.2667, -987.1707, 28.17716, 500, 600, 0], ['Сахар', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -235.2667, -987.1707, 28.17716, 800, 900, 1], ['Сливки', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -235.2667, -987.1707, 28.17716, 500, 600, 0], ['Чистящие средства', 'The Bean Machine', 1177.424, -3262.583, 4.794122, -235.2667, -987.1707, 28.17716, 500, 600, 0], ['Чистящие средства', 'The Celtica Hotel', 1189.483, -3103.883, 4.786432, 290.7396, -816.7831, 28.23497, 600, 700, 0], ['Одежда', 'Yeti', 1247.896, -3135.533, 4.748992, -140.9967, -74.46788, 53.90532, 700, 800, 0], ['Обувь', 'Yeti', 1247.896, -3135.533, 4.748992, -140.9967, -74.46788, 53.90532, 700, 800, 0], ['Аксессуары', 'Yeti', 1247.896, -3135.533, 4.748992, -140.9967, -74.46788, 53.90532, 700, 800, 0], ['Бижутерия', 'Yeti', 1247.896, -3135.533, 4.748992, -140.9967, -74.46788, 53.90532, 1100, 1200, 1], ['Одежда', 'ZIP', 1247.896, -3135.533, 4.748992, -1377.123, -644.0918, 27.67358, 700, 800, 0], ['Обувь', 'ZIP', 1247.896, -3135.533, 4.748992, -1377.123, -644.0918, 27.67358, 700, 800, 0], ['Аксессуары', 'ZIP', 1247.896, -3135.533, 4.748992, -1377.123, -644.0918, 27.67358, 700, 800, 0], ['Бижутерия', 'ZIP', 1247.896, -3135.533, 4.748992, -1377.123, -644.0918, 27.67358, 1100, 1200, 1], ['Мясо', 'Águila Burrito', 1248.167, -3142.517, 4.767723, 83.26421, -1440.563, 28.31166, 500, 600, 0], ['Мучная продукция', 'Águila Burrito', 1248.167, -3142.517, 4.767723, 83.26421, -1440.563, 28.31166, 500, 600, 0], ['Овощи', 'Águila Burrito', 1248.167, -3142.517, 4.767723, 83.26421, -1440.563, 28.31166, 500, 600, 0], ['Напитки', 'Águila Burrito', 1248.167, -3142.517, 4.767723, 83.26421, -1440.563, 28.31166, 500, 600, 0], ['Соусы, Специи', 'Águila Burrito', 1248.167, -3142.517, 4.767723, 83.26421, -1440.563, 28.31166, 500, 600, 0], ['Постельное бельё', 'Bilingsgate Motel', 1248.18, -3148.986, 4.76891, 552.3975, -1790.213, 28.19699, 500, 600, 0], ['Провизия', 'Bilingsgate Motel', 1248.18, -3148.986, 4.76891, 552.3975, -1790.213, 28.19699, 500, 600, 0], ['Чистящие средства', 'Bilingsgate Motel', 1248.18, -3148.986, 4.76891, 552.3975, -1790.213, 28.19699, 500, 600, 0], ['Алкоголь', 'Bilingsgate Motel', 1248.18, -3148.986, 4.76891, 552.3975, -1790.213, 28.19699, 900, 1000, 1], ['Декорации', 'Beacon Theatre', 1247.756, -3155.405, 4.73872, 448.282, -1499.142, 28.29201, 500, 600, 0], ['Костюмы', 'Beacon Theatre', 1247.756, -3155.405, 4.73872, 448.282, -1499.142, 28.29201, 500, 600, 0], ['Грим', 'Beacon Theatre', 1247.756, -3155.405, 4.73872, 448.282, -1499.142, 28.29201, 500, 600, 0], ['Электроника', 'Beacon Theatre', 1247.756, -3155.405, 4.73872, 448.282, -1499.142, 28.29201, 800, 900, 1]],
  w2: [['Сахар', '1966 Digestive co.', 1177.424, -3262.583, 4.794122, 694.0635, -833.3184, 23.39188, 1000, 1200, 1], ['Ювелирные украшения', 'Aiongold', 1247.896, -3135.533, 4.748992, -842.8486, -370.3363, 38.11399, 2200, 2800, 2], ['Покрышки', 'Albany', 1177.482, -3288.834, 4.789845, -23.15799, -1678.217, 28.46997, 1200, 1800, 0], ['Провизия', 'Alesandro Hotel', 1177.616, -3298.665, 4.780886, 319.0009, -731.3843, 28.24082, 1400, 1600, 0], ['Постельное бельё', 'Alesandro Hotel', 1177.616, -3298.665, 4.780886, 319.0009, -731.3843, 28.24082, 1400, 1600, 0], ['Чистящие средства', 'Alesandro Hotel', 1177.616, -3298.665, 4.780886, 319.0009, -731.3843, 28.24082, 1600, 1800, 1], ['Ткани', 'Alphabetz', 1177.482, -3288.834, 4.789845, 47.02713, -101.6483, 55.21708, 1500, 1800, 1], ['Ткани', 'Alphabetz', 1177.482, -3288.834, 4.789845, -1305.9, -604.2043, 26.9569, 1500, 1800, 1], ['Брендовая одежда', 'Anna Rex', 1247.01, -3288.55, 4.82778, -647.4616, -199.6646, 36.50945, 1400, 1600, 1], ['Покрышки', 'Atomic', 1247.896, -3135.533, 4.748992, 465.6254, -1902.085, 24.19386, 1000, 1200, 1], ['Инструменты', 'Atomic', 1247.896, -3135.533, 4.748992, 465.6254, -1902.085, 24.19386, 1000, 1200, 1], ['Мука', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 1200, 1300, 1], ['Напитки', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 1200, 1300, 1], ['Мясо', 'Attack-a-Taco', 1246.469, -3262.552, 4.789814, 441.3891, -1250.508, 29.47021, 1200, 1300, 1], ['Канцелярия', 'Augury Insurance', 1177.616, -3298.665, 4.780886, -357.7076, -434.2415, 26.46241, 1500, 1600, 0], ['Канцелярия', 'Badger', 1246.469, -3262.552, 4.789814, 499.3804, -104.5109, 60.84568, 1600, 1700, 0], ['Электроника', 'Badger', 1246.469, -3262.552, 4.789814, 499.3804, -104.5109, 60.84568, 2600, 2700, 2], ['Пластик', 'Badger', 1246.469, -3262.552, 4.789814, 499.3804, -104.5109, 60.84568, 2000, 2100, 1], ['Постельное бельё', 'Banner Hotel & Spa', 1177.482, -3288.834, 4.789845, -1628.470703125, -521.0311279296875, 33.589988708496094, 1600, 1700, 0], ['Провизия', 'Banner Hotel & Spa', 1177.482, -3288.834, 4.789845, -1628.470703125, -521.0311279296875, 33.589988708496094, 1600, 1700, 0], ['Чистящие средства', 'Banner Hotel & Spa', 1177.482, -3288.834, 4.789845, -1628.470703125, -521.0311279296875, 33.589988708496094, 1800, 1900, 1], ['Постельное бельё', 'Banner Hotel & Spa', 1177.616, -3298.665, 4.780886, -337.9145812988281, -1021.9022827148438, 29.384775161743164, 1400, 1500, 0], ['Провизия', 'Banner Hotel & Spa', 1177.616, -3298.665, 4.780886, -337.9145812988281, -1021.9022827148438, 29.384775161743164, 1400, 1500, 0], ['Чистящие средства', 'Banner Hotel & Spa', 1177.616, -3298.665, 4.780886, -337.9145812988281, -1021.9022827148438, 29.384775161743164, 1600, 1700, 1], ['Мясо', 'Beachwalk Bistro', 1247.896, -3135.533, 4.748992, -1288.0269775390625, -1325.3994140625, 3.2284440994262695, 1100, 1200, 0], ['Овощи', 'Beachwalk Bistro', 1247.896, -3135.533, 4.748992, -1288.0269775390625, -1325.3994140625, 3.2284440994262695, 1100, 1200, 0], ['Мука', 'Beachwalk Bistro', 1247.896, -3135.533, 4.748992, -1288.0269775390625, -1325.3994140625, 3.2284440994262695, 1100, 1200, 0], ['Ящики', 'Bert\'s Tool Supply Co.', 1176.739, -3272.887, 4.842545, 334.4869689941406, -1272.3564453125, 30.813180923461914, 1400, 1500, 0], ['Упаковка', 'Bert\'s Tool Supply Co.', 1176.739, -3272.887, 4.842545, 334.4869689941406, -1272.3564453125, 30.813180923461914, 1400, 1500, 0], ['Инструменты', 'Bert\'s Tool Supply Co.', 1176.739, -3272.887, 4.842545, 334.4869689941406, -1272.3564453125, 30.813180923461914, 1400, 1500, 0], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, -669.7341, 290.0461, 80.65161, 1500, 1900, 1], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, -1237.469, -327.0368, 36.22047, 1500, 1900, 1], ['Лекарства', 'Betta Pharmaceuticals', 1177.616, -3298.665, 4.780886, 1146.536, -466.5147, 65.54852, 1500, 1900, 1], ['Бикини', 'Bikini Universe', 1248.18, -3148.986, 4.76891, -1217.006, -1526.73, 3.282896, 1400, 1500, 1], ['Мясо курицы', 'Bishop’s Chicken', 1246.994, -3272.652, 4.826261, 159.6689, -1646.977, 28.29167, 1200, 1300, 0], ['Овощи', 'Bishop’s Chicken', 1246.994, -3272.652, 4.826261, 159.6689, -1646.977, 28.29167, 1200, 1300, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, 1146.081, -466.439, 65.56268, 1400, 1500, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, 1146.081, -466.439, 65.56268, 1400, 1500, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, 1146.081, -466.439, 65.56268, 1400, 1500, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, 83.31238, -672.2915, 43.11325, 1400, 1500, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, 83.31238, -672.2915, 43.11325, 1400, 1500, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, 83.31238, -672.2915, 43.11325, 1400, 1500, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, -1239.914, -299.9608, 36.3982, 1600, 1700, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, -1239.914, -299.9608, 36.3982, 1600, 1700, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, -1239.914, -299.9608, 36.3982, 1600, 1700, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, -276.9223, -899.1955, 30.08061, 1300, 1400, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, -276.9223, -899.1955, 30.08061, 1300, 1400, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, -276.9223, -899.1955, 30.08061, 1300, 1400, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, 239.7054, -12.55212, 72.65054, 1400, 1500, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, 239.7054, -12.55212, 72.65054, 1400, 1500, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, 239.7054, -12.55212, 72.65054, 1400, 1500, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, -1534.518, -435.3698, 34.44209, 1400, 1500, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, -1534.518, -435.3698, 34.44209, 1400, 1500, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, -1534.518, -435.3698, 34.44209, 1400, 1500, 0], ['Мясо', 'Bite!', 1246.994, -3272.652, 4.826261, 90.51542, -215.8247, 53.49169, 1300, 1400, 0], ['Овощи', 'Bite!', 1246.994, -3272.652, 4.826261, 90.51542, -215.8247, 53.49169, 1300, 1400, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, 90.51542, -215.8247, 53.49169, 1300, 1400, 0], ['Мука, Сахар, Яйца', 'Bite!', 1246.994, -3272.652, 4.826261, -255.0688, -342.427, 28.83808, 1300, 1400, 0], ['Спортивные велосипеды', 'Bourgeois Bicyles', 1177.424, -3262.583, 4.794122, -493.8318, -51.65614, 38.96881, 1900, 2300, 1], ['Горные велосипеды', 'Bourgeois Bicyles', 1177.424, -3262.583, 4.794122, -493.8318, -51.65614, 38.96881, 1900, 2300, 1], ['BMX велосипеды', 'Bourgeois Bicyles', 1177.424, -3262.583, 4.794122, -493.8318, -51.65614, 38.96881, 1900, 2300, 1], ['Платья, Блузки, Юбки', 'Caca', 1246.469, -3262.552, 4.789814, -282.6442, -95.1025, 46.27415, 1500, 1800, 0], ['Мясо', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 1200, 1400, 0], ['Овощи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 1200, 1400, 0], ['Мука, Сахар, Яйца', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -252.1513, -770.4982, 31.63017, 1200, 1400, 0], ['Мясо', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 1300, 1500, 0], ['Овощи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 1300, 1500, 0], ['Мука, Сахар, Яйца', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -642.3366, -308.33, 34.00285, 1300, 1500, 0], ['Мясо', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 1300, 1500, 0], ['Овощи', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 1300, 1500, 0], ['Мука, Сахар, Яйца', 'Café Redemption!', 1246.994, -3272.652, 4.826261, -1446.865, -149.7198, 48.07676, 1300, 1500, 0], ['Покрышки', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 1000, 1300, 0], ['Спойлеры', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 1000, 1300, 0], ['Бамперы', 'Car Tune Network', 1176.739, -3272.887, 4.842545, 160.7308, -1282.932, 28.16843, 1000, 1300, 0], ['Одежда', 'Chaps', 1177.424, -3262.583, 4.794122, -491.6205, -60.24947, 38.9837, 1400, 1600, 0], ['Обувь', 'Chaps', 1177.424, -3262.583, 4.794122, -491.6205, -60.24947, 38.9837, 1400, 1600, 0], ['Одежда', 'Chaps', 1177.424, -3262.583, 4.794122, -1298.032, -377.8098, 35.57209, 1400, 1600, 0], ['Обувь', 'Chaps', 1177.424, -3262.583, 4.794122, -1298.032, -377.8098, 35.57209, 1400, 1600, 0], ['Одежда', 'Chaps', 1177.424, -3262.583, 4.794122, 64.32887, -1417.537, 28.31173, 1000, 1200, 0], ['Обувь', 'Chaps', 1177.424, -3262.583, 4.794122, 64.32887, -1417.537, 28.31173, 1000, 1200, 0], ['Продукты', 'Chico\'s Hypermarket', 1177.616, -3298.665, 4.780886, 1088.995, -792.6378, 57.2627, 1400, 1600, 0], ['Сосиски', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, -1514.074, -422.8463, 34.44212, 1400, 1500, 0], ['Булки', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, -1514.074, -422.8463, 34.44212, 1400, 1500, 0], ['Сосиски', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, 37.03512, -1005.002, 28.4633, 1000, 1200, 0], ['Булки', 'Chihuahua Hotdogs', 1247.01, -3288.55, 4.82778, 37.03512, -1005.002, 28.4633, 1000, 1200, 0], ['Провизия', 'Cine Areola', 1247.896, -3135.533, 4.748992, 397.4186, 60.15658, 96.97795, 1900, 2200, 1], ['Мясо', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 1500, 1800, 0], ['Овощи, Фрукты', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 1500, 1800, 0], ['Мука, Сахар, Яйца', 'Clappers', 1246.994, -3272.652, 4.826261, 383.9533, 180.6637, 101.9656, 1500, 1800, 0], ['Смартфоны', 'Click Lovers', 1248.18, -3148.986, 4.76891, 184.7478, -1476.258, 28.14162, 1500, 1800, 1], ['Фотоапараты', 'Click Lovers', 1248.18, -3148.986, 4.76891, 184.7478, -1476.258, 28.14162, 1500, 1800, 1], ['Мелкая электроника', 'Click Lovers', 1248.18, -3148.986, 4.76891, 184.7478, -1476.258, 28.14162, 1500, 1800, 1], ['Куриные фабрикаты', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -176.97, -1426.962, 30.27832, 1300, 1400, 0], ['Куриные фабрикаты', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -1705.782, -1083.873, 12.07399, 1400, 1500, 0], ['Куриные фабрикаты', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -131.5051, -261.7775, 41.98965, 1400, 1500, 0], ['Напитки', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -176.97, -1426.962, 30.27832, 1300, 1400, 0], ['Напитки', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -1705.782, -1083.873, 12.07399, 1400, 1500, 0], ['Напитки', 'Cluckin\' Bell', 1248.18, -3148.986, 4.76891, -131.5051, -261.7775, 41.98965, 1400, 1500, 0], ['Канцелярия', 'CNT', 1177.616, -3298.665, 4.780886, 777.815, 226.4473, 84.63857, 1700, 1900, 0], ['Мониторы', 'CNT', 1177.616, -3298.665, 4.780886, 777.815, 226.4473, 84.63857, 2200, 2400, 1], ['Камеры', 'CNT', 1177.616, -3298.665, 4.780886, 777.815, 226.4473, 84.63857, 2200, 2400, 1], ['Морепродукты', 'Coconut Café', 1248.167, -3142.517, 4.767723, -1129.939, -1452.252, 3.952911, 1400, 1500, 0], ['Овощи', 'Coconut Café', 1248.167, -3142.517, 4.767723, -1129.939, -1452.252, 3.952911, 1400, 1500, 0], ['Мучная продукция', 'Coconut Café', 1248.167, -3142.517, 4.767723, -1129.939, -1452.252, 3.952911, 1400, 1500, 0], ['Кофе', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 1600, 1700, 0], ['Мясо', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 1600, 1700, 0], ['Овощи', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 1600, 1700, 0], ['Мучная продукция', 'Cool Beans', 1177.424, -3262.583, 4.794122, -1263.562, -851.7274, 11.24855, 1600, 1700, 0], ['Кофе', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 1300, 1400, 0], ['Мясо', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 1300, 1400, 0], ['Овощи', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 1300, 1400, 0], ['Мучная продукция', 'Cool Beans', 1177.424, -3262.583, 4.794122, 257.8313, -978.0516, 28.2267, 1300, 1400, 0], ['Кофе', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 1600, 1700, 0], ['Мясо', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 1600, 1700, 0], ['Овощи', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 1600, 1700, 0], ['Мучная продукция', 'Cool Beans', 1177.424, -3262.583, 4.794122, 1188.188, -422.5025, 66.31346, 1600, 1700, 0], ['Одежда', 'Croq a Hoop', 1176.739, -3272.887, 4.842545, -736.1667, -134.4009, 36.27246, 1600, 1800, 0], ['Обувь', 'Croq a Hoop', 1176.739, -3272.887, 4.842545, -736.1667, -134.4009, 36.27246, 1600, 1800, 0], ['Кофе', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 1300, 1400, 0], ['Мясо', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 1300, 1400, 0], ['Овощи', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 1300, 1400, 0], ['Мучная продукция', 'Crucial Fix', 1177.424, -3262.583, 4.794122, -1101.311, -1370.383, 4.144961, 1300, 1400, 0], ['Кофе', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 1300, 1400, 0], ['Мясо', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 1300, 1400, 0], ['Овощи', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 1300, 1400, 0], ['Мучная продукция', 'Crucial Fix', 1177.424, -3262.583, 4.794122, 263.1067, -837.5323, 28.29601, 1300, 1400, 0], ['Продукты', 'Davis Mega Mall', 1177.482, -3288.834, 4.789845, 97.65350341796875, -1824.4468994140625, 25.20468521118164, 1400, 1500, 0], ['Средства гигиены', 'Davis Mega Mall', 1177.482, -3288.834, 4.789845, 97.65350341796875, -1824.4468994140625, 25.20468521118164, 1400, 1500, 0], ['Чистящие средства', 'Davis Mega Mall', 1177.482, -3288.834, 4.789845, 97.65350341796875, -1824.4468994140625, 25.20468521118164, 1400, 1500, 0], ['Товары для дома', 'Davis Mega Mall', 1177.482, -3288.834, 4.789845, 97.65350341796875, -1824.4468994140625, 25.20468521118164, 1700, 1900, 1], ['Корм для животных', 'Davis Mega Mall', 1177.482, -3288.834, 4.789845, 97.65350341796875, -1824.4468994140625, 25.20468521118164, 1700, 1900, 1], ['Мясо', 'Del Perro Plaza', 1177.424, -3262.583, 4.794122, -1347.505, -749.4619, 21.31466, 1600, 1700, 0], ['Овощи', 'Del Perro Plaza', 1177.424, -3262.583, 4.794122, -1347.505, -749.4619, 21.31466, 1600, 1700, 0], ['Мучная продукция', 'Del Perro Plaza', 1177.424, -3262.583, 4.794122, -1347.505, -749.4619, 21.31466, 1600, 1700, 0], ['Кофе', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1212.921, -1150.016, 6.706697, 1400, 1500, 0], ['Фрукты', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1212.921, -1150.016, 6.706697, 1400, 1500, 0], ['Мучная продукция', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1212.921, -1150.016, 6.706697, 1400, 1500, 0], ['Кофе', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1299.223, -267.9978, 38.92126, 1500, 1600, 0], ['Фрукты', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1299.223, -267.9978, 38.92126, 1500, 1600, 0], ['Мучная продукция', 'Dickies Bagels', 1177.424, -3262.583, 4.794122, -1299.223, -267.9978, 38.92126, 1500, 1600, 0], ['Одежда', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -274.2895, -997.4741, 24.49889, 1200, 1500, 0], ['Обувь', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -274.2895, -997.4741, 24.49889, 1200, 1500, 0], ['Одежда', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -792.4308, -175.3817, 36.28366, 1500, 1700, 0], ['Обувь', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -792.4308, -175.3817, 36.28366, 1500, 1700, 0], ['Одежда', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -1185.682, -738.9219, 19.24377, 1500, 1700, 0], ['Обувь', 'Didier Sachs', 1176.739, -3272.887, 4.842545, -1185.682, -738.9219, 19.24377, 1500, 1700, 0], ['Попкорн', 'Doppler', 1247.01, -3288.55, 4.82778, 373.104, 258.6537, 101.8852, 1600, 1700, 0], ['Напитки', 'Doppler', 1247.01, -3288.55, 4.82778, 373.104, 258.6537, 101.8852, 1600, 1700, 0], ['Пленочные проигрыватели', 'Doppler', 1247.01, -3288.55, 4.82778, 373.104, 258.6537, 101.8852, 2400, 2700, 1], ['Канцелярия', 'Edzell Foundation Y.C.', 1246.994, -3272.652, 4.826261, 54.22694, -1575.568, 28.46039, 1200, 1400, 0], ['Компьютеры', 'Edzell Foundation Y.C.', 1246.994, -3272.652, 4.826261, 54.22694, -1575.568, 28.46039, 2200, 2400, 2], ['Провизия', 'Elkridge Hotel', 1177.616, -3298.665, 4.780886, 278.6501, -915.621, 27.94688, 1400, 1500, 0], ['Постельное бельё', 'Elkridge Hotel', 1177.616, -3298.665, 4.780886, 278.6501, -915.621, 27.94688, 1400, 1500, 0], ['Одежда', 'Enema', 1176.739, -3272.887, 4.842545, -679.186, -166.2349, 36.65343, 1500, 1700, 0], ['Обувь', 'Enema', 1176.739, -3272.887, 4.842545, -679.186, -166.2349, 36.65343, 1500, 1700, 0], ['Научное оборудование', 'Eugenics Incorporated', 1246.469, -3262.552, 4.789814, -941.5125, -324.7739, 37.6375, 2500, 3500, 1], ['Бутыли с водой', 'Eugenics Incorporated', 1246.469, -3262.552, 4.789814, -941.5125, -324.7739, 37.6375, 1700, 1900, 0], ['Канцелярия', 'Eugenics Incorporated', 1246.469, -3262.552, 4.789814, -941.5125, -324.7739, 37.6375, 1700, 1900, 0], ['Ткани', 'G&B', 1248.18, -3148.986, 4.76891, -1339.917, -265.9008, 41.27707, 1500, 1800, 0], ['Швейные машинки', 'G&B', 1248.18, -3148.986, 4.76891, -1339.917, -265.9008, 41.27707, 2900, 3200, 2], ['Молочная продукция', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 1700, 1800, 0], ['Овощи, Фрукты', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 1700, 1800, 0], ['Мучная продукция', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 1700, 1800, 0], ['Напитки', 'Gabriela\'s Market', 1177.424, -3262.583, 4.794122, 1136.349, -295.1751, 67.80069, 1700, 1800, 0], ['Одежда', 'Gloria\'s Fashion Boutique', 1176.739, -3272.887, 4.842545, 184.1463, -1266.266, 28.19846, 1350, 1500, 0], ['Обувь', 'Gloria\'s Fashion Boutique', 1176.739, -3272.887, 4.842545, 184.1463, -1266.266, 28.19846, 1350, 1500, 0], ['Дрожжи', 'Golden Buns Bakery', 1177.482, -3288.834, 4.789845, -292.5053, 6210.254, 30.35525, 2200, 2500, 0], ['Яйца', 'Golden Buns Bakery', 1177.482, -3288.834, 4.789845, -292.5053, 6210.254, 30.35525, 2200, 2500, 0], ['Корнеплоды', 'Grapeseed Farmers Market', 1177.616, -3298.665, 4.780886, 1674.823, 4888.582, 41.10576, 3500, 4000, 0], ['Сад. украшения', 'Grapeseed Farmers Market', 1177.616, -3298.665, 4.780886, 1674.823, 4888.582, 41.10576, 3500, 4000, 0], ['Кофе', 'Ground & Pound Café', 1247.01, -3288.55, 4.82778, 372.293, -1036.914, 28.20326, 1300, 1400, 0], ['Мучная продукция', 'Ground & Pound Café', 1247.01, -3288.55, 4.82778, 372.293, -1036.914, 28.20326, 1300, 1400, 0], ['Фабрикаты', 'Gyro Day Hot Food', 1246.994, -3272.652, 4.826261, -1152.008, -1593.057, 3.346475, 1500, 1600, 0], ['Напитки', 'Gyro Day Hot Food', 1246.994, -3272.652, 4.826261, -1152.008, -1593.057, 3.346475, 1500, 1600, 0], ['Мясо', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 1107.186, -363.73, 65.91722, 1700, 1800, 0], ['Мучная продукция', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 1107.186, -363.73, 65.91722, 1700, 1800, 0], ['Овощи', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 1107.186, -363.73, 65.91722, 1700, 1800, 0], ['Мясо', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 438.803, -1456.889, 28.20174, 1600, 1700, 0], ['Мучная продукция', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 438.803, -1456.889, 28.20174, 1600, 1700, 0], ['Овощи', 'Hearty Taco', 1246.469, -3262.552, 4.789814, 438.803, -1456.889, 28.20174, 1600, 1700, 0], ['Спортивная одежда', 'Heat', 1246.469, -3262.552, 4.789814, -1312.039, -595.1053, 27.51493, 1600, 1800, 0], ['Спортивная обувь', 'Heat', 1246.469, -3262.552, 4.789814, -1312.039, -595.1053, 27.51493, 1600, 1800, 0], ['Ткани', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1289.273, -795.5506, 16.59293, 1600, 1700, 0], ['Швейные машинки', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1289.273, -795.5506, 16.59293, 2600, 2700, 2], ['Ткани', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1212.205, -1309.351, 3.662347, 1500, 1600, 0], ['Швейные машинки', 'Heroin Chic', 1247.756, -3155.405, 4.73872, -1212.205, -1309.351, 3.662347, 2500, 2600, 2], ['Лечебная марихуана', 'High Time', 1247.896, -3135.533, 4.748992, 156.7241, -261.5158, 50.37927, 1700, 1800, 1], ['Бонги', 'High Time', 1247.896, -3135.533, 4.748992, 156.7241, -261.5158, 50.37927, 1600, 1700, 1], ['Спортивная обувь', 'Hippy Feet', 1248.18, -3148.986, 4.76891, 146.2802, -204.1069, 53.25352, 1500, 1600, 0], ['Деловая обувь', 'Hippy Feet', 1248.18, -3148.986, 4.76891, 146.2802, -204.1069, 53.25352, 1500, 1600, 0], ['Домашняя обувь', 'Hippy Feet', 1248.18, -3148.986, 4.76891, 146.2802, -204.1069, 53.25352, 1500, 1600, 0], ['Мясо', 'Hit \'n\' Run Coffee', 1189.483, -3103.883, 4.786432, -552.7731, -690.2885, 32.15757, 1400, 1500, 0], ['Мучная продукция', 'Hit \'n\' Run Coffee', 1189.483, -3103.883, 4.786432, -552.7731, -690.2885, 32.15757, 1400, 1500, 0], ['Овощи, Фрукты', 'Hit \'n\' Run Coffee', 1189.483, -3103.883, 4.786432, -552.7731, -690.2885, 32.15757, 1400, 1500, 0], ['Одежда', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1443.705, -259.1526, 45.20773, 1700, 1800, 0], ['Обувь', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1443.705, -259.1526, 45.20773, 1700, 1800, 0], ['Одежда', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1409.986, -257.7107, 45.36119, 1700, 1800, 0], ['Обувь', 'Homme Gina', 1247.896, -3135.533, 4.748992, -1409.986, -257.7107, 45.36119, 1700, 1800, 0], ['Одежда', 'Homme Gina', 1247.896, -3135.533, 4.748992, -679.4575, -242.7679, 35.58676, 1700, 1800, 0], ['Обувь', 'Homme Gina', 1247.896, -3135.533, 4.748992, -679.4575, -242.7679, 35.58676, 1700, 1800, 0], ['Соусы, Специи', 'Hookies', 1248.167, -3142.517, 4.767723, -2169.108, 4277.521, 47.95491, 2700, 3000, 1], ['Полуфабрикаты', 'Horny\'s Burgers', 1248.18, -3148.986, 4.76891, 1247.934, -345.3344, 68.08203, 1700, 1800, 0], ['Булочки', 'Horny\'s Burgers', 1248.18, -3148.986, 4.76891, 1247.934, -345.3344, 68.08203, 1700, 1800, 0], ['Овощи', 'Horny\'s Burgers', 1248.18, -3148.986, 4.76891, 1247.934, -345.3344, 68.08203, 1700, 1800, 0], ['Морепродукты', 'Hwan Café', 1248.18, -3148.986, 4.76891, -652.9146, -914.715, 22.89181, 1400, 1500, 0], ['Мучная продукция', 'Hwan Café', 1248.18, -3148.986, 4.76891, -652.9146, -914.715, 22.89181, 1400, 1500, 0], ['Овощи', 'Hwan Café', 1248.18, -3148.986, 4.76891, -652.9146, -914.715, 22.89181, 1400, 1500, 0], ['Компьютеры', 'Java Update Coffeeshop', 1247.01, -3288.55, 4.82778, -1267.758, -295.8237, 36.31553, 2000, 2500, 2], ['Кофе', 'Java Update Coffeeshop', 1247.01, -3288.55, 4.82778, -1267.758, -295.8237, 36.31553, 1300, 1500, 0], ['Чистящие средства', 'Korean Plaza', 1176.739, -3272.887, 4.842545, -621.5627, -1112.539, 21.17825, 1300, 1500, 0], ['Часы', 'Kronos', 1177.424, -3262.583, 4.794122, 52.66251, -913.0143, 28.88037, 2000, 2400, 1], ['Мясо', 'Lagoon\'s Diner', 1246.469, -3262.552, 4.789814, -1699.517, -1077.39, 12.01736, 1600, 1700, 0], ['Мучная продукция', 'Lagoon\'s Diner', 1246.469, -3262.552, 4.789814, -1699.517, -1077.39, 12.01736, 1600, 1700, 0], ['Овощи', 'Lagoon\'s Diner', 1246.469, -3262.552, 4.789814, -1699.517, -1077.39, 12.01736, 1600, 1700, 0], ['Канцелярия', 'Larry\'s RV Sales', 1247.756, -3155.405, 4.73872, 1224.564, 2720.561, 37.00457, 2300, 2500, 1], ['Мясо', 'Last Train in Los Santos', 1246.469, -3262.552, 4.789814, -383.9094, 279.9946, 83.79972, 1600, 1700, 0], ['Мучная продукция', 'Last Train in Los Santos', 1246.469, -3262.552, 4.789814, -383.9094, 279.9946, 83.79972, 1600, 1700, 0], ['Овощи', 'Last Train in Los Santos', 1246.469, -3262.552, 4.789814, -383.9094, 279.9946, 83.79972, 1600, 1700, 0], ['Телевизоры', 'Leroy\'s Electricals', 1248.167, -3142.517, 4.767723, 1121.281, -351.6313, 66.04087, 1600, 1800, 0], ['Лампочки', 'Leroy\'s Electricals', 1248.167, -3142.517, 4.767723, 1121.281, -351.6313, 66.04087, 1600, 1800, 0], ['Телевизоры', 'Leroy\'s Electricals', 1248.167, -3142.517, 4.767723, 1121.281, -351.6313, 66.04087, 1600, 1800, 0], ['Провода', 'Leroy\'s Electricals', 1248.167, -3142.517, 4.767723, 1121.281, -351.6313, 66.04087, 1600, 1800, 0], ['Дом. Кинотеатры', 'Leroy\'s Electricals', 1248.167, -3142.517, 4.767723, 1121.281, -351.6313, 66.04087, 1600, 1800, 0], ['Фрукты', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1243.56, -256.8912, 38.02166, 1600, 1800, 0], ['Вода', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1243.56, -256.8912, 38.02166, 1600, 1800, 0], ['Напитки', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1243.56, -256.8912, 38.02166, 1600, 1800, 0], ['Фрукты', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1524.408, -421.1407, 34.44219, 1600, 1800, 0], ['Вода', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1524.408, -421.1407, 34.44219, 1600, 1800, 0], ['Напитки', 'Limey\'s Juice and Smoothies', 1248.167, -3142.517, 4.767723, -1524.408, -421.1407, 34.44219, 1600, 1800, 0], ['Продукты', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, -727.4792, -911.2381, 18.01394, 1500, 1600, 0], ['Алкоголь', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, -727.4792, -911.2381, 18.01394, 2500, 2600, 1], ['Продукты', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, -81.89794, -1755.54, 28.56783, 2900, 3000, 0], ['Алкоголь', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, -81.89794, -1755.54, 28.56783, 3900, 4000, 1], ['Продукты', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, 1171.889, -317.6099, 68.17641, 1500, 1600, 0], ['Алкоголь', 'Limited Gasoline', 1189.483, -3103.883, 4.786432, 1171.889, -317.6099, 68.17641, 2500, 2600, 1], ['Пиво', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -875.6893, -1165.981, 4.08705, 1400, 1500, 0], ['Водка', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -875.6893, -1165.981, 4.08705, 1900, 2000, 1], ['Вино', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -875.6893, -1165.981, 4.08705, 1900, 2000, 1], ['Коньяк', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -875.6893, -1165.981, 4.08705, 3300, 3400, 2], ['Пиво', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -602.0735, 252.4285, 80.96615, 1700, 1800, 0], ['Водка', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -602.0735, 252.4285, 80.96615, 2300, 2400, 1], ['Вино', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -602.0735, 252.4285, 80.96615, 2300, 2400, 1], ['Коньяк', 'Liquor Hole', 1247.896, -3135.533, 4.748992, -602.0735, 252.4285, 80.96615, 3300, 3400, 2], ['Пиво', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -599.9868, 271.2969, 80.9787, 1700, 1800, 0], ['Вино', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -599.9868, 271.2969, 80.9787, 2300, 2400, 1], ['Водка', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -599.9868, 271.2969, 80.9787, 2300, 2400, 1], ['Коньяк', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -599.9868, 271.2969, 80.9787, 3300, 3400, 2], ['Пиво', 'Liquor.deli', 1248.167, -3142.517, 4.767723, 372.4179, -1064.052, 28.29257, 1300, 1400, 0], ['Вино', 'Liquor.deli', 1248.167, -3142.517, 4.767723, 372.4179, -1064.052, 28.29257, 1700, 1800, 1], ['Водка', 'Liquor.deli', 1248.167, -3142.517, 4.767723, 372.4179, -1064.052, 28.29257, 1700, 1800, 1], ['Коньяк', 'Liquor.deli', 1248.167, -3142.517, 4.767723, 372.4179, -1064.052, 28.29257, 2700, 2800, 2], ['Пиво', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -53.26315, -1037.88, 27.29303, 1300, 1400, 0], ['Вино', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -53.26315, -1037.88, 27.29303, 1700, 1800, 1], ['Водка', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -53.26315, -1037.88, 27.29303, 1700, 1800, 1], ['Коньяк', 'Liquor.deli', 1248.167, -3142.517, 4.767723, -53.26315, -1037.88, 27.29303, 2700, 2800, 2], ['Чай', 'Little Tea Pot', 1248.18, -3148.986, 4.76891, -529.9245, -29.40772, 43.48027, 1500, 1600, 0], ['Кофе', 'Little Tea Pot', 1248.18, -3148.986, 4.76891, -529.9245, -29.40772, 43.48027, 1500, 1600, 0], ['Мучная продукция', 'Little Tea Pot', 1248.18, -3148.986, 4.76891, -529.9245, -29.40772, 43.48027, 1500, 1600, 0], ['Сахар', 'Little Tea Pot', 1248.18, -3148.986, 4.76891, -529.9245, -29.40772, 43.48027, 1700, 1900, 1], ['Мясо', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, -291.9013, -1344.832, 30.29802, 1400, 1500, 0], ['Пиво', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, -291.9013, -1344.832, 30.29802, 1400, 1500, 0], ['Вино', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, -291.9013, -1344.832, 30.29802, 1800, 1900, 1], ['Мясо', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, 416.9493, -1927.244, 23.59029, 1000, 1100, 0], ['Пиво', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, 416.9493, -1927.244, 23.59029, 1000, 1100, 0], ['Вино', 'Longpig Mini Market', 1247.756, -3155.405, 4.73872, 416.9493, -1927.244, 23.59029, 1300, 1400, 1], ['Провизия', 'Los Santos Golf Club', 1246.469, -3262.552, 4.789814, -1353.222, 130.1936, 55.23882, 1900, 2100, 0], ['Клюшки', 'Los Santos Golf Club', 1246.469, -3262.552, 4.789814, -1353.222, 130.1936, 55.23882, 2500, 2600, 1], ['Газонокосилки', 'Los Santos Golf Club', 1246.469, -3262.552, 4.789814, -1353.222, 130.1936, 55.23882, 2900, 3100, 2], ['Форма', 'Los Santos Golf Club', 1246.469, -3262.552, 4.789814, -1353.222, 130.1936, 55.23882, 2500, 2600, 1], ['Бумага', 'Los Santos Meteor', 1247.01, -3288.55, 4.82778, -156.0574, -1302.705, 30.32649, 1300, 1400, 0], ['Чернила', 'Los Santos Meteor', 1247.01, -3288.55, 4.82778, -156.0574, -1302.705, 30.32649, 1300, 1400, 0], ['Канцелярия', 'Los Santos Meteor', 1247.01, -3288.55, 4.82778, -156.0574, -1302.705, 30.32649, 1300, 1400, 0], ['Принтеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 1400, 1500, 0], ['Компьютеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 1400, 1500, 0], ['Периферия', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 1400, 1500, 0], ['Бумага', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 367.7562, -827.1153, 28.29287, 1400, 1500, 0], ['Принтеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -1325.674, -326.7819, 36.0026, 1700, 1800, 0], ['Компьютеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -1325.674, -326.7819, 36.0026, 1700, 1800, 0], ['Периферия', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -1325.674, -326.7819, 36.0026, 1700, 1800, 0], ['Бумага', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -1325.674, -326.7819, 36.0026, 1700, 1800, 0], ['Принтеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 1300, 1400, 0], ['Компьютеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 1300, 1400, 0], ['Периферия', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 1300, 1400, 0], ['Бумага', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -20.79475, -1303.739, 28.21943, 1300, 1400, 0], ['Принтеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 1500, 1600, 0], ['Компьютеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 1500, 1600, 0], ['Периферия', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 1500, 1600, 0], ['Бумага', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, -52.19925, -219.8587, 44.44492, 1500, 1600, 0], ['Принтеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 1400, 1500, 0], ['Компьютеры', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 1400, 1500, 0], ['Периферия', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 1400, 1500, 0], ['Бумага', 'Los Santos Office Supply Co.', 1177.616, -3298.665, 4.780886, 306.4332, -1089.792, 28.39431, 1400, 1500, 0], ['Костюмы', 'Los Santos Theatre', 1177.482, -3288.834, 4.789845, 302.9688, -904.2477, 28.29317, 1800, 1900, 1], ['Декорации', 'Los Santos Theatre', 1177.482, -3288.834, 4.789845, 302.9688, -904.2477, 28.29317, 1800, 1900, 1], ['Мясо', 'Lucky Plucker', 1177.424, -3262.583, 4.794122, 155.5885, -1481.431, 28.14162, 1200, 1400, 0], ['Овощи', 'Lucky Plucker', 1177.424, -3262.583, 4.794122, 155.5885, -1481.431, 28.14162, 1200, 1400, 0], ['Мучная продукция', 'Lucky Plucker', 1177.424, -3262.583, 4.794122, 155.5885, -1481.431, 28.14162, 1200, 1400, 0], ['Одежда', 'Lârss & Elbö', 1189.483, -3103.883, 4.786432, 145.9881, -125.5803, 53.82679, 1700, 1800, 0], ['Обувь', 'Lârss & Elbö', 1189.483, -3103.883, 4.786432, 145.9881, -125.5803, 53.82679, 1700, 1800, 0], ['Одежда', 'Miss T', 1247.896, -3135.533, 4.748992, -1450.012, -218.8076, 47.73064, 1700, 1800, 0], ['Обувь', 'Miss T', 1247.896, -3135.533, 4.748992, -1450.012, -218.8076, 47.73064, 1700, 1800, 0], ['Одежда', 'Miss T', 1247.896, -3135.533, 4.748992, -1321.64, -579.9012, 28.4409, 1700, 1800, 0], ['Обувь', 'Miss T', 1247.896, -3135.533, 4.748992, -1321.64, -579.9012, 28.4409, 1700, 1800, 0], ['Одежда', 'Miss T', 1247.896, -3135.533, 4.748992, 222.1279, 174.6025, 104.2503, 1700, 1800, 0], ['Обувь', 'Miss T', 1247.896, -3135.533, 4.748992, 222.1279, 174.6025, 104.2503, 1700, 1800, 0], ['Напитки', 'Mojito Inn', 1248.167, -3142.517, 4.767723, -108.7673, 6399.986, 30.48528, 2800, 3000, 0], ['Соусы, Специи', 'Mojito Inn', 1248.167, -3142.517, 4.767723, -108.7673, 6399.986, 30.48528, 2800, 3000, 0], ['Спортивные велосипеды', 'Mr. Spoke Bike Rental', 1177.424, -3262.583, 4.794122, -1101.579, -1689.073, 3.304073, 1700, 1900, 1], ['BMX велосипеды', 'Mr. Spoke Bike Rental', 1177.424, -3262.583, 4.794122, -1101.579, -1689.073, 3.304073, 1700, 1900, 1], ['Горные велосипеды', 'Mr. Spoke Bike Rental', 1177.424, -3262.583, 4.794122, -1101.579, -1689.073, 3.304073, 1700, 1900, 1], ['Мучная продукция', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, 256.0749, -979.6636, 28.27825, 1300, 1500, 0], ['Мясо', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, 256.0749, -979.6636, 28.27825, 1300, 1500, 0], ['Овощи', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, 256.0749, -979.6636, 28.27825, 1300, 1500, 0], ['Мучная продукция', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1243.143, -256.8353, 38.01562, 1700, 1900, 0], ['Мясо', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1243.143, -256.8353, 38.01562, 1700, 1900, 0], ['Овощи', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1243.143, -256.8353, 38.01562, 1700, 1900, 0], ['Мучная продукция', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1168.707, -1150.437, 4.660981, 1600, 1800, 0], ['Мясо', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1168.707, -1150.437, 4.660981, 1600, 1800, 0], ['Овощи', 'Noodle Exchange', 1177.482, -3288.834, 4.789845, -1168.707, -1150.437, 4.660981, 1600, 1800, 0], ['Мучная продукция', 'Nut Buster', 1177.482, -3288.834, 4.789845, -1269.969, -1218.507, 3.714286, 1600, 1800, 0], ['Мясо', 'Nut Buster', 1177.482, -3288.834, 4.789845, -1269.969, -1218.507, 3.714286, 1600, 1800, 0], ['Овощи', 'Nut Buster', 1177.482, -3288.834, 4.789845, -1269.969, -1218.507, 3.714286, 1600, 1800, 0], ['Мучная продукция', 'Nutsaki', 1177.482, -3288.834, 4.789845, -1269.083, -823.0386, 16.09916, 1600, 1800, 0], ['Морепродукты', 'Nutsaki', 1177.482, -3288.834, 4.789845, -1269.083, -823.0386, 16.09916, 1600, 1800, 0], ['Овощи', 'Nutsaki', 1177.482, -3288.834, 4.789845, -1269.083, -823.0386, 16.09916, 1600, 1800, 0], ['Доски для серфинга', 'Papa Surf', 1246.994, -3272.652, 4.826261, -1305.216, -1312.805, 3.882299, 1300, 1500, 0], ['Гидрокостюмы', 'Papa Surf', 1246.994, -3272.652, 4.826261, -1305.216, -1312.805, 3.882299, 1300, 1500, 0], ['Бумага', 'Paper Clips', 1246.469, -3262.552, 4.789814, 70.90748, -793.9908, 30.5473, 1300, 1400, 0], ['Канцелярия', 'Paper Clips', 1246.469, -3262.552, 4.789814, 70.90748, -793.9908, 30.5473, 1300, 1400, 0], ['Мучная продукция', 'Pearl`s Seafood', 1177.482, -3288.834, 4.789845, -1800.601, -1180.288, 12.01747, 1600, 1800, 0], ['Морепродукты', 'Pearl`s Seafood', 1177.482, -3288.834, 4.789845, -1800.601, -1180.288, 12.01747, 1600, 1800, 0], ['Овощи', 'Pearl`s Seafood', 1177.482, -3288.834, 4.789845, -1800.601, -1180.288, 12.01747, 1600, 1800, 0], ['Мучная продукция', 'Pebble Dash Pizza', 1177.482, -3288.834, 4.789845, -1305.188, -1309.014, 3.852269, 1600, 1700, 0], ['Мясо, Грибы', 'Pebble Dash Pizza', 1177.482, -3288.834, 4.789845, -1305.188, -1309.014, 3.852269, 1600, 1700, 0], ['Овощи', 'Pebble Dash Pizza', 1177.482, -3288.834, 4.789845, -1305.188, -1309.014, 3.852269, 1600, 1700, 0], ['Запчасти', 'Pfister Design', 1247.756, -3155.405, 4.73872, -593.4905, -246.6295, 35.15224, 1800, 1900, 1], ['Мед.посуда', 'Pill-Pharm', 1248.18, -3148.986, 4.76891, -390.0966, -458.3381, 29.9282, 1800, 2000, 1], ['Упаковка', 'Pill-Pharm', 1248.18, -3148.986, 4.76891, -390.0966, -458.3381, 29.9282, 1800, 2000, 1], ['Анестетики', 'Pill-Pharm', 1248.18, -3148.986, 4.76891, -390.0966, -458.3381, 29.9282, 1800, 2000, 1], ['Пиво', 'Pink Sandwich', 1248.167, -3142.517, 4.767723, 90.56728, 181.7616, 103.655, 1500, 1600, 0], ['Вино', 'Pink Sandwich', 1248.167, -3142.517, 4.767723, 90.56728, 181.7616, 103.655, 1800, 2000, 1], ['Водка', 'Pink Sandwich', 1248.167, -3142.517, 4.767723, 90.56728, 181.7616, 103.655, 1800, 2000, 1], ['Коньяк', 'Pink Sandwich', 1248.167, -3142.517, 4.767723, 90.56728, 181.7616, 103.655, 2400, 2500, 2], ['Мука, Яйца', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 1300, 1500, 0], ['Сыр', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 1300, 1500, 0], ['Мясо, Грибы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 286.464, -956.6226, 28.30226, 1300, 1500, 0], ['Мука, Яйца', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 1600, 1800, 0], ['Сыр', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 1600, 1800, 0], ['Мясо, Грибы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 231.498, -9.347796, 72.61115, 1600, 1800, 0], ['Мука, Яйца', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 1600, 1800, 0], ['Сыр', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 1600, 1800, 0], ['Мясо, Грибы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 478.553, 80.61052, 96.15001, 1600, 1800, 0], ['Мука, Яйца', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 1600, 1800, 0], ['Сыр', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 1600, 1800, 0], ['Мясо, Грибы', 'Pizza This...', 1177.424, -3262.583, 4.794122, 550.0417, 124.5494, 97.04313, 1600, 1800, 0], ['Мука, Яйца', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 1500, 1700, 0], ['Сыр', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 1500, 1700, 0], ['Мясо, Грибы', 'Pizza This...', 1177.424, -3262.583, 4.794122, -1503.899, -885.3026, 9.107524, 1500, 1700, 0], ['Шприцы, Мед. посуда', 'Pop`s Pills', 1176.739, -3272.887, 4.842545, 145.0203, 6641.155, 30.56102, 3500, 4000, 1], ['Лекарства', 'Pop`s Pills', 1176.739, -3272.887, 4.842545, 128.2752, 6.605767, 66.84075, 1600, 1800, 0], ['Аптечки', 'Pop`s Pills', 1176.739, -3272.887, 4.842545, 128.2752, 6.605767, 66.84075, 1600, 1800, 0], ['Обезболивающие', 'Pop`s Pills', 1176.739, -3272.887, 4.842545, 128.2752, 6.605767, 66.84075, 1600, 1800, 0], ['Шприцы, Мед. посуда', 'Pop`s Pills', 1176.739, -3272.887, 4.842545, 128.2752, 6.605767, 66.84075, 2000, 2400, 1], ['Напитки', 'Poppy House', 1177.482, -3288.834, 4.789845, -677.1989, -2232.371, 4.805035, 1000, 1200, 0], ['Соусы, Специи', 'Poppy House', 1177.482, -3288.834, 4.789845, -677.1989, -2232.371, 4.805035, 1000, 1200, 0], ['Постельное бельё', 'Puerto Del Sol Yacht Club', 1247.01, -3288.55, 4.82778, -916.9441, -1237.871, 0.8626912, 1500, 1600, 0], ['Чистящие средства', 'Puerto Del Sol Yacht Club', 1247.01, -3288.55, 4.82778, -916.9441, -1237.871, 0.8626912, 1500, 1600, 0], ['Алкоголь', 'Puerto Del Sol Yacht Club', 1247.01, -3288.55, 4.82778, -916.9441, -1237.871, 0.8626912, 2500, 2600, 1], ['Провизия', 'Puerto Del Sol Yacht Club', 1247.01, -3288.55, 4.82778, -916.9441, -1237.871, 0.8626912, 1500, 1600, 0], ['Одежда', 'Ranch', 1246.994, -3272.652, 4.826261, -1554.986, -470.299, 34.70235, 1600, 1800, 0], ['Обувь', 'Ranch', 1246.994, -3272.652, 4.826261, -1554.986, -470.299, 34.70235, 1600, 1800, 0], ['Одежда', 'Ranch', 1246.994, -3272.652, 4.826261, -1220.568, -889.2198, 11.5447, 1500, 1700, 0], ['Обувь', 'Ranch', 1246.994, -3272.652, 4.826261, -1220.568, -889.2198, 11.5447, 1500, 1700, 0], ['Одежда', 'Ranch', 1246.994, -3272.652, 4.826261, -607.7878, -1032.258, 20.78753, 1300, 1500, 0], ['Обувь', 'Ranch', 1246.994, -3272.652, 4.826261, -607.7878, -1032.258, 20.78753, 1300, 1500, 0], ['Одежда', 'Ranch', 1246.994, -3272.652, 4.826261, 410.5782, -768.0493, 28.17724, 1300, 1500, 0], ['Обувь', 'Ranch', 1246.994, -3272.652, 4.826261, 410.5782, -768.0493, 28.17724, 1300, 1500, 0], ['Одежда', 'Ranch', 1246.994, -3272.652, 4.826261, -161.7716, -38.84959, 51.98118, 1400, 1600, 0], ['Обувь', 'Ranch', 1246.994, -3272.652, 4.826261, -161.7716, -38.84959, 51.98118, 1400, 1600, 0], ['Напитки', 'Rex`s Diner', 1246.469, -3262.552, 4.789814, 2542.031, 2581.634, 36.94486, 2500, 2800, 1], ['Соусы, Специи', 'Rex`s Diner', 1246.469, -3262.552, 4.789814, 2542.031, 2581.634, 36.94486, 2500, 2800, 1], ['Мука', 'Ring of Fire Chili House', 1189.483, -3103.883, 4.786432, 191.6209, -1455.283, 28.14162, 1200, 1400, 0], ['Напитки', 'Ring of Fire Chili House', 1189.483, -3103.883, 4.786432, 191.6209, -1455.283, 28.14162, 1200, 1400, 0], ['Провизия', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 1600, 1800, 0], ['Пиво', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 1600, 1800, 0], ['Шампанское', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 1600, 1800, 0], ['Водка', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 2400, 2600, 1], ['Вино', 'The Lust Resort', 1189.483, -3103.883, 4.786432, -572.1588, 248.3513, 81.85298, 2400, 2600, 1], ['Полуфабрикаты', 'The Sundae Post', 1248.167, -3142.517, 4.767723, -1196.023, -1534.684, 3.423592, 1300, 1500, 0], ['Мороженое', 'The Sundae Post', 1248.167, -3142.517, 4.767723, -1196.023, -1534.684, 3.423592, 1300, 1500, 0], ['Мясо', 'The Taco Farmer', 1248.18, -3148.986, 4.76891, 19.97245, -1597.479, 28.28243, 1100, 1300, 0], ['Мучная продукция', 'The Taco Farmer', 1248.18, -3148.986, 4.76891, 19.97245, -1597.479, 28.28243, 1100, 1300, 0], ['Овощи', 'The Taco Farmer', 1248.18, -3148.986, 4.76891, 19.97245, -1597.479, 28.28243, 1100, 1300, 0], ['Провизия', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 1300, 1500, 0], ['Пиво', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 1300, 1500, 0], ['Шампанское', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 1300, 1500, 0], ['Вино', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 2000, 2200, 1], ['Водка', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 2000, 2200, 1], ['Коньяк', 'The Vault', 1247.756, -3155.405, 4.73872, 223.7977, -1097.818, 28.18173, 2600, 2800, 2], ['Постельное бельё', 'The Viceroy Hotels & Resorts', 1246.469, -3262.552, 4.789814, -828.3599, -1264.437, 4.000379, 1200, 1400, 0], ['Провизия', 'The Viceroy Hotels & Resorts', 1246.469, -3262.552, 4.789814, -828.3599, -1264.437, 4.000379, 1200, 1400, 0], ['Чистящие средства', 'The Viceroy Hotels & Resorts', 1246.469, -3262.552, 4.789814, -828.3599, -1264.437, 4.000379, 1200, 1400, 0], ['Электроника', 'The Viceroy Hotels & Resorts', 1246.469, -3262.552, 4.789814, -828.3599, -1264.437, 4.000379, 1700, 1900, 1], ['Алкоголь', 'The Viceroy Hotels & Resorts', 1246.469, -3262.552, 4.789814, -828.3599, -1264.437, 4.000379, 1700, 1900, 1], ['Канцелярия', 'Tinkle', 1247.01, -3288.55, 4.82778, -7.799363, -574.6745, 36.74507, 1400, 1600, 0], ['Чистящие средства', 'Tinkle', 1247.01, -3288.55, 4.82778, -7.799363, -574.6745, 36.74507, 1400, 1600, 0], ['Постельное бельё', 'Tinkle', 1247.01, -3288.55, 4.82778, -7.799363, -574.6745, 36.74507, 1400, 1600, 0], ['Электроника', 'Tinkle', 1247.01, -3288.55, 4.82778, -7.799363, -574.6745, 36.74507, 1400, 1600, 0], ['Электроника', 'Totally Rental', 1177.424, -3262.583, 4.794122, 61.10703, -1627.38, 28.42426, 1700, 1900, 1], ['Инструменты', 'Touchdown Car Rentals', 1177.424, -3262.583, 4.794122, -830.3537, -2344.026, 13.57062, 1200, 1300, 1], ['Комплектующие для PC', 'TW@', 1176.739, -3272.887, 4.842545, -767.3617, -591.5817, 29.12627, 1600, 1800, 1], ['Компьютеры', 'TW@', 1176.739, -3272.887, 4.842545, -767.3617, -591.5817, 29.12627, 2200, 2400, 2], ['Комплектующие для PC', 'TW@', 1176.739, -3272.887, 4.842545, -612.2119, -1060.163, 20.78755, 1500, 1700, 1], ['Компьютеры', 'TW@', 1176.739, -3272.887, 4.842545, -612.2119, -1060.163, 20.78755, 2100, 2300, 2], ['Комплектующие для PC', 'TW@', 1176.739, -3272.887, 4.842545, -683.4301, -880.2512, 23.49901, 1500, 1600, 1], ['Компьютеры', 'TW@', 1176.739, -3272.887, 4.842545, -683.4301, -880.2512, 23.49901, 2200, 2400, 2], ['Комплектующие для PC', 'TW@', 1176.739, -3272.887, 4.842545, -708.4053, -880.0361, 22.59839, 1500, 1600, 1], ['Компьютеры', 'TW@', 1176.739, -3272.887, 4.842545, -708.4053, -880.0361, 22.59839, 2200, 2400, 2], ['Полуфабрикаты', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 88.26479, 304.5907, 108.9992, 1600, 1800, 0], ['Булочки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 88.26479, 304.5907, 108.9992, 1600, 1800, 0], ['Овощи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 88.26479, 304.5907, 108.9992, 1600, 1800, 0], ['Полуфабрикаты', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, -1552.886, -469.6979, 34.67694, 1600, 1800, 0], ['Булочки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, -1552.886, -469.6979, 34.67694, 1600, 1800, 0], ['Овощи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, -1552.886, -469.6979, 34.67694, 1600, 1800, 0], ['Полуфабрикаты', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 1602.053, 6450.111, 24.21856, 3000, 3200, 0], ['Булочки', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 1602.053, 6450.111, 24.21856, 3000, 3200, 0], ['Овощи', 'Up-n-Atom Burger', 1189.483, -3103.883, 4.786432, 1602.053, 6450.111, 24.21856, 3000, 3200, 0], ['Часы', 'Vankhov', 1247.896, -3135.533, 4.748992, 50.56637, -917.8481, 28.80546, 2000, 2200, 1], ['Ювелирные изделия', 'Vankhov', 1247.896, -3135.533, 4.748992, 50.56637, -917.8481, 28.80546, 3000, 3300, 2], ['Мясо', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 1400, 1600, 0], ['Мучная продукция', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 1400, 1600, 0], ['Овощи', 'Viendemorte', 1248.18, -3148.986, 4.76891, -251.6261, -359.8405, 28.896, 1400, 1600, 0], ['Мясо', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 1600, 1800, 0], ['Мучная продукция', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 1600, 1800, 0], ['Овощи', 'Viendemorte', 1248.18, -3148.986, 4.76891, -1322.609, -238.4491, 41.61206, 1600, 1800, 0], ['Постельное бельё', 'Vinewood Plaza Hotel', 1247.756, -3155.405, 4.73872, 579.8569, 125.9429, 97.04144, 1700, 1900, 0], ['Провизия', 'Vinewood Plaza Hotel', 1247.756, -3155.405, 4.73872, 579.8569, 125.9429, 97.04144, 1700, 1900, 0], ['Чистящие средства', 'Vinewood Plaza Hotel', 1247.756, -3155.405, 4.73872, 579.8569, 125.9429, 97.04144, 1700, 1900, 0], ['Электроника', 'Vinewood Plaza Hotel', 1247.756, -3155.405, 4.73872, 579.8569, 125.9429, 97.04144, 2300, 2500, 1], ['Алкоголь', 'Vinewood Plaza Hotel', 1247.756, -3155.405, 4.73872, 579.8569, 125.9429, 97.04144, 2300, 2500, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, 421.1855, 228.1673, 102.1917, 1700, 1900, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, 421.1855, 228.1673, 102.1917, 1700, 1900, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, 421.1855, 228.1673, 102.1917, 1700, 1900, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, 421.1855, 228.1673, 102.1917, 2300, 2500, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, 421.1855, 228.1673, 102.1917, 2300, 2500, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -801.8444, -2114.796, 7.811155, 1000, 1200, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -801.8444, -2114.796, 7.811155, 1000, 1200, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -801.8444, -2114.796, 7.811155, 1000, 1200, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -801.8444, -2114.796, 7.811155, 1700, 1900, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -801.8444, -2114.796, 7.811155, 1700, 1900, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1507.366, -531.835, 31.82766, 1700, 1900, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1507.366, -531.835, 31.82766, 1700, 1900, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1507.366, -531.835, 31.82766, 1700, 1900, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1507.366, -531.835, 31.82766, 2300, 2500, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1507.366, -531.835, 31.82766, 2300, 2500, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1855.677, -313.7531, 48.14572, 1700, 1900, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1855.677, -313.7531, 48.14572, 1700, 1900, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1855.677, -313.7531, 48.14572, 1700, 1900, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1855.677, -313.7531, 48.14572, 2300, 2500, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1855.677, -313.7531, 48.14572, 2300, 2500, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1150.488, -208.3641, 36.95975, 1600, 1800, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1150.488, -208.3641, 36.95975, 1600, 1800, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1150.488, -208.3641, 36.95975, 1600, 1800, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1150.488, -208.3641, 36.95975, 2200, 2400, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -1150.488, -208.3641, 36.95975, 2200, 2400, 1], ['Постельное бельё', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -642.6483, -1132.724, 10.98686, 1300, 1500, 0], ['Провизия', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -642.6483, -1132.724, 10.98686, 1300, 1500, 0], ['Чистящие средства', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -642.6483, -1132.724, 10.98686, 1300, 1500, 0], ['Электроника', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -642.6483, -1132.724, 10.98686, 1900, 2100, 1], ['Алкоголь', 'Von Crastenburg Hotel', 1247.756, -3155.405, 4.73872, -642.6483, -1132.724, 10.98686, 1900, 2100, 1], ['Канцелярия', 'Weazel', 1177.616, -3298.665, 4.780886, -561.9981, -905.2781, 22.88613, 1300, 1500, 0], ['Мониторы', 'Weazel', 1177.616, -3298.665, 4.780886, -561.9981, -905.2781, 22.88613, 1900, 2100, 1], ['Камеры', 'Weazel', 1177.616, -3298.665, 4.780886, -561.9981, -905.2781, 22.88613, 1900, 2100, 1], ['Канцелярия', 'Wenger Institute', 1246.469, -3262.552, 4.789814, -359.7782, -228.2643, 36.25945, 1400, 1600, 0], ['Провизия', 'Wenger Institute', 1246.469, -3262.552, 4.789814, -359.7782, -228.2643, 36.25945, 1400, 1600, 0], ['Декорации', 'Whirligig Theater', 1246.994, -3272.652, 4.826261, 303.0919, 144.4959, 102.7237, 1600, 1800, 0], ['Костюмы', 'Whirligig Theater', 1246.994, -3272.652, 4.826261, 303.0919, 144.4959, 102.7237, 1600, 1800, 0], ['Ткани', 'White Widow', 1247.01, -3288.55, 4.82778, -251.2991, -250.8687, 35.51898, 1400, 1600, 0], ['Швейные машинки', 'White Widow', 1247.01, -3288.55, 4.82778, -251.2991, -250.8687, 35.51898, 2200, 2400, 2], ['Полуфабрикаты', 'Wigwam Burger', 1177.616, -3298.665, 4.780886, -1525.918, -446.4672, 34.442, 1500, 1700, 0], ['Булочки', 'Wigwam Burger', 1177.616, -3298.665, 4.780886, -1525.918, -446.4672, 34.442, 1500, 1700, 0], ['Овощи', 'Wigwam Burger', 1177.616, -3298.665, 4.780886, -1525.918, -446.4672, 34.442, 1500, 1700, 0], ['Канцелярия', 'Wiwang', 1177.482, -3288.834, 4.789845, -816.4123, -746.4408, 22.38733, 1300, 1500, 0], ['Чистящие средства', 'Wiwang', 1177.482, -3288.834, 4.789845, -816.4123, -746.4408, 22.38733, 1300, 1500, 0], ['Электроника', 'Wiwang', 1177.482, -3288.834, 4.789845, -816.4123, -746.4408, 22.38733, 1800, 2000, 1], ['Пластик', 'Wiwang', 1177.482, -3288.834, 4.789845, -816.4123, -746.4408, 22.38733, 1800, 2000, 1], ['Часы', 'Robert Dazzler International Jewelry Exchange', 1176.739, -3272.887, 4.842545, 291.2857, -884.6104, 28.0396, 2000, 2200, 1], ['Ювелирные изделия', 'Robert Dazzler International Jewelry Exchange', 1176.739, -3272.887, 4.842545, 291.2857, -884.6104, 28.0396, 3100, 3300, 2], ['Продукты', 'RON', 1177.424, -3262.583, 4.794122, -1410.979, -278.4822, 45.36211, 1600, 1800, 0], ['Алкоголь', 'RON', 1177.424, -3262.583, 4.794122, -1410.979, -278.4822, 45.36211, 2300, 2500, 1], ['Продукты', 'RON', 1177.424, -3262.583, 4.794122, 183.8239, -1553.554, 28.19874, 1100, 1300, 0], ['Алкоголь', 'RON', 1177.424, -3262.583, 4.794122, 183.8239, -1553.554, 28.19874, 1800, 2000, 1], ['Продукты', 'RON', 1177.424, -3262.583, 4.794122, 183.8239, -1553.554, 28.19874, 1000, 1200, 0], ['Алкоголь', 'RON', 1177.424, -3262.583, 4.794122, 183.8239, -1553.554, 28.19874, 1700, 1900, 1], ['Продукты', 'RON', 1177.424, -3262.583, 4.794122, 1199.998, -1386.831, 34.22696, 1200, 1200, 0], ['Алкоголь', 'RON', 1177.424, -3262.583, 4.794122, 1199.998, -1386.831, 34.22696, 1700, 1900, 1], ['Пончики', 'Rusty Brown`s Ring Donuts', 1189.483, -3103.883, 4.786432, 347.7404, -997.9477, 28.29018, 1300, 1500, 0], ['Мясо', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 1200, 1400, 0], ['Морепродукты', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 1200, 1400, 0], ['Овощи', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 1200, 1400, 0], ['Мучная продукция', 'S.H o Korean Noodle House', 1247.896, -3135.533, 4.748992, -636.9869, -1215.934, 11.07652, 1200, 1400, 0], ['Пляжные принадлежности', 'Sally Surf shop', 1248.167, -3142.517, 4.767723, -216.4901, 6346.889, 30.68838, 2600, 2800, 0], ['Продукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1600, 1800, 0], ['Овощи', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1600, 1800, 0], ['Фрукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1600, 1800, 0], ['Алкоголь', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 2100, 2300, 1], ['Продукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -548.5152, -846.2162, 27.38021, 1300, 1500, 0], ['Овощи', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -548.5152, -846.2162, 27.38021, 1300, 1600, 0], ['Фрукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -548.5152, -846.2162, 27.38021, 1300, 1600, 0], ['Алкоголь', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -548.5152, -846.2162, 27.38021, 1800, 2000, 1], ['Продукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -609.2881, -1034.25, 20.78753, 1300, 1500, 0], ['Овощи', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -609.2881, -1034.25, 20.78753, 1300, 1500, 0], ['Фрукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -609.2881, -1034.25, 20.78753, 1300, 1500, 0], ['Алкоголь', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -609.2881, -1034.25, 20.78753, 1800, 2000, 1], ['Продукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1100, 1300, 0], ['Овощи', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1100, 1300, 0], ['Фрукты', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1100, 1300, 0], ['Алкоголь', 'Save-a-Cent', 1248.18, -3148.986, 4.76891, -1380.668, -437.4307, 34.72668, 1300, 1800, 1], ['Канцелярия', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -205.4285, -695.3956, 32.82534, 1300, 1500, 0], ['Электроника', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -205.4285, -695.3956, 32.82534, 1800, 2000, 1], ['Мебель', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -205.4285, -695.3956, 32.82534, 1800, 2000, 1], ['Канцелярия', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, 142.1961, -1081.504, 28.19235, 1300, 1500, 0], ['Электроника', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, 142.1961, -1081.504, 28.19235, 1800, 2000, 1], ['Мебель', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, 142.1961, -1081.504, 28.19235, 1800, 2000, 1], ['Канцелярия', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -710.4504, 285.751, 83.07227, 1600, 1800, 0], ['Электроника', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -710.4504, 285.751, 83.07227, 2100, 2300, 1], ['Мебель', 'Schlonqberq Sachs', 1247.756, -3155.405, 4.73872, -710.4504, 285.751, 83.07227, 2100, 2300, 1], ['Морепродукты', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 1500, 1700, 0], ['Мясо', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 1500, 1700, 0], ['Овощи', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 1500, 1700, 0], ['Мучная продукция', 'Sharkies Bites', 1246.469, -3262.552, 4.789814, -1286.493, -1394.107, 3.471992, 1500, 1700, 0], ['Мясо', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 1500, 1700, 0], ['Грибы', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 1500, 1700, 0], ['Морепродукты', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 1500, 1700, 0], ['Сыр', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 1500, 1700, 0], ['Мука, Яйца', 'Slice `N` Dice Pizzeria', 1246.469, -3262.552, 4.789814, -1313.793, -1286.13, 3.726245, 1500, 1700, 0], ['Полуфабрикаты', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 1300, 1500, 0], ['Мучная продукция', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 1300, 1500, 0], ['Овощи', 'Snr. Buns', 1246.994, -3272.652, 4.826261, -535.493, -714.4405, 32.10479, 1300, 1500, 0], ['Наручные часы', 'Super sonic', 1247.01, -3288.55, 4.82778, 310.4863, -956.297, 28.34788, 2000, 2200, 1], ['Ювелирные украшения', 'Super sonic', 1247.01, -3288.55, 4.82778, 310.4863, -956.297, 28.34788, 3100, 3300, 2], ['Одежда', 'Swallow', 1177.616, -3298.665, 4.780886, -1216.701, -885.7822, 11.74768, 1500, 1700, 0], ['Обувь', 'Swallow', 1177.616, -3298.665, 4.780886, -1216.701, -885.7822, 11.74768, 1500, 1700, 0], ['Одежда', 'Swallow', 1177.616, -3298.665, 4.780886, -1425.557, -649.5603, 27.67359, 1500, 1700, 0], ['Обувь', 'Swallow', 1177.616, -3298.665, 4.780886, -1425.557, -649.5603, 27.67359, 1500, 1700, 0], ['Одежда', 'Swallow', 1177.616, -3298.665, 4.780886, -223.0512, -44.99522, 48.57965, 1500, 1700, 0], ['Обувь', 'Swallow', 1177.616, -3298.665, 4.780886, -223.0512, -44.99522, 48.57965, 1500, 1700, 0], ['Одежда', 'Swallow', 1177.616, -3298.665, 4.780886, -637.8674, -243.0631, 37.13279, 1500, 1700, 0], ['Обувь', 'Swallow', 1177.616, -3298.665, 4.780886, -637.8674, -243.0631, 37.13279, 1500, 1700, 0], ['Одежда', 'T-Shirts XXS-XXXL', 1177.616, -3298.665, 4.780886, 264.203, 129.8575, 101.8075, 1600, 1800, 0], ['Обувь', 'T-Shirts XXS-XXXL', 1177.616, -3298.665, 4.780886, 264.203, 129.8575, 101.8075, 1600, 1800, 0], ['Мясо', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1551.21, -420.8625, 40.99286, 1600, 1800, 0], ['Мучная продукция', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1551.21, -420.8625, 40.99286, 1600, 1800, 0], ['Овощи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1551.21, -420.8625, 40.99286, 1600, 1800, 0], ['Мясо', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1203.412, -794.8759, 15.26769, 1500, 1700, 0], ['Мучная продукция', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1203.412, -794.8759, 15.26769, 1500, 1700, 0], ['Овощи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -1203.412, -794.8759, 15.26769, 1500, 1700, 0], ['Мясо', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -662.2255, -713.9471, 26.52068, 1300, 1500, 0], ['Мучная продукция', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -662.2255, -713.9471, 26.52068, 1300, 1500, 0], ['Овощи', 'Taco Bomb', 1177.482, -3288.834, 4.789845, -662.2255, -713.9471, 26.52068, 1300, 1500, 0], ['Попкорн', 'Ten cent Theater', 1176.739, -3272.887, 4.842545, 387.5392, -740.7101, 28.29445, 1300, 1500, 0], ['Пиво', 'The Brewler`s Drop', 1248.167, -3142.517, 4.767723, 87.86765, -1313.637, 28.23432, 1200, 1400, 0], ['Вино', 'The Brewler`s Drop', 1248.167, -3142.517, 4.767723, 87.86765, -1313.637, 28.23432, 1500, 1700, 1], ['Водка', 'The Brewler`s Drop', 1248.167, -3142.517, 4.767723, 87.86765, -1313.637, 28.23432, 1500, 1700, 1], ['Коньяк', 'The Brewler`s Drop', 1248.167, -3142.517, 4.767723, 87.86765, -1313.637, 28.23432, 2000, 2200, 2], ['Постельное бельё', 'The Celtica Hotel', 1189.483, -3103.883, 4.786432, 290.7396, -816.7831, 28.23497, 1300, 1500, 0], ['Провизия', 'The Celtica Hotel', 1189.483, -3103.883, 4.786432, 290.7396, -816.7831, 28.23497, 1300, 1500, 0], ['Электроника', 'The Celtica Hotel', 1189.483, -3103.883, 4.786432, 290.7396, -816.7831, 28.23497, 1700, 1900, 1], ['Натуральные продукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1441.962, -98.93987, 49.82897, 1600, 1800, 0], ['Овощи', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1441.962, -98.93987, 49.82897, 1600, 1800, 0], ['Фрукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1441.962, -98.93987, 49.82897, 1600, 1800, 0], ['Натуральные продукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1367.033, -691.1478, 23.91901, 1500, 1700, 0], ['Овощи', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1367.033, -691.1478, 23.91901, 1500, 1700, 0], ['Фрукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1367.033, -691.1478, 23.91901, 1500, 1700, 0], ['Натуральные продукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -609.5585, -1036.34, 20.78753, 1300, 1500, 0], ['Овощи', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -609.5585, -1036.34, 20.78753, 1300, 1500, 0], ['Фрукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -609.5585, -1036.34, 20.78753, 1300, 1500, 0], ['Натуральные продукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1388.413, -333.8435, 38.97755, 1600, 1800, 0], ['Овощи', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1388.413, -333.8435, 38.97755, 1600, 1800, 0], ['Фрукты', 'The Grain of Truth', 1189.483, -3103.883, 4.786432, -1388.413, -333.8435, 38.97755, 1600, 1800, 0], ['Постельное бельё', 'The Richman Hotel', 1248.18, -3148.986, 4.76891, -1208.263, 340.7228, 70.00195, 1600, 1800, 0], ['Провизия', 'The Richman Hotel', 1248.18, -3148.986, 4.76891, -1208.263, 340.7228, 70.00195, 1600, 1800, 0], ['Чистящие средства', 'The Richman Hotel', 1248.18, -3148.986, 4.76891, -1208.263, 340.7228, 70.00195, 1600, 1800, 0], ['Алкоголь', 'The Richman Hotel', 1248.18, -3148.986, 4.76891, -1208.263, 340.7228, 70.00195, 2200, 2400, 1], ['Декорации', 'Oriental Theater', 1247.756, -3155.405, 4.73872, 292.6045, 176.3271, 103.1149, 1600, 1800, 0], ['Костюмы', 'Oriental Theater', 1247.756, -3155.405, 4.73872, 292.6045, 176.3271, 103.1149, 1600, 1800, 0], ['Грим', 'Oriental Theater', 1247.756, -3155.405, 4.73872, 292.6045, 176.3271, 103.1149, 1600, 1800, 0], ['Электроника', 'Oriental Theater', 1247.756, -3155.405, 4.73872, 292.6045, 176.3271, 103.1149, 2200, 2400, 1]],
  w3: [['Мука', '1966 Digestive co.', 'trailers4', -1, 45, 45, 908.6146, -3185.351, 7.886254, 0.2449197, 694.0635, -833.3184, 23.39188, 2500, 3000, 1], ['Авиационное топливо', 'Adios Air', 'tanker2', -1, 45, 45, 594.605, -2768.316, 7.890954, -31.04834, -1926.509, -3003.535, 12.94426, 4000, 5000, 2], ['Авиационное топливо', 'Air EMU', 'tanker2', -1, 45, 45, 586.3734, -2763.587, 7.889909, -30.12402, -1822.069, -2812.127, 12.94426, 4000, 5000, 2], ['Авиационное топливо', 'Air Herler', 'tanker2', -1, 45, 45, 579.0327, -2758.753, 7.890079, -29.75873, -1776.873, -2775.251, 12.9447, 4000, 5000, 2], ['Овощи', 'Alamo Fruit Market', 'trailers', -1, 88, 88, 904.4104, -3185.949, 7.88645, 0.4588907, 1776.858, 4588.684, 36.69394, 4000, 5000, 1], ['Фрукты', 'Alamo Fruit Market', 'trailers', -1, 88, 88, 900.1826, -3185.76, 7.888832, 1.583094, 1776.858, 4588.684, 36.69394, 4000, 5000, 1], ['Корм', 'Animal Ark', 'trailers', -1, 22, 22, 961.4805, -3155.576, 7.891804, -0.2756945, 578.1329, 2797.023, 41.15633, 4000, 6000, 0], ['Клетки', 'Animal Ark', 'trailers', -1, 22, 22, 957.4136, -3155.019, 7.88755, -0.9058883, 578.1329, 2797.023, 41.15633, 4000, 6000, 0], ['Холодильники', 'Big G Goods', 'trailers3', -1, 22, 22, 953.2882, -3154.973, 7.887229, -0.01093859, 852.9171, -893.8719, 24.30501, 3000, 3200, 1], ['Телевизоры', 'Big G Goods', 'trailers3', -1, 22, 22, 949.3584, -3154.897, 7.887342, -0.03967371, 852.9171, -893.8719, 24.30501, 3000, 3200, 1], ['Кондиционеры', 'Big G Goods', 'trailers3', -1, 22, 22, 945.2229, -3154.817, 7.887364, -0.05663354, 852.9171, -893.8719, 24.30501, 3000, 3200, 1], ['Пылесосы', 'Big G Goods', 'trailers3', -1, 22, 22, 941.1797, -3154.739, 7.887232, 0.01900779, 852.9171, -893.8719, 24.30501, 3000, 3200, 1], ['Мелкая электроника', 'Big G Goods', 'trailers3', -1, 22, 22, 937.2198, -3154.663, 7.887289, -0.07126635, 852.9171, -893.8719, 24.30501, 3000, 3200, 1], ['Диваны', 'Big House Storage Inc.', 'trailers4', -1, 88, 88, 933.1103, -3154.706, 7.887238, -0.2060272, -543.6672, -2224.161, 5.394021, 3000, 3200, 1], ['Кресла', 'Big House Storage Inc.', 'trailers4', -1, 88, 88, 928.9678, -3154.625, 7.887198, -0.09660567, -543.6672, -2224.161, 5.394021, 3000, 3200, 1], ['Шкафы', 'Big House Storage Inc.', 'trailers4', -1, 88, 88, 924.9267, -3154.546, 7.887188, 0.09003894, -543.6672, -2224.161, 5.394021, 3000, 3200, 1], ['Столы', 'Big House Storage Inc.', 'trailers4', -1, 88, 88, 912.657, -3155.111, 7.887346, -0.3191873, -543.6672, -2224.161, 5.394021, 3000, 3200, 1], ['Стулья', 'Big House Storage Inc.', 'trailers4', -1, 88, 88, 908.5989, -3155.267, 7.887103, 0.2451734, -543.6672, -2224.161, 5.394021, 3000, 3200, 1], ['Мясо курицы', 'Bishop`s Chicken', 'trailers4', -1, 111, 111, 904.5208, -3155.077, 7.887065, -0.411227, 2568.581, 479.0625, 107.5289, 4000, 4200, 0], ['Овощи', 'Bishop’s Chicken', 'trailers4', -1, 111, 111, 900.5699, -3154.865, 7.8873, -0.6782929, 2568.581, 479.0625, 107.5289, 4000, 4200, 0], ['Напитки, Соусы, Специи', 'Bishop’s Chicken', 'trailers4', -1, 111, 111, 896.3067, -3154.85, 7.887386, -0.1300817, 2568.581, 479.0625, 107.5289, 4000, 4200, 0], ['Мясо курицы', 'Casey`s Diner', 'trailers4', -1, 111, 111, 969.6334, -3185.813, 7.887936, -0.6464101, 815.9142, -751.1782, 25.72773, 3000, 3200, 0], ['Овощи', 'Casey`s Diner', 'trailers4', -1, 111, 111, 965.481, -3185.921, 7.887516, 0.4926082, 815.9142, -751.1782, 25.72773, 3000, 3200, 0], ['Напитки, Соусы, Специи', 'Casey`s Diner', 'trailers4', -1, 111, 111, 961.5951, -3185.882, 7.888643, -0.1401775, 815.9142, -751.1782, 25.72773, 3000, 3200, 0], ['Курицы', 'Cluckin` Bell Farms.', 'trailers2', 2, 111, 111, 957.278, -3186.159, 7.887611, 0.0002869049, 86.01464, 6330.725, 30.22577, 7000, 8200, 0], ['Мука', 'Cluckin` Bell P.P.', 'trailers2', 2, 111, 111, 953.1343, -3185.897, 7.886543, 0.09585096, 183.7782, 6402.812, 30.29058, 7000, 8200, 0], ['Яйца', 'Cluckin` Bell P.P.', 'trailers2', 2, 111, 111, 949.2393, -3186.049, 7.887627, 0.1971075, 183.7782, 6402.812, 30.29058, 7000, 8200, 0], ['Специи', 'Cluckin` Bell P.P.', 'trailers2', 2, 111, 111, 945.2054, -3186.048, 7.887602, -0.07267947, 183.7782, 6402.812, 30.29058, 7000, 8200, 0], ['Упаковка', 'Cluckin` Bell P.P.', 'trailers2', 2, 111, 111, 941.0943, -3185.865, 7.887687, -0.1403303, 183.7782, 6402.812, 30.29058, 7000, 8200, 0], ['Ткани', 'Darnell Bros.', 'trailers4', -1, 111, 111, 936.9785, -3185.682, 7.887493, -0.1935634, 745.682861328125, -954.6734619140625, 23.6458740234375, 3000, 3500, 0], ['Швейные машинки', 'Darnell Bros.', 'trailers4', -1, 111, 111, 933.0439, -3185.527, 7.887491, -0.479377, 745.682861328125, -954.6734619140625, 23.6458740234375, 3400, 4000, 1], ['Нитки, Иглы', 'Darnell Bros.', 'trailers4', -1, 111, 111, 928.8198, -3185.98, 7.887646, -0.6624429, 745.682861328125, -954.6734619140625, 23.6458740234375, 3000, 3500, 0], ['Постельное бельё', 'Darnell Bros.', 'trailers', -1, 111, 111, 925.1257, -3185.924, 7.887574, 0.3383776, -130.0315, 6342.886, 30.49019, 6000, 7000, 0], ['Провизия', 'Darnell Bros.', 'trailers', -1, 111, 111, 920.653, -3186.184, 7.887476, -0.289339, -130.0315, 6342.886, 30.49019, 6000, 7000, 0], ['Чистящие средства', 'Darnell Bros.', 'trailers', -1, 111, 111, 916.751, -3185.717, 7.887846, 0.05852598, -130.0315, 6342.886, 30.49019, 6000, 7000, 1], ['Покрышки', 'Frankie\'s Service Center', 'trailers', -1, 111, 111, 912.808, -3185.542, 7.886538, -0.9488344, 2305.237, 4889.489, 40.80823, 6000, 7000, 0], ['Моторное масло', 'Frankie\'s Service Center', 'trailers', -1, 111, 111, 908.6146, -3185.351, 7.886254, 0.2449197, 2305.237, 4889.489, 40.80823, 6000, 7000, 0], ['Инструменты', 'Frankie\'s Service Center', 'trailers', -1, 111, 111, 904.4104, -3185.949, 7.88645, 0.4588907, 2305.237, 4889.489, 40.80823, 6000, 7000, 0], ['Запчасти', 'Frankie\'s Service Center', 'trailers', -1, 111, 111, 900.1826, -3185.76, 7.888832, 1.583094, 2305.237, 4889.489, 40.80823, 7000, 8000, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 594.605, -2768.316, 7.890954, -31.04834, 1693.241, 6426.406, 31.62309, 7000, 8000, 0], ['Дизельное топливо', 'Globe Oil', 'tanker2', -1, 45, 45, 586.3734, -2763.587, 7.889909, -30.12402, 1693.241, 6426.406, 31.62309, 8000, 9000, 1], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 961.4805, -3155.576, 7.891804, -0.2756945, 1693.241, 6426.406, 31.62309, 6000, 7000, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 579.0327, -2758.753, 7.890079, -29.75873, 1754.885, 3322.112, 40.25305, 5500, 6500, 0], ['Дизельное топливо', 'Globe Oil', 'tanker2', -1, 45, 45, 571.0884, -2754.187, 7.890066, -29.27294, 1754.885, 3322.112, 40.25305, 6500, 7500, 1], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 957.4136, -3155.019, 7.88755, -0.9058883, 1754.885, 3322.112, 40.25305, 4500, 5500, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 563.5502, -2749.333, 7.889503, -29.4388, 256.6123, 2577.674, 44.234, 5500, 6500, 0], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 953.2882, -3154.973, 7.887229, -0.01093859, 256.6123, 2577.674, 44.234, 4500, 5500, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 547.9932, -2740.39, 7.890827, -30.25641, 1206.751, 2641.467, 36.82385, 5500, 6500, 0], ['Дизельное топливо', 'Globe Oil', 'tanker2', -1, 45, 45, 539.6985, -2736.678, 7.890514, -27.99677, 1206.751, 2641.467, 36.82385, 6500, 7500, 1], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 949.3584, -3154.897, 7.887342, -0.03967371, 1206.751, 2641.467, 36.82385, 4500, 5500, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 531.841, -2731.784, 7.890955, -29.77319, 632.0523, 253.2578, 102.1002, 4000, 5000, 0], ['Дизельное топливо', 'Globe Oil', 'tanker2', -1, 45, 45, 594.605, -2768.316, 7.890954, -31.04834, 632.0523, 253.2578, 102.1002, 5000, 6000, 1], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 945.2229, -3154.817, 7.887364, -0.05663354, 632.0523, 253.2578, 102.1002, 3500, 4500, 1], ['Бензин', 'Globe Oil', 'tanker2', -1, 45, 45, 524.7264, -2726.902, 7.890134, -29.81773, 1693.241, 6426.406, 31.62309, 3500, 4000, 0], ['Дизельное топливо', 'Globe Oil', 'tanker2', -1, 45, 45, 941.1797, -3154.739, 7.887232, 0.01900779, 1693.241, 6426.406, 31.62309, 4000, 4500, 1], ['Моторное масло', 'Globe Oil', 'trailers', -1, 45, 45, 937.2198, -3154.663, 7.887289, -0.07126635, 1693.241, 6426.406, 31.62309, 3000, 3500, 1], ['Мука', 'Golden Buns Bakery', 'trailers4', -1, 45, 45, 933.1103, -3154.706, 7.887238, -0.2060272, -292.5053, 6210.254, 30.35525, 6000, 7000, 0], ['Металл', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, 928.9678, -3154.625, 7.887198, -0.09660567, 1063.619, -1976.263, 30.01464, 1500, 2000, 0], ['Спец. оборудование', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, 924.9267, -3154.546, 7.887188, 0.09003894, 1063.619, -1976.263, 30.01464, 2000, 3000, 1], ['Спец. форма', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, 912.657, -3155.111, 7.887346, -0.3191873, 1063.619, -1976.263, 30.01464, 2000, 3000, 1], ['Кон. корм', 'Grapeseed Cow Farm', 'trailers4', -1, 45, 45, 908.5989, -3155.267, 7.887103, 0.2451734, 2530.684, 4752.933, 33.30018, 6000, 6500, 0], ['Силос', 'Grapeseed Cow Farm', 'trailers4', -1, 45, 45, 904.5208, -3155.077, 7.887065, -0.411227, 2530.684, 4752.933, 33.30018, 6000, 6500, 0], ['Семена', 'Grapeseed Farmers Market', 'trailers', -1, 45, 45, 900.5699, -3154.865, 7.8873, -0.6782929, 1674.823, 4888.582, 41.10576, 6500, 7500, 1], ['Сад. инструменты', 'Grapeseed Farmers Market', 'trailers', -1, 45, 45, 896.3067, -3154.85, 7.887386, -0.1300817, 1674.823, 4888.582, 41.10576, 6000, 7000, 0], ['Корм', 'Grapeseed Farmers Market', 'trailers', -1, 45, 45, 965.6885, -3131.707, 7.886346, -0.3731613, 1674.823, 4888.582, 41.10576, 6000, 7000, 0], ['Запчасти', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 961.4094, -3131.726, 7.887985, 0.06879883, -239.3761, 6230.962, 30.50071, 7000, 9000, 0], ['Покрышки', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 957.4581, -3131.877, 7.886365, 0.03357769, -239.3761, 6230.962, 30.50071, 7000, 9000, 0], ['Автомобильные стекла', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 953.4048, -3131.7, 7.885975, 0.03509815, -239.3761, 6230.962, 30.50071, 8000, 10000, 1], ['Моторное масло', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 949.4296, -3131.799, 7.884996, -0.09016986, -239.3761, 6230.962, 30.50071, 7000, 9000, 0], ['Фильтры', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 945.3774, -3131.675, 7.886474, -0.08836117, -239.3761, 6230.962, 30.50071, 7000, 9000, 1], ['Инструменты', 'Helmut\'s European Autos', 'trailers', -1, 45, 45, 941.149, -3131.767, 7.886292, -0.07041628, -239.3761, 6230.962, 30.50071, 8000, 9000, 0], ['Морепродукты', 'Hookies', 'trailers', -1, 45, 45, 937.0972, -3131.858, 7.886218, -0.1059345, -2169.108, 4277.521, 47.95491, 6000, 7000, 0], ['Мучная продукция', 'Hookies', 'trailers', -1, 45, 45, 933.2242, -3131.826, 7.88622, -0.1397947, -2169.108, 4277.521, 47.95491, 6000, 7000, 0], ['Овощи, Фрукты', 'Hookies', 'trailers', -1, 45, 45, 929.3135, -3131.913, 7.886281, -0.153175, -2169.108, 4277.521, 47.95491, 6000, 7000, 0], ['Напитки', 'Hookies', 'trailers', -1, 45, 45, 924.8957, -3131.892, 7.886405, -0.08490118, -2169.108, 4277.521, 47.95491, 7000, 8000, 1], ['Бензин', 'Limited Gasoline', 'tanker2', -1, 45, 45, 586.3734, -2763.587, 7.889909, -30.12402, -727.4792, -911.2381, 18.01394, 4000, 5000, 0], ['Дизельное топливо', 'Limited Gasoline', 'tanker2', -1, 45, 45, 579.0327, -2758.753, 7.890079, -29.75873, -727.4792, -911.2381, 18.01394, 5000, 6000, 1], ['Бензин', 'Limited Gasoline', 'tanker2', -1, 45, 45, 571.0884, -2754.187, 7.890066, -29.27294, -81.89794, -1755.54, 28.56783, 3500, 4500, 0], ['Дизельное топливо', 'Limited Gasoline', 'tanker2', -1, 45, 45, 563.5502, -2749.333, 7.889503, -29.4388, -81.89794, -1755.54, 28.56783, 4500, 5500, 1], ['Бензин', 'Limited Gasoline', 'tanker2', -1, 45, 45, 555.9698, -2745.132, 7.882638, -28.2911, -1815.064, 808.628, 137.5676, 5000, 6000, 0], ['Дизельное топливо', 'Limited Gasoline', 'tanker2', -1, 45, 45, 547.9932, -2740.39, 7.890827, -30.25641, -1815.064, 808.628, 137.5676, 5000, 7000, 1], ['Продукты', 'Limited Gasoline', 'trailers4', -1, 45, 45, 904.5311, -3131.897, 7.886521, -0.02475738, -1815.064, 808.628, 137.5676, 4000, 5000, 0], ['Алкоголь', 'Limited Gasoline', 'trailers4', -1, 45, 45, 900.55, -3131.774, 7.886311, -0.1344448, -1815.064, 808.628, 137.5676, 6000, 7000, 1], ['Бензин', 'Limited Gasoline', 'tanker2', -1, 45, 45, 539.6985, -2736.678, 7.890514, -27.99677, 1696.466, 4914.703, 41.0781, 7000, 8000, 0], ['Дизельное топливо', 'Limited Gasoline', 'tanker2', -1, 45, 45, 531.841, -2731.784, 7.890955, -29.77319, 1696.466, 4914.703, 41.0781, 8000, 9000, 1], ['Продукты', 'Limited Gasoline', 'trailers4', -1, 45, 45, 892.4143, -3131.782, 7.886481, 0.1325428, 1696.466, 4914.703, 41.0781, 5500, 6500, 0], ['Алкоголь', 'Limited Gasoline', 'trailers4', -1, 45, 45, 969.6334, -3185.813, 7.887936, -0.6464101, 1696.466, 4914.703, 41.0781, 7500, 8500, 1], ['Бензин', 'Limited Gasoline', 'tanker2', -1, 45, 45, 524.7264, -2726.902, 7.890134, -29.81773, 1171.889, -317.6099, 68.17641, 4000, 5000, 0], ['Дизельное топливо', 'Limited Gasoline', 'tanker2', -1, 45, 45, 594.605, -2768.316, 7.890954, -31.04834, 1171.889, -317.6099, 68.17641, 5000, 6000, 1], ['Пиво', 'Liquor Market', 'trailers', -1, 45, 45, 965.481, -3185.921, 7.887516, 0.4926082, 917.5886, 3661.153, 31.598, 4500, 5500, 0], ['Вино', 'Liquor Market', 'trailers', -1, 45, 45, 961.5951, -3185.882, 7.888643, -0.1401775, 917.5886, 3661.153, 31.598, 5500, 6500, 1], ['Водка', 'Liquor Market', 'trailers', -1, 45, 45, 957.278, -3186.159, 7.887611, 0.0002869049, 917.5886, 3661.153, 31.598, 5500, 6500, 1], ['Коньяк', 'Liquor Market', 'trailers', -1, 45, 45, 953.1343, -3185.897, 7.886543, 0.09585096, 917.5886, 3661.153, 31.598, 6500, 7500, 2], ['Надувные лодки', 'Millars Boat Shop', 'trailers4', -1, 45, 45, 949.2393, -3186.049, 7.887627, 0.1971075, 1317.249, 4359.617, 40.03699, 6000, 7000, 0], ['Деревянные лодки', 'Millars Boat Shop', 'trailers4', -1, 45, 45, 945.2054, -3186.048, 7.887602, -0.07267947, 1317.249, 4359.617, 40.03699, 6000, 7000, 0], ['Вёсла', 'Millars Boat Shop', 'trailers4', -1, 45, 45, 941.0943, -3185.865, 7.887687, -0.1403303, 1317.249, 4359.617, 40.03699, 6000, 7000, 0], ['Спасательная экипировка', 'Millars Boat Shop', 'trailers4', -1, 45, 45, 936.9785, -3185.682, 7.887493, -0.1935634, 1317.249, 4359.617, 40.03699, 7000, 8000, 1], ['Рыбаловное снаряжение', 'Millars Boat Shop', 'trailers4', -1, 45, 45, 933.0439, -3185.527, 7.887491, -0.479377, 1317.249, 4359.617, 40.03699, 7000, 8000, 1], ['Мясо', 'Mojito Inn', 'trailers4', -1, 45, 45, 928.8198, -3185.98, 7.887646, -0.6624429, -108.7673, 6399.986, 30.48528, 7000, 8000, 0], ['Мучная продукция', 'Mojito Inn', 'trailers4', -1, 45, 45, 925.1257, -3185.924, 7.887574, 0.3383776, -108.7673, 6399.986, 30.48528, 7000, 8000, 0], ['Алкоголь', 'Mojito Inn', 'trailers4', -1, 45, 45, 920.653, -3186.184, 7.887476, -0.289339, -108.7673, 6399.986, 30.48528, 8000, 9000, 1], ['Морепродукты', 'Mojito Inn', 'trailers4', -1, 45, 45, 916.751, -3185.717, 7.887846, 0.05852598, -108.7673, 6399.986, 30.48528, 7000, 8000, 0], ['Краска', 'Otto`s Auto Parts', 'trailers4', -1, 45, 45, 969.6334, -3185.813, 7.887936, -0.6464101, 1928.939, 3712.094, 31.45169, 5000, 6000, 0], ['Покрышки', 'Otto`s Auto Parts', 'trailers4', -1, 45, 45, 965.481, -3185.921, 7.887516, 0.4926082, 1928.939, 3712.094, 31.45169, 5000, 6000, 0], ['Наборы инструментов', 'Otto`s Auto Parts', 'trailers4', -1, 45, 45, 961.5951, -3185.882, 7.888643, -0.1401775, 1928.939, 3712.094, 31.45169, 5000, 6000, 0], ['Запчасти', 'Otto`s Auto Parts', 'trailers4', -1, 45, 45, 957.278, -3186.159, 7.887611, 0.0002869049, 1928.939, 3712.094, 31.45169, 5000, 6000, 0], ['Корм', 'Paleto Pets', 'trailers', -1, 22, 22, 953.1343, -3185.897, 7.886543, 0.09585096, -290.2163, 6303.38, 30.49224, 6000, 7000, 0], ['Клетки', 'Paleto Pets', 'trailers', -1, 22, 22, 949.2393, -3186.049, 7.887627, 0.1971075, -290.2163, 6303.38, 30.49224, 6000, 7000, 0], ['Лекарства', 'Paleto Pets', 'trailers', -1, 22, 22, 945.2054, -3186.048, 7.887602, -0.07267947, -290.2163, 6303.38, 30.49224, 6000, 7000, 0], ['Лекарства', 'Pop`s Pills', 'trailers', -1, 22, 22, 941.0943, -3185.865, 7.887687, -0.1403303, 145.0203, 6641.155, 30.56102, 6000, 7000, 0], ['Аптечки', 'Pop`s Pills', 'trailers', -1, 22, 22, 936.9785, -3185.682, 7.887493, -0.1935634, 145.0203, 6641.155, 30.56102, 6000, 7000, 0], ['Обезболивающие', 'Pop`s Pills', 'trailers', -1, 22, 22, 933.0439, -3185.527, 7.887491, -0.479377, 145.0203, 6641.155, 30.56102, 6000, 7000, 0], ['Мясо', 'Poppy House', 'trailers4', -1, 22, 22, 928.8198, -3185.98, 7.887646, -0.6624429, -677.1989, -2232.371, 4.805035, 1500, 2000, 0], ['Мучная продукция', 'Poppy House', 'trailers4', -1, 22, 22, 925.1257, -3185.924, 7.887574, 0.3383776, -677.1989, -2232.371, 4.805035, 1500, 2000, 0], ['Овощи, Фрукты', 'Poppy House', 'trailers4', -1, 22, 22, 920.653, -3186.184, 7.887476, -0.289339, -677.1989, -2232.371, 4.805035, 1500, 2000, 0], ['Алкоголь', 'Poppy House', 'trailers4', -1, 22, 22, 916.751, -3185.717, 7.887846, 0.05852598, -677.1989, -2232.371, 4.805035, 2500, 3000, 1], ['Мясо', 'Rex`s Diner', 'trailers4', -1, 22, 22, 912.808, -3185.542, 7.886538, -0.9488344, 2542.031, 2581.634, 36.94486, 3500, 4000, 0], ['Мучная продукция', 'Rex`s Diner', 'trailers4', -1, 22, 22, 908.6146, -3185.351, 7.886254, 0.2449197, 2542.031, 2581.634, 36.94486, 3500, 4000, 0], ['Овощи, Фрукты', 'Rex`s Diner', 'trailers4', -1, 22, 22, 904.4104, -3185.949, 7.88645, 0.4588907, 2542.031, 2581.634, 36.94486, 3500, 4000, 0], ['Алкоголь', 'Rex`s Diner', 'trailers4', -1, 22, 22, 900.1826, -3185.76, 7.888832, 1.583094, 2542.031, 2581.634, 36.94486, 5000, 6000, 1], ['Удобрения', 'Union Grain Supply Inc.', 'trailers4', -1, 22, 22, 961.4805, -3155.576, 7.891804, -0.2756945, 2018.667, 4976.368, 40.20461, 5500, 6000, 0], ['Семена', 'Union Grain Supply Inc.', 'trailers4', -1, 22, 22, 957.4136, -3155.019, 7.88755, -0.9058883, 2018.667, 4976.368, 40.20461, 5500, 6000, 0], ['Инструменты', 'Union Grain Supply Inc.', 'trailers4', -1, 22, 22, 953.2882, -3154.973, 7.887229, -0.01093859, 2018.667, 4976.368, 40.20461, 5500, 6000, 0], ['Строй. материалы', 'Union Grain Supply Inc.', 'trailers4', -1, 22, 22, 949.3584, -3154.897, 7.887342, -0.03967371, 2018.667, 4976.368, 40.20461, 6500, 8000, 1], ['Запчасти для тракторов', 'Union Grain Supply Inc.', 'trailers4', -1, 22, 22, 945.2229, -3154.817, 7.887364, -0.05663354, 2018.667, 4976.368, 40.20461, 7500, 9000, 2], ['Полуфабрикаты', 'Up-n-Atom Burger', 'trailers2', 3, 22, 22, 941.1797, -3154.739, 7.887232, 0.01900779, 1602.053, 6450.111, 24.21856, 6000, 7000, 1], ['Мучная продукция', 'Up-n-Atom Burger', 'trailers2', 3, 22, 22, 937.2198, -3154.663, 7.887289, -0.07126635, 1602.053, 6450.111, 24.21856, 6000, 7000, 1], ['Овощи', 'Up-n-Atom Burger', 'trailers2', 3, 22, 22, 933.1103, -3154.706, 7.887238, -0.2060272, 1602.053, 6450.111, 24.21856, 6000, 7000, 1], ['Напитки', 'Up-n-Atom Burger', 'trailers2', 3, 22, 22, 928.9678, -3154.625, 7.887198, -0.09660567, 1602.053, 6450.111, 24.21856, 6000, 7000, 1], ['Соусы, Специи', 'Up-n-Atom Burger', 'trailers2', 3, 22, 22, 924.9267, -3154.546, 7.887188, 0.09003894, 1602.053, 6450.111, 24.21856, 6000, 7000, 2], ['Бензин', 'Xero', 'tanker2', -1, 45, 45, 655.3536, -2780.249, 7.950501, -53.33735, 66.23354, 2783.945, 56.87829, 6000, 8000, 0], ['Дизельное топливо', 'Xero', 'tanker2', -1, 45, 45, 651.4494, -2774.68, 7.942375, -54.71165, 66.23354, 2783.945, 56.87829, 7000, 9000, 1], ['Бензин', 'Xero', 'tanker2', -1, 45, 45, 647.1118, -2769.362, 7.939007, -55.05378, -2071.086, -306.5996, 12.14571, 3000, 4000, 0], ['Дизельное топливо', 'Xero', 'tanker2', -1, 45, 45, 643.0397, -2764.143, 7.935173, -54.20904, -2071.086, -306.5996, 12.14571, 4000, 5000, 1], ['Бензин', 'Xero', 'tanker2', -1, 45, 45, 639.017, -2758.484, 7.936687, -54.49929, -530.147, -1198.169, 17.29768, 2000, 3000, 0], ['Дизельное топливо', 'Xero', 'tanker2', -1, 45, 45, 635.2323, -2753.023, 7.938125, -54.09629, -530.147, -1198.169, 17.29768, 3000, 4000, 1], ['Бензин', 'Xero', 'tanker2', -1, 45, 45, 631.3494, -2747.808, 7.954045, -59.47772, 287.6419, -1246.247, 28.24254, 2000, 3000, 0], ['Дизельное топливо', 'Xero', 'tanker2', -1, 45, 45, 594.605, -2768.316, 7.890954, -31.04834, 287.6419, -1246.247, 28.24254, 3000, 4000, 1], ['Бензин', 'Xero', 'tanker2', -1, 45, 45, 586.3734, -2763.587, 7.889909, -30.12402, -97.32233, 6396.872, 30.45264, 6000, 8000, 0], ['Дизельное топливо', 'Xero', 'tanker2', -1, 45, 45, 579.0327, -2758.753, 7.890079, -29.75873, -97.32233, 6396.872, 30.45264, 7000, 9000, 1], ['Бензин', 'RON', 'tanker', -1, 45, 45, 571.0884, -2754.187, 7.890066, -29.27294, -1410.979, -278.4822, 45.36211, 3000, 4000, 0], ['Дизельное топливо', 'RON', 'tanker', -1, 45, 45, 563.5502, -2749.333, 7.889503, -29.4388, -1410.979, -278.4822, 45.36211, 4000, 5000, 1], ['Бензин', 'RON', 'tanker', -1, 45, 45, 555.9698, -2745.132, 7.882638, -28.2911, 183.8239, -1553.554, 28.19874, 2000, 3000, 0], ['Дизельное топливо', 'RON', 'tanker', -1, 45, 45, 547.9932, -2740.39, 7.890827, -30.25641, 183.8239, -1553.554, 28.19874, 3000, 4000, 1], ['Бензин', 'RON', 'tanker', -1, 45, 45, 539.6985, -2736.678, 7.890514, -27.99677, 827.3731, -1040.591, 25.79009, 2000, 2500, 0], ['Дизельное топливо', 'RON', 'tanker', -1, 45, 45, 531.841, -2731.784, 7.890955, -29.77319, 827.3731, -1040.591, 25.79009, 2500, 3500, 1], ['Бензин', 'RON', 'tanker', -1, 45, 45, 524.7264, -2726.902, 7.890134, -29.81773, 1199.998, -1386.831, 34.22696, 2000, 2500, 0], ['Дизельное топливо', 'RON', 'tanker', -1, 45, 45, 655.3536, -2780.249, 7.950501, -53.33735, 1199.998, -1386.831, 34.22696, 2500, 3000, 1], ['Бензин', 'RON', 'tanker', -1, 45, 45, 651.4494, -2774.68, 7.942375, -54.71165, -2542.981, 2340.826, 32.05992, 5000, 7000, 0], ['Дизельное топливо', 'RON', 'tanker', -1, 45, 45, 647.1118, -2769.362, 7.939007, -55.05378, -2542.981, 2340.826, 32.05992, 6000, 8000, 1], ['Продукты', 'RON', 'trailers2', 1, 22, 22, 965.6885, -3131.707, 7.886346, -0.3731613, -2542.981, 2340.826, 32.05992, 3000, 4000, 0], ['Алкоголь', 'RON', 'trailers2', 1, 22, 22, 961.4094, -3131.726, 7.887985, 0.06879883, -2542.981, 2340.826, 32.05992, 4000, 5000, 1], ['Доски для серфинга', 'Sally Surf shop', 'trailers2', 1, 22, 22, 957.4581, -3131.877, 7.886365, 0.03357769, -216.4901, 6346.889, 30.68838, 6000, 7000, 0], ['Инструменты', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 953.4048, -3131.7, 7.885975, 0.03509815, 311.9481, 2836.621, 42.43604, 5000, 6000, 0], ['Рабочая форма', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 949.4296, -3131.799, 7.884996, -0.09016986, 311.9481, 2836.621, 42.43604, 5000, 7000, 1], ['Масло', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 945.3774, -3131.675, 7.886474, -0.08836117, 311.9481, 2836.621, 42.43604, 5000, 6000, 0], ['Промышленные запчасти', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 941.149, -3131.767, 7.886292, -0.07041628, 311.9481, 2836.621, 42.43604, 6000, 8000, 1], ['Пиво', 'The Hen House', 'trailers4', -1, 22, 22, 937.0972, -3131.858, 7.886218, -0.1059345, -320.7639, 6279.229, 30.49434, 5000, 6000, 0], ['Водка', 'The Hen House', 'trailers4', -1, 22, 22, 933.2242, -3131.826, 7.88622, -0.1397947, -320.7639, 6279.229, 30.49434, 6000, 7000, 1], ['Вино', 'The Hen House', 'trailers4', -1, 22, 22, 929.3135, -3131.913, 7.886281, -0.153175, -320.7639, 6279.229, 30.49434, 6000, 7000, 1], ['Коньяк', 'The Hen House', 'trailers4', -1, 22, 22, 924.8957, -3131.892, 7.886405, -0.08490118, -320.7639, 6279.229, 30.49434, 7000, 8000, 2], ['Закуска', 'The Hen House', 'trailers4', -1, 22, 22, 920.8623, -3131.629, 7.886256, -0.1412736, -320.7639, 6279.229, 30.49434, 4000, 5000, 0], ['Промышленные запчасти', 'Ron Altermates', 'trailers4', -1, 22, 22, 916.9301, -3131.761, 7.886317, -0.1329617, 2502.833, 1590.544, 31.34343, 6000, 8000, 2], ['Стеклянные бутыли', 'Marlowe Vineyards', 'trailers4', -1, 22, 22, 912.7921, -3131.661, 7.886533, -0.1363786, -1922.218, 2040.834, 139.7354, 6000, 9000, 2], ['Холодильники', 'Big G Goods', 'trailers3', -1, 22, 22, 206.0463, 6413.322, 36.13994, 71.10689, 852.9171, -893.8719, 24.30501, 6000, 8000, 1], ['Телевизоры', 'Big G Goods', 'trailers3', -1, 22, 22, 207.6561, 6406.454, 36.21336, 74.7664, 852.9171, -893.8719, 24.30501, 4000, 6000, 0], ['Кондиционеры', 'Big G Goods', 'trailers3', -1, 22, 22, 206.2407, 6400.148, 36.21442, 76.8327, 852.9171, -893.8719, 24.30501, 4000, 6000, 0], ['Пылесосы', 'Big G Goods', 'trailers3', -1, 22, 22, 153.505, 6415.654, 36.06367, 72.98099, 852.9171, -893.8719, 24.30501, 4000, 6000, 0], ['Мелкая электроника', 'Big G Goods', 'trailers3', -1, 22, 22, 154.7085, 6421.937, 36.10425, 73.7582, 852.9171, -893.8719, 24.30501, 4000, 6000, 0], ['Мясо курицы', 'Casey`s Diner', 'trailers4', -1, 111, 111, 156.4525, 6428.218, 36.12923, 74.55115, 815.9142, -751.1782, 25.72773, 4000, 6000, 0], ['Овощи', 'Casey`s Diner', 'trailers4', -1, 111, 111, 189.7944, 6398.132, 33.37423, -36.57656, 815.9142, -751.1782, 25.72773, 4000, 6000, 0], ['Напитки, Соусы, Специи', 'Casey`s Diner', 'trailers4', -1, 111, 111, 184.9497, 6404.586, 33.25052, -42.45322, 815.9142, -751.1782, 25.72773, 4000, 6000, 0], ['Руда', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, 2690.716, 2766.582, 39.8646, -154.954, 1063.619, -1976.263, 30.01464, 3000, 5000, 0], ['Спец. оборудование', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, -266.5271, 6038.696, 36.51969, 41.36288, 1063.619, -1976.263, 30.01464, 6000, 8000, 1], ['Спец. форма', 'Grand Banks Steel Foundry', 'trailers4', -1, 45, 45, -271.523, 6034.542, 36.54815, 41.63, 1063.619, -1976.263, 30.01464, 5000, 7000, 1], ['Мясо', 'Poppy House', 'trailers4', -1, 22, 22, 206.0463, 6413.322, 36.13994, 71.10689, -677.1989, -2232.371, 4.805035, 4000, 6000, 0], ['Мучная продукция', 'Poppy House', 'trailers4', -1, 22, 22, 207.6561, 6406.454, 36.21336, 74.7664, -677.1989, -2232.371, 4.805035, 4000, 6000, 0], ['Овощи, Фрукты', 'Poppy House', 'trailers4', -1, 22, 22, 206.2407, 6400.148, 36.21442, 76.8327, -677.1989, -2232.371, 4.805035, 4000, 6000, 0], ['Алкоголь', 'Poppy House', 'trailers4', -1, 22, 22, 153.505, 6415.654, 36.06367, 72.98099, -677.1989, -2232.371, 4.805035, 6000, 8000, 1], ['Инструменты', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 154.7085, 6421.937, 36.10425, 73.7582, 311.9481, 2836.621, 42.43604, 2000, 4000, 0], ['Рабочая форма', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 156.4525, 6428.218, 36.12923, 74.55115, 311.9481, 2836.621, 42.43604, 3000, 5000, 1], ['Масло', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 189.7944, 6398.132, 33.37423, -36.57656, 311.9481, 2836.621, 42.43604, 2000, 4000, 0], ['Промышленные запчасти', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 184.9497, 6404.586, 33.25052, -42.45322, 311.9481, 2836.621, 42.43604, 3000, 5000, 1], ['Сырье', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 2737.644, 2785.899, 37.71816, 149.5001, 311.9481, 2836.621, 42.43604, 2000, 4000, 0], ['Глина', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 2683.694, 2762.888, 39.86467, -141.72, 311.9481, 2836.621, 42.43604, 2000, 4000, 0], ['Известняк', 'Stoner Cement Works', 'trailers4', -1, 22, 22, 2690.716, 2766.582, 39.8646, -154.954, 311.9481, 2836.621, 42.43604, 2000, 4000, 0], ['Зеркала', 'Maibatsu Corporation', 'trailers4', -1, 22, 22, 206.0463, 6413.322, 36.13994, 71.10689, 872.0898, -928.1226, 25.26202, 4000, 6000, 0], ['Двери', 'Maibatsu Corporation', 'trailers4', -1, 22, 22, 207.6561, 6406.454, 36.21336, 74.7664, 872.0898, -928.1226, 25.26202, 4000, 6000, 0], ['Рамы', 'Maibatsu Corporation', 'trailers4', -1, 22, 22, 206.2407, 6400.148, 36.21442, 76.8327, 872.0898, -928.1226, 25.26202, 4000, 6000, 0], ['Бампера', 'Maibatsu Corporation', 'trailers4', -1, 22, 22, 153.505, 6415.654, 36.06367, 72.98099, 872.0898, -928.1226, 25.26202, 4000, 6000, 0], ['Покрышки', 'Maibatsu Corporation', 'trailers4', -1, 22, 22, 154.7085, 6421.937, 36.10425, 73.7582, 872.0898, -928.1226, 25.26202, 4000, 6000, 0], ['Молоко', 'Los Santos Bag Co.', 'trailers4', -1, 22, 22, 2292.037, 4963.962, 43.46063, 6.282423, 726.5454, -1370.158, 25.33632, 3000, 4000, 0], ['Сливки', 'Los Santos Bag Co.', 'trailers4', -1, 22, 22, 2298.302, 4958.613, 43.36128, 12.12335, 726.5454, -1370.158, 25.33632, 3000, 4000, 0], ['Мясо', 'Los Santos Bag Co.', 'trailers4', -1, 22, 22, 2347.503, 4916.026, 44.25377, -132.9075, 726.5454, -1370.158, 25.33632, 3000, 4000, 0], ['Сыр', 'Los Santos Bag Co.', 'trailers4', -1, 22, 22, 2363.196, 4900.186, 44.18229, -124.0036, 726.5454, -1370.158, 25.33632, 3000, 4000, 0], ['Ткани', 'Soyler Textile', 'trailers4', -1, 22, 22, 156.4525, 6428.218, 36.12923, 74.55115, 784.0717, -1308.052, 25.21136, 4000, 6000, 0], ['Швейные машинки', 'Soyler Textile', 'trailers4', -1, 22, 22, 189.7944, 6398.132, 33.37423, -36.57656, 784.0717, -1308.052, 25.21136, 5000, 7000, 1], ['Ячмень', 'Pißwasser', 'trailers4', -1, 22, 22, 2912.875, 4368.864, 52.39073, -22.41004, 836.5078, -1934.542, 27.96545, 3000, 5000, 0], ['Солод', 'Pißwasser', 'trailers4', -1, 22, 22, 2902.351, 4373.794, 52.36802, -61.3377, 836.5078, -1934.542, 27.96545, 3000, 5000, 0], ['Хмель', 'Pißwasser', 'trailers4', -1, 22, 22, 2896.262, 4382.128, 52.36691, -69.65624, 836.5078, -1934.542, 27.96545, 3000, 5000, 0], ['Говядина', 'Raven Slaughterhouse', 'trailers4', -1, 22, 22, 2321.248, 4939.375, 43.72384, -134.7338, 953.5356, -2185.527, 29.55155, 3000, 5000, 0], ['Свинина', 'Raven Slaughterhouse', 'trailers4', -1, 22, 22, 2013.061, 4982.458, 43.24927, -129.1734, 953.5356, -2185.527, 29.55155, 3000, 5000, 0], ['Курятина', 'Raven Slaughterhouse', 'trailers4', -1, 22, 22, 2407.804, 4994.865, 48.47814, 156.9169, 953.5356, -2185.527, 29.55155, 3000, 5000, 0], ['Сено', 'Raven Slaughterhouse', 'trailers4', -1, 22, 22, 2302.451, 4887.973, 43.79603, 31.16794, 953.5356, -2185.527, 29.55155, 3000, 5000, 0], ['Кукуруза', 'Central Milling Company', 'trailers4', -1, 22, 22, 2900.982, 4392.718, 52.29999, -111.9604, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Гречка', 'Central Milling Company', 'trailers4', -1, 22, 22, 2912.875, 4368.864, 52.39073, -22.41004, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Пшено', 'Central Milling Company', 'trailers4', -1, 22, 22, 2902.351, 4373.794, 52.36802, -61.3377, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Кускус', 'Central Milling Company', 'trailers4', -1, 22, 22, 2896.262, 4382.128, 52.36691, -69.65624, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Ячка', 'Central Milling Company', 'trailers4', -1, 22, 22, 2900.982, 4392.718, 52.29999, -111.9604, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Говядина', 'Central Milling Company', 'trailers4', -1, 22, 22, 2321.248, 4939.375, 43.72384, -134.7338, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Свинина', 'Central Milling Company', 'trailers4', -1, 22, 22, 2013.061, 4982.458, 43.24927, -129.1734, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Курятина', 'Central Milling Company', 'trailers4', -1, 22, 22, 2407.804, 4994.865, 48.47814, 156.9169, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Яблоки', 'Central Milling Company', 'trailers4', -1, 22, 22, 2302.451, 4887.973, 43.79603, 31.16794, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Молоко', 'Central Milling Company', 'trailers4', -1, 22, 22, 2302.451, 4887.973, 43.79603, 31.16794, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Картофель', 'Central Milling Company', 'trailers4', -1, 22, 22, 2302.451, 4887.973, 43.79603, 31.16794, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Помидоры', 'Central Milling Company', 'trailers4', -1, 22, 22, 2302.451, 4887.973, 43.79603, 31.16794, 827.181, -2354.927, 29.33402, 3000, 5000, 0], ['Автомобили', 'Premium Deluxe Motorsport', 'tr4', -1, 22, 22, -895.5137, -2734.371, 14.07851, -32.98008, -37.95431, -1078.59, 25.6494, 7000, 9000, 1], ['Автомобили', 'Luxory Autos', 'tr4', -1, 22, 22, -889.3263, -2737.592, 14.07842, -17.63494, -766.8812, -245.1683, 36.24875, 7000, 9000, 1]],
  offersPool1: [],
  offersPool2: [],
  offersPool3: [],
  generateOffer: function (type) {
    try {
      let offers = [];
      let offersForRandom = [];

      switch (type) {
        case 1:
          offers = trucker.w1;
          offersForRandom = trucker.w1;
          break;

        case 2:
          offers = trucker.w2;
          offersForRandom = trucker.w2;
          break;

        case 3:
          offers = trucker.w3;
          offersForRandom = trucker.w3;
          break;
      }

      let rare = 0;
      if (_methods.methods.getRandomInt(0, 100) < 30) rare = 1;
      if (_methods.methods.getRandomInt(0, 100) < 5) rare = 2;
      offersForRandom = offers.filter(item => {
        switch (type) {
          case 1:
          case 2:
            return item[10] == rare;

          case 3:
            return item[15] == rare;
        }
      });

      if (offersForRandom.length > 1) {
        let item = offersForRandom[_methods.methods.getRandomInt(0, offersForRandom.length)];

        switch (type) {
          case 1:
            {
              let price = _methods.methods.parseInt(_methods.methods.getRandomInt(item[8], item[9]));

              trucker.offersPool1.push([count, item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], price]);
              break;
            }

          case 2:
            {
              let price = _methods.methods.parseInt(_methods.methods.getRandomInt(item[8], item[9]) * 0.8);

              trucker.offersPool2.push([count, item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], price]);
              break;
            }

          case 3:
            {
              let price = _methods.methods.parseInt(_methods.methods.getRandomInt(item[13], item[14]) * 0.8);

              trucker.offersPool3.push([count, item[0], item[1], item[2], item[3], item[4], item[5], item[6], item[7], item[8], item[9], item[10], item[11], item[12], price]);
              break;
            }
        }

        count++;
      }
    } catch (e) {
      _methods.methods.debug(e);

      _methods.methods.saveLog('TruckerError', e.toString());
    }
  },
  acceptOffer: function (player, offerId) {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.has(player, 'isStartTrucker')) {
      trucker.notify(player, 'Вы уже выполняете заказ', '~r~Ошибка');
      return;
    }

    if (trucker.has('accept' + offerId)) {
      trucker.notify(player, 'Данный заказ уже был принят', '~r~Ошибка');
      return;
    }

    let offer = trucker.getOffer(offerId);

    if (offer == null) {
      trucker.notify(player, 'Данный заказ уже был принят', '~r~Ошибка');
      return;
    }

    try {
      trucker.set('accept' + offerId, _user.user.getId(player));

      _methods.methods.notifyWithPictureToJob(_user.user.getRpName(player), `Статус заказа`, `~y~Принял заказ ~s~#${offerId}.\n~y~Заказчик:~s~ ${offer[2]}`, 'DIA_DRIVER', _user.user.get(player, 'job'));

      _user.user.set(player, 'isStartTrucker', true);

      if (offer.length == 10) player.call('client:trucker:acceptOffer1', offer);else player.call('client:trucker:acceptOffer2', offer);
    } catch (e) {
      _methods.methods.debug(e);

      _methods.methods.saveLog('TruckerError', e.toString());
    }
  },
  doneOffer: function (player, offerId) {
    if (!_user.user.isLogin(player)) return;

    if (!player.vehicle) {
      trucker.notify(player, 'Вы должны находиться в транспорте', '~r~Ошибка');
      return;
    }

    let offer = trucker.getOffer(offerId);

    if (offer == null) {
      _user.user.reset(player, 'isStartTrucker');

      trucker.notify(player, 'Данного заказа не существует', '~r~Ошибка');
      return;
    }

    let price = offer[offer.length - 1];

    _user.user.reset(player, 'isStartTrucker');

    if (offer.length == 10) {
      trucker.notify(player, 'Вы доставили груз', 'Доставка');

      _user.user.giveJobSkill(player);

      _user.user.giveJobMoney(player, price);

      if (_user.user.get(player, 'job') == 'trucker2') {
        _business.business.addMoney(159, _methods.methods.parseInt(price * 0.1));

        _business.business.addMoney(160, _methods.methods.parseInt(price * 0.1));

        _business.business.addMoney(161, _methods.methods.parseInt(price * 0.1));
      }
    } else {
      let trailerId = player.vehicle.getVariable('trailer');

      if (!trailerId) {
        trucker.notify(player, '~r~У Вас нет прицепа');
        trucker.removeOffer(offerId);
        return;
      }

      let trailer = mp.vehicles.at(player.vehicle.getVariable('trailer'));

      if (!_vehicles.vehicles.exists(trailer)) {
        trucker.removeOffer(offerId);
        return;
      }

      if (trailer.getVariable('trId') != offerId) {
        trucker.notify(player, '~r~Вы привезли другой заказ');

        _vehicles.vehicles.respawn(trailer);

        trucker.removeOffer(offerId);
        return;
      }

      let heal = trailer.bodyHealth / 1000;
      trucker.notify(player, 'Вы доставили груз', 'Доставка');
      player.notify(`~b~Состояние вашего груза: ~s~${heal * 100}%`);
      if (heal * 100 < 100) player.notify(`~y~Штраф: ~s~$${_methods.methods.numberFormat(price - price * heal)}`);
      let bonus = 0;

      if (_user.user.get(player, 'skill_trucker') == 1500) {
        bonus = _methods.methods.parseInt(price * heal * 0.25);
        player.notify(`~g~Бонус: ~s~$${_methods.methods.numberFormat(bonus)}`);
      }

      _business.business.addMoney(159, _methods.methods.parseInt(price * 0.1));

      _business.business.addMoney(160, _methods.methods.parseInt(price * 0.1));

      _business.business.addMoney(161, _methods.methods.parseInt(price * 0.1));

      _vehicles.vehicles.respawn(trailer);

      _user.user.giveJobSkill(player);

      _user.user.giveJobMoney(player, price * heal + bonus);
    }

    trucker.removeOffer(offerId);
  },
  stop: function (player, offerId) {
    if (!_user.user.isLogin(player)) return;

    _user.user.reset(player, 'isStartTrucker');

    if (!player.vehicle) {
      trucker.notify(player, 'Вы должны находиться в транспорте', '~r~Ошибка');
      return;
    }

    let offer = trucker.getOffer(offerId);
    if (offer == null) return;
    let trailerId = player.vehicle.getVariable('trailer');

    if (!trailerId) {
      trucker.removeOffer(offerId);
      return;
    }

    let trailer = mp.vehicles.at(player.vehicle.getVariable('trailer'));

    if (!_vehicles.vehicles.exists(trailer)) {
      trucker.removeOffer(offerId);
      return;
    }

    _vehicles.vehicles.respawn(trailer);

    trucker.removeOffer(offerId);
  },
  trySpawnTrailer: function (player, offerId) {
    if (!_user.user.isLogin(player)) return;
    let offer = trucker.getOffer(offerId);

    if (offer == null) {
      trucker.notify(player, 'Данного заказа не существует', '~r~Ошибка');
      return;
    }

    let id = offer[0];
    let name = offer[1];
    let company = offer[2];
    let model = offer[3];
    let liv = offer[4];
    let cl1 = offer[5];
    let cl2 = offer[6];
    let x = offer[7];
    let y = offer[8];
    let z = offer[9];
    let rot = offer[10];

    if (_methods.methods.getListOfVehicleInRadius(new mp.Vector3(x, y, z), 5).length >= 1) {
      player.call('client:jobs:trucker:isSpawn', [false]);
      return;
    }

    _vehicles.vehicles.spawnCar2(veh => {
      if (_vehicles.vehicles.exists(veh)) {
        veh.setVariable('trCompany', company);
        veh.setVariable('trName', name);
        veh.setVariable('trId', id);
        veh.setVariable('trOwner', _user.user.getId(player));
      }

      player.call('client:jobs:trucker:isSpawn', [_vehicles.vehicles.exists(veh)]);
    }, new mp.Vector3(x, y, z - 1), rot, model, cl1, cl2, liv);
  },
  notify: function (player, text, title = 'Информация') {
    _methods.methods.debug('trucker.notify');

    if (!_user.user.isLogin(player)) return;
    player.notifyWithPicture(title, 'Грузоперевозки', text, 'DIA_DRIVER', 2);
  },
  removeOffer: function (offerId) {
    trucker.offersPool1 = trucker.offersPool1.filter(item => {
      return item[0] != offerId;
    });
    trucker.offersPool2 = trucker.offersPool2.filter(item => {
      return item[0] != offerId;
    });
    trucker.offersPool3 = trucker.offersPool3.filter(item => {
      return item[0] != offerId;
    });
  },
  getOffer: function (offerId) {
    let result1 = trucker.offersPool1.find(item => {
      return item[0] == offerId;
    });
    let result2 = trucker.offersPool2.find(item => {
      return item[0] == offerId;
    });
    let result3 = trucker.offersPool3.find(item => {
      return item[0] == offerId;
    });
    if (result1 !== undefined) return result1;
    if (result2 !== undefined) return result2;
    if (result3 !== undefined) return result3;
    return null;
  },
  generateOfferStart: function (count = 10) {
    try {
      for (let i = 0; i < count * 2; i++) trucker.generateOffer(1);

      for (let i = 0; i < count; i++) trucker.generateOffer(2);

      for (let i = 0; i < count; i++) trucker.generateOffer(3);
    } catch (e) {
      _methods.methods.debug(e);

      _methods.methods.saveLog('TruckerError', e.toString());
    }
  },
  generateOfferByType: function (count = 10, type) {
    try {
      for (let i = 0; i < count; i++) trucker.generateOffer(type);
    } catch (e) {
      _methods.methods.debug(e);

      _methods.methods.saveLog('TruckerError', e.toString());
    }
  },
  loadAll: function () {
    _methods.methods.debug('trucker.loadAll');

    trucker.generateOfferStart(50);
    trucker.w1.forEach(item => {
      if (item.length != 11) _methods.methods.debug('w1', item);
    });
    trucker.w2.forEach(item => {
      if (item.length != 11) _methods.methods.debug('w2', item);
    });
    trucker.w3.forEach(item => {
      if (item.length != 16) _methods.methods.debug('w3', item);
    });
    setInterval(trucker.poolCleaner, 60000 * 60);
  },
  poolChecker: function () {
    _methods.methods.debug('trucker.poolChecker');

    trucker.generateOfferStart(20);
  },
  poolCleaner: function () {
    _methods.methods.debug('trucker.poolCleaner');

    _methods.methods.saveLog('Trucker', `poolCleaner = ${trucker.offersPool1.length} | ${trucker.offersPool2.length} | ${trucker.offersPool3.length}`);

    trucker.offersPool1 = trucker.offersPool1.filter(item => {
      try {
        return trucker.has('accept' + item[0]);
      } catch (e) {
        _methods.methods.debug(e);

        _methods.methods.saveLog('TruckerError', e.toString());

        return false;
      }
    });
    trucker.offersPool2 = trucker.offersPool2.filter(item => {
      try {
        return trucker.has('accept' + item[0]);
      } catch (e) {
        _methods.methods.debug(e);

        _methods.methods.saveLog('TruckerError', e.toString());

        return false;
      }
    });
    trucker.offersPool3 = trucker.offersPool3.filter(item => {
      try {
        return trucker.has('accept' + item[0]);
      } catch (e) {
        _methods.methods.debug(e);

        _methods.methods.saveLog('TruckerError', e.toString());

        return false;
      }
    });

    _methods.methods.saveLog('Trucker', `poolCleaner1 = ${trucker.offersPool1.length} | ${trucker.offersPool2.length} | ${trucker.offersPool3.length}`);

    trucker.generateOfferStart(30);
  },
  showMenu: function (player) {
    if (!_user.user.isLogin(player)) return;

    _methods.methods.debug('trucker.showMenu');

    switch (_user.user.get(player, 'job')) {
      case 'trucker1':
        let tr1 = trucker.offersPool1.filter(item => {
          try {
            return !trucker.has('accept' + item[0]);
          } catch (e) {
            _methods.methods.saveLog('TruckerError', e.toString());

            return false;
          }
        });

        _methods.methods.saveLog('Trucker', `showMenu1 = ${tr1.length}`);

        player.call('client:menuList:showTruckerOffersMenu', [tr1]);
        if (tr1.length < 20) trucker.generateOfferByType(40, 1);
        break;

      case 'trucker2':
        let tr2 = trucker.offersPool2.filter(item => {
          try {
            return !trucker.has('accept' + item[0]);
          } catch (e) {
            _methods.methods.saveLog('TruckerError', e.toString());

            return false;
          }
        });

        _methods.methods.saveLog('Trucker', `showMenu2 = ${tr2.length}`);

        player.call('client:menuList:showTruckerOffersMenu', [tr2]);
        if (tr2.length < 20) trucker.generateOfferByType(40, 2);
        break;

      case 'trucker3':
        let tr3 = trucker.offersPool3.filter(item => {
          try {
            return !trucker.has('accept' + item[0]);
          } catch (e) {
            _methods.methods.saveLog('TruckerError', e.toString());

            return false;
          }
        });

        _methods.methods.saveLog('Trucker', `showMenu3 = ${tr3.length}`);

        player.call('client:menuList:showTruckerOffersMenu', [tr3]);
        if (tr3.length < 20) trucker.generateOfferByType(40, 3);
        break;
    }
  },
  set: function (key, val) {
    _data.Container.Set(truckerContainer, truckerContainerPrefix + key, val);
  },
  reset: function (key) {
    _data.Container.Reset(truckerContainer, truckerContainerPrefix + key);
  },
  has: function (key) {
    try {
      return _data.Container.Has(truckerContainer, truckerContainerPrefix + key);
    } catch (e) {
      _methods.methods.debug(e);
    }

    return false;
  },
  get: function (key) {
    try {
      return _data.Container.Get(truckerContainer, truckerContainerPrefix + key);
    } catch (e) {
      _methods.methods.debug(e);
    }

    return null;
  }
};
exports.trucker = trucker;
let truckerContainer = -1000;
let truckerContainerPrefix = 'trucker';
mp.events.add("trailerAttached", (vehicle, trailer) => {
  if (_vehicles.vehicles.exists(vehicle) && _vehicles.vehicles.exists(trailer)) vehicle.setVariable('trailer', trailer.id);else if (_vehicles.vehicles.exists(vehicle)) vehicle.setVariable('trailer', undefined);
});
},{"../user":"QE3B","../modules/methods":"qXSp","../modules/data":"Edcz","../business":"y5vZ","../vehicles":"pYYy"}],"hwMc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mafiaWar = void 0;

var _methods = require("../modules/methods");

var _data = require("../modules/data");

var _user = require("../user");

var _weather = require("./weather");

var _tablet = require("./tablet.events");

var _mafiaData = require("../../util/mafiaData");

var _mafiaWarEntity = require("../modules/entity/mafiaWarEntity");

let offset = 500000;
let keyPrefix = 'mafiaWar';
let isStartTimer1 = false;
let timerCounter1 = 0;
let warPos1 = new mp.Vector3(34.23244857788086, -2711.05078125, 4.38362455368042);
let warPosRadius1 = 50;
let isStartTimer2 = false;
let timerCounter2 = 0;
let warPos2 = new mp.Vector3(-552.1932983398438, -1656.835205078125, 18.24129867553711);
let warPosRadius2 = 70;
let isStartTimer3 = false;
let timerCounter3 = 0;
let warPos3 = new mp.Vector3(2106.784423828125, 4790.55029296875, 40.13631820678711);
let warPosRadius3 = 50;
let lcn1 = 0;
let rm1 = 0;
let trd1 = 0;
let lme1 = 0;
let lcn2 = 0;
let rm2 = 0;
let trd2 = 0;
let lme2 = 0;
let lcn3 = 0;
let rm3 = 0;
let trd3 = 0;
let lme3 = 0;
let mafiaWar = {
  loadAll: function () {
    _methods.methods.debug('mafiaWar.loadAll');

    _mafiaWarEntity.mafiaWarEntity.findAll().then(rows => {
      rows.forEach(row => {
        mafiaWar.set(row['id'], 'ownerId', row['owner_id']);
        mafiaWar.set(row['id'], 'canWar', true);
        mafiaWar.set(row['id'], 'money', row['money']);
      });
    });

    let givedmoney = false;
    setInterval(() => {
      if (givedmoney) return;
      let d = new Date();
      let used = d.getHours() == 0 && d.getMinutes() == 2;

      if (used) {
        givedmoney = true;
        setTimeout(() => {
          givedmoney = false;
        }, 120000);
        mafiaWar.saveMoney(1, mafiaWar.get(1, 'money') + _mafiaData.mafiaTerritoriesData[0].cost);
        mafiaWar.saveMoney(2, mafiaWar.get(2, 'money') + _mafiaData.mafiaTerritoriesData[1].cost);
        mafiaWar.saveMoney(3, mafiaWar.get(3, 'money') + _mafiaData.mafiaTerritoriesData[2].cost);
      }
    }, 5000);
  },
  save: function (id, ownerId) {
    _methods.methods.debug('mafiaWar.save');

    mafiaWar.set(id, 'ownerId', ownerId);

    _mafiaWarEntity.mafiaWarEntity.update({
      owner_id: ownerId
    }, {
      where: {
        id: id
      }
    });
  },
  saveMoney: function (id, money) {
    _methods.methods.debug('mafiaWar.saveMoney');

    mafiaWar.set(id, 'money', money);

    _mafiaWarEntity.mafiaWarEntity.update({
      money: money
    }, {
      where: {
        id: id
      }
    });
  },
  getZoneId: function (position) {
    _methods.methods.debug('mafiaWar.getZoneId');

    if (_methods.methods.distanceToPos(position, warPos1) < warPosRadius1) return 1;
    if (_methods.methods.distanceToPos(position, warPos2) < warPosRadius2) return 2;
    if (_methods.methods.distanceToPos(position, warPos3) < warPosRadius3) return 3;
    return 0;
  },
  takeBank: function (player, id, sum) {
    _methods.methods.debug('mafiaWar.takeBank');

    if (!_user.user.isLogin(player)) return;

    if (mafiaWar.get(id, 'money') < sum) {
      player.notify('~r~Такой суммы нет на счету');
      return;
    }

    let zoneId = mafiaWar.getZoneId(player.position);

    if (zoneId == id) {
      mafiaWar.saveMoney(id, mafiaWar.get(id, 'money') - sum);
      player.notify('~y~Вы сняли деньги со счета территории');

      _user.user.addMoney(player, sum);

      _tablet.tablet.openMafiaTer(player);
    } else {
      player.notify('~r~Необходимо находиться на территории');
    }
  },
  startWar: function (player) {
    _methods.methods.debug('mafiaWar.startWar');

    if (!_user.user.isLogin(player)) return;
    let id = mafiaWar.getZoneId(player.position);

    if (id == 0) {
      player.notify('~r~Вы слишком далеко от какой либо территории');
      return;
    }

    if (!mafiaWar.get(id, 'canWar')) {
      player.notify('~r~Захват этой территории будет доступен завтра');
      return;
    }

    if (_weather.weather.getHour() < 20 && _weather.weather.getHour() > 8) {
      player.notify('~r~Доступно только с 20 до 8 утра IC времени');
      return;
    }

    let ownerId = mafiaWar.get(id, 'ownerId');
    let dateTime = new Date();

    if (ownerId > 0) {
      if (dateTime.getDate() % 3) {
        player.notify('~r~Доступно каждые 3 дня (ООС)');
        player.notify('~r~А именно: 3, 6, 9, 12, 15, 18, 21, 24, 27, 30 число на календаре');
        return;
      }
    }

    if (dateTime.getHours() < 20) {
      player.notify('~r~Доступно только с 20 до 24 ночи ООС времени');
      return;
    }

    switch (id) {
      case 1:
        if (isStartTimer1) {
          player.notify('~r~В данный момент территория захватывается');
          return;
        }

        isStartTimer1 = true;
        timerCounter1 = 900;

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Элизиан Айленд', 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Элизиан Айленд', 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Элизиан Айленд', 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Элизиан Айленд', 'CHAR_DEFAULT', 11);

        break;

      case 2:
        if (isStartTimer2) {
          player.notify('~r~В данный момент территория захватывается');
          return;
        }

        isStartTimer2 = true;
        timerCounter2 = 900;

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Ла Пуэрта', 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Ла Пуэрта', 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Ла Пуэрта', 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Ла Пуэрта', 'CHAR_DEFAULT', 11);

        break;

      case 3:
        if (isStartTimer3) {
          player.notify('~r~В данный момент территория захватывается');
          return;
        }

        isStartTimer3 = true;
        timerCounter3 = 900;

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Грейпсид Аэропорт', 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Грейпсид Аэропорт', 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Грейпсид Аэропорт', 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Война за территорию', `Организация`, 'Начался захват территории ~y~Грейпсид Аэропорт', 'CHAR_DEFAULT', 11);

        break;
    }

    return true;
  },
  timer: function () {
    if (isStartTimer1) {
      timerCounter1--;

      if (timerCounter1 % 30 == 0) {
        mp.players.forEachInRange(warPos1, warPosRadius1, p => {
          if (_user.user.get(p, 'rank') > 1) {
            if (p.health == 0) return;
            if (_user.user.isLaEme(p)) lme1++;
            if (_user.user.isRussianMafia(p)) rm1++;
            if (_user.user.isYakuza(p)) trd1++;
            if (_user.user.isCosaNostra(p)) lcn1++;
          }
        });
      }

      if (timerCounter1 < 1) {
        timerCounter1 = 0;
        isStartTimer1 = false;
        let zoneId = mafiaWar.getZoneId(warPos1);
        let ownerId = mafiaWar.getMaxCounterFractionId(lme1, rm1, trd1, lcn1);

        let fractionName = _methods.methods.getMafiaName(ownerId);

        mafiaWar.save(zoneId, ownerId);
        mafiaWar.set(zoneId, 'ownerId', ownerId);
        mafiaWar.set(zoneId, 'canWar', false);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Элизиан Айленд`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Элизиан Айленд`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Элизиан Айленд`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Элизиан Айленд`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 11);
      }

      mp.players.callInRange(warPos1, warPosRadius1, "client:mafiaWar:sendInfo", [lme1, rm1, trd1, lcn1, timerCounter1]);
    }

    if (isStartTimer2) {
      timerCounter2--;

      if (timerCounter2 % 30 == 0) {
        mp.players.forEachInRange(warPos2, warPosRadius2, p => {
          if (_user.user.get(p, 'rank') > 1) {
            if (p.health == 0) return;
            if (_user.user.isLaEme(p)) lme2++;
            if (_user.user.isRussianMafia(p)) rm2++;
            if (_user.user.isYakuza(p)) trd2++;
            if (_user.user.isCosaNostra(p)) lcn2++;
          }
        });
      }

      if (timerCounter2 < 1) {
        timerCounter2 = 0;
        isStartTimer2 = false;
        let zoneId = mafiaWar.getZoneId(warPos2);
        let ownerId = mafiaWar.getMaxCounterFractionId(lme2, rm2, trd2, lcn2);

        let fractionName = _methods.methods.getMafiaName(ownerId);

        mafiaWar.save(zoneId, ownerId);
        mafiaWar.set(zoneId, 'ownerId', ownerId);
        mafiaWar.set(zoneId, 'canWar', false);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Ла Пуэрта`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Ла Пуэрта`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Ла Пуэрта`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Ла Пуэрта`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 11);
      }

      mp.players.callInRange(warPos2, warPosRadius2, "client:mafiaWar:sendInfo", [lme2, rm2, trd2, lcn2, timerCounter2]);
    }

    if (isStartTimer3) {
      timerCounter3--;

      if (timerCounter3 % 30 == 0) {
        mp.players.forEachInRange(warPos3, warPosRadius3, p => {
          if (!_user.user.isLogin(p)) return;

          if (_user.user.get(p, 'rank') > 1) {
            if (p.health == 0) return;
            if (_user.user.isLaEme(p)) lme3++;
            if (_user.user.isRussianMafia(p)) rm3++;
            if (_user.user.isYakuza(p)) trd3++;
            if (_user.user.isCosaNostra(p)) lcn3++;
          }
        });
      }

      if (timerCounter3 < 1) {
        timerCounter3 = 0;
        isStartTimer3 = false;
        let zoneId = mafiaWar.getZoneId(warPos3);
        let ownerId = mafiaWar.getMaxCounterFractionId(lme3, rm3, trd3, lcn3);

        let fractionName = _methods.methods.getMafiaName(ownerId);

        mafiaWar.save(zoneId, ownerId);
        mafiaWar.set(zoneId, 'ownerId', ownerId);
        mafiaWar.set(zoneId, 'canWar', false);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Грейпсид Аэропорт`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Грейпсид Аэропорт`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Грейпсид Аэропорт`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction('Итоги войны', `Грейпсид Аэропорт`, 'Территория под контролем ' + fractionName, 'CHAR_DEFAULT', 11);
      }

      mp.players.callInRange(warPos3, warPosRadius3, "client:mafiaWar:sendInfo", [lme3, rm3, trd3, lcn3, timerCounter3]);
    }

    setTimeout(mafiaWar.timer, 1000);
  },
  timerMoney: function () {},
  getMaxCounterFractionId: function (lme, rm, trd, lcn) {
    let maxValue = Math.max(lme, rm, trd, lcn);
    if (lme == maxValue) return 11;
    if (rm == maxValue) return 8;
    if (trd == maxValue) return 10;
    if (lcn == maxValue) return 9;
    return 0;
  },
  set: function (id, key, val) {
    _data.Container.Set(offset + _methods.methods.parseInt(id), keyPrefix + key, val);
  },
  reset: function (id, key) {
    _data.Container.Reset(offset + _methods.methods.parseInt(id), keyPrefix + key);
  },
  get: function (id, key) {
    return _data.Container.Get(offset + _methods.methods.parseInt(id), keyPrefix + key);
  },
  has: function (id, key) {
    return _data.Container.Has(offset + _methods.methods.parseInt(id), keyPrefix + key);
  }
};
exports.mafiaWar = mafiaWar;
setTimeout(() => {
  mafiaWar.timer();
}, 30000);
},{"../modules/methods":"qXSp","../modules/data":"Edcz","../user":"QE3B","./weather":"uehX","./tablet.events":"Fdqv","../../util/mafiaData":"nT9M","../modules/entity/mafiaWarEntity":"GUii"}],"Dmc2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const slotMachinesMeta = [{
  type: 4,
  position: new mp.Vector3(1100.483, 230.4082, -50.8409),
  heading: 45
}, {
  type: 5,
  position: new mp.Vector3(1100.939, 231.0017, -50.8409),
  heading: 60
}, {
  type: 6,
  position: new mp.Vector3(1101.221, 231.6943, -50.8409),
  heading: 75
}, {
  type: 7,
  position: new mp.Vector3(1101.323, 232.4321, -50.8409),
  heading: 90
}, {
  type: 8,
  position: new mp.Vector3(1101.229, 233.1719, -50.8409),
  heading: 105
}, {
  type: 1,
  position: new mp.Vector3(1108.938, 239.4797, -50.8409),
  heading: -45
}, {
  type: 2,
  position: new mp.Vector3(1109.536, 239.0278, -50.8409),
  heading: -30
}, {
  type: 3,
  position: new mp.Vector3(1110.229, 238.7428, -50.8409),
  heading: -15
}, {
  type: 4,
  position: new mp.Vector3(1110.974, 238.642, -50.8409),
  heading: 0
}, {
  type: 5,
  position: new mp.Vector3(1111.716, 238.7384, -50.8409),
  heading: 15
}, {
  type: 6,
  position: new mp.Vector3(1112.407, 239.0216, -50.8409),
  heading: 30
}, {
  type: 7,
  position: new mp.Vector3(1112.999, 239.4742, -50.8409),
  heading: 45
}, {
  type: 1,
  position: new mp.Vector3(1120.853, 233.1621, -50.8409),
  heading: -105
}, {
  type: 2,
  position: new mp.Vector3(1120.753, 232.4272, -50.8409),
  heading: -90
}, {
  type: 3,
  position: new mp.Vector3(1120.853, 231.6886, -50.8409),
  heading: -75
}, {
  type: 4,
  position: new mp.Vector3(1121.135, 230.9999, -50.8409),
  heading: -60
}, {
  type: 5,
  position: new mp.Vector3(1121.592, 230.4106, -50.8409),
  heading: -45
}, {
  type: 4,
  position: new mp.Vector3(1104.572, 229.4451, -50.8409),
  heading: -36
}, {
  type: 5,
  position: new mp.Vector3(1104.302, 230.3183, -50.8409),
  heading: -108
}, {
  type: 1,
  position: new mp.Vector3(1105.049, 230.845, -50.8409),
  heading: 180
}, {
  type: 2,
  position: new mp.Vector3(1105.781, 230.2973, -50.8409),
  heading: 108
}, {
  type: 3,
  position: new mp.Vector3(1105.486, 229.4322, -50.8409),
  heading: 36
}, {
  type: 7,
  position: new mp.Vector3(1108.005, 233.9177, -50.8409),
  heading: -36
}, {
  type: 8,
  position: new mp.Vector3(1107.735, 234.7909, -50.8409),
  heading: -108
}, {
  type: 4,
  position: new mp.Vector3(1108.482, 235.3176, -50.8409),
  heading: 180
}, {
  type: 5,
  position: new mp.Vector3(1109.214, 234.7699, -50.8409),
  heading: 108
}, {
  type: 6,
  position: new mp.Vector3(1108.919, 233.9048, -50.8409),
  heading: 36
}, {
  type: 4,
  position: new mp.Vector3(1113.64, 233.6755, -50.8409),
  heading: -36
}, {
  type: 5,
  position: new mp.Vector3(1113.37, 234.5486, -50.8409),
  heading: -108
}, {
  type: 1,
  position: new mp.Vector3(1114.117, 235.0753, -50.8409),
  heading: 180
}, {
  type: 2,
  position: new mp.Vector3(1114.848, 234.5277, -50.8409),
  heading: 108
}, {
  type: 3,
  position: new mp.Vector3(1114.554, 233.6625, -50.8409),
  heading: 36
}, {
  type: 7,
  position: new mp.Vector3(1116.662, 228.8896, -50.8409),
  heading: -36
}, {
  type: 8,
  position: new mp.Vector3(1116.392, 229.7628, -50.8409),
  heading: -108
}, {
  type: 4,
  position: new mp.Vector3(1117.139, 230.2895, -50.8409),
  heading: 180
}, {
  type: 5,
  position: new mp.Vector3(1117.871, 229.7419, -50.8409),
  heading: 108
}, {
  type: 6,
  position: new mp.Vector3(1117.576, 228.8767, -50.8409),
  heading: 36
}, {
  type: 8,
  position: new mp.Vector3(1129.64, 250.451, -52.0409),
  heading: 180
}, {
  type: 7,
  position: new mp.Vector3(1130.376, 250.3577, -52.0409),
  heading: 165
}, {
  type: 6,
  position: new mp.Vector3(1131.062, 250.0776, -52.0409),
  heading: 150
}, {
  type: 5,
  position: new mp.Vector3(1131.655, 249.6264, -52.0409),
  heading: 135
}, {
  type: 4,
  position: new mp.Vector3(1132.109, 249.0355, -52.0409),
  heading: 120
}, {
  type: 3,
  position: new mp.Vector3(1132.396, 248.3382, -52.0409),
  heading: 105
}, {
  type: 2,
  position: new mp.Vector3(1132.492, 247.5984, -52.0409),
  heading: 90
}, {
  type: 3,
  position: new mp.Vector3(1133.952, 256.1037, -52.0409),
  heading: -45
}, {
  type: 4,
  position: new mp.Vector3(1133.827, 256.9098, -52.0409),
  heading: -117
}, {
  type: 5,
  position: new mp.Vector3(1134.556, 257.2778, -52.0409),
  heading: 171
}, {
  type: 1,
  position: new mp.Vector3(1135.132, 256.699, -52.0409),
  heading: 99
}, {
  type: 2,
  position: new mp.Vector3(1134.759, 255.9734, -52.0409),
  heading: 27
}, {
  type: 6,
  position: new mp.Vector3(1138.195, 251.8611, -52.0409),
  heading: -45
}, {
  type: 7,
  position: new mp.Vector3(1138.07, 252.6677, -52.0409),
  heading: -117
}, {
  type: 8,
  position: new mp.Vector3(1138.799, 253.0363, -52.0409),
  heading: 171
}, {
  type: 4,
  position: new mp.Vector3(1139.372, 252.4563, -52.0409),
  heading: 99
}, {
  type: 5,
  position: new mp.Vector3(1139, 251.7306, -52.0409),
  heading: 27
}];
const typesMeta = {
  [1]: {
    bet: 100,
    model: 'vw_prop_casino_slot_01a'
  },
  [2]: {
    bet: 25,
    model: 'vw_prop_casino_slot_02a'
  },
  [3]: {
    bet: 25,
    model: 'vw_prop_casino_slot_03a'
  },
  [4]: {
    bet: 5,
    model: 'vw_prop_casino_slot_04a'
  },
  [5]: {
    bet: 500,
    model: 'vw_prop_casino_slot_05a'
  },
  [6]: {
    bet: 100,
    model: 'vw_prop_casino_slot_06a'
  },
  [7]: {
    bet: 500,
    model: 'vw_prop_casino_slot_07a'
  },
  [8]: {
    bet: 5,
    model: 'vw_prop_casino_slot_08a'
  }
};
const rulesMap = {
  [0]: [],
  [2]: [],
  [5]: [],
  [25]: ['6-6-6', '2-2-2'],
  [50]: ['1-1-1'],
  [75]: ['3-3-3'],
  [100]: ['7-7-7'],
  [250]: ['0-0-0'],
  [500]: ['4-4-4'],
  [1000]: ['5-5-5']
};
const rules = {
  '6-6-6': 25,
  '2-2-2': 25,
  '1-1-1': 25,
  '3-3-3': 25,
  '7-7-7': 25,
  '0-0-0': 25,
  '4-4-4': 25,
  '5-5-5': 25
};
const notWinNumbers = new Set();

for (let i = 0; i < 8; i++) {
  for (let j = 0; j < 8; j++) {
    for (let k = 0; k < 8; k++) {
      if (i === 4 || j === 4 || k === 4) {
        continue;
      }

      const numbers = [i, j, k];

      for (let i = 0; i < numbers.length; i++) {
        if (numbers[i] === 6) {
          numbers[i] = 2;
        }
      }

      if (numbers.every(number => numbers[0] === number)) {
        continue;
      }

      notWinNumbers.add(numbers.join('-'));
    }
  }
}

rulesMap[0] = [...notWinNumbers];

for (let i = 0; i < 8; i++) {
  for (let j = 0; j < 8; j++) {
    if (i !== 4 && j !== 4) {
      const keys = [`4-${i}-${j}`, `4-${j}-${i}`, `${i}-4-${j}`, `${j}-4-${i}`, `${i}-${j}-4`, `${j}-${i}-4`];
      rules[keys[0]] = 2;
      rules[keys[1]] = 2;
      rules[keys[2]] = 2;
      rules[keys[3]] = 2;
      rules[keys[4]] = 2;
      rules[keys[5]] = 2;
      rulesMap[2].push(keys[0]);
      rulesMap[2].push(keys[1]);
      rulesMap[2].push(keys[2]);
      rulesMap[2].push(keys[3]);
      rulesMap[2].push(keys[4]);
      rulesMap[2].push(keys[5]);
    } else if (i !== 4) {
      const keys = [`${i}-4-4`, `4-${i}-4`, `4-4-${i}`];
      rules[keys[0]] = 5;
      rules[keys[1]] = 5;
      rules[keys[2]] = 5;
      rulesMap[5].push(keys[0]);
      rulesMap[5].push(keys[1]);
      rulesMap[5].push(keys[2]);
    }
  }
}

const rulesPercentage = [{
  value: 0,
  pct: 1600
}, {
  value: 2,
  pct: 150
}, {
  value: 5,
  pct: 10
}, {
  value: 25,
  pct: 2
}, {
  value: 50,
  pct: 0
}, {
  value: 75,
  pct: 0
}, {
  value: 100,
  pct: 0
}, {
  value: 250,
  pct: 0
}, {
  value: 500,
  pct: 0
}, {
  value: 1000,
  pct: 0
}];
var _default = {
  slotMachinesMeta,
  typesMeta,
  rules,
  rulesMap,
  rulesPercentage
};
exports.default = _default;
},{}],"Rr1D":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressE = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _slotMachineData = _interopRequireDefault(require("./slotMachineData"));

var _user = require("../../user");

var _methods = require("../methods");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const vdist = (v1, v2, useZ = true) => {
  const diffY = v1.y - v2.y;
  const diffX = v1.x - v2.x;

  if (useZ) {
    const diffZ = v1.z - v2.z;
    return Math.sqrt(diffY * diffY + diffX * diffX + diffZ * diffZ);
  } else {
    return Math.sqrt(diffY * diffY + diffX * diffX);
  }
};

for (let i = 0; i < _slotMachineData.default.slotMachinesMeta.length; i++) {
  const slotMachineMeta = _slotMachineData.default.slotMachinesMeta[i];

  _methods.methods.createDynamicCheckpoint(slotMachineMeta.position, 'Нажмите ~g~Е~s~ чтобы сесть за автомат', player => {}, 2, 0, [0, 0, 0, 0]);
}

const generateWinNumbers = () => {
  const winNumbers = [Math.floor(Math.random() * 8), Math.floor(Math.random() * 8), Math.floor(Math.random() * 8)];

  for (let i = 0; i < winNumbers.length; i++) {
    if (winNumbers[i] === 6) {
      winNumbers[i] = 2;
    }
  }

  const winString = winNumbers.join('-');
  const rule = _slotMachineData.default.rules[winString];
  return {
    winNumbers,
    winString,
    rule,
    isWinBet: typeof rule === 'number'
  };
};

const generateWin = () => {
  const winActions = _lodash.default.shuffle(_lodash.default.flatMap(_slotMachineData.default.rulesPercentage, winAction => Array(winAction.pct).fill(winAction)));

  const winAction = winActions[Math.floor(Math.random() * winActions.length)];
  const winStrings = _slotMachineData.default.rulesMap[winAction.value];
  const winString = winStrings[Math.floor(Math.random() * winStrings.length)];
  const rule = _slotMachineData.default.rules[winString];
  return {
    winString,
    rule,
    isWinBet: typeof rule === 'number'
  };
};

mp.events.add('casino.slots.server.spin.request', (player, currentBet) => {
  const slotMachineMeta = _slotMachineData.default.slotMachinesMeta[player.currentSlotMachine];
  if (!slotMachineMeta) return;
  const slotMachineBetMeta = _slotMachineData.default.typesMeta[slotMachineMeta.type];
  const betBalance = slotMachineBetMeta.bet * currentBet;

  if (player.chipsBalance - betBalance < 0) {
    player.call('casino.slots.client.spin.response', [false, '', player.chipsBalance]);
    return;
  }

  _user.user.removeChips(player, betBalance);

  const {
    winString,
    rule,
    isWinBet
  } = generateWin();
  player.call('casino.slots.client.spin.response', [true, winString, player.chipsBalance]);
  const winBalance = betBalance * rule;
  player.slotMachinesCurrentState = 1;
  setTimeout(() => {
    if (player && mp.players.exists(player) && typeof player.currentSlotMachine === 'number') {
      if (isWinBet) {
        _user.user.addChips(player, winBalance);

        _user.user.log(player, "Casino", `выиграл в игровом автомате ${winBalance} фишек`);

        player.call('casino.slots.client.responseWin', [winBalance, player.chipsBalance]);
      } else {
        player.notify(`~o~Ты проиграл ${betBalance}`);
      }

      player.slotMachinesCurrentState = 0;
    }
  }, 5000);
});
mp.events.add('playerQuit', player => {
  if (typeof player.currentSlotMachine === 'number') {
    _slotMachineData.default.slotMachinesMeta[player.currentSlotMachine].player = null;
  }
});

const pressE = player => {
  if (typeof player.currentSlotMachine === 'number') {
    if (player.slotMachinesCurrentState === 1) {
      return true;
    }

    player.call('casino.slots.client.stop');
    const slotid = player.currentSlotMachine;
    setTimeout(() => {
      _slotMachineData.default.slotMachinesMeta[slotid].player = null;
    }, 5000);
    player.currentSlotMachine = null;
    player.exitCasinoWait = Date.now() + 2000;
    return true;
  }

  if (player.exitCasinoWait && player.exitCasinoWait >= Date.now()) {
    return true;
  }

  const slotMachines = [];

  for (let i = 0; i < _slotMachineData.default.slotMachinesMeta.length; i++) {
    const slotMachineMeta = _slotMachineData.default.slotMachinesMeta[i];
    const dist = vdist(player.position, slotMachineMeta.position);

    if (dist <= 2) {
      slotMachines.push([i, dist]);
    }
  }

  const sortedSlotMachines = slotMachines.sort((a, b) => a[1] - b[1]);

  if (sortedSlotMachines.length) {
    const [sortedSlotMachineId] = sortedSlotMachines[0];
    const slotMachineMeta = _slotMachineData.default.slotMachinesMeta[sortedSlotMachineId];

    if (slotMachineMeta.player) {
      player.outputChatBox('Это место занято');
      return true;
    }

    slotMachineMeta.player = player;
    player.currentSlotMachine = sortedSlotMachineId;
    player.call('casino.slots.client.start', [sortedSlotMachineId, player.chipsBalance]);
    return true;
  }

  return false;
};

exports.pressE = pressE;
},{"./slotMachineData":"Dmc2","../../user":"QE3B","../methods":"qXSp"}],"Ikcx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
const mapWinMultiplier = {
  'number': 35,
  'trio': 11,
  'dozen': 2,
  'small': 1,
  'even': 1,
  'red': 1,
  'black': 1,
  'odd': 1,
  'big': 1,
  'column': 2,
  'split': 17,
  'five-numbers': 6,
  'six-numbers': 5,
  'square': 8,
  'straight': 11
};

const createRulesObject = (title, type, winNumbers) => ({
  multiplier: mapWinMultiplier[type],
  title,
  type,
  winNumbers
});

const rules = {
  '0-1-37': createRulesObject('Трио', 'trio', [0, 1, 37]),
  '1-36-37': createRulesObject('Трио', 'trio', [1, 36, 37]),
  '1-2-36': createRulesObject('Трио', 'trio', [1, 2, 36]),
  '0-37': createRulesObject('Сплит', 'split', [0, 37]),
  '1-37': createRulesObject('Сплит', 'split', [1, 37]),
  '1-36': createRulesObject('Сплит', 'split', [1, 36]),
  '2-36': createRulesObject('Сплит', 'split', [2, 36]),
  '50': createRulesObject('Сплит', 'split', [36, 37]),
  '36-37': createRulesObject('Сплит', 'split', [36, 37]),
  '36': createRulesObject('Double zero', 'split', [36]),
  '37': createRulesObject('Zero', 'split', [37]),
  '38': createRulesObject('Дюжина 1', 'dozen', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  '39': createRulesObject('Дюжина 2', 'dozen', [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]),
  '40': createRulesObject('Дюжина 3', 'dozen', [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '41': createRulesObject('Малые', 'small', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),
  '42': createRulesObject('Четные', 'even', [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]),
  '43': createRulesObject('Красные', 'red', [0, 2, 4, 6, 8, 11, 13, 15, 17, 18, 20, 22, 24, 26, 29, 31, 33, 35]),
  '44': createRulesObject('Черные', 'black', [1, 3, 5, 7, 9, 10, 12, 14, 16, 19, 21, 23, 25, 27, 28, 30, 32, 34]),
  '45': createRulesObject('Нечетные', 'odd', [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]),
  '46': createRulesObject('Большие', 'big', [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '47': createRulesObject('Колонна 1', 'column', [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]),
  '48': createRulesObject('Колонна 2', 'column', [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34]),
  '49': createRulesObject('Колонна 3', 'column', [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]),
  '50-51': createRulesObject('5 номеров', 'five-numbers', [37, 38, 0, 1, 2])
};

for (let i = 0; i < 36; i++) {
  rules[i] = createRulesObject(`${i + 1} ${redNumbers.includes(i + 1) ? 'красное' : 'черное'}`, 'number', [i]);
}

for (let i = 0; i < 11; i++) {
  const ix3 = i * 3;
  const rulesSquareFirst = [ix3, ix3 + 1, ix3 + 3, ix3 + 4];
  const rulesSquareSecond = [ix3 + 1, ix3 + 2, ix3 + 4, ix3 + 5];
  rules[rulesSquareFirst.join('-')] = createRulesObject('Каре', 'square', rulesSquareFirst);
  rules[rulesSquareSecond.join('-')] = createRulesObject('Каре', 'square', rulesSquareSecond);
  const splitFirst = [ix3, ix3 + 3];
  const splitSecond = [ix3 + 1, ix3 + 4];
  const splitThree = [ix3 + 2, ix3 + 5];
  rules[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  rules[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
  rules[splitThree.join('-')] = createRulesObject('Сплит', 'split', splitThree);
}

for (let i = 0; i < 12; i++) {
  const ix3 = i * 3;
  const splitFirst = [ix3, ix3 + 1];
  const splitSecond = [ix3 + 1, ix3 + 2];
  rules[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  rules[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
}

for (let i = 51; i < 63; i++) {
  const j = i - 51;
  const jx3 = j * 3;
  rules[i] = createRulesObject('Стрит', 'straight', [jx3, jx3 + 1, jx3 + 2]);

  if (i !== 62) {
    const nextJ = (i - 50) * 3;
    rules[`${i}-${i + 1}`] = createRulesObject('6 номеров', 'six-numbers', [jx3, jx3 + 1, jx3 + 2, nextJ, nextJ + 1, nextJ + 2]);
  }
}

const getChipTypeByBalance = (table, balance) => {
  for (let i = table.chipTypePrices.length - 1; i >= 0; i--) {
    const chipPrice = table.chipTypePrices[i];

    if (balance >= chipPrice) {
      return i;
    }
  }
};

const mapAnims = {
  [36]: 1,
  [26]: 2,
  [9]: 3,
  [24]: 4,
  [28]: 5,
  [11]: 6,
  [7]: 7,
  [18]: 8,
  [12]: 37,
  [17]: 10,
  [5]: 11,
  [20]: 12,
  [32]: 13,
  [15]: 14,
  [3]: 15,
  [22]: 16,
  [34]: 17,
  [13]: 18,
  [1]: 19,
  [37]: 20,
  [27]: 21,
  [8]: 22,
  [25]: 23,
  [29]: 24,
  [10]: 25,
  [6]: 26,
  [19]: 27,
  [31]: 28,
  [16]: 29,
  [4]: 30,
  [21]: 31,
  [33]: 32,
  [14]: 33,
  [2]: 34,
  [23]: 35,
  [35]: 36,
  [30]: 9,
  [0]: 38
};
const positions = [{
  position: new mp.Vector3(1146.247802734375, 267.0387268066406, -52.84086990356445),
  heading: 228,
  chipTypePrices: [100, 250, 750, 1000],
  isVip: false
}, {
  position: new mp.Vector3(1149.006103515625, 264.03985595703125, -52.84086990356445),
  heading: 45,
  chipTypePrices: [10, 25, 75, 100],
  isVip: false
}];

const insidePolygon = (point, vs) => {
  var x = point[0],
      y = point[1];
  var inside = false;

  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
    var xi = vs[i][0],
        yi = vs[i][1];
    var xj = vs[j][0],
        yj = vs[j][1];
    var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }

  return inside;
};

const lerp = (v1, v2, deltaTime) => (1 - deltaTime) * v1 + deltaTime * v2;

var _default = {
  getChipTypeByBalance,
  insidePolygon,
  lerp,
  redNumbers,
  mapWinMultiplier,
  rules,
  mapAnims,
  positions
};
exports.default = _default;
},{}],"OHXS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vdist = exports.shuffle = exports.calculateAttachPosition = void 0;

const vdist = (v1, v2, useZ = true) => {
  const diffY = v1.y - v2.y;
  const diffX = v1.x - v2.x;

  if (useZ) {
    const diffZ = v1.z - v2.z;
    return Math.sqrt(diffY * diffY + diffX * diffX + diffZ * diffZ);
  } else {
    return Math.sqrt(diffY * diffY + diffX * diffX);
  }
};

exports.vdist = vdist;

const shuffle = array => array.sort(() => Math.random() - 0.5);

exports.shuffle = shuffle;

const calculateAttachPosition = (position, rotation, offset) => {
  const _rotation = new mp.Vector3(rotation.x / 180 * Math.PI, rotation.y / 180 * Math.PI, rotation.z / 180 * Math.PI);

  const cos_rx = Math.cos(_rotation.x);
  const cos_ry = Math.cos(_rotation.y);
  const cos_rz = Math.cos(_rotation.z);
  const sin_rx = Math.sin(_rotation.x);
  const sin_ry = Math.sin(_rotation.y);
  const sin_rz = Math.sin(_rotation.z);
  return new mp.Vector3(position.x + offset.x * cos_ry * cos_rz - offset.x * sin_rx * sin_ry * sin_rz - offset.y * cos_rx * sin_rz + offset.z * sin_ry * cos_rz + offset.z * sin_rx * cos_ry * sin_rz, position.y + offset.x * cos_ry * sin_rz + offset.x * sin_rx * sin_ry * cos_rz + offset.y * cos_rx * cos_rz + offset.z * sin_ry * sin_rz - offset.z * sin_rx * cos_ry * cos_rz, position.z - offset.x * cos_rx * sin_ry + offset.y * sin_rx + offset.z * cos_rx * cos_ry);
};

exports.calculateAttachPosition = calculateAttachPosition;
},{}],"XMgA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressE = exports.casino_business_id = exports.casinoEnterCost = void 0;

var _helpers = _interopRequireDefault(require("../../../shared/casino_roulette/helpers"));

var _methods = require("../methods");

var _menu = require("../menu");

var _user = require("../../user");

var _business = require("../../business");

var pokerHelpers = _interopRequireWildcard(require("../casino_threecard_poker/helpers"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let casinoEnterCost = 500;
exports.casinoEnterCost = casinoEnterCost;
const chipsCost = 100;
const chipsMax = 50000;
const MAX_BETS = 10;
const casino_business_id = 500;
exports.casino_business_id = casino_business_id;
const tables = [];

for (let i = 0; i < _helpers.default.positions.length; i++) {
  const positionInfo = _helpers.default.positions[i];
  tables.push({
    position: positionInfo.position,
    heading: positionInfo.heading,
    chipTypePrices: positionInfo.chipTypePrices,
    players: new Map(),
    maxPlayers: 4,
    lastWinTime: Date.now(),
    currentWinNumber: -1,
    currentState: 0,
    lastIdleTime: Date.now(),
    sits: [{
      position: pokerHelpers.calculateAttachPosition(positionInfo.position, new mp.Vector3(0, 0, positionInfo.heading), new mp.Vector3(-0.22, -0.9, 0.7)),
      player: null
    }, {
      position: pokerHelpers.calculateAttachPosition(positionInfo.position, new mp.Vector3(0, 0, positionInfo.heading), new mp.Vector3(0.76, -0.9, 0.7)),
      player: null
    }, {
      position: pokerHelpers.calculateAttachPosition(positionInfo.position, new mp.Vector3(0, 0, positionInfo.heading), new mp.Vector3(1.4, -0.13, 0.7)),
      player: null
    }, {
      position: pokerHelpers.calculateAttachPosition(positionInfo.position, new mp.Vector3(0, 0, positionInfo.heading), new mp.Vector3(0.76, 0.65, 0.7)),
      player: null
    }]
  });

  _methods.methods.createDynamicCheckpoint(positionInfo.position, 'Нажмите ~g~Е~s~ чтобы играть в рулетку', player => {}, 3, 0, [0, 0, 0, 0]);
}

mp.blips.new(679, new mp.Vector3(935.53, 46.44, 81.095), {
  scale: 0.7,
  dimension: 0,
  color: 37,
  shortRange: true,
  name: "Казино"
});

_methods.methods.createDynamicCheckpoint(new mp.Vector3(1111.87, 208.12, -49.34), "Нажмите ~g~Е~s~ чтобы открыть меню бара", player => {
  player.call('client:menuList:showBarFreeMenu', [casino_business_id]);
}, 4.75, 0, [0, 255, 0, 30]);

_methods.methods.createDynamicCheckpoint(new mp.Vector3(1087.86, 222.02, -50.20), "Нажмите ~g~Е~s~ чтобы настроить плату за вход", player => {
  if (_user.user.get(player, 'fraction_id2') != casino_business_id) return player.notify("~r~Доступно только владельцу казино");
  if (!_user.user.isLeader2(player)) return player.notify("~r~Доступно только владельцу казино");

  const m = _menu.menu.new(player, "", "Охрана");

  m.sprite = "diamond";
  m.newItem({
    name: "Стоимость входа",
    onpress: () => {
      _menu.menu.input(player, "Введите сумму (50-500)", _business.business.getPrice(casino_business_id).toString(), 5, "int").then(res => {
        let sum = _methods.methods.parseInt(res);

        if (isNaN(sum) || sum < 50 || sum > 500) return player.notify("~r~Количество указанно не верно");
        m.close();

        _business.business.setPrice(casino_business_id, sum);

        player.notify(`~g~Стоимость входа успешно установлена`);
      });
    }
  });
  m.open();
});

_methods.methods.createDynamicCheckpoint(new mp.Vector3(1116.0321044921875, 217.92660522460938, -50.43515396118164), "Нажмите ~g~Е~s~ чтобы купить фишки", player => {
  const m = _menu.menu.new(player, "", "Касса");

  m.sprite = "diamond";
  m.newItem({
    name: "Купить фишки",
    more: "1 Фишка - " + chipsCost + "$",
    onpress: () => {
      _menu.menu.input(player, "Введите количество", "", 5, "int").then(res => {
        let sum = _methods.methods.parseInt(res);

        if (isNaN(sum) || sum < 1 || sum > 10000000) return player.notify("~r~Количество указанно не верно");
        if (_user.user.getChips(player) + sum > chipsMax) return player.notify("~r~Лимит фишек на руках - 50к");
        if (_user.user.getMoney(player) < chipsCost * sum) return player.notify("~r~У вас недостаточно средств");
        m.close();

        _user.user.addChips(player, sum);

        _user.user.removeMoney(player, chipsCost * sum);

        player.notify(`~g~Вы успешно приобрели ${sum} фишек за ${chipsCost * sum}$ `);

        _user.user.log(player, "Casino", `приобрёл ${sum} фишек за ${chipsCost * sum}$`);
      });
    }
  });
  m.newItem({
    name: "Обменять фишки",
    more: `Баланс: ${_user.user.getChips(player)}`,
    onpress: () => {
      _menu.menu.input(player, "Введите количество", _user.user.getChips(player).toString(), 11, "int").then(res => {
        let sum = _methods.methods.parseInt(res);

        if (isNaN(sum) || sum < 1 || sum > 10000000) {
          return player.notify("~r~Количество указанно не верно");
        }

        if (_user.user.getChips(player) < sum) {
          return player.notify("~r~У вас недостаточно фишек для данной операции");
        }

        m.close();

        _user.user.removeChips(player, sum);

        _user.user.addMoney(player, chipsCost * sum);

        player.notify(`~g~Вы успешно обменяли ${sum} фишек на ${chipsCost * sum}$`);

        _user.user.log(player, "Casino", `обменял ${sum} фишек на ${chipsCost * sum}$`);
      });
    }
  });
  m.open();
});

const vdist = (v1, v2, useZ = true) => {
  const diffY = v1.y - v2.y;
  const diffX = v1.x - v2.x;

  if (useZ) {
    const diffZ = v1.z - v2.z;
    return Math.sqrt(diffY * diffY + diffX * diffX + diffZ * diffZ);
  } else {
    return Math.sqrt(diffY * diffY + diffX * diffX);
  }
};

const sendEventToPlayers = (players, eventName, ...args) => {
  for (let i = 0; i < players.length; i++) {
    const player = players[i];

    if (mp.players.exists(player)) {
      player.call(eventName, args);
    }
  }
};

const changeTableState = (table, state, data) => {
  table.currentState = state;
  const players = [...table.players.keys()];
  sendEventToPlayers(players, 'casino.client.updateState', state, data);
};

const changeStateTablesHandler = () => {
  for (let i = 0; i < tables.length; i++) {
    const table = tables[i];
    table.lastIdleTime = Date.now();
    changeTableState(table, 0);

    for (const playerInfo of table.players.values()) {
      try {
        let playerWinBalance = 0;
        let playerWinBetCount = 0;
        let playerLossBetCount = 0;

        for (const [betKey, bet] of playerInfo.bets) {
          const rule = _helpers.default.rules[betKey];

          if (!rule) {
            _methods.methods.saveLog('casino', betKey);
          }

          if (rule.winNumbers.includes(table.currentWinNumber)) {
            playerWinBalance += bet.balance * rule.multiplier + bet.balance;
            playerWinBetCount++;
          } else {
            playerLossBetCount++;
          }

          playerInfo.bets.delete(betKey);
        }

        playerInfo.usedChips.clear();

        if (playerWinBetCount + playerLossBetCount) {
          _user.user.addChips(playerInfo.playerInstance, playerWinBalance);

          let messageStr = '';

          if (playerWinBalance > 0) {
            messageStr += `Ты выиграл ${playerWinBalance}. `;

            _user.user.log(playerInfo.playerInstance, "Casino", `выиграл в рулетке ${playerWinBalance} фишек`);
          }

          playerInfo.playerInstance.outputChatBox(messageStr + `Прошло ${playerWinBetCount} ставок из ${playerWinBetCount + playerLossBetCount}.`);
        } else {
          playerInfo.skipBets += 1;

          if (playerInfo.skipBets >= 5) {
            _user.user.kick(playerInfo.playerInstance, "Вы пропустили 5 ставок", "ANTI-AFK");
          }
        }
      } catch (e) {
        console.error(e);
      }
    }
  }

  setTimeout(() => {
    for (let i = 0; i < tables.length; i++) {
      changeTableState(tables[i], 1);
    }
  }, 30000);
  setTimeout(() => {
    for (let i = 0; i < tables.length; i++) {
      const table = tables[i];
      const winNumber = Math.floor(Math.random() * 38);
      table.currentWinNumber = winNumber;
      table.lastWinTime = Date.now();
      changeTableState(table, 2, winNumber);
    }
  }, 40000);
};

const changeStateTablesTimer = setInterval(changeStateTablesHandler, 52000);
changeStateTablesHandler();

const createPlayerForTableFromPlayer = (player, sitPositionId) => ({
  playerInstance: player,
  bets: new Map(),
  skipBets: 0,
  usedChips: new Set(),
  sitPositionId
});

const casinoClientStop = player => {
  const table = player.currentRouletteTable;
  const playerInfo = table.players.get(player);
  player.outputChatBox(`Ты вышел с рулетки`);
  const players = [...table.players.keys()];
  sendEventToPlayers(players, 'casino.client.stop', player.id);

  if (table.currentState === 0) {
    let returnetBetsValue = 0;
    const playerInfo = table.players.get(player);

    for (const [betKey, betInfo] of playerInfo.bets) {
      returnetBetsValue += betInfo.balance;
    }

    _user.user.addChips(player, returnetBetsValue);
  }

  table.sits[playerInfo.sitPositionId].player = null;
  table.players.delete(player);
  player.currentRouletteTable = null;
};

const getBetsCount = (table, userId) => {
  let betsCount = 0;
  table.players.forEach((playerInfo, pl) => {
    if (userId == pl.id) {
      betsCount += playerInfo.bets.size;
    }
  });
  return betsCount;
};

mp.events.add('playerQuit', player => {
  if (player.currentRouletteTable) {
    casinoClientStop(player);
  }
});
mp.events.add('casino.setBet', (player, betKey, x, y, chipType) => {
  if (!player.currentRouletteTable) {
    return;
  }

  const table = player.currentRouletteTable;

  if (!table.players.has(player) || typeof betKey !== 'string' || !betKey.length || getBetsCount(table, player.id) >= MAX_BETS || _user.user.getChips(player) - table.chipTypePrices[chipType] < 0 || table.currentState !== 0) {
    player.call('casino.client.updateBetFailure', [0]);
    return;
  }

  const playerInfo = table.players.get(player);
  let updateOtherPlayers = false;
  let betsSum = 0;

  for (const betInfo of playerInfo.bets.values()) {
    betsSum += betInfo.balance;
  }

  if (betsSum + table.chipTypePrices[chipType] > table.chipTypePrices[table.chipTypePrices.length - 1]) {
    player.notify(`~r~Сумма всех ваших ставок не может превышать более ${table.chipTypePrices[table.chipTypePrices.length - 1]} фишек`);
    player.call('casino.client.updateBetFailure', [0]);
    return;
  }

  if (playerInfo.usedChips.has(chipType)) {
    player.notify(`~r~Вы уже использовали фишку данного номинала.`);
    player.call('casino.client.updateBetFailure', [0]);
    return;
  }

  if (playerInfo.bets.has(betKey)) {
    const bet = playerInfo.bets.get(betKey);
    bet.balance += table.chipTypePrices[chipType];

    const currentChipType = _helpers.default.getChipTypeByBalance(table, bet.balance);

    if (bet.currentChipType !== currentChipType) {
      updateOtherPlayers = true;
    }

    bet.currentChipType = currentChipType;
  } else {
    const betInfo = {
      balance: table.chipTypePrices[chipType],
      x,
      y,
      currentChipType: chipType
    };
    playerInfo.bets.set(betKey, betInfo);
    updateOtherPlayers = true;
  }

  playerInfo.usedChips.add(chipType);

  _user.user.removeChips(player, table.chipTypePrices[chipType]);

  const bet = playerInfo.bets.get(betKey);
  playerInfo.skipBets = 0;
  const players = [...table.players.keys()];

  for (let i = 0; i < players.length; i++) {
    const tablePlayer = players[i];

    if (updateOtherPlayers && tablePlayer !== player) {
      tablePlayer.call('casino.client.updateBet', [player, betKey, bet.x, bet.y, table.chipTypePrices[bet.currentChipType]]);
    }
  }

  player.call('casino.client.updateBet', [player, betKey, bet.x, bet.y, bet.balance]);
});
mp.events.add('casino.removeBet', (player, betKey, chipType) => {
  if (!player.currentRouletteTable) {
    return;
  }

  const table = player.currentRouletteTable;

  if (!table.players.has(player) || table.currentState !== 0) {
    player.call('casino.client.updateBetFailure', [0]);
    return;
  }

  const playerInfo = table.players.get(player);
  let updateOtherPlayers = false;

  if (playerInfo.bets.has(betKey)) {
    const bet = playerInfo.bets.get(betKey);

    const currentChipType = _helpers.default.getChipTypeByBalance(table, bet.balance);

    bet.balance -= table.chipTypePrices[currentChipType];

    _user.user.addChips(player, table.chipTypePrices[currentChipType]);

    if (bet.currentChipType !== currentChipType) {
      updateOtherPlayers = true;
    }

    bet.currentChipType = currentChipType;
    const players = [...table.players.keys()];

    for (let i = 0; i < players.length; i++) {
      const tablePlayer = players[i];

      if (updateOtherPlayers && tablePlayer !== player) {
        tablePlayer.call('casino.client.updateBet', [player, betKey, 0, 0, table.chipTypePrices[bet.currentChipType]]);
      }
    }

    player.call('casino.client.updateBet', [player, betKey, 0, 0, bet.balance]);

    if (bet.balance <= 0) {
      playerInfo.usedChips.delete(currentChipType);
      playerInfo.bets.delete(betKey);
      return;
    }
  }
});

const pressE = player => {
  if (player.currentRouletteTable) {
    casinoClientStop(player);
    player.exitCasinoWait = Date.now() + 2000;
    return true;
  }

  if (player.exitCasinoWait && player.exitCasinoWait >= Date.now()) {
    return true;
  }

  for (let i = 0; i < tables.length; i++) {
    const table = tables[i];

    if (vdist(player.position, table.position) <= 2) {
      if (table.players.size >= table.maxPlayers) {
        player.outputChatBox(`Все места заняты`);
        return true;
      }

      const initedBets = [];

      for (const [player, {
        bets
      }] of table.players) {
        if (mp.players.exists(player)) {
          for (const [betKey, betInfo] of bets) {
            initedBets.push(`${player.id},${betKey},${betInfo.x},${betInfo.y},${betInfo.balance}`);
          }
        }
      }

      const dist = pokerHelpers.vdist(player.position, table.position);
      const sits = [];

      if (dist <= 3.3) {
        for (let i = 0; i < table.sits.length; i++) {
          const sitPosition = table.sits[i].position;
          const distSit = pokerHelpers.vdist(player.position, sitPosition);

          if (distSit <= 1.2) {
            sits.push([i, distSit]);
          }
        }
      }

      const sortedSitPositions = sits.sort((a, b) => a[1] - b[1]);

      if (sortedSitPositions.length) {
        const [sortedSitPositionId] = sortedSitPositions[0];

        if (table.sits[sortedSitPositionId].player) {
          player.outputChatBox(`Это место занято`);
          return true;
        }

        table.sits[sortedSitPositionId].player = player;
        table.players.set(player, table.players.get(player) || createPlayerForTableFromPlayer(player, sortedSitPositionId));
        player.currentRouletteTable = table;
        player.outputChatBox(`Ты занял место: ${sortedSitPositionId + 1}`);
        player.call('casino.client.start', [i, table.currentState, table.currentWinNumber, (Date.now() - table.lastWinTime) / 1000, initedBets.join('|'), 30000 - (Date.now() - table.lastIdleTime), sortedSitPositionId]);
      }

      return true;
    }
  }

  return false;
};

exports.pressE = pressE;
},{"../../../shared/casino_roulette/helpers":"Ikcx","../methods":"qXSp","../menu":"Aiz7","../../user":"QE3B","../../business":"y5vZ","../casino_threecard_poker/helpers":"OHXS"}],"Vnvq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapWins = exports.cardsArray = exports.BETS_BALANCE = void 0;
const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
const suits = [{
  type: 'd',
  label: 'Бубны',
  name: 'diamonds',
  nameModel: 'dia'
}, {
  type: 'c',
  label: 'Трефы',
  name: 'clubs',
  nameModel: 'club'
}, {
  type: 'h',
  label: 'Черви',
  name: 'hearts',
  nameModel: 'hrt'
}, {
  type: 's',
  label: 'Пики',
  name: 'spades',
  nameModel: 'spd'
}];
const cardsArray = [];
exports.cardsArray = cardsArray;

for (let i = 0; i < suits.length; i++) {
  for (let j = 0; j < values.length; j++) {
    cardsArray.push(`${values[j]}${suits[i].type}`);
  }
}

const BETS_BALANCE = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 350, 400, 450, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000];
exports.BETS_BALANCE = BETS_BALANCE;
;
const mapWins = {
  'Straight Flush': {
    first: {
      multiplier: 6
    },
    second: {
      multiplier: 40
    }
  },
  'Three of a Kind': {
    first: {
      multiplier: 4
    },
    second: {
      multiplier: 30
    }
  },
  'Straight': {
    first: {
      multiplier: 1
    },
    second: {
      multiplier: 6
    }
  },
  'Flush': {
    first: {
      multiplier: 0
    },
    second: {
      multiplier: 4
    }
  },
  'Pair': {
    first: {
      multiplier: 0
    },
    second: {
      multiplier: 1
    }
  },
  'High Card': {
    first: {
      multiplier: 0
    },
    second: {
      multiplier: 0
    }
  }
};
exports.mapWins = mapWins;
},{}],"hevW":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressE = void 0;

var pokerHelpers = _interopRequireWildcard(require("./helpers"));

var pokerData = _interopRequireWildcard(require("./threeCardPokerData"));

var _user = require("../../user");

var _pokersolver = require("pokersolver");

var _methods = require("../methods");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const gameForTest = new _pokersolver.Game('threecard');

const generateHand = (table, canDisqualify = false) => {
  const hand = [];

  for (let i = 0; i < 3; i++) {
    let card = pokerHelpers.shuffle(pokerData.cardsArray)[Math.floor(Math.random() * pokerData.cardsArray.length)];

    while (table.usedCards.has(card)) {
      card = pokerHelpers.shuffle(pokerData.cardsArray)[Math.floor(Math.random() * pokerData.cardsArray.length)];
    }

    table.usedCards.add(card);
    hand.push(card);
  }

  return _pokersolver.Hand.solve(hand, gameForTest, canDisqualify);
};

const pokerTables = [{
  position: new mp.Vector3(1143.338, 264.2453, -52.84094),
  heading: -134.9999614,
  usedCards: new Set(),
  currentState: 0,
  players: new Map(),
  gameTimer: -1,
  activeGame: false,
  firstBetActive: false,
  dealerHand: null,
  usedSits: new Map()
}, {
  position: new mp.Vector3(1146.329, 261.2543, -52.84094),
  heading: 44.9999372,
  usedCards: new Set(),
  currentState: 0,
  players: new Map(),
  gameTimer: -1,
  activeGame: false,
  firstBetActive: false,
  dealerHand: null,
  usedSits: new Map()
}, {
  position: new mp.Vector3(1133.74, 266.6947, -52.04094),
  heading: -44.9999372,
  usedCards: new Set(),
  currentState: 0,
  players: new Map(),
  gameTimer: -1,
  activeGame: false,
  firstBetActive: false,
  dealerHand: null,
  usedSits: new Map()
}, {
  position: new mp.Vector3(1148.74, 251.6947, -52.04094),
  heading: -44.9999372,
  usedCards: new Set(),
  currentState: 0,
  players: new Map(),
  gameTimer: -1,
  activeGame: false,
  firstBetActive: false,
  dealerHand: null,
  usedSits: new Map()
}];
pokerTables.forEach(item => {
  _methods.methods.createDynamicCheckpoint(item.position, 'Нажмите ~g~Е~s~ чтобы сесть за стол', player => {}, 3, 0, [0, 0, 0, 0]);
});
mp.events.add('playerQuit', player => {
  if (player.currentPokerTable) {
    const table = player.currentPokerTable;
    table.players.delete(player);
    table.usedSits.delete(player);
    return;
  }
});

const pressE = player => {
  if (player.currentPokerTable) {
    const table = player.currentPokerTable;

    if (table.players.has(player)) {
      const playerInfo = table.players.get(player);

      if (playerInfo.firstBet !== -1 || playerInfo.secondBet !== -1) {
        return true;
      }
    }

    table.players.delete(player);
    table.usedSits.delete(player);
    player.currentPokerTable = null;
    player.exitCasinoWait = Date.now() + 2000;
    player.call('casino.poker.client.stop');
    return true;
  }

  if (player.exitCasinoWait && player.exitCasinoWait >= Date.now()) {
    return true;
  }

  for (let j = 0; j < pokerTables.length; j++) {
    const {
      position,
      heading,
      usedSits
    } = pokerTables[j];
    const sitPositions = [pokerHelpers.calculateAttachPosition(position, new mp.Vector3(0, 0, heading), new mp.Vector3(-1.3, 0, 0)), pokerHelpers.calculateAttachPosition(position, new mp.Vector3(0, 0, heading), new mp.Vector3(-0.4877952745, -0.7133464511, 0)), pokerHelpers.calculateAttachPosition(position, new mp.Vector3(0, 0, heading), new mp.Vector3(0.480708, -0.721220, 0)), pokerHelpers.calculateAttachPosition(position, new mp.Vector3(0, 0, heading), new mp.Vector3(1.2153543, -0.0042913, 0))];
    const dist = pokerHelpers.vdist(player.position, position);
    const sits = [];

    if (dist <= 3) {
      for (let i = 0; i < sitPositions.length; i++) {
        const sitPosition = sitPositions[i];
        const distSit = pokerHelpers.vdist(player.position, sitPosition);

        if (distSit <= 1.2) {
          sits.push([i, distSit, j]);
        }
      }
    }

    const sortedSitPositions = sits.sort((a, b) => a[1] - b[1]);

    if (sortedSitPositions.length) {
      const [sortedSitPositionId, _, tableId] = sortedSitPositions[0];
      let isSitUsed = false;

      for (const [_, sitIndex] of usedSits) {
        if (sitIndex === sortedSitPositionId) {
          player.outputChatBox(`Это место занято`);
          isSitUsed = true;
          return true;
        }
      }

      if (isSitUsed) {
        return true;
      }

      const table = pokerTables[tableId];
      player.currentPokerTable = table;
      table.players.set(player, {
        typeBet: 'first',
        firstBet: -1,
        secondBet: -1,
        applyFirstBet: false
      });
      player.call('casino.poker.client.start', [sortedSitPositionId, tableId]);
      return true;
    }
  }

  return false;
};

exports.pressE = pressE;

const changeTableState = (table, state) => {
  table.currentState = state;

  if (state === 0 || state === 6) {
    table.usedCards.clear();
  }

  if (state === 0) {
    for (const [player, playerInfo] of table.players) {
      playerInfo.firstBet = -1;
      playerInfo.secondBet = -1;
      playerInfo.hand = null;
      playerInfo.typeBet = 'first';
      playerInfo.applyFirstBet = false;

      if (mp.players.exists(player)) {
        player.call('casino.poker.client.changeTableState', [0]);
      } else {
        table.players.delete(player);
        table.usedSits.delete(player);
      }
    }

    table.activeGame = false;
    table.firstBetActive = false;
    table.dealerHand = null;
  } else if (state === 1) {
    for (const [player, playerInfo] of table.players) {
      if (mp.players.exists(player)) {
        player.call('casino.poker.client.changeTableState', [1]);
      } else {
        table.players.delete(player);
        table.usedSits.delete(player);
      }
    }

    startTableGameTimer(table);
  } else if (state === 2) {
    table.dealerHand = generateHand(table);
    const cards = table.dealerHand.cardPool.map(card => card.toString());

    for (const [player] of table.players) {
      if (mp.players.exists(player)) {
        player.call('casino.poker.client.changeTableState', [2, cards]);
      } else {
        table.players.delete(player);
        table.usedSits.delete(player);
      }
    }
  } else if (state === 3) {
    for (const [player, playerInfo] of table.players) {
      if (playerInfo.firstBet !== -1 || playerInfo.secondBet !== -1) {
        playerInfo.hand = generateHand(table);
        const cards = playerInfo.hand.cardPool.map(card => card.toString());

        if (mp.players.exists(player)) {
          player.call('casino.poker.client.changeTableState', [3, cards]);
        } else {
          table.players.delete(player);
          table.usedSits.delete(player);
        }
      } else {
        if (mp.players.exists(player)) {
          player.call('casino.poker.client.changeTableState', [3, null]);
        } else {
          table.players.delete(player);
          table.usedSits.delete(player);
        }
      }
    }
  } else if (state === 4) {
    for (const [player, playerInfo] of table.players) {
      if (mp.players.exists(player)) {
        player.call('casino.poker.client.changeTableState', [4]);
      } else {
        table.players.delete(player);
        table.usedSits.delete(player);
      }
    }
  } else if (state === 5) {
    for (const [player, playerInfo] of table.players) {
      if (mp.players.exists(player)) {
        player.call('casino.poker.client.changeTableState', [5]);
      } else {
        table.players.delete(player);
        table.usedSits.delete(player);
      }
    }
  } else if (state === 6) {
    for (const [player, playerInfo] of table.players) {
      if (playerInfo.firstBet !== -1 || playerInfo.secondBet !== -1) {
        const [winner] = _pokersolver.Hand.winners([playerInfo.hand, table.dealerHand]);

        if (mp.players.exists(player)) {
          player.outputChatBox(`У тебя: ${playerInfo.hand.descr}. У крупье: ${table.dealerHand.descr}`);

          if (winner === playerInfo.hand) {
            let winBalance = 0;

            if (playerInfo.firstBet !== -1 && playerInfo.applyFirstBet) {
              const firstBetBalance = pokerData.BETS_BALANCE[playerInfo.firstBet];
              const bonus = pokerData.mapWins[playerInfo.hand.name].first.multiplier * firstBetBalance;
              winBalance += bonus;
              winBalance += firstBetBalance * (playerInfo.secondBet !== -1 ? 3 : 2);
              let messageStr = `Начальная ставка прошла, ты получил: ${firstBetBalance}. `;

              _user.user.log(player, "Casino", `Начальная ставка прошла, получил: ${firstBetBalance}. [Покер]`);

              if (bonus > 0) {
                messageStr += `Дополнительный бонус начальной ставки: ${bonus}`;
              }

              player.outputChatBox(messageStr);
            }

            if (playerInfo.secondBet !== -1) {
              const secondBetBalance = pokerData.BETS_BALANCE[playerInfo.secondBet];
              const bonus = pokerData.mapWins[playerInfo.hand.name].second.multiplier * secondBetBalance;
              winBalance += bonus;

              if (bonus > 0) {
                winBalance += secondBetBalance;
                player.outputChatBox(`Ставка пара-плюс прошла, ты получил бонус: ${bonus}`);

                _user.user.log(player, "Casino", `получил бонус ${bonus} по ставке пара-плюс [Покер]`);
              } else {
                player.outputChatBox(`Ставка пара-плюс не прошла.`);
              }
            }

            _user.user.addChips(player, winBalance);
          } else {
            let winBalance = 0;
            player.outputChatBox(`Начальная ставка не прошла.`);

            if (playerInfo.secondBet !== -1) {
              const secondBetBalance = pokerData.BETS_BALANCE[playerInfo.secondBet];
              const bonus = pokerData.mapWins[playerInfo.hand.name].second.multiplier * secondBetBalance;
              winBalance += bonus;

              if (bonus > 0) {
                winBalance += secondBetBalance;
                player.outputChatBox(`Ставка пара-плюс прошла, ты получил бонус: ${bonus}`);

                _user.user.log(player, "Casino", `получил бонус ${bonus} по ставке пара-плюс [Покер]`);
              } else {
                player.outputChatBox(`Ставка пара-плюс не прошла.`);
              }
            }

            _user.user.addChips(player, winBalance);
          }

          player.call('casino.poker.client.changeTableState', [6]);
        } else {
          table.players.delete(player);
          table.usedSits.delete(player);
        }
      }
    }
  }
};

const startTableGameTimer = table => {
  table.gameTimer = setTimeout(() => {
    changeTableState(table, 2);
    setTimeout(() => {
      changeTableState(table, 3);
    }, 1500);
    setTimeout(() => {
      setTimeout(() => {
        changeTableState(table, 5);
        setTimeout(() => {
          changeTableState(table, 6);
        }, 5000);
        setTimeout(() => {
          changeTableState(table, 0);
        }, 7000);
      }, 10000);
      changeTableState(table, 4);
    }, 3000);
  }, 30 * 1000);
};

mp.events.add('casino.poker.server.setBet', (player, balance) => {
  if (!player.currentPokerTable) {
    return;
  }

  const table = player.currentPokerTable;

  if (table.currentState !== 0 && table.currentState !== 1 && table.currentState !== 4) {
    player.call('casino.poker.client.setBet.response', [false]);
    return;
  }

  const playerInfo = table.players.get(player);

  if (balance !== -1 && player.chipsBalance - pokerData.BETS_BALANCE[balance] < 0) {
    player.call('casino.poker.client.setBet.response', [false]);
    return;
  }

  if (table.currentState === 0 || table.currentState === 1 && playerInfo.typeBet !== 'finish') {
    if (playerInfo.typeBet === 'first') {
      playerInfo.firstBet = balance;
      playerInfo.typeBet = 'second';
      table.firstBetActive = balance !== -1;

      if (table.firstBetActive) {
        _user.user.removeChips(player, pokerData.BETS_BALANCE[balance]);
      }
    } else if (playerInfo.typeBet === 'second') {
      playerInfo.secondBet = balance;
      playerInfo.typeBet = 'finish';

      if (balance !== -1) {
        _user.user.removeChips(player, pokerData.BETS_BALANCE[balance]);
      }
    }

    if (!table.activeGame) {
      changeTableState(table, 1);
    }

    table.activeGame = true;
  } else if (table.currentState === 4 && playerInfo.firstBet !== -1 && !playerInfo.applyFirstBet) {
    if (balance !== -1) {
      _user.user.removeChips(player, pokerData.BETS_BALANCE[playerInfo.firstBet]);
    }

    playerInfo.applyFirstBet = balance !== -1;
  }

  player.call('casino.poker.client.setBet.response', [true, balance]);
});
},{"./helpers":"OHXS","./threeCardPokerData":"Vnvq","../../user":"QE3B","../methods":"qXSp"}],"JvB6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressE = void 0;

var _user = require("../../user");

var _methods = require("../methods");

var _casino_roulette = require("../casino_roulette");

var _business = require("../../business");

var _level = require("../../../util/level");

const vdist = (v1, v2, useZ = true) => {
  const diffY = v1.y - v2.y;
  const diffX = v1.x - v2.x;

  if (useZ) {
    const diffZ = v1.z - v2.z;
    return Math.sqrt(diffY * diffY + diffX * diffX + diffZ * diffZ);
  } else {
    return Math.sqrt(diffY * diffY + diffX * diffX);
  }
};

const calculateAttachPosition = (position, rotation, offset) => {
  const _rotation = new mp.Vector3(rotation.x / 180 * Math.PI, rotation.y / 180 * Math.PI, rotation.z / 180 * Math.PI);

  const cos_rx = Math.cos(_rotation.x);
  const cos_ry = Math.cos(_rotation.y);
  const cos_rz = Math.cos(_rotation.z);
  const sin_rx = Math.sin(_rotation.x);
  const sin_ry = Math.sin(_rotation.y);
  const sin_rz = Math.sin(_rotation.z);
  return new mp.Vector3(position.x + offset.x * cos_ry * cos_rz - offset.x * sin_rx * sin_ry * sin_rz - offset.y * cos_rx * sin_rz + offset.z * sin_ry * cos_rz + offset.z * sin_rx * cos_ry * sin_rz, position.y + offset.x * cos_ry * sin_rz + offset.x * sin_rx * sin_ry * cos_rz + offset.y * cos_rx * cos_rz + offset.z * sin_ry * sin_rz - offset.z * sin_rx * cos_ry * cos_rz, position.z - offset.x * cos_rx * sin_ry + offset.y * sin_rx + offset.z * cos_rx * cos_ry);
};

const enterDealerJob = new mp.Vector3(1088.071, 219.4176, -50.2);
const diceTables = [];

const createTable = (position, heading) => {
  const table = {
    position,
    heading,
    currentState: 0,
    currentBet: 0,
    players: new Map(),
    dealer: null,
    dealerPosition: calculateAttachPosition(position, new mp.Vector3(0, 0, heading), new mp.Vector3(0, 1, -0.1)),
    usedSits: new Map()
  };

  _methods.methods.createDynamicCheckpoint(table.dealerPosition, 'Нажмите ~g~Е~s~ чтобы занять место крупье', player => {});

  _methods.methods.createDynamicCheckpoint(position, 'Нажмите ~g~Е~s~ чтобы играть в кости', player => {}, 2, 0, [0, 0, 0, 0]);

  diceTables.push(table);
  return table;
};

createTable(new mp.Vector3(1148.837, 269.747, -52.84095), -134.6906604);
createTable(new mp.Vector3(1151.84, 266.747, -52.84095), 45.3093566);
createTable(new mp.Vector3(1144.429, 247.3352, -52.041), 135.3094387);
createTable(new mp.Vector3(1129.406, 262.3578, -52.041), 135.3094387);
const DICE_DATA = [1, 2, 3, 4, 5, 6];

_methods.methods.createDynamicCheckpoint(enterDealerJob, "Нажмите ~g~Е~s~ чтобы устроится на смену крупье", player => {
  if (player.dealerJobActive) {
    if (player.weaponsAll.length > 0) return player.notify(`~r~Снимите оружие с экипировки`);
    player.dealerJobActive = false;

    if (player.dealerJobTable) {
      player.dealerJobTable.dealer = null;
      player.dealerJobTable = null;
    }

    _user.user.resetCustomization(player);

    player.notify(`Вы уволились с работы крупье!`);
    return true;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.diceWork) return player.notify("~r~Необходимо иметь " + _level.levelAccess.diceWork + " уровень");
  if (player.weaponsAll.length > 0) return player.notify(`~r~Снимите оружие с экипировки`);
  player.dealerJobActive = true;
  player.notify(`Вы устроились на работу крупье!`);
  if (_user.user.getSex(player) == 1) _user.user.applyCustomization(player, {
    "components": [[0, 0, 0], [1, 0, 0], [3, 0, 0], [4, 6, 0], [5, 0, 0], [6, 19, 3], [7, 0, 0], [8, 24, 0], [9, 0, 0], [10, 0, 0], [11, 28, 9]],
    "props": [[0, -1, -1], [1, -1, -1], [2, -1, -1]]
  });else _user.user.applyCustomization(player, {
    "components": [[0, 0, 0], [1, 0, 0], [3, 0, 0], [4, 10, 0], [5, 0, 0], [6, 15, 0], [7, 36, 0], [8, 7, 0], [9, 0, 0], [10, 0, 0], [11, 40, 0]],
    "props": [[0, 8, 0], [1, 0, 0], [2, 2, 0]]
  });
});

const pressE = player => {
  if (player.dealerJobTable) {
    if (player.dealerJobTable.currentState !== 0) {
      player.outputChatBox(`Идет игра, подождите.`);
      return;
    }

    player.call('casino.dice.client.stopDealer');

    for (const [targetPlayer, targetPlayerInfo] of player.dealerJobTable.players) {
      if (!mp.players.exists(targetPlayer)) {
        player.dealerJobTable.players.delete(targetPlayer);
        player.dealerJobTable.usedSits.delete(targetPlayer);
        continue;
      }

      targetPlayer.call('casino.dice.client.stop');
      targetPlayer.outputChatBox(`Крупье вышел из-за стола!`);
      targetPlayer.currentDiceTable = null;

      if (targetPlayerInfo.betActive && player.dealerJobTable.currentState === 0) {
        _user.user.addChips(targetPlayer, player.dealerJobTable.currentBet);
      }
    }

    player.dealerJobTable.currentBet = 0;
    player.dealerJobTable.players.clear();
    player.dealerJobTable.dealer = null;
    player.dealerJobTable = null;
    player.exitCasinoWait = Date.now() + 2000;
    return true;
  }

  if (player.currentDiceTable) {
    if (player.currentDiceTable.currentState !== 0) {
      player.outputChatBox(`Идет игра, подождите.`);
      return;
    }

    for (const [targetPlayer, targetPlayerInfo] of player.currentDiceTable.players) {
      if (targetPlayer.id == player.id && targetPlayerInfo.betActive && player.currentDiceTable.currentState === 0) {
        _user.user.addChips(targetPlayer, player.currentDiceTable.currentBet);
      }

      continue;
    }

    player.currentDiceTable.players.delete(player);
    player.currentDiceTable.usedSits.delete(player);

    for (const targetPlayer of player.currentDiceTable.players.keys()) {
      if (!mp.players.exists(targetPlayer)) {
        player.currentDiceTable.players.delete(targetPlayer);
        player.currentDiceTable.usedSits.delete(player);
        continue;
      }

      targetPlayer.call('casino.dice.client.removePlayer', [player]);
    }

    if (mp.players.exists(player.currentDiceTable.dealer)) {
      player.currentDiceTable.dealer.call('casino.dice.client.removePlayer', [player]);
    }

    player.currentDiceTable = null;
    player.exitCasinoWait = Date.now() + 2000;
    player.call('casino.dice.client.stop');
    return true;
  }

  if (player.exitCasinoWait && player.exitCasinoWait >= Date.now()) {
    return true;
  }

  for (let i = 0; i < diceTables.length; i++) {
    const table = diceTables[i];

    if (vdist(player.position, table.dealerPosition) <= 1.2) {
      if (!player.dealerJobActive) {
        player.outputChatBox(`Нужно устроиться на работу крупье, прежде чам начать работать.`);
        return true;
      }

      if (table.dealer) {
        player.outputChatBox(`Это рабочее место занято.`);
        return true;
      }

      player.dealerJobTable = table;
      table.dealer = player;
      table.currentBet = 0;
      player.call('casino.dice.client.startDealer', [i]);
      return true;
    }

    const sitPositions = [calculateAttachPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(-1.3, 0, 0)), calculateAttachPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(-0.4877952745, -0.7133464511, 0)), calculateAttachPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(0.480708, -0.721220, 0)), calculateAttachPosition(table.position, new mp.Vector3(0, 0, table.heading), new mp.Vector3(1.2153543, -0.0042913, 0))];
    const dist = vdist(player.position, table.position);
    const sits = [];

    if (dist <= 2.2) {
      for (let j = 0; j < sitPositions.length; j++) {
        const sitPosition = sitPositions[j];
        const distSit = vdist(player.position, sitPosition);

        if (distSit <= 2) {
          sits.push([j, distSit, i]);
        }
      }
    }

    const sortedSitPositions = sits.sort((a, b) => a[1] - b[1]);

    if (sortedSitPositions.length) {
      const [sortedSitPositionId, _, tableId] = sortedSitPositions[0];
      const table = diceTables[tableId];
      let isSitUsed = false;

      for (const [_, sitIndex] of table.usedSits) {
        if (sitIndex === sortedSitPositionId) {
          player.outputChatBox(`Это место занято`);
          isSitUsed = true;
          return true;
        }
      }

      if (isSitUsed) {
        return true;
      }

      if (!table.dealer) {
        player.outputChatBox(`За этим столом нет крупье!`);
        return true;
      }

      if (table.players.size >= 4) {
        player.outputChatBox('Все места заняты');
        return true;
      }

      player.currentDiceTable = table;
      const sendedPlayers = [];

      for (const [targetPlayer, targetPlayerInfo] of table.players) {
        if (targetPlayerInfo.betActive) {
          sendedPlayers.push(targetPlayer);
        }
      }

      table.players.set(player, {
        betActive: false
      });
      player.call('casino.dice.client.start', [tableId, sortedSitPositionId, table.currentBet, table.currentState, Date.now() - table.endSpinTime, ...sendedPlayers]);
      return true;
    }
  }

  return false;
};

exports.pressE = pressE;
mp.events.add('playerQuit', player => {
  if (player.dealerJobTable) {
    const table = player.dealerJobTable;

    for (const [targetPlayer, targetPlayerInfo] of table.players) {
      if (!mp.players.exists(targetPlayer)) {
        table.players.delete(targetPlayer);
        table.usedSits.delete(targetPlayer);
        continue;
      }

      targetPlayer.call('casino.dice.client.stop');
      targetPlayer.outputChatBox(`Крупье вышел из-за стола!`);
      targetPlayer.currentDiceTable = null;

      if (targetPlayerInfo.betActive && table.currentState === 0) {
        _user.user.addChips(targetPlayer, table.currentBet);
      }
    }

    table.currentBet = 0;
    table.players.clear();
    table.dealer = null;
  }

  if (player.currentDiceTable) {
    const table = player.currentDiceTable;
    table.players.delete(player);
    table.usedSits.delete(player);

    for (const targetPlayer of table.players.keys()) {
      if (!mp.players.exists(targetPlayer)) {
        table.players.delete(targetPlayer);
        table.usedSits.delete(targetPlayer);
        continue;
      }

      targetPlayer.call('casino.dice.client.removePlayer', [player]);
    }

    if (mp.players.exists(table.dealer)) {
      table.dealer.call('casino.dice.client.removePlayer', [player]);
    }
  }
});
mp.events.add('casino.dice.server.changeBet', (player, changedBet) => {
  if (!player.dealerJobTable) {
    player.call('casino.dice.client.changeBet.response', [false]);
    return;
  }

  if (changedBet <= 0) {
    player.call('casino.dice.client.changeBet.response', [false]);
    player.outputChatBox(`Сумма ставки не может быть равна 0`);
    return;
  }

  const table = player.dealerJobTable;
  let isAnySetBets = false;

  for (const [targetPlayer, playerInfo] of table.players) {
    if (playerInfo.betActive) {
      isAnySetBets = true;
      return;
    }
  }

  if (isAnySetBets) {
    player.call('casino.dice.client.changeBet.response', [false]);
    return;
  }

  table.currentBet = changedBet;

  for (const targetPlayer of table.players.keys()) {
    if (!mp.players.exists(targetPlayer)) {
      table.players.delete(targetPlayer);
      table.usedSits.delete(targetPlayer);
      continue;
    }

    targetPlayer.call('casino.dice.client.changeBet', [changedBet]);
  }

  player.call('casino.dice.client.changeBet.response', [true]);
});
mp.events.add('casino.dice.server.spin', player => {
  if (!player.dealerJobTable) {
    player.call('casino.dice.client.spin.response', [false]);
    return true;
  }

  const table = player.dealerJobTable;
  const activePlayers = [];

  for (const [player, playerInfo] of table.players) {
    if (playerInfo.betActive) {
      activePlayers.push(player);
    }
  }

  if (activePlayers.length < 2) {
    player.call('casino.dice.client.spin.response', [false]);
    player.outputChatBox(`Слишком мало участников для запуска игры!`);
    return;
  }

  table.currentState = 1;

  for (const targetPlayer of table.players.keys()) {
    if (!mp.players.exists(targetPlayer)) {
      table.players.delete(targetPlayer);
      table.usedSits.delete(targetPlayer);
      continue;
    }

    targetPlayer.call('casino.dice.client.spin');
  }

  player.call('casino.dice.client.spin.response', [true]);
  table.endSpinTime = Date.now() + 10000;
  setTimeout(() => {
    try {
      let betsBalance = 0;
      const usedScores = new Set();
      const players = [];

      for (const [targetPlayer, targetPlayerInfo] of table.players) {
        if (!mp.players.exists(targetPlayer)) {
          table.players.delete(targetPlayer);
          table.usedSits.delete(targetPlayer);
          continue;
        }

        if (targetPlayerInfo.betActive) {
          betsBalance += table.currentBet;
          let score = Math.floor(Math.random() * 21) + 1;

          while (usedScores.has(score)) {
            score = Math.floor(Math.random() * 21) + 1;
          }

          usedScores.add(score);
          players.push({
            playerInstance: targetPlayer,
            score
          });
        }

        targetPlayerInfo.betActive = false;
        targetPlayer.call('casino.dice.client.clear');
      }

      const [winner, ...otherPlayers] = players.sort((a, b) => b.score - a.score);
      const dealerSalary = Math.floor(betsBalance * 1 / 100);
      const remainderBalance = Math.floor(betsBalance * 90 / 100);
      const dealerMoney = Math.floor(dealerSalary * 100);

      _user.user.addMoney(player, dealerMoney);

      _user.user.log(player, "Casino", `доход диллера ${dealerMoney}$`);

      player.notify(`~g~Ты получил 1% с выигрышной ставки: ${dealerSalary}`);

      _business.business.addMoney(_casino_roulette.casino_business_id, Math.floor(betsBalance * 100 * 2 / 100));

      for (let i = 0; i < players.length; i++) {
        const {
          playerInstance,
          score
        } = players[i];

        if (winner.playerInstance === playerInstance) {
          playerInstance.notify(`~g~Ты выиграл 90% от куша (2% крупье): ${remainderBalance}. Выпало ${score}.`);

          _user.user.addChips(playerInstance, remainderBalance);

          _user.user.log(playerInstance, "Casino", ` выиграл 90% от куша в костях : ${remainderBalance}. Выпало ${score}.`);
        } else {
          playerInstance.notify(`~r~Ты проиграл свою ставку. Выпало ${score}.`);
        }
      }

      if (mp.players.exists(player)) {
        player.call('casino.dice.client.clear');
      }

      table.currentBet = 0;
      table.currentState = 0;
    } catch (e) {
      console.error(e);
    }
  }, 10000);
});
mp.events.add('casino.dice.server.setBet', player => {
  if (!player.currentDiceTable) {
    player.call('casino.dice.client.setBet.response', [false]);
    return;
  }

  const table = player.currentDiceTable;

  if (table.currentBet <= 0) {
    player.call('casino.dice.client.setBet.response', [false]);
    return;
  }

  if (table.currentState !== 0) {
    player.call('casino.dice.client.setBet.response', [false]);
    return;
  }

  if (player.chipsBalance - table.currentBet < 0) {
    player.call('casino.dice.client.setBet.response', [false]);
    return;
  }

  const playerInfo = table.players.get(player);

  if (playerInfo.betActive) {
    player.call('casino.dice.client.setBet.response', [false]);
    return;
  }

  _user.user.removeChips(player, table.currentBet);

  playerInfo.betActive = true;

  if (table.dealer && mp.players.exists(table.dealer)) {
    table.dealer.call('casino.dice.client.addPlayer', [player]);
  }

  for (const targetPlayer of table.players.keys()) {
    if (!mp.players.exists(targetPlayer)) {
      table.players.delete(targetPlayer);
      table.usedSits.delete(targetPlayer);
      continue;
    }

    targetPlayer.call('casino.dice.client.addPlayer', [player]);
  }

  player.call('casino.dice.client.setBet.response', [true]);
});
},{"../../user":"QE3B","../methods":"qXSp","../casino_roulette":"XMgA","../../business":"y5vZ","../../../util/level":"MpJF"}],"d3wo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tempPromocodes = exports.sendmoneymax = exports.sendMoney = exports.deadList = exports.createTempPromocode = void 0;

var _data = require("./data");

var _methods = require("./methods");

var _pickups = require("./pickups");

var _user = require("../user");

var _coffer = require("../coffer");

var _chat = require("../modules/chat");

var _vehicles = require("../vehicles");

var _houses = require("../houses");

var _condo = require("../condo");

var _stock = require("../stock");

var _apartments = require("../apartments");

var _business = require("../business");

var _enums = require("../enums");

var _inventory = require("../inventory");

var _weather = require("../managers/weather");

var _dispatcher = require("../managers/dispatcher");

var _items = require("../items");

var _cloth = require("../business/cloth");

var _shop = require("../business/shop");

var _lsc = require("../business/lsc");

var _rent = require("../business/rent");

var _gun = require("../business/gun");

var _fuel = require("../business/fuel");

var _barberShop = require("../business/barberShop");

var _tattoo = require("../business/tattoo");

var _bar = require("../business/bar");

var _licenseCenter = require("../business/licenseCenter");

var _phone = require("../phone");

var _tax = require("../managers/tax");

var _trucker = require("../managers/trucker");

var _mafiaWar = require("../managers/mafiaWar");

var _bank = require("../business/bank");

var _index = require("../business/autosalon/index");

var casinoSlotMachines = _interopRequireWildcard(require("./casino_slot_machines"));

var casinoRoulette = _interopRequireWildcard(require("./casino_roulette"));

var casinoThreeCardPoker = _interopRequireWildcard(require("./casino_threecard_poker"));

var casinoDice = _interopRequireWildcard(require("./casino_dice"));

var _sharedData = require("../../util/sharedData");

var _menu = require("./menu");

var _user2 = require("./entity/user");

var _admin = require("./admin");

var _quests = require("../config/quests");

var _blackList = require("./entity/blackList");

var _sequelize = require("sequelize");

var _level = require("../../util/level");

var _log = require("../log");

var _newrage = require("../../util/newrage");

var _discord = _interopRequireDefault(require("discord.js"));

var _promocodeUsing = require("./entity/promocodeUsing");

var _logFractionGunEntity = require("./entity/logFractionGunEntity");

var _apartmentEntity = require("./entity/apartmentEntity");

var _userDatingEntity = require("./entity/userDatingEntity");

var _rpInvaderAdEntity = require("./entity/rpInvaderAdEntity");

var _promocodeTopEntity = require("./entity/promocodeTopEntity");

var _whitelist = require("./whitelist");

var _carsModel = require("./entity/carsModel");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let mafiaCarsCd = new Map();
let sendMoney = new Map();
exports.sendMoney = sendMoney;
const sendmoneymax = 500000000000;
exports.sendmoneymax = sendmoneymax;
mp.events.addRemoteCounted = mp.events.add;
mp.events.add('__ragemp_get_sc_data', (player, serial2, rgscIdStr, verificatorVersion, verificatorValue) => {
  setTimeout(() => {
    if (!mp.players.exists(player)) return;

    if (verificatorValue == '2319413' || _methods.methods.parseInt(verificatorValue) == 2319413) {
      _methods.methods.saveLog('ConnectRealDataBan', `${player.socialClub} | ${BigInt(rgscIdStr)} | ${player.serial} | ${serial2} | ${verificatorVersion} | ${verificatorValue}`);
    }

    player._rgscId = BigInt(player.clientSocial);
    player._serial2 = serial2;
    if (_whitelist.whitelist.exist(player)) return;

    _blackList.blackListEntity.findOne({
      where: {
        [_sequelize.Op.or]: [{
          guid: player.socialClub
        }, {
          rgscId: player.clientSocial
        }, {
          lic: {
            [_sequelize.Op.in]: [player.serial, player._serial2]
          }
        }]
      }
    }).then(fnd => {
      if (!fnd) return;

      _methods.methods.saveLog('BlackList', `${player.socialClub} | ${serial2}`);

      setTimeout(() => {
        if (!mp.players.exists(player)) return;

        _user.user.disableAllControls(player, true);

        _user.user.hideLoadDisplay(player);

        _user.user.bigAlert(player, `Вы находитесь в чёрном списке проекта${fnd.reason ? `: ${fnd.reason}` : ''}. Номер записи ${fnd.id}`, "error");

        _user.user.kick(player, 'BlackList');
      }, 8000);
    });
  }, 5000);
});
mp.events.add('__ragemp_cheat_detected', (player, cheatCode) => {
  let cheatName = 'Unknown';

  switch (cheatCode) {
    case 0:
    case 1:
      cheatName = 'Cheat Engine';
      break;

    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      cheatName = 'External Cheats';
      break;

    case 7:
    case 10:
    case 11:
      cheatName = 'Internal';
      break;

    case 8:
    case 9:
      cheatName = 'SpeedHack';
      break;

    case 12:
      cheatName = 'SandBoxie';
      break;

    case 14:
      cheatName = 'Cheat Engine ByPass';
      break;
  }

  switch (cheatCode) {
    case 0:
    case 1:
    case 14:
      _user.user.kickAntiCheat(player, cheatName);

      break;
  }

  if (cheatCode != 7 && cheatCode != 10 && cheatCode != 11 && cheatCode != 14 && cheatCode != 0 && cheatCode != 1) {
    if (_user.user.isLogin(player)) {
      mp.players.forEach(function (p) {
        if (!_user.user.isLogin(p)) return;
        if (_user.user.isAdmin(p)) p.outputChatBox(`!{#f44336}Подозрение в читерстве ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${cheatName}`);
      });
    }
  }

  _user.user.log(player, "Anticheat", `${cheatName} CODE: ${cheatCode}`);

  _methods.methods.saveLog('PlayerCheatDetected', `${player.socialClub} | ${cheatCode} | ${_user.user.getRpName(player)} | ${cheatName}`);
});
mp.events.add('server:user:testPC', player => {
  _user.user.testPC(player);
});
mp.events.add('server:user:testNET', player => {
  _user.user.testNet(player);
});
mp.events.add('modules:server:data:Set', (player, id, key, value) => {
  if (_data.Container.protectKeys.indexOf(key) != -1) {
    _user.user.kickAntiCheat(player, "Попытка подмены данных");
  }

  _data.Container.SetClient(id, key, value);
});
mp.events.addRemoteCounted('modules:server:data:Reset', (player, id, key) => {
  _data.Container.Reset(id, key);
});
mp.events.addRemoteCounted('modules:server:data:ResetAll', (player, id) => {
  _data.Container.ResetAll(id);
});
mp.events.addRemoteCounted('modules:server:data:Get', (player, promiseId, id, key) => {
  try {
    _data.Container.GetClient(player, promiseId, id, key);
  } catch (e) {
    _methods.methods.debug('modules:server:data:Get');

    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('modules:server:data:GetAll', (player, promiseId, id) => {
  try {
    _data.Container.GetAllClient(player, promiseId, id);
  } catch (e) {
    _methods.methods.debug('modules:server:data:GetAll');

    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('modules:server:data:Has', (player, promiseId, id, key) => {
  try {
    _data.Container.HasClient(player, promiseId, id, key);
  } catch (e) {
    _methods.methods.debug('modules:server:data:Has');

    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:admin:spawnVeh', (player, vName) => {
  try {
    let v = _vehicles.vehicles.spawnCar(player.position, player.heading, vName);

    v.dimension = player.dimension;
    v.admin = true;
    player.putIntoVehicle(v, _newrage.RAGE_BETA ? 0 : -1);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:player:kick', (player, reason) => {
  _user.user.kick(player, reason);
});
mp.events.addRemoteCounted('server:player:kickAntiCheat', (player, reason) => {
  _user.user.kickAntiCheat(player, reason);
});
mp.events.addRemoteCounted('server:debug:send', (player, message) => {
  try {
    _methods.methods.debug(`[DEBUG] ${player.name} MSG: ${message}`);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:tax:payTax', (player, type, score, sum) => {
  _tax.tax.payTax(player, type, sum, score);
});
mp.events.register('server:user:account:validate', (player, nick, pass, spawnPos) => {
  _methods.methods.debug('validate');

  _user.user.authAccount(player, nick, String(pass), spawnPos);
});
mp.events.register('server:user:account:register', (player, nick, pass, email, referer, promocode, age) => {
  _user.user.register(player, nick, String(pass), email, referer, String(promocode), age);
});
mp.events.add('server:user:personage:done', player => {
  _user.user.donePersonage(player);
});
mp.events.addRemoteCounted('server:user:updateCharacterFace', player => {
  _user.user.updateCharacterFace(player);
});
mp.events.addRemoteCounted('server:user:updateCharacterCloth', player => {
  _user.user.updateCharacterCloth(player);
});
mp.events.addRemoteCounted('server:user:updateTattoo', player => {
  _user.user.updateTattoo(player);
});
mp.events.add('server:user:setDecoration', (player, slot, type) => {
  if (typeof slot == "string") slot = mp.joaat(slot);
  if (typeof type == "string") type = mp.joaat(type);
  player.setDecoration(slot, type);
});
mp.events.add('server:user:clearDecorations', player => {
  player.clearDecorations();
});
mp.events.addRemoteCounted('server:items:getItems', (player, requestID) => {
  try {
    player.callsocket('client:items:updateItems', [requestID, JSON.stringify(_items.items.itemList)]);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:setVirtualWorld', (player, id) => {
  try {
    player.dimension = id;
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:setPlayerModel', (player, model) => {
  try {
    player.model = mp.joaat(model);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:getPlayerPos', player => {
  _methods.methods.debug(`${player.position.x}, ${player.position.y}, ${player.position.z - 1}, ${parseFloat(player.heading.toString())}`);

  _methods.methods.saveLog('AdminCoords', `${_user.user.get(player, 'rp_name')} - ${player.position.x}, ${player.position.y}, ${player.position.z - 1}, ${parseFloat(player.heading.toString())}`);
});
mp.events.addRemoteCounted('server:user:saveAccount', player => {
  _user.user.saveAccount(player);
});
mp.events.addRemoteCounted('server:deleteObject', (player, x, y, z, hash) => {
  mp.players.call('client:deleteObject', x, y, z, hash);
});
mp.events.addRemoteCounted('server:dispatcher:sendPos', (player, title, desc, x, y, z, withCoord, fromPhone = false) => {
  _dispatcher.dispatcher.sendPos(title, desc, new mp.Vector3(x, y, z), withCoord, fromPhone ? player : undefined);
});
mp.events.addRemoteCounted('server:dispatcher:sendLocalPos', (player, title, desc, x, y, z, fractionId, withCoord) => {
  _dispatcher.dispatcher.sendLocalPos(title, desc, new mp.Vector3(x, y, z), fractionId, withCoord);
});
mp.events.addRemoteCounted('server:taskFollow', player => {
  if (!_user.user.isLogin(player)) return;

  let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 5.0);

  if (!_user.user.isLogin(nplayer)) return;

  if (!_user.user.isTie(nplayer) && !_user.user.isCuff(nplayer)) {
    player.notify('~r~Игрок должен быть связан или в наручниках');
    return;
  }

  nplayer.followTarget = !nplayer.followTarget;

  if (nplayer.followTarget) {
    nplayer.call('client:taskFollow', [player]);

    _user.user.loginterract(player, nplayer, "GosFollow", `Повёл игрока за собой`);
  } else {
    nplayer.call('client:taskFollowStop', [player]);

    _user.user.loginterract(player, nplayer, "GosFollow", `Освободил игрока`);
  }
});
mp.events.addRemoteCounted('server:taskRemoveMask', player => {
  if (!_user.user.isLogin(player)) return;

  let nplayer = _methods.methods.getNearestPlayerWithPlayer(player, 5.0);

  if (!_user.user.isLogin(nplayer)) return;

  if (!_user.user.isTie(nplayer) && !_user.user.isCuff(nplayer)) {
    player.notify('~r~Игрок должен быть связан или в наручниках');
    return;
  }

  _user.user.loginterract(player, nplayer, "GosUnmask", `Снял маску с игрока`);

  nplayer.call('client:taskRemoveMask', [player]);
});
mp.events.addRemoteCounted('server:nplayer:notify', (player, nplayer, text) => {
  if (!_user.user.isLogin(nplayer)) return;
  nplayer.notify(text);
});
mp.events.addRemoteCounted('server:player:setVariable', (player, key, value) => {
  if (!_user.user.isLogin(player)) return;
  player.setVariable(key, value);
});
mp.events.addRemoteCounted('server:trucker:showMenu', player => {
  if (!_user.user.isLogin(player)) return;

  _trucker.trucker.showMenu(player);
});
mp.events.addRemoteCounted('server:tucker:acceptOffer', (player, offerId) => {
  if (!_user.user.isLogin(player)) return;

  _trucker.trucker.acceptOffer(player, offerId);
});
mp.events.addRemoteCounted('server:trucker:doneOffer', (player, offerId) => {
  if (!_user.user.isLogin(player)) return;

  _trucker.trucker.doneOffer(player, offerId);
});
mp.events.addRemoteCounted('server:trucker:stop', (player, offerId) => {
  if (!_user.user.isLogin(player)) return;

  _trucker.trucker.stop(player, offerId);
});
mp.events.addRemoteCounted('server:trucker:trySpawnTrailer', (player, offerId) => {
  if (!_user.user.isLogin(player)) return;

  _trucker.trucker.trySpawnTrailer(player, offerId);
});
mp.events.addRemoteCounted('server:user:showJobSkillTopMenu', player => {
  if (!_user.user.isLogin(player)) return;

  let job = _user.user.get(player, 'job');

  let skillCount = 500;

  switch (job) {
    case 'mail':
    case 'mail2':
      skillCount = 1000;
      break;

    case 'taxi1':
    case 'taxi2':
      skillCount = 400;
      job = 'taxi';
      break;

    case 'trucker1':
    case 'trucker2':
    case 'trucker3':
      job = 'trucker';
      skillCount = 1500;
      break;
  }

  if (!_user.user.get(player, `skill_${job}`)) return;

  _user2.userEntity.findAll({
    order: [[`skill_${job}`, 'DESC'], [`last_login`, 'DESC']],
    limit: 20
  }).then(rows => {
    let menuData = new Map();
    rows.forEach(row => {
      let procent = _methods.methods.parseInt(row['skill_' + job]) / skillCount * 100;
      menuData.set(`${row['rp_name']}`, `${procent.toFixed(2)}%`);
    });

    _user.user.showMenu(player, 'Топ 20', 'Топ 20 активных работяг', menuData);
  });
});
mp.events.addRemoteCounted('server:user:giveJobSkill', player => {
  _user.user.giveJobSkill(player);
});
mp.events.addRemoteCounted('server:user:addHistory', (player, type, reason) => {
  _user.user.addHistory(player, type, reason);
});
mp.events.addRemoteCounted('server:user:serVariable', (player, key, val) => {
  if (!mp.players.exists(player)) return;
  player.setVariable(key, val);
});
mp.events.add('playerJoin', player => {
  player.dimension = player.id + 1;
  player.countedTriggers = 0;
  player.countedTriggersSwap = 0;
});
mp.events.add('playerQuit', async (player, exitType, reason) => {
  if (!_user.user.isInMp(player) || player.dimension == 0) {
    let allWeapons = [...player.weaponsAll];

    if (allWeapons.length > 0 && _user.user.isLogin(player)) {
      const user_id = _user.user.getId(player);

      allWeapons.map(weapon => {
        _inventory.inventory.createItem(weapon.item, 1, _inventory.inventory.types.Player, user_id);

        let ammo = parseInt(`${weapon.ammo}`);

        while (ammo > 0) {
          try {
            if (ammo > _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType)) {
              _inventory.inventory.createItem(weapon.ammoType, _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType), 1, user_id);

              ammo -= _inventory.inventory.ammoItemIdToMaxCount(weapon.ammoType);
            } else {
              _inventory.inventory.createItem(weapon.ammoType, ammo, 1, user_id);

              ammo = 0;
            }
          } catch (error) {
            ammo = 0;
          }
        }
      });
    }
  }

  if (mp.players.exists(player)) player.outputChatBox(`!{${_chat.chat.clRed}} Вы отключились от сервера`);

  _methods.methods.debug(`player.quit ${_user.user.getRpName(player)} | ${player.serial} | ${exitType} | ${reason}`);

  if (_user.user.isLogin(player)) {
    if (_user.user.isCuff(player) && player.getVariable('cuffedByGos')) {
      const id = _user.user.getId(player);

      const name = _user.user.getRpName(player);

      _user.user.addHistory(player, 1, "Был задержан органами правопорядка за попытку побега во время ареста");

      setTimeout(() => {
        _user.user.arrestAdmin(id, "Anti-Cheat System", 120, 'выход из игры во время ареста', name);

        _user.user.countAllWarnsByReason(id, "Внимание, в следующий раз, при выходе при аресте, Вы получите предупреждение на свой аккаунт").then(count => {
          if (count > 0) {
            _user.user.warn(id, "Выход из игры во время ареста", "Система", 7);
          } else {
            _user.user.warn(id, "Внимание, в следующий раз, при выходе при аресте, Вы получите предупреждение на свой аккаунт", "Система", 0);
          }
        });
      }, 5000);
    }

    _vehicles.vehicles.removePlayerVehicle(_user.user.getId(player));
  }

  _user.user.setOnlineStatus(player, 0);

  player.lastSave = null;
  if (_user.user.isLogin(player)) _user.user.saveAccount(player, true);

  _methods.methods.saveLog('PlayerActivity', `[DISCONNECT] ${player.socialClub} | ${player.serial} | ${player.address} | ${reason} | ${exitType}`);
});
mp.events.add('playerReady', async player => {
  player.notify = (message, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => {
    try {
      player.call('BN_Show', [message, flashing, textColor, bgColor, flashColor]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  };

  player.notifyWithPicture = (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => {
    try {
      player.call('BN_ShowWithPicture', [title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  };

  player.dimension = player.id + 1;

  try {
    _data.Container.ResetAll(player.id);
  } catch (e) {
    _methods.methods.debug(e);
  }

  _methods.methods.saveLog('PlayerActivity', `[CONNECT] ${player.socialClub} | ${player.serial} | ${player.address}`);

  _methods.methods.debug(`player.ready ${player.serial}`);

  player.dimension = player.id + 1;

  _weather.weather.syncData(player);

  _user.user.ready(player);

  let datas = _enums.enums.vehicleInfo.chunk_inefficient(300);

  datas.map(itm => {
    player.callsocket('client:updateVehicleInfo', [itm]);
  });
});
mp.events.addRemoteCounted('server:updateVehicleInfo', player => {
  try {
    for (let i = 0; i < _methods.methods.parseInt(_enums.enums.vehicleInfo.length / 250) + 1; i++) player.callsocket('client:updateVehicleInfo', [_enums.enums.vehicleInfo.slice(i * 250, i * 250 + 249)]);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:stopAllAnimation', player => {
  try {
    _user.user.stopSyncAnimation(player);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:players:notifyWithPictureToAll', (player, title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor) => {
  _methods.methods.notifyWithPictureToAll(title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
});
mp.events.addRemoteCounted('server:players:notifyWithPictureToFraction', (player, title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor) => {
  _methods.methods.notifyWithPictureToFraction(title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor);
});
mp.events.addRemoteCounted('server:players:notifyWithPictureToFraction2', (player, title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor) => {
  _methods.methods.notifyWithPictureToFraction2(title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor);
});
mp.events.addRemoteCounted('server:players:notifyToFraction', (player, message, fractionId) => {
  _methods.methods.notifyToFraction(message, fractionId);
});
mp.events.addRemoteCounted('server:players:notifyToAll', (player, message) => {
  _methods.methods.notifyToAll(message);
});
mp.events.addRemoteCounted('server:user:setComponentVariation', (player, component, drawableId, textureId, nocheck) => {
  _user.user.setComponentVariation(player, component, drawableId, textureId, nocheck);
});
mp.events.addRemoteCounted('server:vehicles:spawnJobCar', (player, x, y, z, heading, name, job) => {
  _user.user.showLoadDisplay(player);

  setTimeout(function () {
    try {
      _vehicles.vehicles.spawnJobCar(new mp.Vector3(x, y, z), heading, name, job, veh => {
        if (!_vehicles.vehicles.exists(veh)) return;
        if (!_user.user.isLogin(player)) return;
        player.putIntoVehicle(veh, _newrage.RAGE_BETA ? 0 : -1);

        _vehicles.vehicles.set(veh.getVariable('container'), 'owner_id', _user.user.getId(player));

        veh.setVariable('owner_id', _user.user.getId(player));
      });
    } catch (e) {
      _methods.methods.debug(e);
    }

    setTimeout(function () {
      if (!_user.user.isLogin(player)) return;

      _user.user.hideLoadDisplay(player);
    }, 500);
  }, 700);
});
mp.events.addRemoteCounted('server:uniform:sheriff', (player, idx) => {
  try {
    switch (idx) {
      case 0:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.setComponentVariation(player, 10, 0, 0);

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        break;

      case 1:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 8, 35, 0);

          _user.user.setComponentVariation(player, 3, 0, 0);

          _user.user.setComponentVariation(player, 11, 27, 2);

          _user.user.setComponentVariation(player, 4, 64, 2);

          _user.user.setComponentVariation(player, 6, 55, 0);
        } else {
          _user.user.setProp(player, 0, 13, 4);

          _user.user.setComponentVariation(player, 8, 58, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 11, 13, 1);

          _user.user.setComponentVariation(player, 7, 10, 2);

          _user.user.setComponentVariation(player, 4, 23, 1);

          _user.user.setComponentVariation(player, 6, 54, 0);
        }

        break;

      case 2:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 14, 0);

          _user.user.setComponentVariation(player, 4, 64, 1);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 55, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 159, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 250, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 25, 6);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 54, 0);

          _user.user.setComponentVariation(player, 7, 38, 7);

          _user.user.setComponentVariation(player, 8, 58, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 26, 4);
        }

        break;

      case 3:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.updateCharacterFace(player);

        _user.user.setProp(player, 0, 19, 0);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 19, 0);

          _user.user.setComponentVariation(player, 4, 38, 2);

          _user.user.setComponentVariation(player, 5, 57, 9);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 152, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 59, 2);
        } else {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 4);

          _user.user.setComponentVariation(player, 4, 9, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 24, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 122, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 48, 0);
        }

        break;

      case 4:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setProp(player, 0, 116, 1);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 0, 21, 0);

          _user.user.setComponentVariation(player, 8, 160, 0);

          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 11, 46, 2);

          _user.user.setComponentVariation(player, 9, 13, 2);

          _user.user.setComponentVariation(player, 4, 61, 7);

          _user.user.setComponentVariation(player, 6, 24, 0);
        } else {
          _user.user.setProp(player, 0, 117, 1);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 8, 130, 0);

          _user.user.setComponentVariation(player, 3, 17, 0);

          _user.user.setComponentVariation(player, 11, 53, 2);

          _user.user.setComponentVariation(player, 9, 12, 2);

          _user.user.setComponentVariation(player, 4, 59, 7);

          _user.user.setComponentVariation(player, 6, 24, 0);
        }

        break;

      case 5:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 5, 0);

          _user.user.setComponentVariation(player, 4, 6, 1);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 86, 0);

          _user.user.setComponentVariation(player, 8, 38, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 6, 1);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 4, 0);

          _user.user.setComponentVariation(player, 4, 10, 1);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 10, 0);

          _user.user.setComponentVariation(player, 7, 115, 0);

          _user.user.setComponentVariation(player, 8, 10, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 28, 1);
        }

        break;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:uniform:usmc', (player, idx) => {
  try {
    switch (idx) {
      case 0:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.setComponentVariation(player, 10, 0, 0);

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        break;

      case 1:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 14, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 232, 3);

          _user.user.setProp(player, 0, 106, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 222, 3);

          _user.user.setProp(player, 0, 107, 3);
        }

        break;

      case 2:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 3, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 231, 3);

          _user.user.setProp(player, 0, 106, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 221, 3);

          _user.user.setProp(player, 0, 107, 3);
        }

        break;

      case 3:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 3, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 487, 3);

          _user.user.setProp(player, 0, 105, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 106, 3);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 221, 3);

          _user.user.setProp(player, 0, 106, 3);
        }

        break;

      case 4:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 3, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 18, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 230, 3);

          _user.user.setProp(player, 0, 116, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 17, 1);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 16, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 220, 3);

          _user.user.setProp(player, 0, 117, 3);
        }

        break;

      case 5:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 14, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 18, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 232, 3);

          _user.user.setProp(player, 0, 116, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, 240);

          _user.user.setComponentVariation(player, 9, 16, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 222, 3);

          _user.user.setProp(player, 0, 117, 3);
        }

        break;

      case 6:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 19, 0);

          _user.user.setComponentVariation(player, 4, 48, 0);

          _user.user.setComponentVariation(player, 5, 57, 9);

          _user.user.setComponentVariation(player, 6, 36, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 152, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 494, 8);

          _user.user.setProp(player, 0, 19, 0);
        } else {
          _user.user.setProp(player, 0, 0, 4);

          _user.user.setComponentVariation(player, 0, 0, 4);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 4);

          _user.user.setComponentVariation(player, 4, 46, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 35, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 122, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 484, 8);
        }

        break;

      case 7:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setProp(player, 0, 19, 0);

          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 19, 0);

          _user.user.setComponentVariation(player, 4, 38, 2);

          _user.user.setComponentVariation(player, 5, 57, 9);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 152, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 59, 2);
        } else {
          _user.user.setProp(player, 0, 38, 0);

          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 4);

          _user.user.setComponentVariation(player, 4, 9, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 24, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 122, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 48, 0);
        }

        break;

      case 8:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 3, 0);

          _user.user.setComponentVariation(player, 4, 37, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 86, 1);

          _user.user.setComponentVariation(player, 8, 38, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 58, 0);

          _user.user.setProp(player, 0, 112, 6);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 4, 0);

          _user.user.setComponentVariation(player, 4, 10, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 10, 0);

          _user.user.setComponentVariation(player, 7, 115, 1);

          _user.user.setComponentVariation(player, 8, 10, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 28, 0);

          _user.user.setProp(player, 0, 113, 6);
        }

        break;

      case 9:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 4, 90, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, -1);

          _user.user.setComponentVariation(player, 9, 18, 2);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 230, 3);

          _user.user.setProp(player, 0, 116, 0);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 17, 0);

          _user.user.setComponentVariation(player, 4, 87, 3);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 0, -1);

          _user.user.setComponentVariation(player, 9, 16, 2);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 220, 3);

          _user.user.setProp(player, 0, 117, 0);
        }

        break;

      case 10:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 4, 30, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 9, 18, 2);

          _user.user.setComponentVariation(player, 11, 47, 0);

          _user.user.setProp(player, 0, 114, 0);
        } else {
          _user.user.setComponentVariation(player, 3, 33, 0);

          _user.user.setComponentVariation(player, 4, 31, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 9, 16, 2);

          _user.user.setComponentVariation(player, 11, 221, 20);

          _user.user.setProp(player, 0, 115, 0);
        }

        break;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:uniform:sapd', (player, idx) => {
  try {
    switch (idx) {
      case 0:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.setComponentVariation(player, 10, 0, 0);

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        break;

      case 1:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 3, 0, 0);

          _user.user.setComponentVariation(player, 4, 37, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 35, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 86, 0);
        } else {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 35, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 54, 0);

          _user.user.setComponentVariation(player, 7, 38, 0);

          _user.user.setComponentVariation(player, 8, 58, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 13, 3);
        }

        break;

      case 2:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 14, 0);

          _user.user.setComponentVariation(player, 4, 34, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 35, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 48, 0);

          if (_user.user.get(player, 'rank') == 3) _user.user.setComponentVariation(player, 10, 7, 1);else if (_user.user.get(player, 'rank') == 4) _user.user.setComponentVariation(player, 10, 7, 2);else if (_user.user.get(player, 'rank') > 4) _user.user.setComponentVariation(player, 10, 7, 3);
        } else {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 0, 0);

          _user.user.setComponentVariation(player, 4, 35, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 54, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 58, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 55, 0);

          if (_user.user.get(player, 'rank') == 3) _user.user.setComponentVariation(player, 10, 8, 1);else if (_user.user.get(player, 'rank') == 4) _user.user.setComponentVariation(player, 10, 8, 2);else if (_user.user.get(player, 'rank') > 4) _user.user.setComponentVariation(player, 10, 8, 3);
        }

        _user.user.setComponentVariation(player, 9, 0, 0);

        break;

      case 3:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.updateCharacterFace(player);

        _user.user.setProp(player, 0, 19, 0);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 19, 0);

          _user.user.setComponentVariation(player, 4, 38, 2);

          _user.user.setComponentVariation(player, 5, 57, 9);

          _user.user.setComponentVariation(player, 6, 52, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 35, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 59, 2);
        } else {
          _user.user.setComponentVariation(player, 0, 1, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 4);

          _user.user.setComponentVariation(player, 4, 9, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 24, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 57, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 48, 0);
        }

        break;

      case 4:
        try {
          let skin = JSON.parse(_user.user.get(player, 'skin'));
          player.setCustomization(skin['SEX'] == 0, 0, 0, 0, skin['GTAO_SKIN_THRID_ID'], skin['GTAO_SKIN_SECOND_ID'], 0, 0, skin['GTAO_SKIN_MIX'], 0, skin['GTAO_EYE_COLOR'], skin['GTAO_HAIR_COLOR'], 0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
        } catch (e) {
          console.log(e);
        }

        _user.user.set(player, 'hasMask', true);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 56, 1);

          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 4, 32, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 152, 0);

          _user.user.setComponentVariation(player, 9, 12, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 46, 0);

          _user.user.setProp(player, 0, 116, 0);
        } else {
          _user.user.setComponentVariation(player, 1, 52, 0);

          _user.user.setComponentVariation(player, 3, 17, 0);

          _user.user.setComponentVariation(player, 4, 33, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 122, 0);

          _user.user.setComponentVariation(player, 9, 4, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 53, 3);

          _user.user.setProp(player, 0, 117, 0);
        }

        break;

      case 5:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 4, 30, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 152, 0);

          _user.user.setComponentVariation(player, 9, 12, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 103, 4);

          _user.user.setProp(player, 0, 58, 2);
        } else {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 17, 0);

          _user.user.setComponentVariation(player, 4, 31, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 122, 0);

          _user.user.setComponentVariation(player, 9, 4, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 111, 4);

          _user.user.setProp(player, 0, 58, 2);
        }

        break;

      case 6:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 121, 0);

          _user.user.setComponentVariation(player, 3, 0, 0);

          _user.user.setComponentVariation(player, 4, 6, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 160, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 27, 5);

          _user.user.setProp(player, 0, 120, 0);
        } else {
          _user.user.setComponentVariation(player, 1, 121, 0);

          _user.user.setComponentVariation(player, 3, 11, 0);

          _user.user.setComponentVariation(player, 4, 10, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 40, 9);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 130, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 95, 0);

          _user.user.setProp(player, 0, 121, 0);
        }

        break;

      case 7:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 5, 0);

          _user.user.setComponentVariation(player, 4, 6, 2);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 86, 0);

          _user.user.setComponentVariation(player, 8, 38, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 6, 2);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 4, 0);

          _user.user.setComponentVariation(player, 4, 10, 2);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 10, 0);

          _user.user.setComponentVariation(player, 7, 115, 0);

          _user.user.setComponentVariation(player, 8, 10, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 28, 2);
        }

        break;

      case 8:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 5, 0);

          _user.user.setComponentVariation(player, 4, 6, 2);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 86, 0);

          _user.user.setComponentVariation(player, 8, 38, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 6, 2);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 4, 0);

          _user.user.setComponentVariation(player, 4, 10, 2);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 10, 0);

          _user.user.setComponentVariation(player, 7, 115, 0);

          _user.user.setComponentVariation(player, 8, 10, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 28, 2);
        }

        break;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:uniform:ems', (player, idx) => {
  try {
    switch (idx) {
      case 0:
        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.setComponentVariation(player, 10, 0, 0);

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        break;

      case 1:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 109, 0);

          _user.user.setComponentVariation(player, 4, 99, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 72, 0);

          _user.user.setComponentVariation(player, 7, 96, 0);

          _user.user.setComponentVariation(player, 8, 159, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 73, 0);
        } else {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 85, 0);

          _user.user.setComponentVariation(player, 4, 96, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 51, 0);

          _user.user.setComponentVariation(player, 7, 127, 0);

          _user.user.setComponentVariation(player, 8, 129, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 57, 0);

          _user.user.setComponentVariation(player, 11, 250, 0);
        }

        break;

      case 2:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 109, 0);

          _user.user.setComponentVariation(player, 4, 99, 1);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 72, 0);

          _user.user.setComponentVariation(player, 7, 97, 0);

          _user.user.setComponentVariation(player, 8, 159, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 73, 0);
        } else {
          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 85, 0);

          _user.user.setComponentVariation(player, 4, 96, 1);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 51, 0);

          _user.user.setComponentVariation(player, 7, 126, 0);

          _user.user.setComponentVariation(player, 8, 129, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 58, 0);

          _user.user.setComponentVariation(player, 11, 250, 1);
        }

        break;

      case 3:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 0) {
          _user.user.setComponentVariation(player, 11, 221, 22);

          _user.user.setComponentVariation(player, 7, 126, 0);

          _user.user.setComponentVariation(player, 6, 24, 0);

          _user.user.setComponentVariation(player, 4, 3, 3);

          _user.user.setComponentVariation(player, 3, 86, 1);
        } else {
          _user.user.setComponentVariation(player, 4, 23, 0);

          _user.user.setComponentVariation(player, 6, 4, 2);

          _user.user.setComponentVariation(player, 7, 96, 0);

          _user.user.setComponentVariation(player, 11, 232, 22);
        }

        break;

      case 4:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 0) {
          _user.user.setComponentVariation(player, 11, 42, 0);

          _user.user.setComponentVariation(player, 7, 126, 0);

          _user.user.setComponentVariation(player, 6, 3, 0);

          _user.user.setComponentVariation(player, 4, 24, 1);

          _user.user.setComponentVariation(player, 3, 92, 0);
        } else {
          _user.user.setComponentVariation(player, 4, 23, 0);

          _user.user.setComponentVariation(player, 6, 4, 2);

          _user.user.setComponentVariation(player, 7, 96, 0);

          _user.user.setComponentVariation(player, 11, 231, 22);
        }

        break;

      case 5:
        _user.user.clearAllProp(player);

        if (_user.user.getSex(player) == 0) {
          _user.user.setComponentVariation(player, 11, 497, 2);

          _user.user.setComponentVariation(player, 7, 127, 0);

          _user.user.setComponentVariation(player, 6, 7, 0);

          _user.user.setComponentVariation(player, 4, 20, 0);

          _user.user.setComponentVariation(player, 3, 74, 0);
        } else {
          _user.user.setComponentVariation(player, 3, 98, 0);

          _user.user.setComponentVariation(player, 4, 23, 0);

          _user.user.setComponentVariation(player, 6, 4, 2);

          _user.user.setComponentVariation(player, 7, 97, 0);

          _user.user.setComponentVariation(player, 11, 9, 8);
        }

        break;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:uniform:fib', (player, idx) => {
  try {
    switch (idx) {
      case 0:
        _data.Container.Reset(player.id, 'hasMask');

        _user.user.setComponentVariation(player, 1, 0, 0);

        _user.user.setComponentVariation(player, 7, 0, 0);

        _user.user.setComponentVariation(player, 9, 0, 0);

        _user.user.setComponentVariation(player, 10, 0, 0);

        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        break;

      case 1:
        try {
          let skin = JSON.parse(_user.user.get(player, 'skin'));
          player.setCustomization(skin['SEX'] == 0, 0, 0, 0, skin['GTAO_SKIN_THRID_ID'], skin['GTAO_SKIN_SECOND_ID'], 0, 0, skin['GTAO_SKIN_MIX'], 0, skin['GTAO_EYE_COLOR'], skin['GTAO_HAIR_COLOR'], 0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);
        } catch (e) {
          console.log(e);
        }

        _user.user.set(player, 'hasMask', true);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 1, 56, 0);

          _user.user.setComponentVariation(player, 3, 18, 0);

          _user.user.setComponentVariation(player, 4, 32, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 35, 0);

          _user.user.setComponentVariation(player, 9, 12, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 43, 0);

          _user.user.setProp(player, 0, 116, 0);
        } else {
          _user.user.setComponentVariation(player, 1, 52, 0);

          _user.user.setComponentVariation(player, 3, 17, 0);

          _user.user.setComponentVariation(player, 4, 33, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 25, 0);

          _user.user.setComponentVariation(player, 7, 0, 0);

          _user.user.setComponentVariation(player, 8, 57, 0);

          _user.user.setComponentVariation(player, 9, 4, 1);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 139, 3);

          _user.user.setProp(player, 0, 117, 0);
        }

        break;

      case 2:
        _user.user.clearAllProp(player);

        _user.user.updateCharacterCloth(player);

        _user.user.updateCharacterFace(player);

        if (_user.user.getSex(player) == 1) {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 3, 0);

          _user.user.setComponentVariation(player, 4, 37, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 29, 0);

          _user.user.setComponentVariation(player, 7, 86, 0);

          _user.user.setComponentVariation(player, 8, 38, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 58, 0);
        } else {
          _user.user.setComponentVariation(player, 0, 0, 0);

          _user.user.setComponentVariation(player, 1, 0, 0);

          _user.user.setComponentVariation(player, 3, 4, 0);

          _user.user.setComponentVariation(player, 4, 10, 0);

          _user.user.setComponentVariation(player, 5, 0, 0);

          _user.user.setComponentVariation(player, 6, 10, 0);

          _user.user.setComponentVariation(player, 7, 115, 1);

          _user.user.setComponentVariation(player, 8, 10, 0);

          _user.user.setComponentVariation(player, 9, 0, 0);

          _user.user.setComponentVariation(player, 10, 0, 0);

          _user.user.setComponentVariation(player, 11, 28, 0);
        }

        break;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:uniform:gr6', player => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getSex(player) == 1) {
    _user.user.setComponentVariation(player, 3, 14, 0);

    _user.user.setComponentVariation(player, 4, 34, 0);

    _user.user.setComponentVariation(player, 5, 0, 0);

    _user.user.setComponentVariation(player, 6, 25, 0);

    _user.user.setComponentVariation(player, 7, 0, 0);

    _user.user.setComponentVariation(player, 8, 152, 0);

    _user.user.setComponentVariation(player, 9, 6, 1);

    _user.user.setComponentVariation(player, 10, 0, 0);

    _user.user.setComponentVariation(player, 11, 85, 0);
  } else {
    _user.user.setComponentVariation(player, 3, 11, 0);

    _user.user.setComponentVariation(player, 4, 13, 0);

    _user.user.setComponentVariation(player, 5, 0, 0);

    _user.user.setComponentVariation(player, 6, 25, 0);

    _user.user.setComponentVariation(player, 7, 0, 0);

    _user.user.setComponentVariation(player, 8, 122, 0);

    _user.user.setComponentVariation(player, 9, 4, 1);

    _user.user.setComponentVariation(player, 10, 0, 0);

    _user.user.setComponentVariation(player, 11, 26, 1);
  }

  player.setVariable('onDutyGr6', true);
});
mp.events.addRemoteCounted('server:offDuty:gr6', player => {
  if (_user.user.isLogin(player)) player.setVariable('onDutyGr6', false);
});
mp.events.addRemoteCounted('server:gr6:findPickup', async (player, x, y, z) => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.isDriver(player)) {
      let occupants = player.vehicle.getOccupants();
      if (typeof occupants != "object") return;

      if (occupants.length == 1) {
        player.notify('~b~Работать можно только с напарниками!');
      } else {
        let validStart = true;
        occupants.forEach(function (p) {
          try {
            if (!_user.user.isLogin(p)) return;

            if (!p.getVariable('onDutyGr6')) {
              p.notify('~b~Нельзя работать без снаряжения. Получите снаряжение инкассатора!');
              player.notify('~b~Напарник ~s~' + _user.user.getRpName(p) + ' ~b~не получил снаряжение для работы!');
              validStart = false;
            }
          } catch (error) {
            console.log("CRITICAL ERROR");
            console.log(error);
          }
        });

        if (!validStart) {
          return;
        }

        let isStart = false;
        occupants.map(async p => {
          try {
            if (!_user.user.isLogin(p)) {
              return;
            }

            if (_user.user.get(p, 'job') == 'gr6') {
              if (!_data.Container.Get(player.vehicle.id, 'validWorker' + _user.user.getId(p))) {
                if (!_data.Container.Get(player.vehicle.id, 'validWorkers')) {
                  _data.Container.Set(player.vehicle.id, 'validWorkers', 1);
                } else {
                  if (_data.Container.Get(player.vehicle.id, 'validWorkers') > 4) {
                    return p.notify('~r~Лимит транспорта превышен');
                  }

                  _data.Container.Set(player.vehicle.id, 'validWorkers', _data.Container.Get(player.vehicle.id, 'validWorkers') + 1);
                }
              }

              _data.Container.Set(player.vehicle.id, 'validWorker' + _user.user.getId(p), true);

              p.gr6Veh = player.vehicle;
              if (_user.user.getRpName(p) == _user.user.getRpName(player)) return _user.user.setWaypoint(p, x, y);
              if (isStart) return _user.user.setWaypoint(p, x, y);

              let status = _user.user.get(p, "is6Duty");

              if (!status) return p.notify('~r~Вы не на смене');
              p.notify('~b~Вы получили задание');
              player.notify('~b~Напарник: ~s~' + _user.user.getRpName(p));
              p.callsocket('client:createGr6Checkpoint', [x, y, z]);
              isStart = true;
            }
          } catch (error) {
            console.log("CRITICAL ERROR");
            console.log(error);
          }
        });
      }
    }
  } catch (e) {
    console.log("ERROR server:gr6:findPickup");
    console.log(e);
  }
});
mp.events.addRemoteCounted('server:gr6:unload', (player, vId) => {
  try {
    if (!_user.user.isLogin(player)) return;

    if (_user.user.isDriver(player)) {
      mp.vehicles.forEach(function (v) {
        if (_vehicles.vehicles.exists(v) && v.id == vId) {
          let countOcc = v.getOccupants().length + 1;

          let money = _methods.methods.parseInt(v.getVariable('gr6Money') / 100);

          v.getOccupants().forEach(function (p) {
            if (!_user.user.isLogin(p) || _user.user.get(p, 'job') != 'gr6') return;

            if (_data.Container.Has(v.id, 'validWorker' + _user.user.getId(p))) {
              let currentMoney = _methods.methods.parseInt(money / countOcc);

              if (_user.user.get(p, 'skill_gr6') >= 500) currentMoney *= 1.2;

              _user.user.addCashMoney(p, currentMoney);

              _business.business.addMoney(162, _methods.methods.parseInt(currentMoney / 10));

              _coffer.coffer.removeMoney(currentMoney + _methods.methods.parseInt(currentMoney / 10));

              p.notify('~g~Вы заработали: ~s~$' + _methods.methods.numberFormat(currentMoney));

              _data.Container.Reset(v.id, 'validWorker' + _user.user.getId(p));

              p.gr6Veh = null;
              if (currentMoney > 0) _user.user.giveJobSkill(p);
            } else {
              p.notify('~r~Вы не являетесь напарником ' + _user.user.getRpName(player));
              p.notify('~r~Зарплату вы не получили');
            }
          });
          v.setVariable('gr6Money', 0);
        }
      });
    }
  } catch (error) {
    console.log("ERROR server:gr6:unload");
    console.log(error);
  }
});
mp.events.addRemoteCounted('server:gr6:delete', player => {
  try {
    if (!_user.user.isLogin(player)) return;
    let veh = player.vehicle;

    if (_user.user.isDriver(player)) {
      if (veh.getVariable('owner_id') == _user.user.getId(player)) {
        _user.user.showLoadDisplay(player);

        setTimeout(function () {
          mp.players.forEach(pl => {
            if (!_user.user.isLogin(pl)) return;

            if (pl.gr6Veh == veh) {
              pl.gr6Veh = null;
            }
          });

          _data.Container.Set(veh.id, 'validWorkers', 0);

          _vehicles.vehicles.respawn(veh);

          setTimeout(function () {
            if (!_user.user.isLogin(player)) return;

            _user.user.hideLoadDisplay(player);

            _user.user.addCashMoney(player, 4500);

            player.notify('~b~Вы вернули транспорт в гараж');
          }, 500);
        }, 700);
      } else {
        player.notify('~r~Не вы арендовали, не вам сдавать.');
      }
    }
  } catch (error) {
    console.log("ERROR server:gr6:delete");
    console.log(error);
  }
});
mp.events.addRemoteCounted('server:showMember2ListMenu', player => {
  if (!_user.user.isLogin(player)) return;

  let fractionId = _user.user.get(player, 'fraction_id2');

  if (!fractionId) return;

  _user2.userEntity.findAll({
    where: {
      fraction_id2: fractionId
    },
    order: [['rank2', 'DESC']],
    attributes: ["fraction_id2", "tag", "id", "rank2", "rp_name", "last_login", "is_online"]
  }).then(rows => {
    let resultData = new Map();
    rows.forEach(function (item) {
      let nuser = _user.user.getPlayerById(item.id);

      if (nuser && mp.players.exists(nuser)) resultData.set('~g~*~s~ ' + item.rp_name, `Ранг ${item.rank2}` + '\nТег: ' + (item.tag ? item.tag : "Не указан") + (_user.user.isAdminNow(player) ? `\n (ID: ${item.id})` : ''));
    });
    rows.forEach(function (item) {
      let nuser = _user.user.getPlayerById(item.id);

      if (!nuser || !mp.players.exists(nuser)) resultData.set('~r~*~s~ ' + item.rp_name, `Ранг ${item.rank2}` + '\n' + _methods.methods.unixTimeStampToDateTime(item.last_login) + (_user.user.isAdminNow(player) ? `\n (ID: ${item.id})` : ''));
    });
    player.call('client:showMember2ListMenu', [Array.from(resultData)]);
  });
});
mp.events.addRemoteCounted('server:giveRank2', (player, nick, rank) => {
  if (!_user.user.isLogin(player)) return;
  if (rank == 11) return;
  let isOnline = false;
  mp.players.forEach(function (pl) {
    if (!_user.user.isLogin(pl)) return;
    if (_user.user.getRpName(pl) != nick) return;

    if (_user.user.get(pl, 'rank2') == 11) {
      player.notify('~r~Нельзя изменить ранг лидеру');
      isOnline = true;
      return;
    }

    _user.user.loginterract(player, pl, "SetRank2", `Выдал ранг ${rank}`);

    _user.user.set(pl, 'rank2', rank);

    pl.notify('~b~Вам выдан ранг: ~s~' + rank);
    player.notify('~b~Вы выдали ранг: ~s~' + nick + ' - ' + rank);
    setTimeout(function () {
      _user.user.updateClientCache(pl);
    }, 500);
    isOnline = true;
  });

  if (!isOnline) {
    _user2.userEntity.update({
      rank2: rank
    }, {
      where: {
        rp_name: nick,
        rank2: {
          [_sequelize.Op.lt]: 11
        }
      }
    });

    _user.user.log(player, "SetRank2", `Выдал ранг ${rank} оффлайн ${nick}`);

    player.notify('~b~Вы выдали ранг: ~s~' + nick + ' - ' + rank);
  }
});
mp.events.addRemoteCounted('server:uninvite2', (player, nick) => {
  if (!_user.user.isLogin(player)) return;
  let isOnline = false;
  mp.players.forEach(function (pl) {
    if (!_user.user.isLogin(pl)) return;
    if (_user.user.getRpName(pl) != nick) return;

    if (_user.user.get(pl, 'rank2') == 11) {
      player.notify('~r~Нельзя уволить лидера');
      isOnline = true;
      return;
    }

    _user.user.loginterract(player, pl, "UnInvite2", "Уволил из не офф организации");

    _user.user.set(pl, 'rank2', 0);

    _user.user.set(pl, 'fraction_id2', 0);

    pl.notify('~r~Вас уволили из организации');
    player.notify('~b~Вы уволили: ~s~' + nick);

    _user.user.set(pl, 'fractionType', 0);

    setTimeout(function () {
      _user.user.updateClientCache(pl);
    }, 500);
    isOnline = true;
  });

  if (!isOnline) {
    if (!_user.user.isLeader2(player)) {
      player.notify('~r~Вы не лидер чтобы увольнять оффлайн');
      return;
    }

    _user2.userEntity.update({
      rank2: 0,
      fraction_id2: 0
    }, {
      where: {
        rp_name: nick,
        rank2: {
          [_sequelize.Op.lt]: 11
        }
      }
    });

    _user.user.log(player, "UnInvite2", "Уволил из не офф организации в оффлайне " + nick);

    player.notify('~b~Вы уволили: ~s~' + nick);
  }
});
mp.events.addRemoteCounted('server:business:cloth:change', (player, body, clothId, color, torso, torsoColor, parachute, parachuteColor) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.change(player, body, clothId, color, torso, torsoColor, parachute, parachuteColor);
});
mp.events.addRemoteCounted('server:business:cloth:buy', (player, price, body, clothId, color, torso, torsoColor, parachute, parachuteColor, shopId, isFree) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.buy(player, price, body, clothId, color, torso, torsoColor, parachute, parachuteColor, shopId, isFree);
});
mp.events.addRemoteCounted('server:business:cloth:changeMask', (player, clothId, color) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.changeMask(player, clothId, color);
});
mp.events.addRemoteCounted('server:business:cloth:buyMask', (player, price, clothId, color, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.buyMask(player, price, clothId, color, shopId);
});
mp.events.addRemoteCounted('server:business:cloth:changeProp', (player, body, clothId, color) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.changeProp(player, body, clothId, color);
});
mp.events.addRemoteCounted('server:business:cloth:buyProp', (player, price, body, clothId, color, shopId, isFree) => {
  if (!_user.user.isLogin(player)) return;

  _cloth.cloth.buyProp(player, price, body, clothId, color, shopId, isFree);
});
mp.events.addRemoteCounted('server:business:upgradeType', (player, type, id) => {
  if (!_user.user.isLogin(player)) return;

  _business.business.upgradeType(player, type, id);
});
mp.events.addRemoteCounted('server:user:clearAllProp', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.clearAllProp(player);
});
mp.events.addRemoteCounted('server:user:setProp', (player, slot, type, color) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.setProp(player, slot, type, color);
});
mp.events.addRemoteCounted('server:playAnimation', (player, name1, name2, flag, accessVeh) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.playAnimation(player, name1, name2, flag, accessVeh);
});
mp.events.addRemoteCounted('server:playArrestAnimation', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.playArrestAnimation(player);
});
mp.events.addRemoteCounted('server:playAnimationWithUser', (player, userId, animId) => {
  if (!_user.user.isLogin(player)) return;

  let target = _user.user.getPlayerById(userId);

  if (_user.user.isLogin(target)) {
    if (_methods.methods.distanceToPos(target.position, player.position) > 3) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (animId != 0) {
      if (_user.user.has(player, 'useAnm')) {
        player.notify('~r~Нельзя так часто использовать анимацию');
        return;
      }
    }

    let tPos = target.position;
    let pPos = target.position;

    _user.user.headingToTarget(target, player.id);

    _user.user.headingToTarget(player, target.id);

    setTimeout(function () {
      _user.user.playAnimation(player, _enums.enums.animTarget[animId][1], _enums.enums.animTarget[animId][2], 8);

      _user.user.playAnimation(target, _enums.enums.animTarget[animId][4], _enums.enums.animTarget[animId][5], 8);
    }, 2100);

    _user.user.set(player, 'useAnm', true);

    setTimeout(function () {
      if (_user.user.isLogin(player)) _user.user.reset(player, 'useAnm');
    }, 180000);
  } else player.notify('~r~Вы слишком далеко');
});
mp.events.addRemoteCounted('playAnimationWithUserAsk', (player, userId, animId) => {
  if (!_user.user.isLogin(player)) return;

  let target = _user.user.getPlayerById(userId);

  if (_user.user.isLogin(target)) {
    if (_methods.methods.distanceToPos(target.position, player.position) < 3) {
      player.notify('~r~Вы слишком далеко');
      return;
    }
  } else player.notify('~r~Вы слишком далеко');
});
mp.events.addRemoteCounted('server:playAnimationByPlayerId', (player, name1, name2, flag) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.playAnimation(player, name1, name2, flag);
});
mp.events.addRemoteCounted('server:playScenario', (player, name, x, y, z, h, teleport = true) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.playScenario(player, name, x, y, z, h, teleport);
});
mp.events.addRemoteCounted('server:stopScenario', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.stopScenario(player);
});
mp.events.addRemoteCounted('server:playNearestScenarioCoord', (player, x, y, z, r) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.playNearestScenarioCoord(player, x, y, z, r);
});
mp.events.addRemoteCounted('server:coffer:addMoney', (player, money) => {
  _coffer.coffer.addMoney(money);
});
mp.events.addRemoteCounted('server:coffer:removeMoney', (player, money) => {
  _coffer.coffer.removeMoney(money);
});
mp.events.addRemoteCounted('server:coffer:setMoney', (player, money) => {
  _coffer.coffer.setMoney(money);
});
mp.events.addRemoteCounted('server:business:addMoney', (player, id, money, ignoreLimit) => {
  _business.business.addMoney(id, money, ignoreLimit);
});
mp.events.addRemoteCounted('server:user:addMoney', (player, money) => {
  _user.user.addMoney(player, money);
});
mp.events.addRemoteCounted('server:user:removeMoney', (player, money) => {
  _user.user.removeMoney(player, money);
});
mp.events.addRemoteCounted('server:user:setMoney', (player, money) => {
  _user.user.setMoney(player, money);
});
mp.events.addRemoteCounted('server:user:addBankMoney', (player, money) => {
  _user.user.addBankMoney(player, money);
});
mp.events.addRemoteCounted('server:user:removeBankMoney', (player, money) => {
  _user.user.removeBankMoney(player, money);
});
mp.events.addRemoteCounted('server:user:setBankMoney', (player, money) => {
  _user.user.setBankMoney(player, money);
});
mp.events.addRemoteCounted('server:user:addCashMoney', (player, money) => {
  _user.user.addCashMoney(player, money);
});
mp.events.addRemoteCounted('server:user:removeCashMoney', (player, money) => {
  _user.user.removeCashMoney(player, money);
});
mp.events.addRemoteCounted('server:user:setCashMoney', (player, money) => {
  _methods.methods.saveLog('MoneyDupe', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) ${_user.user.getCashMoney(player)} ${money}`);

  _user.user.setCashMoney(player, money);
});
mp.events.addRemoteCounted('server:business:buy', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _business.business.buy(player, id);
});
mp.events.addRemoteCounted('server:business:sell', player => {
  if (!_user.user.isLogin(player)) return;

  _business.business.sell(player);
});
mp.events.addRemoteCounted('server:houses:buy', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _houses.houses.buy(player, id);
});
mp.events.addRemoteCounted('server:houses:updatePin', (player, id, pin) => {
  if (!_user.user.isLogin(player)) return;

  _houses.houses.updatePin(id, pin);
});
mp.events.addRemoteCounted('server:condo:buy', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _condo.condo.buy(player, id);
});
mp.events.addRemoteCounted('server:condo:updatePin', (player, id, pin) => {
  if (!_user.user.isLogin(player)) return;

  _condo.condo.updatePin(id, pin);
});
mp.events.addRemoteCounted('server:apartments:updatePin', (player, id, pin) => {
  if (!_user.user.isLogin(player)) return;

  _apartments.apartments.updatePin(id, pin);
});
mp.events.addRemoteCounted('server:stock:buy', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _stock.stock.buy(player, id);
});
mp.events.addRemoteCounted('server:stock:updatePin1', (player, id, pin) => {
  _stock.stock.updatePin1(id, pin);
});
mp.events.addRemoteCounted('server:stock:updatePin2', (player, id, pin) => {
  _stock.stock.updatePin2(id, pin);
});
mp.events.addRemoteCounted('server:stock:updatePin3', (player, id, pin) => {
  _stock.stock.updatePin3(id, pin);
});
mp.events.addRemoteCounted('server:stock:addLog', (player, name, text, stockId) => {
  _stock.stock.addLog(name, text, stockId);
});
mp.events.addRemoteCounted('server:events:floorList', (player, floor, buildId) => {
  if (!_user.user.isLogin(player)) return;
  floor = _methods.methods.parseInt(floor);
  buildId = _methods.methods.parseInt(buildId);

  _apartmentEntity.apartmentEntity.findAll({
    where: {
      floor: floor,
      build_id: buildId
    }
  }).then(rows => {
    let resultData = new Map();
    rows.forEach(function (item) {
      resultData.set(_methods.methods.parseInt(item['id']), item['user_name']);
    });
    player.call('client:showApartmentFloorListMenu', [Array.from(resultData)]);
  });
});
mp.events.addRemoteCounted('server:apartments:enter', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  id = _methods.methods.parseInt(id);

  let apartData = _apartments.apartments.getApartData(id);

  if (apartData == null || apartData.get('id') == undefined) {
    player.notify('~r~Ошибка загрузки квартиры #1');
    return;
  }

  let pos = _apartments.apartments.getInteriorCoords(apartData.get('interior_id'), apartData.get('is_exterior'));

  _user.user.teleport(player, pos.x, pos.y, pos.z);

  player.dimension = id + 100000;
});
mp.events.addRemoteCounted('server:apartments:exit', (player, buildId) => {
  if (!_user.user.isLogin(player)) return;
  buildId = _methods.methods.parseInt(buildId);

  _user.user.teleport(player, _enums.enums.buildListData[buildId][0], _enums.enums.buildListData[buildId][1], _enums.enums.buildListData[buildId][2]);

  player.dimension = 0;
});
mp.events.addRemoteCounted('server:apartments:buy', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _apartments.apartments.buy(player, _methods.methods.parseInt(id));
});
mp.events.addRemoteCounted('server:events:showApartmentListMenu', (player, buildId) => {
  if (!_user.user.isLogin(player)) return;
  player.call('client:showApartmentListMenu', [_enums.enums.buildListData[buildId][3], buildId]);
});
mp.events.addRemoteCounted('server:housePin:buy', async (player, pin, shopId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getMoney(player) < 20000) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  let hId = _user.user.get(player, 'id_house');

  if (_houses.houses.get(hId, 'pin') > 0) {
    player.notify('~r~У Вас уже установлен пинкод');
    let status = await _user.user.accept(player, "Установить заново?");
    if (!status) return;
  }

  _user.user.removeMoney(player, 20000);

  if (shopId == 0) {
    _business.business.addMoney(92, 3000);

    _business.business.addMoney(120, 3500);

    _business.business.addMoney(126, 3500);
  } else {
    _business.business.addMoney(shopId, 10000);
  }

  _houses.houses.updatePin(_user.user.get(player, 'id_house'), pin);

  player.notify('~g~Вы произвели апгрейд недвижимости');
});
mp.events.addRemoteCounted('server:apartPin:buy', async (player, pin, shopId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getMoney(player) < 20000) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  let hId = _user.user.get(player, 'apartment_id');

  if (_apartments.apartments.get(hId, 'pin') > 0) {
    player.notify('~r~У Вас уже установлен пинкод');
    let status = await _user.user.accept(player, "Установить заново?");
    if (!status) return;
  }

  _user.user.removeMoney(player, 20000);

  if (shopId == 0) {
    _business.business.addMoney(92, 3000);

    _business.business.addMoney(120, 3500);

    _business.business.addMoney(126, 3500);
  } else {
    _business.business.addMoney(shopId, 10000);
  }

  _apartments.apartments.updatePin(_user.user.get(player, 'apartment_id'), pin);

  player.notify('~g~Вы произвели апгрейд недвижимости');
});
mp.events.addRemoteCounted('server:condoPin:buy', async (player, pin, shopId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getMoney(player) < 10000) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  let hId = _user.user.get(player, 'condo_id');

  if (_condo.condo.get(hId, 'pin') > 0) {
    player.notify('~r~У Вас уже установлен пинкод');
    let status = await _user.user.accept(player, "Установить заново?");
    if (!status) return;
  }

  _user.user.removeMoney(player, 10000);

  if (shopId == 0) {
    _business.business.addMoney(92, 3000);

    _business.business.addMoney(120, 3500);

    _business.business.addMoney(126, 3500);
  } else {
    _business.business.addMoney(shopId, 10000);
  }

  _business.business.addMoney(shopId, 10000);

  _condo.condo.updatePin(_user.user.get(player, 'condo_id'), pin);

  player.notify('~g~Вы произвели апгрейд недвижимости');
});
mp.events.addRemoteCounted('server:gun:buy', (player, itemId, price, count, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _gun.gun.buy(player, itemId, price, count, shopId);
});
let sellVehList = [];
mp.events.addRemoteCounted('server:sellVeh', (player, number) => {
  if (!_user.user.isLogin(player)) return;

  let veh = _vehicles.vehicles.findVehicleByNumber(number);

  if (!_vehicles.vehicles.exists(veh)) return;

  if (_weather.weather.getHour() < 22 && _weather.weather.getHour() > 4) {
    player.notify('~r~Доступно только с 22 до 4 утра игрового времени');
    return;
  }

  if (_user.user.has(player, 'grabVeh')) {
    player.notify('~r~Вы не можете сейчас сбыть транспорт');
    return;
  }

  if (veh.fractiongarage) return player.notify('~r~ТС фракции сбыть нельзя');

  if (sellVehList.includes(veh.numberPlate)) {
    return player.notify('~r~Данный ТС сбыть нельзя');
  }

  let money = 100;

  let vInfo = _methods.methods.getVehicleInfo(veh.model);

  switch (vInfo.class_name) {
    case 'Emergency':
    case 'Boats':
    case 'Helicopters':
    case 'Planes':
      player.notify('~r~Мы такое не принимаем');
      return;

    case 'Sports Classics':
      money += 350;
      break;

    case 'Sports':
    case 'Super':
      money += 220;
      break;

    case 'SUVs':
    case 'Muscle':
    case 'Off-Road':
      money += 90;
      break;
  }

  _user.user.showLoadDisplay(player);

  money *= 3;

  _user.user.addCashMoney(player, money);

  _user.user.set(player, 'grabVeh', true);

  sellVehList.push(veh.numberPlate);
  setTimeout(function () {
    if (!_user.user.isLogin(player)) return;

    _user.user.hideLoadDisplay(player);

    player.notify('~g~Вы заработали: ~s~$' + money);
    if (!_vehicles.vehicles.exists(veh)) return;

    _vehicles.vehicles.respawn(veh);
  }, 1000);
});
mp.events.addRemoteCounted('server:lsc:showColor1', (player, number, idx) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.showColor1(player, number, idx);
});
mp.events.addRemoteCounted('server:lsc:showColor2', (player, number, idx) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.showColor2(player, number, idx);
});
mp.events.addRemoteCounted('server:lsc:buyColor1', (player, number, idx, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.buyColor1(player, number, idx, price, shopId);
});
mp.events.addRemoteCounted('server:lsc:buyColor2', (player, number, idx, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.buyColor2(player, number, idx, price, shopId);
});
mp.events.addRemoteCounted('server:lsc:resetMod', (player, number) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.resetMod(number);
});
mp.events.addRemoteCounted('server:lsc:showLscVehicleTunningMenu', (player, shopId, idx, vehNumber, price) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let veh = _vehicles.vehicles.findVehicleByNumber(vehNumber);

    if (!_user.user.isAdmin(player)) {
      if (veh.getVariable('id_user') < 1) {
        player.notify('~r~Транспорт должен быть личный');
        return;
      }
    }

    let vehInfo = _methods.methods.getVehicleInfo(veh.model);

    if (vehInfo.class_name == 'Cycles' || vehInfo.class_name == 'Helicopters' || vehInfo.class_name == 'Planes' || vehInfo.class_name == 'Commercials') {
      player.notify('~r~Данный транспорт нельзя тюнинговать');
      return;
    }

    veh.position = new mp.Vector3(_lsc.lsc.carPos[idx][0], _lsc.lsc.carPos[idx][1], veh.position.z);
    veh.rotation = new mp.Vector3(0, 0, _lsc.lsc.carPos[idx][3]);
    player.call('client:menuList:showLscVehicleTunningMenu', [shopId, idx, vehNumber, veh.id, price]);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:lsc:checkTun', (player, vehNumber, modType, idx) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.showTun(player, vehNumber, modType, idx);
});
mp.events.addRemoteCounted('server:tattoo:buy', (player, slot, type, zone, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _tattoo.tattoo.buy(player, slot, type, zone, price, shopId);
});
mp.events.addRemoteCounted('server:print:buy', (player, slot, type, price) => {
  if (!_user.user.isLogin(player)) return;

  _tattoo.tattoo.buyPrint(player, slot, type, price);
});
mp.events.addRemoteCounted('server:tattoo:clear', (player, zone, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _tattoo.tattoo.clear(player, zone, price, shopId);
});
mp.events.addRemoteCounted('server:lsc:buyTun', (player, vehNumber, modType, idx, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.buyTun(player, vehNumber, modType, idx, price, shopId);
});
mp.events.addRemoteCounted('server:lsc:resetSTun', (player, vehNumber, modType) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.resetSTun(player, vehNumber, modType);
});
mp.events.addRemoteCounted('server:lsc:buy', (player, number, price, shopId, action, newNumber) => {
  if (!_user.user.isLogin(player)) return;

  _lsc.lsc.buy(player, number, price, shopId, action, newNumber);
});
mp.events.addRemoteCounted('server:shop:buy', (player, itemId, price, shopId, nalog = 0) => {
  if (!_user.user.isLogin(player)) return;

  _shop.shop.buy(player, itemId, price, shopId, nalog);
});
mp.events.addRemoteCounted('server:licenseCenter:buy', (player, type, price) => {
  if (!_user.user.isLogin(player)) return;

  _methods.methods.debug('Event: server:licenseCenter:buy');

  _licenseCenter.licenseCenter.buy(player, type, price);
});
mp.events.addRemoteCounted('server:rent:buy', (player, hash, price, shopId) => {
  if (!_user.user.isLogin(player)) return;

  _rent.rent.buy(player, hash, player.position, price, shopId);
});
mp.events.addRemoteCounted('server:user:respawn', (player, x, y, z) => {
  if (!_user.user.isLogin(player)) return;
  player.spawn(new mp.Vector3(x, y, z));
});
mp.events.addRemoteCounted('server:debug:print', (player, text) => {
  if (!_user.user.isLogin(player)) return;
  console.log(text);
});
mp.events.addRemoteCounted('server:changeWaypointPos', (player, x, y) => {
  if (!_user.user.isLogin(player)) return;
  if (!_vehicles.vehicles.exists(player.vehicle)) return;
  player.waypoint = {
    x,
    y
  };
  player.vehicle.getOccupants().forEach(p => {
    if (!_user.user.isLogin(p)) return;

    _user.user.setWaypoint(p, x, y);
  });
});
mp.events.addRemoteCounted('server:setTimeout', (player, miliseconds, callbackEvent) => {
  setTimeout(function () {
    if (!_user.user.isLogin(player)) return;
    player.call(callbackEvent);
  }, miliseconds);
});
let count = 0;
let hashes = [];
mp.events.addRemoteCounted('server:inventory:equipItem', (player, id, itemId, prefix, number, keyId, countItems) => {
  if (!_user.user.isLogin(player)) return;

  if (!_inventory.inventory.allItemsMap().has(id)) {
    _methods.methods.saveLog('ErrorEquip', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) - try equip: ${itemId}, ${prefix}, ${number}, ${countItems}`);

    player.notify('~r~Предмета не существует на сервере');
  } else {
    let item = _inventory.inventory.allItemsMap().get(id);

    if (item.item_id != itemId) return player.notify(`~r~Действие не выполнимо`);
    if (item.owner_type != 1 || item.owner_id != _user.user.getId(player)) return player.notify(`~r~Этот предмет вам более не принадлежит`);

    switch (itemId) {
      case 50:
        _user.user.set(player, 'bank_number', number);

        _user.user.set(player, 'bank_prefix', prefix);

        _user.user.setBankMoney(player, _methods.methods.parseInt(item.count));

        player.notify('~g~Вы экипировали банковскую карту');

        _inventory.inventory.deleteItem(id);

        _user.user.updateClientCache(player);

        break;

      case 140:
      case 141:
        _user.user.addCashMoney(player, countItems);

        player.notify(`~g~Вы положили $${_methods.methods.numberFormat(countItems)} в кошелёк`);

        _inventory.inventory.deleteItem(id);

        break;
    }

    _user.user.log(player, "PlayerInventoryInterraction", `Экипировал @item${id} ${_items.items.getItemNameById(itemId)}`);

    _inventory.inventory.updateInventory(player);
  }
});
mp.events.addRemoteCounted('server:inventory:unEquip', async (player, itemId) => {
  if (!_user.user.isLogin(player)) return;

  switch (itemId) {
    case 50:
      {
        if (_user.user.get(player, 'bank_number') == 0) {
          player.notify('~r~Сначала надо экипировать карту');
          return;
        }

        await _inventory.inventory.addItem(player, 50, 1, _inventory.inventory.types.Player, _user.user.getId(player), _user.user.get(player, 'money_bank'), _user.user.get(player, 'bank_prefix'), _user.user.get(player, 'bank_number'), -1);

        _user.user.set(player, 'bank_number', 0);

        _user.user.set(player, 'bank_prefix', 0);

        _user.user.setBankMoney(player, 0);

        player.notify('~g~Вы убрали банковскую карту');

        _inventory.inventory.updateInventory(player);

        _user.user.updateClientCache(player);

        break;
      }
  }

  _user.user.log(player, "PlayerInventoryInterraction", `Снял с экипировки ${_items.items.getItemNameById(itemId)}`);
});
mp.events.addRemoteCounted('server:inventory:equipGun', (player, id, hash) => {
  if (!_user.user.isLogin(player)) return;

  let item = _inventory.inventory.getById(id);

  if (!item) {
    _methods.methods.saveLog('ErrorEquip', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) - try equip GUN: ${hash}`);

    player.notify('~r~Предмета не существует на сервере');
  } else {
    if (_user.user.hasWeapon(player, item.item_id)) {
      player.notify('~r~Данное оружие уже экипировано');
      return _inventory.inventory.openInventory(player);
    }

    if (_inventory.inventory.currentAmount(1, _user.user.getId(player)) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
      player.notify('~r~У вас перевес');
      return;
    }

    _inventory.inventory.deleteItem(id);

    player.notify('~g~Вы экипировали оружие');

    _user.user.giveWeaponByHash(player, hash, 0);

    _user.user.updateClientCache(player);

    _user.user.log(player, "PlayerInventoryInterraction", `Экипировал оружие ${_items.items.getItemNameById(item.item_id)}`);

    _inventory.inventory.updateInventory(player);
  }
});
mp.events.addRemoteCounted('server:inventory:getItemList', (player, ownerType, ownerId) => {
  if (!_user.user.isLogin(player)) return player.notify("Вы не авторизованы");

  _inventory.inventory.getItemList(player, ownerType, ownerId);
});
mp.events.addRemoteCounted('server:inventory:closeItemMenu', (player, id) => {
  mp.players.call('client:inventory:closeItemMenu', [id]);
});
mp.events.addRemoteCounted('server:inventory:dropItem', (player, id, itemId, posX, posY, posZ, rotX, rotY, rotZ, model, ownerType, ownerId) => {
  if (!_user.user.isLogin(player)) return;

  _inventory.inventory.dropItem(player, id, itemId, posX, posY, posZ, rotX, rotY, rotZ, model, ownerType, ownerId);
});
mp.events.addRemoteCounted('server:inventory:getItemListInRadius', (player, posX, posY) => {
  if (!_user.user.isLogin(player)) return;

  _inventory.inventory.getItemListInRadius(player, posX, posY);
});
mp.events.addRemoteCounted('server:inventory:updateItemOwner', (player, id, ownerType, ownerId) => {
  if (!_user.user.isLogin(player)) return;
  if (ownerType == 8) ownerId = _methods.methods.convertNumberToHash(ownerId);

  _inventory.inventory.updateItemOwner(player, id, ownerType, ownerId);
});
mp.events.addRemoteCounted('server:inventory:updateAmount', (player, id, type) => {
  if (!_user.user.isLogin(player)) return;
  if (type == 8) _methods.methods.convertNumberToHash(id);

  _inventory.inventory.updateAmount(player, id, type);
});
mp.events.addRemoteCounted('server:inventory:deleteDropItem', (player, id) => {
  _inventory.inventory.deleteDropItem(id);

  _inventory.inventory.updateInventory(player);
});
mp.events.addRemoteCounted('server:inventory:deleteItem', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.getItemById(player, id)) return;

  _inventory.inventory.deleteItem(id);

  _inventory.inventory.updateInventory(player);
});
mp.events.addRemoteCounted('server:inventory:useItem', (player, id, itemId) => {
  if (!_user.user.isLogin(player)) return;

  _inventory.inventory.useItem(player, id, itemId);
});
mp.events.addRemoteCounted('server:inventory:addItem', async (player, itemId, count, ownerType, ownerId, countItems, prefix, number, keyId) => {
  if (!_user.user.isLogin(player)) return;
  await _inventory.inventory.addItem(player, itemId, count, ownerType, ownerId, countItems, prefix, number, keyId);

  _user.user.log(player, "PlayerInventoryInterraction", `Выдан предмет x${countItems} @item_id${itemId} ${_items.items.getItemNameById(itemId)} @inventorytype${ownerType} @inventoryid${ownerId} number ${number} key ${keyId}`);

  player.notify("~g~Предмет выдан");

  _inventory.inventory.updateInventory(player);
});
mp.events.addRemoteCounted('server:inventory:updateItemCount', (player, id, count) => {
  if (!_user.user.isLogin(player)) return;

  _inventory.inventory.updateItemCount(id, count);
});
let givedLic = new Map();
mp.events.addRemoteCounted('server:giveLic', (player, id, licName) => {
  if (!_user.user.isLogin(player)) return;
  let licLabel = '';

  switch (licName) {
    case 'allow_marg':
      licLabel = 'рецепт на марихуану';
      break;

    case 'allow_antipohmel':
      licLabel = 'рецепт на антипохмелин';
      break;

    case 'biz_lic':
      licLabel = 'лицензию на бизнес';
      break;

    case 'fish_lic':
      licLabel = 'лицензию на рыбалку';
      break;

    case 'gun_lic':
      licLabel = 'лицензию на оружие';
      break;

    case 'med_lic':
      licLabel = 'мед. страховку';
      break;

    case 'law_lic':
      licLabel = 'лицензию адвоката';
      break;
  }

  if (givedLic.has(id + "_" + licName)) return player.notify("~r~Человек уже получал " + licLabel + "\nОграничение: 1 в ООС сутки");
  mp.players.forEach(function (p) {
    if (p.getVariable('id') == id) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 2) {
        if (_user.user.get(player, 'is_gos_blacklist')) {
          player.notify('~r~Данный человек состоит в чёрном списке');
          return;
        }

        givedLic.set(id + "_" + licName, true);

        _user.user.set(p, licName, true);

        p.notify('~g~Вам выдали: ~s~' + licLabel);
        player.notify('~g~Вы выдали: ~s~' + licLabel);

        _user.user.addHistory(p, 4, 'Получил ' + licLabel + '. Выдал: ' + _user.user.getRpName(player));

        _user.user.updateClientCache(p);
      } else player.notify('~y~Игрок слишком далеко');
    }
  });
});
mp.events.addRemoteCounted('server:removeLic', (player, id, licName) => {
  if (!_user.user.isLogin(player)) return;
  if (_user.user.get(player, 'rank') < 7) return player.notify('~y~Ваш ранг слишком низкий для этого');
  let licLabel = '';

  switch (licName) {
    case 'allow_marg':
      licLabel = 'рецепт на марихуану';
      break;

    case 'biz_lic':
      licLabel = 'лицензию на бизнес';
      break;

    case 'fish_lic':
      licLabel = 'лицензию на рыбалку';
      break;

    case 'gun_lic':
      licLabel = 'лицензию на оружие';
      break;

    case 'med_lic':
      licLabel = 'мед. страховку';
      break;

    case 'law_lic':
      licLabel = 'лицензию адвоката';
      break;
  }

  mp.players.forEach(function (p) {
    if (p.getVariable('id') == id) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 2) {
        _user.user.set(p, licName, false);

        p.notify('~g~У вас изъяли: ~s~' + licLabel);
        player.notify('~g~Вы вас изъяли: ~s~' + licLabel);

        _user.user.addHistory(p, 4, 'Изъято ' + licLabel + '. Изъял: ' + _user.user.getRpName(player));

        _user.user.updateClientCache(p);
      } else player.notify('~y~Игрок слишком далеко');
    }
  });
});
mp.events.addRemoteCounted('server:takeLic', (player, id, licName) => {
  if (!_user.user.isLogin(player)) return;
  let licLabel = '';

  switch (licName) {
    case 'allow_marg':
      licLabel = 'рецепт на марихуану';
      break;

    case 'biz_lic':
      licLabel = 'лицензию на бизнес';
      break;

    case 'fish_lic':
      licLabel = 'лицензию на рыбалку';
      break;

    case 'gun_lic':
      licLabel = 'лицензию на оружие';
      break;

    case 'med_lic':
      licLabel = 'мед. страховку';
      break;

    case 'law_lic':
      licLabel = 'лицензию адвоката';
      break;

    case 'a_lic':
      licLabel = 'лицензию категории B';
      break;

    case 'b_lic':
      licLabel = 'лицензию категории B';
      break;

    case 'c_lic':
      licLabel = 'лицензию категории C';
      break;
  }

  mp.players.forEach(function (p) {
    if (p.getVariable('id') == id) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 2) {
        _user.user.set(p, licName, false);

        p.notify('~g~У Вас изъяли: ~s~' + licLabel);
        player.notify('~g~Вы изъяли: ~s~' + licLabel);

        _user.user.addHistory(p, 4, 'Изъяли ' + licLabel + '. Изъял: ' + _user.user.getRpName(player));

        _user.user.updateClientCache(p);
      } else player.notify('~y~Игрок слишком далеко');
    }
  });
});
mp.events.addRemoteCounted('server:mafiaWar:attack', player => {
  if (!_user.user.isLogin(player)) return;

  _mafiaWar.mafiaWar.startWar(player);
});
mp.events.addRemoteCounted('server:mafiaWar:takeBank', (player, id, sum) => {
  if (!_user.user.isLogin(player)) return;

  _mafiaWar.mafiaWar.takeBank(player, id, sum);
});
setTimeout(() => {
  mp.events.register('server:mafiaWar:attack', player => {
    if (!_user.user.isLogin(player) || !_user.user.isSubLeader(player) || !_user.user.isMafia(player)) return;

    _mafiaWar.mafiaWar.startWar(player);
  });
  mp.events.register('server:mafiaWar:takeBank', (player, id, sum) => {
    if (!_user.user.isLogin(player) || !_user.user.isLeader(player) || !_user.user.isMafia(player)) return;

    _mafiaWar.mafiaWar.takeBank(player, id, sum);
  });
}, 200);
mp.events.addRemoteCounted('server:getMafiaGunCar0', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.Ammo) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 1;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.Ammo);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~Фургон был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Burrito3', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      setTimeout(function () {
        let items = [["30", 5], ["29", 5], ["28", 5], ["153", 10], ["27", 10], ["146", 2]];
        veh.setVariable('chestWeaponItems', JSON.stringify(items));

        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Burrito3~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaGunCar1', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.EasyWeapon) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 2;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.EasyWeapon);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~Фургон был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Burrito3', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      setTimeout(function () {
        let items = [["77", 10], ["71", 5], ["101", 4], ["63", 2], ["153", 5], ["27", 10]];
        veh.setVariable('chestWeaponItems', JSON.stringify(items));

        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Burrito3~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaGunCar2', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.MediumWeapon) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 3;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.MediumWeapon);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~Фургон был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Burrito3', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      setTimeout(function () {
        let items = [["101", 10], ["94", 5], ["87", 2], ["153", 15], ["28", 5]];
        veh.setVariable('chestWeaponItems', JSON.stringify(items));

        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Burrito3~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaGunCar3', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.HardWeapon) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 4;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.HardWeapon);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~Фургон был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Burrito3', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      let items = [["106", 6], ["117", 1], ["108", 4], ["112", 4], ["30", 15], ["146", 2]];
      veh.setVariable('chestWeaponItems', JSON.stringify(items));
      setTimeout(function () {
        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Burrito3~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaDrugCar', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.HardDrugs) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 5;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~ТС был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.HardDrugs);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Habanero', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      let items = [["156", 1], ["176", 1], ["177", 1], ["178", 1], ["179", 1], ["180", 1]];
      veh.setVariable('chestWeaponItems', JSON.stringify(items));
      setTimeout(function () {
        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Habanero~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaMargCar', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.LightDrugs) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 6;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~ТС был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.LightDrugs);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Primo', numberPlate);

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      let items = [["145", 1], ["143", 1]];
      veh.setVariable('chestWeaponItems', JSON.stringify(items));
      setTimeout(function () {
        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Primo~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaSpecialCar', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.Special) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 7;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.Special);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~ТС был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Asea', numberPlate);

      let items = [["276", 1], ["40", 2]];
      veh.setVariable('chestWeaponItems', JSON.stringify(items));

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      setTimeout(function () {
        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Asea~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:getMafiaC4Car', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.getCashMoney(player) < _sharedData.mafiaCars.Bomb) {
      player.notify('~r~У Вас недостаточно денег на руках');
      return;
    }

    const vehcarid = 8;

    const fractionid = _user.user.get(player, 'fraction_id');

    if (mafiaCarsCd.has(fractionid + "_" + vehcarid)) return player.notify("~r~Данный фургон временно недоступен к заказу");
    mafiaCarsCd.set(fractionid + "_" + vehcarid, true);
    setTimeout(() => {
      mafiaCarsCd.delete(fractionid + "_" + vehcarid);
    }, _sharedData.mafiaCarsCdtimer);

    let posId = _methods.methods.getRandomInt(0, _enums.enums.mafiaVehPos.length - 1);

    let pos = new mp.Vector3(_enums.enums.mafiaVehPos[posId][0], _enums.enums.mafiaVehPos[posId][1], _enums.enums.mafiaVehPos[posId][2]);

    _user.user.removeCashMoney(player, _sharedData.mafiaCars.Bomb);

    let numberPlate = _vehicles.vehicles.generateNumber();

    player.notify('~b~ТС был доставлен на точку');
    player.notify('~b~Номера: ~s~' + numberPlate);

    _user.user.setWaypointTarget(player, pos.x, pos.y, pos.z);

    setTimeout(function () {
      let veh = _vehicles.vehicles.spawnCar(pos, _enums.enums.mafiaVehPos[posId][3], 'Asea', numberPlate);

      let items = [["262", 5]];
      veh.setVariable('chestWeaponItems', JSON.stringify(items));

      let numberHash = _methods.methods.convertNumberToHash(numberPlate);

      setTimeout(function () {
        _dispatcher.dispatcher.sendPos('Код 2', `Марка: ~y~Asea~s~\nНомера: ~y~${numberPlate}`, pos, false);
      }, 60000);
    }, 60000);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:removeAllWeaponsNearst', player => {
  if (!_user.user.isLogin(player)) return;

  let pl = _methods.methods.getNearestPlayerWithPlayer(player, 2);

  if (pl && mp.players.exists(pl)) {
    if (!_user.user.isTie(pl) && !_user.user.isCuff(pl)) {
      player.notify('~r~Игрок должен быть связан или в наручниках');
      return;
    }

    pl.removeAllWeapons();
    player.notify('~b~Вы изъяли у игрока всё оружие');
  } else player.notify('~r~Рядом с вами никого нет');
});
mp.events.addRemoteCounted('server:user:grab', (player, shopId) => {
  if (!_user.user.isLogin(player)) return;
  if (player.dimension != 0) return player.notify('~r~Нельзя грабить в виртуальном измерении');

  _user.user.grab(player, shopId);
});
mp.events.addRemoteCounted('server:inCarNearst', player => {
  if (!_user.user.isLogin(player)) return;

  let pl = _methods.methods.getNearestPlayerWithPlayer(player, 2);

  if (pl && mp.players.exists(pl)) {
    if (!_user.user.isTie(pl) && !_user.user.isCuff(pl)) {
      player.notify('~r~Игрок должен быть связан или в наручниках');
      return;
    }

    let v = _methods.methods.getNearestVehicleWithCoords(player.position, 7);

    if (v && mp.vehicles.exists(v)) {
      let seats = new Map();
      seats.set(0, true);
      seats.set(1, true);
      seats.set(2, true);
      v.getOccupants().forEach(nuser => {
        seats.delete(nuser.seat);
      });
      if ([...seats].length == 0) return player.notify('~r~В ближайшем ТС нет свободных мест');
      if (seats.has(1)) pl.putIntoVehicle(v, _newrage.RAGE_BETA ? 2 : 1);else if (seats.has(2)) pl.putIntoVehicle(v, _newrage.RAGE_BETA ? 3 : 2);else if (seats.has(0)) pl.putIntoVehicle(v, _newrage.RAGE_BETA ? 1 : 0);
      player.notify('~g~Вы затащили человека в транспорт');
      pl.notify('~r~Вас затащили в транспорт');
    } else {
      player.notify('~r~Рядом с вами нет транспорта');
    }
  } else player.notify('~r~Рядом с вами никого нет');
});
mp.events.addRemoteCounted('server:removeFromCar', player => {
  if (!_user.user.isLogin(player)) return;

  let pl = _methods.methods.getNearestPlayerWithPlayer(player, 3.5);

  if (pl && mp.players.exists(pl)) {
    if (!_user.user.isTie(pl) && !_user.user.isCuff(pl)) {
      player.notify('~r~Игрок должен быть связан или в наручниках');
      return;
    }

    if (pl.vehicle && mp.vehicles.exists(pl.vehicle)) {
      pl.removeFromVehicle();
      player.notify('~g~Вы вытащили человека из транспорта');
      pl.notify('~r~Вас вытащили из транспорта');
    } else {
      player.notify('~r~Игрок не в транспорте');
    }
  } else player.notify('~r~Рядом с вами никого нет');
});
mp.events.add('playerDeath', player => {
  _user.user.unCuff(player);

  _user.user.unTie(player);
});
mp.events.addRemoteCounted('server:unCuffNearst', async player => {
  if (!_user.user.isLogin(player)) return;

  let pl = _methods.methods.getNearestPlayerWithPlayer(player, 2);

  if (!pl) return player.notify("Поблизости никого нет");
  if (!_user.user.isCuff(pl)) return player.notify("Игрок уже не в наручниках");

  if (pl && mp.players.exists(pl)) {
    let status = true;

    if (!_user.user.isGos(player) && pl.getVariable('cuffedByGos')) {
      if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263) && !_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 4)) {
        return player.notify("~r~Требуется " + _items.items.getItemNameById(4) + " либо " + _items.items.getItemNameById(263));
      }

      player.notify("Вставьте обе отмычки в один из замков и взламывайте, нажимая SPACE. Выполните это действие с двумя замками");

      _user.user.headingToTarget(player, pl.id);

      setTimeout(() => {
        if (mp.players.exists(player)) _user.user.playAnimation(player, "mini@repair", "fixing_a_ped", 9);
      }, 3000);
      status = await _user.user.minigame(player, "unlock");

      _user.user.stopAnimation(player);
    }

    if (!status) {
      if (_methods.methods.getRandomInt(1, 5) == 5) {
        if (_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 4)) {
          _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 4).id);

          player.notify("~r~Вы сломали " + _items.items.getItemNameById(4));
        } else if (_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
          _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

          player.notify("~r~Вы сломали " + _items.items.getItemNameById(263));
        }
      }

      return player.notify("~r~Вам не удалось снять наручники");
    }

    if (!mp.players.exists(pl)) return;
    if (player.dist(pl.position) > 3) return player.notify("~r~Игрок отошёл слишком далеко");

    _methods.methods.saveLog('PlayerCuff', `${_user.user.get(pl, 'rp_name')} (${_user.user.getId(pl)}) uncuffed by ${_user.user.get(player, 'rp_name')} (${_user.user.getId(player)})`);

    _chat.chat.sendMeCommand(player, `снял наручники с человека рядом (${_user.user.getId(pl)})`);

    _user.user.stopAnimation(pl);

    _user.user.headingToTarget(player, pl.id);

    _user.user.playAnimation(player, 'mp_arresting', 'a_uncuff', 8);

    _user.user.unCuff(pl);

    _user.user.loginterract(player, pl, "PlayerUnCuffed", `снял наручники`);

    _inventory.inventory.addItem(player, 40, 1, 1, _user.user.getId(player), 1, -1, -1, -1);
  } else player.notify('~r~Рядом с вами никого нет');
});
mp.events.addRemoteCounted('server:cuffNearst', player => {
  if (!_user.user.isLogin(player)) return;

  let pl = _methods.methods.getNearestPlayerWithPlayer(player, 2);

  if (pl && mp.players.exists(pl)) {
    let rows = _inventory.inventory.allItems().find(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 40);

    if (!rows) return player.notify('~r~У Вас нет наручников');
    if (!_user.user.checkCanHandCuff(player, pl)) return;

    _inventory.inventory.deleteItem(rows.id);

    _user.user.arrestAnimation(player, pl).then(() => {
      if (!_user.user.checkCanHandCuff(player, pl)) return;

      _user.user.loginterract(player, pl, "PlayerCuffed", `надел наручники`);

      _chat.chat.sendMeCommand(player, `надел наручники на человека рядом (${_user.user.getId(pl)})`);

      _user.user.cuff(pl);

      if (_user.user.isGos(player)) pl.setVariable('cuffedByGos', true);

      _log.log.new("PlayerCuffed", `${_log.log.convertIdPlayerToData(player)} надел наручники на ${_log.log.convertIdPlayerToData(pl)}`);
    });
  } else player.notify('~r~Рядом с вами никого нет');
});
mp.events.addRemoteCounted('server:gps:findFleeca', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _bank.bank.findNearestFleeca(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findFleeca', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _bank.bank.findNearestFleeca(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:find247', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _shop.shop.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findCloth', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _cloth.cloth.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findFuel', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _fuel.fuel.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findRent', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _rent.rent.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findGunShop', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _gun.gun.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findBar', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _bar.bar.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findBarberShop', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _barberShop.barberShop.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findLsc', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _lsc.lsc.findNearest(player.position);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon1', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(1);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon2', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(2);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon3', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(3);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon4', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(4);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon5', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(5);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon6', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(6);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:gps:findAutosalon7', player => {
  if (!_user.user.isLogin(player)) return;

  let pos = _index.autosalon.findNearest(7);

  _user.user.setWaypoint(player, pos.x, pos.y);
});
mp.events.addRemoteCounted('server:user:setAlpha', (player, amount) => {
  if (!_user.user.isLogin(player)) return;
  player.alpha = amount;
});
mp.events.addRemoteCounted('server:user:cuff', player => {
  if (!_user.user.isLogin(player)) return;

  if (player.vehicle) {
    return;
  }

  _user.user.cuff(player);
});
mp.events.addRemoteCounted('server:user:unCuff', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.unCuff(player);
});
mp.events.addRemoteCounted('server:user:tie', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.tie(player);
});
mp.events.addRemoteCounted('server:user:unTie', player => {
  if (!_user.user.isLogin(player)) return;

  _user.user.unTie(player);
});
mp.events.addRemoteCounted('server:giveWeapon', (player, model, pt) => {
  if (!_user.user.isLogin(player)) return;
  player.giveWeapon(model, pt);
});
let arrestMapTimer = new Map();
mp.events.addRemoteCounted('server:user:arrest', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_user.user.get(p, 'jail_time') > 0) return player.notify(`~r~Игрок в тюрьме`);

      if (!_user.user.isLogin(p) || _user.user.get(p, 'wanted_level') <= 0) {
        player.notify('~r~У игрока нет розыска');
        return;
      }

      if (player.dist(p.position) > 10) return player.notify(`~r~Игрок слишком далеко от вас`);

      if (_user.user.get(p, 'jailed')) {
        player.notify('~r~Игрок уже в тюрьме');
        return;
      }

      if (arrestMapTimer.has(_user.user.getId(p))) {
        player.notify('~g~Вы произвели арест');
      } else {
        _user.user.addCashMoney(player, 1500);

        player.notify('~g~Вы произвели арест. Премия: ~s~$1500');

        const qid = _user.user.getId(p);

        arrestMapTimer.set(qid, true);
        setTimeout(() => {
          arrestMapTimer.delete(qid);
        }, 60000 * 30);
      }

      _user.user.addCashMoney(player, 1500);

      player.notify('~g~Вы произвели арест. Премия: ~s~$1500');

      _user.user.arrest(p);
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:giveWanted', (player, id, level, reason) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_user.user.get(p, 'jail_time') > 0) return player.notify(`~r~Игрок в тюрьме`);

      if (reason == 'clear') {
        if (p.id == player.id) {
          player.notify('~r~Вы не можете снять розыск с самого себя');
          return;
        }

        _logFractionGunEntity.logFractionGunEntity.create({
          name: _user.user.getRpName(player),
          do: _user.user.getRpName(p) + ' - Очистил розыск',
          fraction_id: _user.user.getPlayerFraction(player),
          timestamp: _methods.methods.getTimeStamp()
        });

        player.notify('~g~Вы очистили розыск');
      } else {
        if (_user.user.get(p, 'mask') > 0) player.notify('~r~Розыск не был выдан. Игрок в маске');else player.notify('~g~Вы выдали розыск');
      }

      _methods.methods.saveLog('GiveWanted', `${_user.user.getRpName(player)} give to ${_user.user.getRpName(p)} - ${level} - ${reason}`);

      _user.user.loginterract(player, p, "GosWanted", "Выдал розыск " + level + "ур. " + reason);

      _user.user.giveWanted(p, level, reason);
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.register('server:user:giveWanted', async (player, id, level = 0, reason = "clear") => {
  if (!_user.user.isLogin(player)) return;

  try {
    const mafia = _user.user.isMafia(player);

    if (!mafia && !_user.user.isGos(player)) return player.notify(`~r~У вас нет доступа`);else if (mafia && !_user.user.isMafia(player)) return player.notify(`~r~У вас нет доступа`);else if (mafia && reason != 'clear') return player.notify(`~r~Розыск можно только снять`);

    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_user.user.get(p, 'jail_time') > 0) return player.notify(`~r~Игрок в тюрьме`);
      if (_user.user.get(p, "jail_time") > 0) return player.notify(`~g~Игрок в тюрьме. Выдать или снять розыск нельзя`);

      if (reason == 'clear') {
        if (p.id == player.id) {
          player.notify('~r~Вы не можете снять розыск с самого себя');
          return;
        }

        if (_user.user.get(p, 'wanted_level') == 0) {
          player.notify('~r~Игрок не в розыске');
          return;
        }

        if (mafia) {
          if (_user.user.getMoney(player) < 10000) {
            player.notify('~r~У Вас недостаточно денег');
            return;
          }

          if (_methods.methods.distanceToPos(p.position, player.position) > 10) {
            player.notify('~r~Вы должны находиться рядом друг с другом');
            return;
          }

          player.notify('~g~Ожидаем согласия');
          let status = await _user.user.accept(p, "Снять розыск?");
          if (!mp.players.exists(player)) return;
          if (!status) return player.notify("~r~Игрок отказался");

          if (_user.user.getMoney(player) < 10000) {
            player.notify('~r~У Вас недостаточно денег');
            return;
          }

          if (_methods.methods.distanceToPos(p.position, player.position) > 10) {
            player.notify('~r~Вы должны находиться рядом друг с другом');
            return;
          }

          if (_user.user.get(p, 'wanted_level') == 0) {
            player.notify('~r~Игрок не в розыске');
            return;
          }

          player.notify("~g~Розыск снят");
          p.notify("~g~Розыск снят");

          _user.user.removeMoney(player, 10000);
        } else {
          _logFractionGunEntity.logFractionGunEntity.create({
            name: _user.user.getRpName(player),
            do: _user.user.getRpName(p) + ' - Очистил розыск',
            fraction_id: _user.user.getPlayerFraction(player),
            timestamp: _methods.methods.getTimeStamp()
          });
        }

        _chat.chat.sendFractionMessage(player, _user.user.getPlayerFraction(player), `Очистил розыск гражданину ${_user.user.getId(p)}`);

        player.notify('~g~Вы очистили розыск');
      } else {
        if (_user.user.get(p, 'mask') > 0) return player.notify('~r~Розыск не был выдан. Игрок в маске');else player.notify('~g~Вы выдали розыск');

        _chat.chat.sendFractionMessage(player, _user.user.getPlayerFraction(player), `Выдал розыск подозреваемому ${_user.user.getId(p)} (${level} ур) по причине ${reason}`);
      }

      _methods.methods.saveLog('GiveWanted', `${_user.user.getRpName(player)} give to ${_user.user.getRpName(p)} - ${level} - ${reason}`);

      _user.user.loginterract(player, p, "GosWanted", "Выдал розыск " + level + "ур. " + reason);

      _user.user.giveWanted(p, level, reason);
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:adrenaline', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (p == player && p.health == 0 && !_user.user.isAdminNow(player)) return player.notify('~r~Вы не можете реанимировать самого себя');

    if (_user.user.isLogin(p) && _methods.methods.distanceToPos(player.position, p.position) < 3) {
      _user.user.useAdrenaline(p);

      p.health = 10;
      setTimeout(() => {
        if (mp.players.exists(p)) _user.user.healProtect(p), p.health = 10;
      }, 1000);

      _chat.chat.sendMeCommand(player, 'использовал дефибриллятор на пострадавшем');
    } else player.notify('~r~Рядом игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});

let _medPos = new mp.Vector3(288.61148, -1345.5358, 23.5378017);

mp.events.addRemoteCounted('server:user:heal', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_methods.methods.distanceToPos(_medPos, player.position) > 100) {
      player.notify('~r~Доступно только в больнице');
      return;
    }

    let p = _methods.methods.getPlayerById(id);

    if (!p) return player.notify('~r~Игрок не найден');

    if (_user.user.isLogin(p) && _methods.methods.distanceToPos(player.position, p.position) < 20) {
      _user.user.set(p, 'med_time', 0);

      p.call('client:medTimerFree');
      p.call('server:fullHeal');
      p.health = 100;

      _chat.chat.sendMeCommand(player, 'выписал человека');

      _user.user.giveItemAnimation(player, p);
    } else player.notify('~r~Рядом игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:healFirst', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (!p) return player.notify('~r~Игрок не найден');

    if (_user.user.isLogin(p) && _methods.methods.distanceToPos(player.position, p.position) < 3) {
      _user.user.healProtect(p);

      p.health = 100;

      _chat.chat.sendMeCommand(player, 'достал аптечку и оказал первую помощь пострадавшему');
    } else player.notify('~r~Рядом игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:healFirstAdmin', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isAdminNow(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (!p) return player.notify('~r~Игрок не найден');

    if (_user.user.isLogin(p) && _methods.methods.distanceToPos(player.position, p.position) < 3) {
      _user.user.healProtect(p);

      p.health = 100;

      _user.user.set(p, 'med_time', 0);

      p.call('server:fullHeal');
      player.notify("Игрок вылечен");
    } else player.notify('~r~Рядом игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:giveIzol', (player, id, level, reason) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 10) {
        if (_user.user.get(p, 'jail_time') > 0) {
          _methods.methods.notifyWithPictureToFraction(_user.user.getRpName(player), `SDBP`, `Посадил в изолятор ${_user.user.getRpName(p)}`, 'DIA_POLICE', 5);

          _user.user.setIzol(p, level, reason);
        } else player.notify('~r~Игрок не в тюрьме');
      } else player.notify('~r~Вы слишком далеко от игрока');
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:giveJailRun', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 10) {
        if (_user.user.get(p, 'jail_time') > 0) {
          _methods.methods.notifyWithPictureToFraction(_user.user.getRpName(player), `SDBP`, `Выдал доспуск ${_user.user.getRpName(p)}`, 'DIA_POLICE', 5);

          _user.user.giveJailRun(p);
        } else player.notify('~r~Игрок не в тюрьме');
      } else player.notify('~r~Вы слишком далеко от игрока');
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:user:takeJailRun', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_methods.methods.distanceToPos(p.position, player.position) < 10) {
        if (_user.user.get(p, 'jail_time') > 0) {
          _methods.methods.notifyWithPictureToFraction(_user.user.getRpName(player), `SDBP`, `Забрал доспуск ${_user.user.getRpName(p)}`, 'DIA_POLICE', 5);

          _user.user.takeJailRun(p);
        } else player.notify('~r~Игрок не в тюрьме');
      } else player.notify('~r~Вы слишком далеко от игрока');
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('server:user:changeIdadmin', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isAdmin(player, 3)) return player.notify('~r~У вас нет доступа к смене ID');
  if (!id) return player.notify('~g~Вы вернули ID'), player.setVariable('idLabel', _user.user.getId(player)), _methods.methods.saveLog('AdminJob', _user.user.getId(player) + ' return '), _user.user.log(player, "AdminJob", "Вернул свой ID");

  _user.user.getUserDataFromDB(id).then(data => {
    if (data) return player.notify('~r~Данный ID уже занят');

    _methods.methods.saveLog('ChangeFibId', _user.user.getId(player) + ' to ' + id);

    _user.user.log(player, "AdminJob", "Сменил ID на " + id);

    player.setVariable('idLabel', id);
    player.notify('~b~Вы сменили ID');
  }).catch(err => {
    console.error(err);
    player.notify('~r~Попробуйте еще раз');
  });
});
mp.events.register('server:user:changeId', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!id) return player.notify('~g~Вы вернули ID'), player.setVariable('idLabel', _user.user.getId(player)), _methods.methods.saveLog('ChangeFibId', _user.user.getId(player) + ' return '), _user.user.log(player, "ChangeFibId", "Вернул свой ID");

  _user.user.getUserDataFromDB(id).then(data => {
    if (data) return player.notify('~r~Данный ID уже занят');

    _methods.methods.saveLog('ChangeFibId', _user.user.getId(player) + ' to ' + id);

    _user.user.log(player, "ChangeFibId", "Сменил ID на " + id);

    player.setVariable('idLabel', id);
    player.notify('~b~Вы сменили ID');
  }).catch(err => {
    console.error(err);
    player.notify('~r~Попробуйте еще раз');
  });
});
mp.events.register('server:mafia:removeBlackList', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  try {
    let p = _methods.methods.getPlayerById(id);

    if (_user.user.isLogin(p)) {
      if (_user.user.getMoney(player) < 100000) {
        player.notify('~r~У Вас недостаточно денег');
        return;
      }

      if (_methods.methods.distanceToPos(p.position, player.position) > 10) {
        player.notify('~r~Вы должны находиться рядом друг с другом');
        return;
      }

      if (_data.Container.Has(_enums.enums.world, 'mafiaBlackList' + _user.user.get(player, 'fraction_id'))) {
        player.notify('~r~Доступно только раз в 24ч (Реальные)');
        return;
      }

      if (!_user.user.get(p, 'is_gos_blacklist')) {
        player.notify('~r~Игрок не находится в чёрном списке');
        return;
      }

      _data.Container.Set(_enums.enums.world, 'mafiaBlackList' + _user.user.get(player, 'fraction_id'), true);

      _user.user.removeMoney(player, 100000);

      player.notify('~g~Вы убрали человека из черного списка гос. орг.');
      p.notify('~g~Вас убрали человека из черного списка гос. орг.');

      _user.user.set(p, 'is_gos_blacklist', false);

      _user.user.set(p, 'gos_blacklist_reason', '');

      _user.user.updateClientCache(p);
    } else player.notify('~r~Игрок не найден');
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:sendAsk', (player, message) => {
  if (!_user.user.isLogin(player)) return;
  if (_user.user.checkMutePlayer(player, "chat")) return player.outputChatBox("У вас блокировка текстового чата до " + _user.user.getTimeFormat(_user.user.checkMutePlayer(player, "chat")));
  player.outputChatBox(`!{#FFC107}Вопрос ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;

    if (_user.user.isHelper(p)) {
      p.outputChatBox(`[${_chat.chat.getTime()}] !{#FFC107}${_user.user.isMedia(player) ? '[MEDIA] ' : ''}Вопрос от ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);
    }
  });
});
mp.events.addRemoteCounted('server:sendReport', (player, message) => {
  if (!_user.user.isLogin(player)) return;
  if (_user.user.checkMutePlayer(player, "chat")) return player.outputChatBox("У вас блокировка текстового чата до " + _user.user.getTimeFormat(_user.user.checkMutePlayer(player, "chat")));
  player.outputChatBox(`!{#f44336}Жалоба ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;

    if (_user.user.isAdmin(p)) {
      if (_user.user.isMedia(player)) p.outputChatBox(`[${_chat.chat.getTime()}] !{#3F51B5}[MEDIA] Жалоба от ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);else p.outputChatBox(`[${_chat.chat.getTime()}] !{#f44336}Жалоба от ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);
    }
  });
});
mp.events.addRemoteCounted('server:sendWarning', (player, message) => {
  if (!_user.user.isLogin(player)) return;
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;
    if (_user.user.isAdmin(p)) p.outputChatBox(`!{#f44336}WARNING от ${_user.user.getRpName(player)} (${_user.user.getId(player)}):!{#FFFFFF} ${escape(message)}`);
  });
});
mp.events.addRemoteCounted('server:sendAnswerAsk', (player, id, msg) => {
  if (!_user.user.isLogin(player)) return;
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;

    if (_user.user.isHelper(p) || _user.user.getId(p) == id) {
      p.outputChatBox(`!{#FFC107}Ответ от хелпера ${_user.user.getRpName(player)} (${_user.user.getId(player)}) игроку ${id}:!{#FFFFFF} ${escape(msg)}`);
    }
  });

  _methods.methods.saveLog('AnswerAsk', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) to ${id}: ${msg}`);

  _user.user.set(player, 'count_hask', _user.user.get(player, 'count_hask') + 1);
});
mp.events.addRemoteCounted('server:sendAnswerReport', (player, id, msg) => {
  if (!_user.user.isLogin(player)) return;
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;

    if (_user.user.isAdmin(p) || _user.user.getId(p) == id) {
      p.outputChatBox(`!{#f44336}Ответ от администратора ${_user.user.getRpName(player)} (${_user.user.getId(player)}) игроку ${id}:!{#FFFFFF} ${escape(msg)}`);
    }
  });

  _methods.methods.saveLog('AnswerReport', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) to ${id}: ${msg}`);

  _user.user.set(player, 'count_aask', _user.user.get(player, 'count_aask') + 1);
});
mp.events.addRemoteCounted('server:user:kickByAdmin', (player, id, reason) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isAdmin(player)) return;
  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;
    if (_user.user.getId(p) != id) return;

    _chat.chat.sendToAll(`Администратор ${_user.user.getRpName(player)} (${_user.user.getId(player)})`, `${_user.user.getRpName(p)} (${_user.user.getId(p)})!{${_chat.chat.clRed}} был кикнут с причиной!{${_chat.chat.clWhite}} ${reason}`, _chat.chat.clRed);

    player.outputChatBox(`!{#f44336}Вы кикнули!{FFFFFF} ${_user.user.getRpName(p)}!{#f44336} с причиной: !{FFFFFF}${reason}`);

    _user.user.kick(p, reason, `Вы были кикнуты администратором:!{FFFFFF} ${_user.user.getRpName(player)}`);
  });
});
mp.events.addRemoteCounted('server:user:jailByAdmin', (player, id, reason, min) => {
  _user.user.arrestAdmin(id, player, min, reason);
});
mp.events.addRemoteCounted('server:user:tpTo', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isAdmin(player)) return;

  let p = _methods.methods.getPlayerById(id);

  if (p) {
    if (p.teleportBlock && _user.user.getAdminLevel(player) < 5) return player.notify(`~r~К данному администратору нельзя телепортироваться`);
    player.dimension = p.dimension;

    _user.user.teleport(player, p.position.x, p.position.y, p.position.z);
  } else {
    player.notify('~r~Человека с данным id нет на сервере.');
  }
});
mp.events.addRemoteCounted('server:user:tpToMe', (player, id) => {
  if (!_user.user.isLogin(player)) return;
  if (!_user.user.isAdmin(player)) return;

  let p = _methods.methods.getPlayerById(id);

  if (p) {
    if (p.teleportBlock && _user.user.getAdminLevel(player) < 5) return player.notify(`~r~Данного администратора нельзя телепортировать`);
    p.dimension = player.dimension;

    _user.user.teleport(p, player.position.x, player.position.y, player.position.z);

    p.outputChatBox(`!{#f44336}Вас телепортировал к себе администратор:!{FFFFFF} ${_user.user.getRpName(player)}`);
  } else {
    player.notify('~r~Человека с данным id нет на сервере.');
  }
});
mp.events.addRemoteCounted('server:user:fixNearestVehicle', player => {
  if (!_user.user.isLogin(player)) return;

  let veh = _methods.methods.getNearestVehicleWithCoords(player.position, 10.0);

  if (_vehicles.vehicles.exists(veh)) veh.repair();
});
mp.events.addRemoteCounted('server:deleteNearstVehicle', player => {
  if (!_user.user.isLogin(player)) return;

  let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

  if (_vehicles.vehicles.exists(vehicle)) _vehicles.vehicles.destroy(vehicle);
});
mp.events.register('server:respawnNearstVehicle', player => {
  if (!_user.user.isLogin(player)) return;

  let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

  if (!_vehicles.vehicles.exists(vehicle)) return;
  if (vehicle.getVariable("raceVehicle")) return;

  _chat.chat.sendMeCommand(player, `Эвакуировал транспорт ${vehicle.numberPlate}`);

  _vehicles.vehicles.destroy(vehicle);
});
mp.events.addRemoteCounted('server:respawnNearstVehicle', player => {
  if (!_user.user.isLogin(player)) return;

  let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

  if (!_vehicles.vehicles.exists(vehicle)) return;
  if (vehicle.getVariable("raceVehicle")) return;
  if (!_user.user.isAdminNow(player)) _chat.chat.sendMeCommand(player, `Эвакуировал транспорт ${vehicle.numberPlate}`);

  _vehicles.vehicles.respawn(vehicle);
});
mp.events.addRemoteCounted('server:flipNearstVehicle', player => {
  if (!_user.user.isLogin(player)) return;

  let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

  if (_vehicles.vehicles.exists(vehicle)) vehicle.rotation = new mp.Vector3(0, 0, vehicle.heading);
});
mp.events.addRemoteCounted('server:vehicle:engineStatus', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.isDriver(player)) {
      let data = _vehicles.vehicles.getData(player.vehicle.getVariable('container'));

      if (data.has('fraction_id')) {
        if (data.get('fraction_id') == _user.user.get(player, 'fraction_id')) _vehicles.vehicles.engineStatus(player, player.vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
      } else {
        _vehicles.vehicles.engineStatus(player, player.vehicle);
      }
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:vehicle:lockStatus', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

    if (_vehicles.vehicles.exists(vehicle)) {
      if (_user.user.isAdminNow(player, 2)) {
        _vehicles.vehicles.lockStatus(player, vehicle);

        return;
      }

      let data = _vehicles.vehicles.getData(vehicle.getVariable('container'));

      if (data.has('fraction_id')) {
        if (data.get('fraction_id') == _user.user.get(player, 'fraction_id')) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
      } else if (data.has('owner_id')) {
        if (data.get('owner_id') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
      } else if (data.has('rentOwner')) {
        if (data.get('rentOwner') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
      } else if (data.has('id_user')) {
        if (data.get('id_user') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
      } else _vehicles.vehicles.lockStatus(player, vehicle);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:vehicle:setColor', (player, color1, color2) => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.isDriver(player)) {
      player.vehicle.setColor(color1, color2);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:vehicle:setLivery', (player, liv) => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.isDriver(player)) {
      player.vehicle.livery = liv;
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:vehicle:occ', player => {
  if (!_user.user.isLogin(player)) return;

  try {
    if (_user.user.isDriver(player)) {
      player.vehicle.getOccupants().forEach(function (pl) {
        _methods.methods.debug(_user.user.getRpName(pl));
      });
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:shop:sellFish', (player, shopId) => {
  if (!_user.user.isLogin(player)) return;

  if (!_user.user.get(player, 'fish_lic')) {
    player.notify('~r~У Вас нет лицензии рыболовства');
    return;
  }

  let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1);

  let money = 0;
  let count = 0;
  rows.forEach(item => {
    if (item['item_id'] == 241) {
      money += 144;
      count++;

      _inventory.inventory.deleteItem(item['id']);
    } else if (item['item_id'] == 242) {
      money += 14;
      count++;

      _inventory.inventory.deleteItem(item['id']);
    } else if (item['item_id'] == 243) {
      money += 55;
      count++;

      _inventory.inventory.deleteItem(item['id']);
    } else if (item['item_id'] == 244) {
      money += 28;
      count++;

      _inventory.inventory.deleteItem(item['id']);
    } else if (item['item_id'] == 245) {
      money += 7;
      count++;

      _inventory.inventory.deleteItem(item['id']);
    }
  });
  money *= 3;

  if (count > 0) {
    _business.business.addMoney(shopId, _methods.methods.parseInt(money * 0.1));

    player.notify(`~g~Вы продали ${count}шт. рыбы`);
    player.notify(`~g~Вы заработали: ~s~$${_methods.methods.numberFormat(money)}`);

    _user.user.addMoney(player, money);
  } else {
    player.notify('~r~У Вас нет рыбы для продажи');
  }
});
mp.events.addRemoteCounted('server:shop:sellGun', (player, shopId) => {
  if (!_user.user.isLogin(player)) return;

  let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 88);

  let money = 0;
  let count = 0;
  rows.forEach(item => {
    money += 12000;
    count++;

    _inventory.inventory.deleteItem(item['id']);
  });

  if (count > 0) {
    player.notify(`~g~Вы продали ${count}шт. оружия`);
    player.notify(`~g~Вы заработали: ~s~$${_methods.methods.numberFormat(money)}`);

    _user.user.addMoney(player, money);
  } else {
    player.notify('~r~У Вас нет оружия для продажи');
  }
});
mp.events.addRemoteCounted('server:shop:winLoto', (player, shopId) => {
  if (!_user.user.isLogin(player)) return;

  let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 277 && item.key_id == 1);

  if (rows.length > 0) {
    rows.forEach(item => {
      _user.user.addCashMoney(player, item['prefix']);

      _inventory.inventory.deleteItem(item['id']);

      _methods.methods.notifyWithPictureToPlayer(player, 'Поздравляем!', `#${item['number']}`, `~g~Вы обменяли билетик: ~s~$${_methods.methods.numberFormat(item['prefix'])}`, 'WEB_PILLPHARM');
    });
  } else {
    player.notify('~r~У Вас нет билетиков');
  }
});
mp.events.addRemoteCounted('server:shop:sellLoto', player => {
  if (!_user.user.isLogin(player)) return;

  let rows = _inventory.inventory.allItems().filter(item => item.owner_id == _user.user.getId(player) && item.owner_type == 1 && item.item_id == 277 && item.key_id == -1);

  rows.map(item => {
    _inventory.inventory.deleteItem(item.id);
  });

  _methods.methods.notifyWithPictureToPlayer(player, 'American Loto', `Спасибо!`, `~g~Вы сдали все просроченные билетики`, 'WEB_PILLPHARM');
});
mp.events.addRemoteCounted('server:user:giveMeWanted', (player, level, reason) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.giveWanted(player, level, reason);
});
mp.events.addRemoteCounted('server:bank:withdraw', (player, money, procent) => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.withdraw(player, money, procent);
});
mp.events.addRemoteCounted('server:bank:deposit', (player, money, procent) => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.deposit(player, money, procent);
});
mp.events.addRemoteCounted('server:bank:transferMoney', (player, bankPrefix, bankNumber, money) => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.transferMoney(player, bankPrefix, bankNumber, money);
});
mp.events.addRemoteCounted('server:bank:changeCardNumber', (player, bankNumber) => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.changeCardNumber(player, bankNumber);
});
mp.events.addRemoteCounted('server:changePhoneNumber', (player, bankNumber) => {
  if (!_user.user.isLogin(player)) return;
  let money = 25000;

  if (_user.user.getCashMoney(player) < money) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  if (bankNumber < 9999) {
    player.notify('~r~Номер должен быть больше 4-х цифр');
    return;
  }

  let bankPrefix = _user.user.get(player, 'phone_code');

  _user2.userEntity.count({
    where: {
      phone: bankNumber,
      phone_code: bankPrefix
    }
  }).then(count => {
    if (count === 0) {
      let find = _inventory.inventory.allItems().find(item => item.number == bankNumber && item.prefix == bankPrefix);

      if (!find) {
        _user.user.set(player, 'phone', bankNumber);

        _user.user.removeCashMoney(player, money);

        _business.business.addMoney(92, money);

        _bank.bank.sendSmsBankOperation(player, 'Ваш номер был изменён');

        _user.user.saveAccount(player);
      } else _bank.bank.sendSmsBankOperation(player, 'Номер уже существует', '~r~Ошибка');
    } else _bank.bank.sendSmsBankOperation(player, 'Номер уже существует', '~r~Ошибка');
  });
});
mp.events.addRemoteCounted('server:bank:closeCard', player => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.closeCard(player);
});
mp.events.addRemoteCounted('server:bank:openCard', (player, bankId, priceCard) => {
  if (!_user.user.isLogin(player)) return;

  _bank.bank.openCard(player, bankId, priceCard);
});
mp.events.addRemoteCounted('server:vehicle:spawnFractionCar', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _vehicles.vehicles.spawnFractionCar(id);

  player.notify('~b~Транспорт стоит на парковке, возьмите его');
});
mp.events.addRemoteCounted('server:houses:sell', player => {
  if (!_user.user.isLogin(player)) return;

  _houses.houses.sell(player);
});
mp.events.addRemoteCounted('server:condo:sell', player => {
  if (!_user.user.isLogin(player)) return;

  _condo.condo.sell(player);
});
mp.events.addRemoteCounted('server:stock:sell', player => {
  if (!_user.user.isLogin(player)) return;

  _stock.stock.sell(player);
});
mp.events.addRemoteCounted('server:apartments:sell', player => {
  if (!_user.user.isLogin(player)) return;

  _apartments.apartments.sell(player);
});
mp.events.addRemoteCounted('server:houses:sellToPlayer', (player, buyerId, sum) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') === 0) {
    player.notify('~r~У Вас нет дома');
    return;
  }

  let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

  if (hInfo.get('id_user') != _user.user.get(player, 'id')) {
    player.notify('~r~Этот дом вам не пренадлежит');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'id_house') > 0) {
      player.notify('~r~У игрока уже есть дом');
      buyer.notify('~r~У Вас уже есть дом');
      return;
    }

    buyer.call('client:houses:sellToPlayer', [_user.user.get(player, 'id_house'), sum, _user.user.getId(player)]);
    buyer.notify('~b~Вам предложили купить дом на ' + hInfo.get('address') + ' ' + hInfo.get('id') + ' за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы предложили купить дом игроку');
  }
});
mp.events.addRemoteCounted('server:houses:addUser', (player, buyerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') === 0) {
    player.notify('~r~У Вас нет дома');
    return;
  }

  if (_user.user.getCashMoney(player) < 50000) {
    player.notify('~r~У Вас недостаточно средств на руках');
    return;
  }

  let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

  if (hInfo.get('id_user') != _user.user.get(player, 'id')) {
    player.notify('~r~Этот дом вам не пренадлежит');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'id_house') > 0) {
      player.notify('~r~У игрока уже есть дом');
      buyer.notify('~r~У Вас уже есть дом');
      return;
    }

    _houses.houses.getCountLiveUser(_user.user.get(player, 'id_house'), function (count) {
      if (!_user.user.isLogin(player)) return;
      if (!_user.user.isLogin(buyer)) return;
      --count;

      if (count == 1 && hInfo.get('price') < 250000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $250.000');
        return;
      } else if (count == 2 && hInfo.get('price') < 500000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $500.000');
        return;
      } else if (count == 3 && hInfo.get('price') < 1000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $1.000.000');
        return;
      } else if (count == 4 && hInfo.get('price') < 2000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $2.000.000');
        return;
      } else if (count == 5 && hInfo.get('price') < 3000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $3.000.000');
        return;
      } else if (count == 6 && hInfo.get('price') < 5000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $5.000.000');
        return;
      } else if (count == 7 && hInfo.get('price') < 7000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $7.000.000');
        return;
      } else if (count == 8 && hInfo.get('price') < 8000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $8.000.000');
        return;
      } else if (count == 9 && hInfo.get('price') < 9000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $9.000.000');
        return;
      } else if (count == 10 && hInfo.get('price') < 10000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $10.000.000');
        return;
      } else if (count == 15 && hInfo.get('price') < 15000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Чтобы посделить больше друзей, нужен дом от $15.000.000');
        return;
      } else if (count == 20 && hInfo.get('price') < 20000000) {
        player.notify('~r~В вашем доме не осталось места');
        player.notify('~r~Больше друзей подселить невозможно');
        return;
      }

      _user.user.removeCashMoney(player, 50000);

      _coffer.coffer.addMoney(50000);

      _user.user.set(buyer, 'id_house', _user.user.get(player, 'id_house'));

      player.notify('~b~Вы подселили игрока');
      buyer.notify('~b~Вас подселили в дом');

      _user.user.saveAccount(player);

      _user.user.saveAccount(buyer);
    });
  }
});
mp.events.addRemoteCounted('server:houses:lawyer:tryaddUser', (player, ownerId, buyerId) => {
  let owner = _user.user.getPlayerById(ownerId);

  if (_user.user.isLogin(owner) && _user.user.isLogin(player)) {
    if (_user.user.get(owner, 'id_house') === 0) {
      owner.notify('~r~У Вас нет дома');
      player.notify('~r~У игрока нет дома');
      return;
    }

    if (_user.user.getCashMoney(owner) < 10000) {
      owner.notify('~r~У Вас недостаточно средств на руках');
      player.notify('~r~У игрока недостаточно средств на руках');
      return;
    }

    if (_methods.methods.distanceToPos(owner.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    owner.call('client:lawyer:house:accept', [buyerId, _user.user.getId(player)]);
  }
});
mp.events.addRemoteCounted('server:houses:userList', player => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') === 0) {
    player.notify('~r~У Вас нет дома');
    return;
  }

  let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

  if (hInfo.get('id_user') != _user.user.get(player, 'id')) {
    player.notify('~r~Этот дом вам не пренадлежит');
    return;
  }

  let houseId = _user.user.get(player, 'id_house');

  _user2.userEntity.findAll({
    where: {
      id_house: houseId
    },
    order: [["is_online", "DESC"], ["rp_name", "ASC"]]
  }).then(rows => {
    let resultData = new Map();
    rows.forEach(function (item) {
      if (item['is_online']) resultData.set(item['id'].toString(), '~g~*~s~ ' + item['rp_name']);else resultData.set(item['id'].toString(), '~r~*~s~ ' + item['rp_name']);
    });
    player.call('client:showMazeBankHousePeopleListMenu', [Array.from(resultData)]);
  });
});
mp.events.addRemoteCounted('server:houses:lawyer:addUser', (player, lawyerId, buyerId) => {
  let buyer = _user.user.getPlayerById(buyerId);

  let lawyer = _user.user.getPlayerById(lawyerId);

  let owner = player;

  if (_user.user.isLogin(buyer) && _user.user.isLogin(owner) && _user.user.isLogin(lawyer)) {
    if (_user.user.get(owner, 'id_house') === 0) {
      owner.notify('~r~У Вас нет дома');
      return;
    }

    if (_user.user.getCashMoney(owner) < 10000) {
      owner.notify('~r~У Вас недостаточно средств на руках');
      return;
    }

    let hInfo = _houses.houses.getHouseData(_user.user.get(owner, 'id_house'));

    if (hInfo.get('id_user') != _user.user.get(owner, 'id')) {
      owner.notify('~r~Этот дом вам не пренадлежит');
      return;
    }

    if (_methods.methods.distanceToPos(buyer.position, owner.position) > 2) {
      owner.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'id_house') > 0) {
      owner.notify('~r~У игрока уже есть дом');
      buyer.notify('~r~У Вас уже есть дом');
      return;
    }

    _houses.houses.getCountLiveUser(_user.user.get(owner, 'id_house'), function (count) {
      if (!_user.user.isLogin(owner)) return;
      if (!_user.user.isLogin(buyer)) return;
      --count;

      if (count == 1 && hInfo.get('price') < 250000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $250.000');
        return;
      } else if (count == 2 && hInfo.get('price') < 500000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $500.000');
        return;
      } else if (count == 3 && hInfo.get('price') < 1000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $1.000.000');
        return;
      } else if (count == 4 && hInfo.get('price') < 2000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $2.000.000');
        return;
      } else if (count == 5 && hInfo.get('price') < 3000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $3.000.000');
        return;
      } else if (count == 6 && hInfo.get('price') < 5000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $5.000.000');
        return;
      } else if (count == 7 && hInfo.get('price') < 7000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $7.000.000');
        return;
      } else if (count == 8 && hInfo.get('price') < 8000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $8.000.000');
        return;
      } else if (count == 9 && hInfo.get('price') < 9000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $9.000.000');
        return;
      } else if (count == 10 && hInfo.get('price') < 10000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $10.000.000');
        return;
      } else if (count == 15 && hInfo.get('price') < 15000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Чтобы посделить больше друзей, нужен дом от $15.000.000');
        return;
      } else if (count == 20 && hInfo.get('price') < 20000000) {
        owner.notify('~r~В вашем доме не осталось места');
        owner.notify('~r~Больше друзей подселить невозможно');
        return;
      }

      _user.user.removeCashMoney(owner, 10000);

      _user.user.addCashMoney(lawyer, 8000);

      switch (_user.user.get(lawyer, 'job')) {
        case 'lawyer1':
          _business.business.addMoney(58, 2000);

          break;

        case 'lawyer2':
          _business.business.addMoney(59, 2000);

          break;

        case 'lawyer3':
          _business.business.addMoney(60, 2000);

          break;
      }

      _user.user.set(buyer, 'id_house', _user.user.get(owner, 'id_house'));

      owner.notify('~b~Вы подселили игрока');
      buyer.notify('~b~Вас подселили в дом');
      lawyer.notify('~b~Вы совершили сделку, заработав ~g~$8.000');

      _user.user.saveAccount(player);

      _user.user.saveAccount(buyer);
    });
  }
});
mp.events.addRemoteCounted('server:houses:removeMe', player => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') === 0) {
    player.notify('~r~Вы нигде не живете');
    return;
  }

  if (_user.user.getCashMoney(player) < 1000) {
    player.notify('~r~У Вас недостаточно средств на руках');
    return;
  }

  let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

  if (hInfo && hInfo.get('id_user') == _user.user.get(player, 'id')) {
    player.notify('~r~Это ваш дом, его можно только продать');
    return;
  }

  _user.user.removeCashMoney(player, 1000);

  _coffer.coffer.addMoney(1000);

  _user.user.set(player, 'id_house', 0);

  player.notify('~r~Вы выселились из дома');

  _user.user.saveAccount(player);
});
mp.events.addRemoteCounted('server:house:removeId', (player, userId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') === 0) {
    player.notify('~r~Вы нигде не живете');
    return;
  }

  if (_user.user.getCashMoney(player) < 1000) {
    player.notify('~r~У Вас недостаточно средств на руках');
    return;
  }

  let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

  if (hInfo.get('id_user') != _user.user.get(player, 'id')) {
    player.notify('~r~Этот дом вам не пренадлежит');
    return;
  }

  _user.user.removeCashMoney(player, 1000);

  _coffer.coffer.addMoney(1000);

  player.notify('~r~Вы выселили из дома ' + userId);

  let seller = _user.user.getPlayerById(userId);

  if (_user.user.isLogin(seller)) {
    _user.user.set(seller, 'id_house', 0);

    seller.notify('~r~Вас выселил из дома владелец');

    _user.user.saveAccount(seller);
  } else {
    _user2.userEntity.update({
      id_house: 0
    }, {
      where: {
        id: userId
      }
    });
  }
});
mp.events.addRemoteCounted('server:houses:sellToPlayer:accept', (player, houseId, sum, sellerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'id_house') > 0) {
    player.notify('~r~У Вас есть дом');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'id_house');

    if (hId === 0) {
      player.notify('~r~У игрока уже нет дома');
      seller.notify('~r~У Вас нет дома');
      return;
    }

    _houses.houses.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'id_house', hId);

    _user.user.set(seller, 'id_house', 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали дом за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили дом за ~s~$' + _methods.methods.numberFormat(sum));

    _user.user.loginterract(player, seller, "PlayerSell", `Продал дом @house${hId} за $${sum}`);

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:car:sellToPlayer', (player, buyerId, sum, slot) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'car_id' + slot) == 0) {
    player.notify('~r~У Вас нет транспорта');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (!_vehicles.vehicles.searchBySlot(player, slot)) {
    return player.notify("~r~Необходимо заспавнить ТС");
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    let isValid = false;
    if (_user.user.get(buyer, 'car_id1') == 0) isValid = true;else if (_user.user.get(buyer, 'car_id2') == 0) {
      if (_user.user.get(buyer, 'id_house') > 0 || _user.user.get(buyer, 'condo_id') > 0 || _user.user.get(buyer, 'apartment_id') > 0) isValid = true;
    } else if (_user.user.get(buyer, 'car_id3') == 0) {
      if (_user.user.get(buyer, 'id_house') > 0) {
        let hInfo = _houses.houses.getHouseData(_user.user.get(buyer, 'id_house'));

        if (hInfo.get('price') > 1000000) isValid = true;
      }
    } else if (_user.user.get(buyer, 'car_id4') == 0) {
      if (_user.user.get(buyer, 'id_house') > 0) {
        let hInfo = _houses.houses.getHouseData(_user.user.get(buyer, 'id_house'));

        if (hInfo.get('price') > 2500000) isValid = true;
      }
    } else if (_user.user.get(buyer, 'car_id5') == 0) {
      if (_user.user.get(buyer, 'id_house') > 0) {
        let hInfo = _houses.houses.getHouseData(_user.user.get(buyer, 'id_house'));

        if (hInfo.get('price') > 5000000) isValid = true;
      }
    }

    if (isValid) {
      let vInfo = _vehicles.vehicles.getData(_user.user.get(player, 'car_id' + slot));

      buyer.call('client:car:sellToPlayer', [_user.user.get(player, 'car_id' + slot), vInfo.get('name'), sum, _user.user.getId(player), slot]);
      buyer.notify('~b~Вам предложили купить ' + vInfo.get('name') + ' за ~s~$' + _methods.methods.numberFormat(sum));
      player.notify('~b~Вы предложили купить ' + vInfo.get('name') + ' игроку');
    } else {
      buyer.notify('~r~У Вас нет доступных свободных слотов');
      player.notify('~r~У игрока нет доступных слотов под ТС');
    }
  }
});
mp.events.addRemoteCounted('server:car:sellToPlayer:accept', (player, sum, sellerId, slot) => {
  if (!_user.user.isLogin(player)) return;
  let slotBuy = 0;

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.get(player, 'car_id1') == 0) slotBuy = 1;else if (_user.user.get(player, 'car_id2') == 0) {
    if (_user.user.get(player, 'id_house') > 0 || _user.user.get(player, 'condo_id') > 0 || _user.user.get(player, 'apartment_id') > 0) slotBuy = 2;
  } else if (_user.user.get(player, 'car_id3') == 0) {
    if (_user.user.get(player, 'id_house') > 0) {
      let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

      if (hInfo.get('price') > 1000000) slotBuy = 3;
    }
  } else if (_user.user.get(player, 'car_id4') == 0) {
    if (_user.user.get(player, 'id_house') > 0) {
      let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

      if (hInfo.get('price') > 2500000) slotBuy = 4;
    }
  } else if (_user.user.get(player, 'car_id5') == 0) {
    if (_user.user.get(player, 'id_house') > 0) {
      let hInfo = _houses.houses.getHouseData(_user.user.get(player, 'id_house'));

      if (hInfo.get('price') > 5000000) slotBuy = 5;
    }
  }

  if (slotBuy == 0) {
    player.notify('~r~У Вас нет доступных слотов');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'car_id' + slot);

    if (hId === 0) {
      player.notify('~r~У игрока уже нет транспорта');
      seller.notify('~r~У Вас нет транспорта');
      return;
    }

    _vehicles.vehicles.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'car_id' + slotBuy, hId);

    _user.user.set(seller, 'car_id' + slot, 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали ТС за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили ТС за ~s~$' + _methods.methods.numberFormat(sum));

    _carsModel.carsEntity.findOne({
      where: {
        id: hId
      }
    }).then(car => {
      if (car) _user.user.loginterract(player, seller, "PlayerSell", `Продал ТС @veh${hId} ${car.name} (Стоимость ${car.price}) за $${sum}`);else _user.user.loginterract(player, seller, "PlayerSell", `Продал ТС @veh${hId} за $${sum}`);
    });

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:condo:sellToPlayer', (player, buyerId, sum) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'condo_id') === 0) {
    player.notify('~r~У Вас нет квартиры');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'condo_id') > 0) {
      player.notify('~r~У игрока уже есть квартира');
      buyer.notify('~r~У Вас уже есть квартира');
      return;
    }

    buyer.call('client:condo:sellToPlayer', [_user.user.get(player, 'condo_id'), sum, _user.user.getId(player)]);
    buyer.notify('~b~Вам предложили купить квартиру на ' + _condo.condo.get(_user.user.get(player, 'condo_id'), 'address') + ' ' + _condo.condo.get(_user.user.get(player, 'condo_id'), 'id') + ' за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы предложили купить квартиру игроку');
  }
});
mp.events.addRemoteCounted('server:condo:sellToPlayer:accept', (player, houseId, sum, sellerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'condo_id') > 0) {
    player.notify('~r~У Вас есть квартира');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'condo_id');

    if (hId === 0) {
      player.notify('~r~У игрока уже нет квартиры');
      seller.notify('~r~У Вас нет квартиры');
      return;
    }

    _condo.condo.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'condo_id', hId);

    _user.user.set(seller, 'condo_id', 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали квартиру за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили квартиру за ~s~$' + _methods.methods.numberFormat(sum));

    _user.user.loginterract(player, seller, "PlayerSell", `Продал квартиру @condo${hId} за $${sum}`);

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:business:sellToPlayer', (player, buyerId, sum) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'business_id') === 0) {
    player.notify('~r~У Вас нет бизнеса');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'business_id') > 0) {
      player.notify('~r~У игрока уже есть бизнес');
      buyer.notify('~r~У Вас уже есть бизнес');
      return;
    }

    if (_user.user.getLevel(buyer) < _level.levelAccess.buyBusiness) {
      player.notify('~r~Для покупки игроку нужно иметь ' + _level.levelAccess.buyBusiness + " ур.");
      return false;
    }

    buyer.call('client:business:sellToPlayer', [_user.user.get(player, 'business_id'), sum, _user.user.getId(player)]);
    buyer.notify('~b~Вам предложили купить бизнес ' + _business.business.get(_user.user.get(player, 'business_id'), 'name') + ' за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы предложили купить бизнес игроку');
  }
});
mp.events.addRemoteCounted('server:business:sellToPlayer:accept', (player, houseId, sum, sellerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'is_gos_blacklist')) {
    player.notify('~r~Вы состоите в чёрном списке');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.get(player, 'business_id') > 0) {
    player.notify('~r~У Вас есть бизнес');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.buyBusiness) {
    player.notify('~r~Для покупки нужно иметь ' + _level.levelAccess.buyBusiness + " ур.");
    return false;
  }

  if (_user.user.get(player, 'biz_lic') === false) {
    player.notify('~r~У Вас нет лицензии на бизнес');
    player.notify('~r~Купить её можно у сотрудников правительства');
    return false;
  }

  if (_user.user.get(player, 'fraction_id') == 1 && _user.user.get(player, 'rank') > 7) {
    player.notify('~r~Запрещено покупать бизнесы сотрудникам правительства выше 7 ранга');
    return false;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'business_id');

    if (hId === 0) {
      player.notify('~r~У игрока уже нет бизнеса');
      seller.notify('~r~У Вас нет бизнеса');
      return;
    }

    _business.business.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'business_id', hId);

    _user.user.set(seller, 'business_id', 0);

    _user.user.set(player, 'fraction_id2', hId);

    _user.user.set(player, 'rank2', 11);

    _user.user.set(seller, 'fraction_id2', 0);

    _user.user.set(seller, 'rank2', 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали бизнес за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили бизнес за ~s~$' + _methods.methods.numberFormat(sum));

    _user.user.loginterract(player, seller, "PlayerSell", `Продал бизнес @business${hId} за $${sum}`);

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:apartments:sellToPlayer', (player, buyerId, sum) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'apartment_id') === 0) {
    player.notify('~r~У Вас нет апартаментов');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'apartment_id') > 0) {
      player.notify('~r~У игрока уже есть апартаменты');
      buyer.notify('~r~У Вас уже есть апартаменты');
      return;
    }

    buyer.call('client:apartments:sellToPlayer', [_user.user.get(player, 'apartment_id'), sum, _user.user.getId(player)]);
    buyer.notify('~b~Вам предложили купить апартаменты ' + _apartments.apartments.get(_user.user.get(player, 'apartment_id'), 'id') + ' за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы предложили купить апартаменты игроку');
  }
});
mp.events.addRemoteCounted('server:apartments:sellToPlayer:accept', (player, houseId, sum, sellerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'apartment_id') > 0) {
    player.notify('~r~У Вас есть апартаменты');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'apartment_id');

    if (hId === 0) {
      player.notify('~r~У игрока уже нет апартаментов');
      seller.notify('~r~У Вас нет апартаментов');
      return;
    }

    _apartments.apartments.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'apartment_id', hId);

    _user.user.set(seller, 'apartment_id', 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали апартаменты за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили апартаменты за ~s~$' + _methods.methods.numberFormat(sum));

    _user.user.loginterract(player, seller, "PlayerSell", `Продал апартаменты @apartment${hId} за $${sum}`);

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:stock:sellToPlayer', (player, buyerId, sum) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'stock_id') === 0) {
    player.notify('~r~У Вас нет склада');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  let buyer = _user.user.getPlayerById(buyerId);

  if (_user.user.isLogin(buyer)) {
    if (_methods.methods.distanceToPos(buyer.position, player.position) > 2) {
      player.notify('~r~Вы слишком далеко');
      return;
    }

    if (_user.user.get(buyer, 'stock_id') > 0) {
      player.notify('~r~У игрока уже есть склад');
      buyer.notify('~r~У Вас уже есть склад');
      return;
    }

    buyer.call('client:stock:sellToPlayer', [_user.user.get(player, 'stock_id'), sum, _user.user.getId(player)]);
    buyer.notify('~b~Вам предложили купить склад ' + _stock.stock.get(_user.user.get(player, 'stock_id'), 'address') + ' (' + _stock.stock.get(_user.user.get(player, 'stock_id'), 'id') + ') за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы предложили купить склад игроку');
  }
});
mp.events.addRemoteCounted('server:stock:sellToPlayer:accept', (player, houseId, sum, sellerId) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.get(player, 'stock_id') > 0) {
    player.notify('~r~У Вас есть склад');
    return;
  }

  if (isNaN(sum) || sum <= 0) {
    player.notify('~r~Сумма указана не верно');
    return;
  }

  if (_user.user.getCashMoney(player) < sum) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  let seller = _user.user.getPlayerById(sellerId);

  if (_user.user.isLogin(seller)) {
    let hId = _user.user.get(seller, 'stock_id');

    if (hId === 0) {
      player.notify('~r~У игрока уже нет склада');
      seller.notify('~r~У Вас нет склада');
      return;
    }

    _stock.stock.updateOwnerInfo(hId, _user.user.getId(player), _user.user.getRpName(player));

    _user.user.set(player, 'stock_id', hId);

    _user.user.set(seller, 'stock_id', 0);

    _user.user.addCashMoney(seller, sum);

    _user.user.removeCashMoney(player, sum);

    seller.notify('~b~Вы продали склад за ~s~$' + _methods.methods.numberFormat(sum));
    player.notify('~b~Вы купили склад за ~s~$' + _methods.methods.numberFormat(sum));

    _user.user.loginterract(player, seller, "PlayerSell", `Продал апартаменты @stock${hId} за $${sum}`);

    _user.user.saveAccount(player);

    _user.user.saveAccount(seller);
  }
});
mp.events.addRemoteCounted('server:car1:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 1);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car2:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 2);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car3:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 3);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car4:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 4);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car5:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 5);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car6:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 6);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car7:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 7);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:car8:sell', async player => {
  if (!_user.user.isLogin(player)) return;
  await _vehicles.vehicles.sell(player, 8);

  _index.autosalon.loadCars();
});
mp.events.addRemoteCounted('server:user:seeGosDoc', (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    if (_user.user.isCuff(remotePlayer)) {
      player.notify('~r~Игрок в наручниках');
      return;
    }

    if (_user.user.isSheriff(remotePlayer) || _user.user.isSapd(remotePlayer)) {
      player.notify(`~y~Номер жетона:~s~ ${_user.user.getId(remotePlayer)}`);
      player.notify(`~y~Имя:~s~ ${_user.user.getRpName(remotePlayer)}`);
      player.notify(`~y~Организация:~s~ ${_methods.methods.getFractionName(_user.user.get(remotePlayer, 'fraction_id'))}`);
    } else {
      player.notify('~r~Вы не нашли жетон');
    }
  }
});
mp.events.addRemoteCounted('server:user:showGosDoc', (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    if (!_user.user.isCuff(remotePlayer) && remotePlayer != player) {
      _user.user.playAnimation(remotePlayer, 'mp_common', 'givetake2_a', 8);

      _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 8);
    }

    if ([2, 3, 7].includes(_user.user.get(player, 'fraction_id'))) {
      const fId = _user.user.get(player, 'fraction_id');

      const data = {
        type: fId == 2 ? 'police' : fId == 3 ? 'fib' : fId == 7 ? 'sheriff' : '',
        name: _user.user.getRpName(player),
        organization: _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')),
        post: _user.user.getRankName(_user.user.get(player, 'fraction_id'), _user.user.get(player, 'rank')),
        division: _user.user.get(player, 'tag') == '' ? null : _user.user.get(player, 'tag')
      };

      _user.user.setGui(remotePlayer, 'police_bage');

      setTimeout(() => mp.events.triggerBrowser(remotePlayer, 'cef:police_bage:init', ...Object.values(data)), 100);
    } else {
      let menuData = new Map();
      menuData.set('Card ID', '' + _user.user.getId(player));
      menuData.set('Имя', '' + _user.user.getRpName(player));
      menuData.set('Организация', '' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')));
      menuData.set('Должность', '' + _user.user.getRankName(_user.user.get(player, 'fraction_id'), _user.user.get(player, 'rank')));
      menuData.set('Отдел', '' + (_user.user.get(player, 'tag') == '' ? '~r~Нет' : _user.user.get(player, 'tag')));

      _user.user.showMenu(remotePlayer, 'Документы', _user.user.getRpName(player), menuData, true);
    }
  }
});
mp.events.addRemoteCounted('server:user:showLic', (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    if (_user.user.isCuff(remotePlayer)) {
      player.notify('~r~Игрок в наручниках');
      return;
    }

    if (remotePlayer != player) {
      _user.user.playAnimation(remotePlayer, 'mp_common', 'givetake2_a', 8);

      _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 8);
    }

    const data = {
      name: _user.user.getRpName(player),
      a_lic: _user.user.get(player, 'a_lic'),
      b_lic: _user.user.get(player, 'b_lic'),
      c_lic: _user.user.get(player, 'c_lic'),
      air_lic: _user.user.get(player, 'air_lic'),
      ship_lic: _user.user.get(player, 'ship_lic'),
      gun_lic: _user.user.get(player, 'gun_lic'),
      taxi_lic: _user.user.get(player, 'taxi_lic'),
      law_lic: _user.user.get(player, 'law_lic'),
      med_lic: _user.user.get(player, 'med_lic'),
      biz_lic: _user.user.get(player, 'biz_lic'),
      animal_lic: _user.user.get(player, 'animal_lic'),
      fish_lic: _user.user.get(player, 'fish_lic')
    };

    _user.user.setGui(remotePlayer, 'license');

    setTimeout(() => {
      if (mp.players.exists(remotePlayer)) mp.events.triggerBrowser(remotePlayer, 'cef:license:init', data);
    }, 100);
  }
});
mp.events.addRemoteCounted('server:user:showCardId', (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    if (_user.user.isCuff(remotePlayer)) {
      player.notify('~r~Игрок в наручниках');
      return;
    }

    if (remotePlayer != player) {
      _user.user.playAnimation(remotePlayer, 'mp_common', 'givetake2_a', 8);

      _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 8);
    }

    let menuData = new Map();

    let years = _user.user.getYears(player);

    menuData.set('Card ID', '' + _user.user.getId(player));
    menuData.set('Имя', '' + _user.user.getRpName(player));
    menuData.set('Проживает в штате', `${years} лет.`);
    menuData.set('Возраст', `${_user.user.get(player, "age")} лет.`);
    menuData.set('Регистрация', '' + _user.user.getRegStatusName(player));

    _user.user.showMenu(remotePlayer, 'Документы', _user.user.getRpName(player), menuData);
  }
});
mp.events.addRemoteCounted('server:user:giveMoneyToPlayerId', (player, playerRemoteId, money) => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getCashMoney(player) < money) {
    player.notify('~r~У Вас нет столько денег');
    return;
  }

  const userid = _user.user.getId(player);

  if (!sendMoney.has(userid)) sendMoney.set(userid, 0);
  if (sendMoney.get(userid) + money > sendmoneymax) return player.notify('~r~Лимит передачи денег с рук на руки в сутки: ' + sendmoneymax + '$');
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    _user.user.removeCashMoney(player, money);

    sendMoney.set(userid, sendMoney.get(userid) + money);

    _user.user.addCashMoney(remotePlayer, money);

    _user.user.playAnimation(remotePlayer, 'mp_common', 'givetake2_a', 8);

    _user.user.playAnimation(player, 'mp_common', 'givetake1_a', 8);

    remotePlayer.notify('Вам передали ~g~$' + _methods.methods.numberFormat(money));
    player.notify('Вы передали ~g~$' + _methods.methods.numberFormat(money));

    _methods.methods.saveLog('GiveCash', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) to ${_user.user.getRpName(remotePlayer)} (${_user.user.getId(remotePlayer)}) count $${money}`);
  }
});
mp.events.addRemoteCounted('server:user:askDatingToPlayerId', (player, playerRemoteId, name) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer && _user.user.isLogin(remotePlayer)) {
    remotePlayer.call('client:user:askDatingToPlayerId', [player.id, name]);
  }
});
mp.events.addRemoteCounted('server:user:askDatingToPlayerIdYes', (player, playerRemoteId, name, nameAnswer) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (_user.user.isLogin(remotePlayer)) {
    _userDatingEntity.userDatingEntity.destroy({
      where: {
        user_id: _user.user.getId(player),
        user_owner: _user.user.getId(remotePlayer)
      }
    });

    _userDatingEntity.userDatingEntity.destroy({
      where: {
        user_id: _user.user.getId(remotePlayer),
        user_owner: _user.user.getId(player)
      }
    });

    setTimeout(function () {
      if (!_user.user.isLogin(remotePlayer) || !_user.user.isLogin(player)) return;

      _userDatingEntity.userDatingEntity.create({
        user_owner: _user.user.getId(remotePlayer),
        user_id: _user.user.getId(player),
        user_name: nameAnswer
      });

      _userDatingEntity.userDatingEntity.create({
        user_owner: _user.user.getId(player),
        user_id: _user.user.getId(remotePlayer),
        user_name: name
      });
    }, 5000);

    _user.user.setDating(player, _user.user.getId(remotePlayer), name);

    _user.user.setDating(remotePlayer, _user.user.getId(player), nameAnswer);
  }
});
mp.events.addRemoteCounted('server:user:inviteFraction', async (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer) {
    if (_user.user.get(remotePlayer, 'fraction_id') > 0) {
      player.notify('Игрок уже состоит в организации');
      return;
    }

    if ((await _user.user.countWarns(remotePlayer)) > 0) {
      return player.notify("~r~Данный игрок имеет предупреждение");
    }

    if (_user.user.isGos(player) && _user.user.get(remotePlayer, 'is_gos_blacklist')) {
      player.outputChatBox(`!{${_chat.chat.clRed}} Игрок состоит в чёрном списке гос. организаций`);
      player.outputChatBox(`!{${_chat.chat.clRed}} Причина: !{${_chat.chat.clWhite}} ${_user.user.get(remotePlayer, 'gos_blacklist_reason')}`);
      return;
    }

    _user.user.accept(remotePlayer, "Хотите вступить в организацию?").then(res => {
      if (!res) {
        player.notify('~r~Игрок отклонил предложение');
        return;
      }

      if (_user.user.isGos(player)) {
        _user.user.addHistory(remotePlayer, 0, 'Был принят в организацию ' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')) + '. Принял: ' + _user.user.getRpName(player));
      }

      _user.user.loginterract(player, remotePlayer, "Invite", "Принял в организацию");

      _user.user.set(remotePlayer, 'fraction_id', _user.user.get(player, 'fraction_id'));

      _user.user.set(remotePlayer, 'rank', 1);

      _user.user.saveAccount(remotePlayer);

      _user.user.updateClientCache(remotePlayer);

      remotePlayer.notify('Вас приняли в организацию ~g~' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')));
      player.notify('Вы приняли в организацию ~g~' + remotePlayer.getVariable('id'));

      _methods.methods.saveLog('inviteFraction', 'Был принят в организацию ' + _methods.methods.getFractionName(_user.user.get(player, 'fraction_id')) + '. Принял: ' + _user.user.getRpName(player));
    });
  }
});
mp.events.addRemoteCounted('server:user:inviteFraction2', (player, playerRemoteId) => {
  if (!_user.user.isLogin(player)) return;
  if (!_business.business.isOffice(_user.user.get(player, 'fraction_id2'))) return player.notify(`~r~Доступно только для офисов`);
  let remotePlayer = mp.players.at(playerRemoteId);

  if (remotePlayer) {
    if (_user.user.get(remotePlayer, 'fraction_id2') > 0) {
      player.notify('~r~Игрок уже состоит в организации');
      return;
    }

    if (_user.user.getLevel(remotePlayer) < _level.levelAccess.inviteFraction2 && _business.business.getFractionType(_user.user.get(player, 'fraction_id2')) != 3) {
      player.notify('~r~Игрок должен иметь уровень ' + _level.levelAccess.inviteFraction2);
      return;
    }

    _user.user.accept(remotePlayer, "Хотите вступить в организацию?").then(res => {
      if (!res) {
        player.notify('~r~Игрок отклонил предложение');
        return;
      }

      _user.user.loginterract(player, remotePlayer, "Invite", "Принял в не офф организацию");

      _user.user.set(remotePlayer, 'fraction_id2', _user.user.get(player, 'fraction_id2'));

      _user.user.set(remotePlayer, 'rank2', 1);

      _user.user.saveAccount(remotePlayer);

      remotePlayer.notify('Вас приняли в организацию');
      player.notify('Вы приняли в организацию');

      _user.user.set(remotePlayer, 'fractionType', _business.business.getFractionType(_user.user.get(remotePlayer, 'fraction_id2')));

      setTimeout(function () {
        if (mp.players.exists(remotePlayer)) _user.user.updateClientCache(remotePlayer);
      }, 500);
    });
  }
});
mp.events.addRemoteCounted('server:fixCheckpointList', player => {
  try {
    for (let i = 0; i < _methods.methods.parseInt(_methods.methods.getCheckPointStaticList().length / 500) + 1; i++) player.call('client:updateCheckpointList', [_methods.methods.getCheckPointStaticList().slice(i * 500, i * 500 + 499), i]);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.addRemoteCounted('server:houses:getRandomHousePositionOfLosSantos', (player, triggerName) => {
  if (!_user.user.isLogin(player)) return;

  _houses.houses.getRandomHousePositionOfLosSantos(player, triggerName);
});
mp.events.add('server:azs:openAzs', player => {
  if (player.vehicle) return player.notify("Покиньте транспорт");
  let playerPos = player.position;

  _fuel.fuel.stations.forEach(function (item, idx) {
    let fuelStationShopPos = new mp.Vector3(item[0], item[1], item[2]);

    if (_methods.methods.distanceToPos(playerPos, fuelStationShopPos) < 2) {
      let stationId = _methods.methods.parseInt(item[6]);

      let fuelStationPos = new mp.Vector3(_fuel.fuel.markers[idx][0], _fuel.fuel.markers[idx][1], _fuel.fuel.markers[idx][2]);

      let vehicleList = _methods.methods.getListOfVehicleInRadius(fuelStationPos, _methods.methods.parseInt(item[5]));

      let vehicleNames = [];
      let fullTank = [];
      let currentTank = [];
      vehicleList.map(veh => {
        let vInfo = _methods.methods.getVehicleInfo(veh.model);

        currentTank.push(_vehicles.vehicles.getFuel(veh));
        fullTank.push(vInfo.fuel_full);
        vehicleNames.push([vInfo.display_name, veh.numberPlate]);
      });

      try {
        _user.user.setGui(player, 'azs');

        setTimeout(() => mp.events.triggerBrowser(player, 'cef:azs:init', vehicleNames, stationId, fullTank, currentTank, _business.business.getPrice(stationId)), 100);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }
  });
});
mp.events.register('server:azs:buyCanister', (player, shopId, price) => {
  if (_user.user.getMoney(player) < price * 10) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  let amount = _inventory.inventory.getInvAmount(player, _user.user.getId(player), 1);

  if (amount + _items.items.getItemAmountById(9) > _inventory.inventory.maxAmount(1, _user.user.getId(player))) {
    player.notify('~r~Инвентарь заполнен');
    return;
  }

  _user.user.setGui(player, null);

  _user.user.removeMoney(player, price * 10);

  _business.business.addMoney(shopId, price * 10);

  _inventory.inventory.addItem(player, 9, 1, 1, _user.user.getId(player), 1, -1, -1, -1);

  _inventory.inventory.updateAmount(player, _user.user.getId(player), 1);

  player.notify('~g~Вы купили канистру по цене: $' + price * 10);
});
mp.events.register('server:azs:fill', (player, number, fuel, shopId, price) => {
  if (!_user.user.isLogin(player)) return;

  let veh = _vehicles.vehicles.findVehicleByNumber(number);

  if (!veh) return;

  if (!_vehicles.vehicles.exists(veh)) {
    player.notify('~r~Транспорт не был заправлен');
    return;
  }

  let vInfo = _methods.methods.getVehicleInfo(veh.model);

  if (vInfo.fuel_full == 1) {
    player.notify('~r~Заправлять электроавто не нужно');
    return;
  }

  if (vInfo.fuel_full - _vehicles.vehicles.getFuel(veh) < fuel) fuel = vInfo.fuel_full - _vehicles.vehicles.getFuel(veh);
  if (fuel <= 0) return player.notify("ТС уже заправлен");

  let money = _methods.methods.parseInt(fuel * price);

  if (!veh.is_gos && _user.user.getMoney(player) < money) {
    player.notify('~r~У Вас недостаточно средств');
    return;
  }

  _vehicles.vehicles.setFuel(veh, _vehicles.vehicles.getFuel(veh) + fuel);

  if (veh.is_gos) {
    player.notify(`~g~Данный ТС заправляется бесплатно`);
  } else {
    _business.business.addMoney(shopId, money);

    player.notify('~g~Вы заправили свой транспорт по цене: $' + money);

    _user.user.removeMoney(player, money);
  }

  _user.user.setGui(player, null);
});
mp.events.addRemoteCounted('server:addFractionLog', (player, name, doName, fractionId) => {
  _logFractionGunEntity.logFractionGunEntity.create({
    name: name,
    do: doName,
    fraction_id: fractionId,
    timestamp: _methods.methods.getTimeStamp()
  });
});
mp.events.addRemoteCounted('server:methods:saveLog', (player, name, log) => {
  _methods.methods.saveLog(name, log);
});
mp.events.addRemoteCounted('server:methods:createGlobalPedInVehicle', (player, model, vehicleId) => {
  _methods.methods.createGlobalPedInVehicle(model, vehicleId);
});
mp.events.addRemoteCounted('server:methods:deleteGlobalPed', (player, id) => {
  _methods.methods.deleteGlobalPed(id);
});
mp.events.addRemoteCounted('server:user:setHeal', (player, level) => {
  _user.user.healProtect(player);

  player.health = level;
});
mp.events.addRemoteCounted('server:user:getTaxi', (player, type, price) => {
  if (!_user.user.isLogin(player)) return;

  _user.user.set(player, 'taxiType', type);

  _user.user.set(player, 'taxiPrice', price);

  setTimeout(function () {
    if (_user.user.isLogin(player)) {
      if (!player.vehicle) {
        _user.user.reset(player, 'taxiPrice');

        _user.user.reset(player, 'taxiType');
      }
    }
  }, 1000 * 60 * 5);
  const ids = (0, _dispatcher.dispatchTaxiIdSet)();
  mp.vehicles.forEach(function (v) {
    if ((v.getVariable('job') == 'taxi1' || v.getVariable('job') == 'taxi2') && v.getOccupants().length > 0) {
      v.getOccupants().forEach(function (p) {
        if (_user.user.isLogin(p) && (_user.user.get(p, 'job') == 'taxi1' || _user.user.get(p, 'job') == 'taxi2') && p.seat == -1) {
          switch (type) {
            case 0:
              if (_methods.methods.getVehicleInfo(v.model).display_name == 'Primo' || _methods.methods.getVehicleInfo(v.model).display_name == 'Taxi' || _methods.methods.getVehicleInfo(v.model).display_name == 'Oracle2' || _methods.methods.getVehicleInfo(v.model).display_name == 'Schafter4' || _methods.methods.getVehicleInfo(v.model).display_name == 'Revolter' || _methods.methods.getVehicleInfo(v.model).display_name == 'SC1') _dispatcher.dispatcher.sendTaxiPosForPlayer(p, _user.user.getPhone(player), 'Клиент вызвал такси ~b~эконом ~s~класса. Цена: ~g~$' + price, price, player.position, ids);
              break;

            case 1:
              if (_methods.methods.getVehicleInfo(v.model).display_name == 'Oracle2' || _methods.methods.getVehicleInfo(v.model).display_name == 'Schafter4' || _methods.methods.getVehicleInfo(v.model).display_name == 'Revolter' || _methods.methods.getVehicleInfo(v.model).display_name == 'SC1') _dispatcher.dispatcher.sendTaxiPosForPlayer(p, _user.user.getPhone(player), 'Клиент вызвал такси ~b~комфорт ~s~класса. Цена: ~g~$' + price, price, player.position, ids);
              break;

            case 2:
              if (_methods.methods.getVehicleInfo(v.model).display_name == 'Schafter4' || _methods.methods.getVehicleInfo(v.model).display_name == 'Revolter' || _methods.methods.getVehicleInfo(v.model).display_name == 'SC1') _dispatcher.dispatcher.sendTaxiPosForPlayer(p, _user.user.getPhone(player), 'Клиент вызвал такси ~b~комфорт+ ~s~класса. Цена: ~g~$' + price, price, player.position, ids);
              break;

            case 3:
              if (_methods.methods.getVehicleInfo(v.model).display_name == 'Revolter' || _methods.methods.getVehicleInfo(v.model).display_name == 'SC1') _dispatcher.dispatcher.sendTaxiPosForPlayer(p, _user.user.getPhone(player), 'Клиент вызвал такси ~b~бизнес ~s~класса. Цена: ~g~$' + price, price, player.position, ids);
              break;

            case 4:
              if (_methods.methods.getVehicleInfo(v.model).display_name == 'SC1') _dispatcher.dispatcher.sendTaxiPosForPlayer(p, _user.user.getPhone(player), 'Клиент вызвал такси ~b~премиум ~s~класса. Цена: ~g~$' + price, price, player.position, ids);
              break;
          }
        }
      });
    }
  });
});
mp.events.addRemoteCounted('server:user:sendTaxiAccept', (player, phone, id) => {
  if (!_user.user.isLogin(player) || !player.vehicle) return;
  let iconPic = _user.user.get(player, 'job') == 'taxi1' ? 'CHAR_TAXI' : 'CHAR_TAXI_LIZ';

  _data.Container.Set(id, 'acceptTaxi', true);

  mp.players.forEach(function (p) {
    if (!_user.user.isLogin(p)) return;

    if (_user.user.getPhone(p) == phone) {
      let distance = _methods.methods.parseInt(_methods.methods.distanceToPos(p.position, player.position)).toString();

      let min = '1';
      if (distance.length == 4) min = distance.charAt(0);else if (distance.length == 5) min = distance.charAt(0) + distance.charAt(1);
      p.notifyWithPicture(_user.user.getRpName(player), 'Диспетчер', `Таксист принял заказ, время ожидания ~b~${min}мин.`, iconPic, 1, false, -1, -1, [77, 77, 77, 200]);
      p.notify(`~y~Марка авто: ~s~${_methods.methods.getVehicleInfo(player.vehicle.model).display_name}`);
      p.notify(`~y~Цвет: ~s~${_user.user.get(player, 'job') == 'taxi1' ? 'Желто-черный' : 'Бело-красный'}`);
      p.notify(`~y~Номер: ~s~${player.vehicle.numberPlate}`);
      p.notify(`~y~Пожалуйста оставайтесь на месте`);
    }

    if (p.vehicle && p.seat == -1 && _user.user.get(p, 'job') == _user.user.get(player, 'job')) p.notifyWithPicture(_user.user.getRpName(player), 'Диспетчер', `Заказ ~b~#${id}~s~ был принят`, iconPic, 1, false, -1, -1, [77, 77, 77, 200]);
  });
});
mp.events.add('playerEnterVehicle', (player, vehicle, seat) => {
  if (seat == -1) return;
  if (!_user.user.has(player, 'taxiType')) return;

  if (vehicle.getVariable('job') == 'taxi1' || vehicle.getVariable('job') == 'taxi2') {
    vehicle.getOccupants().forEach(function (p) {
      if (p.seat == -1) {
        if (_user.user.getLevel(player) == _level.levelAccess.freeTaxi) player.notify('~g~Акция от компании, поездка бесплатна');
        p.notify('~g~Ваш клиент сел к вам в такси');
        player.notify('~g~По завершению поездки будет выставлен счёт');
        let pos = player.position;

        _user.user.set(player, 'taxiStartPosX', pos.x);

        _user.user.set(player, 'taxiStartPosY', pos.y);

        _user.user.set(player, 'taxiStartPosZ', pos.z);

        if (_user.user.has(player, 'taxiPosX')) {
          let finalPosX = _user.user.get(player, 'taxiPosX');

          let finalPosY = _user.user.get(player, 'taxiPosY');

          _user.user.setWaypoint(p, finalPosX, finalPosY);
        }
      }
    });
  }
});
mp.events.add('playerExitVehicle', (player, vehicle) => {
  if (vehicle.getVariable('job') == 'taxi1' || vehicle.getVariable('job') == 'taxi2') {
    if (_user.user.has(player, 'taxiStartPosX')) {
      let driver = _user.user.getVehicleDriver(vehicle);

      let pos = player.position;

      let startPosX = _user.user.get(player, 'taxiStartPosX');

      let startPosY = _user.user.get(player, 'taxiStartPosY');

      let startPosZ = _user.user.get(player, 'taxiStartPosZ');

      let startPos = new mp.Vector3(startPosX, startPosY, startPosZ);

      if (_user.user.has(player, 'taxiPosX')) {
        let dist = _methods.methods.distanceToPos2D(pos, startPos);

        let classType = _user.user.has(player, 'taxiType') ? _user.user.get(player, 'taxiType') : _methods.methods.getTaxiModalClass(vehicle.model);
        if (_user.user.getLevel(player) == _level.levelAccess.freeTaxi) classType = 0;
        let finalPrice = _user.user.has(player, 'taxiPrice') ? _user.user.get(player, 'taxiPrice') : _methods.methods.getTaxiDistPrice(pos, startPos, classType);

        if (dist < 200) {
          player.notify('~r~Ваша поездка была слишком короткой');
          if (mp.players.exists(driver)) driver.notify('~r~Ваша поездка была слишком короткой');
        } else {
          finalPrice = _methods.methods.getTaxiDistPrice(pos, startPos, classType);

          try {
            if (_user.user.isLogin(driver)) {
              if (_user.user.get(driver, 'job') == 'taxi1' || _user.user.get(driver, 'job') == 'taxi2') {
                if (_user.user.getLevel(player) == _level.levelAccess.freeTaxi) {
                  _user.user.giveTaxiJobMoney(driver, finalPrice * 0.8);

                  player.notify('~g~Акция от компании, поездка бесплатна');
                } else {
                  if (finalPrice >= 150 && _user.user.get(driver, 'skill_taxi') < 400) {
                    if (mp.players.exists(driver)) _user.user.set(driver, 'skill_taxi', _user.user.get(driver, 'skill_taxi') + _methods.methods.parseInt(finalPrice / 100));
                  }

                  _user.user.removeCashMoney(player, finalPrice);

                  player.notify('~g~Вы заплатили за поездку ~s~$' + _methods.methods.numberFormat(finalPrice));
                  if (mp.players.exists(driver)) _user.user.giveTaxiJobMoney(driver, finalPrice * 0.9);
                }

                if (mp.players.exists(driver)) driver.notify('~g~Поездка была завершена');
              }
            }
          } catch (e) {
            _methods.methods.debug(e);
          }
        }
      }

      _user.user.reset(player, 'taxiStartPosX');

      _user.user.reset(player, 'taxiStartPosY');

      _user.user.reset(player, 'taxiStartPosZ');

      _user.user.reset(player, 'taxiPosX');

      _user.user.reset(player, 'taxiPosY');

      _user.user.reset(player, 'taxiType');

      _user.user.reset(player, 'taxiPrice');
    }
  }
});
mp.events.add('rappel', player => {
  mp.players.call('rappelSync', [player.id]);
});
mp.events.add('playerDeath', (player, reason, killer) => {
  if (_user.user.isLogin(killer) && _user.user.isLogin(player)) {
    try {
      let killerPos = killer.position;

      _methods.methods.saveLog('PlayerDeath', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) kill by ${_user.user.getRpName(killer)} (${_user.user.getId(killer)}) ${reason} [${killerPos.x}, ${killerPos.y}, ${killerPos.z}]`);
    } catch (e) {
      _methods.methods.debug(e);
    }
  } else if (_user.user.isLogin(player)) {
    try {
      _methods.methods.saveLog('PlayerDeath', `${_user.user.getRpName(player)} (${_user.user.getId(player)}) ${reason}`);
    } catch (e) {
      _methods.methods.debug(e);
    }
  }

  _user.user.set(player, 'killerInJail', false);

  if (_user.user.isLogin(killer)) {
    if (_user.user.isGosPD(killer) && !_user.user.isGosPD(player)) {
      if (_user.user.get(player, 'wanted_level') > 0) {
        _user.user.set(player, 'killerInJail', true);
      }
    }
  }
});
mp.events.addRemoteCounted('server:sendMegaphonePrison', (player, text) => {
  if (_user.user.isLogin(player)) {
    let playerName = _user.user.getRpName(player);

    _chat.chat.sendPos(new mp.Vector3(1707.69, 2546.69, 45.56), 200, `Мегафон тюрьмы (( ${playerName} ))`, text, _chat.chat.clOrange);
  }
});
mp.events.addRemoteCounted('playerDeathDone', player => {
  if (_user.user.isLogin(player)) {
    if (_user.user.has(player, 'killerInJail') && _user.user.get(player, 'killerInJail')) {
      _user.user.jail(player, _user.user.get(player, 'wanted_level') * 450);

      player.outputChatBox('!{#FFC107}Вас привезли в больницу с огнестрельным ранением и у врачей возникли подозрения, поэтому они сделали запрос в SAPD и сотрудники SAPD выяснили, что у вас есть розыск. После лечения вы отправились в тюрьму.');
    }
  }
});
const AFTER_DEATH_TIMER = 30;
let deadListids = 0;
let deadList = [];
exports.deadList = deadList;
mp.events.addRemoteCounted('server:login:success:after', player => {
  if (_user.user.isAdmin(player)) {
    player.call('listAfterDeath', [JSON.stringify(deadList)]);
  }
});
mp.events.addRemoteCounted('playerDeathDone', player => {
  if (_user.user.isLogin(player)) {
    deadListids++;
    const id = parseInt(`${deadListids}`);
    let obj = {
      ids: id,
      id: _user.user.getId(player),
      x: player.position.x,
      y: player.position.y,
      z: player.position.z
    };
    deadList.push(obj);
    mp.players.toArray().filter(target => _user.user.isLogin(target) && _user.user.isAdmin(target)).map(target => {
      target.call('addAfterDeath', [obj]);
    });
    setTimeout(() => {
      let fnd = deadList.findIndex(value => value.ids == id);

      if (fnd > -1) {
        deadList.splice(fnd, 1);
        mp.players.toArray().filter(target => _user.user.isLogin(target) && _user.user.isAdmin(target)).map(target => {
          target.call('removeAfterDeath', [id]);
        });
      }
    }, AFTER_DEATH_TIMER * 60 * 1000);
  }
});
mp.events.addRemoteCounted('onKeyPress:2', player => {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.isDriver(player)) {
    let data = _vehicles.vehicles.getData(player.vehicle.getVariable('container'));

    let vInfo = _methods.methods.getVehicleInfo(player.vehicle.model);

    let ownerName = 'Государство';
    if (data.get('id_user') > 0) ownerName = data.get('user_name');
    if (data.get('fraction_id') > 0) ownerName = _methods.methods.getFractionName(data.get('fraction_id'));
    if (data.get('job') > 0) ownerName = _methods.methods.getCompanyName(data.get('job'));

    let m = _menu.menu.new(player, "", `~b~Владелец: ~s~${ownerName}`);

    m.sprite = "shopui_title_ie_modgarage";
    m.newItem({
      name: `Выкинуть пассажира из ТС`,
      onpress: () => {
        if (!player.vehicle) return _menu.menu.close(player);
        let list = player.vehicle.getOccupants();
        if (list.length <= 1) return player.notify(`~r~В ТС нет пассажиров`);

        _menu.menu.selectNearestPlayers(player, 0).then(target => {
          if (!player.vehicle) return _menu.menu.close(player);
          if (!target) return;
          if (!target.vehicle || player.vehicle != target.vehicle) return;
          if (_user.user.getId(target) == data.get('id_user')) return player.notify("~r~Нельзя выкинуть владельца ТС");
          target.removeFromVehicle();
          target.notify('~r~Водитель вас выкинул из ТС');
        });
      }
    });

    if (vInfo.class_name != 'Cycles') {
      m.newItem({
        name: `~g~Вкл~s~ / ~r~выкл~s~ двигатель`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);

          if (_user.user.isDriver(player)) {
            const veh = player.vehicle;
            if (_user.user.isAdminNow(player)) return _vehicles.vehicles.engineStatus(player, player.vehicle);

            if (veh.fraction_id) {
              if (_user.user.getPlayerFraction(player) == veh.fraction_id) _vehicles.vehicles.engineStatus(player, player.vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
            } else {
              _vehicles.vehicles.engineStatus(player, player.vehicle);
            }
          }
        }
      });
    }

    if (vInfo.class_name == 'Boats' || [mp.joaat('riot'), mp.joaat('riot2'), mp.joaat('insurgent'), mp.joaat('insurgent2')].includes(player.vehicle.model)) {
      m.newItem({
        name: `~g~Вкл~s~ / ~r~выкл~s~ ${vInfo.class_name == 'Boats' ? 'якорь' : 'ручник'}`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);
          player.vehicle.setVariable('freezePosition', !!!player.vehicle.getVariable('freezePosition'));
          player.notify(`~g~${vInfo.class_name == 'Boats' ? 'Якорь' : 'Ручник'}: ${!!player.vehicle.getVariable('freezePosition') ? '~g~Опущен' : '~b~Поднят'}`);
        }
      });
    }

    if (vInfo.fuel_min > 0) m.newItem({
      name: `Топливо`,
      more: `Топливо: ~g~${Math.round(data.get('fuel'))}~s~л.`,
      onpress: () => {
        if (!player.vehicle) return _menu.menu.close(player);

        let pos = _fuel.fuel.findNearest(player.position);

        if (!pos) return player.notify(`~r~Не удалось найти заправку поблизости`);

        _user.user.setWaypoint(player, pos.x, pos.y);

        player.notify('~b~Метка на заправку установлена');
      }
    });else if (vInfo.class_name != 'Cycles') {
      m.newItem({
        name: `Топливо`,
        more: `Не требует заправки`
      });
    }

    if (vInfo.class_name !== 'Planes' || vInfo.class_name !== 'Cycles' || vInfo.class_name !== 'Helicopters' || vInfo.class_name !== 'Boats') {
      m.newItem({
        name: `Управление транспортом`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);
          player.call('showVehicleDoMenu');
        }
      });
    }

    if (vInfo.fuel_min == 0 && vInfo.class_name != 'Cycles') m.newItem({
      name: `Автопилот`,
      onpress: () => {
        if (!player.vehicle) return _menu.menu.close(player);
        player.call('showVehicleAutopilotMenu');
      }
    });

    if (data.get('id_user') > 0 && _user.user.getId(player) == data.get('id_user')) {
      let v = player.vehicle;
      m.newItem({
        name: `~g~Открыть~s~ / ~r~Закрыть~s~`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);

          _vehicles.vehicles.lockStatus(player, player.vehicle);
        }
      });
      m.newItem({
        name: `Припарковать`,
        desc: "Транспорт будет спавниться на месте парковки",
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);
          let pos = player.vehicle.position;

          _vehicles.vehicles.park(player.vehicle.getVariable('container'), pos.x, pos.y, pos.z, player.vehicle.heading);

          player.notify('~b~Вы припарковали свой транспорт');
        }
      });

      if (data.get('neon_type') > 0) {
        m.newItem({
          name: `~g~Вкл~s~ / ~r~выкл~s~ неон`,
          onpress: () => {
            if (!player.vehicle) return _menu.menu.close(player);

            _vehicles.vehicles.neonStatus(player, player.vehicle);
          }
        });

        if (data.get('neon_type') > 1) {
          m.newItem({
            name: `~b~Цвет неона`,
            onpress: async () => {
              if (!player.vehicle) return _menu.menu.close(player);

              _vehicles.vehicles.neonStatus(player, player.vehicle);

              let r = await _menu.menu.input(player, 'Оттенок красного (0-255)', '0', 3, 'int');
              if (typeof r != 'number' || isNaN(r)) return;
              if (r < 0 || r > 255) return;
              let g = await _menu.menu.input(player, 'Оттенок красного (0-255)', '0', 3, 'int');
              if (typeof g != 'number' || isNaN(g)) return;
              if (g < 0 || g > 255) return;
              let b = await _menu.menu.input(player, 'Оттенок красного (0-255)', '0', 3, 'int');
              if (typeof b != 'number' || isNaN(b)) return;
              if (b < 0 || b > 255) return;
              player.vehicle.setNeonColor(r, g, b);

              _vehicles.vehicles.set(player.vehicle.getVariable('container'), 'neon_r', r);

              _vehicles.vehicles.set(player.vehicle.getVariable('container'), 'neon_g', g);

              _vehicles.vehicles.set(player.vehicle.getVariable('container'), 'neon_b', b);
            }
          });
        }
      }
    }

    m.newItem({
      name: `Характеристики`,
      onpress: () => {
        if (!player.vehicle) return _menu.menu.close(player);

        let submenu = _menu.menu.new(player, "Характеристики транспорта");

        submenu.newItem({
          name: `~b~Класс: ~s~`,
          more: `${vInfo.class_name}`
        });
        submenu.newItem({
          name: `~b~Модель: ~s~`,
          more: `${vInfo.display_name}`
        });

        if (vInfo.fuel_min > 0) {
          submenu.newItem({
            name: `~b~Вместимость бака: ~s~`,
            more: `${vInfo.fuel_full}л.`
          });
          submenu.newItem({
            name: `~b~Расход топлива: ~s~`,
            more: `${vInfo.fuel_min}л.`
          });
        } else {
          submenu.newItem({
            name: `~b~Расход топлива: ~s~`,
            more: `Электрокар`
          });
        }

        let stockFull = vInfo.stock;

        if (vInfo.stock > 0) {
          stockFull = stockFull / 1000;
          submenu.newItem({
            name: `~b~Вместимость багажника: ~s~`,
            more: `${stockFull}кг.`
          });
        }

        submenu.open();
      }
    });

    if (player.vehicle.getVariable('rentOwner') == _user.user.getId(player)) {
      m.newItem({
        name: `~y~Отказатся от аренды`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);
          if (player.vehicle.getVariable('rentOwner') != _user.user.getId(player)) return player.notify('~b~Вы не арендуете данный ТС');
          player.vehicle.destroy();
          player.notify('~g~Вы отказались от аренды ТС');
        }
      });
    }

    if (data.get('job') || _user.user.get(player, 'job')) {
      m.newItem({
        name: `~b~Управление рабочим транспортом`,
        onpress: () => {
          if (!player.vehicle) return _menu.menu.close(player);
          player.callsocket('client:menuList:showVehicleMenu', [Array.from(_vehicles.vehicles.getData(player.vehicle.getVariable('container')))]);
        }
      });
    }

    m.open();
    return;
  } else {
    player.notify(`~r~Вы должны быть в транспорте`);
  }
});
mp.events.addRemoteCounted('onKeyPress:L', player => {
  if (!_user.user.isLogin(player)) return;

  let admin = _user.user.isAdminNow(player, 2);

  let vehicle = _methods.methods.getNearestVehicleWithCoords(player.position, 5);

  if (_vehicles.vehicles.exists(vehicle)) {
    let data = _vehicles.vehicles.getData(vehicle.getVariable('container'));

    if (!data) return;

    if (data.has('fraction_id')) {
      if (admin || data.get('fraction_id') == _user.user.get(player, 'fraction_id')) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
    } else if (data.has('owner_id')) {
      if (admin || data.get('owner_id') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
    } else if (data.has('rentOwner')) {
      if (admin || data.get('rentOwner') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
    } else if (data.has('id_user')) {
      if (admin || data.get('id_user') == _user.user.getId(player)) _vehicles.vehicles.lockStatus(player, vehicle);else player.notify('~r~У Вас нет ключей от транспорта');
    } else _vehicles.vehicles.lockStatus(player, vehicle);
  }
});
mp.events.addRemoteCounted('onKeyPress:LAlt', player => {
  if (!_user.user.isLogin(player)) return;

  _pickups.pickups.checkPressLAlt(player);
});
mp.events.add('onPressKeyCasino:e', player => {
  if (!_user.user.isLogin(player)) return;

  if (!casinoSlotMachines.pressE(player)) {
    if (!casinoRoulette.pressE(player)) {
      if (!casinoThreeCardPoker.pressE(player)) {
        casinoDice.pressE(player);
      }
    }
  }
});
mp.events.addRemoteCounted('playerEnterCheckpoint', (player, checkpoint) => {
  if (!_user.user.isLogin(player)) return;

  if (_data.Container.Has(999999, 'checkpointLabel' + checkpoint.id)) {
    let text = _data.Container.Get(999999, 'checkpointLabel' + checkpoint.id).toString();

    if (text.regexIndexOf(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, 0) == 0) {
      let res = text.replace(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, '');
      res = res[0].toUpperCase() + res.slice(1);

      _user.user.setHelpKey(player, text.split(/Нажмите ~[a-zA-Z]~/g)[1].split(/~[a-zA-Z]~ чтобы /g)[0], res, 3000);
    } else player.notify(_data.Container.Get(999999, 'checkpointLabel' + checkpoint.id));
  }
});
mp.events.add('client:enterStaticCheckpoint', (player, checkpointId) => {
  if (!_user.user.isLogin(player)) return;

  if (_data.Container.Has(999999, 'checkpointStaticLabel' + checkpointId)) {
    let text = _data.Container.Get(999999, 'checkpointStaticLabel' + checkpointId).toString();

    if (text.regexIndexOf(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, 0) == 0) {
      let res = text.replace(/Нажмите ~[a-zA-Z]~[a-zA-Zа-яА-Я]~[a-zA-Z]~ чтобы /g, '');
      res = res[0].toUpperCase() + res.slice(1);

      _user.user.setHelpKey(player, text.split(/Нажмите ~[a-zA-Z]~/g)[1].split(/~[a-zA-Z]~ чтобы /g)[0], res, 3000);
    } else player.notify(_data.Container.Get(999999, 'checkpointStaticLabel' + checkpointId));
  }
});
mp.events.addRemoteCounted('server:phone:SendSms', (player, number, text) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.sendSms(player, number, text);
});
let callIds = 1;
mp.events.addRemoteCounted('server:phone:call', (player, number) => {
  if (!_user.user.isLogin(player)) return;
  if (player.getVariable('call')) return player.notify("Вы уже с кем то разговариваете");

  let target = _phone.phone.getByNumber(number);

  if (!target) return player.notify("Номер набран не верно либо абонент не в сети");
  if (target == player) return player.notify("Это ваш номер");
  if (target.getVariable('call')) return player.notify("Абонент с кем то разговаривает");

  _user.user.accept(target, "Звонок от " + _phone.phone.getNumber(player)).then(status => {
    if (!mp.players.exists(target) || !mp.players.exists(player)) return;
    if (!status) return player.notify("Абонент отклонил вызов");
    player.enableVoiceTo(target);
    target.enableVoiceTo(player);
    player.notify("Соединение установлено");
    target.notify("Соединение установлено");
    player.setVariable('call', callIds);
    target.setVariable('call', callIds);
    player.callsocket('callStart', [target]);
    target.callsocket('callStart', [player]);
    callIds++;
  });
});
mp.events.addRemoteCounted('server:phone:cancelCall', player => {
  if (!_user.user.isLogin(player)) return;
  if (!player.getVariable('call')) return player.notify("Вы ни с кем не разговариваете");
  let target = mp.players.toArray().find(usr => usr.id != player.id && usr.getVariable('call') == player.getVariable('call'));
  player.notify("Звонок завершен");
  if (target && mp.players.exists(target)) target.notify("Звонок завершен");
  if (target && mp.players.exists(target)) player.disableVoiceTo(target);
  if (target && mp.players.exists(target)) target.disableVoiceTo(player);
  player.setVariable('call', null);

  _user.user.stopSyncAnimation(player);

  if (target && mp.players.exists(target)) target.setVariable('call', null);
  if (target && mp.players.exists(target)) _user.user.stopSyncAnimation(target);
  player.callsocket('callStop');
  if (target && mp.players.exists(target)) target.callsocket('callStop');
});
mp.events.addRemoteCounted('server:phone:OpenSmsListMenu', (player, number) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.openSmsListMenu(player, number);
});
mp.events.addRemoteCounted('server:phone:OpenContactListMenu', (player, number) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.openContactListMenu(player, number);
});
mp.events.addRemoteCounted('server:phone:OpenSmsInfoMenu', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.openSmsInfoMenu(player, id);
});
mp.events.addRemoteCounted('server:phone:OpenContInfoMenu', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.openContInfoMenu(player, id);
});
mp.events.addRemoteCounted('server:phone:DeleteSms', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.deleteSms(player, id);
});
mp.events.addRemoteCounted('server:phone:AddContact', (player, phonenumber, title, num) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.addContact(player, phonenumber, title, num);
});
mp.events.addRemoteCounted('server:phone:DeleteContact', (player, id) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.deleteContact(player, id);
});
mp.events.addRemoteCounted('server:phone:RenameContact', (player, id, name) => {
  if (!_user.user.isLogin(player)) return;

  _phone.phone.renameContact(player, id, name);
});
const hook = new _discord.default.WebhookClient('681575693955760171', 'Jgmj0WC_UemhkRGbPUTLas7yPVibpn1sQwkVuFWWCPBOm55MGDHUhSF5xw_WBvgalWeL');
mp.events.addRemoteCounted('server:phone:AddAd', (player, text, rpName, phone, type) => {
  if (!_user.user.isLogin(player)) return;

  if (!_methods.methods.isTestServer()) {
    const exampleEmbed = new _discord.default.RichEmbed().setColor('#f00c17').setTitle(`Объявление [${type}]`).setURL('https://rp.gta-5.ru/rp/news').setAuthor(`${phone} [${_user.user.getId(player)}]`).setDescription(text).setTimestamp().setFooter('LifeInvader', 'https://i.imgur.com/qats7HI.png');
    hook.send(exampleEmbed);
  }

  _rpInvaderAdEntity.rpInvaderAdEntity.create({
    datetime: _weather.weather.getRpDateTime(),
    name: rpName,
    phone: phone,
    title: type,
    text: text
  });
});
let tempPromocodes = new Map();
exports.tempPromocodes = tempPromocodes;

const createTempPromocode = (player, sum, dist, los) => {
  let code = _vehicles.vehicles.generateNumber(10);

  code = code.toUpperCase();
  if (tempPromocodes.has(code)) return createTempPromocode(player, sum, dist, los);
  tempPromocodes.set(code, {
    sum,
    label: mp.labels.new('~b~Ивентовый бонус-код на ~g~$' + _methods.methods.numberFormat(sum) + '\r~p~' + code, player.position, {
      dimension: player.dimension,
      font: 0,
      los: los,
      drawDistance: dist
    })
  });
};

exports.createTempPromocode = createTempPromocode;
mp.events.addRemoteCounted('server:activatePromocode', async (player, promocode) => {
  if (!_user.user.isLogin(player)) return;
  promocode = promocode.toUpperCase();
  if (player.spamProtect) return player.notify(`~r~Подождите пару секунд`);
  player.spamProtect = true;
  setTimeout(() => {
    player.spamProtect = false;
  }, 5000);

  if (tempPromocodes.has(promocode)) {
    let data = tempPromocodes.get(promocode);

    _user.user.addCashMoney(player, data.sum);

    if (mp.labels.exists(data.label)) data.label.destroy();
    player.notify('~g~Вы успешно активировали промокод на сумму $' + _methods.methods.numberFormat(data.sum));
    tempPromocodes.delete(promocode);
    return;
  }

  let acs = await _user.user.getAllAccounts(player);
  let myAccounts = acs.map(usr => {
    return usr.id;
  });
  let alreadyEntered = !!(await _promocodeUsing.promocodeUsingEntity.findOne({
    where: {
      user_id: {
        [_sequelize.Op.in]: myAccounts
      },
      promocode_name: promocode
    }
  }));
  if (alreadyEntered) return player.notify('~r~Вы уже активировали этот промокод');

  _promocodeUsing.promocodeEntity.findAll({
    where: {
      code: promocode
    },
    limit: 1
  }).then(rows => {
    if (rows.length >= 1) {
      rows.forEach(row => {
        _user.user.addMoney(player, _methods.methods.parseInt(row['bonus']));

        player.notify(`~g~Промокод: ${promocode} активирован, вы получили $${_methods.methods.numberFormat(row['bonus'])}`);

        _promocodeUsing.promocodeUsingEntity.create({
          user_id: _user.user.getId(player),
          promocode_name: promocode
        });
      });
    } else {
      _promocodeTopEntity.promocodeTopListEntity.findAll({
        where: {
          promocode: promocode
        },
        limit: 1
      }).then(rows => {
        if (rows.length >= 1) {
          if (_user.user.get(player, 'promocode') == '') {
            if (_user.user.getLevel(player) <= _level.levelAccess.startPromocode) {
              _user.user.set(player, 'promocode', promocode);

              player.notify('~g~Вы ввели промокод: ~s~' + promocode);

              _user.user.addCashMoney(player, 1000);

              _user.user.updateClientCache(player);

              _user.user.saveAccount(player);

              _user2.userEntity.increment({
                money_donate: 2
              }, {
                where: {
                  parthner_promocode: _user.user.get(player, 'promocode')
                }
              });

              return;
            }

            player.notify('~r~Доступно до уровня ' + _level.levelAccess.startPromocode);
            return;
          }

          player.notify('~r~Вы уже активировали этот промокод');
        } else {
          player.notify('~r~Такого промокода не существует');
        }
      });
    }
  });
});
mp.events.add("sync.elements", (player, datas) => {
  let data = JSON.parse(datas);

  _methods.methods.debug(_user.user.getRpName(player), _user.user.getId(player), "called sync.elements", data);

  player.inGreenZone = data.insaveZone;
  player.interrior = data.interrior;
  player.weaponsAll = data.weapons;
});
mp.events.addRemoteCounted("custom:norpfload", player => {
  player.notify("~r~Внимание!!! ~r~У вас нет необходимых текстур");
  player.outputChatBox("Внимание!!! Мы обнаружили что у вас в клиенте нет необходимых для нормальной работы кастомных текстур. Убедительная просьба полностью закрыть RAGE Multiplayer и перезайти на сервер для корректной работы.");
});
mp.events.addRemoteCounted("server:vehicle:tunmoney:return", async player => {
  if (!player.vehicle) return player.notify("~r~Вы должны быть в транспорте");
  const vehicle = player.vehicle;
  let car = await _vehicles.vehicles.getData(vehicle.getVariable('container'));

  if (car) {
    if (car.has('upgrade')) {
      let upgrade = JSON.parse(car.get('upgrade'));

      if (upgrade) {
        const percent = 0.5;
        let price = 1;
        let resprice = 0;
        if (vehicle.getVariable('price') >= 8000 && vehicle.getVariable('price') < 15000) price = 1.2;else if (vehicle.getVariable('price') >= 15000 && vehicle.getVariable('price') < 30000) price = 1.4;else if (vehicle.getVariable('price') >= 30000 && vehicle.getVariable('price') < 45000) price = 1.6;else if (vehicle.getVariable('price') >= 45000 && vehicle.getVariable('price') < 60000) price = 1.8;else if (vehicle.getVariable('price') >= 60000 && vehicle.getVariable('price') < 75000) price = 2;else if (vehicle.getVariable('price') >= 90000 && vehicle.getVariable('price') < 105000) price = 2.2;else if (vehicle.getVariable('price') >= 105000 && vehicle.getVariable('price') < 120000) price = 2.4;else if (vehicle.getVariable('price') >= 120000 && vehicle.getVariable('price') < 135000) price = 2.6;else if (vehicle.getVariable('price') >= 135000 && vehicle.getVariable('price') < 150000) price = 2.8;else if (vehicle.getVariable('price') >= 150000 && vehicle.getVariable('price') < 200000) price = 3;else if (vehicle.getVariable('price') >= 200000 && vehicle.getVariable('price') < 240000) price = 3.3;else if (vehicle.getVariable('price') >= 240000 && vehicle.getVariable('price') < 280000) price = 3.6;else if (vehicle.getVariable('price') >= 280000 && vehicle.getVariable('price') < 320000) price = 4;else if (vehicle.getVariable('price') >= 320000 && vehicle.getVariable('price') < 380000) price = 4.4;else if (vehicle.getVariable('price') >= 380000 && vehicle.getVariable('price') < 500000) price = 5;else if (vehicle.getVariable('price') >= 500000 && vehicle.getVariable('price') < 600000) price = 5.5;else if (vehicle.getVariable('price') >= 600000 && vehicle.getVariable('price') < 700000) price = 6;else if (vehicle.getVariable('price') >= 700000 && vehicle.getVariable('price') < 800000) price = 6.5;else if (vehicle.getVariable('price') >= 800000) price = 7;

        for (let id = 0; id < 9; id++) {
          if (upgrade != null && upgrade[id + 100]) resprice += _enums.enums.lscSNames[id][1] * price * percent;
        }

        if (resprice == 0) return player.notify("~r~У вас в данном ТС нет чип тюнинга.");

        for (let id = 0; id < 9; id++) {
          if (upgrade != null && upgrade[id + 100]) delete upgrade[id + 100];
        }

        if (resprice > 0) {
          _vehicles.vehicles.set(vehicle.getVariable('container'), 'upgrade', JSON.stringify(upgrade));

          _user.user.addCashMoney(player, resprice);

          player.notify("~g~Вы получили компенсацию в размере " + resprice + "$");

          _vehicles.vehicles.respawn(vehicle);
        } else {
          return player.notify("~r~У вас в данном ТС нет чип тюнинга.");
        }
      }
    }
  }
});
mp.events.add("vehicleDeath", vehicle => {
  vehicle.getOccupants().forEach(p => {
    p.health = 0;
  });

  _vehicles.vehicles.respawn(vehicle);
});
mp.events.add("my:gps", player => {
  let m = _menu.menu.new(player, "Имущество");

  if (_user.user.get(player, "id_house")) {
    let item = _houses.houses.getHouseData(_user.user.get(player, "id_house"));

    if (item) {
      m.newItem({
        name: item.get('address') + " #" + item.get('id'),
        more: "Дом",
        onpress: () => {
          _user.user.setWaypoint(player, item.get('x'), item.get('y'));

          player.notify("~g~Метка установлена");
        }
      });
    }
  }

  if (_user.user.get(player, "stock_id")) {
    let item = _stock.stock.getData(_user.user.get(player, "stock_id"));

    if (item) {
      m.newItem({
        name: item.get('address') + " #" + item.get('id'),
        more: "Склад",
        onpress: itm => {
          _user.user.setWaypoint(player, item.get('x'), item.get('y'));

          player.notify("~g~Метка установлена");
        }
      });
    }
  }

  if (_user.user.get(player, "apartment_id") > 0) {
    let buildData = _apartments.apartments.getApartData(_user.user.get(player, "apartment_id"));

    if (buildData) {
      let buildId = buildData.get('build_id');

      if (typeof buildId == "number") {
        m.newItem({
          name: `Номер ${buildId} #${buildData.get('id')}`,
          more: "Апартаменты",
          onpress: itm => {
            _user.user.setWaypoint(player, _enums.enums.buildListData[buildId][0], _enums.enums.buildListData[buildId][1]);

            player.notify("~g~Метка установлена");
          }
        });
      }
    }
  }

  if (_user.user.get(player, "condo_id") > 0) {
    let hData = _condo.condo.getHouseData(_user.user.get(player, "condo_id"));

    if (hData) {
      m.newItem({
        name: hData.get('address') + " #" + hData.get('id'),
        more: "Квартира",
        onpress: itm => {
          _user.user.setWaypoint(player, hData.get('x'), hData.get('y'));

          player.notify("~g~Метка установлена");
        }
      });
    }
  }

  m.open();
});
mp.events.addRemoteCounted("server:user:addJobMoney", (player, money) => {
  if (!player.jobmoneyfarm) player.jobmoneyfarm = 0;
  player.jobmoneyfarm += money;
  if (_admin.customParams.jobx2) _user.user.addCashMoney(player, money), player.jobmoneyfarm += money;
  ;

  _user.user.questWorks(player);
});
mp.events.addRemoteCounted("server:show:quests", player => {
  if (!player.quests) return;
  if (player.quests.length == 0) return;

  _user.user.questWorks(player);

  let data = [];
  player.quests.map(item => {
    let datas = (0, _quests.getQuest)(item.name);
    if (!datas && typeof datas != "object") return;
    data.push(_objectSpread(_objectSpread({}, item), {}, {
      desc: datas.desc,
      rewards: datas.rewards,
      group: datas.group,
      progress: datas.progress && !item.complete ? datas.progress(player) : []
    }));
  });

  if (data.length > 0) {
    _user.user.setGui(player, 'quests');

    mp.events.triggerBrowser(player, "cef:quest:init", data);
  }
});
mp.events.add("playerDeath", player => {
  player.setVariable('isCrouched', false);
});
mp.events.add("toggleCrouch", player => {
  if (!player.getVariable('isCrouched')) {
    player.setVariable('isCrouched', true);
  } else {
    player.setVariable('isCrouched', false);
  }
});
},{"./data":"Edcz","./methods":"qXSp","./pickups":"xTdX","../user":"QE3B","../coffer":"sKID","../modules/chat":"e1Zb","../vehicles":"pYYy","../houses":"buna","../condo":"YoDO","../stock":"MdNj","../apartments":"qIZj","../business":"y5vZ","../enums":"ZRYf","../inventory":"m5ow","../managers/weather":"uehX","../managers/dispatcher":"bsac","../items":"nuVl","../business/cloth":"Lio2","../business/shop":"e2yF","../business/lsc":"C62B","../business/rent":"G8F2","../business/gun":"Y0m3","../business/fuel":"nyp7","../business/barberShop":"bktO","../business/tattoo":"Iy5w","../business/bar":"ZO2Y","../business/licenseCenter":"uLEY","../phone":"Gt5n","../managers/tax":"PN4J","../managers/trucker":"LIqP","../managers/mafiaWar":"hwMc","../business/bank":"MvN0","../business/autosalon/index":"JYAF","./casino_slot_machines":"Rr1D","./casino_roulette":"XMgA","./casino_threecard_poker":"hevW","./casino_dice":"JvB6","../../util/sharedData":"bNis","./menu":"Aiz7","./entity/user":"xF3w","./admin":"s4Xg","../config/quests":"CFsv","./entity/blackList":"UcH2","../../util/level":"MpJF","../log":"MNUA","../../util/newrage":"mgLX","./entity/promocodeUsing":"u9lD","./entity/logFractionGunEntity":"WakH","./entity/apartmentEntity":"K5GH","./entity/userDatingEntity":"Soei","./entity/rpInvaderAdEntity":"dIe4","./entity/promocodeTopEntity":"ixsW","./whitelist":"HCq8","./entity/carsModel":"pv82"}],"jffZ":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

mp.events.addCommand('shutdown', () => {
  _methods.methods.debug('command.shutdown');
});
process.on('exit', code => {
  let text = `
    --------
    LAST DEBUG
    ${JSON.stringify(_methods.lastMessageLog)}
    --------
    `;

  _methods.methods.saveLog('exitSave', text);

  if (code == 0) _methods.methods.saveAll();
});
process.on('unhandledRejection', (reason, p) => {
  console.error(reason, 'Unhandled Rejection at Promise', p);
}).on('uncaughtException', err => {
  console.error(err, 'Uncaught Exception thrown');
});
},{"../modules/methods":"qXSp"}],"VDhe":[function(require,module,exports) {
mp.events.add('flyMode', (player, status) => {
  player.flymode = status;
  if (player.spectatePosition) return;
  player.alpha = status ? 0 : 255;
});
},{}],"KjEE":[function(require,module,exports) {
"use strict";

var _methods = require("./methods");

var _user = require("../user");

var _chat = require("./chat");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let mpList = new Map();
let mpUser = new Map();
mp.events.add("playerDeath", player => {
  exitFromMp(_user.user.getId(player));
});

_chat.chat.registerCommand('cmp', (player, name, cnt) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!name) return player.notify("Формат команды /cmp name");
  name = name.toLowerCase();
  if (mpList.has(name)) return player.notify("Мероприятие с таким названием уже существует");

  let many = _methods.methods.parseInt(cnt);

  if (isNaN(many) || many < 0) many = 0;
  mpList.set(name, _objectSpread(_objectSpread({}, player.position), {}, {
    d: player.dimension,
    cnt: many,
    open: true
  }));

  _chat.chat.sendToAll(`Администратор  ${_user.user.getRpName(player)} ${`(${_user.user.getId(player)})`}`, `создал мероприятие. Участвовать - !{${_chat.chat.clWhite}} /mp ${name}`, _chat.chat.clRed);
});

_chat.chat.registerCommand('checkmp', (player, name, cnt) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!name) return player.notify("Формат команды /checkmp name");
  name = name.toLowerCase();
  if (!mpList.has(name)) return player.notify("Мероприятие с таким названием не существует");
  let mpdata = mpList.get(name);
  let h = 0;
  mpUser.forEach(item => {
    if (item.name == name) h++;
  });
  return player.notify(`Количество участников ${h} / ${mpdata.cnt}`);
});

_chat.chat.registerCommand('dmp', (player, name) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!name) return player.notify("Формат команды /cmp name");
  name = name.toLowerCase();
  if (!mpList.has(name)) return player.notify("Мероприятие с таким названием не существует");
  mpList.delete(name);

  _chat.chat.sendToAll(`Администратор  ${_user.user.getRpName(player)} ${`(${_user.user.getId(player)})`}`, `мероприятие ${name} завершено`, _chat.chat.clRed);

  mpUser.forEach((item, id) => {
    exitFromMp(id);
  });
});

_chat.chat.registerCommand('stopmp', (player, name) => {
  if (!_user.user.isAdminNow(player)) return;
  if (!name) return player.notify("Формат команды /cmp name");
  name = name.toLowerCase();
  if (!mpList.has(name)) return player.notify("Мероприятие с таким названием не существует");
  mpList.get(name).open = false;
  player.notify("МП закрыто для участия");
});

_chat.chat.registerCommand('mp', (player, name) => {
  if (!name) return player.notify("Формат команды /cmp name");
  name = name.toLowerCase();
  if (!mpList.has(name)) return player.notify("Мероприятие с таким названием не существует либо уже завершенно");
  let mpdata = mpList.get(name);
  if (!mpdata.open) return player.notify("Мероприятие не доступно для телепортации");

  if (mpdata.cnt != 0) {
    let h = 0;
    mpUser.forEach(item => {
      if (item.name == name) h++;
    });
    if (h >= mpdata.cnt) return player.notify("Лимит участников в МП превышен");
  }

  if (mpUser.has(_user.user.getId(player))) return player.notify("Вы уже участвуете в мероприятии");
  if (_user.user.isInMp(player)) return player.notify(`~r~Вы уже зарегистрированы либо принимаете участие в другом мероприятии`);
  if (!_user.user.isReadyForSmth(player)) return player.notify("Вы не можете участвовать в мероприятии");
  mpUser.set(_user.user.getId(player), _objectSpread(_objectSpread({}, player.position), {}, {
    d: player.dimension,
    name
  }));
  player.setVariable("inMp", true);

  _user.user.teleport(player, mpdata.x, mpdata.y, mpdata.z);

  player.dimension = mpdata.d;
});

function exitFromMp(id) {
  setTimeout(() => {
    let item = mpUser.get(id);
    if (!item) return;

    let target = _user.user.getPlayerById(id);

    if (target && mp.players.exists(target)) {
      _user.user.healProtect(target);

      target.setVariable("inMp", false);
      target.notify("Вы покинули мероприятие");
      target.spawn(new mp.Vector3(item.x, item.y, item.z));
      target.health = 100;
      target.dimension = item.d;
    }

    mpUser.delete(id);
  }, 200);
}
},{"./methods":"qXSp","../user":"QE3B","./chat":"e1Zb"}],"ukAm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doorsData = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let doorsData = {
  '1': {
    offset: -1.2,
    mystatus: false,
    hash: 1557126584,
    x: 449.69815063477,
    y: -986.46911621094,
    z: 30.689594268799,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '3': {
    offset: -1.2,
    mystatus: false,
    hash: -1320876379,
    x: 447.23818969727,
    y: -980.63006591797,
    z: 30.689598083496,
    locked: true,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'кабинета начальника LSPD'
  },
  '4': {
    offset: -1.2,
    mystatus: false,
    hash: 185711165,
    x: 443.97,
    y: -989.033,
    z: 30.6896,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 5
  },
  '5': {
    offset: -1.2,
    mystatus: false,
    hash: 185711165,
    x: 445.37,
    y: -989.705,
    z: 30.6896,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 4
  },
  '6': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 464.4,
    y: -992.265,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '7': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.381,
    y: -993.651,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '8': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.331,
    y: -998.152,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '9': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.704,
    y: -1001.92,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 21
  },
  '14': {
    offset: -1.2,
    mystatus: false,
    hash: 320433149,
    x: 434.7479,
    y: -982.2151,
    z: 30.83926,
    locked: false,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'LSPD',
    pair: 15
  },
  '15': {
    offset: 1.2,
    mystatus: false,
    hash: -1215222675,
    x: 434.7479,
    y: -981.6184,
    z: 30.83926,
    locked: false,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'LSPD',
    pair: 14
  },
  '17': {
    offset: -1.2,
    mystatus: false,
    hash: -131296141,
    x: 443.0298,
    y: -992.941,
    z: 30.8393,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 16
  },
  '16': {
    offset: -1.2,
    mystatus: false,
    hash: -131296141,
    x: 443.0298,
    y: -993.5412,
    z: 30.8393,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 17
  },
  '19': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 468.9679,
    y: -1014.452,
    z: 26.53623,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '18': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 468.3716,
    y: -1014.452,
    z: 26.53623,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '21': {
    offset: -1.2,
    mystatus: false,
    hash: 749848321,
    x: 461.2865,
    y: -985.3206,
    z: 30.83926,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 9
  },
  '20': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 452.6248,
    y: -987.3626,
    z: 30.83926,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '22': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.504,
    y: -1001.92,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '38': {
    offset: -1.2,
    mystatus: false,
    hash: 2529918806,
    x: 1855.01,
    y: 3684.03,
    z: 34.27,
    locked: false,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  },
  '39': {
    offset: -1.2,
    mystatus: false,
    hash: -2023754432,
    x: 1856.7093505859375,
    y: 3689.539794921875,
    z: 34.26708221435547,
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  },
  '40': {
    offset: -1.2,
    mystatus: false,
    hash: 507213820,
    x: 463.29,
    y: -1011.78,
    z: 32.9,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD'
  },
  '41': {
    offset: -1.2,
    mystatus: false,
    hash: -1033001619,
    x: 445.2249,
    y: -999.6013,
    z: 30.91112,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD',
    pair: 42
  },
  '42': {
    offset: -1.2,
    mystatus: false,
    hash: -1033001619,
    x: 446.2249,
    y: -999.6013,
    z: 30.91112,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD',
    pair: 41
  },
  '43': {
    offset: -1.2,
    mystatus: false,
    hash: -340230128,
    x: 463.79,
    y: -983.95,
    z: 43.69,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD'
  },
  '44': {
    offset: -1.2,
    mystatus: false,
    hash: 2873385136,
    x: -2343.559,
    y: 3265.387,
    z: 32.95998,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Двери',
    pair: 45
  },
  '45': {
    offset: -1.2,
    mystatus: false,
    hash: 1248599813,
    x: -2342.559,
    y: 3267.387,
    z: 32.95998,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Двери',
    pair: 44
  },
  '46': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -1612.00300000,
    y: 2809.32100000,
    z: 16.47038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 47,
    unlock: true,
    alert: true
  },
  '47': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -1600.47900000,
    y: 2818.01900000,
    z: 16.57139000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 46,
    unlock: true,
    alert: true
  },
  '48': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -2285.70300000,
    y: 3382.92100000,
    z: 31.27038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 49,
    unlock: true,
    alert: true
  },
  '49': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -2294.50300000,
    y: 3372.16100000,
    z: 31.27038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 48,
    unlock: true,
    alert: true
  },
  '50': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 82.08012000,
    y: -697.96660000,
    z: 31.59820000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB',
    pair: 51
  },
  '51': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 85.73377000,
    y: -688.88400000,
    z: 31.59820000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB',
    pair: 50
  },
  '52': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door2",
    x: 138.5112,
    y: -768.8054,
    z: 242.3022,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Двери FIB 49-1'
  },
  '53': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door1",
    x: 127.8489,
    y: -760.4548,
    z: 45.90111,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Дверь FIB 1'
  },
  '54': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door2",
    x: 127.2092,
    y: -764.6935,
    z: 242.302,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Дверь FIB 49-2'
  },
  '55': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 184.75660000,
    y: -722.41490000,
    z: 33.92741000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB 2',
    pair: 56
  },
  '56': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 183.48580000,
    y: -726.46100000,
    z: 33.88072000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB 2',
    pair: 55
  },
  '57': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoor",
    x: 251.1092,
    y: -1365.284,
    z: 24.55147,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 1',
    pair: 58
  },
  '58': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoor",
    x: 252.8711,
    y: -1366.762,
    z: 24.55147,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 1',
    pair: 57
  },
  '59': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassa",
    x: 267.4241,
    y: -1343.9,
    z: 24.68181,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 2',
    pair: 60
  },
  '60': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassb",
    x: 265.7706,
    y: -1345.871,
    z: 24.68181,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 2',
    pair: 59
  },
  '61': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassa",
    x: 254.3432,
    y: -1359.49,
    z: 24.68168,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 3',
    pair: 62
  },
  '62': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassb",
    x: 252.688,
    y: -1361.462,
    z: 24.68168,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 3',
    pair: 61
  },
  '63': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoorwide",
    x: 272.2175,
    y: -1361.566,
    z: 24.55153,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 5'
  },
  '64': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoorwide",
    x: 265.0614,
    y: -1363.312,
    z: 24.55153,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 6'
  },
  '65': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_l",
    x: 134.9403,
    y: -762.9027,
    z: 44.75291,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB LIFT',
    pair: 66
  },
  '66': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_r",
    x: 136.3499,
    y: -763.4158,
    z: 44.75182,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB LIFT',
    pair: 65
  },
  '68': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(333.7885, -593.4055, 28.80277)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 69
  }),
  '69': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(334.5754, -591.2445, 28.80277)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 68
  }),
  '70': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(337.2274, -584.0469, 28.81494)), {}, {
    hash: "v_ilev_cor_firedoorwide",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы'
  }),
  '71': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(341.392, -572.5071, 28.81897)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 72
  }),
  '72': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(342.1784, -570.3473, 28.81897)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 71
  }),
  '73': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(321.0088, -559.9609, 28.88031)), {}, {
    hash: "hei_prop_heist_cutscene_doorc_r",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 74
  }),
  '74': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(318.7677, -561.0198, 28.88031)), {}, {
    hash: "hei_prop_heist_cutscene_doorc_r",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 73
  }),
  '75': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(345.0586, -567.9648, 28.82051)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 76
  }),
  '76': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(347.2267, -568.7333, 28.82051)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 75
  }),
  '77': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(346.8181, -572.0256, 28.7973)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 78
  }),
  '78': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(346.031, -574.1888, 28.7973)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 77
  }),
  '79': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1851.132568359375, 3682.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 80
  }),
  '80': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1850.132568359375, 3684.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 79
  }),
  '81': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1847.132568359375, 3690.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 82
  }),
  '82': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1849.132568359375, 3690.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 81
  }),
  '83': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-441.48, 6012.84, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 84
  }),
  '84': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-442.92, 6011.26, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 83
  }),
  '85': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-447.81, 6006.98, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 86
  }),
  '86': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-448.98, 6008.60, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 85
  }),
  '87': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-450.12, 6016.01, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '88': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-451.26, 6006.95, 31.83)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '89': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-446.65, 6001.78, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '90': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-440.91, 6008.02, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 91
  }),
  '91': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-442.31, 6009.10, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 90
  }),
  '92': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-556.3757, -207.3055, 38.54186)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 93
  }),
  '93': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-557.6763, -205.053, 38.54773)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 92
  }),
  '94': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-560.6801, -199.826, 38.54251)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 95
  }),
  '95': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-559.3853, -202.0843, 38.53995)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 94
  }),
  '96': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_l"
  }, new mp.Vector3(-562.6736, -196.3704, 37.37849)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 97
  }),
  '97': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_r"
  }, new mp.Vector3(-563.4216, -195.0782, 37.38001)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 96
  }),
  '98': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-541.8019, -187.353, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 99
  }),
  '99': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-543.1104, -185.1008, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 98
  }),
  '100': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-540.6802, -189.3759, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 101
  }),
  '101': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-539.3868, -191.6297, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 100
  }),
  '102': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-537.7949, -192.7626, 38.3283)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии'
  }),
  '103': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-543.4396, -182.9641, 38.32299)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии'
  }),
  '104': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(79.33016, -689.0258, 30.5788)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '105': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(191.0169, -727.006, 33.5188)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '106': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(399.8277, -551.13960000, 27.5677)), {}, {
    locked: true,
    key: 'key_ems',
    permission: '16',
    name: 'EMS'
  }),
  '107': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fibl_door01"
  }, new mp.Vector3(2521.207, -416.6346, 94.5519)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 108
  }),
  '108': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fibl_door02"
  }, new mp.Vector3(2518.207, -413.6346, 94.5519)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 107
  }),
  '109': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_05_r"
  }, new mp.Vector3(2569.207, -325.6346, 94.12363)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 110
  }),
  '110': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_05_r"
  }, new mp.Vector3(2559.207, -325.6346, 94.12363)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 109
  }),
  '111': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1518.028, 851.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 112
  }),
  '112': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1515.028, 850.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 111
  }),
  '113': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1490.028, 851.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 114
  }),
  '114': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1491.461, 853.1818, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 113
  }),
  '115': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1520.761, 848.3218, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства'
  }),
  '116': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1500.631, 856.6718, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства'
  }),
  '117': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2499.446, -413.6485, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '118': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2496.587, -410.7944, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '119': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2493.942, -408.1546, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '120': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2490.966, -405.1835, 94.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '121': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_01"
  }, new mp.Vector3(2491.868, -303.4783, 91.99238)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '122': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn2",
    x: -1881.205,
    y: 2072.079,
    z: 141.2808,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 123
  },
  '123': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn2",
    x: -1879.324,
    y: 2071.383,
    z: 141.2808,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 122
  },
  '124': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1885.243,
    y: 2050.305,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 125
  },
  '125': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1887.559,
    y: 2051.167,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 124
  },
  '126': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1890.253,
    y: 2052.163,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 127
  },
  '127': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1887.935,
    y: 2051.317,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 126
  },
  '128': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1859.294,
    y: 2054.07,
    z: 141.2927,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 129
  },
  '129': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1861.764,
    y: 2054.073,
    z: 141.2902,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 128
  },
  '130': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cm_door1",
    x: -1929.544,
    y: 2059.405,
    z: 140.9689,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN'
  },
  '131': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1365.486,
    y: 55.81825,
    z: 54.44424,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 132
  },
  '132': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1365.654,
    y: 57.70167,
    z: 54.44412,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 131
  },
  '133': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1346.607,
    y: 59.33243,
    z: 55.69039,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 134
  },
  '134': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1346.442,
    y: 57.44766,
    z: 55.69039,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 133
  }
};
exports.doorsData = doorsData;
},{}],"H2nx":[function(require,module,exports) {
"use strict";

var _user = require("../user");

var _methods = require("./methods");

var _methods2 = require("../../util/methods");

var _inventory = require("../inventory");

var _doors = require("../../util/doors");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let doors = _objectSpread({}, _doors.doorsData);

for (let id in doors) {
  let data = doors[id];
  let unlocking = false;

  _methods.methods.createDynamicCheckpoint(new mp.Vector3(data.x, data.y, data.z), "Нажмите ~g~E~w~ чтобы открыть двери " + data.name, async player => {
    if (player.spamProtect) return player.notify("~r~Не так быстро");
    player.spamProtect = true;
    setTimeout(() => {
      if (mp.players.exists(player)) player.spamProtect = false;
    }, 5000);
    if (!data) return;
    let access = true;

    if (data.permission.indexOf('.') > -1) {
      let frac = data.permission.split('.')[0];
      if (_user.user.get(player, 'fraction_id') != _methods.methods.parseInt(frac) && !_user.user.isAdminNow(player)) access = false;
      let sec = data.permission.split('.')[1];
      if (sec == 'leader' && !_user.user.isLeader(player) && !_user.user.isAdminNow(player)) access = false;
    } else {
      if (_user.user.get(player, 'fraction_id') != _methods.methods.parseInt(data.permission) && !_user.user.isAdminNow(player)) access = false;
    }

    let acceptUnlock = false;
    if (!access && data.locked && data.unlock) acceptUnlock = await _user.user.accept(player, "Взломать с помощью отмычки?");

    if (!access && !acceptUnlock) {
      return player.notify('У вас нет ключей от дверей ' + data.name);
    }

    if (acceptUnlock) {
      if (!_user.user.getItem(player, 263)) return player.notify("~r~У вас нет специальной отмычки");

      if (_user.user.get(player, 'fractionType') != 4 && !_user.user.isMafia(player) && !_user.user.isGang(player)) {
        player.notify('~r~Вы не состоите в ОПГ или Мафии');
        return;
      }

      if (unlocking) return player.notify("~r~Кто то уже взламывает замок");

      _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

      _user.user.disableAllControls(player, true);

      unlocking = true;
      await (0, _methods2.sleep)(20000);
      unlocking = false;
      if (!mp.players.exists(player)) return;

      _user.user.stopAnimation(player);

      _user.user.disableAllControls(player, false);

      if (!_user.user.getItem(player, 263)) return player.notify("~r~У вас нет специальной отмычки");
      if (!data.locked) return player.notify("~r~Уже открыто");

      if (_methods.methods.getRandomInt(0, 3) == 0) {
        _inventory.inventory.deleteItem(_user.user.getItem(player, 263).id);

        player.notify('~r~Вы сломали отмычку');
      }

      if (_methods.methods.getRandomInt(0, 3) == 0) {
        return player.notify("~r~У вас не получилось взломать замок");
      }

      if (data.alert) {
        mp.players.toArray().filter(player => _user.user.getPlayerFraction(player) == _methods.methods.parseInt(data.permission)).map(player => {
          _user.user.alert(player, `Внимание!!! ${data.name} были взломаны`, 'warning');
        });
      }
    }

    if (!mp.players.exists(player)) return;
    data.locked = acceptUnlock ? false : !data.locked;

    _user.user.playAnimation(player, 'veh@std@bobcat@ds@enter_exit', 'd_locked', 8);

    setTimeout(function () {
      mp.players.call('sendDoorState', [id, data.locked]);

      if (data.pair) {
        doors[data.pair.toString()].locked = data.locked;
        mp.players.call('sendDoorState', [data.pair, data.locked]);
      }

      if (!mp.players.exists(player)) return;

      if (data.locked) {
        player.notify('Дверь закрыта');
      } else {
        player.notify('Дверь открыта');
      }
    }, 1500);
  }, 1, 0, [0, 0, 0, 0]);
}

mp.events.add('playerJoin', player => {
  let datas = [];

  for (let id in doors) {
    datas.push([id, doors[id].locked]);
  }

  player.call('sendDoorsList', [JSON.stringify(datas)]);
});
},{"../user":"QE3B","./methods":"qXSp","../../util/methods":"Z5QB","../inventory":"m5ow","../../util/doors":"ukAm"}],"GFdU":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioRoom = void 0;

var _voice = require("../../util/voice");

class RadioRoom {
  constructor(name) {
    this.name = name;
    this._players = new Set();
  }

  get players() {
    return Array.from(this._players);
  }

  get metaData() {
    return {
      name: this.name
    };
  }

  onJoin(player) {
    try {
      if (!this._players.has(player)) {
        player.setVariable('radioVol', this.name);
        player.radioRoom = this.name;

        this._players.add(player);

        this._players.forEach(usr => {
          if (!mp.players.exists(usr)) return;

          if (usr != player) {
            if (mp.players.exists(player) && mp.players.exists(usr)) {
              usr.callsocket("radioClientConnect", [player.id]);
              player.callsocket("radioClientConnect", [usr.id]);
              usr.enableVoiceTo(player);
              player.enableVoiceTo(usr);
            }
          }
        });
      }
    } catch (e) {
      console.log(`room ${this.name} onJoin ${player.name}`, e);
    }
  }

  onQuit(player) {
    try {
      player.setVariable('radioVol', null);
      player.setVariable('radioSpeak', false);
      player.callsocket("radioClientDisconnectClear", []);

      if (this._players.has(player)) {
        this._players.forEach(usr => {
          if (!mp.players.exists(usr)) return;

          if (usr != player) {
            usr.callsocket("radioClientDisconnect", [player.id]);

            if (mp.players.exists(player) && mp.players.exists(usr)) {
              usr.disableVoiceTo(player);
              player.disableVoiceTo(usr);
            }
          }
        });

        player.radioRoom = '';

        this._players.delete(player);
      }
    } catch (e) {
      console.log(`room ${this.name} onQuit ${player.name}`, e);
    }
  }

  enableMic(player) {
    try {
      player.setVariable('radioSpeak', true);

      if (this._players.has(player)) {
        this._players.forEach(usr => {
          if (!mp.players.exists(usr)) return;

          if (usr.id != player.id) {
            player.enableVoiceTo(usr);
          }
        });
      }
    } catch (e) {
      console.log(`room ${this.name} enableMic ${player.name}`, e);
    }
  }

  disableMic(player) {
    try {} catch (e) {
      console.log(`room ${this.name} disableMic ${player.name}`, e);
    }
  }

  onRemove() {
    mp.players.call(this.players, 'voice.radioDisconnect', [this.metaData]);

    this._players.clear();
  }

  detectSpeak(player, target) {
    if (mp.players.exists(player)) return false;
    if (mp.players.exists(target)) return false;
    if (player.dist(target.position) + _voice.voiceDistanceRangePlus >= _voice.voiceDistanceRange) return false;
    if (player.dimension != target.dimension) return false;
    return true;
  }

}

exports.RadioRoom = RadioRoom;
},{"../../util/voice":"SYvm"}],"FYdw":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioRoomsContorller = void 0;

var _RadioRoom = require("./RadioRoom");

var _methods = require("../modules/methods");

class RadioRoomsContorllerClass {
  constructor() {
    this.rooms = new Map();
  }

  createRoom(name) {
    this.rooms.set(name, new _RadioRoom.RadioRoom(name));

    _methods.methods.debug(`[RadioRoomsContorller] created room - ${name}`);
  }

  removeRoom(name) {
    if (this.rooms.has(name)) {
      const room = this.rooms.get(name);
      room.onRemove();
      this.rooms.delete(name);
    }
  }

  hasRoom(name) {
    return this.rooms.has(name);
  }

  enableMic(name, player) {
    try {
      if (this.rooms.has(name)) {
        const room = this.rooms.get(name);
        room.enableMic(player);

        _methods.methods.debug(`[RadioRoomsContorller] player ${player.name} enableMic to - ${name}`);
      }
    } catch (e) {
      console.log('enableMic controller', e);
    }
  }

  disableMic(name, player) {
    try {
      if (this.rooms.has(name)) {
        const room = this.rooms.get(name);
        room.disableMic(player);

        _methods.methods.debug(`[RadioRoomsContorller] player ${player.name} disableMic to - ${name}`);
      }
    } catch (e) {
      console.log('disableMic controller', e);
    }
  }

  onJoin(name, player) {
    try {
      if (this.rooms.has(name)) {
        const room = this.rooms.get(name);
        room.onJoin(player);

        _methods.methods.debug(`[RadioRoomsContorller] player ${player.name} connected to - ${name}`);
      }
    } catch (e) {
      console.log('onJoin controller', e);
    }
  }

  onQuit(name, player) {
    try {
      if (this.rooms.has(name)) {
        const room = this.rooms.get(name);
        room.onQuit(player);

        _methods.methods.debug(`[RadioRoomsContorller] player ${player.name} disconnected from - ${name}`);
      }
    } catch (e) {
      console.log('onQuit controller', e);
    }
  }

}

let RadioRoomsContorller = new RadioRoomsContorllerClass();
exports.RadioRoomsContorller = RadioRoomsContorller;
},{"./RadioRoom":"GFdU","../modules/methods":"qXSp"}],"T7py":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vmethods = void 0;

var _RadioRoomsContorller = require("./RadioRoomsContorller");

var _methods = require("../modules/methods");

mp.events.add('playerJoin', player => {
  player.voice = {
    isEnabledMicrophone: false
  };
  player.radioRoom = '';
});
mp.events.add('playerQuit', player => {
  _RadioRoomsContorller.RadioRoomsContorller.onQuit(player.radioRoom, player);
});
mp.events.add('voice.server.initRadio', (player, frequency) => {
  if (frequency == "0.0") return;

  if (!_RadioRoomsContorller.RadioRoomsContorller.hasRoom(frequency)) {
    _RadioRoomsContorller.RadioRoomsContorller.createRoom(frequency);
  }

  _RadioRoomsContorller.RadioRoomsContorller.onJoin(frequency, player);
});
mp.events.add('voice.server.changeRadioFrequency', (player, frequency) => {
  _RadioRoomsContorller.RadioRoomsContorller.onQuit(player.radioRoom, player);

  if (frequency == "0.0") return;

  if (!_RadioRoomsContorller.RadioRoomsContorller.hasRoom(frequency)) {
    _RadioRoomsContorller.RadioRoomsContorller.createRoom(frequency);
  }

  _RadioRoomsContorller.RadioRoomsContorller.onJoin(frequency, player);
});
mp.events.add('voice.server.quitRadio', player => {
  _RadioRoomsContorller.RadioRoomsContorller.onQuit(player.radioRoom, player);
});
mp.events.add('voice.server.enableMic', player => {
  _methods.methods.debug("enableMic: " + player.radioRoom);

  _RadioRoomsContorller.RadioRoomsContorller.enableMic(player.radioRoom, player);
});
mp.events.add('voice.server.disableMic', player => {
  _methods.methods.debug("disableMic: " + player.radioRoom);

  player.setVariable('radioSpeak', false);

  _RadioRoomsContorller.RadioRoomsContorller.disableMic(player.radioRoom, player);
});
mp.events.add('voice.changeStateConnection', (player, state) => {
  player.setVariable('voice.stateConnection', state);
});
mp.events.add('voice.toggleMicrophone', (player, isEnabled) => {
  mp.players.call(player.streamedPlayers, 'voice.toggleMicrophone', [player, isEnabled]);
  player.voice.isEnabledMicrophone = isEnabled;
});

const setVoiceDistance = (player, distance) => {
  player.setVariable('voice.distance', distance);
};

const getVoiceDistance = player => player.getVariable('voice.distance');

const isEnabledMicrophone = player => player.voice.isEnabledMicrophone;

const setVoiceMuted = (player, muted) => {
  player.setVariable('voice.muted', muted);
};

const getVoiceMuted = player => player.getVariable('voice.muted');

const setMicrophoneKey = (player, key) => {
  player.voice.microphoneKey = key;
  player.call('voice.changeMicrophoneActivationKey', [key]);
};

const getMicrophoneKey = player => player.voice.microphoneKey;

const vmethods = {
  getMicrophoneKey,
  setMicrophoneKey,
  getVoiceMuted,
  setVoiceMuted,
  getVoiceDistance,
  setVoiceDistance,
  isEnabledMicrophone
};
exports.vmethods = vmethods;
mp.events.add('voice.server.callMethod', (method, ...args) => {
  if (typeof vmethods[method] === 'function') {
    return vmethods[method](...args);
  }
});
},{"./RadioRoomsContorller":"FYdw","../modules/methods":"qXSp"}],"VUJK":[function(require,module,exports) {
"use strict";

var _user = require("./user");

mp.events.add({
  "worldVoiceAdd": (player, nuser) => {
    if (!mp.players.exists(nuser) || !mp.players.exists(player)) return;
    player.enableVoiceTo(nuser);
  },
  "worldVoiceRemove": (player, nuser) => {
    if (!mp.players.exists(nuser) || !mp.players.exists(player)) return;
    player.disableVoiceTo(nuser);
  },
  'startWorldSpeak': player => {
    let targets = _user.user.getNearestPlayers(player, 40);

    targets.map(target => {
      target.call('playerStartTalkingEvent', [player]);
    });
  },
  'stopWorldSpeak': player => {
    let targets = _user.user.getNearestPlayers(player, 40);

    targets.map(target => {
      target.call('playerStopTalkingEvent', [player]);
    });
  }
});
},{"./user":"QE3B"}],"woHJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _user = require("../user");

var _casino_roulette = require("../modules/casino_roulette");

var _business = require("../business");

const list = [{
  sprite: "diamond",
  name: "Пентхаус",
  nocheckdist: true,
  "points": [[969.77, 63.08, 112.56, 243.08, 0, "Вход", player => {
    if (_user.user.get(player, 'fraction_id2') == _casino_roulette.casino_business_id) return true;
    player.notify('~r~У вас нет доступа');
    return false;
  }], [967.53, 63.68, 112.55, 59.58, 0, "Выход", player => {
    if (_user.user.get(player, 'fraction_id2') == _casino_roulette.casino_business_id) return true;
    player.notify('~r~У вас нет доступа');
    return false;
  }]]
}, {
  "name": "Офис FIB",
  "points": [[2492.52, -408.71, 100.36, 309.11, 0, "Лифт"], [2506.13, -430.18, 115.69, 228.14, 0, "Крыша"]]
}, {
  "name": "Лифт",
  "points": [[-2361.03, 3249.18, 32.8, 334.4, 0, "Нижний уровень"], [-2361.03, 3249.18, 92.8, 334.4, 0, "Верхний уровень"]]
}, {
  name: "Убежище",
  points: [[414.68, -2071.86, 21.50, 54.82, 0, "Выход"], [1021.39, -2398.36, 30.14, 79.63, 21, "Вход", player => {
    if (_user.user.getPlayerFraction(player) == 21) return true;else return false;
  }]]
}, {
  name: "Убежище",
  points: [[-41.47, -1490.43, 31.39, 134.18, 0, "Выход"], [1021.39, -2398.36, 30.14, 79.63, 19, "Вход", player => {
    if (_user.user.getPlayerFraction(player) == 19) return true;else return false;
  }]]
}, {
  name: "Убежище",
  points: [[102.63, -1957.95, 20.74, 357.28, 0, "Выход"], [1021.39, -2398.36, 30.14, 79.63, 18, "Вход", player => {
    if (_user.user.getPlayerFraction(player) == 18) return true;else return false;
  }]]
}, {
  name: "Убежище",
  points: [[423.09, -1562.20, 29.28, 47.02, 0, "Выход"], [1021.39, -2398.36, 30.14, 79.63, 20, "Вход", player => {
    if (_user.user.getPlayerFraction(player) == 20) return true;else return false;
  }]]
}, {
  sprite: "japan",
  "name": "Посольство",
  "points": [[-348.33, 178.55, 87.92, 183.27, 0, "Выход"], [1397.58, 1163.99, 114.33, 265.88, 12, "Вход", player => {
    if (_user.user.getPlayerFraction(player) == 10) return true;else return false;
  }]]
}, {
  "name": "Лифт",
  "oneway": true,
  "points": [[388.8792, -60.52224, 122.5355, 334.4], [388.105, -75.11, 68.15, 161.7]]
}, {
  sprite: "diamond",
  name: "Вход в казино",
  "points": [[1089.69, 205.78, -48.99, 328.13, 0, player => {
    return "Игровой зал (Стоимость: " + (player.inCasino ? "Оплачено" : _business.business.getPrice(_casino_roulette.casino_business_id) + "$") + ")";
  }, player => {
    if (_user.user.get(player, 'fraction_id2') == _casino_roulette.casino_business_id) return true;
    if (player.inCasino) return true;

    if (_user.user.getCashMoney(player) < _business.business.getPrice(_casino_roulette.casino_business_id)) {
      player.notify("~r~Для входа в казино требуется " + _business.business.getPrice(_casino_roulette.casino_business_id) + "$");
      return false;
    }

    _user.user.removeCashMoney(player, _business.business.getPrice(_casino_roulette.casino_business_id));

    _business.business.addMoney(_casino_roulette.casino_business_id, _business.business.getPrice(_casino_roulette.casino_business_id));

    player.inCasino = true;
    return true;
  }], [935.53, 46.44, 81.095, 125.45, 0, "Улица", player => {
    player.inCasino = false;
    return true;
  }], [964.35, 58.81, 112.55, 64.5, 0, player => {
    return "Балкон" + (player.inCasino ? "" : " (Стоимость: " + (_business.business.getPrice(_casino_roulette.casino_business_id) + "$)"));
  }, player => {
    if (_user.user.get(player, 'fraction_id2') == _casino_roulette.casino_business_id) return true;
    if (player.inCasino) return true;

    if (_user.user.getCashMoney(player) < _business.business.getPrice(_casino_roulette.casino_business_id)) {
      player.notify("~r~Для входа в казино требуется " + _business.business.getPrice(_casino_roulette.casino_business_id) + "$");
      return false;
    }

    _user.user.removeCashMoney(player, _business.business.getPrice(_casino_roulette.casino_business_id));

    _business.business.addMoney(_casino_roulette.casino_business_id, _business.business.getPrice(_casino_roulette.casino_business_id));

    player.inCasino = true;
    return true;
  }], [972.02, 52.14, 120.24, 335.52, 0, player => {
    return "Крыша" + (player.inCasino ? "" : " (Стоимость: " + (_business.business.getPrice(_casino_roulette.casino_business_id) + "$)"));
  }, player => {
    if (_user.user.get(player, 'fraction_id2') == _casino_roulette.casino_business_id) return true;
    if (player.inCasino) return true;

    if (_user.user.getCashMoney(player) < _business.business.getPrice(_casino_roulette.casino_business_id)) {
      player.notify("~r~Для входа в казино требуется " + _business.business.getPrice(_casino_roulette.casino_business_id) + "$");
      return false;
    }

    _user.user.removeCashMoney(player, _business.business.getPrice(_casino_roulette.casino_business_id));

    _business.business.addMoney(_casino_roulette.casino_business_id, _business.business.getPrice(_casino_roulette.casino_business_id));

    player.inCasino = true;
    return true;
  }]]
}];
var _default = list;
exports.default = _default;
},{"../user":"QE3B","../modules/casino_roulette":"XMgA","../business":"y5vZ"}],"xEa3":[function(require,module,exports) {
"use strict";

var _teleport = _interopRequireDefault(require("../config/teleport"));

var _menu = require("../modules/menu");

var _user = require("../user");

var _methods = require("./methods");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

_teleport.default.forEach(element => {
  element.points.map((pos, posid) => {
    if (element.oneway && posid != 0) return;

    _methods.methods.createDynamicCheckpoint(new mp.Vector3(pos[0], pos[1], pos[2] - 1), "Нажмите ~g~E~w~ чтобы открыть " + element.name, player => {
      if (element.oneway) {
        let pos = element.points[1];

        if (pos[5]) {
          let handle = pos[6];
          if (!handle(player)) return;
        }

        _user.user.teleport(player, pos[0], pos[1], pos[2]);

        return;
      }

      let item = _menu.menu.new(player, !element.sprite ? element.name : "", "Список");

      if (element.sprite) item.sprite = element.sprite;
      element.points.forEach(tp => {
        if (player.dist(new mp.Vector3(tp[0], tp[1], tp[2])) > 3 || element.nocheckdist) {
          item.newItem({
            name: typeof tp[5] == "string" ? tp[5] : tp[5](player),
            onpress: async () => {
              if (tp[6]) {
                if (!tp[6](player)) {
                  if (_user.user.isAdminNow(player, 3)) {
                    let askadm = await _user.user.accept(player, "Войти как админ?");
                    if (!askadm) return;
                  } else return;
                }
              }

              if (element.allowveh && player.vehicle) {
                if (!_user.user.isDriver(player)) return player.notify(`~r~Вы должны быть за рулём`);

                _user.user.teleportVeh(player, tp[0], tp[1], tp[2] + 0.5);

                if (tp[3]) {
                  player.vehicle.rotation.z = tp[3];
                }

                if (tp.length >= 5) {
                  player.vehicle.dimension = tp[4];
                  player.vehicle.getOccupants().map(target => {
                    target.dimension = tp[4];
                  });
                }
              } else {
                const oldpos = _objectSpread({}, player.position);

                const oldd = player.dimension;

                _user.user.teleport(player, tp[0], tp[1], tp[2], tp[3]);

                setTimeout(() => {
                  if (!mp.players.exists(player)) return;

                  if (_methods.methods.distanceToPos2D(player.position, new mp.Vector3(tp[0], tp[1], tp[2])) < 3) {
                    if (tp[2] - player.position.z > 3) {
                      _user.user.teleport(player, oldpos.x, oldpos.y, oldpos.z);

                      player.dimension = oldd;

                      _user.user.bigAlert(player, 'Вероятно у вас не загружен интерьер. Вам необходимо перезайти полностью в игру', 'error', 10000);
                    }
                  }
                }, 3000);
                player.heading = tp[3];
                if (tp.length >= 5) player.dimension = tp[4];
              }
            }
          });
        }
      });
      item.open();
    }, 1, pos[4] ? pos[4] : 0);
  });
});
},{"../config/teleport":"woHJ","../modules/menu":"Aiz7","../user":"QE3B","./methods":"qXSp"}],"SGiU":[function(require,module,exports) {
"use strict";

var _npc = require("./npc");

var _user = require("../user");

var _chat = require("./chat");

var _level = require("../../util/level");

let startQuestNpc = _npc.npc_dialog.new("Кевин", "Сотрудник мэрии", new mp.Vector3(-524.55, -254.58, 35.68), 236.50, "ig_andreas", player => {
  if (!player.quests) player.quests = [];

  if (!_chat.enabledSystem.npcquest) {
    _npc.npc_dialog.open(player, "Прошу прощение, у меня скоро обеденный перерыв, подойдите чуть позже", ["Закрыть"]).then(() => {
      _npc.npc_dialog.close(player);
    });

    return;
  }

  if (!_user.user.questActive(player, "Начало пути") && !_user.user.questCompleted(player, "Начало пути") && _user.user.getLevel(player) <= _level.levelAccess.startQuest && _user.user.get(player, "exp_age") == 0) {
    _npc.npc_dialog.open(player, "Приветствую, меня зовут Кевин! Вижу Вы недавно прибыли к нам в штат, я помогу вам освоиться. Ну что, готовы все узнать и подзаработать?", ["Да, готов", "Нет, не интересно"]).then(status => {
      if (status) return _npc.npc_dialog.close(player);

      _user.user.giveQuest(player, "Начало пути", true);

      _npc.npc_dialog.open(player, "Для начала ознакомьтесь с управлением вашего персонажа. Это Вы увидите в меню справа, которое вызывается и убирается стрелками на вашей клавиатуре. И обязательно посмотрите справку, нажав F2. Там вы найдете все, что есть у нас в штате. Затем можете приступать к заданиям, которые располагаются под кнопкой F8. За каждое пройденное задание начисляется бонус. Удачи!", ["Я пошёл"]).then(() => {
        _npc.npc_dialog.close(player);
      });
    });

    return;
  } else if (_user.user.questActive(player, "Начало пути")) {
    _npc.npc_dialog.open(player, "Для начала ознакомьтесь с управлением Вашего персонажа. Это Вы увидите в меню справа, которое вызывается и убирается стрелками на вашей клавиатуре. И обязательно посмотрите справку, нажав F2. Там Вы найдете все, что есть у нас в штате. Затем можете приступать к заданиям, которые располагаются под кнопкой F8. За каждое пройденное задание начисляется бонус. Удачи!", ["Я пошёл"]).then(() => {
      _npc.npc_dialog.close(player);
    });
  } else {
    if (_user.user.questCompleted(player, "Что дальше")) _npc.npc_dialog.open(player, "Привет, давно не виделись. У меня для вас пока ничего нет.", ["Понятно"]).then(() => _npc.npc_dialog.close(player));else if (_user.user.questActive(player, "Что дальше")) {
      _npc.npc_dialog.open(player, "Ого, кого я вижу! Смотрю Вы уже освоились, выглядите намного лучше. Теперь Вы многое знаете, но еще не все. Подскажу, что когда вы достигните второго уровня, вы сможете устроиться в организацию. Следите за новостями о наборах. Так же в новостях о наборе в охранное агентство или посольство замаскированы неофициальные организации в штате. Так что сами сможете выбрать, как продолжить свой путь. А пока что, в здании правительства можете устроится на какую-нибудь работу. Я думаю вы добьетесь многого в нашем штате. Удачи, еще встретимся!", ["Я пошёл"]).then(() => {
        _npc.npc_dialog.close(player);

        _user.user.completeQuest(player, "Что дальше", true);
      });
    } else {
      _npc.npc_dialog.open(player, "Привет. Как я вижу Вы уже давно в нашем штате, у меня нет заданий для Вас", ["Я пошёл"]).then(() => {
        _npc.npc_dialog.close(player);
      });
    }
  }
});
},{"./npc":"jKJb","../user":"QE3B","./chat":"e1Zb","../../util/level":"MpJF"}],"cEZh":[function(require,module,exports) {
"use strict";

var _web = require("../web");

var _user = require("./entity/user");

var _methods = require("./methods");

var _user2 = require("../user");

var _admin = require("./admin");

var _warns = require("./entity/warns");

var _blackList = require("./entity/blackList");

var _sequelize = require("sequelize");

var _tradeLogEntity = require("./entity/tradeLogEntity");

var _whitelist = require("./whitelist");

let authTokens = new Map();

_web.app.get('/mobile/check', async (req, res) => {
  if (!req.query.login || !req.query.pass) return res.send({
    err: "Недостаточно параметров для авторизации"
  });
  const db_user = await _user.userEntity.findOne({
    where: {
      rp_name: req.query.login
    }
  });

  if (!db_user) {
    res.send({
      err: "Учётная запись не обнаружена"
    });
    return;
  }

  if (db_user.admin_level < 6) {
    res.send({
      err: "Данный раздел предназначен исключительно для главных администраторов"
    });
    return;
  }

  if (db_user.password !== _methods.methods.sha256(String(req.query.pass))) {
    res.send({
      err: "Учётная запись не обнаружена либо пароль не верный",
      q: [db_user.password, _methods.methods.sha256(String(req.query.pass)), String(req.query.pass)]
    });
    return;
  }

  if (authTokens.has(db_user.rp_name)) return res.send({
    login: db_user.rp_name,
    token: authTokens.get(db_user.rp_name)
  });

  const tm = _methods.methods.getTimeStamp();

  authTokens.set(db_user.rp_name, tm);
  return res.send({
    login: db_user.rp_name,
    token: tm
  });
});

_web.app.get('/mobile/checktoken', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/data', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let players = mp.players.toArray().filter(player => _user2.user.isLogin(player)).map(player => {
    return {
      id: _user2.user.getId(player),
      name: _user2.user.getRpName(player),
      social: player.socialClub,
      ip: player.ip,
      adminLvl: _user2.user.getAdminLevel(player),
      helperLvl: _user2.user.getHelperLevel(player),
      playedTime: player.played_time,
      fraction: _user2.user.getPlayerFraction(player),
      rank: _user2.user.getPlayerFractionRank(player),
      money: _user2.user.getCashMoney(player),
      bank: _user2.user.getBankMoney(player),
      phone: _user2.user.getPhone(player),
      ip_reg: _user2.user.get(player, 'ip_reg'),
      bankcard: _user2.user.get(player, 'bank_prefix') + "-" + _user2.user.get(player, 'bank_number'),
      vip: _user2.user.getVipStatus(player)
    };
  });
  return res.send({
    users: players,
    vehicles: mp.vehicles.length,
    objects: mp.objects.length,
    xparams: _admin.customParams,
    maxPlayers: mp.config.maxplayers
  });
});

_web.app.get('/mobile/setx', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let name = req.query.name;
  let value = req.query.value == "1" ? true : false;
  (0, _admin.setCustomParams)(name, value);
  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/removewarn', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let warnid = parseInt(req.query.id);
  if (isNaN(warnid) || warnid <= 0) return res.send({
    err: "ID Указан не верно"
  });

  _warns.userWarnEntity.destroy({
    where: {
      id: warnid
    }
  }).then(() => {
    return res.send({
      ok: true
    });
  });
});

_web.app.get('/mobile/playersPosition', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let players = mp.players.toArray().filter(player => _user2.user.isLogin(player)).map(player => {
    return {
      id: _user2.user.getId(player),
      name: _user2.user.getRpName(player),
      social: player.socialClub,
      ip: player.ip,
      adminLvl: _user2.user.getAdminLevel(player),
      helperLvl: _user2.user.getHelperLevel(player),
      playedTime: player.played_time,
      fraction: _user2.user.getPlayerFraction(player),
      rank: _user2.user.getPlayerFractionRank(player),
      money: _user2.user.getCashMoney(player),
      bank: _user2.user.getBankMoney(player),
      phone: _user2.user.getPhone(player),
      ip_reg: _user2.user.get(player, 'ip_reg'),
      bankcard: _user2.user.get(player, 'bank_prefix') + "-" + _user2.user.get(player, 'bank_number'),
      vip: _user2.user.getVipStatus(player),
      hp: player.health,
      ap: player.armour,
      d: player.dimension,
      position: {
        x: player.position.x,
        y: player.position.y,
        z: player.position.z
      }
    };
  });
  res.send({
    players: players
  });
});

_web.app.get('/mobile/blacklist', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let id = parseInt(req.query.id);
  let reason = req.query.reason;
  if (isNaN(id) || id <= 0) return res.send({
    err: "ID Указан не верно"
  });
  if (!reason || reason.length < 3) return res.send({
    err: "Причина должна быть не менее 3х символов"
  });
  const db_user = await _user.userEntity.findOne({
    where: {
      rp_name: req.query.login
    }
  });

  _user2.user.checkIdUser(id).then(rank => {
    if (rank == -1) return res.send({
      err: "ID Указан не верно"
    });
    if (rank == 6) return res.send({
      err: "Вы не можете занести данного человека в BlackList"
    });

    _user.userEntity.findOne({
      where: {
        id: id
      }
    }).then(usr => {
      const lic = usr.lic;
      const guid = usr.name;
      const rgscId = usr.rgscid;

      _blackList.blackListEntity.findOne({
        where: {
          lic,
          guid
        }
      }).then(q => {
        if (q) return res.send({
          err: "Игрок уже занесён в BlackList"
        });

        const target = _user2.user.getPlayerById(id);

        _blackList.blackListEntity.create({
          lic: usr.lic,
          reason: `${reason} [Занёс ${db_user.rp_name} (${db_user.id})]`,
          guid: usr.name,
          rgscId: target ? target.clientSocial : rgscId ? rgscId : 0
        }).then(() => {
          res.send({
            ok: true
          });

          _methods.methods.saveLog("addBlackList", db_user.rp_name + " занёс в BlackList " + id + " " + guid + " " + lic);

          _user2.user.log(db_user.id, "AdminJob", "Занёс в BlackList @user" + id + " " + guid + " " + lic);
        });
      });
    });
  });
});

_web.app.get('/mobile/whitelist', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let social = req.query.social.toLowerCase();
  let reason = req.query.reason;
  if (!social) return res.send({
    err: "Social Указан не верно"
  });

  _whitelist.whitelist.new(null, social);

  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/blackListRM', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let id = parseInt(req.query.id);
  if (isNaN(id) || id <= 0) return res.send({
    err: "ID Указан не верно"
  });
  const db_user = await _user.userEntity.findOne({
    where: {
      rp_name: req.query.login
    }
  });

  _user2.user.checkIdUser(id).then(rank => {
    if (rank == -1) return res.send({
      err: "ID Указан не верно"
    });

    _user.userEntity.findOne({
      where: {
        id: id
      }
    }).then(usr => {
      const lic = usr.lic;
      const guid = usr.name;
      const rgscId = usr.rgscid;

      _blackList.blackListEntity.findOne({
        where: {
          [_sequelize.Op.or]: [{
            lic
          }, {
            guid
          }]
        }
      }).then(itm => {
        if (!itm) return res.send({
          err: "Игрок не обнаружен в BlackList"
        });
        itm.destroy();

        _user2.user.log(db_user.id, "AdminJob", "Удалил из BlackList @user" + id + " " + guid + " " + lic);

        return res.send({
          ok: true
        });
      });
    });
  });
});

_web.app.get('/mobile/kickUser', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let id = parseInt(req.query.id);

  let target = _user2.user.getPlayerById(id);

  if (!target) return res.send({
    err: "Игрок не найден"
  });

  _user2.user.kick(target, "Кикнут администратором");

  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/addMoney', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let id = parseInt(req.query.id);
  let sum = parseInt(req.query.sum);
  if (isNaN(sum) || sum <= 0) return res.send({
    err: "Сумма указанна не верно"
  });

  let target = _user2.user.getPlayerById(id);

  if (!target) return res.send({
    err: "Игрок не найден"
  });

  _user2.user.addCashMoney(target, sum);

  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/removeMoney', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let id = parseInt(req.query.id);
  let sum = parseInt(req.query.sum);
  if (isNaN(sum) || sum <= 0) return res.send({
    err: "Сумма указанна не верно"
  });

  let target = _user2.user.getPlayerById(id);

  if (!target) return res.send({
    err: "Игрок не найден"
  });

  _user2.user.removeCashMoney(target, sum);

  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/reboot', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let min = parseInt(req.query.min);
  let reason = req.query.reason;
  const db_user = await _user.userEntity.findOne({
    where: {
      rp_name: req.query.login
    }
  });
  if (isNaN(min) || min <= 0) return res.send({
    err: "Количество минут указанно не верно"
  });
  if ((0, _admin.isRestarting)()) return res.send({
    err: "Процедура рестарта уже запущена"
  });
  (0, _admin.restartProtocol)(min, reason);

  _user2.user.log(db_user.id, "AdminJob", "Запустил процедуру рестарта сервера. Время: " + min + " Причина: " + reason);

  return res.send({
    ok: true
  });
});

_web.app.get('/mobile/promocodes', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;
  let promo = req.query.promo;
  if (!promo) return res.send({
    err: "Промокод указан не верно"
  });

  _user.userEntity.count({
    where: {
      promocode: promo
    }
  }).then(count => {
    if (count == 0) return res.send({
      err: "Промокод никем не вводился"
    });
    return res.send({
      ok: count
    });
  });
});

_web.app.get('/mobile/siteBuyLog', async (req, res) => {
  if (!(await tokenAuth(req, res))) return;

  _tradeLogEntity.tradeLogEntity.findAll({
    order: [["id", "DESC"]],
    limit: 300
  }).then(data => {
    res.send({
      ok: data
    });
  });
});

async function tokenAuth(req, res) {
  if (!req.query.login || !req.query.token) {
    res.send({
      err: "Недостаточно параметров для авторизации"
    });
    return false;
  }

  if (!authTokens.has(req.query.login)) {
    res.send({
      err: "Ошибка верификации логина"
    });
    return false;
  }

  if (authTokens.get(req.query.login) != req.query.token) {
    res.send({
      err: "Ошибка верификации токена"
    });
    return false;
  }

  const db_user = await _user.userEntity.findOne({
    where: {
      rp_name: req.query.login
    }
  });

  if (!db_user) {
    res.send({
      err: "Учётная запись не обнаружена"
    });
    return false;
  }

  if (db_user.admin_level < 6) {
    res.send({
      err: "Данный раздел предназначен исключительно для главных администраторов"
    });
    return false;
  }

  return true;
}
},{"../web":"txRo","./entity/user":"xF3w","./methods":"qXSp","../user":"QE3B","./admin":"s4Xg","./entity/warns":"NOUi","./entity/blackList":"UcH2","./entity/tradeLogEntity":"zzFV","./whitelist":"HCq8"}],"uwcG":[function(require,module,exports) {
function serializeAttachments(attachments) {
  return attachments.map(hash => hash.toString(36)).join("|");
}

function _addAttachment(entity, attachmentHash, remove) {
  let idx = entity._attachments.indexOf(attachmentHash);

  if (idx === -1) {
    if (!remove) {
      entity._attachments.push(attachmentHash);
    }
  } else if (remove) {
    entity._attachments.splice(idx, 1);
  }

  entity.setVariable("attachmentsData", serializeAttachments(entity._attachments));
}

function _addAttachmentWrap(attachmentName, remove) {
  if (typeof attachmentName === "number") {
    _addAttachment(this, attachmentName, remove);
  } else if (typeof attachmentName === "string") {
    _addAttachment(this, mp.joaat(attachmentName), remove);
  }
}

function _hasAttachment(attachmentName) {
  return this._attachments.indexOf(typeof attachmentName === 'string' ? mp.joaat(attachmentName) : attachmentName) !== -1;
}

mp.events.add("playerJoin", player => {
  player._attachments = [];
  player.addAttachment = _addAttachmentWrap;
  player.hasAttachment = _hasAttachment;
});
mp.events.add("staticAttachments.Add", (player, hash) => player.addAttachment(parseInt(hash, 36), false));
mp.events.add("staticAttachments.Remove", (player, hash) => player.addAttachment(parseInt(hash, 36), true));
},{}],"Gj2G":[function(require,module,exports) {
"use strict";

var _newrage = require("../../util/newrage");

mp.events.add("entityCreated", entity => {
  if (entity.type == "ped") {
    const ped = entity;

    ped.putIntoVehicle = (veh, seat, timeout, speed, flag) => {
      if (!ped.controller) return console.error("Cannot putIntoVehicle without controller");
      if (!mp.players.exists(ped.controller)) return console.error("Controller disconnected");
      if (!mp.vehicles.exists(veh)) return console.error("Vehicle not found");
      if (veh.dist(ped.controller.position) > 300) return console.error("Controller cannot put ped in this vehicle, distance error");
      if (veh.dimension != ped.controller.dimension) return console.error("Controller cannot put ped in this vehicle, dimension error");
      ped.controller.call('seatPedIntoVehicle', [ped.id, veh.id, seat, timeout, speed, flag]);
    };

    ped.driveWaypoint = (x, y, z) => {
      if (!ped.controller) return console.error("Cannot putIntoVehicle without controller");
      if (!mp.players.exists(ped.controller)) return console.error("Controller disconnected");
      ped.controller.call('pedDriveWaypoint', [ped.id, x, y, z]);
    };
  } else if (entity.type == "player") {
    const player = entity;

    if (_newrage.RAGE_BETA) {
      player.outputChatBox = text => {
        mp.events.triggerBrowser(player, 'outputChatBox', text);
      };
    }
  } else if (entity.type == "vehicle") {
    const vehicle = entity;

    if (_newrage.RAGE_BETA) {
      vehicle.driverSeat = _newrage.RAGE_BETA ? 0 : -1;
    }
  }
});
},{"../../util/newrage":"mgLX"}],"kkgo":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _menu = require("../modules/menu");

var _user = require("../user");

var _shooting = require("../modules/entity/shooting");

const POSITION = new mp.Vector3(-1754.93, 2926.23, 31.81);
const WEAPON_COST = 4000;
const AMMO_COST = 1000;
const WEAPON_COST_P = 2000;
const AMMO_COST_P = 750;
const RANK_CAN_GIVE_ACCESS = 6;
let listTopString = "";

function updateTop3(player) {
  _shooting.shootingRecordsEntity.findAll({
    order: [['count', 'ASC']],
    limit: 5
  }).then(items => {
    if (player && !mp.players.exists(player)) return;
    let data = [];
    items.map(res => {
      data.push(`${res.username} [${res.user}] -> ${(res.count / 1000).toFixed(2)}сек.`);
    });
    if (player) return player.call('updateshoottop3', [data]);
    if (JSON.stringify(data) == listTopString) return;
    listTopString = JSON.stringify(data);
    mp.players.call('updateshoottop3', [data]);
  });
}

mp.events.add("playerQuit", player => {
  if (!player.startShootingEvent) return;
  player.dimension = 0;
  player.startShootingEvent = false;
});
mp.events.add('playerDeath', async function (player) {
  if (!player.startShootingEvent) return;
  setTimeout(() => {
    player.spawn(new mp.Vector3(-1749.08, 2920.04, 31.81));
    player.dimension = 0;
    player.startShootingEvent = false;
  }, 1000);
});
mp.events.add("playerJoin", player => {
  updateTop3(player);
});
const blip = mp.blips.new(119, POSITION, {
  dimension: 0,
  name: "Стрельбище",
  scale: 0.7,
  color: 2,
  shortRange: true
});
setTimeout(() => {
  _methods.methods.createEnterCheckpoint(new mp.Vector3(-1744.65, 2941.65, 35.54), async player => {
    if (player.dimension == 0) return player.notify(`~r~Вам необходимо начать испытание около стойки прежде чем заходить на полигон. Мишени появлятся без этого не будут`);
    if (player.startShootingEvent) return player.notify(`~r~Завершить прохождение испытания можно только на финише`);
    player.startShootingEvent = true;
    player.notify('~g~Время пошло');
    const start = new Date().getTime();
    const status = await mp.events.callClient(player, 'shootingRangeWait');
    const end = new Date().getTime();
    player.startShootingEvent = false;
    player.dimension = 0;

    _user.user.teleport(player, -1749.08, 2920.04, 31.81);

    if (!status) return player.notify(`~r~Вы провалили испытание`);
    let res = end - start;

    _shooting.shootingRecordsEntity.findOne({
      where: {
        user: _user.user.getId(player)
      }
    }).then(result => {
      if (!result) {
        _shooting.shootingRecordsEntity.create({
          user: _user.user.getId(player),
          username: _user.user.getRpName(player),
          count: res
        }).then(() => {
          updateTop3();
        });

        player.notify(`~g~Вы справились за ${(res / 1000).toFixed(2)}сек`);
      } else {
        if (result.count > res) {
          player.notify(`~g~Вы справились за ${(res / 1000).toFixed(2)}сек. Это рекорд. Ваш предыдущий лучший результат: ${(result.count / 1000).toFixed(2)}сек.`);
          result.count = res;
          result.username = _user.user.getRpName(player);
          result.save().then(() => {
            updateTop3();
          });
        } else {
          player.notify(`~g~Вы справились за ${(res / 1000).toFixed(2)}сек. Ваш лучший результат: ${(result.count / 1000).toFixed(2)}сек.`);
        }
      }
    });
  }, 1.5, -1);

  _methods.methods.createDynamicCheckpoint(POSITION, "Нажмите ~g~Е~s~ чтобы открыть меню", player => {
    let m = _menu.menu.new(player, "", "Стрельбище");

    m.sprite = "shopui_title_gr_gunmod";
    m.newItem({
      name: "~b~Таблица лидеров",
      onpress: () => {
        _shooting.shootingRecordsEntity.findAll({
          order: [['count', 'ASC']],
          limit: 50
        }).then(items => {
          let submenu = _menu.menu.new(player, "Топ-50 лидеров");

          _shooting.shootingRecordsEntity.findOne({
            where: {
              user: _user.user.getId(player)
            }
          }).then(me => {
            if (me) {
              submenu.newItem({
                name: `Ваш результат: ~b~${me.username} [${me.user}]`,
                more: `${(me.count / 1000).toFixed(2)}сек.`
              });
            }

            items.map(res => {
              submenu.newItem({
                name: `${res.username} [${res.user}]`,
                more: `${(res.count / 1000).toFixed(2)}сек.`
              });
            });
            submenu.open();
          });
        });
      }
    });

    if (_user.user.isUsmc(player) && _user.user.isLeader(player)) {
      m.newItem({
        name: "~r~Очистить таблицу рекордов",
        onpress: () => {
          _user.user.accept(player, "Вы уверены?").then(status => {
            if (!status) return;

            _shooting.shootingRecordsEntity.destroy({
              where: {}
            }).then(cnt => {
              if (cnt == 0) return player.notify(`~r~Таблица уже обнулена`);
              updateTop3();
              player.notify(`~g~Таблица успешно обнулена`);
            });
          });
        }
      });
    }

    if (_user.user.isUsmc(player) && _user.user.getPlayerFractionRank(player) >= RANK_CAN_GIVE_ACCESS || _user.user.isAdminNow(player, 4)) {
      m.newItem({
        name: "~b~Выдать разрешение на стрельбище",
        desc: "Разрешение выдаётся на 1 час",
        onpress: () => {
          _menu.menu.selectNearestPlayers(player, 5).then(target => {
            if (!target) return;
            if (_user.user.isUsmc(target)) return player.notify(`~r~Военному не требуется специальное разрешение на посещение стрельбища`);
            if (target.shootingRangeAccess) return player.notify(`~r~Гражданин уже имеет временное специальное разрешение на посещение стрельбища`);
            if (!_user.user.get(target, "gun_lic")) return player.notify(`~r~У гражданина нет лицензии на оружие. Такому человеку нельзя выдавать разрешение`);
            target.shootingRangeAccess = true;
            target.notify(`~g~Вам выдано временное разрешение на посещение стрельбища`);
            setTimeout(() => {
              if (!mp.players.exists(target)) return;
              target.notify(`~r~Временное разрешение на посещение стрельбища истекло`);
            }, 60 * 60000);
          });
        }
      });
    }

    if (player.dimension == 0) {
      m.newItem({
        name: "Начать испытание",
        onpress: () => {
          if (!_user.user.get(player, "gun_lic")) return player.notify(`~r~Принимать участие могут только те, кто имеет лицензию на оружие`);
          if (!_user.user.isUsmc(player) && !player.shootingRangeAccess) return player.notify(`~r~У вас нет разрешения на посещение стрельбища`);
          if (player.weaponsAll.length == 0) return player.notify(`~r~Вам стоит экипировать оружие перед тем, как начать`);
          if (player.vehicle) return player.notify(`~r~Не в транспорте`);
          player.dimension = player.id + 1;

          _user.user.teleport(player, -1749.64, 2944.54, 32.81, 235.56);

          player.notify('~g~Проследуйте к точке старта и начинайте.');
          m.close();
        }
      });
    } else {
      m.newItem({
        name: "Завершить испытание",
        onpress: () => {
          if (player.startShootingEvent) player.call('shootingRangeClose');else player.dimension = 0;
        }
      });
    }

    m.newItem({
      name: "MP5 и патроны",
      more: WEAPON_COST + AMMO_COST + "$",
      onpress: () => {
        if (!_user.user.get(player, "gun_lic")) return player.notify(`~r~Принимать участие могут только те, кто имеет лицензию на оружие`);
        if (!_user.user.isUsmc(player) && !player.shootingRangeAccess) return player.notify(`~r~У вас нет разрешения на посещение стрельбища`);

        if (player.weaponsAll.find(item => item.item == 103)) {
          if (_user.user.getCashMoney(player) < AMMO_COST) return player.notify("У вас недостаточно средств для оплаты патронов");

          _user.user.removeMoney(player, AMMO_COST);

          player.notify("Вы получили пачку патронов");
        } else {
          if (_user.user.getCashMoney(player) < WEAPON_COST + AMMO_COST) return player.notify("У вас недостаточно средств для оплаты оружия и патронов");

          _user.user.removeMoney(player, WEAPON_COST + AMMO_COST);

          player.notify("Вы получили MP5 и пачку патронов");
        }

        _user.user.giveWeaponByHash(player, mp.joaat('WEAPON_SMG'), 200);

        m.close();
      }
    });
    m.newItem({
      name: "Пистолет и патроны",
      more: WEAPON_COST_P + AMMO_COST_P + "$",
      onpress: () => {
        if (!_user.user.get(player, "gun_lic")) return player.notify(`~r~Принимать участие могут только те, кто имеет лицензию на оружие`);
        if (!_user.user.isUsmc(player) && !player.shootingRangeAccess) return player.notify(`~r~У вас нет разрешения на посещение стрельбища`);

        if (player.weaponsAll.find(item => item.item == 77)) {
          if (_user.user.getCashMoney(player) < AMMO_COST_P) return player.notify("У вас недостаточно средств для оплаты патронов");

          _user.user.removeMoney(player, AMMO_COST_P);

          player.notify("Вы получили пачку патронов");
        } else {
          if (_user.user.getCashMoney(player) < WEAPON_COST_P + AMMO_COST_P) return player.notify("У вас недостаточно средств для оплаты оружия и патронов");

          _user.user.removeMoney(player, WEAPON_COST_P + AMMO_COST_P);

          player.notify("Вы получили пистолет и пачку патронов");
        }

        _user.user.giveWeaponByHash(player, mp.joaat('WEAPON_PISTOL'), 100);

        m.close();
      }
    });
    m.open();
  }, 2, -1);
}, 1000);
},{"../modules/methods":"qXSp","../modules/menu":"Aiz7","../user":"QE3B","../modules/entity/shooting":"ocv0"}],"VWAY":[function(require,module,exports) {
"use strict";

var _methods = require("../../util/methods");

var _user = require("../user");

var _gang = require("../../util/gang.deliver");

var _vehicles = require("../vehicles");

var _methods2 = require("../modules/methods");

var _moneyChest = require("./moneyChest");

var _dispatcher = require("../managers/dispatcher");

var _newrage = require("../../util/newrage");

let coolDownMap = new Map();
const vehModel = 'Pony2';
const vehModel2 = 'Faggio';
const motoTime = 10;
setTimeout(() => {
  mp.events.register('tablet:gangcar:order', player => {
    if (!_user.user.isGang(player) && !_user.user.isMafia(player)) return player.notify('~r~Для вас это не доступно');
    if (coolDownMap.has(_user.user.getPlayerFraction(player))) return player.notify("~r~Сейчас заказов нет");
    let car = (0, _methods.randomArrayEl)(_gang.gangDeliverSpawn);

    if (_user.user.getCashMoney(player) < _gang.gangDeliverCost) {
      return player.notify(`~r~У вас недостаточно средст для внесения залога`);
    }

    if (_user.user.getPlayerFractionRank(player) < 2) return player.notify(`~r~Доступно со второго ранга`);

    _user.user.removeCashMoney(player, _gang.gangDeliverCost);

    _user.user.bigAlert(player, 'Залог за фургон внесён. Заберите его и доставьте по координатам, которые вам отправят когда вы до него доберётесь', 'success', 8000);

    _user.user.setWaypointTarget(player, car.x, car.y, car.z);

    let veh;

    const fractionid = _user.user.getPlayerFraction(player);

    setTimeout(() => {
      if (!mp.players.exists(player)) return;
      veh = _vehicles.vehicles.spawnCar(new mp.Vector3(car.x, car.y, car.z), 0, vehModel, _vehicles.vehicles.generateNumber());
      veh.deliverTarget = (0, _methods.randomArrayEl)(_gang.gangDeliverTarget);
      veh.deliverFraction = fractionid;
      veh.deliverPlayer = _user.user.getId(player);
    }, 30000);
    setTimeout(() => {
      if (mp.vehicles.exists(veh)) {
        if (veh.dist(new mp.Vector3(car.x, car.y, car.z)) < 1 && veh.getOccupants().length == 0) {
          if (mp.players.exists(player)) player.notify('~g~Фургон пропал'), _user.user.clearWaypointTarget(player);
          veh.destroy();
        }
      }

      if (mp.players.exists(player)) {
        let qs = setInterval(() => {
          if (!mp.players.exists(player)) return clearInterval(qs);

          if (!mp.vehicles.exists(veh)) {
            _user.user.clearWaypointTarget(player);

            return clearInterval(qs);
          }
        }, 5000);
      }
    }, 900000);
    coolDownMap.set(fractionid, true);
    setTimeout(() => {
      coolDownMap.delete(fractionid);
    }, _gang.gangDeliverCoolDown * 60000);
  });
}, 1000);

_gang.gangDeliverTarget.map(item => {
  _methods2.methods.createDynamicCheckpoint(new mp.Vector3(item.x, item.y, item.z), "Нажмите ~g~E~w~ чтобы сдать фургон", player => {
    if (!player.vehicle) return;
    const vehicle = player.vehicle;
    if (vehicle.deliverFraction != _user.user.getPlayerFraction(player)) return player.notify('~r~Мы не вас ожидали');
    if (!_user.user.isDriver(player)) return player.notify('~r~Вы должны быть за рулём');
    if (vehicle.dist(vehicle.deliverTarget) > 50) return player.notify('~r~Вы должны быть за рулём');
    if (vehicle.velocity.x > 1 || vehicle.velocity.y > 1 || vehicle.velocity.z > 1) return player.notify('~g~Остановите транспорт');

    _user.user.addCashMoney(player, _gang.gangDeliverReward);

    player.notify('~g~Вы получили награду в размере $' + _gang.gangDeliverReward);
    let givechest = false;

    _moneyChest.moneyChests.forEach(item => {
      if (givechest) return;

      if (item.fraction == vehicle.deliverFraction) {
        givechest = true;
        item.money += _gang.gangDeliverRewardFraction;
        item.logWrite(`${_user.user.getRpName(player)} (${_user.user.getId(player)})`, `Фургон за $${_gang.gangDeliverRewardFraction}`);
        item.save();
      }
    });

    vehicle.destroy();
    setTimeout(() => {
      let veh = _vehicles.vehicles.spawnCar(new mp.Vector3(player.position.x, player.position.y, player.position.z), player.heading, vehModel2, _vehicles.vehicles.generateNumber());

      player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);

      _user.user.alert(player, "Мы вам дали Faggio, чтобы вы смогли скрытся. Движок там побитый, минут " + motoTime + " проработает", "error");

      setTimeout(() => {
        if (!mp.vehicles.exists(veh)) return;
        veh.destroy();
      }, 60000 * motoTime);
    }, 1000);
  }, 3, 0, [0, 250, 0, 120]);
});

mp.events.add("playerStartEnterVehicle", (player, vehicle, seat) => {
  if (!vehicle.deliverFraction) return;

  if (vehicle.deliverFraction != _user.user.getPlayerFraction(player) && vehicle.deliverPlayer) {
    let target = _user.user.getPlayerById(vehicle.deliverPlayer);

    if (target) target.notify(`~r~Заказаный фургон угнали.`);
    vehicle.deliverPlayer = null;
  }

  ;

  if (_user.user.isGosPD(player)) {
    player.notify('~g~Отвезите данный фургон в гараж ' + _user.user.getPlayerFractionName(player) + ' для получения награды');
    return;
  }

  if (vehicle.deliverFraction != _user.user.getPlayerFraction(player)) return player.notify('Этот фургон не для вас');

  _user.user.bigAlert(player, 'Доставьте фургон по координатам в вашем GPS', 'info', 4000);

  _user.user.setWaypointTarget(player, vehicle.deliverTarget.x, vehicle.deliverTarget.y, vehicle.deliverTarget.z);

  if (!vehicle.deliverCheckpoint) {
    _dispatcher.dispatcher.sendPos('Код 2', `Поступила информации о подозрительном фургоне.\nМарка: ~y~${vehModel}~s~\nНомера: ~y~${vehicle.numberPlate}`, vehicle.position, true);

    vehicle.deliverCheckpoint = true;
  }
});
},{"../../util/methods":"Z5QB","../user":"QE3B","../../util/gang.deliver":"kfmD","../vehicles":"pYYy","../modules/methods":"qXSp","./moneyChest":"HIeq","../managers/dispatcher":"bsac","../../util/newrage":"mgLX"}],"ygeq":[function(require,module,exports) {
"use strict";

var _user = require("../user");

const reasonListNames = {
  TELEPORT_FOOT: "Телепортация на ногах",
  TELEPORT_VEHICLE: "Телепортация на транспорте",
  AUTO_HEAL: "Автопополнение здоровья",
  WEAPON: "Оружие",
  VEHICLE_BOOST: "Ускорение ТС",
  USER_DATA: "Подделка клиентских данных"
};
mp.events.add('cheat:detect', (player, reason, more) => {
  if (!_user.user.isLogin(player)) return;
  if (_user.user.isAdmin(player)) return;
  if (reason == "AUTO_HEAL" && player.healProtect) return;
  if (reason.includes('TELEPORT_') && player.teleportProtect) return;

  _user.user.log(player, "Anticheat", `${reasonListNames[reason] ? reasonListNames[reason] : reason}${more ? ` ${more}` : ''}`);

  mp.players.toArray().filter(target => _user.user.isAdmin(target) && target.registerAnticheat).forEach(target => {
    target.outputChatBox(`!{#FF383B}Anti-cheat Guard: ${_user.user.getRpName(player)} (${_user.user.getId(player)}): ${reasonListNames[reason] ? reasonListNames[reason] : reason}${more ? ` ${more}` : ''}`);
  });
  if (reason != "WEAPON") return;

  _user.user.kickAntiCheat(player, reason);
});
},{"../user":"QE3B"}],"dnPV":[function(require,module,exports) {
mp.events.add("fpsync.update", (player, camPitch, camHeading) => {
  mp.players.call(player.streamedPlayers, "fpsync.update", [player.id, camPitch, camHeading]);
});
mp.events.add("pointingStop", player => {
  mp.players.call(player.streamedPlayers, "fpsync.stop", [player.id]);
});
},{}],"M8KQ":[function(require,module,exports) {

},{}],"LKpP":[function(require,module,exports) {
"use strict";

var _user = require("../user");

mp.events.add("skate", player => {
  return player.notify("~r~Кататься можно когда есть снег");
  if (player.inGreenZone) return player.notify("~r~Нельзя кататься в зелёной зоне");
  if (player.getVariable('skate')) return;
  const veh = mp.vehicles.new(mp.joaat('bmx'), player.position, {
    alpha: 0,
    dimension: player.dimension,
    locked: true,
    engine: true
  });
  veh.position = player.position;
  veh.alpha = 0;
  veh.setVariable('skate', true);

  _user.user.showLoadDisplay(player);

  setTimeout(() => {
    if (mp.vehicles.exists(veh) && mp.players.exists(player)) {
      veh.position = new mp.Vector3(player.position.x, player.position.y, player.position.z);
      player.alpha = 0;
      player.putIntoVehicle(veh, -1);
      veh.alpha = 0;
      player.skateveh = veh;
      setTimeout(() => {
        player.setVariable('skate', true);

        _user.user.hideLoadDisplay(player);
      }, 500);
    }
  }, 500);
});

function unskate(player) {
  if (mp.players.exists(player)) _user.user.showLoadDisplay(player);
  setTimeout(() => {
    if (mp.players.exists(player)) player.alpha = 255;
    if (mp.players.exists(player)) player.setVariable('skate', false);
    if (mp.vehicles.exists(player.skateveh)) player.skateveh.destroy();
    if (mp.players.exists(player)) player.alpha = 255;
    if (mp.players.exists(player)) player.skateveh = null;

    if (mp.players.exists(player)) {
      setTimeout(() => {
        _user.user.hideLoadDisplay(player);
      }, 500);
    }

    player.skateveh = null;
  }, 1000);
}

mp.events.add("unskate", player => unskate(player));
mp.events.add("playerDeath", player => unskate(player));
mp.events.add("playerQuit", player => unskate(player));
},{"../user":"QE3B"}],"TX0E":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.c4grabamount = exports.c4grabDays = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _inventory = require("../inventory");

var _items = require("../items");

var _level = require("../../util/level");

let c4grabamount = 100;
exports.c4grabamount = c4grabamount;
let isgrab = 2;
const maxOnlineGrabArmyC4 = 100;
const c4grabDays = [1, 5, 9, 13, 17, 21, 25, 29];
exports.c4grabDays = c4grabDays;

_methods.methods.createDynamicCheckpoint(new mp.Vector3(-1781.40, 2996.11, 31.81), "Нажмите ~g~E~w~ чтобы ограбить склад C4", player => {
  if (!isgrab) return player.notify("~r~Сейчас точка занята");
  let dateTime = new Date();

  if (dateTime.getHours() < 17 || dateTime.getHours() > 20) {
    player.notify('~r~Доступно только с 17 до 20 вечера ООС времени');
    return;
  }

  if (!c4grabDays.includes(dateTime.getDate())) {
    player.notify(`~r~Ограбление доступно в следующие дни: ${c4grabDays.join(', ')}`);
    return;
  }

  if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
    return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
  }

  if (_user.user.has(player, 'isGrab')) {
    player.notify('~r~Это действие сейчас не доступно');
    return;
  }

  if (_user.user.get(player, 'fractionType') != 4 && !_user.user.isMafia(player)) {
    player.notify('~r~Вы не состоите в ОПГ или Мафии');
    return;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.c4grab) return player.notify("~r~Необходимо иметь " + _level.levelAccess.c4grab + " уровень");

  if (mp.players.length < maxOnlineGrabArmyC4) {
    player.notify("~r~Онлайн на сервере должен быть более " + maxOnlineGrabArmyC4 + " человек");
    return;
  }

  if (c4grabamount <= 0) {
    player.notify("~r~Пусто");
    return;
  }

  isgrab--;
  exports.c4grabamount = c4grabamount = c4grabamount - 1;

  _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

  _user.user.disableAllControls(player, true);

  setTimeout(function () {
    _user.user.playAnimation(player, "anim@heists@money_grab@duffel", "loop", 9);
  }, 5000);
  setTimeout(function () {
    isgrab++;
    if (!_user.user.isLogin(player)) return;

    _user.user.disableAllControls(player, false);

    _user.user.giveWanted(player, 10, 'Ограбление хранилища USMC');

    _user.user.reset(player, 'isGrab');

    _user.user.stopAnimation(player);

    if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
      return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
    }

    if (_methods.methods.getRandomInt(0, 3) == 0) {
      _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

      player.notify('~r~Вы сломали отмычку');
    }

    if (_methods.methods.getRandomInt(1, 4) == 1 && c4grabamount > 0) {
      _inventory.inventory.addItem(player, 262, 1, 1, _user.user.getId(player), 1);

      player.notify("~g~Вы получили (x1) " + _items.items.getItemNameById(262));
    } else {
      player.notify("~r~Контейнер оказался пустой");
    }

    if (c4grabamount > 0) player.notify("Осталось контейнеров: " + c4grabamount);else player.notify("~r~Больше контейнеров нет, ожидайте пополнение склада");
  }, 10000);
}, 2);
},{"./methods":"qXSp","../user":"QE3B","../inventory":"m5ow","../items":"nuVl","../../util/level":"MpJF"}],"QNCd":[function(require,module,exports) {
"use strict";

var _weather = require("../managers/weather");

var _user = require("../user");

var _inventory = require("../inventory");

var _items = require("../items");

var _ = require("..");

var _chat = require("./chat");

var _methods = require("./methods");

var _level = require("../../util/level");

let amount = _methods.methods.getRandomInt(287, 402);

let isgrab = 4;

const updatePacific = () => {
  let enabled = false;

  if (_weather.weather.getHour() == 9 && _weather.weather.getMin() == 1) {
    enabled = true;
    qtick();
  }

  setTimeout(() => {
    updatePacific();
  }, enabled ? 120000 : 3000);
};

function qtick() {
  amount = _methods.methods.getRandomInt(287, 402);
  isgrab = 4;

  _methods.methods.explodedDoors.forEach((item, index) => {
    if (item[3] == 961976194) {
      _methods.methods.openDoorRestore(...item);

      _methods.methods.explodedDoors.splice(index, 1);
    }
  });
}

_chat.chat.registerCommand('grabtest', player => {
  if (!_user.user.isAdminNow(player, 6)) return;
  if (!_.testMode) return;
  qtick();
  player.notify("Pacific обновлён");
});

updatePacific();

_methods.methods.createExplopeCheckpoint(new mp.Vector3(255.2283, 223.976, 102.3932), 961976194, player => {
  if (!_.testMode && _weather.weather.getHour() > 6) {
    player.notify("~r~Доступно только с 0 до 6 утра игрового времени");
    return false;
  }

  if (_methods.methods.explodedDoors.find(item => item[3] == 961976194)) {
    player.notify("~r~Дверь взорвана");
    return false;
  }

  return true;
});

_methods.methods.createEnterCheckpoint(new mp.Vector3(252.72, 221.68, 101.68), player => {
  if (_methods.methods.explodedDoors.find(item => item[3] == 961976194)) return;

  _user.user.teleport(player, 254.12, 225.42, 101.88, 263.64);

  player.notify("~r~Дверь не взорвана");
});

const pacificPos = new mp.Vector3(265.37, 213.73, 100.68);
let intervalEvent;

_methods.methods.createDynamicCheckpoint(pacificPos, "Нажмите ~g~E~w~ чтобы ограбить банк Pacific", player => {
  if (player.vehicle) return player.notify("~r~Грабить в транспорте?");
  if (isgrab == 0) return player.notify("~r~Сейчас точка занята");

  if (!_.testMode && _weather.weather.getHour() >= 6) {
    player.notify("~r~Доступно только с 0 до 6 утра игрового времени");
    return;
  }

  if (!_methods.methods.explodedDoors.find(item => item[3] == 961976194)) return player.notify("~r~Дверь не взорвана");

  if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
    return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
  }

  if (_user.user.has(player, 'isGrab')) {
    player.notify('~r~Это действие сейчас не доступно');
    return;
  }

  if (!_user.user.isMafia(player)) {
    player.notify('~r~Вы не состоите в Мафии');
    return;
  }

  if (_user.user.get(player, 'fractionType') == 4) {
    player.notify('~r~Вы состоите в ОПГ');
    return;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.pacificGrab) {
    player.notify('~r~Разрешено грабить с ' + _level.levelAccess.pacificGrab + ' уровня');
    return;
  }

  if (!_.testMode && mp.players.length < 150) {
    player.notify("~r~Онлайн на сервере должен быть более 150 человек");
    return;
  }

  if (amount <= 0) {
    player.notify("~r~Пусто");
    return;
  }

  isgrab--;
  amount--;

  _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

  _user.user.disableAllControls(player, true);

  setTimeout(function () {
    _user.user.playAnimation(player, "anim@heists@money_grab@duffel", "loop", 9);
  }, 5000);
  setTimeout(function () {
    setTimeout(() => {
      isgrab++;
    }, 5000);
    if (!_user.user.isLogin(player)) return;

    _user.user.disableAllControls(player, false);

    _user.user.giveWanted(player, 10, 'Ограбление банка Pacific');

    _user.user.minigame(player, "gr6").then(status => {
      _user.user.reset(player, 'isGrab');

      _user.user.stopAnimation(player);

      if (_user.user.isDead(player) || player.dist(pacificPos) > 20) return;

      if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
        return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
      }

      if (_methods.methods.getRandomInt(0, 3) == 0) {
        _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

        player.notify('~r~Вы сломали отмычку');
      }

      if (!player.bankgrabmoney) player.bankgrabmoney = 0;

      if (_methods.methods.getRandomInt(0, 10) >= 1) {
        if (_methods.methods.getRandomInt(0, 200) == 0) {
          const sum = _methods.methods.getRandomInt(10000, 20000);

          player.bankgrabmoney += sum;

          _user.user.log(player, "Grab", `вытащил из ячейки пацифика куш ${sum}$`);

          player.notify("~y~Вы сорвали куш");
        } else {
          const sum = _methods.methods.getRandomInt(800, 1000) * 2;
          player.bankgrabmoney += sum;

          _user.user.log(player, "Grab", `вытащил из ячейки пацифика ${sum}$`);
        }

        player.notify("~g~В сумке: " + player.bankgrabmoney + "$");

        _user.user.setComponentVariation(player, 5, 45, 0);
      } else {
        player.notify("~r~Ячейка пустая");
      }

      if (amount > 0) player.notify("Осталось ячеек: " + amount);else player.notify("~r~Больше ячеек нет");
    });
  }, 10000);
}, 2);
},{"../managers/weather":"uehX","../user":"QE3B","../inventory":"m5ow","../items":"nuVl","..":"QCba","./chat":"e1Zb","./methods":"qXSp","../../util/level":"MpJF"}],"MZmO":[function(require,module,exports) {
"use strict";

var _weather = require("../managers/weather");

var _user = require("../user");

var _inventory = require("../inventory");

var _items = require("../items");

var _ = require("..");

var _chat = require("./chat");

var _methods = require("./methods");

var _level = require("../../util/level");

const AMOUNT_MIN = 287;
const AMOUNT_MAX = 402;
let pacificPoss = [[new mp.Vector3(982.40, 31.81, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(987.22, 33.42, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(978.44, 29.00, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(972.21, 18.38, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(997.18, -3.76, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(994.77, -4.00, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)], [new mp.Vector3(992.28, -4.35, 71.74), _methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX)]];
let isgrab = 4;

const updatePacific = () => {
  let enabled = false;

  if (_weather.weather.getHour() == 9 && _weather.weather.getMin() == 1) {
    enabled = true;
    qtick();
  }

  setTimeout(() => {
    updatePacific();
  }, enabled ? 120000 : 3000);
};

function qtick() {
  pacificPoss.map((item, index) => {
    pacificPoss[index][1] = _methods.methods.parseInt(_methods.methods.getRandomInt(AMOUNT_MIN, AMOUNT_MAX) / pacificPoss.length);
  });
  isgrab = 4;

  _methods.methods.explodedDoors.forEach((item, index) => {
    if (item[3] == 3309500160) {
      _methods.methods.openDoorRestore(...item);

      _methods.methods.explodedDoors.splice(index, 1);
    }
  });
}

_chat.chat.registerCommand('grabtestcasino', player => {
  if (!_user.user.isAdminNow(player, 6)) return;
  qtick();
  player.notify("Ограбление казино обновлено");
});

updatePacific();
qtick();

_methods.methods.createExplopeCheckpoint(new mp.Vector3(999.67, 29.53, 71.76), 3309500160, player => {
  if (!_.testMode && _weather.weather.getHour() > 6) {
    player.notify("~r~Доступно только с 0 до 6 утра игрового времени");
    return false;
  }

  if (_methods.methods.explodedDoors.find(item => item[3] == 3309500160)) {
    player.notify("~r~Дверь взорвана");
    return false;
  }

  return true;
});

_methods.methods.createEnterCheckpoint(new mp.Vector3(997.90, 26.56, 71.74), player => {
  if (_methods.methods.explodedDoors.find(item => item[3] == 3309500160)) return;

  _user.user.teleport(player, 999.68, 29.85, 71.76, 331.41);

  player.notify("~r~Дверь не взорвана");
});

pacificPoss.map((q, index) => {
  let pacificPos = q[0];

  _methods.methods.createDynamicCheckpoint(pacificPos, "Нажмите ~g~E~w~ чтобы ограбить ячейку №" + (index + 1), player => {
    if (player.vehicle) return player.notify("~r~Грабить в транспорте?");
    if (isgrab == 0) return player.notify("~r~Сейчас точка занята");

    if (!_.testMode && _weather.weather.getHour() >= 6) {
      player.notify("~r~Доступно только с 0 до 6 утра игрового времени");
      return;
    }

    if (!_methods.methods.explodedDoors.find(item => item[3] == 3309500160)) return player.notify("~r~Дверь не взорвана");

    if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
      return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
    }

    if (_user.user.has(player, 'isGrab')) {
      player.notify('~r~Это действие сейчас не доступно');
      return;
    }

    if (!_user.user.isMafia(player)) {
      player.notify('~r~Вы не состоите в Мафии');
      return;
    }

    if (_user.user.get(player, 'fractionType') == 4) {
      player.notify('~r~Вы состоите в ОПГ');
      return;
    }

    if (_user.user.getLevel(player) < _level.levelAccess.pacificGrab) {
      player.notify('~r~Разрешено грабить с ' + _level.levelAccess.pacificGrab + ' уровня');
      return;
    }

    if (!_.testMode && mp.players.length < 150) {
      player.notify("~r~Онлайн на сервере должен быть более 150 человек");
      return;
    }

    if (pacificPoss[index][1] <= 0) {
      player.notify("~r~Пусто");
      return;
    }

    _user.user.set(player, 'isGrab', true);

    isgrab--;
    pacificPoss[index][1]--;

    _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

    _user.user.disableAllControls(player, true);

    setTimeout(function () {
      _user.user.playAnimation(player, "anim@heists@money_grab@duffel", "loop", 9);
    }, 5000);
    setTimeout(function () {
      setTimeout(() => {
        isgrab++;
      }, 5000);
      if (!_user.user.isLogin(player)) return;

      _user.user.disableAllControls(player, false);

      _user.user.giveWanted(player, 10, 'Ограбление казино Diamond');

      _user.user.minigame(player, "gr6").then(status => {
        _user.user.reset(player, 'isGrab');

        _user.user.stopAnimation(player);

        if (_user.user.isDead(player) || player.dist(pacificPos) > 20) return;

        if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
          return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
        }

        if (_methods.methods.getRandomInt(0, 3) == 0) {
          _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

          player.notify('~r~Вы сломали отмычку');
        }

        if (!player.bankgrabmoney) player.bankgrabmoney = 0;

        if (_methods.methods.getRandomInt(0, 10) >= 1) {
          if (_methods.methods.getRandomInt(0, 200) == 0) {
            const sum = _methods.methods.getRandomInt(10000, 20000);

            player.bankgrabmoney += sum;

            _user.user.log(player, "Grab", `вытащил из ячейки казино куш ${sum}$`);

            player.notify("~y~Вы сорвали куш");
          } else {
            const sum = _methods.methods.getRandomInt(800, 1000) * 2;
            player.bankgrabmoney += sum;

            _user.user.log(player, "Grab", `вытащил из ячейки казино ${sum}$`);
          }

          player.notify("~g~В сумке: " + player.bankgrabmoney + "$");

          _user.user.setComponentVariation(player, 5, 45, 0);
        } else {
          player.notify("~r~Ячейка пустая");
        }

        if (pacificPoss[index][1] > 0) player.notify("Осталось ячеек: " + pacificPoss[index][1]);else player.notify("~r~Больше ячеек нет");
      });
    }, 10000);
  }, 2);
});
},{"../managers/weather":"uehX","../user":"QE3B","../inventory":"m5ow","../items":"nuVl","..":"QCba","./chat":"e1Zb","./methods":"qXSp","../../util/level":"MpJF"}],"uhmi":[function(require,module,exports) {
"use strict";

var _methods = require("./methods");

var _weather = require("../managers/weather");

var _user = require("../user");

var _inventory = require("../inventory");

var _items = require("../items");

var _ = require("..");

var _chat = require("./chat");

var _methods2 = require("../../util/methods");

var _level = require("../../util/level");

function getAmountNew() {
  return _methods.methods.getRandomInt(200, 300);
}

let positions = [{
  check: new mp.Vector3(1174.33, 2711.59, 38.07),
  explodepos: new mp.Vector3(1176.22, 2711.64, 38.09),
  pos: new mp.Vector3(1173.13, 2716.49, 37.07),
  isgrab: 3,
  amount: getAmountNew(),
  fraction: 2
}, {
  check: new mp.Vector3(-351.64, -54.83, 49.01),
  explodepos: new mp.Vector3(-353.08, -53.67, 49.04),
  pos: new mp.Vector3(-352.29, -60.06, 48.01),
  isgrab: 3,
  amount: getAmountNew(),
  fraction: 7
}, {
  check: new mp.Vector3(313.44, -283.87, 54.14),
  explodepos: new mp.Vector3(312.358, -282.7301, 54.30365),
  pos: new mp.Vector3(312.36, -288.82, 53.14),
  isgrab: 3,
  amount: getAmountNew(),
  fraction: 3
}, {
  check: new mp.Vector3(148.94, -1045.64, 29.35),
  explodepos: new mp.Vector3(148.0266, -1044.364, 29.506930),
  pos: new mp.Vector3(148.34, -1050.38, 28.35),
  isgrab: 3,
  amount: getAmountNew(),
  fraction: 3
}];

const updateFleeca = () => {
  let enabled = false;

  if (_weather.weather.getHour() == 11 && _weather.weather.getMin() < 3) {
    enabled = true;
    qtick();
  }

  setTimeout(() => {
    updateFleeca();
  }, enabled ? 220000 : 12000);
};

function qtick() {
  let enabled = positions.find(item => item.enabled);
  let list = positions.filter(item => !item.enabled);
  let newflec = (0, _methods2.randomArrayEl)(list);
  newflec.enabled = true;
  if (enabled) enabled.enabled = false;
  positions.forEach(item => {
    item.amount = getAmountNew();
  });
}

updateFleeca();

_chat.chat.registerCommand('grabtest', player => {
  if (!_user.user.isAdminNow(player, 6)) return;
  qtick();
  player.notify("Флека обновлена");
});

const gate = 2121050683;
const fleecaDisabledDays = [4, 8, 12, 16, 20, 24, 28];

function checkAccess(player) {
  let dateTime = new Date();

  if (fleecaDisabledDays.includes(dateTime.getDate())) {
    player.notify(`~r~Ограбление НЕдоступно в следующие дни: ${fleecaDisabledDays.join(', ')}`);
    return;
  }

  if (_weather.weather.getHour() < 12 || _weather.weather.getHour() >= 18) {
    player.notify("~r~Доступно с 12 до 18");
    return false;
  }

  if (!_user.user.isGang(player)) {
    player.notify('~r~Вы не состоите в банде');
    return false;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.fleecaGrab) {
    player.notify('~r~Разрешено грабить с ' + _level.levelAccess.fleecaGrab + ' уровня');
    return false;
  }

  if (!_.testMode && mp.players.length < 100) {
    player.notify("~r~Онлайн на сервере должен быть более 100 человек");
    return false;
  }

  return true;
}

positions.forEach(item => {
  _methods.methods.createEnterCheckpoint(item.check, player => {
    if (_methods.methods.explodedDoors.find(itm => _methods.methods.distanceToPos(new mp.Vector3(itm[0], itm[1], itm[2]), item.explodepos) < 10 && itm[3] == gate)) return;

    _user.user.teleport(player, item.explodepos.x, item.explodepos.y, item.explodepos.z);

    player.notify("~r~Дверь не взорвана");
  });

  _methods.methods.createExplopeCheckpoint(item.explodepos, gate, player => {
    if (!item.enabled) {
      player.notify("~r~Банк в данный момент недоступен");
      return false;
    }

    return checkAccess(player);
  }, player => {
    setTimeout(() => {
      const itm = _methods.methods.explodedDoors.findIndex(itm => _methods.methods.distanceToPos(new mp.Vector3(itm[0], itm[1], itm[2]), item.explodepos) < 10 && itm[3] == gate);

      _methods.methods.openDoorRestore(item.explodepos.x, item.explodepos.y, item.explodepos.z, gate);

      _methods.methods.explodedDoors.splice(itm, 1);
    }, 60000 * 35);
  }, 8, true, item.fraction);

  _methods.methods.createDynamicCheckpoint(item.pos, "Нажмите ~g~E~w~ чтобы ограбить банк Fleeca", player => {
    if (player.vehicle) return player.notify("~r~Грабить в транспорте?");
    if (item.isgrab == 0) return player.notify("~r~Сейчас точка занята");
    if (!item.enabled) return player.notify("~r~Данный банк занят");
    if (!_methods.methods.explodedDoors.find(itm => _methods.methods.distanceToPos(new mp.Vector3(itm[0], itm[1], itm[2]), item.explodepos) < 10 && itm[3] == gate)) return player.notify("~r~Дверь не взорвана");

    if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
      return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
    }

    if (_user.user.has(player, 'isGrab')) {
      player.notify('~r~Это действие сейчас не доступно');
      return;
    }

    if (!checkAccess(player)) return;

    if (item.amount <= 0) {
      player.notify("~r~Пусто");
      return;
    }

    item.isgrab--;
    item.amount--;

    _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

    _user.user.disableAllControls(player, true);

    setTimeout(function () {
      if (_user.user.isLogin(player)) _user.user.playAnimation(player, "anim@heists@money_grab@duffel", "loop", 9);
    }, 5000);
    setTimeout(function () {
      setTimeout(() => {
        item.isgrab++;
      }, 5000);
      if (!_user.user.isLogin(player)) return;
      setTimeout(() => {
        if (!mp.players.exists(player)) item.isgrab++;
      }, 20000);

      _user.user.giveWanted(player, 10, 'Ограбление банка Fleeca');

      _user.user.minigame(player, "gr6").then(status => {
        _user.user.disableAllControls(player, false);

        _user.user.reset(player, 'isGrab');

        _user.user.stopAnimation(player);

        if (_user.user.isDead(player) || player.dist(item.pos) > 20) return;

        if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
          return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
        }

        if (_methods.methods.getRandomInt(0, 3) == 0) {
          _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

          player.notify('~r~Вы сломали отмычку');
        }

        if (!player.bankgrabmoney) player.bankgrabmoney = 0;

        if (_methods.methods.getRandomInt(1, 10) != 1) {
          const sum = _methods.methods.getRandomInt(1600, 2000);

          _user.user.log(player, "Grab", `вытащил из ячейки флеки ${sum}$`);

          player.bankgrabmoney += sum;
          player.notify("~g~Вы загрузили в сумку " + sum + "$");

          _user.user.setComponentVariation(player, 5, 45, 0);
        } else {
          player.notify("~r~Ячейка пустая");
        }

        if (item.amount > 0) player.notify("Осталось ячеек: " + item.amount);else player.notify("~r~Больше ячеек нет");
      });
    }, 10000);
  }, 2);
});
},{"./methods":"qXSp","../managers/weather":"uehX","../user":"QE3B","../inventory":"m5ow","../items":"nuVl","..":"QCba","./chat":"e1Zb","../../util/methods":"Z5QB","../../util/level":"MpJF"}],"anIM":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weapongrabamount = exports.weaponGrabDays = void 0;

var _methods = require("./methods");

var _weather = require("../managers/weather");

var _user = require("../user");

var _inventory = require("../inventory");

var _items = require("../items");

var _level = require("../../util/level");

var _methods2 = require("../../util/methods");

var _dispatcher = require("../managers/dispatcher");

const alreadyKillerTimer = 30;
const maxOnlineGrabArmyWeapon = 150;
const MAX_AMOUNT = 150;
const MAX_GRAB = 4;
const weapons = [106, 110];
const ammo = [30];
let locked = true;
let locking = false;
const pos = new mp.Vector3(465.97, -3119.84, 5.07);
const postext = new mp.Vector3(465.97, -3119.84, 6.07);
let weapongrabamount = MAX_AMOUNT;
exports.weapongrabamount = weapongrabamount;
let isgrab = MAX_GRAB;
const killGangByArmyRewardList = [{
  x: -2091.88,
  y: 3289.92,
  z: 31.81,
  r: 500,
  cost: 500
}, {
  x: 467.01,
  y: -3121.13,
  z: 6.07,
  r: 180,
  cost: 500
}];
let usedRestore = false;
setInterval(() => {
  if (usedRestore) return;
  let used = _weather.weather.getHour() == 20 && _weather.weather.getMin() == 0;

  if (used) {
    usedRestore = true;
    setTimeout(() => {
      usedRestore = false;
    }, 120000);
    exports.weapongrabamount = weapongrabamount = MAX_AMOUNT;
    isgrab = MAX_GRAB;
    locked = true;
  }
}, 1000);
const weaponGrabDays = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30];
exports.weaponGrabDays = weaponGrabDays;

_methods.methods.createDynamicCheckpoint(pos, "Нажмите ~g~E~w~ чтобы ограбить склад с оружием", player => {
  if (_user.user.isCuff(player)) return;
  if (_user.user.isDead(player)) return;
  if (!isgrab) return player.notify("~r~Сейчас точка занята");

  if (_weather.weather.getHour() < 23 && _weather.weather.getHour() > 5) {
    player.notify("~r~Доступно только с 23 до 5 утра игрового времени");
    return;
  }

  let dateTime = new Date();

  if (!_methods.methods.isTestServer() && !weaponGrabDays.includes(dateTime.getDate())) {
    player.notify(`~r~Ограбление доступно в следующие дни: ${weaponGrabDays.join(', ')}`);
    return;
  }

  if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
    return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
  }

  if (weapongrabamount <= 0) return player.notify("~r~Больше контейнеров нет, ожидайте пополнение склада");

  if (_user.user.has(player, 'isGrab')) {
    player.notify('~r~Это действие сейчас не доступно');
    return;
  }

  if (!_user.user.isGang(player)) {
    player.notify('~r~Вы не состоите в банде');
    return;
  }

  if (_user.user.getLevel(player) < _level.levelAccess.weapongrab) return player.notify("~r~Необходимо иметь " + _level.levelAccess.weapongrab + " уровень");

  if (!_methods.methods.isTestServer() && mp.players.length < maxOnlineGrabArmyWeapon) {
    player.notify("~r~Онлайн на сервере должен быть более " + maxOnlineGrabArmyWeapon + " человек");
    return;
  }

  const VEHS_EXIST = _user.user.getNearestVehicles(player, 15).filter(veh => veh.fraction_id == _user.user.getPlayerFraction(player)).length > 0;

  if (!VEHS_EXIST) {
    player.notify("~r~Поблизости нет транспорта вашей банды");
    return;
  }

  const fraction = _user.user.getPlayerFraction(player);

  if (locked) {
    player.notify('~r~Хранилище закрыто крепким замком, сначала нужно вскрыть');

    _user.user.accept(player, "Начать взлом замка?").then(status => {
      if (!status) return;
      if (locking) return player.notify('~r~Замок уже вскрывается');
      if (!locked) return player.notify('~r~Замок уже вскрыт');
      player.notify('~g~Вы начали взлом, ожидайте');

      _user.user.playAnimation(player, "mini@repair", "fixing_a_ped", 8);

      _user.user.disableAllControls(player, true);

      setTimeout(() => {
        if (!mp.players.exists(player)) return;

        _user.user.stopAnimation(player);

        _user.user.disableAllControls(player, false);

        if (locking) return player.notify('~r~Замок уже вскрывается');
        if (!locked) return player.notify('~r~Замок уже вскрыт');
        player.notify('~r~Не отходите далеко, иначе взлом остановится');
        locking = true;
        let secs = 7 * 60;
        let text = mp.labels.new('Вскрытие замка (' + secs + ')', postext, {
          drawDistance: 5,
          los: true
        });

        _dispatcher.dispatcher.sendPosImage('Военный порт', 'Диспетчер', `Внимание!!! [Склад с вооружением в порту] атакован`, "CHAR_MILSITE", pos, 4);

        let q = setInterval(() => {
          if (secs == 0) {
            clearInterval(q);
            if (mp.labels.exists(text)) text.destroy();
            locked = false;
            locking = false;

            _methods.methods.createEvent('port', "Ограбление порта", pos.x, pos.y, pos.z, 250);

            let checkT = setInterval(() => {
              if (_weather.weather.getHour() > 5) {
                _methods.methods.removeEvent('port');

                clearInterval(checkT);
              }
            }, 1000);
            return;
          }

          if (secs % 20 === 0) {
            if (mp.players.toArray().filter(target => [fraction].includes(_user.user.getPlayerFraction(target)) && target.dist(pos) <= 10).length == 0) {
              locking = false;
              clearInterval(q);
              if (mp.labels.exists(text)) text.destroy();
              return;
            }
          }

          secs--;
          text.text = 'Вскрытие замка (' + secs + ')';
        }, 1000);
      }, 10000);
    });

    return;
  }

  isgrab--;
  exports.weapongrabamount = weapongrabamount = weapongrabamount - 1;

  _user.user.playAnimation(player, "mp_arresting", "a_uncuff", 8);

  _user.user.disableAllControls(player, true);

  _user.user.set(player, 'isGrab', true);

  setTimeout(function () {
    _user.user.playAnimation(player, "anim@heists@money_grab@duffel", "loop", 9);
  }, 5000);
  setTimeout(async function () {
    isgrab++;
    if (!_user.user.isLogin(player)) return;

    _user.user.disableAllControls(player, false);

    _user.user.giveWanted(player, 10, 'Ограбление хранилища USMC');

    _user.user.reset(player, 'isGrab');

    _user.user.stopAnimation(player);

    if (_user.user.isCuff(player)) return;
    if (_user.user.isDead(player)) return;

    if (!_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263)) {
      return player.notify("~r~Требуется " + _items.items.getItemNameById(263));
    }

    if (_methods.methods.getRandomInt(0, 3) == 0) {
      _inventory.inventory.deleteItem(_inventory.inventory.getItemListData(1, _user.user.getId(player)).find(itm => itm.item_id == 263).id);

      player.notify('~r~Вы сломали отмычку');
    }

    let chance = _methods.methods.getRandomInt(1, 10);

    let chestid = _methods.methods.getTimeStamp();

    if (chance == 1) {
      player.notify("~r~Контейнер оказался пустой");
    } else if (chance <= 3) {
      let randomweapon = (0, _methods2.randomArrayEl)(weapons);
      await _inventory.inventory.addItem(player, randomweapon, 1, 999, chestid, 1);
      if (mp.players.exists(player)) _inventory.inventory.openInventory(player, 999, chestid);
    } else {
      let randomammo = (0, _methods2.randomArrayEl)(ammo);
      await _inventory.inventory.addItem(player, randomammo, 2, 999, chestid, _inventory.inventory.ammoItemIdToMaxCount(randomammo));
      if (mp.players.exists(player)) _inventory.inventory.openInventory(player, 999, chestid);
    }

    if (weapongrabamount > 0) player.notify("Осталось контейнеров: " + weapongrabamount);else player.notify("~r~Больше контейнеров нет, ожидайте пополнение склада");
  }, 10000);
}, 2);

let alreadyKiller = new Map();
mp.events.add("playerDeath", (player, reason, killer) => {
  if (!killer) return;
  if (!_user.user.isGang(player) && !_user.user.isMafia(player)) return;
  if (!_user.user.isUsmc(killer)) return;
  if (alreadyKiller.has(_user.user.getId(player))) return;
  const inZone = killGangByArmyRewardList.find(item => player.dist(new mp.Vector3(item.x, item.y, item.z)) <= item.r);
  if (!inZone) return;

  _user.user.addCashMoney(killer, inZone.cost);

  killer.notify(`~g~Вы получили награду за убийство члена ${_user.user.getPlayerFractionName(player)}`);

  const ids = _user.user.getId(player);

  alreadyKiller.set(ids, true);
  setTimeout(() => {
    alreadyKiller.delete(ids);
  }, alreadyKillerTimer * 60000);
});
},{"./methods":"qXSp","../managers/weather":"uehX","../user":"QE3B","../inventory":"m5ow","../items":"nuVl","../../util/level":"MpJF","../../util/methods":"Z5QB","../managers/dispatcher":"bsac"}],"LfX4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerPos2 = exports.registerPos = exports.openDuelMenu = exports.exitPos = exports.exitFromDuel = void 0;

var _methods = require("./methods");

var _menu = require("./menu");

var _user = require("../user");

var _methods2 = require("../../util/methods");

var _inventory = require("../inventory");

var _adminsTp = require("../config/adminsTp");

const registerPos = new mp.Vector3(-266.39, -2035.50, 29.15);
exports.registerPos = registerPos;
const registerPos2 = new mp.Vector3(-272.05, -2038.56, 29.15);
exports.registerPos2 = registerPos2;
const exitPos = new mp.Vector3(-281.06, -2030.59, 30.15);
exports.exitPos = exitPos;
let activeDuelsIds = 0;
let activeDuels = new Map();
const costList = [0, 100, 500, 1000, 2000, 5000, 10000, 20000, 30000, 40000, 50000, 100000];
let list = [[[1373.21, -758.82, 67.20, 355.64], [1379.76, -723.67, 67.19, 172.21]]];
const blip = mp.blips.new(310, registerPos, {
  dimension: 0,
  name: "Дуэли",
  scale: 0.5,
  color: 75,
  shortRange: true
});
(0, _adminsTp.addAdminTP)('Дуэль', registerPos);

const openDuelMenu = player => {
  let m = _menu.menu.new(player, "", "Действия");

  m.sprite = "duels";

  if (player.duelLobby) {
    m.newItem({
      name: "~r~Покинуть текущее мероприятие",
      onpress: () => {
        m.close();
        let data = activeDuels.get(player.duelLobby);
        if (!data) return player.duelLobby = null;
        if (data.cost > 0) _user.user.addCashMoney(player, data.cost);
        activeDuels.delete(player.duelLobby);
        player.duelLobby = null;
        player.notify('~g~Вы покинули мероприятие');
      }
    });
  }

  m.newItem({
    name: "Создать мероприятие",
    onpress: () => {
      if (_user.user.isInMp(player)) return player.notify('~r~Вы не можете регистрировать мероприятие, поскольку уже зарегистрированы в другом мероприятии');
      let password = "";
      let cost = costList[0];
      let count_in_team = 1;
      let count_teams = 2;

      const createLobby = () => {
        if (_user.user.isInMp(player)) return player.notify('~r~Вы не можете регистрировать мероприятие, поскольку уже зарегистрированы в другом мероприятии');

        let submenu = _menu.menu.new(player, "Создание мероприятия", "Параметры");

        submenu.newItem({
          name: "Пароль",
          more: `${password ? "Указан" : "Не указан"}`,
          desc: "Если указать пароль, то принять участие в мероприятии сможет только тот, кто его укажет",
          onpress: () => {
            _menu.menu.input(player, "Введите пароль, если необходим", "", 15, "password").then(passwords => {
              if (passwords === null) return createLobby();
              password = passwords;
              createLobby();
            });
          }
        });
        submenu.newItem({
          name: `Стоимость участия`,
          type: "list",
          list: costList.map(item => {
            return item.toString() + "~g~$";
          }),
          listSelected: costList.indexOf(cost),
          onchange: val => {
            cost = costList[val];
          }
        });
        submenu.newItem({
          name: `~g~Зарегистрировать мероприятие`,
          onpress: () => {
            if (_user.user.isInMp(player)) return player.notify('~r~Вы не можете регистрировать мероприятие, поскольку уже зарегистрированы в другом мероприятии');
            if (cost > _user.user.getCashMoney(player)) return player.notify(`~r~Указанная ставка выше чем вы можете поставить`);
            submenu.close();
            activeDuelsIds = activeDuelsIds + 1;
            const id = parseInt(`${activeDuelsIds}`);
            let teams = [];

            for (let q = 0; q < count_teams; q++) teams.push([]);

            player.duelLobby = id;
            activeDuels.set(id, {
              user: player,
              user_name: _user.user.getRpName(player),
              password,
              cost
            });
            player.notify('~g~Мероприятие зарегистрировано');
            if (cost > 0) _user.user.removeCashMoney(player, cost);
          }
        });
        submenu.open();
      };

      createLobby();
    }
  });
  m.newItem({
    name: "~b~СПИСОК АКТИВНЫХ МЕРОПРИЯТИЙ"
  });
  activeDuels.forEach((item, id) => {
    const check = (notify = false) => {
      if (!activeDuels.has(id)) {
        if (notify) player.notify('~r~Мероприятие более не доступно');
        return false;
      }

      if (item.user2) {
        if (notify) player.notify('~r~Мероприятие уже запущено');
        return false;
      }

      let target = item.user;

      if (!target || !mp.players.exists(target)) {
        if (notify) player.notify('~r~Организатор недоступен');
        activeDuels.delete(id);
        return false;
      }

      if (player.dist(target.position) > 100) {
        if (notify) player.notify('~r~Организатор уехал слишком далеко');
        activeDuels.delete(id);
        return false;
      }

      if (_user.user.isInMp(player)) {
        if (notify) player.notify('~r~Вы не можете принимать участие в мероприятии, поскольку уже зарегистрированы в другом мероприятии');
        return false;
      }

      return true;
    };

    if (!check()) return;
    m.newItem({
      name: `#${id}. ${item.user_name}`,
      more: item.cost ? `${_methods.methods.numberFormat(item.cost)}~g~$` : "Тренировка",
      desc: `Пароль: ${item.password ? "Указан" : "Не указан"}`,
      onpress: async () => {
        if (!check(true)) return;
        if (_user.user.getCashMoney(player) < item.cost) return player.notify('~r~У вас недостаточно средств чтобы принять участие в данном мероприятии');
        let havePass = !item.password ? true : (await _menu.menu.input(player, "Введите пароль от лобби", "", 15, "password")) == item.password;
        if (!havePass) return player.notify(`~r~Пароль указан не верно`);
        if (!check(true)) return;
        if (item.cost > 0) _user.user.removeCashMoney(player, item.cost);
        let target = item.user;
        item.user2 = player;
        player.duelLobby = id;
        let pos_all = (0, _methods2.randomArrayEl)(list);
        let pos1 = pos_all[0];
        let pos2 = pos_all[1];

        _user.user.disableAllControls(player, true);

        _user.user.disableAllControls(target, true);

        _user.user.unEquipAllWeapons(player);

        _user.user.unEquipAllWeapons(target);

        _user.user.showLoadDisplay(player);

        _user.user.showLoadDisplay(target);

        _inventory.inventory.closeInventory(player);

        _inventory.inventory.closeInventory(target);

        target.armour = 0;
        player.armour = 0;
        player.call('anticheat:inmp', [true]);
        target.call('anticheat:inmp', [true]);
        setTimeout(() => {
          if (!mp.players.exists(player) || !mp.players.exists(target)) return;

          _user.user.teleport(player, pos1[0], pos1[1], pos1[2], pos1[3], target.id + 1);

          _user.user.teleport(target, pos2[0], pos2[1], pos2[2], pos2[3], target.id + 1);

          setTimeout(() => {
            if (!mp.players.exists(player) || !mp.players.exists(target)) return;

            _user.user.giveWeaponByHash(player, "WEAPON_REVOLVER", 50, true);

            _user.user.giveWeaponByHash(target, "WEAPON_REVOLVER", 50, true);

            player.notify('Приготовьтесь');
            target.notify('Приготовьтесь');

            _user.user.healProtect(player);

            _user.user.healProtect(target);

            player.health = 100;
            target.health = 100;
            setTimeout(() => {
              if (!mp.players.exists(player) || !mp.players.exists(target)) return;

              _user.user.disableAllControls(player, false);

              _user.user.disableAllControls(target, false);

              player.notify('~g~Начали');
              target.notify('~g~Начали');
            }, _methods.methods.getRandomInt(2000, 5000));
          }, 1000);
        }, 2000);
      }
    });
  });
  m.open();
};

exports.openDuelMenu = openDuelMenu;

_methods.methods.createDynamicCheckpoint(registerPos, "Нажмие ~g~E~w~ чтобы открыть центр регистрации дуэлей", player => {
  openDuelMenu(player);
});

_methods.methods.createDynamicCheckpoint(registerPos2, "Нажмие ~g~E~w~ чтобы открыть центр регистрации дуэлей", player => {
  openDuelMenu(player);
});

const exitFromDuel = looser => {
  let id = looser.duelLobby;
  let data = activeDuels.get(id);
  if (!data) return;
  let user1 = data.user;
  let user2 = data.user2;
  if (mp.players.exists(user1) && user1) user1.duelLobby = null;
  if (mp.players.exists(user2) && user2) user2.duelLobby = null;
  if (!data.user2) return activeDuels.delete(id);
  let winner = user1.id == looser.id ? user2 : user1;
  if (mp.players.exists(looser)) looser.notify('~r~Вы проиграли');

  if (winner) {
    winner.notify('~g~Вы победили');
    if (data.cost > 0) _user.user.addCashMoney(winner, data.cost * 1.9);
  }

  if (mp.players.exists(user1) && mp.players.exists(user2) && data.cost > 0) {
    _methods.methods.saveLog('Duel', `${_user.user.getRpName(user1)} [${_user.user.getId(user1)}] VS ${_user.user.getRpName(user2)} [${_user.user.getId(user2)}]. Winner - ${_user.user.getId(winner)}. Bit: ${data.cost}, Reward: ${data.cost * 1.9}`);
  }

  activeDuels.delete(id);
  let targets = [user1, user2];
  targets.map(item => {
    if (!mp.players.exists(item)) return;

    _user.user.clearWeapons(item);

    _user.user.disableAllControls(item, true);

    setTimeout(() => {
      if (!mp.players.exists(item)) return;

      _user.user.healProtect(item);

      if (item.health == 0) {
        item.spawn(item.position);
      } else {
        item.health = 100;
      }

      setTimeout(() => {
        if (!mp.players.exists(item)) return;

        _user.user.disableAllControls(item, false);

        item.call('anticheat:inmp', [false]);

        _user.user.teleport(item, exitPos.x, exitPos.y, exitPos.z, 0, 0);
      }, 1000);
    }, 1000);
  });
};

exports.exitFromDuel = exitFromDuel;
mp.events.add('playerQuit', player => {
  if (!player.duelLobby) return;
  exitFromDuel(player);
});
mp.events.add('playerDeath', player => {
  if (!player.duelLobby) return;
  exitFromDuel(player);
});
},{"./methods":"qXSp","./menu":"Aiz7","../user":"QE3B","../../util/methods":"Z5QB","../inventory":"m5ow","../config/adminsTp":"gqKn"}],"PrTm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadAuction = void 0;

var _methods = require("./methods");

var _menu = require("./menu");

var _user = require("../user");

var _auctionSettingsEntity = require("./entity/auctionSettingsEntity");

var _auctionEntity = require("./entity/auctionEntity");

var _sequelize = require("sequelize");

var _user2 = require("./entity/user");

let currentMaxBet = 0;
let currentMaxBetUser = 0;
const betStep = 100000;
let betList = new Map();
let auctionSettings = {
  enable: false,
  endday: 0,
  endhour: 0,
  endminute: 0,
  canaddtime: false,
  lot: ""
};
const pos = new mp.Vector3(478.74, -107.67, 62.16);
const blip = mp.blips.new(76, pos, {
  dimension: 0,
  name: "Аукцион",
  scale: 0.5,
  color: 8,
  shortRange: true
});

function saveConfig() {
  _auctionSettingsEntity.auctionSettingsEntity.update({
    data: JSON.stringify(auctionSettings)
  }, {
    where: {}
  });
}

let canmakebet = false;
let endtext = ``;
let nowdate = new Date();
let enddate = new Date();
let timeleft = 0;
setInterval(() => {
  nowdate = new Date();
  enddate = new Date();
  enddate.setDate(auctionSettings.endday);
  enddate.setHours(auctionSettings.endhour);
  enddate.setMinutes(auctionSettings.endminute);
  timeleft = (enddate - nowdate) / 1000;
  endtext = ``;
  if (timeleft > 0) endtext = _methods.methods.secondsToTime(timeleft);
  if (!auctionSettings.enable) endtext = ``;
  canmakebet = !!endtext;
  auctionSettings.enable = !!endtext;
}, 60000);

_methods.methods.createDynamicCheckpoint(pos, "Нажмите ~g~Е~s~ чтобы сделать ставку", player => {
  let m = _menu.menu.new(player, "Аукцион");

  m.newItem({
    name: "Сделать ставку",
    more: canmakebet ? "~g~Доступно" : "~r~Недоступно",
    onpress: () => {
      if (!canmakebet) return;

      _menu.menu.input(player, "Введите сумму (" + currentMaxBet + "$ - " + _user.user.getCashMoney(player) + "$)", (currentMaxBet + betStep).toString(), 11, "int").then(bets => {
        if (!canmakebet) return player.notify("~r~Ставки больше не принимаются");

        let bet = _methods.methods.parseInt(bets);

        if (isNaN(bet) || bet < 0 || bet > 9999999999) return player.notify("~r~Новая ставка указанна не верно");
        if (_user.user.getCashMoney(player) < bet) return player.notify("~r~У вас недостаточно средств для данной ставки");
        if (currentMaxBet + betStep > bet) return player.notify("~r~Ставка должна быть не менее " + (currentMaxBet + betStep) + "$");

        if (betList.has(_user.user.getId(player))) {
          player.notify("~g~Вы обновили свою ставку");

          _auctionEntity.auctionEntity.update({
            sum: bet
          }, {
            where: {
              user: _user.user.getId(player)
            }
          });
        } else {
          player.notify("~g~Вы сделали ставку");

          _auctionEntity.auctionEntity.create({
            sum: bet,
            user: _user.user.getId(player)
          });
        }

        betList.set(_user.user.getId(player), bet);

        if (timeleft < 60 * 5 && auctionSettings.canaddtime) {
          auctionSettings.endminute += 5;

          if (auctionSettings.endminute > 59) {
            auctionSettings.endminute = auctionSettings.endminute - 59;
            auctionSettings.endhour++;

            if (auctionSettings.endhour > 23) {
              auctionSettings.endhour = auctionSettings.endhour - 23;
              auctionSettings.endday++;
            }
          }
        }

        saveConfig();

        if (currentMaxBetUser != _user.user.getId(player)) {
          let target = _user.user.getPlayerById(currentMaxBetUser);

          if (target) target.notify("~r~Вашу ставку перебили");
        }

        currentMaxBet = bet;
        currentMaxBetUser = _user.user.getId(player);
        m.close();
      });
    }
  });

  if (currentMaxBet > 0) {
    m.newItem({
      name: "Лот",
      more: auctionSettings.lot
    });
    m.newItem({
      name: "Активная",
      desc: "Текущая максимальная ставка",
      more: `ID: ${currentMaxBetUser} | ${currentMaxBet}$`
    });
  }

  if (endtext) {
    m.newItem({
      name: "До конца аукциона",
      more: endtext
    });
  }

  if (_user.user.isAdminNow(player, 6)) {
    m.newItem({
      name: "Очистить ставки",
      onpress: () => {
        _user.user.accept(player, "Вы уверены?").then(status => {
          if (!status) return;

          _auctionEntity.auctionEntity.destroy({
            where: {
              id: {
                [_sequelize.Op.gte]: 0
              }
            }
          }).then(() => {
            betList = new Map();
            currentMaxBet = 0;
            currentMaxBetUser = 0;
            player.notify("~g~Успешно");
          });
        });
      }
    });
    m.newItem({
      name: auctionSettings.enable ? "Выключить приём ставок" : "Включить приём ставок",
      onpress: () => {
        _user.user.accept(player, "Вы уверены?").then(status => {
          if (!status) return;
          auctionSettings.enable = !auctionSettings.enable;
          player.notify("~g~Успешно");
          saveConfig();
        });
      }
    });
    m.newItem({
      name: !auctionSettings.canaddtime ? "Включить автопродление" : "Выключить автопродление",
      desc: "При ставке за 5 минут до конца - время продлится",
      onpress: () => {
        _user.user.accept(player, "Вы уверены?").then(status => {
          if (!status) return;
          auctionSettings.canaddtime = !auctionSettings.canaddtime;
          player.notify("~g~Успешно");
          saveConfig();
        });
      }
    });
    m.newItem({
      name: "Финальный день аукциона",
      type: "range",
      rangeselect: [1, 30],
      listSelected: auctionSettings.endday - 1,
      onchange: value => {
        auctionSettings.endday = value + 1;
        saveConfig();
      }
    });
    m.newItem({
      name: "Финальный час аукциона",
      type: "range",
      rangeselect: [0, 23],
      listSelected: auctionSettings.endhour,
      onchange: value => {
        auctionSettings.endhour = value;
        saveConfig();
      }
    });
    m.newItem({
      name: "Финальная минута аукциона",
      type: "range",
      rangeselect: [0, 59],
      listSelected: auctionSettings.endminute,
      onchange: value => {
        auctionSettings.endminute = value;
        saveConfig();
      }
    });
    m.newItem({
      name: "Сменить название лота",
      onpress: () => {
        _menu.menu.input(player, "Введите название", auctionSettings.lot, 50).then(st => {
          if (!st) return;
          auctionSettings.lot = st;
          saveConfig();
        });
      }
    });
  }

  m.open();
}, 4);

setInterval(() => {
  let target = _user.user.getPlayerById(currentMaxBetUser);

  if (target) {
    if (_user.user.getCashMoney(target) < currentMaxBet) {
      _auctionEntity.auctionEntity.destroy({
        where: {
          user: currentMaxBetUser
        }
      }).then(() => {
        target.notify("~r~Ваша ставка была удалена в связи с тем что у вас нет наличных средств указанных в ставке");
        return loadAuction();
      });
    }
  } else if (currentMaxBetUser != 0) {
    _user2.userEntity.findOne({
      where: {
        id: currentMaxBetUser
      }
    }).then(usr => {
      if (!usr) {
        _auctionEntity.auctionEntity.destroy({
          where: {
            user: currentMaxBetUser
          }
        }).then(() => {
          loadAuction();
        });
      } else {
        if (usr.money < currentMaxBet) {
          _auctionEntity.auctionEntity.destroy({
            where: {
              user: currentMaxBetUser
            }
          }).then(() => {
            loadAuction();
          });
        }
      }
    });
  }
}, 60000);

const loadAuction = () => {
  _auctionEntity.auctionEntity.findAll().then(res => {
    betList = new Map();
    currentMaxBet = 0;
    currentMaxBetUser = 0;
    res.forEach(item => {
      betList.set(item.user, item.sum);
      if (item.sum > currentMaxBet) currentMaxBet = item.sum, currentMaxBetUser = item.user;
    });
  });

  _auctionSettingsEntity.auctionSettingsEntity.findOne().then(res => {
    if (!res) return _auctionSettingsEntity.auctionSettingsEntity.create({
      data: JSON.stringify(auctionSettings)
    });
    auctionSettings = JSON.parse(res.data);
  });
};

exports.loadAuction = loadAuction;
},{"./methods":"qXSp","./menu":"Aiz7","../user":"QE3B","./entity/auctionSettingsEntity":"s1kb","./entity/auctionEntity":"fQUH","./entity/user":"xF3w"}],"dPRi":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mysql = exports.loadIntervalsMySQL = void 0;

var _user = require("../user");

var _methods = require("./methods");

var _business = require("../business");

var _vehicles = require("../vehicles");

var _coffer = require("../coffer");

var _apartments = require("../apartments");

var _condo = require("../condo");

var _houses = require("../houses");

var _stock = require("../stock");

var _sequelize = require("./sequelize");

var _inventory = require("../inventory");

var _admin = require("./admin");

var _inventory2 = require("./entity/inventory");

var _data = require("./data");

var _carsModel = require("./entity/carsModel");

var _eventToServer = require("./entity/eventToServer");

var _user2 = require("./entity/user");

var _monitoringEntity = require("./entity/monitoringEntity");

var _userDatingEntity = require("./entity/userDatingEntity");

var _sequelize2 = require("sequelize");

var _logPlayerEntity = require("./entity/logPlayerEntity");

let isConnected = true;
console.log('[DATABASE] Mysql connect to db.');

function promisePool() {
  return new Promise((resolve, reject) => {
    _user2.userEntity.findOne().then(() => {
      resolve(true);
    });
  });
}

let mysql = {
  likefilter: search => {
    return _sequelize.sequelize.escape('%' + search + '%');
  },
  test: false,
  stressTest: async function () {
    const start = new Date().getTime();
    let i = 0;

    while (i < 20) {
      await promisePool();
      i++;
    }

    const end = new Date().getTime();

    _methods.methods.debug(`executeQuery LOL: ${end - start}ms`);
  },
  isConnected: function () {
    return isConnected;
  },
  getTime: function () {
    let dateTime = new Date();
    return `${_methods.methods.digitFormat(dateTime.getHours())}:${_methods.methods.digitFormat(dateTime.getMinutes())}:${_methods.methods.digitFormat(dateTime.getSeconds())}`;
  },
  getParam: function () {
    let dateTime = new Date();
    return `${_methods.methods.digitFormat(dateTime.getHours())}:${_methods.methods.digitFormat(dateTime.getMinutes())}:${_methods.methods.digitFormat(dateTime.getSeconds())}`;
  },
  executeQuerys: function (query, values, callback) {
    return;
  }
};
exports.mysql = mysql;

const loadIntervalsMySQL = () => {
  setInterval(() => {
    _monitoringEntity.monitoringEntity.update({
      online: mp.players.length,
      last_update: Math.round(new Date().getTime() / 1000)
    }, {
      where: {
        id: 1
      }
    });
  }, 30 * 1000);
  setInterval(() => {
    _eventToServer.eventToServerEntity.findAll().then(rows => {
      rows.forEach(async function (item) {
        try {
          let id = item.id;
          let param = JSON.parse(_methods.methods.replaceAll(item['params'].toString(), '&quot;', '"'));
          let type = item.type;
          let itemId = item.item_id;
          let action = item.action;

          if (type == 5) {
            if (action == "rebootServer") {
              (0, _admin.restartProtocol)(param.time, param.reason);
              item.destroy();
            }
          } else if (type == 4) {
            switch (action) {
              case 'ChangeNick':
                {
                  const userid = itemId;
                  let nick = param['nick'];

                  _user.user.log(userid, "ChangeNick", 'Сменил игровое имя на ' + nick);

                  let data = {};

                  let target = _user.user.getPlayerById(userid);

                  if (target) {
                    _user.user.set(target, 'rp_name', nick);

                    _user.user.set(target, 'wanted_level', 0);

                    _user.user.set(target, 'wanted_reason', 0);

                    data.business_id = _user.user.get(target, 'business_id');
                    data.cars = await _user.user.myVehicles(target);
                    data.apart = _user.user.get(target, 'apartment_id');
                    data.house = _user.user.get(target, 'id_house');
                    data.condo = _user.user.get(target, 'condo_id');
                    data.stock = _user.user.get(target, 'stock_id');
                  } else {
                    let qd = await _user2.userEntity.findOne({
                      where: {
                        id: userid
                      }
                    });
                    if (!qd) return;
                    let vehs = await _carsModel.carsEntity.findAll({
                      where: {
                        id_user: userid
                      }
                    });
                    vehs.forEach(veh => {
                      _vehicles.vehicles.updateOwnerInfo(veh.id, userid, nick);
                    });
                    data.business_id = qd.business_id;
                    data.apart = qd.apartment_id;
                    data.house = qd.id_house;
                    data.condo = qd.condo_id;
                    data.stock = qd.stock_id;
                  }

                  _user2.userEntity.update({
                    rp_name: nick,
                    wanted_level: 0,
                    wanted_reason: ''
                  }, {
                    where: {
                      id: userid
                    }
                  });

                  if (data.business_id) {
                    _business.business.updateOwnerInfo(data.business_id, userid, nick);
                  }

                  if (data.cars) {
                    data.cars.forEach(car => {
                      _vehicles.vehicles.updateOwnerInfo(car, userid, nick);
                    });
                  }

                  if (data.apart) {
                    if (_apartments.apartments.getOwnerId(data.apart) == userid) _apartments.apartments.updateOwnerInfo(data.apart, userid, nick);
                  }

                  if (data.condo) {
                    if (_condo.condo.getOwnerId(data.condo) == userid) _condo.condo.updateOwnerInfo(data.condo, userid, nick);
                  }

                  if (data.house) {
                    if (_houses.houses.getOwnerId(data.house) == userid) _houses.houses.updateOwnerInfo(data.house, userid, nick);
                  }

                  if (data.stock) {
                    _stock.stock.updateOwnerInfo(data.stock, userid, nick);
                  }

                  if (target) _user.user.updateClientCache(target);

                  _userDatingEntity.userDatingEntity.destroy({
                    where: {
                      [_sequelize2.Op.or]: [{
                        user_owner: userid
                      }, {
                        user_id: userid
                      }]
                    }
                  });

                  _logPlayerEntity.logPlayerEntity.destroy({
                    where: {
                      user_id: userid
                    }
                  });

                  item.destroy();
                  break;
                }

              case 'ChangeId':
                {
                  const userid = itemId;
                  let newID = param['id'];

                  _user.user.log(userid, "ChangeNick", 'Сменил игровой ID на ' + newID);

                  let data = {};

                  let target = _user.user.getPlayerById(userid);

                  let qd = await _user2.userEntity.findOne({
                    where: {
                      id: userid
                    }
                  });
                  if (!qd) return;

                  if (target) {
                    return;
                  } else {
                    let vehs = await _carsModel.carsEntity.findAll({
                      where: {
                        id_user: userid
                      }
                    });
                    vehs.forEach(veh => {
                      _vehicles.vehicles.updateOwnerInfo(veh.id, newID, qd.rp_name);
                    });
                    data.business_id = qd.business_id;
                    data.apart = qd.apartment_id;
                    data.house = qd.id_house;
                    data.condo = qd.condo_id;
                    data.stock = qd.stock_id;
                  }

                  _user2.userEntity.update({
                    id: newID,
                    wanted_level: 0,
                    wanted_reason: ''
                  }, {
                    where: {
                      id: userid
                    }
                  });

                  if (data.business_id) {
                    _business.business.updateOwnerInfo(data.business_id, newID, qd.rp_name);
                  }

                  if (data.cars) {
                    data.cars.forEach(car => {
                      _vehicles.vehicles.updateOwnerInfo(car, newID, qd.rp_name);
                    });
                  }

                  if (data.apart) {
                    if (_apartments.apartments.getOwnerId(data.apart) == userid) _apartments.apartments.updateOwnerInfo(data.apart, newID, qd.rp_name);
                  }

                  if (data.condo) {
                    if (_condo.condo.getOwnerId(data.condo) == userid) _condo.condo.updateOwnerInfo(data.condo, newID, qd.rp_name);
                  }

                  if (data.house) {
                    if (_houses.houses.getOwnerId(data.house) == userid) _houses.houses.updateOwnerInfo(data.house, newID, qd.rp_name);
                  }

                  if (data.stock) {
                    _stock.stock.updateOwnerInfo(data.stock, newID, qd.rp_name);
                  }

                  _inventory.inventory.getItemListData(1, userid).map(item => {
                    _inventory.inventory.updateItemOwnerSystem(item.id, 1, newID);
                  });

                  _userDatingEntity.userDatingEntity.destroy({
                    where: {
                      [_sequelize2.Op.or]: [{
                        user_owner: userid
                      }, {
                        user_id: userid
                      }]
                    }
                  });

                  _logPlayerEntity.logPlayerEntity.destroy({
                    where: {
                      user_id: userid
                    }
                  });

                  item.destroy();
                  break;
                }

              case 'BuyItem':
                {
                  const userid = itemId;
                  let item_id = param['item_id'];
                  let number = param['number'];
                  let key_id = param['key_id'];
                  let prefix = param['prefix'];

                  _inventory.inventory.createItem(item_id, 1, 1, userid, prefix, number, key_id);

                  item.destroy();
                  break;
                }

              case 'DeleteItem':
                {
                  _inventory.inventory.deleteItem(itemId);

                  item.destroy();
                  break;
                }

              case 'AddUserItem':
                {
                  let userid = param['userid'];

                  _inventory.inventory.createItem(itemId, 1, 1, userid);

                  item.destroy();
                  break;
                }

              case 'AppartFridge':
                {
                  _houses.houses.setChestLevel(itemId, 2);

                  item.destroy();
                  break;
                }

              case 'VehicleNumber':
                {
                  const vehid = itemId;
                  let oldNumber = param['oldNumber'];
                  let newNumber = param['newNumber'];
                  let veh = mp.vehicles.toArray().find(veh => veh.numberPlate == oldNumber);
                  if (veh) veh.numberPlate = newNumber;

                  let oldOwnerId = _methods.methods.convertNumberToHash(oldNumber);

                  let newOwnerId = _methods.methods.convertNumberToHash(newNumber);

                  _inventory.inventory.allItems().filter(item => item.owner_type == 8 && item.owner_id == oldOwnerId).map(item => {
                    _inventory.inventory.updateItemOwnerSystem(item.id, 8, newOwnerId);
                  });

                  _data.Container.Set(_vehicles.vehicleOffset + vehid, 'number', newNumber);

                  _carsModel.carsEntity.update({
                    number: newNumber
                  }, {
                    where: {
                      id: vehid
                    }
                  });

                  _vehicles.vehicles.save(vehid);

                  item.destroy();
                  break;
                }

              case 'DeleteAllItemId':
                {
                  _inventory2.inventoryEntity.destroy({
                    where: {
                      item_id: itemId
                    }
                  });

                  item.destroy();

                  _inventory.inventory.allItems().filter(itm => itm.item_id == itemId).map(itm => {
                    if (itm.owner_type == 0) {
                      _inventory.inventory.deleteDropItem(itm.id);
                    }

                    _inventory.itemsDB.delete(itm.id);
                  });

                  break;
                }
            }
          } else if (type == 3) {
            switch (action) {
              case 'AddMoney':
                let bId = _methods.methods.parseInt(param['bId']);

                let money = _methods.methods.parseInt(param['money']);

                if (bId == 0) break;
                if (money == 0) break;

                _business.business.addMoney(bId, money);

                item.destroy();
                break;
            }
          } else if (type == 1) {
            let player = _user.user.getPlayerById(itemId);

            switch (action) {
              case 'KickAll':
                {
                  item.destroy();
                  mp.players.forEach(function (p) {
                    _user.user.kick(p, 'Рестарт');
                  });
                  break;
                }

              case 'Kick':
                {
                  item.destroy();
                  if (player == null) break;

                  _user.user.kick(player, param['msg']);

                  break;
                }

              case 'AddMoney':
                {
                  if (player == null) break;

                  let money = _methods.methods.parseInt(param['money']);

                  if (money == 0) break;

                  _user.user.addCashMoney(player, money);

                  player.notify(`~g~Вам поступило на счёт ~s~$${_methods.methods.numberFormat(money)}`);
                  item.destroy();
                  break;
                }

              case 'BuyVehicle':
                {
                  item.destroy();

                  let slot = _methods.methods.parseInt(param['slot']);

                  let vId = _methods.methods.parseInt(param['vId']);

                  let price = _methods.methods.parseInt(param['price']);

                  if (player == null) {
                    for (let i = 0; i <= 1000; i++) {
                      if (_user.user.hasById(i, 'id') && _user.user.getById(i, 'id') == itemId) {
                        _user.user.setById(i, 'money_bank', _methods.methods.parseInt(_user.user.getById(i, 'money_bank') - price));

                        _user.user.setById(i, 'car_id' + slot, vId);
                      }
                    }

                    break;
                  }

                  try {
                    if (_user.user.getBankMoney(player) < price) {
                      _carsModel.carsEntity.update({
                        user_name: '',
                        id_user: 0
                      }, {
                        where: {
                          id: vId
                        }
                      });

                      player.notify('~r~У Вас недостаточно средств');
                      return;
                    }

                    _vehicles.vehicles.loadPlayerVehicleById(player, vId);

                    _user.user.set(player, 'car_id' + slot, vId);

                    _coffer.coffer.addMoney(price);

                    _user.user.removeBankMoney(player, price);

                    _user.user.saveAccount(player);

                    player.notify(`~g~Поздравляем с покупкой транспорта`);

                    _methods.methods.saveLog('BuyVehicle', `ID: ${vId}, BUY NAME: ${_user.user.getRpName(player)}, PRICE: ${price}`);
                  } catch (e) {
                    _methods.methods.debug(e);
                  }

                  break;
                }

              case 'SellMotorVehicle':
                {
                  let uName = param['uName'];

                  let uId = _methods.methods.parseInt(param['uId']);

                  let vId = _methods.methods.parseInt(param['vId']);

                  let price = _methods.methods.parseInt(param['price']);

                  if (uId == 0) break;
                  if (vId == 0) break;
                  if (price == 0) break;

                  _vehicles.vehicles.updateOwnerInfo(vId, uId, uName);

                  _methods.methods.saveLog('BuyMotorCar', `ID: ${vId}, SELL USER: ${itemId}, BUY USER: ${uId}, PRICE: ${price}`);

                  if (player == null) {
                    let money = _methods.methods.parseInt(price * 0.95);

                    let data = await _user.user.getUserDataFromDB(itemId);
                    data.money_bank += money;
                    if (data.car_id1 == vId) data.car_id1 = 0;
                    if (data.car_id2 == vId) data.car_id2 = 0;
                    if (data.car_id3 == vId) data.car_id3 = 0;
                    if (data.car_id4 == vId) data.car_id4 = 0;
                    if (data.car_id5 == vId) data.car_id5 = 0;
                    if (data.car_id6 == vId) data.car_id6 = 0;
                    if (data.car_id7 == vId) data.car_id7 = 0;
                    if (data.car_id8 == vId) data.car_id8 = 0;
                    data.save();

                    for (let i = 0; i <= 1000; i++) {
                      if (_user.user.hasById(i, 'id') && _user.user.getById(i, 'id') == itemId) {
                        _user.user.setById(i, 'money_bank', _methods.methods.parseInt(_user.user.getById(i, 'money_bank') + price));

                        for (let j = 1; j < 9; j++) {
                          if (_methods.methods.parseInt(_user.user.getById(i, 'car_id' + j)) == vId) _user.user.setById(i, 'car_id' + j, 0);
                        }
                      }
                    }
                  } else {
                    for (let i = 1; i < 9; i++) {
                      if (_methods.methods.parseInt(_user.user.get(player, 'car_id' + i)) == vId) _user.user.set(player, 'car_id' + i, 0);
                    }

                    let money = _methods.methods.parseInt(price * 0.95);

                    let data = await _user.user.getUserDataFromDB(itemId);
                    data.money_bank += money;
                    if (data.car_id1 == vId) data.car_id1 = 0;
                    if (data.car_id2 == vId) data.car_id2 = 0;
                    if (data.car_id3 == vId) data.car_id3 = 0;
                    if (data.car_id4 == vId) data.car_id4 = 0;
                    if (data.car_id5 == vId) data.car_id5 = 0;
                    if (data.car_id6 == vId) data.car_id6 = 0;
                    if (data.car_id7 == vId) data.car_id7 = 0;
                    if (data.car_id8 == vId) data.car_id8 = 0;
                    data.save();

                    _user.user.addMoney(player, money);

                    _user.user.saveAccount(player);

                    _user.user.addHistory(player, 3, 'Продал транспорт на PDM. Цена: $' + _methods.methods.numberFormat(money));

                    player.notify(`~b~Вы продали свой автомобиль по цене:~s~ $${_methods.methods.numberFormat(money)}`);
                  }

                  _business.business.addMoney(86, _methods.methods.parseInt(price * 0.05));

                  item.destroy();
                  break;
                }
            }
          }
        } catch (e) {
          _methods.methods.debug(e);
        }
      });
    });
  }, 5000);
};

exports.loadIntervalsMySQL = loadIntervalsMySQL;
},{"../user":"QE3B","./methods":"qXSp","../business":"y5vZ","../vehicles":"pYYy","../coffer":"sKID","../apartments":"qIZj","../condo":"YoDO","../houses":"buna","../stock":"MdNj","./sequelize":"ylsz","../inventory":"m5ow","./admin":"s4Xg","./entity/inventory":"bqqA","./data":"Edcz","./entity/carsModel":"pv82","./entity/eventToServer":"Pudb","./entity/user":"xF3w","./entity/monitoringEntity":"hvel","./entity/userDatingEntity":"Soei","./entity/logPlayerEntity":"JLGa"}],"BpKR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timer = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _data = require("./data");

var _bank = require("../business/bank");

var _inventory = require("../inventory");

setTimeout(() => {
  _methods.methods.updateLoto();
}, 120000);
let timer = {
  loadAll: function () {
    timer.min30Timer();
    timer.sec10Timer();
    timer.secTimer();
    timer.min1Timer();
    timer.hour8Timer();
    timer.hour5Timer();
  },
  min30Timer: function () {
    _methods.methods.updateLoto();

    _inventory.inventory.deleteWorldItems();

    for (let i = 1; i < 1300; i++) {
      try {
        if (_data.Container.Has(i, 'isMail')) _data.Container.Reset(i, 'isMail');
        if (_data.Container.Has(i, 'isMail2')) _data.Container.Reset(i, 'isMail2');
      } catch (e) {
        _methods.methods.debug(e);
      }
    }

    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p)) {
        if (_user.user.has(p, 'grabVeh')) _user.user.reset(p, 'grabVeh');
      }
    });
    setTimeout(timer.min30Timer, 1000 * 60 * 30);
  },
  hour5Timer: function () {
    for (let i = 0; i < 200; i++) {
      try {
        if (_data.Container.Has(i, 'isGrabGunShop')) _data.Container.Reset(i, 'isGrabGunShop');
      } catch (e) {
        _methods.methods.debug(e);
      }
    }

    setTimeout(timer.hour5Timer, 1000 * 60 * 60 * 5);
  },
  hour8Timer: function () {
    _bank.bank.loadGrabCounts();

    setTimeout(timer.hour8Timer, 1000 * 60 * 60 * 8);
  },
  sec10Timer: function () {
    let time = _methods.methods.getTimeStamp();

    mp.players.forEach(function (p) {
      if (_user.user.isLogin(p)) {
        let userId = _user.user.getId(p);

        _user.user.setById(userId, 'pos_x', p.position.x);

        _user.user.setById(userId, 'pos_y', p.position.y);

        _user.user.setById(userId, 'pos_z', p.position.z);

        _user.user.setById(userId, 'rot', p.heading);

        _user.user.setById(userId, 'hp', p.health);

        _user.user.setById(userId, 'dimension', p.dimension);

        _user.user.setById(userId, 'timestamp', time);
      }
    });
    setTimeout(timer.sec10Timer, 1000 * 10);
  },
  secTimer: function () {},
  min1Timer: () => {}
};
exports.timer = timer;
},{"./methods":"qXSp","../user":"QE3B","./data":"Edcz","../business/bank":"MvN0","../inventory":"m5ow"}],"o1IG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.object = void 0;

var _methods = require("../modules/methods");

let count = 0;
let object = {
  create: function (hash, pos, rotation, dynamic, placeOnGround) {
    mp.objects.new(hash, pos, {
      rotation: rotation,
      alpha: 255,
      dimension: -1
    });
    count++;
  },
  loadAll: function () {
    _methods.methods.debug('dispatcher.loadAll');

    _methods.methods.debug("Spawned object", count);
  }
};
exports.object = object;
},{"../modules/methods":"qXSp"}],"n1sh":[function(require,module,exports) {
"use strict";

var _chat = require("./chat");

var _user = require("../user");

var _methods = require("./methods");

var _menu = require("./menu");

var _vehicles = require("../vehicles");

var _methods2 = require("../../util/methods");

var _coffer = require("../coffer");

var _newrage = require("../../util/newrage");

var _raceCfgEntity = require("./entity/raceCfgEntity");

var _sequelizeTypescript = require("sequelize-typescript");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let costBase = [];

for (let id = 500; id < 2000; id += 100) costBase.push(id);

let timerAuto = 120;
let raceCheckPosition = new mp.Vector3(-265.9540710449219, -2021.696533203125, 29.145593643188477);
let testSpeed = false;
setInterval(() => {
  if (!_chat.enabledSystem.race) return;
  getRandomRaceConfig().then(config => {
    generateRaceLobby(config, 15, (0, _methods2.randomArrayEl)(costBase));
  });
}, timerAuto * 60000);

function getRacePoint(player, size) {
  let res = player.vehicle ? _objectSpread(_objectSpread({}, player.vehicle.position), {}, {
    h: player.vehicle.heading,
    r: size
  }) : _objectSpread(_objectSpread({}, player.position), {}, {
    h: player.heading,
    r: size
  });
  res.z -= 1;
  res.x = _methods.methods.parseFloat(res.x.toFixed(2));
  res.y = _methods.methods.parseFloat(res.y.toFixed(2));
  res.z = _methods.methods.parseFloat(res.z.toFixed(2));
  res.h = _methods.methods.parseFloat(res.h.toFixed(2));
  return res;
}

let carSeries = {
  "Super": ["xa21", "autarch", "zentorno", "nero2", "visione", "t20"],
  "Super2": ["krieger", "emerus", "Vagner", "Thrax"],
  "Boats": ["dinghy", "jetmax", "speeder"],
  "Commercials": ["benson", "phantom", "packer", "mule"],
  "Compacts": ["blista", "brioso", "issi2", "panto", "rhapsody"],
  "Coupes": ["Zion", "Felon", "F620", "exemplar", "sentinel"],
  "Motorcycles": ["akuma", "hakuchou", "bati", "double", "carbonrs", "ruffian"],
  "Muscle": ["dominator3", "gauntlet4", "clique", "dominator", "impaler"],
  "Off-Road": ["trophytruck", "bifta", "brawler", "caracara2", "dune"],
  "SUVs": ["baller3", "huntley", "xls", "rocoto"],
  "Sportcars": ["italigto", "neo", "comet5", "paragon", "jugular"],
  "Sportcars2": ["massacro2", "neon", "schlagen", "drafter", "jester"],
  "Sportcars3": ["schafter3", "elegy", "jester3", "bestiagts", "elegy2", "sultanrs"]
};
let lobbyList = new Map();

class RaceLobby {
  constructor(data, time, cost, checkPlayersCount = false) {
    this.endtimer = false;
    this.checkPlayersCount = checkPlayersCount;
    this.finished = [];
    this.racersPosition = new Map();
    this.laps = _methods.methods.getRandomInt(2, 4);

    const dim = _methods.methods.newDimention();

    this.id = dim;
    this.players = [];
    this.stage = "waiting";
    this.checkpoints = data.checkpoints;
    this.spawns = data.spawns;
    this.name = data.name;
    this.vehiclesSeries = data.vehiclesSeries;
    this.cost = cost;
    this.bank = 0;
    this.vehicles = new Map();
    lobbyList.set(this.id, this);
    if (!checkPlayersCount) _chat.chat.sendToAll('Система', `!{${_chat.chat.clBlue}} Зарегистрировано гоночное мероприятие !{${_chat.chat.clWhite}}${data.name}!{${_chat.chat.clBlue}}, Серия транспорта: !{${_chat.chat.clWhite}}${data.vehiclesSeries}!{${_chat.chat.clBlue}}. Начало через !{${_chat.chat.clWhite}}${time} мин!{${_chat.chat.clBlue}}. Лимит участников: !{${_chat.chat.clWhite}}${data.spawns.length}!{${_chat.chat.clBlue}} Ожидаем каждого у центра регистрации`, _chat.chat.clBlue), _methods.methods.setBlipAlert(blip, 120000);
    ;
    this.time = time + 1;
    setTimeout(() => {
      this.timerController();
    }, 1000);
    let int = setInterval(() => {
      if (this.stage == "ended") {
        if (lobbyList.has(this.id)) lobbyList.delete(this.id);
        return clearInterval(int);
      } else if (this.stage == "race") {
        if (this.finished.length >= this.players.length / 2) {
          this.endtimerFunc();
        }
      }

      this.checkPlayers();
    }, 15000);
  }

  timerController() {
    this.checkPlayers();
    this.time--;
    this.players.forEach(targetid => {
      let target = mp.players.at(targetid);
      target.notify(this.time > 1 ? `До начала гонки осталось ${this.time} минут` : "Начало гонки через минуту");
    });

    if (this.time == 0) {
      this.stage = "selectCar";
      this.selectCarLobby();
      setTimeout(() => {
        this.players.forEach(targetid => {
          if (!this.vehicles.has(targetid)) this.kickPlayer(targetid, "Не успел выбрать ТС");
        });
        if (!testSpeed && this.players.length < 3 && !this.checkPlayersCount) return this.noForStart();

        _coffer.coffer.removeMoney(this.bank * 0.15);

        this.bank -= this.bank * 0.15;
        setTimeout(() => {
          this.checkPlayers();
          this.startRace();
        }, 1000);
      }, 20000);
      return;
    }

    setTimeout(() => {
      this.timerController();
    }, testSpeed ? 5000 : 60000);
  }

  noForStart() {
    this.checkPlayers();
    this.endLobby("Количество участников недостаточно для начала");
  }

  getSpawn(playerid) {
    let id = this.players.indexOf(playerid);
    return this.spawns[id] ? this.spawns[id] : null;
  }

  setPlayerOnStartPoint(playerid) {
    if (this.players.indexOf(playerid) == -1) return this.kickPlayer(playerid, "Покинул лобби");
    if (!mp.players.exists(playerid)) return this.kickPlayer(playerid, "Покинул сервер");
    if (!this.vehicles.has(playerid)) return this.kickPlayer(playerid, "Потерял своё ТС");
    let player = mp.players.at(playerid);
    let vehicle = this.vehicles.get(playerid);
    if (!mp.vehicles.exists(vehicle)) return this.kickPlayer(playerid, "Потерял своё ТС");
    let spawn = this.getSpawn(playerid);
    if (!spawn) return this.kickPlayer(playerid, "Не нашлось точки спавна");

    _user.user.disableAllControls(player, true);

    _user.user.showLoadDisplay(player);

    _methods.methods.teleportVehicle(vehicle, new mp.Vector3(spawn.x, spawn.y, spawn.z), spawn.h, this.id);

    player.alpha = 0;
    vehicle.alpha = 0;
    vehicle.repair();

    if (!player.vehicle) {
      player.dimension = this.id;

      _user.user.teleportProtect(player);

      player.position = new mp.Vector3(vehicle.position.x, vehicle.position.y, vehicle.position.z - 5);
      setTimeout(() => {
        if (mp.players.exists(player)) player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
      }, 100);
    }

    let vInfo = _methods.methods.getVehicleInfo(vehicle.model);

    let ursIds = [];
    this.players.forEach(usr => {
      ursIds.push(usr);
    });
    player.call('startRace', [this.timeStart, JSON.stringify(this.checkpoints), this.laps, JSON.stringify(ursIds), vInfo.display_name == "Unknown" ? vehicle.model : vInfo.display_name, JSON.stringify(spawn), vehicle.id]);
    player.setVariable("raceCheckpoint", 0);
    player.setVariable("raceLobby", this.id);
    setTimeout(() => {
      if (mp.players.exists(player)) {
        _user.user.hideLoadDisplay(player);

        let vehicle = this.vehicles.get(playerid);

        _menu.menu.close(player);

        if (vehicle) vehicle.repair();

        _user.user.disableAllControls(player, false);

        if (vehicle && mp.vehicles.exists(vehicle)) _vehicles.vehicles.engineStatus(player, vehicle, true);
        setTimeout(() => {
          let vehicle = this.vehicles.get(playerid);
          if (vehicle && mp.vehicles.exists(vehicle)) _vehicles.vehicles.engineStatus(player, vehicle, true), vehicle.repair();
          setTimeout(() => {
            let vehicle = this.vehicles.get(playerid);
            if (vehicle && mp.vehicles.exists(vehicle)) _vehicles.vehicles.engineStatus(player, vehicle, true), vehicle.repair();
            if (_user.user.isLogin(player)) player.alpha = 255;
            if (vehicle && mp.vehicles.exists(vehicle)) vehicle.alpha = 255;
          }, 1000);
        }, 1000);
      } else {
        this.kickPlayer(playerid, "Покинул сервер");
      }
    }, 2000);
    this.racersPosition.set(player.id, 0);
  }

  async startRace() {
    this.stage = "race";
    this.timeStart = _methods.methods.getRandomInt(3, 6);
    this.players.forEach(playerid => {
      let player = mp.players.at(playerid);

      _user.user.showLoadDisplay(player);

      _user.user.disableAllControls(player, true);
    });
    await (0, _methods2.wait)(600);
    await this.checkPlayers();
    this.players.forEach(playerid => {
      this.setPlayerOnStartPoint(playerid);
    });
  }

  checkPlayers() {
    this.players.forEach(targetid => {
      let target = mp.players.at(targetid);
      if (!target) this.kickPlayer(targetid, "Покинул сервер");else if (!mp.players.exists(target)) this.kickPlayer(targetid, "Покинул сервер");else if (target.health == 0) this.kickPlayer(targetid, "Погиб");
    });
  }

  kickPlayer(targetid, notify = null, nice = false) {
    setTimeout(() => {
      if (this.vehicles.has(targetid)) {
        if (mp.vehicles.exists(this.vehicles.get(targetid))) this.vehicles.get(targetid).destroy();
        this.vehicles.delete(targetid);
      }
    }, !nice ? 1 : 1500);

    if (this.players.indexOf(targetid) > -1) {
      let target = mp.players.at(targetid);
      if (!mp.players.exists(target)) target = null;

      if (target) {
        _menu.menu.close(target);

        target.call("race:kick");
        target.raceLobby = null;
      }

      if ((this.stage == "waiting" || this.stage == "selectCar") && target) {
        this.bank -= this.cost;
      }

      setTimeout(() => {
        if (!mp.players.exists(target)) return;

        if (this.stage != "waiting" && this.stage != "selectCar") {
          if (target.health == 0) target.spawn(raceCheckPosition), setTimeout(() => {
            if (!mp.players.exists(target)) return;
            if (target.health == 0) target.spawn(raceCheckPosition);
          }, 1500);else _user.user.teleport(target, raceCheckPosition.x, raceCheckPosition.y, raceCheckPosition.z);
          target.dimension = 0;
          setTimeout(() => {
            if (!mp.players.exists(target)) return;

            _user.user.hideLoadDisplay(target);

            _user.user.disableAllControls(target, false);
          }, 500);
        }
      }, !nice ? 1 : 1500);

      if (notify && target) {
        this.notifyLobby(_user.user.getRpName(target) + (nice ? " " : " покинул лобби: ") + notify);
      }

      this.players.splice(this.players.indexOf(targetid), 1);
    }
  }

  register(player) {
    if (this.stage != "waiting") return player.notify("Время регистрации вышло");
    if (this.players.indexOf(player.id) > -1) return player.notify("Вы уже зарегистрированы");
    if (player.raceLobby) return player.notify("Вы уже зарегистрированы в другой гонке");
    if (this.players.length == this.spawns.length) return player.notify("Количество участников гонки уже достигло максимума");
    if (!_user.user.get(player, "b_lic")) return player.notify("Требуется наличие удостоверения категории B");
    player.raceLobby = this.id;
    this.bank += this.cost * 1.2;
    this.players.push(player.id);

    _menu.menu.close(player);

    player.notify("Вы зарегистрированы, ожидайте окончания регистрации");
  }

  selectCarLobby(player, reload = false) {
    if (this.stage == "race") return;
    this.checkPlayers();
    if (!testSpeed && this.players.length < 4 && !this.checkPlayersCount) return this.noForStart();

    if (!player) {
      this.players.forEach(targetid => {
        let target = mp.players.at(targetid);
        this.selectCarLobby(target, reload);
      });
      return;
    }

    if (!this.vehicles.get(player.id) && reload) return;

    let m = _menu.menu.new(player, this.name, "Выбор ТС");

    m.exitProtect = true;

    if (this.vehicles.get(player.id)) {
      this.players.forEach(targetid => {
        let target = mp.players.at(targetid);
        m.newItem({
          name: _user.user.getRpName(target),
          more: this.vehicles.get(target.id) ? "~g~" + _methods.methods.getVehicleInfo(this.vehicles.get(target.id).model).display_name : "~r~Выбирает ТС"
        });
      });
    } else {
      for (let name in carSeries) {
        if (name == this.vehiclesSeries) {
          let cars = carSeries[name];
          cars.map(car => {
            let carConf = _methods.methods.getVehicleInfo(car);

            m.newItem({
              name: carConf.display_name == "Unknown" ? car : carConf.display_name,
              onpress: () => {
                m.close();
                if (this.vehicles.get(player.id)) return player.notify("Вы уже выбрали ТС");
                let spawn = this.getSpawn(player.id);
                if (!spawn) return this.kickPlayer(player.id, "Что то пошло не так");
                let vehicle = mp.vehicles.new(car, new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5), {
                  dimension: this.id,
                  locked: true,
                  engine: false,
                  heading: spawn.h
                });
                vehicle.setVariable("raceVehicle", true);
                vehicle.setVariable('fuel', carConf.fuel_full);

                _methods.methods.teleportVehicle(vehicle, new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5), spawn.h, this.id);

                vehicle.numberPlate = _user.user.getId(player).toString();
                vehicle.setColorRGB(_methods.methods.getRandomInt(0, 255), _methods.methods.getRandomInt(0, 255), _methods.methods.getRandomInt(0, 255), _methods.methods.getRandomInt(0, 255), _methods.methods.getRandomInt(0, 255), _methods.methods.getRandomInt(0, 255));
                vehicle.numberPlate = _user.user.getId(player).toString();
                this.vehicles.set(player.id, vehicle);
                this.selectCarLobby(null, true);
              }
            });
          });
        }
      }
    }

    m.open();
  }

  endLobby(reason) {
    this.stage = "ended";
    this.players.forEach(targetid => {
      this.kickPlayer(targetid, reason);
    });
    setTimeout(() => {
      if (lobbyList.has(this.id)) lobbyList.delete(this.id);
    }, 1000);
  }

  notifyLobby(reason) {
    this.players.forEach(targetid => {
      let target = mp.players.at(targetid);
      if (mp.players.exists(target)) target.notify(reason);
    });
  }

  endtimerFunc() {
    if (this.endtimer) return;
    this.endtimer = true;
    this.notifyLobby("Гонка будет завершена через 3 минуты");
    setTimeout(() => {
      this.notifyLobby("Гонка будет завершена через 2 минуты");
      setTimeout(() => {
        this.notifyLobby("Гонка будет завершена через 1 минуту");
        setTimeout(() => {
          this.endLobby("Гонка завершена");
        }, 60000);
      }, 60000);
    }, 60000);
  }

}

function generateRaceLobby(data, time, cost, checkPlayersCount = false) {
  return new RaceLobby(data, time, cost, checkPlayersCount);
}

function getRandomRaceConfig() {
  return new Promise(resolve => {
    _raceCfgEntity.raceCfgEntity.findOne({
      where: {
        ready: 1
      },
      order: _sequelizeTypescript.Sequelize.fn('RAND')
    }).then(item => {
      resolve(_objectSpread(_objectSpread({}, dbtodata(item)), {}, {
        checkpoints: JSON.parse(item.checkpoints),
        spawns: JSON.parse(item.spawns)
      }));
    });
  });
}

_chat.chat.registerCommand('racegen', (player, timeTxt, costTxt, jn) => {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) != 6) return;

  let time = _methods.methods.parseInt(timeTxt);

  let cost = _methods.methods.parseInt(costTxt);

  if (isNaN(time) || time < 0) return player.notify("Время указано не верно");
  if (isNaN(cost) || cost < 1) return player.notify("Цена указана не верно");
  getRandomRaceConfig().then(config => {
    let lobby = generateRaceLobby(config, time, cost, jn == "1");
    if (jn == "1") lobby.register(player);
  });
});

let editMapTrash = new Map();
let checkType = {
  pitstop: 45,
  finish: 4,
  check: 2,
  start: 4
};

const dbtodata = entry => {
  return {
    id: entry.id,
    checkpoints: JSON.parse(entry.checkpoints),
    spawns: JSON.parse(entry.spawns),
    vehiclesSeries: entry.vehiclesSeries,
    name: entry.name,
    ready: entry.ready
  };
};

function rebuildEditData(player, map) {
  let pt = ["spawns", "checkpoints"];
  if (!editMapTrash.has(_user.user.getId(player))) editMapTrash.set(_user.user.getId(player), []);
  let container = editMapTrash.get(_user.user.getId(player));
  container.forEach((itm, index) => {
    if (itm && itm.type != "vehicle") itm.destroy(), container.splice(index, 1);
  });
  pt.forEach((ch, idx) => {
    map[idx == 0 ? "spawns" : "checkpoints"].forEach((itm, index) => {
      if (idx == 0) {
        container.push(mp.checkpoints.new(checkType.start, new mp.Vector3(itm.x, itm.y, itm.z), 2, {
          direction: new mp.Vector3(0, 0, 75),
          color: [255, 0, 0, 255],
          visible: true,
          dimension: player.dimension
        }));
        container.push(mp.labels.new("Точка спавна №" + (index + 1), new mp.Vector3(itm.x, itm.y, itm.z + 1.5), {
          los: true,
          font: 1,
          drawDistance: 20,
          dimension: player.dimension
        }));
      } else {
        container.push(mp.checkpoints.new(index + 1 == map.checkpoints.length ? checkType.finish : checkType.check, new mp.Vector3(itm.x, itm.y, itm.z), itm.r + 0.0001, {
          direction: index + 1 == map.checkpoints.length ? new mp.Vector3(0, 0, 75) : new mp.Vector3(map.checkpoints[index + 1].x, map.checkpoints[index + 1].y, map.checkpoints[index + 1].z + 0.5),
          color: [255, 255, 0, 60],
          visible: true,
          dimension: player.dimension
        }));
        container.push(mp.labels.new("Чекпоинт №" + (index + 1), new mp.Vector3(itm.x, itm.y, itm.z + 1.5), {
          los: true,
          font: 1,
          drawDistance: 20,
          dimension: player.dimension
        }));
      }
    });
  });
  return container;
}

function editMap(player, map) {
  let pt = ["spawns", "checkpoints"];

  if (player.dimension == 0) {
    player.dimension = _methods.methods.newDimention();
  }

  let container = rebuildEditData(player, map);

  let m = _menu.menu.new(player, map.name, "Действия");

  m.exitProtect = true;

  m.onclose = () => {
    _user.user.accept(player, "Сохранить изменения?").then(status => {
      if (status) saveMap(map), player.notify("Карта сохранена");
      container.forEach(itm => {
        itm.destroy();
      });
      editMapTrash.delete(_user.user.getId(player));
      player.dimension = 0;
    });
  };

  m.newItem({
    name: "Готовность карты",
    type: "list",
    list: ["~r~Не готова", "~g~Готова"],
    listSelected: map.ready,
    desc: "Готовые карты будут автоматически создаватся системой",
    onchange: value => {
      if (_user.user.getAdminLevel(player) < 4) return player.notify("Вы не можете включать карту"), map.ready = 0;
      map.ready = value;
      if (map.spawns.length < 15) return player.notify("Количество точек спавна должно быть не менее 15, гонка не будет в ротации"), map.ready = 0;
      if (map.checkpoints.length < 10) return player.notify("Количество чекпоинтов должно быть не менее 10, гонка не будет в ротации"), map.ready = 0;
    }
  });
  m.newItem({
    name: "Тест гонки",
    desc: "~r~Внимание!!! ~w~Рекомендуем сохранить перед тестированием",
    onpress: () => {
      let players = [];

      const testMenu = () => {
        let test = _menu.menu.new(player, "Тест гонок", "Список");

        test.newItem({
          name: "Добавить участника",
          onpress: () => {
            _menu.menu.input(player, "Введите ID").then(ids => {
              let target = _user.user.getPlayerById(_methods.methods.parseInt(ids));

              if (!target) return player.notify("~r~Игрок не обнаружен");
              if (target.raceLobby) return player.notify("~r~Игрок уже зарегистрирован в другой гонке");
              if (target.health == 0) return player.notify("~r~Игрок мёртв");
              if (!_user.user.get(target, "b_lic")) return player.notify("У игрока нет удостоверения категории B");

              _user.user.accept(target, "Принять участие в гонке?").then(status => {
                if (status) {
                  player.notify("~g~" + _user.user.getRpName(target) + " принял запрос");
                  players.push(target);
                  testMenu();
                } else {
                  player.notify("~r~" + _user.user.getRpName(target) + " отклонил запрос");
                }
              });
            });
          }
        });
        players.forEach(target => {
          if (mp.players.exists(target)) {
            test.newItem({
              name: _user.user.getRpName(target)
            });
          }
        });
        test.newItem({
          name: "Начать гонку",
          onpress: () => {
            container.forEach(itm => {
              itm.destroy();
            });
            editMapTrash.delete(_user.user.getId(player));
            let race = new RaceLobby(map, 0, 10, true);
            race.register(player);
            players.forEach(target => {
              if (mp.players.exists(target)) race.register(target);
            });
          }
        });
        test.open();
      };

      testMenu();
    }
  });
  m.newItem({
    name: "Сохранить",
    onpress: () => {
      saveMap(map);
      player.notify("Карта сохранена");
    }
  });
  m.newItem({
    name: "Спавн ТС",
    onpress: () => {
      _menu.menu.input(player, "Введите название").then(name => {
        if (!name) return;

        _vehicles.vehicles.spawnCar2(vehicle => {
          if (!vehicle) return player.notify("Некорректная модель");
          vehicle.dimension = player.dimension;
          player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
          container.push(vehicle);
          vehicle.numberPlate = _user.user.getId(player).toString();

          _vehicles.vehicles.setFuelFull(vehicle);
        }, player.position, player.heading, name);
      });
    }
  });
  m.newItem({
    name: "Переименовать",
    onpress: () => {
      _menu.menu.input(player, "Введите название").then(name => {
        if (!name) return;

        _raceCfgEntity.raceCfgEntity.count({
          where: {
            name
          }
        }).then(res => {
          if (res > 0) return player.notify("Карта с таким названием уже есть");
          map.name = name;
          saveMap(map);
          player.notify("Карта сохранена");
        });
      });
    }
  });
  let seriesNames = [];

  for (let name in carSeries) seriesNames.push(name);

  m.newItem({
    name: "Тип ТС",
    type: "list",
    listSelected: seriesNames.indexOf(map.vehiclesSeries),
    list: seriesNames,
    onchange: (_, item) => {
      map.vehiclesSeries = item.listSelectedName;
    }
  });
  pt.forEach((ch, idx) => {
    m.newItem({
      name: idx ? "Чекпоинты" : "Стартовые точки",
      onpress: () => {
        const checks = () => {
          container = rebuildEditData(player, map);
          if (!map.size) map.size = 5;
          let sz = [];

          for (let i = 1; i < 50; i++) sz.push(i.toString());

          let submenu = _menu.menu.new(player, idx ? "Чекпоинты" : "Стартовые точки", "Список");

          submenu.onclose = () => {
            editMap(player, map);
          };

          submenu.newItem({
            name: "Назад",
            onpress: () => {
              editMap(player, map);
            }
          });
          submenu.newItem({
            name: "Размер маркера",
            type: "list",
            list: sz,
            listSelected: map.size - 1,
            onchange: val => {
              map.size = val + 1;
            }
          });
          submenu.newItem({
            name: "Новая точка",
            onpress: () => {
              map[idx == 0 ? "spawns" : "checkpoints"].push(getRacePoint(player, map.size));
              checks();
            }
          });
          map[idx == 0 ? "spawns" : "checkpoints"].forEach((itm, index) => {
            submenu.newItem({
              name: (idx ? "Чекпоинт #" : "Стартовая точка #") + (index + 1),
              type: "list",
              list: ["Переместится", "Удалить", "Переместить"],
              onpress: item => {
                if (item.listSelected == 0) {
                  _user.user.teleportVeh(player, itm.x, itm.y, itm.z + 0.5);
                } else if (item.listSelected == 1) {
                  map[idx == 0 ? "spawns" : "checkpoints"].splice(index, 1);
                  player.notify("Точка удалена");
                  checks();
                } else {
                  itm = getRacePoint(player, map.size);
                  player.notify("Точка перемещена");
                  checks();
                }
              }
            });
          });
          submenu.open(2);
        };

        checks();
      }
    });
  });
  m.open();
}

function saveMap(map) {
  map.checkpoints.forEach(res => {
    res.x = _methods.methods.parseFloat(res.x.toFixed(2));
    res.y = _methods.methods.parseFloat(res.y.toFixed(2));
    res.z = _methods.methods.parseFloat(res.z.toFixed(2));
    res.h = _methods.methods.parseFloat(res.h.toFixed(2));
  });
  map.spawns.forEach(res => {
    res.x = _methods.methods.parseFloat(res.x.toFixed(2));
    res.y = _methods.methods.parseFloat(res.y.toFixed(2));
    res.z = _methods.methods.parseFloat(res.z.toFixed(2));
    res.h = _methods.methods.parseFloat(res.h.toFixed(2));
  });

  _raceCfgEntity.raceCfgEntity.update({
    name: map.name,
    checkpoints: JSON.stringify(map.checkpoints),
    vehiclesSeries: map.vehiclesSeries,
    spawns: JSON.stringify(map.spawns),
    ready: map.ready
  }, {
    where: {
      id: map.id
    }
  });
}

_chat.chat.registerCommand('raceedit', player => {
  if (!_user.user.isAdminNow(player) || _user.user.getAdminLevel(player) < 2) return;
  mapCat(player);
});

function mapCat(player) {
  _raceCfgEntity.raceCfgEntity.findAll({
    where: {
      user: _user.user.getId(player)
    }
  }).then(data => {
    let m = _menu.menu.new(player, "Гонки", "Список моих карт");

    m.newItem({
      name: "Новая трасса",
      onpress: () => {
        _menu.menu.input(player, "Введите название").then(name => {
          if (!name) return;

          _raceCfgEntity.raceCfgEntity.count({
            where: {
              name
            }
          }).then(res => {
            if (res > 0) return player.notify("Карта с таким названием уже есть");

            _raceCfgEntity.raceCfgEntity.create({
              user: _user.user.getId(player),
              name: name
            }).then(() => {
              mapCat(player);
              return player.notify("Карта добавлена в ваш каталог. Теперь вам нужно её настроить");
            });
          });
        });
      }
    });
    data.forEach(map => {
      m.newItem({
        name: map.name,
        onpress: () => editMap(player, _objectSpread(_objectSpread({}, dbtodata(map)), {}, {
          checkpoints: JSON.parse(map.checkpoints),
          spawns: JSON.parse(map.spawns)
        }))
      });
    });
    m.open();
  });
}

mp.events.add("race:dead", player => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.checkPlayers();
});
mp.events.add("playerDeath", player => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.kickPlayer(player.id, "Погиб");
});
mp.events.add("playerDamage", player => {
  if (player.health != 0) return;
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.kickPlayer(player.id, "Погиб");
});
mp.events.add("playerQuit", player => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.kickPlayer(player.id, "Покинул сервер");
});
mp.events.add("race:cheat", player => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.kickPlayer(player.id, "Фальш старт");
});
mp.events.add("race:checkpoint", (player, lap, checkpoint) => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.checkPlayers();
  lobby.racersPosition.set(player.id, checkpoint);
  lobby.players.forEach(targetid => {
    let target = mp.players.at(targetid);
    if (target != player) target.call("race:checkpointData", [player.id, lap, checkpoint]);
  });
});
mp.events.add("race:respawn", (player, x, y, z, h) => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.checkPlayers();
  let vehicle = lobby.vehicles.get(player.id);
  if (!mp.vehicles.exists(vehicle)) return lobby.kickPlayer(player.id, "ТС пропало");
  if (!vehicle) return;

  _user.user.showLoadDisplay(player);

  player.dimension = lobby.id;
  vehicle.dimension = lobby.id;
  setTimeout(() => {
    vehicle = lobby.vehicles.get(player.id);
    if (!vehicle) return;

    _user.user.healProtect(player);

    player.health = 100;

    _methods.methods.teleportVehicle(vehicle, new mp.Vector3(x, y, z));

    setTimeout(() => {
      _user.user.teleportProtect(player);

      player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
      vehicle.repair();
      setTimeout(() => {
        _user.user.hideLoadDisplay(player);

        player.call("race:vehground");
      }, 100);
    }, 100);
  }, 3000);
});
mp.events.add("race:finished", player => {
  if (!player.raceLobby) return;
  let lobby = lobbyList.get(player.raceLobby);
  if (!lobby) return;
  lobby.checkPlayers();
  const position = lobby.finished.push(player);
  let multipler = [0.45, 0.25, 0.15];

  if (position < 4) {
    setTimeout(() => {
      if (mp.players.exists(player)) _user.user.addCashMoney(player, _methods.methods.parseInt(lobby.bank * multipler[position - 1]));
    }, 3000);
  }

  lobby.kickPlayer(player.id, `Финишировал: ${position} место`, true);

  if (position == 3) {
    lobby.endtimerFunc();
  }
});
const blip = mp.blips.new(315, raceCheckPosition, {
  dimension: 0,
  name: "Гонки",
  scale: 0.5,
  color: 8,
  shortRange: true
});

_methods.methods.createDynamicCheckpoint(raceCheckPosition, "Нажмите ~g~Е~s~ чтобы открыть меню лобби", player => {
  let m = _menu.menu.new(player, "", "Текущие мероприятия");

  m.sprite = "racelobby";
  m.newItem({
    name: "Название"
  });
  let haveActive = false;
  lobbyList.forEach(lobby => {
    if (lobby.stage == "waiting") {
      haveActive = true;
      m.newItem({
        name: lobby.name,
        onpress: () => lobby.register(player)
      });
    }
  });
  if (!haveActive) m.newItem({
    name: "На данный момент нет активных гонок"
  });
  m.open();
}, 5, 0);
},{"./chat":"e1Zb","../user":"QE3B","./methods":"qXSp","./menu":"Aiz7","../vehicles":"pYYy","../../util/methods":"Z5QB","../coffer":"sKID","../../util/newrage":"mgLX","./entity/raceCfgEntity":"ZMA7"}],"zg97":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _menu = require("../modules/menu");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _chat = require("../modules/chat");

_chat.chat.registerCommand('camera', player => {
  if (!_user.user.isAdminNow(player)) return player.notify("Доступно только администраторам");
  cameraManager(player);
});

function cameraManager(player, settings) {
  if (!settings && !player.cameraManagerSettings) settings = {
    pos1: null,
    pos2: null,
    rot1: null,
    rot2: null,
    mode: "Обычный",
    target: null,
    fov: 50,
    duration: 5
  };else if (player.cameraManagerSettings && !settings) settings = player.cameraManagerSettings;
  player.cameraManagerSettings = settings;

  let m = _menu.menu.new(player, "Камера", "Настройки");

  let mods = ["Обычный", "Смотреть на ТС", "Смотреть на игрока"];
  if (mods.indexOf(settings.mode) == -1) settings.mode = "Обычный";
  m.exitProtect = true;
  m.newItem({
    name: "Режим работы",
    type: "list",
    list: mods,
    listSelected: mods.indexOf(settings.mode),
    onchange: (value, item) => {
      player.notify("Режим камеры изменён на: " + item.listSelectedName);
      settings.mode = item.listSelectedName;

      if (settings.target) {
        settings.target = null;
        player.notify("Цель слежки была сброшена");
      }

      cameraManager(player, settings);
    }
  });
  m.newItem({
    name: "~r~Сбросить настройки",
    onpress: () => {
      _user.user.accept(player, "Сбросить настройки?").then(status => {
        if (!status) return cameraManager(player, settings);
        settings = null;
        player.cameraManagerSettings = null;
        player.notify("Настройки сброшены");
        cameraManager(player, settings);
      });
    }
  });
  m.newItem({
    name: "~b~Начальная камера"
  });
  m.newItem({
    name: "Позиция",
    desc: "Координата, где вы сейчас",
    more: settings.pos1 ? "~g~Установлена" : "~r~Не установлена",
    onpress: () => {
      if (settings.pos1) {
        _user.user.accept(player, "Сбросить точку?").then(status => {
          if (!status) return cameraManager(player, settings);
          settings.pos1 = null;
          player.notify("Положение камеры сброшено");
          cameraManager(player, settings);
        });
      } else {
        settings.pos1 = new mp.Vector3(player.position.x, player.position.y, player.position.z);
        player.notify("Положение камеры установлено");
        cameraManager(player, settings);
      }
    }
  });
  m.newItem({
    name: "Направление",
    more: settings.rot1 ? "~g~Установлено" : "~r~Не установлено",
    onpress: () => {
      if (settings.rot1) {
        _user.user.accept(player, "Сбросить точку?").then(status => {
          if (!status) return cameraManager(player, settings);
          settings.rot1 = null;
          player.notify("Положение камеры сброшено");
          cameraManager(player, settings);
        });
      } else {
        mp.events.callClient(player, "camera:rotationCamera").then(pos => {
          settings.rot1 = new mp.Vector3(pos.x, pos.y, pos.z);
          player.notify("Положение камеры установлено");
          cameraManager(player, settings);
        });
      }
    }
  });
  m.newItem({
    name: "~b~Конечная камера"
  });
  m.newItem({
    name: "Позиция",
    desc: "Координата, где вы сейчас",
    more: settings.pos2 ? "~g~Установлена" : "~r~Не установлена",
    onpress: () => {
      if (settings.pos2) {
        _user.user.accept(player, "Сбросить точку?").then(status => {
          if (!status) return cameraManager(player, settings);
          settings.pos2 = null;
          player.notify("Положение камеры сброшено");
          cameraManager(player, settings);
        });
      } else {
        settings.pos2 = new mp.Vector3(player.position.x, player.position.y, player.position.z);
        player.notify("Положение камеры установлено");
        cameraManager(player, settings);
      }
    }
  });
  m.newItem({
    name: "Направление",
    more: settings.rot2 ? "~g~Установлено" : "~r~Не установлено",
    onpress: () => {
      if (settings.rot2) {
        _user.user.accept(player, "Сбросить точку?").then(status => {
          if (!status) return cameraManager(player, settings);
          settings.rot2 = null;
          player.notify("Положение камеры сброшено");
          cameraManager(player, settings);
        });
      } else {
        mp.events.callClient(player, "camera:rotationCamera").then(pos => {
          settings.rot2 = new mp.Vector3(pos.x, pos.y, pos.z);
          player.notify("Положение камеры установлено");
          cameraManager(player, settings);
        });
      }
    }
  });
  m.newItem({
    name: "Цель слежки",
    more: settings.target ? "~g~Установлено" : "~r~Не установлено",
    onpress: () => {
      if (settings.mode == "Смотреть на ТС") {
        _menu.menu.input(player, "Введите номерной знак ТС").then(plate => {
          let veh = _vehicles.vehicles.findVehicleByNumber(plate);

          if (!veh) return player.notify("ТС не обнаружен");
          settings.target = veh.id;
          cameraManager(player, settings);
        });
      } else if (settings.mode == "Смотреть на игрока") {
        _menu.menu.input(player, "Введите ID игрока").then(ids => {
          let target = _user.user.getPlayerById(_methods.methods.parseInt(ids));

          if (!target) return player.notify("Игрок не обнаружен");
          settings.target = target.id;
          cameraManager(player, settings);
        });
      } else {
        settings.target = null;
        player.notify("В данном режиме нет цели слежки, параметр сброшен");
        cameraManager(player, settings);
      }
    }
  });
  m.newItem({
    name: "Fov",
    more: settings.fov,
    onpress: () => {
      _menu.menu.input(player, "Введите fov").then(ids => {
        settings.fov = _methods.methods.parseInt(ids);
        cameraManager(player, settings);
      });
    }
  });
  m.newItem({
    name: "Длительность",
    more: settings.duration,
    desc: "В секундах",
    onpress: () => {
      _menu.menu.input(player, "Введите время в секундах").then(ids => {
        settings.duration = _methods.methods.parseInt(ids);
        cameraManager(player, settings);
      });
    }
  });
  m.newItem({
    name: "Включить камеру",
    onpress: () => {
      if (!settings.pos1 && !settings.pos2) return player.notify("Настройте камеру");
      m.close();
      mp.events.callClient(player, "camera:start", settings).then(() => {
        cameraManager(player, settings);
      });
    }
  });
  m.open();
}
},{"../modules/methods":"qXSp","../modules/menu":"Aiz7","../user":"QE3B","../vehicles":"pYYy","../modules/chat":"e1Zb"}],"kFYX":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _methods2 = require("../../util/methods");

var _user = require("../user");

const moneyAdd = 3;
const prisonMinus = 10;
let points = [{
  x: 1667.7022705078125,
  y: 2512.77734375,
  z: 45.564849853515625,
  h: 111.30290222167969
}, {
  x: 1666.84423828125,
  y: 2511.0625,
  z: 45.564849853515625,
  h: 18.863767623901367
}, {
  x: 1662.6588134765625,
  y: 2504.283447265625,
  z: 45.564849853515625,
  h: 132.16677856445312
}, {
  x: 1660.7115478515625,
  y: 2504.41796875,
  z: 45.564849853515625,
  h: 225.70050048828125
}, {
  x: 1660.933837890625,
  y: 2502.329833984375,
  z: 45.564849853515625,
  h: 313.5859375
}, {
  x: 1657.09521484375,
  y: 2508.19921875,
  z: 45.564849853515625,
  h: 344.06561279296875
}, {
  x: 1657.46533203125,
  y: 2514.520751953125,
  z: 45.564849853515625,
  h: 358.3420104980469
}, {
  x: 1658.8133544921875,
  y: 2515.80908203125,
  z: 45.564849853515625,
  h: 82.8930892944336
}, {
  x: 1657.4698486328125,
  y: 2517.48876953125,
  z: 45.564849853515625,
  h: 174.1128387451172
}, {
  x: 1658.1241455078125,
  y: 2521.0009765625,
  z: 45.564849853515625,
  h: 339.6223449707031
}, {
  x: 1665.3275146484375,
  y: 2522.23193359375,
  z: 45.564849853515625,
  h: 219.3057861328125
}, {
  x: 1663.404541015625,
  y: 2521.697265625,
  z: 45.564849853515625,
  h: 212.1258544921875
}, {
  x: 1664.7523193359375,
  y: 2527.291259765625,
  z: 45.56486129760742,
  h: 319.0823669433594
}, {
  x: 1667.544189453125,
  y: 2530.50927734375,
  z: 45.56486129760742,
  h: 208.15676879882812
}, {
  x: 1668.724853515625,
  y: 2533.615966796875,
  z: 45.56486129760742,
  h: 328.682861328125
}, {
  x: 1676.2261962890625,
  y: 2532.616943359375,
  z: 45.56486129760742,
  h: 233.70193481445312
}, {
  x: 1683.5537109375,
  y: 2532.177490234375,
  z: 45.56486129760742,
  h: 278.6702575683594
}, {
  x: 1682.710205078125,
  y: 2544.1181640625,
  z: 45.56486129760742,
  h: 351.1258544921875
}, {
  x: 1681.994873046875,
  y: 2546.90673828125,
  z: 45.56486129760742,
  h: 23.521282196044922
}, {
  x: 1682.9901123046875,
  y: 2554.48291015625,
  z: 45.56486129760742,
  h: 34.78386306762695
}, {
  x: 1695.3524169921875,
  y: 2521.91064453125,
  z: 45.56488800048828,
  h: 290.0921325683594
}, {
  x: 1699.92919921875,
  y: 2517.427734375,
  z: 45.56488800048828,
  h: 355.9129638671875
}, {
  x: 1681.209716796875,
  y: 2479.452880859375,
  z: 45.56491470336914,
  h: 144.16732788085938
}, {
  x: 1683.466064453125,
  y: 2484.93603515625,
  z: 45.56491470336914,
  h: 339.9389953613281
}, {
  x: 1686.203369140625,
  y: 2487.2529296875,
  z: 45.56491470336914,
  h: 83.67436218261719
}];
let marker1 = null;
let marker2 = null;

function reCreatePoint() {
  createMarker1();
  createMarker2();
}

reCreatePoint();

function createMarker1() {
  let pos = (0, _methods2.randomArrayEl)(points.filter(item => !item.use));
  pos.use = true;
  marker1 = _methods.methods.createEnterCheckpoint(new mp.Vector3(pos.x, pos.y, pos.z - 1), player => {
    if (_user.user.get(player, 'jail_time') <= 0) return player.notify("~r~Данная работа предназначена для заключённых");
    if (_user.user.get(player, 'jail_time') <= 80) return player.notify("~r~Ваш срок заключения подходит к концу");
    if (player.vehicle) return player.notify("~r~В машине работать?");
    marker1.delete();
    marker1 = null;

    _user.user.playScenario(player, "WORLD_HUMAN_GARDENER_PLANT", pos.x, pos.y, pos.z, pos.h, false);

    setTimeout(() => {
      setTimeout(() => {
        createMarker1();
        pos.use = false;
      }, 10000);
      if (!mp.players.exists(player)) return;

      _user.user.isPlayTask(player).then(status => {
        if (!status || player.dist(pos) > 3) return player.notify("~r~Вы прекратили работу");

        _user.user.stopScenario(player);

        _user.user.addCashMoney(player, moneyAdd);

        player.notify('~g~Вы заработали $' + moneyAdd + ', срок заключения сокращён на ' + prisonMinus + ' секунд');

        let time = _user.user.get(player, 'jail_time');

        let rtime = time - prisonMinus;

        _user.user.set(player, 'jail_time', rtime > 2 ? rtime : 2);

        player.call('server:jailworktime', [rtime]);
      });
    }, 30000);
  }, 1, 0, [33, 150, 243, 100]);
}

function createMarker2() {
  let pos = (0, _methods2.randomArrayEl)(points.filter(item => !item.use));
  pos.use = true;
  marker2 = _methods.methods.createEnterCheckpoint(new mp.Vector3(pos.x, pos.y, pos.z - 1), player => {
    if (_user.user.get(player, 'jail_time') <= 0) return player.notify("~r~Данная работа предназначена для заключённых");
    if (_user.user.get(player, 'jail_time') <= 80) return player.notify("~r~Ваш срок заключения подходит к концу");
    if (player.vehicle) return player.notify("~r~В машине работать?");
    marker2.delete();
    marker2 = null;

    _user.user.playScenario(player, "WORLD_HUMAN_GARDENER_PLANT", pos.x, pos.y, pos.z, pos.h, false);

    setTimeout(() => {
      setTimeout(() => {
        createMarker2();
        pos.use = false;
      }, 10000);
      if (!mp.players.exists(player)) return;

      _user.user.isPlayTask(player).then(status => {
        if (!status || player.dist(pos) > 3) return player.notify("~r~Вы прекратили работу");

        _user.user.stopScenario(player);

        _user.user.addCashMoney(player, moneyAdd);

        player.notify('~g~Вы заработали $' + moneyAdd + ', срок заключения сокращён на ' + prisonMinus + ' секунд');

        let time = _user.user.get(player, 'jail_time');

        let rtime = time - prisonMinus;

        _user.user.set(player, 'jail_time', rtime > 2 ? rtime : 2);

        player.call('server:jailworktime', [rtime]);
      });
    }, 30000);
  }, 1, 0, [33, 150, 243, 100]);
}
},{"../modules/methods":"qXSp","../../util/methods":"Z5QB","../user":"QE3B"}],"O54w":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _menu = require("../modules/menu");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _methods2 = require("../../util/methods");

var _coffer = require("../coffer");

var _business = require("../business");

var _chat = require("../modules/chat");

var _level = require("../../util/level");

var _newrage = require("../../util/newrage");

let gr6basePosition = new mp.Vector3(484.50, -1095.77, 28.2);
let gr6baseDistance = 30;
let gr6CarPositions = [[{
  "x": 484.756103515625,
  "y": -1102.3062744140625,
  "z": 28.807342529296875
}, 95.42744445800781], [{
  "x": 485.1808776855469,
  "y": -1105.6689453125,
  "z": 28.806692123413086
}, 95.42744445800781], [{
  "x": 484.790283203125,
  "y": -1109.1700439453125,
  "z": 28.805891036987305
}, 95.42744445800781], [{
  "x": 485.1467590332031,
  "y": -1112.6395263671875,
  "z": 28.80535316467285
}, 95.42744445800781], [{
  "x": 471.6806335449219,
  "y": -1109.257568359375,
  "z": 28.806224822998047
}, 95.42744445800781], [{
  "x": 471.520751953125,
  "y": -1105.9871826171875,
  "z": 28.80721092224121
}, 95.42744445800781], [{
  "x": 471.97943115234375,
  "y": -1102.6512451171875,
  "z": 28.807701110839844
}, 95.42744445800781], [{
  "x": 471.4292297363281,
  "y": -1098.9801025390625,
  "z": 28.8061580657959
}, 95.42744445800781], [{
  "x": 471.7353820800781,
  "y": -1095.6881103515625,
  "z": 28.808027267456055
}, 95.42744445800781], [{
  "x": 472.109619140625,
  "y": -1092.3970947265625,
  "z": 28.806678771972656
}, 95.42744445800781], [{
  "x": 472.0760192871094,
  "y": -1089.136474609375,
  "z": 28.80914878845215
}, 95.42744445800781], [{
  "x": 484.596923828125,
  "y": -1083.2073974609375,
  "z": 28.80978012084961
}, 95.42744445800781], [{
  "x": 485.1408996582031,
  "y": -1079.53662109375,
  "z": 28.806983947753906
}, 95.42744445800781], [{
  "x": 459.60943603515625,
  "y": -1080.236572265625,
  "z": 28.8100643157959
}, 95.42744445800781], [{
  "x": 459.78521728515625,
  "y": -1083.945068359375,
  "z": 28.80739402770996
}, 95.42744445800781], [{
  "x": 459.5370788574219,
  "y": -1087.6214599609375,
  "z": 28.808650970458984
}, 95.42744445800781], [{
  "x": 459.64013671875,
  "y": -1091.38427734375,
  "z": 28.8077449798584
}, 95.42744445800781], [{
  "x": 459.7898864746094,
  "y": -1095.2694091796875,
  "z": 28.807132720947266
}, 95.42744445800781], [{
  "x": 459.6727294921875,
  "y": -1098.6854248046875,
  "z": 28.807165145874023
}, 95.42744445800781], [{
  "x": 459.8841247558594,
  "y": -1109.1917724609375,
  "z": 28.80704116821289
}, 95.42744445800781], [{
  "x": 459.76300048828125,
  "y": -1112.7598876953125,
  "z": 28.805830001831055
}, 95.42744445800781], [{
  "x": 485.3493347167969,
  "y": -1151.8433837890625,
  "z": 28.90336799621582
}, 95.42744445800781], [{
  "x": 474.4845886230469,
  "y": -1151.60595703125,
  "z": 28.89848518371582
}, 95.42744445800781], [{
  "x": 466.0248718261719,
  "y": -1151.508056640625,
  "z": 28.898408889770508
}, 95.42744445800781], [{
  "x": 452.1874694824219,
  "y": -1151.5057373046875,
  "z": 28.898778915405273
}, 95.42744445800781], [{
  "x": 442.15167236328125,
  "y": -1151.46044921875,
  "z": 28.89842414855957
}, 95.42744445800781], [{
  "x": 432.4815368652344,
  "y": -1151.4814453125,
  "z": 28.897207260131836
}, 95.42744445800781], [{
  "x": 432.4815368652344,
  "y": -1151.4814453125,
  "z": 28.897207260131836
}, 95.42744445800781], [{
  "x": 423.1426086425781,
  "y": -1151.4599609375,
  "z": 28.89789581298828
}, 95.42744445800781], [{
  "x": 412.9697570800781,
  "y": -1151.439453125,
  "z": 28.898574829101562
}, 95.42744445800781], [{
  "x": 485.8990783691406,
  "y": -1154.695556640625,
  "z": 28.897493362426758
}, 95.42744445800781], [{
  "x": 475.21368408203125,
  "y": -1154.652587890625,
  "z": 28.89752960205078
}, 95.42744445800781], [{
  "x": 466.0748291015625,
  "y": -1154.6134033203125,
  "z": 28.898948669433594
}, 95.42744445800781], [{
  "x": 451.86932373046875,
  "y": -1154.6590576171875,
  "z": 28.89619255065918
}, 95.42744445800781], [{
  "x": 443.1600341796875,
  "y": -1154.599853515625,
  "z": 28.898189544677734
}, 95.42744445800781], [{
  "x": 432.1284484863281,
  "y": -1154.6090087890625,
  "z": 28.897031784057617
}, 95.42744445800781], [{
  "x": 423.48699951171875,
  "y": -1154.6842041015625,
  "z": 28.897680282592773
}, 95.42744445800781], [{
  "x": 412.7337341308594,
  "y": -1154.6322021484375,
  "z": 28.89877700805664
}, 95.42744445800781], [{
  "x": 485.117919921875,
  "y": -1157.8311767578125,
  "z": 28.896793365478516
}, 95.42744445800781], [{
  "x": 474.7124938964844,
  "y": -1157.82470703125,
  "z": 28.89902687072754
}, 95.42744445800781], [{
  "x": 466.2529296875,
  "y": -1157.6629638671875,
  "z": 28.89669418334961
}, 95.42744445800781], [{
  "x": 451.5395812988281,
  "y": -1157.7333984375,
  "z": 28.897708892822266
}, 95.42744445800781], [{
  "x": 442.9903259277344,
  "y": -1157.70263671875,
  "z": 28.89864158630371
}, 95.42744445800781], [{
  "x": 432.6658935546875,
  "y": -1157.7904052734375,
  "z": 28.896804809570312
}, 95.42744445800781], [{
  "x": 423.3752136230469,
  "y": -1157.6414794921875,
  "z": 28.899463653564453
}, 95.42744445800781], [{
  "x": 413.1678161621094,
  "y": -1157.691162109375,
  "z": 28.897109985351562
}, 95.42744445800781], [{
  "x": 485.9555358886719,
  "y": -1160.775634765625,
  "z": 28.897180557250977
}, 95.42744445800781], [{
  "x": 475.05218505859375,
  "y": -1160.9090576171875,
  "z": 28.89944839477539
}, 95.42744445800781], [{
  "x": 466.025146484375,
  "y": -1160.7391357421875,
  "z": 28.901142120361328
}, 95.42744445800781], [{
  "x": 451.664306640625,
  "y": -1160.911865234375,
  "z": 28.898273468017578
}, 95.42744445800781], [{
  "x": 442.8725891113281,
  "y": -1160.76171875,
  "z": 28.898054122924805
}, 95.42744445800781], [{
  "x": 432.25238037109375,
  "y": -1160.9447021484375,
  "z": 28.89756202697754
}, 95.42744445800781], [{
  "x": 423.740478515625,
  "y": -1160.7030029296875,
  "z": 28.898643493652344
}, 95.42744445800781], [{
  "x": 413.2269287109375,
  "y": -1160.9742431640625,
  "z": 28.898902893066406
}, 95.42744445800781], [{
  "x": 485.84649658203125,
  "y": -1163.912353515625,
  "z": 28.896406173706055
}, 95.42744445800781], [{
  "x": 475.08453369140625,
  "y": -1163.8265380859375,
  "z": 28.898296356201172
}, 95.42744445800781], [{
  "x": 442.9339904785156,
  "y": -1163.8272705078125,
  "z": 28.89691734313965
}, 95.42744445800781], [{
  "x": 432.4906005859375,
  "y": -1163.939453125,
  "z": 28.89862823486328
}, 95.42744445800781], [{
  "x": 423.51898193359375,
  "y": -1163.8770751953125,
  "z": 28.897737503051758
}, 95.42744445800781], [{
  "x": 412.7418212890625,
  "y": -1163.8931884765625,
  "z": 28.89671516418457
}, 95.42744445800781], [{
  "x": 485.5042724609375,
  "y": -1167.5911865234375,
  "z": 28.897724151611328
}, 95.42744445800781], [{
  "x": 471.6871643066406,
  "y": -1125.2222900390625,
  "z": 28.948108673095703
}, 95.42744445800781], [{
  "x": 456.1492004394531,
  "y": -1125.323486328125,
  "z": 28.949399948120117
}, 95.42744445800781], [{
  "x": 494.553955078125,
  "y": -1077.1307373046875,
  "z": 28.364866256713867
}, 95.42744445800781], [{
  "x": 494.7682189941406,
  "y": -1089,
  "z": 28.529794692993164
}, 95.42744445800781], [{
  "x": 494.3519592285156,
  "y": -1099.528564453125,
  "z": 28.663164138793945
}, 95.42744445800781]];
const distCeil = 4;
const gr6JobCost = 500;
const gr6CarCost = 5000;
const gr6AmmoCost = 2700;
let markers = [[253.4611, 220.7204, 106.2865, 108], [251.749, 221.4658, 106.2865, 108], [248.3227, 222.5736, 106.2867, 108], [246.4875, 223.2582, 106.2867, 108], [243.1434, 224.4678, 106.2868, 108], [241.1435, 225.0419, 106.2868, 108], [148.5, -1039.971, 29.37775, 1], [1175.054, 2706.404, 38.09407, 1], [-1212.83, -330.3573, 37.78702, 1], [314.3541, -278.5519, 54.17077, 1], [-2962.951, 482.8024, 15.7031, 1], [-350.6871, -49.60739, 49.04258, 1], [-111.1722, 6467.846, 31.62671, 2], [-113.3064, 6469.969, 31.62672, 2], [138.7087, -1705.711, 28.29162, 109], [1214.091, -472.9952, 65.208, 109], [-276.4055, 6226.398, 30.69552, 109], [-1282.688, -1117.432, 5.990113, 110], [1931.844, 3730.305, 31.84443, 111], [-33.34319, -154.1892, 56.07654, 48], [-813.5332, -183.2378, 36.5689, 112], [22.08832, -1106.986, 29.79703, 75], [252.17, -50.08245, 69.94106, 76], [842.2239, -1033.294, 28.19486, 77], [-661.947, -935.6796, 21.82924, 78], [-1305.899, -394.5485, 36.69577, 79], [809.9118, -2157.209, 28.61901, 102], [2567.651, 294.4759, 107.7349, 103], [-3171.98, 1087.908, 19.83874, 104], [-1117.679, 2698.744, 17.55415, 105], [1693.555, 3759.9, 33.70533, 106], [-330.36, 6083.885, 30.45477, 107], [-1148.878, -2000.123, 12.18026, 14], [-347.0815, -133.3432, 38.00966, 54], [726.0679, -1071.613, 27.31101, 55], [-207.0201, -1331.493, 33.89437, 56], [1187.764, 2639.15, 37.43521, 57], [101.0262, 6618.267, 31.43771, 71], [-146.2072, -584.2731, 166.0002, 121], [472.2666, -1310.529, 28.22178, 123], [26.213, -1345.442, 29.49702, 3], [-1223.059, -906.7239, 12.32635, 4], [-1487.533, -379.3019, 40.16339, 5], [1135.979, -982.2205, 46.4158, 6], [1699.741, 4924.002, 42.06367, 7], [374.3559, 327.7817, 103.5664, 8], [-3241.895, 1001.701, 12.83071, 9], [-3039.184, 586.3903, 7.90893, 11], [-2968.295, 390.9566, 15.04331, 10], [547.8511, 2669.281, 42.1565, 50], [1165.314, 2709.109, 38.15772, 51], [1960.845, 3741.882, 32.34375, 84], [1729.792, 6414.979, 35.03723, 85], [-657.087, -857.313, 23.490, 85], [1133.0963, -472.6430, 65.7651, 85], [318.2640, -1076.7376, 28.4785, 85]];
mp.labels.new("База инкассаторов", new mp.Vector3(gr6basePosition.x, gr6basePosition.y, gr6basePosition.z + 1.2), {
  dimension: 0,
  drawDistance: 10,
  los: true,
  font: 1
});
mp.blips.new(318, gr6basePosition, {
  dimension: 0,
  name: "База инкассаторов",
  scale: 0.8,
  color: 2,
  shortRange: true
});

function findFreePlace() {
  let fnd = null;
  gr6CarPositions.map(([pos, heading]) => {
    if (fnd == null) {
      let q = true;
      mp.vehicles.forEachInRange(pos, 5, veh => {
        q = false;
      });
      if (q) fnd = [pos, heading];
    }
  });
  return fnd;
}

function startJob(player) {
  if (!_user.user.isLogin(player)) return;

  if (_user.user.getSex(player) == 1) {
    _user.user.setComponentVariation(player, 3, 14, 0);

    _user.user.setComponentVariation(player, 4, 34, 0);

    _user.user.setComponentVariation(player, 5, 0, 0);

    _user.user.setComponentVariation(player, 6, 25, 0);

    _user.user.setComponentVariation(player, 7, 0, 0);

    _user.user.setComponentVariation(player, 8, 152, 0);

    _user.user.setComponentVariation(player, 9, 6, 1);

    _user.user.setComponentVariation(player, 10, 0, 0);

    _user.user.setComponentVariation(player, 11, 85, 0);
  } else {
    _user.user.setComponentVariation(player, 3, 11, 0);

    _user.user.setComponentVariation(player, 4, 13, 0);

    _user.user.setComponentVariation(player, 5, 0, 0);

    _user.user.setComponentVariation(player, 6, 25, 0);

    _user.user.setComponentVariation(player, 7, 0, 0);

    _user.user.setComponentVariation(player, 8, 122, 0);

    _user.user.setComponentVariation(player, 9, 4, 1);

    _user.user.setComponentVariation(player, 10, 0, 0);

    _user.user.setComponentVariation(player, 11, 26, 1);
  }

  player.gr6duty = true;
  player.notify("Вы заступили на смену");
  if (player.armour < 20) player.armour = 20;

  _user.user.giveWeaponByHash(player, mp.joaat('WEAPON_PISTOL'), 100);

  _user.user.set(player, "is6Duty", true);

  _user.user.updateClientCache(player);
}

mp.events.add("gr6:fakeCar", player => {
  stopJob(player);
});

function stopJob(player) {
  player.notify("Вы завершили рабочий день");
  player.call("server:gr6:stop");
  if (player.armour <= 20) player.armour = 0;
  player.gr6duty = false;
  removeTask(player);

  _user.user.updateCharacterCloth(player);

  _user.user.set(player, "is6Duty", false);

  _user.user.updateClientCache(player);
}

function despawnVeh(veh, del = true) {
  if (!mp.vehicles.exists(veh)) return;
  checkVehUsers(veh);
  if (!veh.gr6users) return;
  veh.gr6users.forEach(n => {
    if (mp.players.exists(n)) n.gr6TaskVeh = null;
    removeTask(n);
  });
  if (del) _vehicles.vehicles.respawn(veh);
  return true;
}

_methods.methods.createDynamicCheckpoint(gr6basePosition, "Нажмите ~g~Е~s~ чтобы открыть меню инкассаторов", player => {
  if (!_chat.enabledSystem.gr6) return player.notify("Лицензионный центр на временных тех работах. Загляните чуть позже");

  let m = _menu.menu.new(player, "", 'Инкассаторы');

  m.sprite = "gr6";

  if (!player.gr6duty) {
    m.newItem({
      name: "Начать рабочий день",
      more: gr6JobCost + "$",
      onpress: () => {
        if (_user.user.getLevel(player) < _level.levelAccess.gr6) return player.notify("~r~Необходимо иметь " + _level.levelAccess.gr6 + " уровень");
        if (_user.user.get(player, "job") != "gr6") return player.notify("Вы не работаете инкассатором");
        if (_user.user.isGos(player)) return player.notify("Гос служащим запрещено работать инкассаторами");
        if (_user.user.get(player, "gun_lic") != 1) return player.notify("У вас нет лицензии на оружие");
        if (_user.user.getCashMoney(player) < gr6JobCost) return player.notify("У вас недостаточно средств для выхода на смену");

        _user.user.removeMoney(player, gr6JobCost);

        startJob(player);
        m.close();
      }
    });
  } else {
    m.newItem({
      name: "Закончить смену",
      onpress: () => {
        stopJob(player);
        m.close();
      }
    });
  }

  if (player.gr6Veh) {
    if (mp.vehicles.exists(player.gr6Veh)) {
      m.newItem({
        name: "~y~Вернуть транспорт",
        more: "+" + (gr6CarCost - 500) + "$",
        onpress: () => {
          if (!player.gr6Veh) return player.notify("У вас нет арендованного ТС");
          if (!mp.vehicles.exists(player.gr6Veh)) return player.notify("ТС уничтожен"), player.gr6Veh = null;
          if (player.gr6Veh.dist(gr6basePosition) > gr6baseDistance) return player.notify("ТС слишком далеко от базы");
          despawnVeh(player.gr6Veh);
          player.gr6Veh = null;

          _user.user.addCashMoney(player, gr6CarCost - 500);

          player.notify("Вы вернули залог за ТС");
          m.close();
        }
      });
    } else {
      player.gr6Veh = null;
    }
  }

  if (player.gr6TaskVeh || player.gr6haveTask) {
    m.newItem({
      name: "~r~Завершить текущий наряд",
      desc: "Завершить текущее задание и открепится от экипажа",
      onpress: () => {
        removeTask(player);
      }
    });
  }

  m.newItem({
    name: "Арендовать служебный транспорт",
    more: gr6CarCost + "$",
    onpress: async () => {
      if (_user.user.getLevel(player) < _level.levelAccess.gr6) return player.notify("~r~Необходимо иметь " + _level.levelAccess.gr6 + " уровень");
      if (_user.user.get(player, "c_lic") != 1) return player.notify("Необходимо удостоверение категории C");
      if (!player.gr6duty) return player.notify("Вы не на смене");
      if (_user.user.getCashMoney(player) < gr6CarCost) return player.notify("У вас недостаточно средств для аренды ТС");
      m.close();
      let pos = findFreePlace();
      if (!pos) return player.notify("На парковке не найдено свободное место");

      if (player.gr6Veh) {
        let status = await _user.user.accept(player, "Старое ТС будет потеряно");
        if (!status) return player.notify("В таком случае вам необходимо его вернуть");
        if (player.gr6Veh.dist(gr6basePosition) <= gr6baseDistance) despawnVeh(player.gr6Veh), player.gr6Veh = null;else despawnVeh(player.gr6Veh, false);
      }

      removeTask(player);

      _user.user.removeMoney(player, gr6CarCost);

      _user.user.showLoadDisplay(player);

      setTimeout(() => {
        _vehicles.vehicles.spawnJobCar(new mp.Vector3(pos[0].x, pos[0].y, pos[0].z), pos[1], 1747439474, "gr6", veh => {
          if (!_vehicles.vehicles.exists(veh)) return;
          if (!_user.user.isLogin(player)) return;
          player.putIntoVehicle(veh, _newrage.RAGE_BETA ? 0 : -1);

          _vehicles.vehicles.set(veh.getVariable('container'), 'owner_id', _user.user.getId(player));

          veh.setVariable('owner_id', _user.user.getId(player));
          player.gr6Veh = veh;
          veh.gr6money = 0;
          veh.gr6users = [player];
          veh.gr6Owner = _user.user.getId(player);
          player.gr6TaskVeh = veh;
        });
      }, 500);
      setTimeout(function () {
        if (!_user.user.isLogin(player)) return;

        _user.user.hideLoadDisplay(player);
      }, 1500);
    }
  });
  m.newItem({
    name: "Вооружение",
    more: gr6AmmoCost + "$",
    onpress: () => {
      if (!player.gr6duty) return player.notify("Вы не на смене");
      if (_user.user.getCashMoney(player) < gr6AmmoCost) return player.notify("У вас недостаточно средств для покупки");

      _user.user.removeMoney(player, gr6AmmoCost);

      _user.user.giveWeaponByHash(player, mp.joaat('WEAPON_SMG'), 200);

      player.notify("Вы получили MP5 и комплект брони");
      player.armour = 35;
      m.close();
    }
  });
  m.open();
});

function checkVehStatus(player) {
  if (!player.gr6duty) {
    player.notify("Вы не на смене");
    return false;
  }

  if (!player.gr6Veh) {
    player.notify("У вас нет арендованого ТС");
    return false;
  }

  if (!player.vehicle) {
    player.notify("Вы не в ТС");
    return false;
  }

  if (!mp.vehicles.exists(player.gr6Veh)) {
    player.notify("ТС уничтожен");
    player.gr6Veh = null;
    return false;
  }

  if (player.vehicle != player.gr6Veh) {
    player.notify("Вы не в своём ТС");
    return false;
  }

  return true;
}

function checkVehUsers(veh) {
  if (!mp.vehicles.exists(veh)) return;
  if (!veh.gr6users) return;
  if (veh.gr6users.length == 0) return;
  veh.gr6users.forEach((target, index) => {
    if (!mp.players.exists(target)) veh.gr6users.splice(index, 1);
    if (!target.gr6duty) veh.gr6users.splice(index, 1), target.notify("Вы были исключены из напарников после окончания смены"), removeTask(target);
  });
}

function removeTask(player) {
  if (!mp.players.exists(player)) return;
  if (player.gr6haveTask) player.notify("Задание было отменено");
  player.gr6Task = null;
  player.gr6haveTask = false;

  if (mp.vehicles.exists(player.gr6TaskVeh)) {
    if (player.gr6TaskVeh.gr6users.indexOf(player) > -1) player.gr6TaskVeh.gr6users.splice(player.gr6TaskVeh.gr6users.indexOf(player), 1), player.notify("Вы были откреплены от экипажа");
  }

  player.gr6TaskVeh = null;
  player.call("server:gr6:removeTask");
}

function userChoice(player, target) {
  if (!checkVehStatus(player)) return;
  let veh = player.gr6Veh;
  checkVehUsers(veh);
  if (veh.gr6users.indexOf(target) == -1) return;

  let m = _menu.menu.new(player, _user.user.getRpName(target));

  m.newItem({
    name: "Выгнать",
    onpress: () => {
      if (!checkVehStatus(player)) return;
      checkVehUsers(veh);

      _user.user.accept(player, "Вы уверены?").then(status => {
        if (status) {
          if (mp.players.exists(target)) veh.gr6users.splice(veh.gr6users.indexOf(target), 1), target.notify("Водитель исключил Вас"), target.removeFromVehicle(), removeTask(target);
          player.notify("Напарник исключён");
        }

        usersVehList(player);
      });
    }
  });

  if (target.gr6haveTask && target.gr6Task) {
    let dist = _methods.methods.parseInt(veh.dist(new mp.Vector3(target.gr6Task.x, target.gr6Task.y, target.gr6Task.z)));

    m.newItem({
      name: "Навигатор задания",
      more: dist + "m (" + _methods.methods.parseInt(dist * 100 / distCeil) + "$)",
      onpress: () => {
        if (!checkVehStatus(player)) return;
        checkVehUsers(veh);
        if (!target.gr6haveTask || !target.gr6Task) return player.notify('~r~Задание более недоступно');

        _user.user.setWaypoint(player, target.gr6Task.x, target.gr6Task.y);

        player.notify("Навигатор запущен");
        veh.gr6users.forEach(ntr => {
          if (ntr != player) ntr.notify(_user.user.getRpName(player) + " установил маршрут на точку " + _user.user.getRpName(target)), ntr.notify(`Дистанция: ${dist}m, Сумма: ${_methods.methods.parseInt(dist * 100 / distCeil)}$`), _user.user.setWaypoint(ntr, target.gr6Task.x, target.gr6Task.y);
        });
      }
    });
  }

  m.open();
}

function usersVehList(player) {
  if (!checkVehStatus(player)) return;
  let veh = player.gr6Veh;
  checkVehUsers(veh);

  let m = _menu.menu.new(player, "Напарники");

  m.onclose = () => {
    carMenu(player);
  };

  m.newItem({
    name: "Новый напарник",
    onpress: async () => {
      if (!checkVehStatus(player)) return;

      let id = _methods.methods.parseInt(await _menu.menu.input(player, "Введите ID напарника"));

      if (isNaN(id) || id < 1) return player.notify("ID указан не верно");
      checkVehUsers(veh);

      let target = _user.user.getPlayerById(id);

      if (!target) return player.notify("ID не обнаружен");
      if (target.vehicle != player.gr6Veh) return player.notify("Напарник должен находится в вашем ТС");
      if (!target.gr6duty) return player.notify("Указанный ID не на смене");
      if (target.gr6haveTask) return player.notify("Сотрудник уже на задании");
      if (target.gr6TaskVeh == veh) return player.notify("Сотрудник уже является напарником");
      if (target.gr6TaskVeh) return player.notify("Сотрудник уже закреплён за другим ТС");
      if (veh.gr6users.length >= 4) return player.notify("Лимит напарников превышен");
      veh.gr6users.push(target);
      target.gr6TaskVeh = veh;
      target.notify("Вы стали напарником " + _user.user.getRpName(player));
      player.notify(_user.user.getRpName(target) + " стал вашим напарником");
      usersVehList(player);
    }
  });
  veh.gr6users.forEach((target, index) => {
    let dist = target.gr6haveTask ? _methods.methods.parseInt(veh.dist(new mp.Vector3(target.gr6Task.x, target.gr6Task.y, target.gr6Task.z))) : 0;
    m.newItem({
      name: _user.user.getRpName(target),
      more: target == player ? "Водитель (Вы)" : "Напарник" + (target.gr6haveTask ? " (" + dist + "m (" + _methods.methods.parseInt(dist * 100 / distCeil) + "$))" : "(нет задания)"),
      onpress: async () => {
        if (target == player) return player.notify("С собой вы не можете ничего делать");
        userChoice(player, target);
      }
    });
  });
  m.newItem({
    name: "Распустить всех",
    onpress: async () => {
      if (!checkVehStatus(player)) return;
      checkVehUsers(veh);

      _user.user.accept(player, "Вы уверены?").then(status => {
        if (status) {
          veh.gr6users.forEach(usr => {
            if (usr != player) removeTask(usr);
          });
          veh.gr6users = [player];
          player.notify("Вы всех распустили");
        }

        usersVehList(player);
      });
    }
  });
  m.open();
}

function carMenu(player) {
  if (!player.vehicle) return;

  if (!player.gr6Veh && player.vehicle.gr6Owner) {
    let veh = player.vehicle;
    if (player.vehicle.gr6Owner == _user.user.getId(player)) player.gr6Veh = player.vehicle;
    checkVehUsers(veh);
    player.gr6Veh = veh;
    let fnd = false;
    veh.gr6users.forEach((target, index) => {
      if (!mp.players.exists(target)) {
        if (_user.user.getId(target) == _user.user.getId(player)) fnd = true;
      }
    });
    if (!fnd) veh.gr6users.push(player);
    veh.gr6Owner = _user.user.getId(player);
    player.gr6TaskVeh = veh;
  }

  if (!checkVehStatus(player)) return;

  let m = _menu.menu.new(player, "Инкассатор");

  let veh = player.gr6Veh;
  m.newItem({
    name: "Напарники",
    onpress: () => {
      if (!checkVehStatus(player)) return;
      usersVehList(player);
    }
  });
  m.newItem({
    name: "Получить задания",
    onpress: () => {
      if (!checkVehStatus(player)) return;
      checkVehUsers(veh);
      let newTask = false;
      if (veh.gr6users.length == 1) return player.notify("У вас нет напарников, необходимо добавить"), usersVehList(player);
      if (veh.position.z < 0) return player.notify("Из данного места нельзя брать заказы");
      if (veh.gr6money > 3500000) return player.notify("У вас в машине более 3.5млн$, больше не влезает"), _user.user.setWaypoint(player, gr6basePosition.x, gr6basePosition.y), player.notify("Построен маршрут до базы");
      veh.gr6users.forEach(target => {
        if (target != player) {
          if (target.vehicle != veh) target.notify("Вы не получили задание, потому что не были в ТС");else if (target.gr6haveTask) target.notify("Вы не получили задание, у вас уже есть задание");else {
            let pos = (0, _methods2.randomArrayEl)(markers);

            if (!pos && _methods.methods.parseInt(veh.dist(new mp.Vector3(pos[0], pos[1], pos[2]))) < 20) {
              target.notify("Для вас не было найдено подходящего задания");
            } else {
              const [x, y, z] = pos;
              target.call('client:createGr6Checkpoint', [x, y, z]);
              target.notify("Вы получили задание");
              target.gr6Task = {
                x,
                y,
                z,
                dist: _methods.methods.parseInt(veh.dist(new mp.Vector3(x, y, z)))
              };
              target.gr6haveTask = true;
              player.notify(_user.user.getRpName(target) + " получил задание (" + target.gr6Task.dist + "m)");
              newTask = true;
            }
          }
        }
      });
      if (newTask) player.notify("Вы получили новые задания."), player.notify("В списке напарников выберите маршрут"), usersVehList(player);else player.notify("Новых заданий нет");
    }
  });
  m.newItem({
    name: "Отгрузить выручку",
    more: veh.gr6money + "$",
    onpress: () => {
      if (!checkVehStatus(player)) return;
      m.close();
      checkVehUsers(veh);
      if (veh.dist(gr6basePosition) > gr6baseDistance) return player.notify("ТС слишком далеко от базы"), _user.user.setWaypoint(player, gr6basePosition.x, gr6basePosition.y);
      if (veh.gr6money == 0) return player.notify("В ТС нет выручки");

      let money = _methods.methods.parseInt(veh.gr6money / 50 / veh.gr6users.length);

      veh.gr6users.forEach(target => {
        if (mp.players.exists(target)) {
          let resMoney = _user.user.get(target, 'skill_gr6') >= 500 ? money * 2 : money;

          _user.user.addCashMoney(target, resMoney);

          target.notify("Ваша выручка: " + resMoney + "$" + (_user.user.get(target, 'skill_gr6') >= 500 ? " (+20%)" : ""));

          _user.user.giveJobSkill(target);

          _user.user.giveJobSkill(player);

          _business.business.addMoney(162, _methods.methods.parseInt(resMoney / 10));

          _coffer.coffer.addMoney(resMoney + _methods.methods.parseInt(resMoney / 10));
        }
      });
      veh.gr6money = 0;
    }
  });
  m.newItem({
    name: "Справка",
    desc: "Катайтесь по заданиям, собирайте деньги с магазинов и везите их в хранилище. Есть возможность работать с напарником, до 4 человек."
  });
  m.open();
}

mp.events.add("server:login:success:after", player => {
  let id = _user.user.getId(player);

  mp.vehicles.forEach(veh => {
    if (veh.gr6Owner && veh.gr6Owner == id) {
      checkVehUsers(veh);
      player.gr6Veh = veh;
      let fnd = false;
      veh.gr6users.forEach((target, index) => {
        if (!mp.players.exists(target)) {
          if (_user.user.getId(target) == id) fnd = true;
        }
      });
      if (fnd) veh.gr6users.push(player);
      veh.gr6Owner = _user.user.getId(player);
      player.gr6TaskVeh = veh;
    }
  });
});
mp.events.addRemoteCounted('server:gr6:dropCar', (player, vId) => {
  if (!_user.user.isLogin(player)) return;
  vId = _methods.methods.parseInt(vId);
  if (isNaN(vId) || vId < 0) return player.notify("Какой то странный ТС");
  let veh = mp.vehicles.at(vId);
  if (!veh) return;
  checkVehUsers(veh);

  if (veh.gr6users) {
    if (veh.gr6users.indexOf(player) == -1) return player.notify("Это не ваш ТС");

    let money = _methods.methods.parseInt(player.gr6Task.dist * 100 / distCeil);

    if (money > 2200 * 100) money = 2200 * 100;
    veh.gr6money += money;
    veh.gr6users.forEach(target => {
      target.notify(_user.user.getRpName(player) + " загрузил " + money + "$");
    });
  } else {
    player.notify("Это не служебный транспорт");
  }

  player.gr6haveTask = false;
  player.gr6Task = null;
});
mp.events.addRemoteCounted('gr6:menuVeh', player => {
  carMenu(player);
});
mp.events.addRemoteCounted('server:gr6:grab', player => {
  if (!_user.user.isLogin(player)) return;
  if (!player.vehicle) return player.notify("Вы должны быть в ТС");
  let veh = player.vehicle;
  if (veh.getVariable('job') != 'gr6') return player.notify("ТС не принадлежит инкассаторам");
  if (!veh.gr6users) return player.notify("ТС не принадлежит инкассаторам");
  if (veh.gr6users.indexOf(player) != -1) return player.notify("Самих себя грабить задумали?");

  _user.user.showLoadDisplay(player);

  if (veh.gr6money == 0) return player.notify("~r~В машине нет денег");

  const money = _methods.methods.parseInt(veh.gr6money / 60);

  veh.gr6money = 0;
  if (!mp.vehicles.exists(veh)) return;
  despawnVeh(veh);
  setTimeout(function () {
    if (!_user.user.isLogin(player)) return;

    _user.user.hideLoadDisplay(player);

    _user.user.addCashMoney(player, money);

    player.notify('~b~Вы ограбили транспорт на сумму: ~s~$' + _methods.methods.numberFormat(money));
  }, 1500);
});
},{"../modules/methods":"qXSp","../modules/menu":"Aiz7","../user":"QE3B","../vehicles":"pYYy","../../util/methods":"Z5QB","../coffer":"sKID","../business":"y5vZ","../modules/chat":"e1Zb","../../util/level":"MpJF","../../util/newrage":"mgLX"}],"eOAh":[function(require,module,exports) {
"use strict";

require("./prison");

require("./gr6");
},{"./prison":"kFYX","./gr6":"O54w"}],"GLPL":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _menu = require("../modules/menu");

var _user = require("../user");

var _methods2 = require("../../util/methods");

var _vehicles = require("../vehicles");

var _chat = require("../modules/chat");

var _parking = require("./parking");

var _npc = require("../modules/npc");

var _string = require("../../util/string");

var _newrage = require("../../util/newrage");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let ids = 1;
let autoschoolPos = new mp.Vector3(-702.40, -1308.85, 4.11);
let licCost = {
  "a": 300,
  "b": 600,
  "c": 1000,
  "air": 5000,
  "ship": 2000
};
let licVehs = {
  "a": "lectro",
  "b": "asea",
  "c": "mule",
  "air": "buzzard2",
  "ship": "dinghy"
};
let licVehsPos = {
  "a": [{
    x: -743.7610473632812,
    y: -1310.8988037109375,
    z: 4.496565818786621,
    h: 228.7469482421875
  }],
  "b": [{
    x: -743.7610473632812,
    y: -1310.8988037109375,
    z: 4.496565818786621,
    h: 228.7469482421875
  }],
  "c": [{
    x: -743.7610473632812,
    y: -1310.8988037109375,
    z: 4.496565818786621,
    h: 228.7469482421875
  }],
  "air": [{
    x: -749.308349609375,
    y: -1432.199462890625,
    z: 4.902952671051025,
    h: 169.6073760986328
  }],
  "ship": [{
    x: -832.7066650390625,
    y: -1439.804931640625,
    z: -1.1218644380569458,
    h: 86.00557708740234
  }]
};
let examWaitList = new Map();

class autoschoolClass {
  constructor(position) {
    ids++;
    this.theoryMap = new Map();
    this.id = ids;
    this.position = position;

    _methods.methods.createDynamicCheckpoint(this.position, "Нажмите ~g~E~w~ чтобы открыть меню лицензионного центра", player => {
      if (!_chat.enabledSystem.autoschool) return player.notify("Лицензионный центр на временных тех работах. Загляните чуть позже");
      this.menu(player);
    }, 2, 0);

    mp.blips.new(77, this.position, {
      dimension: 0,
      name: "Лицензионный центр",
      scale: 0.5,
      color: 25,
      shortRange: true
    });
  }

  menu(player) {
    _user.user.questWorks(player);

    let m = _menu.menu.new(player, "Лицензии", "Доступные лицензии");

    let cats = ["a", "b", "c"];

    if (_user.user.get(player, 'fraction_id') == 17) {
      m.newItem({
        name: "Ожидающие экзамен",
        more: [...examWaitList].filter(i => !i[1].start).length,
        onpress: () => {
          this.examsList(player);
        }
      });
    }

    cats.forEach(cat => {
      m.newItem({
        name: "Категория " + cat.toUpperCase(),
        more: _user.user.get(player, cat + "_lic") ? "~g~Получено" : "~b~Получить (~g~$" + licCost[cat] + "~b~)",
        onpress: () => {
          if (_user.user.get(player, cat + "_lic")) return player.notify("У вас уже есть данное удостоверение");
          this.startExam(player, cat);
        }
      });
    });
    m.newItem({
      name: "Категория " + "Водный ТС",
      more: _user.user.get(player, "ship_lic") ? "~g~Получено" : "~b~Получить (~g~$" + licCost["ship"] + "~b~)",
      onpress: () => {
        if (_user.user.get(player, "ship_lic")) return player.notify("У вас уже есть данная лицензия");
        this.startExam(player, "ship");
      }
    });
    m.newItem({
      name: "Категория " + "Воздушный ТС",
      more: _user.user.get(player, "air_lic") ? "~g~Получено" : "~b~Получить (~g~$" + licCost["air"] + "~b~)",
      onpress: () => {
        if (_user.user.get(player, "air_lic")) return player.notify("У вас уже есть данная лицензия");
        this.startExam(player, "air");
      }
    });
    m.open();
  }

  startExam(player, lic) {
    if (player.autoschoolExam) return player.notify("Вы уже сдаёте экзамен");
    if (_user.user.get(player, lic + "_lic")) return player.notify("У вас уже есть данное удостоверение");
    let cost = licCost[lic];
    if (_user.user.getMoney(player) < cost) return player.notify("У вас недостаточно средств для оплаты");
    player.autoschoolExam = this.id;

    _user.user.removeCashMoney(player, cost);

    player.notify("Пошлина за экзамен оплачена");
    let cats = ["a", "b", "c"];
    let needPractice = true;
    cats.map(item => {
      if (_user.user.get(player, item + "_lic")) needPractice = false;
    });
    if (lic.length == 1 && needPractice) this.starTheory(player, lic);else this.starPractice(player, lic);
  }

  starPractice(player, lic) {
    examWaitList.set(player.id, {
      lic,
      status: false,
      start: false
    });
    player.notify("~g~Ищем свободного инструктора, максимальное время ожидания - 30 секунд");
    this.requestExam(player, lic);
    setTimeout(() => {
      if (!mp.players.exists(player)) return;
      if (examWaitList.get(player.id).start) return;
      player.notify("Свободных инструкторов на данный момент нет. Экзамем пройдёт в автоматическом режиме");
      this.tehnicalStart(player, lic);
    }, 30000);
  }

  requestExam(player, lic) {
    if (!mp.players.exists(player)) return;
    let getExam = false;

    let name = _user.user.getRpName(player);

    mp.players.forEach(target => {
      if (_user.user.isLogin(target)) {
        if (_user.user.get(target, 'fraction_id') == 17) {
          if (target.dist(autoschoolPos) < 3000) {
            _user.user.accept(target, name + " требуется экзаменатор, категория " + this.getLicName(lic)).then(status => {
              if (!status) return;
              if (getExam) return target.notify("Экзамен уже принят кем то другим");
              if (!mp.players.exists(player)) return target.notify("Игрок покинул сервер");
              getExam = true;
              examWaitList.get(player.id).status = true;
              player.notify(_user.user.getRpName(target) + " направляется к вам, ожидайте");
            });
          }
        }
      }
    });
  }

  getLicName(type) {
    if (type == "a") return "A";else if (type == "b") return "B";else if (type == "c") return "C";else if (type == "air") return "Авиа";else if (type == "ship") return "Водный";
  }

  examsList(player) {
    let m = _menu.menu.new(player, "Экзамен", "Список");

    examWaitList.forEach((data, targetid) => {
      let target = mp.players.at(targetid);

      if (!mp.players.exists(target)) {
        examWaitList.delete(targetid);
      } else {
        if (!data.start) {
          m.newItem({
            name: _user.user.getRpName(target),
            more: this.getLicName(data.lic),
            onpress: () => {
              if (target.dist(autoschoolPos) > 50) {
                target.notify("Вернитесь к автошколе, инструктор вас ожидает");
                player.notify(_user.user.getRpName(target) + " отошёл от автошколы, дождитесь его");
                return;
              }

              if (target.id == player.id) return player.notify("~r~Вы не можете принимать экзамен у самого себя");
              this.tehnicalStart(target, data.lic, player);
            }
          });
        }
      }
    });
    m.open();
  }

  tehnicalStart(player, lic, instructor) {
    if (!examWaitList.has(player.id)) return;
    if (examWaitList.get(player.id).start) return;
    examWaitList.get(player.id).start = true;
    let tp;

    switch (lic) {
      case "a":
        tp = "bike";
        break;

      case "b":
        tp = "vehicle";
        break;

      case "c":
        tp = "truck";
        break;

      case "air":
        tp = "heli";
        break;
    }

    let part = (0, _parking.getParkPosition)(new mp.Vector3(-797, -1304, 4), 100, tp);
    let parkPos = tp ? part : null;
    let vehicle = newVeh(player, licVehs[lic], parkPos ? parkPos : (0, _methods2.randomArrayEl)(licVehsPos[lic]));

    _user.user.showLoadDisplay(player);

    if (instructor) _user.user.showLoadDisplay(instructor);
    setTimeout(() => {
      if (!mp.players.exists(player)) return;
      if (instructor && !mp.players.exists(instructor)) return;
      if (!mp.vehicles.exists(vehicle)) return;
      player.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 0 : -1);
      if (instructor) instructor.putIntoVehicle(vehicle, _newrage.RAGE_BETA ? 1 : 0);

      _user.user.hideLoadDisplay(player);

      if (instructor) _user.user.hideLoadDisplay(instructor);
      mp.events.callClient(player, "server:autoschool:practice", lic, vehicle.id, instructor ? true : false).then(async status => {
        if (mp.players.exists(instructor) && instructor) status = await _user.user.accept(instructor, "Успешная сдача?");
        player.autoschoolExam = null;
        if (instructor) _user.user.teleport(instructor, this.position.x, this.position.y, this.position.z);
        if (instructor && status) _user.user.addCashMoney(instructor, lic.length == 1 ? licCost[lic] * 0.5 : licCost[lic] * 0.1);

        _user.user.teleport(player, this.position.x, this.position.y, this.position.z);

        if (mp.vehicles.exists(vehicle)) vehicle.destroy();
        if (!status) return player.notify("Вы не сдали практику");

        _user.user.set(player, lic + "_lic", 1);

        player.notify("Вы получили удостоверение категории " + lic);

        _user.user.updateClientCache(player);

        _user.user.questWorks(player);

        examWaitList.delete(player.id);
      });
    }, 1000);
  }

  starTheory(player, lic) {
    if (schools.theoryMap.has(_user.user.getId(player))) schools.theoryMap.delete(_user.user.getId(player));

    _menu.menu.close(player);

    _user.user.setGui(player, 'driving_school');

    this.theoryMap.set(_user.user.getId(player), status => {
      if (typeof status == "number" && status == 2) {
        _user.user.addCashMoney(player, licCost[lic]);

        player.notify("~g~Мы вернули вам средства за оплату экзамена");
        player.autoschoolExam = null;
        return;
      }

      if (!status) {
        player.notify('Вы не сдали теорию');
        player.autoschoolExam = null;
      } else {
        this.starPractice(player, lic);
      }
    });
  }

}

setTimeout(() => {
  mp.events.register('client:autoschool:theory', (player, status) => {
    if (!mp.players.exists(player)) return;
    if (!schools.theoryMap.has(_user.user.getId(player))) return;
    schools.theoryMap.get(_user.user.getId(player))(status);
    schools.theoryMap.delete(_user.user.getId(player));
  });
  mp.events.register('client:autoschool:theory:close', player => {
    if (!mp.players.exists(player)) return;
    if (!schools.theoryMap.has(_user.user.getId(player))) return;
    schools.theoryMap.get(_user.user.getId(player))(2);
    schools.theoryMap.delete(_user.user.getId(player));
  });
}, 1000);

function newVeh(player, car, spawn) {
  let carConf = _methods.methods.getVehicleInfo(car);

  let vehicle = mp.vehicles.new(car, new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5), {
    locked: false,
    engine: true,
    heading: spawn.h
  });
  vehicle.setVariable('fuel', carConf.fuel_full);
  vehicle.position = new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5);
  vehicle.numberPlate = _user.user.getId(player).toString() + " EX";
  vehicle.setColorRGB(255, 255, 255, 255, 255, 255);

  _vehicles.vehicles.setFuelFull(vehicle);

  _vehicles.vehicles.lockStatus(player, vehicle, false);

  _vehicles.vehicles.engineStatus(player, vehicle, true);

  setTimeout(() => {
    if (!mp.vehicles.exists(vehicle)) return;
    vehicle.position = new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5);
    setTimeout(() => {
      if (!mp.vehicles.exists(vehicle)) return;
      vehicle.position = new mp.Vector3(spawn.x, spawn.y, spawn.z + 0.5);
      vehicle.repair();
    }, 200);
  }, 200);
  return vehicle;
}

_chat.chat.registerCommand("pointcatch", player => {
  if (!_user.user.isAdminNow(player)) return;
  let points = [];

  let m = _menu.menu.new(player, "Сборка");

  m.newItem({
    name: "Новая",
    onpress: () => {
      player.notify("Количество точек: " + points.push(player.vehicle ? _objectSpread(_objectSpread({}, player.vehicle.position), {}, {
        h: player.vehicle.heading
      }) : _objectSpread(_objectSpread({}, player.position), {}, {
        h: player.heading
      })));
    }
  });
  m.newItem({
    name: "Сохранить",
    onpress: () => {
      _methods.methods.saveLog("pointCatch", JSON.stringify(points));
    }
  });
  m.open();
});

let schools = new autoschoolClass(autoschoolPos);

_npc.npc_dialog.new("Антонио", "Инструктор", new mp.Vector3(-705.78, -1303.13, 5.11), 60.42, "ig_tomepsilon", player => {
  _npc.npc_dialog.open(player, `Здравствуйте. Выберите что вас интересует`, ["Правила дорожного движения штата san andreas", "Порядок дорожного движения", "Общие правила", "Начало движения, маневрирование", "Сигналы светофора и регулировщика", "Правила обгона", "Дорожная разметка", "Пользование внешними световыми приборами и звуковыми сигналами", "Ничего, спасибо"]).then(res => {
    let text = "";
    if (res == 0) text = `Правила Дорожного Движения - свод правил, регулирующих обязанности участников дорожного движения (водителей транспортных средств, их пассажиров, пешеходов и т.д.), а также технические требования, предъявляемые к транспортным средствам для обеспечения безопасности дорожного движения.`;
    if (res == 1) text = `-  Движение транспортных средств является правосторонним.
    -  Все участники дорожного движения, организаторы дорожного движения и другие лица должны соблюдать требования правовых актов по дорожному движению, быть внимательными и осмотрительными в дорожном движении и обеспечивать ритмичность движения с целью предотвращения возникновения опасности и причинения вреда.
    `;
    if (res == 2) text = `- пройти обучение навыкам вождения на автомобиле или мотоцикле можно только начиная с 16 лет.
    - Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан подавать сигналы световыми указателями поворота соответствующего направления
    -  При приближении транспортного средства с включенными проблесковым маячком синего цвета и специальным звуковым сигналом водители обязаны уступить дорогу для обеспечения беспрепятственного проезда указанного транспортного средства. 
    - При съезде автомобиля правыми колесами на неукрепленную и влажную обочину возникает опасность заноса из-за разницы сцепления правых и левых колес с дорогой. При этом целесообразно, не меняя скорости, т.е. не прибегая к торможению, плавным поворотом рулевого колеса вернуть автомобиль на проезжую часть. Торможение в данной ситуации может вызвать занос автомобиля.`;
    if (res == 3) text = `- Перед началом движения, перестроением, поворотом (разворотом) и остановкой водитель обязан подавать сигналы световыми указателями поворота соответствующего направления
    - При перестроении водитель должен уступить дорогу транспортным средствам, движущимся попутно без изменения направления движения. При одновременном перестроении транспортных средств, движущихся попутно, водитель должен уступить дорогу транспортному средству, находящемуся справа
    - При выезде на дорогу с прилегающей территории водитель должен уступить дорогу транспортным средствам и пешеходам, движущимся по ней, а при съезде с дороги - пешеходам и велосипедистам, путь движения которых он пересекает`;
    if (res == 4) text = `Круглые сигналы светофора имеют следующие значения:
    - ЗЕЛЕНЫЙ СИГНАЛ разрешает движение;
    - ЗЕЛЕНЫЙ МИГАЮЩИЙ СИГНАЛ  разрешает движение и информирует вас о том, что в скоре будет включен запрещающий сигнал
    - ЖЕЛТЫЙ МИГАЮЩИЙ СИГНАЛ разрешает движение и информирует о наличии нерегулируемого перекрестка или пешеходного перехода, предупреждает об опасности;
    - КРАСНЫЙ СИГНАЛ, в том числе мигающий, запрещает движение.`;
    if (res == 5) text = `Перед началом обгона водитель должен убедиться в том, что:
    - водитель транспортного средства, которое двигается впереди по той самой полосе, не подал сигнал о намерении поворота (перестроение) налево;
    - полоса , предназначенная для встречного движения, свободна на достаточно для обгона расстоянии;
    -  ваше транспортное средство никто не обгоняет.
    - водителю обгоняемого транспортного средства запрещается препятствовать обгону путем повышения скорости движения или иными действиями.`;
    if (res == 6) text = `Белые и желтые линии - Могут быть сплошными и прерывистыми, одиночными и двойными. Они используются для отделения полос и разделения движения потоков транспортных средств.
    Желтые линии - отделяют полосы движения транспортных средств движущихся в противоположном направлении. Так-же одиночная желтая линия может отделять правую кромку обочины на шоссе.
    Белые линии - отделяют полосы движения транспортных средств движущихся в одном направлении. Так-же одиночная желтая линия может отделять правую кромку обочины на шоссе.
    - Прерывистая одиночная желтая линия - Следует держаться правее от линии, за исключением случая когда вы обгоняете впереди идущее Т/С. Вы можете пересекать прерывистую желтую линию только для безопасного обгона впереди идущих транспортных средств, и в случаях пересечения перекрестка если это обусловлено дорожной разметкой .
    - Прерывисто-сплошная двойная желтая линия - Сплошная желтая линия справа от прерывистой желтой линии означает что по встречной полосе на этом участке обгон запрещен (за исключением безопасного поворота налево на перекрестках, проезда прямо на перекрестках если это обусловлено дорожной разметкой в виде стрелки направления движения вашей полосы “движение только прямо”). Если прерывистая желтая линия находится справа от сплошной желтой линии вы можете совершить обгон впереди идущего Т/С и занять свою полосу (даже пересекая сплошную желтую линию).
    - Двойная желтая линия - Обгон на этом участке дороге запрещен. Пересекать двойную желтую линию запрещено за исключением безопасного пересечения перекрестков если это обусловлено соответствующей дорожной разметкой .
    - Прерывистая белая линия - Используется для разделения полос движения в одном направлении.
    - Пересекать прерывистую белую линию разрешено если этот маневр будет безопасным.`;
    if (res == 7) text = `-  В темное время суток и в условиях недостаточной видимости независимо от освещения дороги, а также в тоннелях на движущемся транспортном средстве должны быть включены следующие световые приборы:
    на всех механических транспортных средствах - фары дальнего или ближнего света, на велосипедах - фары или фонари, на гужевых повозках - фонари (при их наличии);
    - Дальний свет должен быть переключен на ближний:
    в населенных пунктах, если дорога освещена;
    при встречном разъезде на расстоянии не менее чем за 150 м до транспортного средства, а также и при большем, если водитель встречного транспортного средства периодическим переключением света фар покажет необходимость этого;
    в любых других случаях для исключения возможности ослепления водителей как встречных, так и попутных транспортных средств.`;
    if (!text) return _npc.npc_dialog.close(player);

    _npc.npc_dialog.open(player, (0, _string.gtaStrToHtml)(text), ["Благодарю за информацию"]);
  });
});

mp.events.add("playerJoin", player => {
  player.autoschoolExam = null;
});
},{"../modules/methods":"qXSp","../modules/menu":"Aiz7","../user":"QE3B","../../util/methods":"Z5QB","../vehicles":"pYYy","../modules/chat":"e1Zb","./parking":"ipvo","../modules/npc":"jKJb","../../util/string":"Qkcg","../../util/newrage":"mgLX"}],"nYeO":[function(require,module,exports) {
"use strict";

var _menu = require("./modules/menu");

var _user = require("./user");

var _methods = require("./modules/methods");

var _socket = require("./socket");

mp.events.addRemoteCounted("server:user:testSetting", player => {
  let m = _menu.menu.new(player, "Экспериментальные\nфункции", "Список");

  if (!player.socket) {
    m.newItem({
      name: "Socket.IO Передача данных",
      desc: "Включить педачу данных через протокол Socket",
      onpress: async () => {
        if (!_user.user.isAdminNow(player)) {
          let pass = await _menu.menu.input(player, "Введите пароль, выданный администратором");
          if (!pass) return;
          if (pass != _methods.methods.sha256("SOCKET" + _user.user.getId(player).toString()).slice(0, 5)) return player.notify("~r~Пароль указан не верно");
        }

        if (player.socket) return player.notify("~r~Socket.IO уже включён");
        (0, _socket.socketInit)(player);
      }
    });
  }

  if (_user.user.isAdminNow(player)) {
    m.newItem({
      name: "Создать пароль для игрока",
      more: "Socket.IO",
      desc: "Этот пароль нужен для включения SocketIO",
      onpress: () => {
        _menu.menu.input(player, "Введите ID").then(ids => {
          if (!ids) return;

          _menu.menu.input(player, "Скопируйте пароль и скиньте его игроку", _methods.methods.sha256("SOCKET" + ids).slice(0, 5));
        });
      }
    });
    m.newItem({
      name: "Тест реги",
      onpress: () => {
        player.call('regtest');
      }
    });
    m.newItem({
      name: "Тест ПК",
      onpress: () => _user.user.testPC(player)
    });
  }

  m.newItem({
    name: "Тест соединения",
    more: "Ping",
    onpress: () => _user.user.testNet(player)
  });
  m.open();
});
},{"./modules/menu":"Aiz7","./user":"QE3B","./modules/methods":"qXSp","./socket":"wJlv"}],"QCba":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testMode = void 0;

var _newrage = require("../util/newrage");

require("./promisehack");

require("../util/string");

var _v = _interopRequireDefault(require("v8"));

require("./customEvent");

require("./modules/events");

require("./modules/shutdown");

require("./modules/data");

require("./modules/fly");

require("./modules/mp");

require("./modules/doors");

require("./log");

require("./voice/voice");

require("./web");

require("./socket");

require("./ragevoice");

require("./modules/teleport");

require("./modules/npc");

require("./modules/quest");

var _chest = require("./modules/chest");

require("./modules/mobile");

require("./managers/restart");

var _parking = require("./managers/parking");

require("./managers/attach_system");

require("./managers/newPrototype");

require("./managers/tablet.events");

require("./managers/pickup.gift");

require("./managers/february.event");

var _gangwar = require("./modules/gangwar");

require("./modules/gang.deliver");

require("./modules/ach");

require("./modules/casino_slot_machines");

require("./modules/casino_roulette");

require("./modules/casino_threecard_poker");

require("./modules/casino_dice");

require("./modules/fingerpoint");

require("./modules/christmas");

require("./modules/skate");

require("./modules/c4grab");

require("./modules/pacific.grab");

require("./modules/casino.grab");

require("./modules/fleeca.grab");

require("./modules/army.weapon.grab");

require("./modules/duels");

var _auction = require("./modules/auction");

var _mysql = require("./modules/mysql");

var _methods = require("./modules/methods");

var _pickups = require("./modules/pickups");

var _vehicleInfo = require("./modules/vehicleInfo");

var _timer = require("./modules/timer");

var _weather = require("./managers/weather");

var _tax = require("./managers/tax");

var _mafiaWar = require("./managers/mafiaWar");

var _object = require("./managers/object");

var _inventory = require("./inventory");

var _coffer = require("./coffer");

var _houses = require("./houses");

var _condo = require("./condo");

var _stock = require("./stock");

var _apartments = require("./apartments");

var _vehicles = require("./vehicles");

var _cloth = require("./business/cloth");

var _fuel = require("./business/fuel");

var _shop = require("./business/shop");

var _carWash = require("./business/carWash");

var _barberShop = require("./business/barberShop");

var _bank = require("./business/bank");

var _rent = require("./business/rent");

var _gun = require("./business/gun");

var _lsc = require("./business/lsc");

var _bar = require("./business/bar");

var _tattoo = require("./business/tattoo");

var _index = require("./business/autosalon/index");

require("./modules/race2");

require("./managers/cameraRecord");

require("./jobs");

require("./managers/autoschool");

require("./modules/nosql");

require("./test");

require("./modules/admin");

var _garderob = require("./modules/garderob");

var _fractionVehicles = require("./modules/fraction.vehicles.spawn");

var _sequelize = require("./modules/sequelize");

var _moneyChest = require("./modules/moneyChest");

var _whitelist = require("./modules/whitelist");

var _customchest = require("./modules/customchest");

var _user = require("./modules/entity/user");

var _user2 = require("./user");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (mp.peds) {
  (0, _newrage.SET_RAGE_BETA)();
  console.warn("SERVER IN NEW RAGE MOD");
}

let errorLogWitten = false;
process.on('warning', warning => {
  console.warn(warning.name);
  console.warn(warning.message);
  console.warn(warning.stack);
  if (errorLogWitten) return;
  errorLogWitten = true;
  setTimeout(() => {
    errorLogWitten = false;
  }, 2000);
  let text = `
  !!! warning !!!
  ${warning.name}
  --------
  ${warning.message}
  ${warning.stack}
  --------
  LAST DEBUG
  ${JSON.stringify(_methods.lastMessageLog)}
  --------







  `;

  _methods.methods.saveLog('warningLog', text);
});
process.on('uncaughtException', function (err) {
  if (errorLogWitten) return;
  errorLogWitten = true;
  setTimeout(() => {
    errorLogWitten = false;
  }, 2000);
  let text = `
  !!! uncaughtException !!!
  ${err.name}
  --------
  ${err.message}
  --------
  LAST DEBUG
  ${JSON.stringify(_methods.lastMessageLog)}
  --------







  `;
  console.log(err);
});
process.on('unhandledRejection', (reason, promise) => {
  if (errorLogWitten) return;
  errorLogWitten = true;
  setTimeout(() => {
    errorLogWitten = false;
  }, 2000);
  let text = `
  !!! unhandledRejection !!!
  reason
  ${JSON.stringify(reason)}
  promise
  ${JSON.stringify(promise)}
  --------
  LAST DEBUG
  ${JSON.stringify(_methods.lastMessageLog)}
  --------




  `;
  console.log("unhandledRejection");

  _methods.methods.saveLog('errorLog', text);
});
setInterval(() => {
  let total = {
    cpu: process.cpuUsage(),
    mem: process.memoryUsage(),
    uptime: process.uptime()
  };
  const used = process.memoryUsage().heapUsed / 1024 / 1024;

  const totalHeapSize = _v.default.getHeapStatistics().total_available_size;

  let totalHeapSizaInMB = (totalHeapSize / 1024 / 1024).toFixed(2);

  _methods.methods.saveLog('cpuUsage', JSON.stringify(total));

  _methods.methods.saveLog('cpuUsage', `The script uses approximately ${used} MB`);

  _methods.methods.saveLog('cpuUsage', `V8 Total Heap Size ${totalHeapSizaInMB} MB`);
}, 30000);

function fatalWork() {
  console.log(_methods.lastMessageLog);

  _methods.methods.saveAll();

  (0, _user2.saveNoSQLplayerData)();
  if (_methods.methods.isTestServer()) return process.exit(0);
}

process.on('SIGABRT', fatalWork);
process.on('SIGSEGV', fatalWork);
process.on('SIGHUP', fatalWork);
process.on('SIGQUIT', fatalWork);
process.on('SIGTERM', fatalWork);
process.on('SIGINT', fatalWork);
let testMode = false;
exports.testMode = testMode;
let oneinit = false;

async function init() {
  _methods.methods.debug('init');

  console.log('INIT GAMEMODE');
  (0, _sequelize.sequelizeInit)().then(async () => {
    if (oneinit) return;
    oneinit = true;

    _houses.houses.loadAll();

    _condo.condo.loadAll();

    _stock.stock.loadAll();

    _apartments.apartments.loadAll();

    _customchest.chest.load();

    _whitelist.whitelist.load();

    (0, _gangwar.reloadGangWarZones)();

    _vehicles.vehicles.reloadBoostList();

    (0, _mysql.loadIntervalsMySQL)();
    (0, _parking.loadParkPlace)();

    _tax.tax.loadAll();

    (0, _chest.initChests)();

    _mafiaWar.mafiaWar.loadAll();

    _methods.methods.loadInteriorCheckpoints();

    _methods.methods.loadAllBlips();

    _cloth.cloth.loadAll();

    _weather.weather.loadAll();

    _vehicleInfo.vehicleInfo.loadAll();

    _inventory.inventory.loadAll();

    _pickups.pickups.createPickups();

    _coffer.coffer.load();

    _vehicles.vehicles.checkVehiclesFuel();

    _vehicles.vehicles.loadAllTimers();

    _vehicles.vehicles.loadAll();

    _object.object.loadAll();

    _timer.timer.loadAll();

    _tattoo.tattoo.loadAll();

    _lsc.lsc.loadAll();

    _fuel.fuel.loadAll();

    _shop.shop.loadAll();

    _bank.bank.loadAll();

    _barberShop.barberShop.loadAll();

    _rent.rent.loadAll();

    _gun.gun.loadAll();

    _bar.bar.loadAll();

    _carWash.carWash.loadAll();

    _index.autosalon.loadAll();

    (0, _auction.loadAuction)();
    (0, _garderob.loadGarderobs)();
    (0, _fractionVehicles.loadFractionGarages)();
    (0, _moneyChest.loadMoneyChests)();

    _methods.methods.saveLog('LoadServer', 'Success');

    setInterval(_methods.methods.saveAllAnother, 15 * 1000 * 60);

    _user.userEntity.update({
      is_online: 0
    }, {
      where: {}
    });
  }).catch(e => {
    _methods.methods.debug(e);

    _methods.methods.saveLog('LoadServer', e);
  });
}

init();
},{"../util/newrage":"mgLX","./promisehack":"r9AO","../util/string":"Qkcg","./customEvent":"ARQI","./modules/events":"d3wo","./modules/shutdown":"jffZ","./modules/data":"Edcz","./modules/fly":"VDhe","./modules/mp":"KjEE","./modules/doors":"H2nx","./log":"MNUA","./voice/voice":"T7py","./web":"txRo","./socket":"wJlv","./ragevoice":"VUJK","./modules/teleport":"xEa3","./modules/npc":"jKJb","./modules/quest":"SGiU","./modules/chest":"eVha","./modules/mobile":"cEZh","./managers/restart":"kxRx","./managers/parking":"ipvo","./managers/attach_system":"uwcG","./managers/newPrototype":"Gj2G","./managers/tablet.events":"Fdqv","./managers/pickup.gift":"Sogq","./managers/february.event":"kkgo","./modules/gangwar":"cDXP","./modules/gang.deliver":"VWAY","./modules/ach":"ygeq","./modules/casino_slot_machines":"Rr1D","./modules/casino_roulette":"XMgA","./modules/casino_threecard_poker":"hevW","./modules/casino_dice":"JvB6","./modules/fingerpoint":"dnPV","./modules/christmas":"M8KQ","./modules/skate":"LKpP","./modules/c4grab":"TX0E","./modules/pacific.grab":"QNCd","./modules/casino.grab":"MZmO","./modules/fleeca.grab":"uhmi","./modules/army.weapon.grab":"anIM","./modules/duels":"LfX4","./modules/auction":"PrTm","./modules/mysql":"dPRi","./modules/methods":"qXSp","./modules/pickups":"xTdX","./modules/vehicleInfo":"f3Ap","./modules/timer":"BpKR","./managers/weather":"uehX","./managers/tax":"PN4J","./managers/mafiaWar":"hwMc","./managers/object":"o1IG","./inventory":"m5ow","./coffer":"sKID","./houses":"buna","./condo":"YoDO","./stock":"MdNj","./apartments":"qIZj","./vehicles":"pYYy","./business/cloth":"Lio2","./business/fuel":"nyp7","./business/shop":"e2yF","./business/carWash":"L23J","./business/barberShop":"bktO","./business/bank":"MvN0","./business/rent":"G8F2","./business/gun":"Y0m3","./business/lsc":"C62B","./business/bar":"ZO2Y","./business/tattoo":"Iy5w","./business/autosalon/index":"JYAF","./modules/race2":"n1sh","./managers/cameraRecord":"zg97","./jobs":"eOAh","./managers/autoschool":"GLPL","./modules/nosql":"kYse","./test":"nYeO","./modules/admin":"s4Xg","./modules/garderob":"IU8T","./modules/fraction.vehicles.spawn":"CvBw","./modules/sequelize":"ylsz","./modules/moneyChest":"HIeq","./modules/whitelist":"HCq8","./modules/customchest":"sAsv","./modules/entity/user":"xF3w","./user":"QE3B"}]},{},["QCba"], null)
//# sourceMappingURL=/index.js.map