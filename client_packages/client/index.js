var parcelRequire; // modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"mgLX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SET_RAGE_BETA = exports.RAGE_BETA = void 0;
let RAGE_BETA = false;
exports.RAGE_BETA = RAGE_BETA;

const SET_RAGE_BETA = () => {
  exports.RAGE_BETA = RAGE_BETA = true;
};

exports.SET_RAGE_BETA = SET_RAGE_BETA;
},{}],"Z8LL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MainEvent = void 0;

class MainEvent {
  constructor() {
    this.eventRemoteRequestId = 0;
    this.eventRemoteRequestData = new Map();
    this.eventID = 0;
    this.containerLocal = new Map();
    this.container = new Map();
    this.eventRemoteRequestId = 1;
    this.eventRemoteRequestData = new Map();
    this.eventID = 1;
    this.containerLocal = new Map();
  }

  registerLocal(name, func) {
    console.log(`REGISTER Local Event \`${name}\``);
    const id = this.eventID;
    const self = {
      destroy: () => {
        this.containerLocal.delete(id);
      },
      eventId: id,
      eventName: name,
      env: 'local'
    };
    Object.defineProperties(self, {
      eventName: {
        writable: false
      },
      eventId: {
        writable: false
      },
      destroy: {
        writable: false
      }
    });
    this.containerLocal.set(id, func.bind(self));
    this.eventID++;
    return {
      id,
      destroy: self.destroy,
      name,
      env: 'local'
    };
  }

  triggerLocal(name, ...args) {
    this.containerLocal.forEach(item => {
      if (item.eventName == name) {
        item.bind(item.prototype)(...args);
      }
    });
  }

  async callLocal(name, ...args) {
    try {
      const values = await Promise.all([...this.containerLocal].map(([_, item]) => {
        if (item.prototype.eventName == name) {
          return new Promise((resolve, reject) => {
            resolve(item.bind(item.prototype)(...args));
          });
        }
      }));

      if (!values.length) {
        return Promise.reject(new Error(`Local Event \`${name}\` not found`));
      } else if (values.length == 1) {
        return values[0];
      } else {
        return values;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }

}

exports.MainEvent = MainEvent;
},{}],"Z5QB":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTime = void 0;
exports.getRandomInt = getRandomInt;
exports.wait = exports.testJSON = exports.sleep = exports.randomArrayEl = exports.getTime = void 0;

const testJSON = text => {
  if (typeof text !== 'string') {
    return false;
  }

  try {
    JSON.parse(text);
    return true;
  } catch (error) {
    return false;
  }
};

exports.testJSON = testJSON;

const sleep = (ms = 500) => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

exports.sleep = sleep;

const wait = (ms = 500) => {
  return new Promise(resolve => setTimeout(resolve, ms));
};

exports.wait = wait;

const getTime = function (from = null) {
  let time;
  if (from == null) time = new Date();else time = new Date(from);
  let hours = time.getHours();
  let minutes = time.getMinutes();
  let seconds = time.getSeconds();
  let ms = time.getMilliseconds();
  let m = time.getTime();
  let full = ms + seconds * 1000 + minutes * 60 * 1000 + hours * 60 * 60 * 1000;
  let res = {
    hour: hours,
    minutes: minutes,
    seconds: seconds,
    ms: ms,
    m: m,
    full: full,
    index: time
  };
  return res;
};

exports.getTime = getTime;

function randEl(arr, length = 0) {
  if (arr.length == 0) return null;
  const newArr = [...arr];

  if (length > 1) {
    let resArr = [];

    for (let id = 0; id < length; id++) {
      let id = getRandomInt(0, newArr.length - 1);
      resArr.push(newArr[id]);
      newArr.splice(id, 1);
    }
  } else {
    return newArr[getRandomInt(0, newArr.length - 1)];
  }
}

const randomArrayEl = randEl;
exports.randomArrayEl = randomArrayEl;

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

const formatTime = time => {
  let minutes = Math.floor(time / 60);
  let seconds = time % 60;
  let minutes_str = String(minutes);
  let seconds_str = String(seconds);
  if (minutes < 10) minutes_str = `0${minutes}`;
  if (seconds < 10) seconds_str = `0${seconds}`;
  return `${minutes_str}:${seconds_str}`;
};

exports.formatTime = formatTime;
},{}],"Edcz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Container = void 0;

var _methods = require("./methods");

let _data = new Map();

let Debug = false;

const UUID = a => {
  return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, UUID);
};

const uniqueIds = new Set();

const createId = () => {
  let id = UUID();

  while (uniqueIds.has(id)) {
    id = UUID();
  }

  uniqueIds.add(id);
  return id;
};

let promises = new Map();

let handlerHas = (uuid, data) => {
  _methods.methods.debug('Event: modules:client:data:Has', uuid, data);

  uniqueIds.delete(uuid);

  if (promises.has(uuid)) {
    const promise = promises.get(uuid);
    promise.resolve(data);
  }

  promises.delete(uuid);
};

let handlerGet = (uuid, data) => {
  _methods.methods.debug('Event: modules:client:data:Get', uuid, data);

  uniqueIds.delete(uuid);

  if (promises.has(uuid)) {
    const promise = promises.get(uuid);
    promise.resolve(data);
  }

  promises.delete(uuid);
};

let handlerGetAll = (uuid, data) => {
  _methods.methods.debug('Event: modules:client:data:GetAll', uuid, data);

  uniqueIds.delete(uuid);

  if (promises.has(uuid)) {
    const promise = promises.get(uuid);
    promise.resolve(new Map(data));
  }

  promises.delete(uuid);
};

mp.events.add('modules:client:data:Has', handlerHas);
mp.events.add('modules:client:data:Get', handlerGet);
mp.events.add('modules:client:data:GetAll', handlerGetAll);

class Container {
  static SetLocally(id, key, value) {
    try {
      if (_data.has(id) && _data.get(id) !== undefined && _data.get(id) !== null) {
        _data.set(id, _data.get(id).set(key, value));
      } else {
        var _values = new Map();

        _values.set(key, value);

        _data.set(id, _values);
      }

      if (Debug) {
        _methods.methods.debug(`CLNT: [SET-LOCALLY] ID: ${id}, KEY: ${key}, OBJECT: ${value}`);
      }
    } catch (e) {
      _methods.methods.debug(`CLNT: [SET-LOCALLY] ERR: ${e}`);
    }
  }

  static ResetLocally(id, key) {
    try {
      if (!_data.has(id)) return;
      if (!_data.get(id).has(key) || _data.get(id) == undefined || _data.get(id) == null) return;

      _data.get(id).delete(key);

      if (Debug) {
        _methods.methods.debug(`CLNT: [RESET-LOCALLY] ID: ${id}, KEY: ${key}`);
      }
    } catch (e) {
      _methods.methods.debug(`CLNT: [RESET-LOCALLY] ERR: ${e}`);
    }
  }

  static GetLocally(id, key) {
    try {
      if (Debug) {
        _methods.methods.debug(`CLNT: [GET-LOCALLY] ID: ${id}, KEY: ${key}`);
      }

      if (!_data.has(id)) return null;
      return _data.get(id).get(key);
    } catch (e) {
      _methods.methods.debug(`CLNT: [GET-LOCALLY] ERR: ${e}`);
    }
  }

  static HasLocally(id, key) {
    try {
      if (Debug) {
        _methods.methods.debug(`CLNT: [HAS] ID: ${id}, KEY: ${key}`);
      }

      if (!_data.has(id)) return false;
      return _data.get(id).has(key);
    } catch (e) {
      _methods.methods.debug(`CLNT: [HAS] ERR: ${e}`);
    }
  }

  static GetAllLocally(id) {
    try {
      if (Debug) {
        _methods.methods.debug(`CLNT: [GET-ALL-LOCALLY] ID: ${id}`);
      }

      if (!_data.has(id)) return new Map();
      return _data.get(id);
    } catch (e) {
      _methods.methods.debug(`CLNT: [GET-ALL-LOCALLY] ERR: ${e}`);
    }
  }

  static Set(id, key, value) {
    try {
      if (Debug) {
        _methods.methods.debug(`CLNT: [SET] ID: ${id}, KEY: ${key}, OBJECT: ${value}`);
      }

      mp.events.callRemote('modules:server:data:Set', id, key, value);
    } catch (e) {
      _methods.methods.debug(`CLNT: [SET] ERR: ${e}`);
    }
  }

  static Reset(id, key) {
    try {
      if (Debug) {
        _methods.methods.debug(`CLNT: [RESET] ID: ${id}, KEY: ${key}`);
      }

      mp.events.callRemote('modules:server:data:Reset', id, key);
    } catch (e) {
      _methods.methods.debug(`CLNT: [RESET] ERR: ${e}`);
    }
  }

  static async Get(id, key) {
    return new Promise((resolve, reject) => {
      try {
        const promiseId = createId();
        promises.set(promiseId, {
          resolve,
          reject
        });
        mp.events.callRemote('modules:server:data:Get', promiseId, id, key);
      } catch (e) {
        reject(e);

        _methods.methods.debug(`CLNT: [GET] ERR: ${e}`);

        return null;
      }
    });
  }

  static async GetAll(id) {
    try {
      return new Promise((resolve, reject) => {
        const promiseId = createId();
        promises.set(promiseId, {
          resolve,
          reject
        });
        mp.events.callRemote('modules:server:data:GetAll', promiseId, id);
      });
    } catch (e) {
      _methods.methods.debug(`CLNT: [GETALL] ERR: ${e}`);

      return null;
    }
  }

  static async Has(id, key) {
    try {
      return new Promise((resolve, reject) => {
        const promiseId = createId();
        promises.set(promiseId, {
          resolve,
          reject
        });
        mp.events.callRemote('modules:server:data:Has', promiseId, id, key);
      });
    } catch (e) {
      _methods.methods.debug(`CLNT: [HAS] ERR: ${e}`);

      return false;
    }
  }

}

exports.Container = Container;
},{"./methods":"qXSp"}],"bNis":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weaponCost = exports.stockSize = exports.mafiaCarsUnlockCdtimer = exports.mafiaCarsCdtimer = exports.mafiaCars = exports.kitchenIntDataUtil = exports.itemCosts = exports.businessNalog = exports.PillBoxCost = void 0;
const kitchenIntDataUtil = [[349.8293, -932.1685, 45.36568, 20000], [-1909.91, -575.0604, 18.09722, 20000], [-1282.89, 446.3326, 96.89471, 20000], [-1153.151, -1521.806, 9.642298, 20000], [-897.9225, -441.7401, 93.05853, 20000], [-852.9263, 688.3412, 151.8529, 20000], [-782.1923, 330.5791, 186.3132, 20000], [-758.5352, 610.5003, 143.1406, 20000], [-674.4797, 595.6437, 144.3797, 20000], [-618.301, 42.6407, 96.60004, 20000], [-566.1242, 656.9935, 144.832, 20000], [-111.3519, -6.549356, 69.51958, 20000], [-10.52031, -1428.414, 30.10148, 20000], [124.1809, 557.1547, 183.2971, 20000], [265.3231, -995.9853, -100.0086, 20000], [343.0825, 429.4016, 148.3808, 20000], [343.7529, -1002.998, -100.1962, 20000], [379.4201, 418.8586, 144.9001, 20000], [1395.23, 1145.007, 113.3336, 20000], [1975.355, 3818.645, 32.43632, 20000], [-9.682148, 520.001, 173.628, 30000], [-797.776, 187.5312, 71.60544, 30000], [-1440.387, 6759.043, 7.98046, 30000], [-769.8837, 340.0439, 210.397, 20000], [-787.7949, 330.3934, 157.599, 20000], [-782.215, 329.8719, 216.0382, 20000], [-778.6613, 327.9729, 195.086, 20000], [-1459.873, -534.1923, 54.52639, 20000], [-1473.994, -537.3419, 72.44417, 20000], [-31.02146, -587.9935, 87.71225, 20000], [-11.44843, -584.9959, 78.43073, 20000], [-896.725, -446.5864, 124.1319, 20000], [-912.0232, -371.7621, 83.07791, 20000], [-917.9376, -379.2882, 107.0377, 20000], [-918.7728, -386.1582, 112.6746, 20000], [-468.6447, -695.6874, 74.68432, 20000], [120.4625, -884.7316, 123.2703, 20000], [-674.1874, -858.9833, 40.64307, 20000], [-440.8985, 6274.877, 10.75166, 20000], [-57.75088, -620.3068, 75.99939, 20000], [930.5132, -548.4226, 42.63166, 20000]];
exports.kitchenIntDataUtil = kitchenIntDataUtil;
const mafiaCars = {
  EasyWeapon: 16300,
  MediumWeapon: 41200,
  HardWeapon: 78600,
  LightDrugs: 5000,
  HardDrugs: 21000,
  Ammo: 12800,
  Special: 10000,
  Bomb: 80000
};
exports.mafiaCars = mafiaCars;
const mafiaCarsCdtimer = 30 * 60 * 1000;
exports.mafiaCarsCdtimer = mafiaCarsCdtimer;
const mafiaCarsUnlockCdtimer = 15 * 60 * 1000;
exports.mafiaCarsUnlockCdtimer = mafiaCarsUnlockCdtimer;
const stockSize = {
  PlayerBase: 45100,
  House: 200000,
  Apartment: 200000,
  Bag: 40000,
  BagSmall: 10000,
  BagFull: 30000,
  BagTransfer: 500000,
  StockFraction: 21000000,
  Fridge: 100000,
  PrivateSafe: 75000,
  BigWoodBox: 250000,
  SmallWoodBox: 150000
};
exports.stockSize = stockSize;
const businessNalog = {
  GunShop: 10,
  PillBox: 40
};
exports.businessNalog = businessNalog;
const weaponCost = {
  Knife: 750,
  Knife2: 1000,
  Machete: 2000,
  Taurus: 1000,
  P99: 1250,
  Obrez: 4000,
  BenelliM3: 6000,
  P90: 7000,
  MP5A3: 5000,
  G36C: 15000,
  QBZ97: 14000,
  box127: 1800,
  box9smg: 500,
  box9pistol: 250,
  box185: 1500,
  box556: 1250,
  box762: 3000,
  armour: 500,
  armourMiddle: 2500
};
exports.weaponCost = weaponCost;
const itemCosts = {
  Bag: 1000,
  BagSmall: 25000
};
exports.itemCosts = itemCosts;
const PillBoxCost = {
  healer1: 350,
  healer2: 150,
  antipohmelin1x10: 3000,
  antipohmelin2x10: 1500,
  marih1x10: 300,
  marih2x10: 200
};
exports.PillBoxCost = PillBoxCost;
},{}],"Jhu1":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propMutil = exports.propFutil = exports.printListUtil = exports.maxAmountTransferItem = exports.itemsUtil = exports.itemsChoise = exports.isWeapon = exports.isAmmoBox = exports.inventoryTypesUtil = exports.houseFridgeCost = exports.houseFridgeAmount = exports.healItemCost3 = exports.healItemCost2 = exports.healItemCost = exports.groupItems = exports.getItemWeightInKGById = exports.getItemWeightById = exports.getItemNameHashById = exports.getItemNameById = exports.getItemName = exports.getItemHashById = exports.getItemChoises = exports.getDefaultCount = exports.convertInventoryItemObjectToArray = exports.convertInventoryItemArrayToObject = exports.clothMutil = exports.clothFutil = exports.canEquip = exports.ammoItemIdToMaxCountUtil = void 0;
const maxAmountTransferItem = 10;
exports.maxAmountTransferItem = maxAmountTransferItem;

const getItemWeightById = id => {
  try {
    return itemsUtil[id][5];
  } catch (_unused) {
    return -1;
  }
};

exports.getItemWeightById = getItemWeightById;

const getItemWeightInKGById = id => {
  return getItemWeightById(id) / 1000;
};

exports.getItemWeightInKGById = getItemWeightInKGById;

const isAmmoBox = item_id => {
  let itm = getItemNameById(item_id);
  if (!itm) return false;
  return itm.toLowerCase().indexOf('коробка патронов') == 0;
};

exports.isAmmoBox = isAmmoBox;

const getItemName = item => {
  let name = getItemNameById(item.item_id);
  let label = ``;

  if ([inventoryTypesUtil.BagTransfer, inventoryTypesUtil.Bag, inventoryTypesUtil.BagFull, inventoryTypesUtil.BagSmall].includes(item.item_id)) {
    name += ' #' + item.id;
  }

  if (isAmmoBox(item.item_id)) {
    name += ` (${item.count} шт.)`;
  }

  if ([142, 143, 144, 145].includes(item.item_id) || item.item_id >= 154 && item.item_id <= 180) {
    name += ` (${item.count} г.)`;
  }

  if ([275, 276].includes(item.item_id)) {
    name += ` (${item.count} шт.)`;
  }

  if (item.item_id == 277) {
    name += `На $${item.prefix} №${item.id}`;
    if (item.key == -1) name += ' (Использован)';else if (item.key == 0) name += ' (Ожидает розыгрыша)';else if (item.key == 1) name += ' (ПОБЕДА!)';
  }

  if (item.prefix > 0 && item.number > 0 && item.key <= 0) {
    label = item.prefix + "-" + item.number;
  } else if (item.key > 0) {
    if (item.item_id >= 265 && item.item_id <= 268) {
      if (item.prefix == 1) name = clothFutil[item.key][9];else name = clothMutil[item.key][9];
    } else if (item.item_id >= 269 && item.item_id <= 273) {
      if (item.prefix == 1) name = propFutil[item.key][5];else name = propMutil[item.key][5];
    } else {
      label = "#" + item.key;
    }
  }

  return name + " " + label;
};

exports.getItemName = getItemName;

const getItemNameById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][0];
};

exports.getItemNameById = getItemNameById;

const getItemHashById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][3];
};

exports.getItemHashById = getItemHashById;

const getItemNameHashById = id => {
  if (!itemsUtil[id]) return "";
  return itemsUtil[id][1];
};

exports.getItemNameHashById = getItemNameHashById;

const canEquip = id => {
  if (!itemsUtil[id]) return false;
  return itemsUtil[id][2];
};

exports.canEquip = canEquip;

const isWeapon = item_id => {
  if (!itemsUtil[item_id]) return false;
  return !!itemsUtil[item_id][1];
};

exports.isWeapon = isWeapon;

const groupItems = datas => {
  let data = [];
  datas.forEach(item => {
    let fnd = data.find(itm => getItemName(convertInventoryItemArrayToObject(itm)) == getItemName(convertInventoryItemArrayToObject(item)));
    if (!fnd || [265].includes(item[1])) return data.push(item);
    fnd[2] += item[2];
  });
  return data;
};

exports.groupItems = groupItems;

const convertInventoryItemArrayToObject = data => {
  return {
    id: data[0],
    item_id: data[1],
    amount: data[2],
    count: data[3],
    number: data[4],
    prefix: data[5],
    key: data[6]
  };
};

exports.convertInventoryItemArrayToObject = convertInventoryItemArrayToObject;

const convertInventoryItemObjectToArray = item => {
  return [item.id, item.item_id, item.amount, item.count, item.number, item.prefix, item.key];
};

exports.convertInventoryItemObjectToArray = convertInventoryItemObjectToArray;

const getItemChoises = (id, count, fraction) => {
  let m = itemsChoise.filter(list => {
    if (list.ids.indexOf(id) > -1) {
      if (!list.check || list.check(count, id, fraction)) return list;
    }
  });
  return m;
};

exports.getItemChoises = getItemChoises;

const ammoItemIdToMaxCountUtil = type => {
  switch (type) {
    case 147:
      return 10;

    case 148:
      return 1;

    case 149:
      return 1;

    case 150:
      return 10;

    case -152:
      return 1;

    case 151:
      return 10;

    case 146:
      return 60;

    case 28:
      return 120;

    case 30:
      return 260;

    case 27:
      return 140;

    case 153:
      return 140;

    case 29:
      return 130;

    default:
      return 1;
  }
};

exports.ammoItemIdToMaxCountUtil = ammoItemIdToMaxCountUtil;

function range(start, end) {
  let ids = [];

  for (let id = start; id < end + 1; id++) ids.push(id);

  return ids;
}

const getDefaultCount = item_id => {
  if (!itemsUtil[item_id]) return 0;
  if (isAmmoBox(item_id)) return ammoItemIdToMaxCountUtil(item_id);
  return itemsUtil[item_id][6] ? itemsUtil[item_id][6] : 1;
};

exports.getDefaultCount = getDefaultCount;
const itemsUtil = [["Верёвка", "", false, -1145063624, 1000, 4000], ["Мешок", "", false, -1194335261, 100, 2400], ["Кокаин", "", false, 1808635348, 1, 1], ["Лечебная марихуана", "", false, 671777952, 1, 5], ["Отмычка", "", false, -1803909274, 50, 6], ["Масло", "", false, -1532806025, 3000, 10000], ["Набор инструментов", "", false, 648185618, 4500, 12800], ["Электронные часы", "", true, 1169295068, 190, 110], ["Телефон", "", true, -1038739674, 120, 156], ["Канистра", "PetrolCan", false, 1069395324, 10000, 11300], ["Жвачка", "", false, 936464539, 20, 20], ["Баттончик \"Pluto\"", "", false, 936464539, 60, 30], ["Чипсы \"AppiPot\"", "", false, 936464539, 100, 1500], ["Упаковка Роллов", "", false, 936464539, 290, 2000], ["Гамбургер", "", false, 936464539, 190, 500], ["Салат Цезарь", "", false, 936464539, 200, 2000], ["Пицца", "", false, 936464539, 550, 7000], ["Жаркое", "", false, 936464539, 450, 2000], ["Кесадилья", "", false, 936464539, 2000, 2000], ["Фрикасе из кролика", "", false, 936464539, 575, 2000], ["Фрукты", "", false, 936464539, 180, 1000], ["Вода", "", false, 746336278, 330, 3500], ["Кофе", "", false, 746336278, 400, 4000], ["Чай", "", false, 746336278, 330, 3500], ["Лимонад", "", false, 746336278, 330, 3500], ["Кока-Кола", "", false, 746336278, 250, 2500], ["Энергетик", "", false, 746336278, 250, 2500], ["Коробка патронов 9mm (Пистолет)", "", true, 190687980, 1140, 432], ["Коробка патронов 18.5mm", "", true, 1560006187, 2420, 1024], ["Коробка патронов 7.62mm", "", true, 669213687, 2580, 686], ["Коробка патронов 5.56mm", "", true, 1843823183, 3620, 1568], ["Адреналин", "", false, -1282296755, 50, 6], ["Сухпаек", "", false, 9168982, 2000, 5800], ["Уголь", "", false, -756465278, 40, 6], ["Сироп", "", false, -756465278, 75, 3], ["Cосудосуживающий таблетка", "", false, -756465278, 30, 6], ["Таблетка от кашля", "", false, -756465278, 40, 6], ["Витаминки", "", false, -756465278, 55, 6], ["Жаропонижающий", "", false, -756465278, 35, 6], ["Антибиотик", "", false, -756465278, 35, 6], ["Наручники", "", false, -1281059971, 340, 120], ["Ключ от тс", "", false, 977923025, 6, 3], ["Ключ от офиса", "", true, -331172978, 6, 3], ["Ключ от дома", "", true, -331172978, 6, 3], ["Ключ от квартиры", "", true, -331172978, 6, 3], ["Маска", "", true, 9168982, 650, 2800], ["Одежда", "", false, 9168982, 650, 3800], ["Рация", "", false, -1964402432, 250, 170], ["Кошелёк", "", false, -34897201, 120, 150], ["Письма", "", false, 406712611, 80, 410], ["Банковская карта", "", true, -1282513796, 15, 8], ["Паспорт", "", false, -1750183478, 40, 16], ["Лицензия", "", false, -925658112, 30, 116], ["Удостоверение", "", false, -1595369626, 15, 8], ["Кавалерийский кинжал", "Dagger", true, 1725061196, 400, 450], ["Бейсбольная бита", "Bat", true, 1742452667, 1500, 2000], ["Боевой топор", "BattleAxe", true, 2133533553, 2200, 2400], ["Розочка", "Bottle", true, -789123952, 110, 540], ["Лом", "Crowbar", true, 1862268168, 3200, 1050], ["Фонарик", "Flashlight", true, 211760048, 340, 400], ["Клюшка для гольфа", "GolfClub", true, -580196246, 2900, 1150], ["Молоток", "Hammer", true, 64104227, 860, 430], ["Топорик", "Hatchet", true, 1653948529, 930, 860], ["Нож", "Knife", true, -1982443329, 560, 520], ["Кастет", "KnuckleDuster", true, -1803909274, 450, 80], ["Мачете", "Machete", true, -2055486531, 1120, 525], ["Полицейская дубинка", "Nightstick", true, -1634978236, 880, 970], ["Разводной ключ", "Wrench", true, 10555072, 1760, 1490], ["Бильярдный кий", "PoolCue", true, -1982443329, 470, 160], ["Выкидной нож", "SwitchBlade", true, 1653948529, 130, 60], ["Сolt SCAMP", "APPistol", true, 905830540, 1500, 950], ["P99", "CombatPistol", true, 403140669, 800, 660], ["Сигнальный пистолет", "FlareGun", true, 1349014803, 440, 270], ["Enterprise Wide Body 1911", "HeavyPistol", true, 1927398017, 1120, 850], ["Raging Bull", "Revolver", true, 1430410579, 1440, 1080], ["Raging Bull Mk II", "Revolver_Mk2", true, 1430410579, 1990, 1080], ["Contender G2", "MarksmanPistol", true, 1430410579, 1360, 1800], ["Taurus PT92", "Pistol", true, 1467525553, 950, 1230], ["Beretta 90Two", "PistolMk2", true, 1430410579, 920, 1050], ["Desert Eagle", "Pistol50", true, -178484015, 1700, 1720], ["HK P7M10", "SNSPistol", true, 339962010, 785, 660], ["Colt Junior", "SNSPistol_Mk2", true, 1430410579, 365, 310], ["Шокер", "StunGun", true, 1609356763, 760, 680], ["FN Model 1922", "VintagePistol", true, -1124046276, 700, 720], ["Colt New Service", "DoubleAction", true, 1430410579, 1450, 1170], ["UTS-15", "AssaultShotgun", true, 1255410010, 2800, 11500], ["KSG 12", "BullpupShotgun", true, -1598212834, 3100, 9500], ["Обрез", "DoubleBarrelShotgun", true, -1920611843, 1410, 1800], ["Сайга-12К", "HeavyShotgun", true, -1209868881, 3500, 10900], ["Land Pattern Musket", "Musket", true, 1652015642, 4300, 14400], ["Benelli M3", "PumpShotgun", true, 689760839, 4500, 16100], ["Benelli M4", "PumpShotgun_Mk2", true, 798951501, 3500, 17600], ["Mossberg 500", "SawnOffShotgun", true, -675841386, 2100, 3800], ["Protecta", "SweeperShotgun", true, -1920611843, 2900, 6800], ["P-90", "AssaultSMG", true, -473574177, 2800, 8800], ["Mk 48", "CombatMG", true, -739394447, 8000, 16000], ["HK MG4", "CombatMG_Mk2", true, 798951501, 8150, 17600], ["SIG MPX-SD", "CombatPDW", true, -1393014804, 2700, 5000], ["Thompson M1918A1", "Gusenberg", true, 574348740, 8400, 18400], ["Intratec TEC-9", "MachinePistol", true, 1430410579, 1500, 1660], ["ПКП «Печенег»", "MG", true, -2056364402, 8200, 17250], ["Mini Uzi", "MicroSMG", true, -1056713654, 2650, 2500], ["Scorpion vz.61", "MiniSMG", true, 1430410579, 2000, 1900], ["MP5A3", "SMG", true, -500057996, 3200, 7800], ["MP5K", "SMG_Mk2", true, -1920611843, 3350, 8100], ["Tavor CTar-21", "AdvancedRifle", true, -1707584974, 3270, 12400], ["AK-102", "AssaultRifle", true, 273925117, 3200, 14700], ["AK-103", "AssaultRifle_Mk2", true, 798951501, 3600, 16200], ["QBZ-97", "BullpupRifle", true, -1288559573, 3250, 13500], ["QBZ-95", "BullpupRifle_Mk2", true, 798951501, 3350, 13900], ["HK-416", "CarbineRifle", true, 1026431720, 3490, 8500], ["HK-416A5", "CarbineRifle_Mk2", true, 798951501, 3560, 8500], ["AKS-47u", "CompactRifle", true, -1920611843, 2400, 5700], ["G36C", "SpecialCarbine", true, -1745643757, 2980, 12000], ["G36KV", "SpecialCarbine_Mk2", true, 798951501, 3370, 13900], ["M107", "HeavySniper", true, -746966080, 13500, 21000], ["XM109", "HeavySniper_Mk2", true, 798951501, 14000, 24500], ["M14 EBR", "MarksmanRifle", true, -1711248638, 5100, 17800], ["SOCOM 16", "MarksmanRifle_Mk2", true, 798951501, 5900, 18200], ["L115A3", "SniperRifle", true, 346403307, 6600, 14400], ["M79", "CompactGrenadeLauncher", true, -1920611843, 50, 2050], ["Пиротехническая установка", "Firework", true, 491091384, 8500, 29000], ["M32 MGL", "GrenadeLauncher", true, -606683246, 5300, 19500], ["FIM 92 Stinger", "HomingLauncher", true, 1901887007, 13500, 29000], ["M134", "Minigun", true, 422658457, 30000, 50000], ["Рельсовое оружие", "Railgun", true, -1876506235, 14900, 22500], ["РПГ-7", "RPG", true, -218858073, 6000, 46000], ["Мяч", "Ball", true, -383950123, 250, 310], ["Дымовая гранта", "SmokeGrenade", true, -1936212109, 690, 485], ["Сигнальный огонь", "Flare", true, -1564193152, 250, 180], ["Граната", "Grenade", true, 290600267, 890, 410], ["Коктейль Молотова", "Molotov", true, -880609331, 660, 720], ["Неконтактная мина", "ProximityMine", true, 1876445962, 850, 1200], ["Самодельная бомба", "PipeBomb", true, 848107085, 430, 180], ["Снежок", "Snowball", true, 1297482736, 250, 310], ["Бомба-липучка", "StickyBomb", true, -1110203649, 750, 1200], ["Слезоточивый газ", "BZGas", true, 1591549914, 690, 485], ["Парашют", "Parachute", true, -1679378668, 3200, 7500], ["Купюра 1$", "", true, 1814532926, 1, 1], ["Купюра 100$", "", true, 1597489407, 1, 1], ["Маленькая пачка 100$", "", true, -1170050911, 100, 100], ["Большая пачка 100$", "", true, -1448063107, 300, 300], ["Упаковка кокаина", "", false, 525896218, 1000, 1000, 1000], ["Упаковка марихуаны", "", false, -395076527, 200, 1000, 200], ["Упаковка кокаина", "", false, -1688127, 5000, 5000, 5000], ["Упаковка марихуаны", "", false, -680115871, 800, 4000, 800], ["Коробка патронов 12.7mm", "", true, 1843823183, 8900, 1568], ["Коробка патронов сингального пистолета", "", true, 1843823183, 1600, 1568], ["Коробка патронов феерверка", "", true, 1843823183, 1600, 1568], ["Коробка патронов RPG", "", true, 1843823183, 2200, 1568], ["Коробка патронов", "", true, 1843823183, 3800, 1568], ["Коробка подствольных гранат", "", true, 1843823183, 3800, 1568], ["Коробка патронов Stinger", "", true, 1843823183, 1500, 1568], ["Коробка патронов 9mm (SMG)", "", true, 190687980, 1140, 432], ["Кокаин", "", false, 1808635348, 10, 10, 10], ["Лечебная марихуана", "", false, 671777952, 10, 10, 10], ["Кокаин", "", false, 1808635348, 50, 50, 50], ["Лечебная марихуана", "", false, 671777952, 50, 50, 50], ["Амфетамин", "", false, 1808635348, 1, 1, 10], ["DMT", "", false, 1808635348, 1, 1, 10], ["Мефедрон", "", false, 1808635348, 1, 1, 10], ["Кетамин", "", false, 671777952, 1, 5, 5], ["LSD", "", false, 671777952, 1, 5, 5], ["Упаковка амфетамина", "", false, 525896218, 1000, 1000, 1000], ["Упаковка амфетамина", "", false, -1688127, 5000, 5000, 5000], ["Упаковка DMT", "", false, 525896218, 1000, 1000, 1000], ["Упаковка DMT", "", false, -1688127, 5000, 5000, 5000], ["Упаковка мефедрона", "", false, 525896218, 1000, 1000, 1000], ["Упаковка мефедрона", "", false, -1688127, 5000, 5000, 5000], ["Упаковка кетамина", "", false, 1430410579, 1000, 3000, 1000], ["Упаковка LSD", "", false, 1430410579, 1000, 3000, 1000], ["Амфетамин", "", false, 1808635348, 10, 10, 10], ["DMT", "", false, 1808635348, 10, 10, 10], ["Мефедрон", "", false, 1808635348, 10, 10, 10], ["Кетамин", "", false, 671777952, 10, 50, 10], ["LSD", "", false, 671777952, 10, 50, 10], ["Амфетамин", "", false, 1808635348, 50, 50, 50], ["DMT", "", false, 1808635348, 50, 50, 50], ["Мефедрон", "", false, 1808635348, 50, 50, 50], ["Кетамин", "", false, 671777952, 50, 250, 50], ["LSD", "", false, 671777952, 50, 250, 50], ["Деревянный ящик Gray Tea", "", false, -1147461795, 15000, 500000], ["Коробка Листов A4", "", false, 1465830963, 2500, 40000], ["Коробка Redwood", "", false, 1465830963, 2500, 35000], ["Коробка Clucking Bell", "", false, 250374685, 15000, 70000], ["Коробка Jo Jo diet Cola", "", false, -1244905398, 8000, 25000], ["Коробка Craft", "", false, -517243780, 40000, 70000], ["Коробка Fish and Roll", "", false, -1563678327, 60000, 450000], ["Деревянный ящик GoPostal", "", false, -1649986476, 19000, 300000], ["Огромная деревянный ящик", "", false, 1955876122, 420000, 5000000], ["Важная деревянный ящик", "", false, 307713837, 120000, 1250000], ["Коробка из китая", "", false, -1513883840, 35000, 450000], ["Важная коробка", "", false, -1438964996, 12000, 250000], ["Маленькая коробка", "", false, -721895765, 4000, 55000], ["Полосатая бочка", "", false, 546252211, 30000, 5000], ["Ограждение со стрелкой", "", false, 1867879106, 8000, 5000], ["Длинное ограждение", "", false, -205311355, 10000, 5000], ["Деревянное ограждение", "", false, 1072616162, 5000, 5000], ["Деревянное ограждение с огнём", "", false, 1329951119, 5000, 5000], ["Полицейское огорождение", "", false, -143315610, 9000, 5000], ["Длинный полосатый конус", "", false, 939377219, 1000, 3000], ["Полосатый конус", "", false, 1245865676, 1000, 3000], ["Красный конус", "", false, 862664990, 1000, 3000], ["Длинный конус с огнями", "", false, -1587301201, 1000, 3000], ["Капсула с таблетками", "", false, -2127785247, 50, 25], ["Огромная стекляная бутыль", "", false, -1382355819, 3000, 6750], ["Капсула с таблетками", "", false, -756465278, 50, 30], ["Бутыль", "", false, 393961710, 250, 250], ["Сироп", "", false, 1648892290, 120, 170], ["Большая стекляная банка", "", false, 566302905, 1500, 4200], ["Стекляная банка", "", false, -2034834785, 500, 1400], ["Контейнер с пробирками", "", false, -330775550, 4500, 6000], ["Контейнер для пробирок", "", false, -192665395, 2000, 6000], ["Пробирка", "", false, -2022085894, 500, 60], ["Шприц", "", false, -61966571, 50, 6], ["Аптечка", "", false, 678958360, 500, 880], ["Бинт", "", false, 546339338, 70, 280], ["Большой бинт", "", false, 580223600, 120, 410], ["Таблетки", "", false, -1129328507, 20, 10], ["Бутыль с перекисью водорода", "", false, 1254553771, 3000, 8000], ["Упаковка таблеток", "", false, 1787587532, 50, 130], ["Антипохмелин", "", false, 1547095841, 12, 130], ["Упаковка таблеток", "", false, 1174512311, 50, 130], ["Сырое мясо кабана", "", false, 936464539, 4000, 10000], ["Сырое мясо ястреба", "", false, 936464539, 300, 2000], ["Сырое мясо коровы", "", false, 936464539, 4000, 10000], ["Сырое мясо баклана", "", false, 936464539, 290, 1500], ["Сырое мясо оленя", "", false, 936464539, 4000, 15000], ["Сырое мясо курицы", "", false, 936464539, 290, 1500], ["Сырое мясо свиньи", "", false, 936464539, 4000, 10000], ["Сырое мясо кролика", "", false, 936464539, 500, 3000], ["Сырое мясо крысы", "", false, 936464539, 50, 500], ["Мясо кабана", "", false, 936464539, 4000, 10000], ["Мясо ястреба", "", false, 936464539, 300, 2000], ["Мясо коровы", "", false, 936464539, 4000, 10000], ["Мясо баклана", "", false, 936464539, 290, 1500], ["Мясо оленя", "", false, 936464539, 4000, 12000], ["Мясо курицы", "", false, 936464539, 290, 1500], ["Мясо свиньи", "", false, 936464539, 4000, 10000], ["Мясо кролика", "", false, 936464539, 500, 3000], ["Мясо крысы", "", false, 936464539, 100, 1000], ["Сырое мясо тунца", "", false, 936464539, 1000, 3000], ["Сырое мясо окуня", "", false, 936464539, 300, 800], ["Сырое мясо краба", "", false, 936464539, 600, 4000], ["Сырое мясо лосося", "", false, 936464539, 290, 1000], ["Сырое мясо креветок", "", false, 936464539, 290, 600], ["Мясо тунца", "", false, 936464539, 1000, 3000], ["Мясо окуня", "", false, 936464539, 300, 800], ["Мясо краба", "", false, 936464539, 600, 4000], ["Мясо лосося", "", false, 936464539, 290, 1000], ["Мясо креветок", "", false, 936464539, 290, 600], ["Удочка", "", false, 1338703913, 3560, 5500], ["Бронежилет", "", false, 701173564, 3560, 5000], ["Игральные кости", "", false, -1803909274, 50, 6], ["Маленький розовый член", "", false, -422877666, 250, 195], ["Красный вибратор ", "", false, -463441113, 450, 440], ["Фиолетовый член", "", false, -731262150, 330, 290], ["Кожаный член", "", false, -1980613044, 320, 285], ["Позолоченный член", "", false, 2009373169, 390, 180], ["Металлический член", "", false, -1921596075, 390, 180], ["Большой резиновый член", "", false, 1333481871, 950, 2100], ["Анальная смазка", "", false, 1553232197, 250, 540], ["C4 (Мощная)", "StickyBomb", false, -1110203649, 750, 1200], ["Специальная отмычка", "", false, -1803909274, 50, 6], ["Маска", "", true, -1211793417, 400, 1350], ["Одежда", "", true, -1158162337, 2000, 2500], ["Штаны", "", true, -1158162337, 2000, 2500], ["Обувь", "", true, 101151147, 1500, 3000], ["Аксессуар", "", true, 1267833770, 400, 1200], ["Головной убор", "", true, 1267833770, 500, 1500], ["Очки", "", true, 1298569174, 200, 350], ["Серьги", "", true, 1267833770, 150, 90], ["Часы", "", true, 1267833770, 250, 300], ["Браслет", "", true, 1267833770, 250, 300], ["Маска", "", true, 1267833770, 400, 1200], ["Коробка отмычек", "", false, 1267833770, 500, 60, 10], ["Коробка спец. отмычек", "", false, 1267833770, 1500, 180, 30], ["Лот. билет", "", false, 406712611, 80, 410], ["Спец. Аптечка", "", false, 678958360, 500, 880], ["Сноуборд", "", false, 3328693117, 500, 880], ["Пакет", "", false, -1158162337, 1000, 1000], ["Тяжёлая сумка", "", false, -1158162337, 1000, 1000], ["Планшет", "", true, 1943210810, 300, 300], ["Чемодан для перевозки", "", false, -1158162337, 1000, 1000], ["Лёгкая сумка", "", false, -1158162337, 1000, 1000], ["Дорожные шипы", "", false, -596599738, 10000, 10000]];
exports.itemsUtil = itemsUtil;
const inventoryTypesUtil = {
  World: 0,
  Player: 1,
  VehicleOwner: 2,
  VehicleServer: 3,
  VehicleNpc: 4,
  House: 5,
  Apartment: 6,
  Vehicle: 8,
  StockFraction: 9,
  Fridge: 10,
  UserStock: 11,
  UserStockMax: 22,
  Bag: 280,
  BagFull: 281,
  BagSmall: 284,
  BagTransfer: 283
};
exports.inventoryTypesUtil = inventoryTypesUtil;
const healItemCost = 250;
exports.healItemCost = healItemCost;
const healItemCost2 = 500;
exports.healItemCost2 = healItemCost2;
const healItemCost3 = 250;
exports.healItemCost3 = healItemCost3;
const itemsChoise = [{
  ids: [279],
  task: "skate",
  name: "Прокатиться"
}, {
  ids: [215],
  task: "upNearest10",
  name: "Реанимировать человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [278],
  task: "upNearest100",
  name: "Реанимировать человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215, 278],
  task: "healNearest",
  name: "Вылечить человека рядом (Бесплатно)",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215, 278],
  task: "healNearestPay",
  name: "Вылечить человека рядом ($" + healItemCost3 + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [215],
  task: "upNearestPay10",
  name: "Реанимировать человека рядом ($" + healItemCost + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [278],
  task: "upNearestPay100",
  name: "Реанимировать человека рядом ($" + healItemCost2 + ")",
  check: (count, itemid, fraction) => {
    if (typeof fraction == "number") {
      if (fraction == 16) return true;else return false;
    }

    return true;
  }
}, {
  ids: [275, 276],
  task: "countPlayerItemButton",
  name: "Посчитать"
}, {
  ids: [140, 141],
  task: "countMoneyPlayerItemButton",
  name: "Посчитать"
}, {
  ids: [146, 147, 148, 149, 150, 151, 152, 153, 27, 28, 29, 30],
  task: "countBulletsPlayerItemButton",
  name: "Посчитать"
}, {
  ids: range(0, 9999),
  task: "usePlayerItemButton",
  name: "Использовать",
  check: (count, itemid) => {
    if (canEquip(itemid)) {
      if (itemid == 7 || itemid == 63) return true;
    } else {
      if (itemid != 275 && itemid != 276 && itemid != 277) return true;
    }

    return false;
  }
}, {
  ids: [277],
  task: "transferLotoItemButton",
  name: "Обменять в любом 24/7"
}, {
  ids: [277],
  task: "infoLotoItemButton",
  name: "Информация о билете"
}, {
  ids: range(0, 9999),
  task: "equipItemButton",
  name: "Экипировать",
  check: (count, item) => {
    return canEquip(item);
  }
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeOneGrammPlayerItemButton",
  name: "Взять 1гр."
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeTenGrammPlayerItemButton",
  name: "Взять 10гр.",
  check: count => count >= 10
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "takeFiftyGrammPlayerItemButton",
  name: "Взять 50гр.",
  check: count => count >= 50
}, {
  ids: [...range(142, 145), ...range(154, 157), ...range(163, 180)],
  task: "weighPlayerItemButton",
  name: "Взвесить"
}, {
  ids: [275, 276],
  task: "takeOneItemPlayerItemButton",
  name: "Взять 1шт."
}];
exports.itemsChoise = itemsChoise;
const clothFutil = [[0, 4, 45, 2, -1, -1, -1, -1, 75, "Свободные штаны с карманами", -20, 30], [0, 4, 3, 14, -1, -1, -1, -1, 80, "Мятые штаны", -20, 30], [0, 4, 58, 2, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [0, 4, 66, 9, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [0, 4, 71, 16, -1, -1, -1, -1, 115, "Шаровары", -25, 30], [0, 4, 104, 12, -1, -1, -1, -1, 125, "Заказные Шаровары", -25, 30], [0, 4, 80, 6, -1, -1, -1, -1, 90, "Спортивные штаны", -10, 35], [0, 4, 84, 8, -1, -1, -1, -1, 105, "Низкие джинсы", -10, 40], [0, 4, 101, 24, -1, -1, -1, -1, 90, "Штаны с карманами", -25, 30], [0, 4, 82, 6, -1, -1, -1, -1, 65, "Спортивные бриджи", 10, 50], [0, 4, 2, 1, -1, -1, -1, -1, 55, "Спортивные бриджи", 15, 50], [0, 4, 10, 1, -1, -1, -1, -1, 25, "Спортивные шорты", 15, 60], [0, 4, 14, 0, -1, -1, -1, -1, 35, "Шорты", 20, 60], [0, 4, 16, 10, -1, -1, -1, -1, 35, "Шорты", 20, 60], [0, 4, 78, 2, -1, -1, -1, -1, 45, "Шорты с чулками", 15, 45], [0, 4, 17, 10, -1, -1, -1, -1, 15, "Низ от бикини", 25, 99], [0, 4, 21, -1, -1, -1, -1, -1, 5, "Низ от Мини-Бикини", 25, 99], [0, 4, 57, 6, -1, -1, -1, -1, 60, "Низ от халата", 10, 50], [0, 11, 0, 14, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [0, 11, 1, 1, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [0, 11, 3, 3, 3, -1, -1, -1, 140, "Толстовка", 5, 30], [0, 11, 10, 1, 0, -1, 21, 0, 135, "Спортивная ветровка", 5, 30], [0, 11, 11, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 16, 5, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 17, -1, 14, -1, -1, -1, 80, "Гавайская рубашка", 15, 45], [0, 11, 18, 10, 15, -1, -1, -1, 50, "Верх бикини", 25, 99], [0, 11, 19, 2, 12, -1, -1, -1, 75, "Новогодняя футболк с вырезом", 15, 50], [0, 11, 23, 1, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [0, 11, 31, 5, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [0, 11, 32, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [0, 11, 33, 7, 4, -1, -1, -1, 60, "Кроп-Майка", 25, 60], [0, 11, 36, 3, 4, -1, -1, -1, 75, "Фирменный верх купальника", 20, 60], [0, 11, 37, 4, 4, -1, -1, -1, 180, "Сарафан", 15, 45], [0, 11, 49, 0, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 54, 2, 3, -1, -1, -1, 175, "Старая Мото-Куртка", -15, 30], [0, 11, 55, -1, 3, -1, -1, -1, 135, "Старая тёплая куртка", -20, 25], [0, 11, 73, 1, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 74, 1, 4, -1, -1, -1, 30, "Майка", 20, 60], [0, 11, 75, 2, 9, -1, -1, -1, 85, "Задраный джемпер", 10, 40], [0, 11, 76, 3, 9, -1, -1, -1, 90, "Бейбсбольная рубашка", 15, 50], [0, 11, 77, -1, 9, -1, -1, -1, 95, "Рабочая куртка", -5, 30], [0, 11, 96, -1, 14, -1, -1, -1, 80, "Гавайская рубашка", 15, 45], [0, 11, 97, -1, 3, -1, 67, 2, 135, "Старая ветровка", -15, 30], [0, 11, 102, -1, 3, -1, -1, -1, 210, "Старая кожаная куртка", -20, 30], [0, 11, 105, 6, 4, -1, -1, -1, 90, "Верх от халата", 15, 50], [0, 11, 106, 2, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [0, 11, 107, -1, 2, -1, 67, 2, 250, "Старое пальто", -20, 30], [0, 11, 108, 1, 3, -1, 67, 2, 110, "Старая куртка Санты", -5, 30], [0, 11, 120, 15, 5, -1, 60, 0, 80, "Открытая винтажная рубашка", 15, 40], [0, 11, 121, 15, 3, -1, -1, -1, 80, "Закрытая винтажная рубашка", 10, 35], [0, 11, 123, 10, 3, -1, -1, -1, 115, "Старый свитшот", 5, 30], [0, 11, 125, 8, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 126, 1, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 132, 5, 14, -1, -1, -1, 80, "Рубашка с рисунком", 15, 45], [0, 11, 138, 9, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [0, 11, 141, 4, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 146, 8, 7, -1, 44, 0, 125, "Старая Шоу-Куртка", -5, 30], [0, 11, 148, 4, 7, -1, 51, 0, 85, "Потёртая кожаная куртка", -10, 30], [0, 11, 152, 2, 7, -1, 44, 0, 125, "Старая Мото-Куртка", -1, 30], [0, 11, 154, 2, 4, -1, 60, 0, 80, "Кожаный жилет", 15, 40], [0, 11, 161, 0, 2, -1, -1, -1, 35, "Бейсбольная рубашка", 15, 50], [0, 11, 163, 4, 2, -1, 26, 0, 145, "Кожаная куртка", -15, 30], [0, 11, 166, 2, 2, -1, 26, 0, 105, "Джинсовая куртка", -10, 30], [0, 11, 167, 2, 4, -1, 60, 0, 75, "Джинсовый жилет", 15, 40], [0, 11, 168, 4, 4, -1, -1, -1, 25, "Рваная майка", 20, 60], [0, 11, 169, 4, 4, -1, -1, -1, 30, "Рваная футболка", 20, 60], [0, 11, 170, 4, 4, -1, -1, -1, 20, "Рваный топик", 20, 60], [0, 11, 171, 6, 4, -1, -1, -1, 55, "Завязанная рубашка", 15, 50], [0, 11, 172, 0, 3, -1, -1, -1, 85, "Худи", 5, 30], [0, 11, 173, -1, 4, -1, -1, -1, 65, "Кожаный Кроп-Жилет", 20, 55], [0, 11, 242, 8, 6, -1, 51, 0, 180, "Закрытая охотничья куртка", -20, 25], [0, 11, 243, 8, 6, -1, 51, 0, 180, "Открытая охотничья куртка", -5, 30], [0, 11, 247, 24, 15, -1, -1, -1, 40, "Спортивная майка", 20, 60], [0, 6, 5, 0, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 10, 2, -1, -1, -1, -1, 55, "Кросовки", -10, 50], [0, 6, 16, 10, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 17, -1, -1, -1, -1, -1, 40, "Ботинки Эльфа", -5, 50], [0, 6, 30, -1, -1, -1, -1, -1, 145, "Поношеные высокие туфли", -30, 30], [0, 6, 59, 0, -1, -1, -1, -1, 85, "Поношеные ботинки", -30, 30], [0, 6, 60, 10, -1, -1, -1, -1, 60, "Старые патрули", -10, 50], [0, 6, 67, 12, -1, -1, -1, -1, 80, "Старые фирменные кеды", -10, 50], [0, 6, 83, 0, -1, -1, -1, -1, 90, "Покрашенные высокие ботинки", -30, 30], [0, 6, 84, 0, -1, -1, -1, -1, 65, "Покрашенные низкие ботинки", -30, 30], [0, 6, 85, 1, -1, -1, -1, -1, 95, "Винтажные высокие ботинки", -30, 30], [0, 6, 86, 1, -1, -1, -1, -1, 70, "Винтажные низкие ботинки", -30, 30], [0, 7, 9, -1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 15, 3, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 83, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 84, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [0, 7, 93, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [1, 4, 0, 14, -1, -1, -1, -1, 320, "Джинсы в обтяжку", -15, 40], [1, 4, 1, 14, -1, -1, -1, -1, 250, "Потёртые джинсы", -20, 35], [1, 4, 4, 14, -1, -1, -1, -1, 255, "Джинсы с подворотами", 10, 40], [1, 4, 8, 14, -1, -1, -1, -1, 210, "Мини-Юбка в обтяжку", 15, 50], [1, 4, 9, 14, -1, -1, -1, -1, 220, "Мини-Юбка с пайетками", 15, 50], [1, 4, 11, 14, -1, -1, -1, -1, 335, "Штаны с карманами", 10, 40], [1, 4, 12, 14, -1, -1, -1, -1, 190, "Расклешённая Мини-Юбка", 15, 50], [1, 4, 24, 11, -1, -1, -1, -1, 330, "Юбка до колена", 15, 50], [1, 4, 25, 11, -1, -1, -1, -1, 210, "Джинсовые шорты", 15, 50], [1, 4, 27, 14, -1, -1, -1, -1, 225, "Глянцовые леггинсы", -10, 40], [1, 4, 28, -1, -1, -1, -1, -1, 210, "Полосатя Мини-Юбка", 15, 50], [1, 4, 31, 2, -1, -1, -1, -1, 245, "Новогоднии леггинсы", -5, 40], [1, 4, 43, 3, -1, -1, -1, -1, 370, "Джинсы с разрезами на молниях", 5, 40], [1, 4, 106, 6, -1, -1, -1, -1, 380, "Фирменные джинсы с раз. на молниях", 5, 40], [1, 4, 44, 3, -1, -1, -1, -1, 355, "Джинсы с разрезами", 5, 40], [1, 4, 112, 10, -1, -1, -1, -1, 390, "Джинсы на прошиве", -15, 35], [1, 4, 47, 5, -1, -1, -1, -1, 260, "Пижамные штаны", 10, 35], [1, 4, 51, 3, -1, -1, -1, -1, 200, "Матовые лосины", 10, 40], [1, 4, 54, 2, -1, -1, -1, -1, 210, "Глянцевые лосины", -5, 40], [1, 4, 55, -1, -1, -1, -1, -1, 370, "Эксклюзивные леггинсы", -10, 40], [1, 4, 56, 4, -1, -1, -1, -1, 105, "Заказной низ от бикини", 25, 99], [1, 4, 60, 14, -1, -1, -1, -1, 150, "Новогоднии пижамные штаны", 10, 35], [1, 4, 67, 12, -1, -1, -1, -1, 140, "Пижамные штаны", 10, 35], [1, 4, 73, 4, -1, -1, -1, -1, 285, "Джеггинсы", -15, 35], [1, 4, 74, 4, -1, -1, -1, -1, 275, "Рваные джеггинсы", -5, 40], [1, 4, 75, 1, -1, -1, -1, -1, 345, "Глянцевые джинсы", -15, 35], [1, 4, 76, 1, -1, -1, -1, -1, 350, "Рельефные глянцевые джинсы", -15, 35], [1, 4, 77, 1, -1, -1, -1, -1, 360, "Заказные глянцевые джинсы", -15, 35], [1, 4, 81, 1, -1, -1, -1, -1, 160, "Глянцевые спортивные штаны", -10, 40], [1, 4, 83, 1, -1, -1, -1, -1, 125, "Глянцевые спортивные бриджи", 15, 50], [1, 4, 85, 2, -1, -1, -1, -1, 190, "Глянцевые низкие джинсы", -10, 40], [1, 4, 87, 14, -1, -1, -1, -1, 225, "Заказные леггинсы", -10, 40], [1, 4, 102, 19, -1, -1, -1, -1, 380, "Глянцевые легинсы с ремнями", -15, 30], [1, 4, 108, 14, -1, -1, -1, -1, 220, "Фирменная расклешённая Мини-Юбка", 15, 50], [1, 11, 2, 14, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 8, 1, 1, -1, 20, 0, 690, "Кожаная куртка", 10, 35], [1, 11, 14, 14, 14, -1, -1, -1, 210, "Поло", 15, 50], [1, 11, 30, 1, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 35, 10, 1, -1, 20, 0, 690, "Кожаная куртка", 10, 35], [1, 11, 38, 2, 2, -1, -1, -1, 180, "Футболка на плечо", 15, 50], [1, 11, 40, 0, 2, -1, -1, -1, 180, "Патриотичная футболка на плечо", 15, 50], [1, 11, 44, 1, 3, -1, -1, -1, 285, "Новогодний свитер", 10, 40], [1, 11, 45, 2, -1, -1, -1, -1, 285, "Новогодний свитер", 10, 40], [1, 11, 63, 4, 3, -1, 44, 0, 590, "Куртка с капюшоном", -15, 30], [1, 11, 67, -1, 2, -1, -1, -1, 380, "Золотая футболка на плечо", 15, 50], [1, 11, 68, 18, 14, -1, -1, -1, 155, "Заказная футболка", 15, 50], [1, 11, 71, 14, 4, -1, -1, -1, 245, "Задранный свитер", 10, 40], [1, 11, 72, -1, 3, -1, -1, -1, 510, "Бомбер Wolf", -5, 35], [1, 11, 78, 6, 9, -1, -1, -1, 425, "Свитшот", 5, 30], [1, 11, 79, 2, 1, -1, -1, -1, 245, "Задранный свитер", 10, 40], [1, 11, 81, 10, 3, -1, -1, -1, 525, "Фирменный бомбер", -10, 35], [1, 11, 83, 5, 9, -1, -1, -1, 190, "Пижамная рубашка", 10, 35], [1, 11, 84, 1, 14, -1, -1, -1, 225, "Фирменное поло", 15, 50], [1, 11, 98, 3, 3, -1, -1, -1, 415, "Китайская рубашка", -5, 35], [1, 11, 101, 4, 15, -1, -1, -1, 155, "Заказной верх от бикини", 25, 99], [1, 11, 109, 14, 1, -1, -1, -1, 210, "Новогодняя пижамная рубашка", 10, 35], [1, 11, 110, 8, 3, -1, -1, -1, 490, "Мото-Куртка", -15, 35], [1, 11, 117, 1, 11, -1, -1, -1, 260, "Заправленная задранная футболка", 20, 60], [1, 11, 195, 24, 4, -1, -1, -1, 120, "Фирменная рваная футболка", 20, 60], [1, 11, 118, 1, 11, -1, -1, -1, 160, "Задранная футболка", 20, 60], [1, 11, 119, 1, 11, -1, -1, -1, 285, "Рубашка с карманами", 15, 50], [1, 11, 140, 8, 3, -1, -1, -1, 390, "Бомбер", -10, 35], [1, 11, 142, 12, 9, -1, -1, -1, 190, "Пижамная рубашка", 10, 35], [1, 11, 145, 10, 3, -1, -1, -1, 490, "Мото-Куртка", -10, 30], [1, 11, 149, 14, 3, -1, -1, -1, 265, "Мото-Свитер", 10, 35], [1, 11, 155, 1, 4, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 162, 5, 2, -1, -1, -1, 310, "Мото-Жилет со свитером", -5, 35], [1, 11, 164, 14, 4, -1, 52, 0, 590, "Пуховик", -25, 25], [1, 11, 165, 1, 4, -1, 51, 0, 425, "Кожаное худи", -10, 30], [1, 11, 179, 5, 11, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 186, 2, 3, -1, -1, -1, 650, "Заказная закрытая парка", -20, 25], [1, 11, 187, 2, 9, -1, 52, 0, 650, "Заказная открытая парка", -5, 30], [1, 11, 189, 11, 1, -1, 55, 0, 515, "Длинное худи", -15, 35], [1, 11, 190, 9, 3, -1, -1, -1, 650, "Закрытая парка", -20, 25], [1, 11, 191, 9, 9, -1, 52, 0, 650, "Открытая парка", -5, 30], [1, 11, 192, 24, 5, -1, -1, -1, 370, "Заказной свитер", 10, 30], [1, 11, 193, 24, 4, -1, 52, 0, 590, "Заказной пуховик", -25, 25], [1, 11, 194, 10, 4, -1, 52, 0, 790, "Заканое пальто", -15, 25], [1, 11, 196, 1, 3, -1, -1, -1, 620, "Новогодний неоновый свитер", 10, 30], [1, 11, 197, 1, 3, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 198, 14, 9, -1, -1, -1, 620, "Рождественский неоновый свитер", 10, 30], [1, 11, 198, 14, 9, -1, -1, -1, 320, "Рождественский свитер", 10, 30], [1, 11, 200, 6, 9, -1, -1, -1, 590, "Новогодняя неоновая теп. кофта", -5, 25], [1, 11, 201, 6, 9, -1, -1, -1, 290, "Новогодняя теплая кофта", -5, 25], [1, 11, 202, 24, 3, -1, -1, -1, 310, "Заказное худи", 5, 30], [1, 11, 207, 3, 4, -1, -1, -1, 250, "Жилет с капюшоном", 15, 45], [1, 11, 208, 15, 11, -1, -1, -1, 90, "Заправленная майка", 20, 60], [1, 11, 209, 15, 11, -1, -1, -1, 90, "Майка", 20, 60], [1, 11, 227, 13, 3, -1, -1, -1, 435, "Заказная куртка", -25, 25], [1, 11, 147, 10, 3, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 150, 24, 3, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 233, 11, 4, -1, -1, -1, 330, "Фирменный тёплый жилет", 10, 30], [1, 11, 234, 14, 6, -1, -1, -1, 460, "Фирменная тёплая куртка", -20, 30], [1, 11, 239, 10, 3, -1, -1, -1, 425, "Закрытый бомбер", -10, 30], [1, 11, 240, 10, 1, -1, 52, 0, 425, "Открытый бомбер", -5, 35], [1, 11, 246, 10, 14, -1, -1, -1, 250, "Фирменное поло", 15, 50], [1, 11, 249, 4, 14, -1, -1, -1, 270, "Заказное поло", 15, 50], [1, 11, 252, 24, 14, -1, 51, 0, 710, "Модная куртка с карманами", -25, 30], [1, 11, 253, 8, 14, -1, -1, -1, 220, "Новогодний свитер", 10, 40], [1, 11, 255, 24, 11, -1, -1, -1, 320, "Модный жилет с карманами", 15, 35], [1, 11, 259, 24, 3, -1, -1, -1, 880, "Анорак", -25, 30], [1, 6, 1, 14, -1, -1, -1, -1, 220, "Скейтерские кеды", 5, 50], [1, 6, 2, 14, -1, -1, -1, -1, 290, "Угги", -30, 30], [1, 6, 3, 14, -1, -1, -1, -1, 205, "Низкие кеды", -10, 50], [1, 6, 4, 2, -1, -1, -1, -1, 210, "Кросовки ProLaps", -10, 50], [1, 6, 11, 2, -1, -1, -1, -1, 275, "Патрули", -10, 50], [1, 6, 31, -1, -1, -1, -1, -1, 575, "Золотые патрули", -10, 50], [1, 6, 32, 3, -1, -1, -1, -1, 215, "Фирменные кросовки", -10, 50], [1, 6, 33, 6, -1, -1, -1, -1, 255, "Теплые кеды", -20, 50], [1, 6, 47, 8, -1, -1, -1, -1, 225, "Мото-Кросовки", -10, 50], [1, 6, 49, 0, -1, -1, -1, -1, 285, "Кеды", -10, 50], [1, 6, 50, 0, -1, -1, -1, -1, 285, "Кеды", -10, 50], [1, 6, 58, 8, -1, -1, -1, -1, 640, "Неоновые кеды", -10, 50], [1, 6, 73, 24, -1, -1, -1, -1, 415, "Фирменные сапоги", -30, 30], [1, 6, 74, 24, -1, -1, -1, -1, 345, "Фирменные ботинки", -30, 30], [1, 6, 75, 24, -1, -1, -1, -1, 400, "Фирменные высокие кроссовки", -30, 30], [1, 6, 76, 24, -1, -1, -1, -1, 330, "Фирменные кроссовки", -10, 50], [1, 6, 77, 7, -1, -1, -1, -1, 450, "Модные ботинки на каблуке", -30, 30], [1, 6, 81, 24, -1, -1, -1, -1, 440, "Светодиодные кроссовки", -10, 50], [2, 4, 6, 1, -1, -1, -1, -1, 960, "Кожаные брюки", -15, 40], [2, 4, 7, 0, -1, -1, -1, -1, 1090, "Кожаная юбка", 15, 40], [2, 4, 18, 0, -1, -1, -1, -1, 1190, "Офисная юбка", 15, 40], [2, 4, 19, 3, -1, -1, -1, -1, 450, "Кружевные шорты", 25, 99], [2, 4, 20, 1, -1, -1, -1, -1, 750, "Трусы с чулками", 25, 99], [2, 4, 23, 11, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 26, -1, -1, -1, -1, -1, 550, "Леопардовая Мини-Юбка", 15, 60], [2, 4, 34, -1, -1, -1, -1, -1, 810, "Брюки на ремне", -15, 40], [2, 4, 36, 2, -1, -1, -1, -1, 1190, "Офисная юбка", 15, 40], [2, 4, 37, 5, -1, -1, -1, -1, 545, "Прямые брюки", -15, 40], [2, 4, 41, 2, -1, -1, -1, -1, 585, "Свободные штаны на ремне", -15, 40], [2, 4, 50, 2, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 52, 2, -1, -1, -1, -1, 860, "Брюки", -15, 40], [2, 4, 53, -1, -1, -1, -1, -1, 1160, "Эксклюзивные брюки", -15, 40], [2, 4, 62, 10, -1, -1, -1, -1, 450, "Кружевные шорты", 25, 99], [2, 4, 63, 10, -1, -1, -1, -1, 750, "Трусы с чулками", 25, 99], [2, 4, 64, 2, -1, -1, -1, -1, 725, "Брюки с карманами", -15, 40], [2, 11, 6, 1, 1, -1, 20, 0, 1290, "Жакет", 5, 35], [2, 11, 7, 1, 6, -1, 20, 0, 1890, "Открытый пиджак", 5, 35], [2, 11, 9, 13, -1, -1, -1, -1, 1190, "Задранная рубашка", 15, 45], [2, 11, 244, 24, 9, -1, -1, -1, 1490, "Заказная задранная рубашка", 15, 45], [2, 11, 13, 14, 4, -1, -1, -1, 650, "Корсет", 20, 60], [2, 11, 20, 0, 1, -1, 18, 0, 1390, "Новогодний жакет", 5, 35], [2, 11, 21, 4, 4, -1, -1, -1, 2490, "Винтажное платье", 20, 50], [2, 11, 22, 3, 4, -1, -1, -1, 790, "Кружевной корсет", 20, 60], [2, 11, 24, 10, 1, -1, 20, 0, 1290, "Жакет", 5, 35], [2, 11, 25, 9, 6, -1, 20, 0, 1890, "Открытый пиджак", 5, 35], [2, 11, 26, 11, 12, -1, -1, -1, 490, "Плиссированная майка", 20, 60], [2, 11, 28, 14, 0, -1, 24, 3, 890, "Жилетка с рубашкой", 15, 45], [2, 11, 39, -1, 5, -1, -1, -1, 1790, "Патриотичный фрак", 5, 35], [2, 11, 51, -1, 3, -1, 41, 1, 1690, "Фрак", 5, 35], [2, 11, 52, 2, 3, -1, 41, 1, 860, "Открытый мятый пиджак", 5, 35], [2, 11, 53, 2, 1, -1, 41, 1, 860, "Закрытый мятый пиджак", 5, 35], [2, 11, 57, 7, 3, -1, 41, 1, 2690, "Открытый пиджак с жилетом", -5, 35], [2, 11, 58, 7, 1, -1, 41, 1, 2690, "Закрытый пиджак с жилетом", -5, 35], [2, 11, 64, 3, 3, -1, 67, 2, 4250, "Пальто", -25, 30], [2, 11, 65, 10, 6, -1, 53, 0, 7990, "Куртка с мехом", -30, 25], [2, 11, 248, 4, 6, -1, 53, 0, 7990, "Куртка с мехом", -30, 25], [0, 11, 135, 1, 3, -1, -1, -1, 4500, "Кожаная куртка", -20, 30], [0, 11, 133, 5, 3, -1, 67, 2, 3100, "Ветровка", -15, 30], [0, 11, 139, 1, 3, -1, 67, 2, 250, "Пальто", -25, 30], [2, 11, 66, 2, 1, -1, 60, 0, 3490, "Кожаный пиджак на поясе", -5, 30], [2, 11, 69, -1, 1, -1, 53, 0, 2780, "Заказная кожаная куртка", -15, 30], [2, 11, 70, 3, -1, -1, 53, 0, 3090, "Пальто на поясе", -25, 30], [2, 11, 90, 3, 6, -1, 0, 1, 2690, "Заказной открытый пиджак", 5, 35], [2, 11, 91, 3, 6, -1, 1, 1, 2690, "Заказной закрытый пиджак", 5, 35], [2, 11, 92, 2, 5, -1, 0, 1, 3190, "Открытый глянцевый пидждак", 5, 35], [2, 11, 93, 2, 5, -1, 1, 1, 3190, "Закрытый глянцевый пиджак", 5, 35], [2, 11, 94, -1, 5, -1, 0, 1, 5290, "Элитный закрытый пиджак", 5, 35], [2, 11, 95, -1, 5, -1, 1, 1, 5290, "Элитный открытый пиджак", 5, 35], [2, 11, 99, 9, 4, -1, 60, 0, 3590, "Раритетный пиджак", -5, 35], [2, 11, 143, 12, 4, -1, 60, 0, 3590, "Раритетный пиджак", -5, 35], [2, 11, 111, 10, 4, -1, -1, -1, 790, "Заказной корсет", 20, 60], [2, 11, 112, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #1", 20, 50], [2, 11, 113, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #2", 20, 50], [2, 11, 114, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #3", 20, 50], [2, 11, 115, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #4", 20, 50], [2, 11, 116, 1, 4, -1, -1, -1, 1790, "Платье Арт-Деко #5", 20, 50], [2, 11, 137, 13, 3, -1, 66, 4, 2890, "Пиджак на пуговицах", -5, 35], [2, 11, 185, 4, 6, -1, 21, 0, 2250, "Праздничный пиджак", 5, 35], [2, 6, 0, 2, -1, -1, -1, -1, 880, "Высокие туфли", 10, 50], [2, 6, 6, 2, -1, -1, -1, -1, 960, "Острые высокие туфли", 10, 50], [2, 6, 7, 14, -1, -1, -1, -1, 1150, "Ботинки на каблуке", -30, 30], [2, 6, 8, 14, -1, -1, -1, -1, 1020, "Закрытые высокие туфли", -10, 30], [2, 6, 9, 2, -1, -1, -1, -1, 1420, "Сапоги", -25, 30], [2, 6, 13, 14, -1, -1, -1, -1, 320, "Балетки", 10, 50], [2, 6, 14, 14, -1, -1, -1, -1, 1290, "Открытые высокие туфли", 10, 50], [2, 6, 15, 14, -1, -1, -1, -1, 590, "Заказные сандали", 20, 60], [2, 6, 18, 1, -1, -1, -1, -1, 975, "Заказные туфли с подложкой", 5, 50], [2, 6, 19, 10, -1, -1, -1, -1, 880, "Высокие туфли", 10, 50], [2, 6, 20, 10, -1, -1, -1, -1, 960, "Острые выоские туфли", 10, 50], [2, 6, 21, 8, -1, -1, -1, -1, 1420, "Сапоги", -25, 30], [2, 6, 22, 14, -1, -1, -1, -1, 1320, "Закрытые выоские туфли", -25, 30], [2, 6, 23, 1, -1, -1, -1, -1, 1100, "Фирменные высокие туфли", 10, 50], [2, 6, 29, 1, -1, -1, -1, -1, 780, "Туфли", -15, 50], [2, 6, 37, 2, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 50], [2, 6, 38, 0, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 39, 0, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 41, 10, -1, -1, -1, -1, 975, "Заказные туфли с подложкой", 5, 50], [2, 6, 42, 10, -1, -1, -1, -1, 950, "Заказные высокие туфли", 10, 50], [2, 6, 43, 6, -1, -1, -1, -1, 780, "Туфли на толстом каблуке", -20, 30], [2, 6, 44, 6, -1, -1, -1, -1, 770, "Туфли на шнурках", -15, 30], [2, 6, 45, 9, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 46, 9, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 51, 4, -1, -1, -1, -1, 1295, "Кожаные сапоги", -25, 25], [2, 6, 52, 4, -1, -1, -1, -1, 1075, "Кожаные ботинки", -20, 30], [2, 6, 53, 0, -1, -1, -1, -1, 620, "Зимние ботикнки", -30, 20], [2, 6, 56, 1, -1, -1, -1, -1, 950, "Сапоги на застёжках", -25, 25], [2, 6, 55, 1, -1, -1, -1, -1, 650, "Ботинки на застёжках", -20, 30], [2, 6, 92, 10, -1, -1, -1, -1, 820, "Меховые сапоги", -30, 20], [2, 7, 13, 4, -1, -1, -1, -1, 260, "Дамский галстук", -99, 99], [2, 7, 19, -1, -1, -1, -1, -1, 170, "Свободная бабочка", -99, 99], [2, 7, 20, 14, -1, -1, -1, -1, 195, "Свободный галстук", -99, 99], [2, 7, 21, 1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 22, 14, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 23, 1, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [2, 7, 26, 14, -1, -1, -1, -1, 195, "Свободный галстук (под)", -99, 99], [2, 7, 27, 1, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 28, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [3, 4, 30, 3, -1, -1, -1, -1, 285, "Камуфляжные бриджи", 5, 35], [3, 4, 89, 22, -1, -1, -1, -1, 320, "Камуфляжные карго-штаны", -30, 30], [3, 4, 91, 22, -1, -1, -1, -1, 115, "Камуфляжные карго-шорты", 15, 50], [3, 4, 109, 16, -1, -1, -1, -1, 150, "Камуфляжные штаны", -25, 25], [3, 4, 110, 16, -1, -1, -1, -1, 110, "Камуфляжные шорты", -25, 25], [3, 11, 43, 3, 3, -1, -1, -1, 390, "Свитер с накладками", 5, 30], [3, 11, 210, 22, 4, -1, -1, -1, 250, "Камуфляжный жилет с капюшоном", 15, 35], [3, 11, 212, 22, 14, -1, -1, -1, 135, "Камуфляжная футболка", 15, 50], [3, 11, 213, 22, 3, -1, -1, -1, 465, "Камуфялжная заказная куртка", -20, 30], [3, 11, 214, 22, 3, -1, -1, -1, 675, "Камуфляжная закрытая парка", -25, 25], [3, 11, 216, 22, 9, -1, 52, 0, 675, "Камуфляжная открытая парка", -5, 30], [3, 11, 217, 22, 4, -1, -1, -1, 325, "Камуфляжный Мото-Жилет", 10, 35], [3, 11, 218, 22, 2, -1, -1, -1, 325, "Камуфляжная Мото-Кофта", -10, 30], [3, 11, 219, 22, 2, -1, 26, 0, 125, "Камуфляжная джинсовая куртка", -10, 30], [3, 11, 220, 22, 4, -1, 60, 0, 125, "Камуфляжный джинсовый жилет", 15, 40], [3, 11, 221, 22, 4, -1, -1, -1, 35, "Камуфляжная рваная майка", 20, 60], [3, 11, 222, 22, 4, -1, -1, -1, 40, "Камуфляжная рваная футболка", 20, 60], [3, 11, 223, 22, 4, -1, -1, -1, 30, "Камуфляжный рваная топик", 20, 60], [3, 11, 224, 22, 14, -1, -1, -1, 135, "Камуфляжная заправленная футболка", 16, 50], [3, 11, 225, 22, 15, -1, -1, -1, 100, "Камуфляжная майка", 20, 60], [3, 11, 226, 22, 15, -1, -1, -1, 100, "Камуфляжная заправленная майка", 20, 60], [3, 11, 229, 24, 15, -1, -1, -1, 145, "Камуфляжная рубашка без рук", 20, 60], [3, 11, 230, 24, 3, -1, -1, -1, 225, "Камуфляжная кофта с карманами", -5, 30], [3, 11, 231, 24, 3, -1, -1, -1, 290, "Камуфляжная куртка с карманами", -20, 25], [3, 11, 232, 24, 2, -1, -1, -1, 290, "Камуфляжная задранная рубашка", 10, 30], [3, 6, 54, 4, -1, -1, -1, -1, 190, "Охотничьи сапоги", -30, 25], [3, 6, 55, 4, -1, -1, -1, -1, 170, "Охотничьи ботинки", -25, 30], [3, 6, 62, 24, -1, -1, -1, -1, 115, "Камуфляжные кросовки", -10, 50], [3, 6, 63, 6, -1, -1, -1, -1, 210, "Камуфляжные сапоги", -30, 25], [3, 6, 64, 6, -1, -1, -1, -1, 170, "Камуфляжные ботинки", -25, 30], [3, 6, 65, 6, -1, -1, -1, -1, 195, "Камуфляжные высокие ботинки", -30, 25], [3, 6, 66, 6, -1, -1, -1, -1, 155, "Камуфляжные низкие кросовки", -10, 50], [4, 7, 6, 4, -1, -1, -1, -1, 2550, "Ожерелье с камнем", -99, 99], [4, 7, 7, 0, -1, -1, -1, -1, 450, "Ожерелье с сердцем", -99, 99], [4, 7, 11, 2, -1, -1, -1, -1, 450, "Ожерелье с сердцем", -99, 99], [4, 7, 12, 1, -1, -1, -1, -1, 2100, "Жемчужные бусы", -99, 99], [4, 7, 29, 0, -1, -1, -1, -1, 1200, "Цепь SN", -99, 99], [4, 7, 30, 0, -1, -1, -1, -1, 1350, "Цепь Череп", -99, 99], [4, 7, 31, -1, -1, -1, -1, -1, 1300, "Цепь Маска", -99, 99], [4, 7, 32, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE", -99, 99], [4, 7, 33, 0, -1, -1, -1, -1, 1550, "Цепь LC", -99, 99], [4, 7, 34, 0, -1, -1, -1, -1, 1500, "Цепь Dix", -99, 99], [4, 7, 35, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen", -99, 99], [4, 7, 36, 0, -1, -1, -1, -1, 1200, "Цепь SN (над)", -99, 99], [4, 7, 37, 0, -1, -1, -1, -1, 1350, "Цепь Череп (над)", -99, 99], [4, 7, 38, -1, -1, -1, -1, -1, 1300, "Цепь Маска (над)", -99, 99], [4, 7, 39, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE (над)", -99, 99], [4, 7, 40, 0, -1, -1, -1, -1, 1550, "Цепь LC (над)", -99, 99], [4, 7, 41, 0, -1, -1, -1, -1, 1500, "Цепь Dix (над)", -99, 99], [4, 7, 42, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen (над)", -99, 99], [4, 7, 53, 0, -1, -1, -1, -1, 450, "Тонкая цепь", -99, 99], [4, 7, 54, 0, -1, -1, -1, -1, 475, "Толстая цепь", -99, 99], [4, 7, 55, 0, -1, -1, -1, -1, 500, "Плотная цепь", -99, 99], [4, 7, 56, 0, -1, -1, -1, -1, 580, "Ребристая цепь", -99, 99], [4, 7, 57, 0, -1, -1, -1, -1, 540, "Наружная цепь", -99, 99], [4, 7, 58, 0, -1, -1, -1, -1, 560, "Клёсткая цепь", -99, 99], [4, 7, 59, 0, -1, -1, -1, -1, 890, "Винтажная цепь", -99, 99], [4, 7, 60, 0, -1, -1, -1, -1, 320, "Лёгкая цепь", -99, 99], [4, 7, 61, 0, -1, -1, -1, -1, 350, "Сплошная цепь", -99, 99], [4, 7, 62, 0, -1, -1, -1, -1, 345, "Тряпичная цепь", -99, 99], [4, 7, 64, 0, -1, -1, -1, -1, 450, "Тонкая цепь (над)", -99, 99], [4, 7, 65, 0, -1, -1, -1, -1, 475, "Толстая цепь (над)", -99, 99], [4, 7, 66, 0, -1, -1, -1, -1, 500, "Плотная цепь (над)", -99, 99], [4, 7, 67, 0, -1, -1, -1, -1, 580, "Ребристая цепь (над)", -99, 99], [4, 7, 68, 0, -1, -1, -1, -1, 540, "Наружная цепь (над)", -99, 99], [4, 7, 69, 0, -1, -1, -1, -1, 560, "Клёсткая цепь (над)", -99, 99], [4, 7, 70, 0, -1, -1, -1, -1, 890, "Винтажная цепь (над)", -99, 99], [4, 7, 71, 0, -1, -1, -1, -1, 320, "Лёгкая цепь (над)", -99, 99], [4, 7, 72, 0, -1, -1, -1, -1, 350, "Сплошная цепь (над)", -99, 99], [4, 7, 73, 0, -1, -1, -1, -1, 345, "Тряпичная цепь (над)", -99, 99], [4, 7, 81, 0, -1, -1, -1, -1, 1100, "Цепь M", -99, 99], [4, 7, 82, 0, -1, -1, -1, -1, 1100, "Цепь M (над)", -99, 99], [4, 7, 89, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M", -99, 99], [4, 7, 90, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M (над)", -99, 99], [4, 7, 91, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S", -99, 99], [4, 7, 92, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S (над)", -99, 99], [5, 4, 45, 2, -1, -1, -1, -1, 75, "Свободные штаны с карманами", -20, 30], [5, 4, 3, 14, -1, -1, -1, -1, 80, "Мятые штаны", -20, 30], [5, 4, 58, 2, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [5, 4, 66, 9, -1, -1, -1, -1, 40, "Широкие спортивные штаны", -10, 30], [5, 4, 71, 16, -1, -1, -1, -1, 115, "Шаровары", -25, 30], [5, 4, 80, 6, -1, -1, -1, -1, 90, "Спортивные штаны", -10, 35], [5, 4, 84, 8, -1, -1, -1, -1, 105, "Низкие джинсы", -10, 40], [5, 4, 101, 24, -1, -1, -1, -1, 90, "Штаны с карманами", -25, 30], [5, 4, 82, 6, -1, -1, -1, -1, 65, "Спортивные бриджи", 10, 50], [5, 4, 2, 1, -1, -1, -1, -1, 55, "Спортивные бриджи", 15, 50], [5, 4, 10, 1, -1, -1, -1, -1, 25, "Спортивные шорты", 15, 60], [5, 4, 14, 0, -1, -1, -1, -1, 35, "Шорты", 20, 60], [5, 4, 16, 10, -1, -1, -1, -1, 35, "Шорты", 20, 60], [5, 4, 78, 2, -1, -1, -1, -1, 45, "Шорты с чулками", 15, 45], [5, 4, 17, 10, -1, -1, -1, -1, 15, "Низ от бикини", 25, 99], [5, 4, 21, -1, -1, -1, -1, -1, 5, "Низ от Мини-Бикини", 25, 99], [5, 4, 57, 6, -1, -1, -1, -1, 60, "Низ от халата", 10, 50], [5, 4, 107, 10, -1, -1, -1, -1, 35, "Заказные спортивные шорты", 15, 60], [5, 11, 0, 14, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [5, 11, 1, 1, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [5, 11, 3, 3, 3, -1, -1, -1, 140, "Толстовка", 5, 30], [5, 11, 10, 1, 0, -1, 21, 0, 135, "Спортивная ветровка", 5, 30], [5, 11, 11, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 16, 5, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 18, 10, 15, -1, -1, -1, 50, "Верх бикини", 25, 99], [5, 11, 19, 2, 12, -1, -1, -1, 75, "Новогодняя футболк с вырезом", 15, 50], [5, 11, 23, 1, 12, -1, -1, -1, 70, "Футболка с вырезом", 15, 50], [5, 11, 31, 5, 1, -1, 20, 0, 125, "Джинсовая куртка", 10, 35], [5, 11, 32, 1, 4, -1, -1, -1, 35, "Спортивная майка", 20, 60], [5, 11, 33, 7, 4, -1, -1, -1, 60, "Кроп-Майка", 25, 60], [5, 11, 36, 3, 4, -1, -1, -1, 75, "Фирменный верх купальника", 20, 60], [5, 11, 37, 4, 4, -1, -1, -1, 180, "Сарафан", 15, 45], [5, 11, 49, 0, 14, -1, -1, -1, 55, "Футболка", 15, 50], [0, 11, 54, 2, 3, -1, -1, -1, 175, "Старая Мото-Куртка", -15, 30], [5, 11, 73, 1, 14, -1, -1, -1, 55, "Футболка", 15, 50], [5, 11, 74, 1, 4, -1, -1, -1, 30, "Майка", 20, 60], [5, 11, 75, 2, 9, -1, -1, -1, 85, "Задраный джемпер", 10, 40], [5, 11, 76, 3, 9, -1, -1, -1, 90, "Бейбсбольная рубашка", 15, 50], [5, 11, 105, 6, 4, -1, -1, -1, 90, "Верх от халата", 15, 50], [5, 11, 106, 2, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [5, 11, 125, 8, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 126, 1, 14, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 132, 5, 14, -1, -1, -1, 80, "Рубашка с рисунком", 15, 45], [5, 11, 138, 9, 6, -1, -1, -1, 65, "Спортивная куртка", -10, 30], [5, 11, 141, 4, 14, -1, -1, -1, 55, "Футболка", 15, 50], [5, 11, 148, 4, 7, -1, 51, 0, 85, "Потёртая кожаная куртка", -10, 30], [5, 11, 154, 2, 4, -1, 60, 0, 80, "Кожаный жилет", 15, 40], [5, 11, 156, 0, 4, -1, 60, 0, 80, "Байкерский жилет", 15, 40], [5, 11, 157, 0, 4, -1, 60, 0, 80, "Байкерский жилет", 15, 40], [5, 11, 158, 2, 5, -1, -1, -1, 110, "Байкерская куртка", -15, 30], [5, 11, 159, 2, 4, -1, -1, -1, 80, "Байкерский жилет", 15, 35], [5, 11, 160, -1, 2, -1, 26, 0, 95, "Старая байкерская куртка", -15, 35], [5, 11, 161, 0, 2, -1, -1, -1, 35, "Бейсбольная рубашка", 15, 50], [5, 11, 163, 4, 2, -1, 26, 0, 145, "Кожаная куртка", -15, 35], [5, 11, 166, 2, 2, -1, 26, 0, 105, "Джинсовая куртка", -10, 30], [5, 11, 167, 2, 4, -1, 60, 0, 75, "Джинсовый жилет", 15, 40], [5, 11, 168, 4, 4, -1, -1, -1, 25, "Рваная майка", 20, 60], [5, 11, 169, 4, 4, -1, -1, -1, 30, "Рваная футболка", 20, 60], [5, 11, 170, 4, 4, -1, -1, -1, 20, "Рваный топик", 20, 60], [5, 11, 171, 6, 4, -1, -1, -1, 55, "Завязанная рубашка", 15, 50], [5, 11, 172, 0, 3, -1, -1, -1, 85, "Худи", 5, 30], [5, 11, 173, -1, 4, -1, -1, -1, 65, "Кожаный Кроп-Жилет", 20, 55], [5, 11, 174, 2, 2, -1, 26, 0, 135, "Байкерская джинсовая куртка", -10, 30], [5, 11, 175, 2, 4, -1, 60, 0, 105, "Байкерский джинсовый жилет", 15, 40], [5, 11, 176, 2, 5, -1, -1, -1, 135, "Байкерская кожаная куртка", -15, 30], [5, 11, 177, 2, 4, -1, -1, -1, 115, "Байкерский кожаный жилет", 15, 35], [5, 11, 242, 8, 6, -1, 51, 0, 180, "Закрытая охотничья куртка", -25, 25], [5, 11, 242, 8, 6, -1, 51, 0, 180, "Открытая охотничья куртка", -5, 30], [5, 11, 247, 24, 15, -1, -1, -1, 40, "Спортивная майка", 20, 60], [5, 11, 266, 22, 7, -1, -1, -1, 120, "Фирменная спортивная куртка", -5, 30], [5, 11, 286, 20, 14, -1, -1, -1, 90, "Коллекционная классическая футболка", 15, 50], [5, 6, 5, 0, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 10, 2, -1, -1, -1, -1, 55, "Кросовки", -10, 50], [5, 6, 16, 10, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 17, -1, -1, -1, -1, -1, 40, "Ботинки Эльфа", -5, 50], [5, 6, 68, 0, -1, -1, -1, -1, 110, "Винтажные ботинки", -30, 30], [5, 6, 69, 0, -1, -1, -1, -1, 60, "Винтажные кросовки", -10, 50], [5, 6, 78, 0, -1, -1, -1, -1, 90, "ProLaps фирменный кеды", -10, 50], [5, 6, 79, 24, -1, -1, -1, -1, 150, "Беговые высокие кроссовки", -10, 50], [5, 6, 80, 24, -1, -1, -1, -1, 150, "Беговые низкие кроссовки", -10, 50], [5, 7, 9, -1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 15, 3, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 17, 2, -1, -1, -1, -1, 55, "Новогодний шарф", -99, 99], [5, 7, 18, 2, -1, -1, -1, -1, 55, "Новогодний шарф (над)", -99, 99], [5, 7, 83, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 84, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [5, 7, 93, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [9999, 11, 347, 7, 14, -1, -1, -1, 60, "Майки", 10, 40], [9999, 11, 348, 2, 12, -1, -1, -1, 60, "Майки2", 10, 40], [9999, 11, 349, 7, 4, -1, -1, -1, 60, "Майки3", 10, 40], [9999, 11, 350, 1, 15, -1, -1, -1, 60, "Майки4", 10, 40]];
exports.clothFutil = clothFutil;
const clothMutil = [[0, 4, 0, 14, -1, -1, -1, -1, 80, "Классические джинсы", -20, 35], [0, 4, 43, 0, -1, -1, -1, -1, 75, "Рабочие джинсы", -25, 30], [0, 4, 63, -1, -1, -1, -1, -1, 60, "Старые джинсы", -20, 35], [0, 4, 1, 14, -1, -1, -1, -1, 95, "Широкие джинсы", -20, 35], [0, 4, 3, 14, -1, -1, -1, -1, 35, "Домашние штаны", -5, 35], [0, 4, 29, 1, -1, -1, -1, -1, 80, "Патриот-Карго штаны", -25, 25], [0, 4, 47, 0, -1, -1, -1, -1, 20, "Рабочие-Карго штаны", -25, 25], [0, 4, 8, -1, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -30, 20], [0, 4, 9, 14, -1, -1, -1, -1, 80, "Рабочие-Карго штаны", -25, 25], [0, 4, 7, 14, -1, -1, -1, -1, 70, "Рабочие штаны", -25, 25], [0, 4, 27, 10, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -20, 30], [0, 4, 5, 14, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 55, 2, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 64, 9, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [0, 4, 98, 24, -1, -1, -1, -1, 100, "Фирменные-Карго штаны", -25, 25], [0, 4, 15, 14, -1, -1, -1, -1, 55, "Карго шорты", 20, 50], [0, 4, 100, 12, -1, -1, -1, -1, 125, "Заказные шаровары", -25, 30], [0, 4, 14, 0, -1, -1, -1, -1, 25, "Спортивные шорты", 25, 60], [0, 4, 18, 10, -1, -1, -1, -1, 20, "Спортивные шорты", 25, 60], [0, 4, 42, 6, -1, -1, -1, -1, 45, "Повседневные шорты", 15, 55], [0, 4, 62, 2, -1, -1, -1, -1, 30, "Рабочие шорты", 15, 55], [0, 4, 21, -1, -1, -1, -1, -1, 5, "Трусы", 25, 99], [0, 4, 61, 12, -1, -1, -1, -1, 5, "Трусы", 25, 99], [0, 11, 123, 1, 11, -1, -1, -1, 50, "Бейсбольное поло", 15, 50], [0, 11, 83, 3, 11, -1, -1, -1, 45, "Бейсбольная рубашка", 15, 50], [0, 11, 84, 4, 4, -1, -1, -1, 80, "Бейсбольный свитер", -5, 35], [0, 11, 81, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [0, 11, 128, 8, 0, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [0, 11, 164, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [0, 11, 111, 4, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [0, 11, 139, 6, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [0, 11, 97, 0, -1, -1, -1, -1, 5, "Грязная футболка", 15, 50], [0, 11, 17, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 36, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 237, 24, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [0, 11, 1, 0, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 16, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 22, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 33, -1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 34, 0, 0, -1, -1, -1, 10, "Классическая футболка", 15, 50], [0, 11, 44, 2, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 146, 7, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [0, 11, 14, 14, 1, -1, -1, -1, 30, "Кофта под рубашкой", 5, 35], [0, 11, 89, 2, 6, -1, -1, -1, 30, "Свитер", 5, 35], [0, 11, 238, 4, 5, -1, -1, -1, 15, "Старая майка", 20, 60], [0, 11, 169, 2, 4, -1, 0, 1, 105, "Джинсовая куртка", -10, 30], [0, 11, 170, 2, 5, -1, 0, 1, 75, "Джинсовый жилет", 15, 35], [0, 11, 87, 10, 4, -1, -1, -1, 130, "Закрытый бейсбольный бомбер", -10, 30], [0, 11, 88, 10, 4, -1, 0, 1, 130, "Открытый бейсбольный бомбер", 5, 35], [0, 11, 125, -1, 4, -1, -1, -1, 80, "Старая бейсбольная куртка", -20, 25], [0, 11, 126, 13, 4, -1, -1, -1, 45, "Закрытая винтажная рубашка", 10, 30], [0, 11, 127, 13, 4, -1, 0, 1, 45, "Открытая винтажная рубашка", 15, 35], [0, 11, 6, 0, 4, -1, 2, 1, 110, "Кожанная куртка", -10, 30], [0, 11, 37, 1, 4, -1, 2, 1, 30, "Кожанная куртка", -10, 30], [0, 11, 166, 4, 4, -1, 0, 1, 145, "Кожаная куртка", -10, 30], [0, 11, 157, 2, 15, -1, 0, 1, 80, "Кожаный жилет", 15, 35], [0, 11, 232, 8, 4, -1, 0, 1, 180, "Закрытая охотничья куртка", -15, 30], [0, 11, 233, 8, 4, -1, 0, 1, 180, "Открытая охотничья куртка", -5, 30], [0, 11, 3, 14, 1, -1, 38, 0, 80, "Открытая спортивная куртка", 5, 30], [0, 11, 141, 9, 6, -1, -1, -1, 80, "Спортивная куртка", -10, 30], [0, 11, 113, 2, 6, -1, -1, -1, 30, "Старая спортивная куртка", -10, 30], [0, 11, 7, 14, 4, -1, 0, 1, 90, "Спортивный толстовка", 5, 30], [0, 11, 86, 3, 4, -1, -1, -1, 30, "Спортивная толстовка", 5, 30], [0, 11, 249, 0, 6, -1, -1, -1, 70, "Старая бейсбольная куртка", 5, 30], [0, 11, 110, -1, 4, -1, -1, -1, 220, "Старая кожаная куртка", -20, 25], [0, 11, 138, 1, 4, -1, -1, -1, 180, "Старая кожаная куртка", -20, 25], [0, 11, 151, 4, 4, -1, 0, 1, 95, "Старая потёртая куртка", -10, 30], [0, 11, 156, 4, 4, -1, 0, 1, 95, "Старая потёртая куртка", -10, 30], [0, 11, 116, 1, 6, -1, 5, 1, 110, "Старая куртка санты", -5, 30], [0, 11, 115, -1, 4, -1, 75, 2, 155, "Старое пальто", -25, 25], [0, 11, 121, 10, 4, -1, -1, -1, 95, "Старая толстовка", 5, 30], [0, 11, 171, 0, 4, -1, -1, -1, 85, "Толстовка", 5, 30], [0, 6, 5, 2, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [0, 6, 16, 10, -1, -1, -1, -1, 10, "Модные сланцы", 25, 99], [0, 6, 6, 0, -1, -1, -1, -1, 5, "Тапочки с носками", 20, 99], [0, 6, 8, 14, -1, -1, -1, -1, 50, "Беговые кеды с носками", -10, 50], [0, 6, 46, 8, -1, -1, -1, -1, 60, "Старые спортивные кеды", -10, 50], [0, 6, 23, 14, -1, -1, -1, -1, 40, "Классические кеды", -10, 50], [0, 6, 64, 12, -1, -1, -1, -1, 80, "Старые фирменные кеды", -10, 50], [0, 6, 7, 14, -1, -1, -1, -1, 30, "Старые кросовки с носками", -10, 50], [0, 6, 9, 14, -1, -1, -1, -1, 65, "Кросовки с носками", -10, 50], [0, 6, 17, -1, -1, -1, -1, -1, 45, "Ботинки Эльфа", -5, 50], [0, 6, 35, 0, -1, -1, -1, -1, 50, "Высокие ботинки", -30, 30], [0, 6, 79, 0, -1, -1, -1, -1, 90, "Покрашенные высокие ботинки", -30, 30], [0, 6, 80, 0, -1, -1, -1, -1, 65, "Покрашенные низкие ботинки", -30, 30], [0, 6, 81, 1, -1, -1, -1, -1, 95, "Винтажные высокие ботинки", -30, 30], [0, 6, 82, 1, -1, -1, -1, -1, 70, "Винтажные низкие ботинки", -30, 30], [0, 7, 30, -1, -1, -1, -1, -1, 35, "Шарф", -99, 99], [0, 7, 31, -1, -1, -1, -1, -1, 35, "Шарф (над)", -99, 99], [0, 7, 112, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [0, 7, 113, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [0, 7, 123, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [1, 4, 4, 1, -1, -1, -1, -1, 390, "Зауженные джинсы", -15, 40], [1, 4, 26, 10, -1, -1, -1, -1, 390, "Зауженные джинсы", -15, 40], [1, 4, 82, 8, -1, -1, -1, -1, 460, "Фирменные зауженные джинсы", -10, 40], [1, 4, 83, 2, -1, -1, -1, -1, 20, "Кожанные зауженные джинсы", -20, 40], [1, 4, 75, 6, -1, -1, -1, -1, 290, "Фирменные джинсы", -20, 35], [1, 4, 76, 6, -1, -1, -1, -1, 310, "Фирменные рваные джинсы", -5, 35], [1, 4, 105, 10, -1, -1, -1, -1, 390, "Джинсы на прошиве", -15, 35], [1, 4, 32, 2, -1, -1, -1, -1, 225, "Новогодние легенсы", -1, 40], [1, 4, 45, 5, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 58, 14, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 65, 12, -1, -1, -1, -1, 180, "Пижамные штаны", 5, 35], [1, 4, 69, 16, -1, -1, -1, -1, 230, "Фирменные-Карго штаны", -20, 30], [1, 4, 71, 4, -1, -1, -1, -1, 370, "Кожанные штаны", -20, 30], [1, 4, 73, 4, -1, -1, -1, -1, 370, "Кожанные штаны", -20, 30], [1, 4, 6, 1, -1, -1, -1, -1, 145, "Пляжные шорты", 15, 60], [1, 4, 16, 10, -1, -1, -1, -1, 145, "Пляжные шорты", 15, 60], [1, 4, 54, 5, -1, -1, -1, -1, 245, "Заказные пляжные шорты", 15, 60], [1, 4, 12, -1, -1, -1, -1, -1, 210, "Стильные шорты", 15, 60], [1, 4, 17, 9, -1, -1, -1, -1, 210, "Стильные шорты", 15, 60], [1, 4, 78, 6, -1, -1, -1, -1, 380, "Фирменные спортивные штаны", -10, 35], [1, 4, 79, 1, -1, -1, -1, -1, 410, "Кожанные спортивные штаны", -10, 35], [1, 4, 80, 6, -1, -1, -1, -1, 250, "Фирменные спортивные шорты", 10, 50], [1, 4, 81, 1, -1, -1, -1, -1, 280, "Кожанные спортивные шорты", 10, 50], [1, 11, 82, 14, 11, -1, -1, -1, 220, "Рубашка поло", 15, 50], [1, 11, 93, 1, 0, -1, -1, -1, 250, "Спортивное поло", 15, 50], [1, 11, 94, 1, 0, -1, -1, -1, 250, "Заправленное спортивное поло", 15, 50], [1, 11, 18, 2, 0, -1, -1, -1, 140, "Новогодняя футболка", 15, 50], [1, 11, 8, -1, 8, -1, -1, -1, 270, "Задранный джемпер", 10, 40], [1, 11, 38, 3, 8, -1, -1, -1, 270, "Задранный джемпер", 10, 40], [1, 11, 50, 3, 4, -1, -1, -1, 390, "Свитер с накладками", -5, 30], [1, 11, 51, 1, 4, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 52, 2, 4, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 53, 2, 4, -1, -1, -1, 380, "Заправленный свитер", -5, 30], [1, 11, 71, -1, 0, -1, -1, -1, 620, "Заказная футболка", 15, 50], [1, 11, 73, 17, 0, -1, -1, -1, 320, "Заказная футболка", 15, 50], [1, 11, 78, 14, 6, -1, -1, -1, 390, "Заказной свитер", 10, 30], [1, 11, 80, 1, 11, -1, -1, -1, 20, "Стильная футболка", 15, 50], [1, 11, 92, 5, 6, -1, -1, -1, 150, "Пижамная рубашка", 10, 35], [1, 11, 144, 12, 6, -1, -1, -1, 150, "Пижамная рубашка", 10, 35], [1, 11, 117, 14, 6, -1, -1, -1, 150, "Новогодняя пижамная рубашка", 10, 35], [1, 11, 105, -1, 5, -1, -1, -1, 85, "Гавайская рубашка", 15, 40], [1, 11, 107, 3, 4, -1, -1, -1, 20, "Китайская рубашка", -5, 35], [1, 11, 61, 2, 4, -1, -1, -1, 490, "Мото-Куртка", -15, 30], [1, 11, 62, -1, 4, -1, 0, 1, 490, "Открытая Мото-Куртка", -1, 30], [1, 11, 64, -1, 4, -1, 2, 1, 490, "Мото-Куртка", -5, 30], [1, 11, 118, 8, 4, -1, 0, 1, 490, "Мото-Куртка", -5, 30], [1, 11, 155, 2, 14, -1, -1, -1, 270, "Шоу-Куртка", 10, 35], [1, 11, 148, 10, 4, -1, -1, -1, 245, "Мото-Кофта", -5, 30], [1, 11, 152, 14, 4, -1, -1, -1, 265, "Мото-Свитер", 10, 35], [1, 11, 147, 8, 4, -1, -1, -1, 295, "Мото-Жилет", -5, 30], [1, 11, 158, 1, 15, -1, -1, -1, 310, "Мото-Жилет", 15, 35], [1, 11, 165, 5, 6, -1, -1, -1, 310, "Мото-Жилет со свитером", -5, 30], [1, 11, 177, 5, 15, -1, -1, -1, 310, "Мото-Жилет", 15, 30], [1, 11, 69, 4, 4, -1, 2, 1, 420, "Куртка с капюшоном", -10, 30], [1, 11, 74, 9, 4, -1, 0, 1, 565, "Открытый заказной бомбер", -1, 35], [1, 11, 75, 9, 4, -1, -1, -1, 565, "Закрытый заказной бомбер", -5, 35], [1, 11, 79, -1, 4, -1, -1, -1, 510, "Бомбер Wolf", -5, 35], [1, 11, 106, -1, 4, -1, 0, 1, 20, "Куртка на пуговицах", -20, 25], [1, 11, 134, 1, 4, -1, -1, -1, 310, "Фирменная толстовка", 5, 35], [1, 11, 135, 5, 5, -1, -1, -1, 85, "Гавайская рубашка", 15, 45], [1, 11, 143, 8, 4, -1, -1, -1, 410, "Кожаный бомбер", 5, 35], [1, 11, 149, 8, 14, -1, -1, -1, 270, "Шоу-Куртка", 10, 35], [1, 11, 150, 10, 4, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 153, 24, 6, -1, -1, -1, 385, "Заказная спортивная куртка", -10, 35], [1, 11, 154, 6, 6, -1, -1, -1, 425, "Фирменная спортивная куртка", -10, 35], [1, 11, 167, 14, 4, -1, 0, 1, 590, "Пуховик", -25, 25], [1, 11, 168, 1, 4, -1, 2, 1, 425, "Кожаное худи", -10, 30], [1, 11, 184, 2, 4, -1, -1, -1, 650, "Заказная закрытая парка", -20, 25], [1, 11, 185, 2, 4, -1, 0, 1, 650, "Заказная открытая парка", -5, 30], [1, 11, 187, 11, 4, -1, 2, 1, 515, "Длинное худи", -15, 35], [1, 11, 188, 9, 4, -1, -1, -1, 610, "Закрытая парка", -20, 25], [1, 11, 189, 9, 4, -1, 0, 1, 610, "Открытая парка", -5, 30], [1, 11, 190, 24, 6, -1, -1, -1, 370, "Заказной свитер", 10, 30], [1, 11, 191, 24, 4, -1, 0, 1, 590, "Заказной пуховик", -25, 25], [1, 11, 192, 10, 4, -1, 75, 2, 790, "Заказное пальто", -25, 25], [1, 11, 193, 24, 11, -1, -1, -1, 320, "Заказная футболка", 15, 50], [1, 11, 194, 1, 6, -1, -1, -1, 620, "Новогодний неоновый свитер", 10, 30], [1, 11, 195, 1, 6, -1, -1, -1, 320, "Новогодний свитер", 10, 30], [1, 11, 196, 14, 6, -1, -1, -1, 620, "Рождественский неоновый свитер", 10, 30], [1, 11, 197, 14, 6, -1, -1, -1, 320, "Рождественский свитер", 10, 30], [1, 11, 198, 6, 6, -1, -1, -1, 590, "Новогодняя неоновая теп. кофта", -5, 25], [1, 11, 199, 6, 6, -1, -1, -1, 290, "Новогодняя теплая кофта", -5, 25], [1, 11, 200, 24, 4, -1, -1, -1, 310, "Заказное худи", 5, 30], [1, 11, 205, 3, 5, -1, -1, -1, 250, "Жилет с капюшоном", 15, 35], [1, 11, 217, 13, 4, -1, -1, -1, 445, "Заказная куртка", -25, 25], [1, 11, 223, 14, 2, -1, -1, -1, 330, "Фирменный тёплый жилет", 10, 30], [1, 11, 224, 14, 11, -1, -1, -1, 460, "Фирменная тёплая куртка", -20, 30], [1, 11, 225, 0, 8, -1, -1, -1, 270, "Коллекционный задранный джемпер", 10, 40], [1, 11, 227, 12, 4, -1, -1, -1, 315, "Фирменный жилет", -5, 30], [1, 11, 229, 10, 4, -1, -1, -1, 425, "Закрытый бомбер", -10, 30], [1, 11, 230, 10, 4, -1, 0, 1, 425, "Открытый бомбер", -5, 35], [1, 11, 235, 10, 0, -1, -1, -1, 250, "Фирменное поло", 15, 50], [1, 11, 236, 10, 0, -1, -1, -1, 250, "Заправленное фирменное поло", 15, 50], [1, 11, 241, 4, 0, -1, -1, -1, 270, "Заказное поло", 15, 50], [1, 11, 242, 4, 0, -1, -1, -1, 270, "Заправленное заказное поло", 15, 50], [1, 11, 244, 24, 4, -1, 2, 1, 710, "Модная куртка с карманами", -25, 30], [1, 11, 245, 8, 4, -1, -1, -1, 220, "Новогодний свитер", 10, 30], [1, 11, 247, 24, 5, -1, -1, -1, 320, "Модный жилет с карманами", 10, 35], [1, 11, 248, 24, 14, -1, -1, -1, 740, "Плотная куртка с карманами", -25, 30], [1, 11, 251, 24, 4, -1, -1, -1, 880, "Анорак", -25, 30], [1, 11, 255, 24, 4, -1, -1, -1, 370, "Эксклюзивный свитер Bigness", 10, 30], [1, 6, 1, 14, -1, -1, -1, -1, 220, "Скейтерские кеды", -10, 50], [1, 6, 4, 1, -1, -1, -1, -1, 250, "Высокие кеды", -10, 50], [1, 6, 12, 14, -1, -1, -1, -1, 320, "Заказные ботинки", -30, 30], [1, 6, 14, 14, -1, -1, -1, -1, 225, "Винтажные ботинки", -30, 30], [1, 6, 22, 10, -1, -1, -1, -1, 270, "Заказные высокие кеды", -10, 50], [1, 6, 26, 14, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 28, 4, -1, -1, -1, -1, 290, "Модные кеды", -10, 50], [1, 6, 29, -1, -1, -1, -1, -1, 750, "Золотые кеды", -10, 50], [1, 6, 31, 3, -1, -1, -1, -1, 345, "Заказные кросовки", -10, 50], [1, 6, 32, 14, -1, -1, -1, -1, 375, "Высокие кросовки", -10, 50], [1, 6, 42, 8, -1, -1, -1, -1, 190, "Модные низкие кеды", -10, 50], [1, 6, 43, 6, -1, -1, -1, -1, 325, "Заказные ботинки на шнурках", -30, 30], [1, 6, 48, 0, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 49, 0, -1, -1, -1, -1, 230, "Платформенные кеды", -10, 50], [1, 6, 55, 8, -1, -1, -1, -1, 640, "Неоновые кеды", -10, 50], [1, 6, 57, 10, -1, -1, -1, -1, 390, "Фирменные кеды", -10, 50], [1, 6, 70, 24, -1, -1, -1, -1, 415, "Фирменные сапоги", -35, 30], [1, 6, 71, 24, -1, -1, -1, -1, 345, "Фирменные ботинки", -30, 30], [1, 6, 72, 24, -1, -1, -1, -1, 400, "Фирменные высокие кроссовки", -30, 30], [1, 6, 73, 24, -1, -1, -1, -1, 330, "Фирменные кроссовки", -10, 50], [1, 6, 77, 24, -1, -1, -1, -1, 440, "Светодиодные кроссовки", -10, 50], [2, 4, 10, 1, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 13, 1, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 19, 0, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 20, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 22, 11, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 23, 11, -1, -1, -1, -1, 1090, "Широкие брюки", -15, 40], [2, 4, 24, 5, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 25, 5, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 28, 14, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 35, -1, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 37, 2, -1, -1, -1, -1, 650, "Мятые брюки", -15, 40], [2, 4, 48, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 49, 3, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 40], [2, 4, 50, 2, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 51, -1, -1, -1, -1, -1, 2990, "Заказные широкие брюки", -15, 40], [2, 4, 52, 2, -1, -1, -1, -1, 1290, "Зауженные брюки", -10, 50], [2, 4, 53, -1, -1, -1, -1, -1, 3290, "Заказные зауженные брюки", -10, 40], [2, 4, 60, 10, -1, -1, -1, -1, 990, "Широкие брюки", -15, 40], [2, 4, 96, 0, -1, -1, -1, 1, 990, "Широкие брюки", -15, 40], [2, 11, 11, 0, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 45], [2, 11, 21, 2, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 25, 8, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 120, 10, 11, -1, 6, 8, 990, "Жилет с задраной рубашкой", 10, 40], [2, 11, 45, 1, 11, -1, 50, 0, 1190, "Патриотичный жилет", 10, 40], [2, 11, 11, 0, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 45], [2, 11, 21, 2, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 25, 8, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 120, 10, 4, -1, 22, 3, 990, "Жилет с рубашкой", 10, 40], [2, 11, 12, -1, 12, -1, -1, -1, 1190, "Расправленная рубашка", 10, 45], [2, 11, 13, 2, 11, -1, -1, -1, 1190, "Заправленная рубашка", 10, 45], [2, 11, 26, 8, 11, -1, -1, -1, 1190, "Заправленная рубашка", 10, 45], [2, 11, 41, 2, 12, -1, -1, -1, 1190, "Расправленная рубашка", 10, 45], [2, 11, 4, -1, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 10, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 19, 0, 1, -1, 20, 1, 2390, "Новогодний пиджак", -5, 35], [2, 11, 20, 2, 4, -1, 21, 3, 3990, "Стильный пиджак", -5, 35], [2, 11, 23, 2, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 24, 11, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 27, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 28, 1, 4, -1, 21, 3, 1990, "Закрытый пиджак", -5, 35], [2, 11, 29, 6, 4, -1, 31, 1, 1990, "Открытый пиджак", -5, 35], [2, 11, 30, 6, 4, -1, 31, 1, 1990, "Закрытый пиджак", -5, 35], [2, 11, 95, 1, 11, -1, -1, -1, 1190, "Задранная рубашка", 10, 45], [2, 11, 234, 24, 11, -1, -1, -1, 1490, "Заказная задранная рубашка", 10, 45], [2, 11, 31, 6, 4, -1, 31, 1, 1990, "Приталенный открытый пиджак", -5, 35], [2, 11, 32, 6, 4, -1, 31, 1, 1990, "Приталенный закрытый пиджак", -5, 35], [2, 11, 35, 5, 4, -1, 21, 3, 1990, "Открытый пиджак", -5, 35], [2, 11, 46, 1, 4, -1, 21, 3, 2490, "Патриотичный фрак", -5, 35], [2, 11, 58, -1, 1, -1, 63, 1, 2490, "Фрак", -5, 35], [2, 11, 59, 2, 1, -1, 63, 1, 990, "Мятый открытый пиджак", -5, 35], [2, 11, 60, 2, 0, -1, 64, 1, 990, "Мятый задранный пиджак", -5, 35], [2, 11, 99, 3, 4, -1, 31, 1, 1990, "Приталенный открытый пиджак", -5, 35], [2, 11, 100, 3, 4, -1, 31, 1, 1990, "Приталенный закрытый пиджак", -5, 35], [2, 11, 101, 2, 4, -1, 31, 1, 2990, "Кожаный открытый пиджак", -5, 35], [2, 11, 102, 2, 4, -1, 31, 1, 2990, "Кожаный закрытый пиджак", -5, 35], [2, 11, 103, -1, 4, -1, 31, 1, 3590, "Заказной открытый пиджак", -5, 35], [2, 11, 104, -1, 4, -1, 31, 1, 3590, "Заказной закрытый пиджак", -5, 35], [2, 11, 108, 9, 4, -1, 31, 1, 2690, "Раритетный пиджак", -5, 35], [2, 11, 119, 10, 4, -1, 21, 3, 2490, "Пиджак на пуговицах", -5, 35], [2, 11, 145, 12, 4, -1, 31, 1, 2690, "Раритетный пиджак", -5, 35], [2, 11, 183, 4, 4, -1, 31, 1, 2250, "Праздничный пиджак", -5, 35], [2, 11, 70, 10, 1, -1, 12, 1, 5990, "Кожаная куртка с мехом", -30, 25], [2, 11, 240, 4, 1, -1, 12, 1, 5990, "Кожаная куртка с мехом", -30, 25], [2, 11, 140, 13, 4, -1, 31, 1, 4490, "Пиджачное пальто на пуговицах", -15, 35], [2, 11, 72, 2, 1, -1, 12, 1, 4790, "Пальто", -25, 25], [2, 11, 76, 3, 4, -1, 71, 2, 5490, "Пальто на пуговицах", -25, 25], [2, 11, 77, 2, 1, -1, 12, 1, 6190, "Открытое пальто", -25, 25], [2, 11, 142, 1, 4, -1, 31, 10, 3390, "Открытое пальто", -20, 30], [2, 11, 136, 5, 4, -1, 0, 1, 1690, "Фирменная куртка", -15, 30], [2, 6, 10, -1, -1, -1, -1, -1, 790, "Туфли с носками", -15, 45], [2, 6, 15, 14, -1, -1, -1, -1, 1990, "Кожаные ботинки", -30, 30], [2, 6, 18, 0, -1, -1, -1, -1, 790, "Заказные туфли с носками", -15, 45], [2, 6, 19, -1, -1, -1, -1, -1, 840, "Высокие туфли", -15, 45], [2, 6, 20, 10, -1, -1, -1, -1, 790, "Кожаные туфли с носками", -15, 45], [2, 6, 21, 10, -1, -1, -1, -1, 760, "Кожаные туфли", -15, 45], [2, 6, 30, 0, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 45], [2, 6, 36, 2, -1, -1, -1, -1, 490, "Винтажные макасины", 10, 45], [2, 6, 37, 3, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 38, 3, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 40, 10, -1, -1, -1, -1, 790, "Кожаные туфли с носками", -15, 45], [2, 6, 44, 9, -1, -1, -1, -1, 1090, "Ковбойские ботинки", -25, 30], [2, 6, 45, 9, -1, -1, -1, -1, 890, "Ковбойские туфли", -15, 40], [2, 6, 50, 4, -1, -1, -1, -1, 1290, "Кожаные сапоги", -25, 25], [2, 6, 51, 4, -1, -1, -1, -1, 1050, "Кожаные ботинки", -20, 30], [2, 6, 52, 0, -1, -1, -1, -1, 620, "Зимние ботикнки", -30, 20], [2, 6, 56, 0, -1, -1, -1, -1, 510, "Низкие зимние ботинки", -25, 25], [2, 6, 88, 10, -1, -1, -1, -1, 820, "Меховые сапоги", -30, 20], [2, 7, 10, 1, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 12, 1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 18, -1, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 19, -1, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 20, 3, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 21, 11, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 22, 13, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [2, 7, 23, 11, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 24, 14, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 25, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 26, 14, -1, -1, -1, -1, 220, "Широкий галстук (под)", -99, 99], [2, 7, 27, 14, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 28, 14, -1, -1, -1, -1, 220, "Широкий галстук", -99, 99], [2, 7, 29, 14, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 32, 1, -1, -1, -1, -1, 180, "Патриотичная бабочка", -99, 99], [2, 7, 36, -1, -1, -1, -1, -1, 170, "Свободная бабочка", -99, 99], [2, 7, 37, 14, -1, -1, -1, -1, 195, "Свободный галстук", -99, 99], [2, 7, 38, 14, -1, -1, -1, -1, 220, "Толстый галстук (над)", -99, 99], [2, 7, 39, 14, -1, -1, -1, -1, 195, "Очень свободный галстук", -99, 99], [2, 7, 116, 8, -1, -1, -1, -1, 195, "Тонкий галстук (под)", -99, 99], [2, 7, 117, 8, -1, -1, -1, -1, 195, "Тонкий галстук", -99, 99], [2, 7, 118, -1, -1, -1, -1, -1, 170, "Бабочка", -99, 99], [3, 4, 86, 22, -1, -1, -1, -1, 100, "Камуфляжные-Карго штаны", -25, 25], [3, 4, 88, 22, -1, -1, -1, -1, 70, "Камуфляжные-Карго шорты", 10, 65], [3, 4, 102, 16, -1, -1, -1, -1, 150, "Камуфляжные штаны", -25, 25], [3, 4, 102, 16, -1, -1, -1, -1, 110, "Камуфляжные шорты", -25, 25], [3, 11, 239, 22, 5, -1, -1, -1, 35, "Камуфляжная старая майка", 20, 60], [3, 11, 219, 24, 2, -1, -1, -1, 60, "Старая камуфляжная жилетка", 10, 40], [3, 11, 215, 22, 4, -1, 0, 1, 125, "Камуфляжная джинсовая куртка", -10, 30], [3, 11, 216, 22, 5, -1, 0, 1, 95, "Камуфляжный джинсовый жилет", 15, 35], [3, 11, 220, 24, 4, -1, -1, -1, 110, "Камуфляжная кофтка с карманами", -5, 30], [3, 11, 221, 24, 4, -1, -1, -1, 175, "Камуфляжная куртка с карманами", -20, 25], [3, 11, 222, 24, 11, -1, -1, -1, 175, "Камуфляжная рубашка с карманами", 10, 30], [3, 11, 206, 22, 5, -1, -1, -1, 275, "Камуфляжный жилет с капюшоном", 10, 35], [3, 11, 208, 22, 0, -1, -1, -1, 135, "Камуфляжная футболка", 15, 50], [3, 11, 209, 22, 4, -1, -1, -1, 465, "Камуфялжная заказная куртка", -20, 30], [3, 11, 210, 22, 4, -1, -1, -1, 675, "Камуфляжная закрытая парка", -25, 25], [3, 11, 212, 22, 4, -1, 0, 1, 675, "Камуфляжная открытая парка", -5, 30], [3, 11, 213, 22, 5, -1, -1, -1, 325, "Камуфляжный Мото-Жилет", 10, 35], [3, 11, 214, 22, 4, -1, -1, -1, 325, "Камуфляжная Мото-Кофта", -5, 30], [3, 6, 53, 4, -1, -1, -1, -1, 190, "Охотничьи сапоги", -30, 25], [3, 6, 54, 4, -1, -1, -1, -1, 170, "Охотничьи ботинки", -25, 30], [3, 6, 59, 24, -1, -1, -1, -1, 115, "Камфуляжные кросовки", -10, 50], [3, 6, 60, 6, -1, -1, -1, -1, 210, "Камуфляжные сапоги", -30, 25], [3, 6, 61, 6, -1, -1, -1, -1, 170, "Камуфляжные ботинки", -25, 30], [3, 6, 62, 6, -1, -1, -1, -1, 195, "Камуфляжные высокие кросовки", -30, 25], [3, 6, 63, 6, -1, -1, -1, -1, 155, "Камуфляжные низкие кросовки", -10, 50], [4, 7, 16, 1, -1, -1, -1, -1, 450, "Цепь", -99, 99], [4, 7, 17, 1, -1, -1, -1, -1, 450, "Цепь (над)", -99, 99], [4, 7, 42, 0, -1, -1, -1, -1, 1200, "Цепь SN", -99, 99], [4, 7, 43, 0, -1, -1, -1, -1, 1350, "Цепь Череп", -99, 99], [4, 7, 44, -1, -1, -1, -1, -1, 1300, "Цепь Маска", -99, 99], [4, 7, 45, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE", -99, 99], [4, 7, 46, 0, -1, -1, -1, -1, 1550, "Цепь LC", -99, 99], [4, 7, 47, 0, -1, -1, -1, -1, 1500, "Цепь Dix", -99, 99], [4, 7, 48, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen", -99, 99], [4, 7, 49, 0, -1, -1, -1, -1, 1200, "Цепь SN (над)", -99, 99], [4, 7, 50, 0, -1, -1, -1, -1, 1350, "Цепь Череп (над)", -99, 99], [4, 7, 51, -1, -1, -1, -1, -1, 1300, "Цепь Маска (над)", -99, 99], [4, 7, 52, 0, -1, -1, -1, -1, 1450, "Цепь ZORSE (над)", -99, 99], [4, 7, 53, 0, -1, -1, -1, -1, 1550, "Цепь LC (над)", -99, 99], [4, 7, 54, 0, -1, -1, -1, -1, 1500, "Цепь Dix (над)", -99, 99], [4, 7, 55, 0, -1, -1, -1, -1, 1400, "Цепь Le Chen (над)", -99, 99], [4, 7, 74, 0, -1, -1, -1, -1, 450, "Тонкая цепь", -99, 99], [4, 7, 75, 0, -1, -1, -1, -1, 475, "Толстая цепь", -99, 99], [4, 7, 76, 0, -1, -1, -1, -1, 500, "Плотная цепь", -99, 99], [4, 7, 77, 0, -1, -1, -1, -1, 580, "Ребристая цепь", -99, 99], [4, 7, 78, 0, -1, -1, -1, -1, 540, "Наружная цепь", -99, 99], [4, 7, 79, 0, -1, -1, -1, -1, 560, "Клёсткая цепь", -99, 99], [4, 7, 80, 0, -1, -1, -1, -1, 890, "Винтажная цепь", -99, 99], [4, 7, 81, 0, -1, -1, -1, -1, 320, "Лёгкая цепь", -99, 99], [4, 7, 82, 0, -1, -1, -1, -1, 350, "Сплошная цепь", -99, 99], [4, 7, 83, 0, -1, -1, -1, -1, 345, "Тряпичная цепь", -99, 99], [4, 7, 85, 0, -1, -1, -1, -1, 450, "Тонкая цепь (над)", -99, 99], [4, 7, 86, 0, -1, -1, -1, -1, 475, "Толстая цепь (над)", -99, 99], [4, 7, 87, 0, -1, -1, -1, -1, 500, "Плотная цепь (над)", -99, 99], [4, 7, 88, 0, -1, -1, -1, -1, 580, "Ребристая цепь (над)", -99, 99], [4, 7, 89, 0, -1, -1, -1, -1, 540, "Наружная цепь (над)", -99, 99], [4, 7, 90, 0, -1, -1, -1, -1, 560, "Клёсткая цепь (над)", -99, 99], [4, 7, 91, 0, -1, -1, -1, -1, 890, "Винтажная цепь (над)", -99, 99], [4, 7, 92, 0, -1, -1, -1, -1, 320, "Лёгкая цепь (над)", -99, 99], [4, 7, 93, 0, -1, -1, -1, -1, 350, "Сплошная цепь (над)", -99, 99], [4, 7, 94, 0, -1, -1, -1, -1, 345, "Тряпичная цепь (над)", -99, 99], [4, 7, 110, 0, -1, -1, -1, -1, 1100, "Цепь M", -99, 99], [4, 7, 111, 0, -1, -1, -1, -1, 1100, "Цепь M (над)", -99, 99], [4, 7, 119, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M", -99, 99], [4, 7, 120, 0, -1, -1, -1, -1, 1850, "Цепь Колесо M (над)", -99, 99], [4, 7, 121, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S", -99, 99], [4, 7, 122, 0, -1, -1, -1, -1, 1900, "Цепь Колесо S (над)", -99, 99], [5, 4, 0, 14, -1, -1, -1, -1, 80, "Классические джинсы", -20, 35], [5, 4, 43, 0, -1, -1, -1, -1, 75, "Рабочие джинсы", -25, 30], [5, 4, 1, 14, -1, -1, -1, -1, 95, "Широкие джинсы", -20, 35], [5, 4, 3, 14, -1, -1, -1, -1, 35, "Домашние штаны", -2, 35], [5, 4, 29, 1, -1, -1, -1, -1, 80, "Патриот-Карго штаны", -25, 25], [5, 4, 47, 0, -1, -1, -1, -1, 20, "Рабочие-Карго штаны", -25, 25], [5, 4, 8, -1, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -30, 20], [5, 4, 9, 14, -1, -1, -1, -1, 80, "Рабочие-Карго штаны", -25, 20], [5, 4, 7, 14, -1, -1, -1, -1, 70, "Рабочие штаны", -25, 25], [5, 4, 27, 10, -1, -1, -1, -1, 70, "Рабочие-Карго штаны", -20, 30], [5, 4, 5, 14, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 55, 2, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 64, 9, -1, -1, -1, -1, 40, "Спортивные штаны", -10, 30], [5, 4, 98, 24, -1, -1, -1, -1, 100, "Фирменные-Карго штаны", -25, 25], [5, 4, 15, 14, -1, -1, -1, -1, 55, "Карго шорты", 20, 50], [5, 4, 100, 12, -1, -1, -1, -1, 125, "Заказные шаровары", -25, 30], [5, 4, 14, 0, -1, -1, -1, -1, 25, "Спортивные шорты", 25, 60], [5, 4, 18, 10, -1, -1, -1, -1, 20, "Спортивные шорты", 25, 60], [5, 4, 42, 6, -1, -1, -1, -1, 45, "Повседневные шорты", 15, 55], [5, 4, 62, 2, -1, -1, -1, -1, 30, "Рабочие шорты", 15, 55], [5, 4, 21, -1, -1, -1, -1, -1, 5, "Трусы", 25, 99], [5, 4, 61, 12, -1, -1, -1, -1, 5, "Трусы", 25, 99], [5, 11, 123, 1, 11, -1, -1, -1, 50, "Бейсбольное поло", 15, 50], [5, 11, 83, 3, 11, -1, -1, -1, 45, "Бейсбольная рубашка", 15, 50], [5, 11, 84, 4, 4, -1, -1, -1, 80, "Бейсбольный свитер", 5, 35], [5, 11, 81, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [5, 11, 128, 8, 0, -1, -1, -1, 25, "Бейсбольная футболка", 15, 50], [5, 11, 164, 1, 11, -1, -1, -1, 35, "Бейсбольная футболка", 15, 50], [5, 11, 111, 4, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [5, 11, 139, 6, 4, -1, -1, -1, 75, "Водолазка", -5, 30], [5, 11, 97, 0, -1, -1, -1, -1, 5, "Грязная футболка", 15, 50], [5, 11, 17, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 36, 4, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 237, 24, 5, -1, -1, -1, 20, "Классическая майка", 20, 60], [5, 11, 1, 0, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 16, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 22, 1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 33, -1, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 34, 0, 0, -1, -1, -1, 10, "Классическая футболка", 15, 50], [5, 11, 44, 2, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 146, 7, 0, -1, -1, -1, 30, "Классическая футболка", 15, 50], [5, 11, 14, 14, 1, -1, -1, -1, 30, "Кофта под рубашкой", 5, 35], [5, 11, 89, 2, 6, -1, -1, -1, 30, "Свитер", 5, 35], [5, 11, 169, 2, 4, -1, 0, 1, 105, "Джинсовая куртка", -10, 30], [5, 11, 170, 2, 5, -1, 0, 1, 75, "Джинсовый жилет", 15, 35], [5, 11, 172, 2, 4, -1, 0, 1, 130, "Байкерская джинсовая куртка", -10, 30], [5, 11, 173, 2, 5, -1, 0, 1, 105, "Байкерский джинсовый жилет", 15, 35], [5, 11, 174, 2, 4, -1, 2, 1, 135, "Байкерская кожаная куртка", -20, 30], [5, 11, 175, 2, 5, -1, 2, 1, 115, "Байкерский кожаный жилет", 10, 30], [5, 11, 122, 12, 4, -1, 0, 1, 120, "Байкерская куртка", -5, 30], [5, 11, 161, 2, 4, -1, 0, 1, 90, "Байкерская куртка", -20, 30], [5, 11, 163, -1, 4, -1, 0, 1, 95, "Старая байкерская куртка", -5, 30], [5, 11, 159, 0, 15, -1, 0, 1, 80, "Байкерский жилет", 10, 30], [5, 11, 160, 0, 15, -1, 0, 1, 80, "Байкерский жилет", 10, 30], [5, 11, 162, 2, 2, -1, 0, 1, 60, "Байкерский жилет", 10, 30], [5, 11, 87, 10, 4, -1, -1, -1, 130, "Закрытый бейсбольный бомбер", -10, 30], [5, 11, 88, 10, 4, -1, 0, 1, 130, "Открытый бейсбольный бомбер", 5, 35], [5, 11, 126, 13, 4, -1, -1, -1, 45, "Закрытая винтажная рубашка", 10, 30], [5, 11, 127, 13, 4, -1, 0, 1, 45, "Открытая винтажная рубашка", 15, 35], [5, 11, 6, 0, 4, -1, 2, 1, 110, "Кожанная куртка", -10, 30], [5, 11, 37, 1, 4, -1, 2, 1, 30, "Кожанная куртка", -10, 30], [5, 11, 166, 4, 4, -1, 0, 1, 145, "Кожаная куртка", -15, 30], [5, 11, 157, 2, 15, -1, 0, 1, 80, "Кожаный жилет", 15, 35], [5, 11, 232, 8, 4, -1, 0, 1, 180, "Закрытая охотничья куртка", -15, 30], [5, 11, 233, 8, 4, -1, 0, 1, 180, "Открытая охотничья куртка", -5, 30], [5, 11, 3, 14, 1, -1, 38, 0, 80, "Спортивная куртка", 5, 30], [5, 11, 141, 9, 6, -1, -1, -1, 80, "Спортивная куртка", -5, 30], [5, 11, 7, 14, 4, -1, 0, 1, 90, "Спортивный толстовка", 5, 30], [5, 11, 86, 3, 4, -1, -1, -1, 30, "Спортивная толстовка", 5, 30], [5, 11, 171, 0, 4, -1, -1, -1, 85, "Толстовка", 5, 30], [5, 6, 5, 2, -1, -1, -1, -1, 10, "Сланцы", 25, 99], [5, 6, 16, 10, -1, -1, -1, -1, 10, "Модные сланцы", 25, 99], [5, 6, 6, 0, -1, -1, -1, -1, 5, "Тапочки с носками", 20, 99], [5, 6, 8, 14, -1, -1, -1, -1, 50, "Беговые кеды с носками", -10, 50], [5, 6, 23, 14, -1, -1, -1, -1, 40, "Классические кеды", -10, 50], [5, 6, 9, 14, -1, -1, -1, -1, 65, "Кросовки с носками", -10, 50], [5, 6, 17, -1, -1, -1, -1, -1, 45, "Ботинки Эльфа", -5, 50], [5, 6, 35, 0, -1, -1, -1, -1, 50, "Высокие ботинки", -30, 30], [5, 6, 65, 5, -1, -1, -1, -1, 110, "Винтажные ботинки", -30, 30], [5, 6, 66, 5, -1, -1, -1, -1, 60, "Винтажные кросовки", -10, 50], [5, 6, 74, 0, -1, -1, -1, -1, 90, "ProLaps фирменный кеды", -10, 50], [5, 6, 75, 24, -1, -1, -1, -1, 150, "Беговые высокие кроссовки", -10, 50], [5, 6, 76, 24, -1, -1, -1, -1, 150, "Беговые низкие кроссовки", -10, 50], [5, 6, 78, 12, -1, -1, -1, -1, 65, "Спортивные сандали", 20, 99], [5, 7, 30, -1, -1, -1, -1, -1, 35, "Шарф", -99, 99], [5, 7, 31, -1, -1, -1, -1, -1, 35, "Шарф (над)", -99, 99], [5, 7, 34, 2, -1, -1, -1, -1, 55, "Новогодний шарф", -99, 99], [5, 7, 35, 2, -1, -1, -1, -1, 55, "Новогодний шарф (над)", -99, 99], [5, 7, 112, 1, -1, -1, -1, -1, 35, "Нашейная бандана", -99, 99], [5, 7, 113, -1, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [5, 7, 123, 0, -1, -1, -1, -1, 20, "Индейская цепь", -99, 99], [9999, 11, 332, 7, 0, -1, -1, -1, 60, "Майки", 10, 40], [9999, 11, 334, 6, 4, -1, -1, -1, 60, "Худи gucci,kenzo,supreme,balenciaga", 10, 40], [9999, 11, 335, 2, 4, -1, -1, -1, 60, "Худ Tommy Hilfiger", 10, 40], [9999, 6, 96, 1, -1, -1, -1, -1, 55, "VANS", -10, 50]];
exports.clothMutil = clothMutil;
const propFutil = [[0, 0, 4, 6, 35, "Старый снепбек"], [0, 0, 5, 6, 10, "Вязаная шапка"], [0, 0, 6, 6, 35, "Бретонская кепка"], [0, 0, 7, 6, 15, "Кепи"], [0, 0, 9, 6, 25, "Кепка на бок"], [0, 0, 12, -1, 15, "Длинная шапка"], [0, 0, 20, 5, 40, "Ковбойская шляпа"], [0, 0, 21, 5, 25, "Панама"], [0, 0, 22, 5, 45, "Пляжная панама"], [0, 0, 29, 3, 15, "Длинная шапка"], [0, 0, 36, 4, 40, "Пивная кепка"], [0, 0, 53, 0, 35, "Фирменный снепбек"], [0, 0, 75, 19, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 76, 19, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 129, 17, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 130, 17, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 131, 2, 25, "Фирменная панама"], [0, 0, 82, 5, 20, "Байкерская бандана"], [0, 0, 93, 8, 30, "Заказная панама"], [0, 1, 9, 9, 20, "Спортивные очки"], [0, 1, 10, 9, 15, "Солнцезащитные очки"], [0, 1, 11, 6, 25, "Авиаторы"], [0, 1, 18, 6, 35, "Плоские очки"], [0, 1, 19, 9, 40, "Офисные очки"], [0, 6, 11, -1, 45, "Цепь на левую руку"], [0, 7, 7, -1, 45, "Цепь на правую руку"], [0, 6, 12, -1, 55, "Толстая цепь на левую руку"], [0, 7, 8, -1, 55, "Толстая цепь на правую руку"], [0, 6, 13, -1, 65, "Твёрдая цепь на левую руку"], [0, 7, 9, -1, 65, "Твёрдая цепь на правую руку"], [0, 6, 14, -1, 30, "Черепной браслет на левую руку"], [0, 7, 10, -1, 30, "Черепной браслет на правую руку"], [0, 6, 15, -1, 25, "Старый браслет на левую руку"], [0, 7, 11, -1, 25, "Старый браслет на правую руку"], [0, 6, 16, -1, 40, "Цепь с браслетами на левую руку"], [0, 7, 12, -1, 40, "Цепь с браслетами на правую руку"], [1, 0, 15, 6, 95, "Наушники"], [1, 0, 23, 0, 125, "Новогодняя шапка Санты"], [1, 0, 24, -1, 150, "Шапка эльфа"], [1, 0, 25, -1, 85, "Рожки"], [1, 0, 42, 2, 135, "Новогодняя шапка Санты"], [1, 0, 55, 24, 120, "Фирменная бейсболка"], [1, 0, 56, 8, 140, "Фирменный снепбек"], [1, 0, 58, 1, 100, "Заказная кепка"], [1, 0, 63, 8, 110, "Бейсболка"], [1, 0, 95, 14, 115, "Заказная бейсболка"], [1, 0, 108, 9, 95, "Кепка в сетку (козырёк вперёд)"], [1, 0, 109, 9, 95, "Кепка в сетку (козырёк назад)"], [1, 0, 119, 24, 95, "Большая шапка"], [1, 1, 4, 9, 110, "Cats eye очки"], [1, 1, 20, 6, 95, "Солнцезащитные вайфареры"], [1, 1, 21, 6, 90, "Вайфареры"], [1, 1, 22, -1, 70, "Патриотические звёдочки"], [1, 1, 23, -1, 60, "Патриотические очки"], [1, 1, 24, 9, 100, "Прямоугольные вайфареры"], [1, 1, 27, 6, 210, "Мото-Очки"], [2, 0, 13, 6, 225, "Порк-Пай"], [2, 0, 14, 6, 145, "Берет"], [2, 0, 26, 12, 280, "Котелок"], [2, 0, 27, 12, 310, "Цилиндр"], [2, 0, 28, 6, 190, "Эквадорская панама"], [2, 0, 30, -1, 225, "Патриотичная шляпа"], [2, 0, 31, -1, 335, "Патриотичный цилиндр"], [2, 0, 32, 0, 355, "Патриотичный боливар"], [2, 0, 54, 6, 240, "Широкополая шляпа"], [2, 0, 61, 8, 260, "Гангстерская шляпа"], [2, 0, 94, 8, 310, "Федора"], [2, 1, 0, 9, 225, "Элегантные очки"], [2, 1, 1, 9, 260, "Большие очки"], [2, 1, 2, 9, 230, "Округлые очки"], [2, 1, 3, 9, 295, "Фирменные плоские очки"], [2, 1, 6, -1, 425, "Фирменные очки"], [2, 1, 7, 9, 365, "Заказные очки"], [2, 1, 8, -1, 375, "Фирменные округлые очки"], [2, 1, 14, 9, 210, "Дамские очки"], [2, 1, 16, 8, 425, "Фирменные очки"], [2, 1, 17, 9, 375, "Фирменные округлые очки"], [3, 0, 0, 6, 80, "Наушники для стрельбы"], [3, 0, 102, 18, 110, "Камуфляжная заказная кепка"], [3, 0, 103, 24, 95, "Камуфляжная панама"], [3, 0, 104, 24, 95, "Камуфляжная охотнисья панама"], [3, 0, 105, 24, 85, "Камуфляжный берет"], [3, 0, 106, 24, 125, "Камуфляжная армейская кепка"], [3, 0, 107, 24, 65, "Камуфляжная вязаная кепка"], [3, 1, 25, 8, 40, "Очки для стрельбы"], [3, 1, 26, 4, 145, "Очки лётчиков"], [3, 1, 27, 6, 210, "Мото-Очки"], [4, 2, 3, -1, 1550, "Серебрянные капли"], [4, 2, 4, -1, 2250, "Золотые капли"], [4, 2, 5, -1, 1850, "Золотые нигары"], [4, 2, 6, 1, 3600, "Руби с камнями"], [4, 2, 7, 1, 3320, "Фельционы с камнями"], [4, 2, 8, 1, 3450, "Таенты с камнями"], [4, 2, 9, 1, 2670, "Алиты с камнями"], [4, 2, 10, 1, 2150, "Истании с камнями"], [4, 2, 11, 1, 2970, "Снежинки с камнями"], [4, 2, 12, 1, 1450, "Серьги с камнями"], [4, 2, 13, -1, 1950, "Золотые серьги AKM"], [4, 2, 14, -1, 960, "Караловые серьги"], [4, 2, 15, -1, 1390, "Золотые кольца"], [4, 2, 16, -1, 1090, "Караловые серьги Fuck You"], [4, 2, 17, -1, 1090, "Караловые серьги Screw You"], [4, 6, 2, 2, 1250, "Тонкие механические часы"], [4, 6, 3, 1, 1500, "Прямоугольные механические часы"], [4, 6, 4, 1, 1360, "Круглые механические часы"], [4, 6, 5, 1, 550, "Электронные часы"], [4, 6, 6, 1, 575, "Заказные электронные часы"], [4, 6, 7, 1, 1150, "Гранитные механические часы"], [4, 6, 8, 1, 1340, "Квадратные мехнические часы"], [4, 6, 9, 1, 1090, "Плоские механические часы"], [4, 6, 10, 1, 890, "Электронные часы IFruit"], [4, 7, 0, -1, 1790, "Золотой винтажный браслет"], [4, 7, 1, -1, 1810, "Золотой браслет с гравировкой"], [4, 7, 2, -1, 1750, "Золотой браслет"], [4, 7, 3, -1, 350, "Фирменный браслет"], [4, 7, 5, -1, 495, "Бронзовый браслет"], [4, 7, 0, -1, 450, "Бронзовый полный браслет"], [5, 0, 5, 6, 10, "Вязаная шапка"], [5, 0, 6, 6, 35, "Бретонская кепка"], [5, 0, 7, 6, 15, "Кепи"], [5, 0, 9, 6, 25, "Кепка на бок"], [5, 0, 12, -1, 15, "Длинная шапка"], [5, 0, 20, 5, 40, "Ковбойская шляпа"], [5, 0, 21, 5, 25, "Панама"], [5, 0, 22, 5, 45, "Пляжная панама"], [5, 0, 29, 3, 15, "Длинная шапка"], [5, 0, 33, -1, 90, "Патриотичная вязаная шапка"], [5, 0, 34, -1, 45, "Патриотичная корона"], [5, 0, 35, -1, 40, "Патриотичные ушки"], [5, 0, 36, 4, 40, "Пивная кепка"], [5, 0, 39, 6, 50, "Новогодняя длинная шапка"], [5, 0, 40, -1, 35, "Новогодняя шапка"], [5, 0, 41, 2, 40, "Новогодняя шапка с пумпоном"], [5, 0, 43, 6, 35, "Новогодняя кепка (козырёк вперёд)"], [5, 0, 44, 6, 35, "Новогодняя кепка (козырёк назад)"], [5, 0, 53, 0, 35, "Фирменный снепбек"], [5, 0, 75, 19, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 76, 19, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 129, 17, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 130, 17, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 131, 2, 25, "Фирменная панама"], [5, 0, 82, 5, 20, "Байкерская бандана"], [5, 0, 93, 8, 30, "Заказная панама"], [5, 1, 9, 9, 20, "Спортивные очки"], [5, 1, 10, 9, 15, "Солнцезащитные очки"], [5, 1, 11, 6, 25, "Авиаторы"], [5, 1, 18, 6, 35, "Плоские очки"], [5, 1, 19, 9, 40, "Офисные очки"], [5, 6, 11, -1, 45, "Цепь на левую руку"], [5, 7, 7, -1, 45, "Цепь на правую руку"], [5, 6, 12, -1, 55, "Толстая цепь на левую руку"], [5, 7, 8, -1, 55, "Толстая цепь на правую руку"], [5, 6, 13, -1, 65, "Твёрдая цепь на левую руку"], [5, 7, 9, -1, 65, "Твёрдая цепь на правую руку"], [5, 6, 14, -1, 30, "Черепной браслет на левую руку"], [5, 7, 10, -1, 30, "Черепной браслет на правую руку"], [5, 6, 16, -1, 40, "Цепь с браслетами на левую руку"], [5, 7, 12, -1, 40, "Цепь с браслетами на правую руку"], [5, 6, 17, -1, 75, "Байкерский браслет на левую руку"], [5, 7, 13, -1, 75, "Байкерский браслет на правую руку"], [5, 6, 18, 1, 40, "Кожаный браслет на левую руку"], [5, 7, 14, 1, 40, "Кожаный браслет на правую руку"]];
exports.propFutil = propFutil;
const propMutil = [[0, 0, 2, 6, 10, "Шапка"], [0, 0, 5, 0, 15, "Длинная шапка"], [0, 0, 28, 4, 15, "Длинная шапка"], [0, 0, 7, 6, 15, "Кепи"], [0, 0, 13, 6, 40, "Ковбойская шляпа"], [0, 0, 14, 6, 15, "Бандана"], [0, 0, 83, 5, 20, "Байкерская бандана"], [0, 0, 20, 4, 25, "Панама"], [0, 0, 94, 8, 30, "Заказная панама"], [0, 0, 76, 19, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 77, 19, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 130, 17, 30, "Фирменная кепка (козырёк вперёд)"], [0, 0, 131, 17, 30, "Фирменная кепка (козырёк назад)"], [0, 0, 132, 2, 25, "Фирменная панама"], [0, 0, 37, 4, 40, "Пивная кепка"], [0, 1, 5, 9, 25, "Авиаторы"], [0, 1, 8, 9, 35, "Заказные авиаторы"], [0, 1, 16, 9, 30, "Беговые очки"], [0, 1, 17, 9, 40, "Офисные очки"], [0, 1, 15, 9, 25, "Спортивные очки"], [0, 6, 22, -1, 45, "Цепь на левую руку"], [0, 7, 0, -1, 45, "Цепь на правую руку"], [0, 6, 23, -1, 55, "Толстая цепь на левую руку"], [0, 7, 1, -1, 55, "Толстая цепь на правую руку"], [0, 6, 24, -1, 65, "Твёрдая цепь на левую руку"], [0, 7, 2, -1, 65, "Твёрдая цепь на левую руку"], [0, 6, 25, -1, 30, "Черепной браслет на левую руку"], [0, 7, 3, -1, 25, "Черепной браслет на левую руку"], [0, 6, 26, -1, 25, "Старый браслет на левую руку"], [0, 7, 4, -1, 25, "Старый браслет на левую руку"], [0, 6, 27, -1, 40, "Цепь с браслетами на левую руку"], [0, 7, 5, -1, 40, "Цепь с браслетами на левую руку"], [1, 0, 3, 0, 100, "Снепбек LS"], [1, 0, 15, 6, 95, "Наушники"], [1, 0, 22, 0, 125, "Новогодняя шапка Санты"], [1, 0, 23, -1, 150, "Шапка эльфа"], [1, 0, 24, -1, 85, "Рожки"], [1, 0, 43, 2, 135, "Новогодняя шапка Санты"], [1, 0, 55, 24, 120, "Фирменная бейсболка"], [1, 0, 56, 8, 140, "Фирменный снепбек"], [1, 0, 58, 1, 100, "Заказная кепка"], [1, 0, 63, 8, 110, "Бейсболка"], [1, 0, 96, 14, 115, "Заказная бейсболка"], [1, 0, 109, 9, 95, "Кепка в сетку (козырёк вперёд)"], [1, 0, 110, 9, 95, "Кепка в сетку (козырёк назад)"], [1, 0, 120, 24, 95, "Большая шапка"], [1, 1, 7, 9, 100, "Прямоугольные вайфареры"], [1, 1, 12, 9, 120, "Круглые очки"], [1, 1, 13, 9, 115, "Хипстер-Квадратные очки"], [1, 1, 19, 9, 120, "Хипстер-Выгнутые очки"], [1, 1, 20, 9, 90, "Вайфареры"], [1, 1, 21, -1, 70, "Патриотические звёдочки"], [1, 1, 22, -1, 60, "Патриотические очки"], [2, 0, 12, 1, 260, "Гангстерская шляпа"], [2, 0, 21, 6, 225, "Порк-Пай"], [2, 0, 25, 1, 260, "Гангстерская шляпа"], [2, 0, 26, 12, 280, "Котелок"], [2, 0, 27, 12, 310, "Цилиндр"], [2, 0, 29, 6, 235, "Трибли"], [2, 0, 30, 0, 260, "Гангстерская шляпа"], [2, 0, 31, -1, 225, "Патриотичная шляпа"], [2, 0, 32, -1, 335, "Патриотичный цилиндр"], [2, 0, 33, 0, 355, "Патриотичный боливар"], [2, 0, 61, 8, 260, "Гангстерская шляпа"], [2, 0, 64, 10, 260, "Гангстерская шляпа"], [2, 0, 95, 8, 310, "Федора"], [2, 1, 2, 4, 250, "Толстые очки"], [2, 1, 3, 9, 210, "Панто"], [2, 1, 4, 9, 240, "Кламбастер"], [2, 1, 10, 9, 290, "Заказные толстые очки"], [2, 1, 11, 9, 315, "Прямоугольные очки"], [2, 1, 18, 9, 255, "Широкие очки"], [3, 0, 0, 6, 80, "Наушники для стрельбы"], [3, 0, 103, 18, 110, "Камуфляжная заказная кепка"], [3, 0, 104, 24, 95, "Камуфляжная панама"], [3, 0, 105, 24, 95, "Камуфляжная охотничья панама"], [3, 0, 106, 24, 85, "Камуфляжный берет"], [3, 0, 107, 24, 125, "Камуфляжная армейская кепка"], [3, 0, 108, 24, 65, "Камуфляжная вязаная кепка"], [3, 1, 23, 8, 40, "Очки для стрельбы"], [3, 1, 24, 4, 145, "Очки лётчиков"], [3, 1, 25, 6, 210, "Мото-Очки"], [4, 2, 3, 1, 650, "Кольцо в левом ухе"], [4, 2, 4, 1, 650, "Кольцо в правом ухе"], [4, 2, 5, 1, 1300, "Кольца"], [4, 2, 6, 0, 450, "Клипса в левом ухе"], [4, 2, 7, 0, 450, "Клипса в правом ухе"], [4, 2, 8, 0, 900, "Клипсы"], [4, 2, 9, 1, 1500, "Даймонд в левом ухе"], [4, 2, 10, 1, 1500, "Даймонд в правом ухе"], [4, 2, 11, 1, 3000, "Даймонды"], [4, 2, 12, 1, 1100, "Звезда в левом ухе"], [4, 2, 13, 1, 1100, "Зевезда в правом ухе"], [4, 2, 14, 1, 2200, "Звезды"], [4, 2, 15, 1, 750, "Серьга в левом ухе"], [4, 2, 16, 1, 750, "Серьги в правом ухе"], [4, 2, 17, 1, 1500, "Серьги"], [4, 2, 18, 3, 850, "Кварт в левом ухе"], [4, 2, 19, 3, 850, "Кварт в правом ухе"], [4, 2, 20, 3, 1700, "Кварты"], [4, 2, 21, 0, 550, "Серьга S в лвеом ухе"], [4, 2, 22, 0, 550, "Серьга S в правом ухе"], [4, 2, 23, 0, 110, "Серьги S"], [4, 2, 24, 2, 600, "Череп в левом ухе"], [4, 2, 25, 2, 600, "Череп в правом ухе"], [4, 2, 26, 2, 1200, "Черепа"], [4, 2, 27, 0, 400, "Напрент в левом ухе"], [4, 2, 28, 0, 400, "Напрент в правом ухе"], [4, 2, 29, 0, 800, "Напренты"], [4, 2, 30, 1, 1250, "Сариот в левом ухе"], [4, 2, 31, 1, 1250, "Сариот в правом ухе"], [4, 2, 32, 1, 2500, "Сариоты"], [4, 2, 34, 0, 600, "Батенс в левом ухе"], [4, 2, 35, 0, 600, "Батенс в правом ухе"], [4, 2, 36, 0, 1200, "Батенсые"], [4, 6, 0, -1, 5500, "Фирменные механические часы"], [4, 6, 1, -1, 2200, "Фирменные электронные часы"], [4, 6, 3, 3, 1360, "Круглые механические часы"], [4, 6, 4, 2, 2600, "Эксклюзивные механические часы"], [4, 6, 5, 2, 2200, "Фирменные электронные часы"], [4, 6, 6, 1, 2800, "Морские механические часы"], [4, 6, 7, 1, 1900, "Ромбо-Электронные часы"], [4, 6, 8, 1, 3450, "Сложные механические часы"], [4, 6, 9, 1, 3900, "Авиаторские часы"], [4, 6, 10, 1, 2100, "Спортивные часы"], [4, 6, 11, 1, 3050, "Туртатовы механические часы"], [4, 6, 12, 1, 550, "Электронные часы"], [4, 6, 13, 1, 550, "Электронные часы"], [4, 6, 14, 1, 1860, "Браслетные механические часы"], [4, 6, 15, 1, 1650, "Вакумные механические часы"], [4, 6, 16, 1, 2100, "Сатовые механические часы"], [4, 6, 17, 1, 1900, "Ромбо-Электронные часы"], [4, 6, 18, 1, 2750, "Крупные механические часы"], [4, 6, 19, 1, 3450, "Цирста механические часы"], [4, 6, 20, 1, 2350, "Водолазные механические часы"], [4, 6, 21, 1, 890, "Электронные часы IFruit"], [5, 0, 2, 6, 10, "Шапка"], [5, 0, 5, 0, 15, "Длинная шапка"], [5, 0, 28, 4, 15, "Длинная шапка"], [5, 0, 6, 6, 35, "Армейская кепка"], [5, 0, 60, 8, 35, "Армейская кепка"], [5, 0, 7, 6, 15, "Кепи"], [5, 0, 13, 6, 40, "Ковбойская шляпа"], [5, 0, 14, 6, 15, "Бандана"], [5, 0, 83, 5, 20, "Байкерская бандана"], [5, 0, 20, 4, 25, "Панама"], [5, 0, 94, 8, 30, "Заказная панама"], [5, 0, 34, -1, 90, "Патриотичная вязаная шапка"], [5, 0, 35, -1, 45, "Патриотичная корона"], [5, 0, 36, -1, 40, "Патриотичные ушки"], [5, 0, 40, 6, 50, "Новогодняя длинная шапка"], [5, 0, 41, -1, 35, "Новогодняя шапка"], [5, 0, 42, 2, 40, "Новогодняя шапка с пумпоном"], [5, 0, 54, 0, 35, "Фирменный снепбек"], [5, 0, 44, 6, 35, "Новогодняя кепка (козырёк вперёд)"], [5, 0, 45, 6, 35, "Новогодняя кепка (козырёк назад)"], [5, 0, 76, 19, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 77, 19, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 130, 17, 30, "Фирменная кепка (козырёк вперёд)"], [5, 0, 131, 17, 30, "Фирменная кепка (козырёк назад)"], [5, 0, 132, 2, 25, "Фирменная панама"], [5, 0, 37, 4, 40, "Пивная кепка"], [5, 1, 5, 9, 25, "Авиаторы"], [5, 1, 8, 9, 35, "Заказные авиаторы"], [5, 1, 16, 9, 30, "Беговые очки"], [5, 1, 17, 9, 40, "Офисные очки"], [5, 1, 15, 9, 25, "Спортивные очки"], [5, 6, 22, -1, 45, "Цепь на левую руку"], [5, 7, 0, -1, 45, "Цепь на правую руку"], [5, 6, 23, -1, 55, "Толстая цепь на левую руку"], [5, 7, 1, -1, 55, "Толстая цепь на правую руку"], [5, 6, 24, -1, 65, "Твёрдая цепь на левую руку"], [5, 7, 2, -1, 65, "Твёрдая цепь на левую руку"], [5, 6, 25, -1, 30, "Черепной браслет на левую руку"], [5, 7, 3, -1, 25, "Черепной браслет на левую руку"], [5, 6, 27, -1, 40, "Цепь с браслетами на левую руку"], [5, 7, 5, -1, 40, "Цепь с браслетами на левую руку"], [5, 6, 28, -1, 75, "Байкерский браслет на левую руку"], [5, 7, 6, -1, 75, "Байкерский браслет на левую руку"], [5, 6, 29, 1, 40, "Кожаный браслет на левую руку"], [5, 7, 7, 1, 40, "Кожаный браслет на левую руку"]];
exports.propMutil = propMutil;
const printListUtil = [['mpbattle_overlays', 'MP_Battle_Clothing_000_M', 'MP_Battle_Clothing_000_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_001_M', 'MP_Battle_Clothing_001_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_002_M', 'MP_Battle_Clothing_002_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_003_M', 'MP_Battle_Clothing_003_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_004_M', 'MP_Battle_Clothing_004_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_005_M', 'MP_Battle_Clothing_005_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_006_M', 'MP_Battle_Clothing_006_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_007_M', 'MP_Battle_Clothing_007_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_008_M', 'MP_Battle_Clothing_008_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_009_M', 'MP_Battle_Clothing_009_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_010_M', 'MP_Battle_Clothing_010_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_011_M', 'MP_Battle_Clothing_011_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_012_M', 'MP_Battle_Clothing_012_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_013_M', 'MP_Battle_Clothing_013_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_014_M', 'MP_Battle_Clothing_014_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_015_M', 'MP_Battle_Clothing_015_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_016_M', 'MP_Battle_Clothing_016_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_017_M', 'MP_Battle_Clothing_017_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_018_M', 'MP_Battle_Clothing_018_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_019_M', 'MP_Battle_Clothing_019_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_020_M', 'MP_Battle_Clothing_020_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_021_M', 'MP_Battle_Clothing_021_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_022_M', 'MP_Battle_Clothing_022_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_023_M', 'MP_Battle_Clothing_023_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_024_M', 'MP_Battle_Clothing_024_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_025_M', 'MP_Battle_Clothing_025_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_026_M', 'MP_Battle_Clothing_026_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_027_M', 'MP_Battle_Clothing_027_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_028_M', 'MP_Battle_Clothing_028_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_029_M', 'MP_Battle_Clothing_029_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_030_M', 'MP_Battle_Clothing_030_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_031_M', 'MP_Battle_Clothing_031_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_032_M', 'MP_Battle_Clothing_032_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_033_M', 'MP_Battle_Clothing_033_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_034_M', 'MP_Battle_Clothing_034_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_035_M', 'MP_Battle_Clothing_035_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_036_M', 'MP_Battle_Clothing_036_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_037_M', 'MP_Battle_Clothing_037_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_038_M', 'MP_Battle_Clothing_038_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_039_M', 'MP_Battle_Clothing_039_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_040_M', 'MP_Battle_Clothing_040_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_041_M', 'MP_Battle_Clothing_041_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_042_M', 'MP_Battle_Clothing_042_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_043_M', 'MP_Battle_Clothing_043_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_044_M', 'MP_Battle_Clothing_044_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_045_M', 'MP_Battle_Clothing_045_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_046_M', 'MP_Battle_Clothing_046_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_047_M', 'MP_Battle_Clothing_047_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_048_M', 'MP_Battle_Clothing_048_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_049_M', 'MP_Battle_Clothing_049_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_050_M', 'MP_Battle_Clothing_050_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_051_M', 'MP_Battle_Clothing_051_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_052_M', 'MP_Battle_Clothing_052_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_053_M', 'MP_Battle_Clothing_053_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_054_M', 'MP_Battle_Clothing_054_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_055_M', 'MP_Battle_Clothing_055_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_056_M', 'MP_Battle_Clothing_056_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_057_M', 'MP_Battle_Clothing_057_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_058_M', 'MP_Battle_Clothing_058_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_059_M', 'MP_Battle_Clothing_059_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_060_M', 'MP_Battle_Clothing_060_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_061_M', 'MP_Battle_Clothing_061_F', 0], ['mpbattle_overlays', 'MP_Battle_Clothing_062_M', 'MP_Battle_Clothing_062_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tat_000_M', 'MP_Christmas2018_Tat_000_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_000_M', 'MP_Christmas2018_Tee_000_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_001_M', 'MP_Christmas2018_Tee_001_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_002_M', 'MP_Christmas2018_Tee_002_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_003_M', 'MP_Christmas2018_Tee_003_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_004_M', 'MP_Christmas2018_Tee_004_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_005_M', 'MP_Christmas2018_Tee_005_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_006_M', 'MP_Christmas2018_Tee_006_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_007_M', 'MP_Christmas2018_Tee_007_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_008_M', 'MP_Christmas2018_Tee_008_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_009_M', 'MP_Christmas2018_Tee_009_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_010_M', 'MP_Christmas2018_Tee_010_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_011_M', 'MP_Christmas2018_Tee_011_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_012_M', 'MP_Christmas2018_Tee_012_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_013_M', 'MP_Christmas2018_Tee_013_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_014_M', 'MP_Christmas2018_Tee_014_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_015_M', 'MP_Christmas2018_Tee_015_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_016_M', 'MP_Christmas2018_Tee_016_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_017_M', 'MP_Christmas2018_Tee_017_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_018_M', 'MP_Christmas2018_Tee_018_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_019_M', 'MP_Christmas2018_Tee_019_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_020_M', 'MP_Christmas2018_Tee_020_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_021_M', 'MP_Christmas2018_Tee_021_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_022_M', 'MP_Christmas2018_Tee_022_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_023_M', 'MP_Christmas2018_Tee_023_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_024_M', 'MP_Christmas2018_Tee_024_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_025_M', 'MP_Christmas2018_Tee_025_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_026_M', 'MP_Christmas2018_Tee_026_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_027_M', 'MP_Christmas2018_Tee_027_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_028_M', 'MP_Christmas2018_Tee_028_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_029_M', 'MP_Christmas2018_Tee_029_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_030_M', 'MP_Christmas2018_Tee_030_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_031_M', 'MP_Christmas2018_Tee_031_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_032_M', 'MP_Christmas2018_Tee_032_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_033_M', 'MP_Christmas2018_Tee_033_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_034_M', 'MP_Christmas2018_Tee_034_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_035_M', 'MP_Christmas2018_Tee_035_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_036_M', 'MP_Christmas2018_Tee_036_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_037_M', 'MP_Christmas2018_Tee_037_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_038_M', 'MP_Christmas2018_Tee_038_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_039_M', 'MP_Christmas2018_Tee_039_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_040_M', 'MP_Christmas2018_Tee_040_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_041_M', 'MP_Christmas2018_Tee_041_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_042_M', 'MP_Christmas2018_Tee_042_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_043_M', 'MP_Christmas2018_Tee_043_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_044_M', 'MP_Christmas2018_Tee_044_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_045_M', 'MP_Christmas2018_Tee_045_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_046_M', 'MP_Christmas2018_Tee_046_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_047_M', 'MP_Christmas2018_Tee_047_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_048_M', 'MP_Christmas2018_Tee_048_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_049_M', 'MP_Christmas2018_Tee_049_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_050_M', 'MP_Christmas2018_Tee_050_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_051_M', 'MP_Christmas2018_Tee_051_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_052_M', 'MP_Christmas2018_Tee_052_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_053_M', 'MP_Christmas2018_Tee_053_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_054_M', 'MP_Christmas2018_Tee_054_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_055_M', 'MP_Christmas2018_Tee_055_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_056_M', 'MP_Christmas2018_Tee_056_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_057_M', 'MP_Christmas2018_Tee_057_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_058_M', 'MP_Christmas2018_Tee_058_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_059_M', 'MP_Christmas2018_Tee_059_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_060_M', 'MP_Christmas2018_Tee_060_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_061_M', 'MP_Christmas2018_Tee_061_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_062_M', 'MP_Christmas2018_Tee_062_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_063_M', 'MP_Christmas2018_Tee_063_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_064_M', 'MP_Christmas2018_Tee_064_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_065_M', 'MP_Christmas2018_Tee_065_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_066_M', 'MP_Christmas2018_Tee_066_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_067_M', 'MP_Christmas2018_Tee_067_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_068_M', 'MP_Christmas2018_Tee_068_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_069_M', 'MP_Christmas2018_Tee_069_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_070_M', 'MP_Christmas2018_Tee_070_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_071_M', 'MP_Christmas2018_Tee_071_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_072_M', 'MP_Christmas2018_Tee_072_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_073_M', 'MP_Christmas2018_Tee_073_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_074_M', 'MP_Christmas2018_Tee_074_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_075_M', 'MP_Christmas2018_Tee_075_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_076_M', 'MP_Christmas2018_Tee_076_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_077_M', 'MP_Christmas2018_Tee_077_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_078_M', 'MP_Christmas2018_Tee_078_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_079_M', 'MP_Christmas2018_Tee_079_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_080_M', 'MP_Christmas2018_Tee_080_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_081_M', 'MP_Christmas2018_Tee_081_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_082_M', 'MP_Christmas2018_Tee_082_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_083_M', 'MP_Christmas2018_Tee_083_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_084_M', 'MP_Christmas2018_Tee_084_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_085_M', 'MP_Christmas2018_Tee_085_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_086_M', 'MP_Christmas2018_Tee_086_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_087_M', 'MP_Christmas2018_Tee_087_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_088_M', 'MP_Christmas2018_Tee_088_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_089_M', 'MP_Christmas2018_Tee_089_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_090_M', 'MP_Christmas2018_Tee_090_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_091_M', 'MP_Christmas2018_Tee_091_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_092_M', 'MP_Christmas2018_Tee_092_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_093_M', 'MP_Christmas2018_Tee_093_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_094_M', 'MP_Christmas2018_Tee_094_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_095_M', 'MP_Christmas2018_Tee_095_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_096_M', 'MP_Christmas2018_Tee_096_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_097_M', 'MP_Christmas2018_Tee_097_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_098_M', 'MP_Christmas2018_Tee_098_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_099_M', 'MP_Christmas2018_Tee_099_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_100_M', 'MP_Christmas2018_Tee_100_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_101_M', 'MP_Christmas2018_Tee_101_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_102_M', 'MP_Christmas2018_Tee_102_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_103_M', 'MP_Christmas2018_Tee_103_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_104_M', 'MP_Christmas2018_Tee_104_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_105_M', 'MP_Christmas2018_Tee_105_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_106_M', 'MP_Christmas2018_Tee_106_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_107_M', 'MP_Christmas2018_Tee_107_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_108_M', 'MP_Christmas2018_Tee_108_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_109_M', 'MP_Christmas2018_Tee_109_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_110_M', 'MP_Christmas2018_Tee_110_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_111_M', 'MP_Christmas2018_Tee_111_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_112_M', 'MP_Christmas2018_Tee_112_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_113_M', 'MP_Christmas2018_Tee_113_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_114_M', 'MP_Christmas2018_Tee_114_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_115_M', 'MP_Christmas2018_Tee_115_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_116_M', 'MP_Christmas2018_Tee_116_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_117_M', 'MP_Christmas2018_Tee_117_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_118_M', 'MP_Christmas2018_Tee_118_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_119_M', 'MP_Christmas2018_Tee_119_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_120_M', 'MP_Christmas2018_Tee_120_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_121_M', 'MP_Christmas2018_Tee_121_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_122_M', 'MP_Christmas2018_Tee_122_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_123_M', 'MP_Christmas2018_Tee_123_F', 0], ['mpchristmas2018_overlays', 'MP_Christmas2018_Tee_124_M', 'MP_Christmas2018_Tee_124_F', 0], ['mpexecutive_overlays', 'MP_Securoserv_000_M', 'MP_Securoserv_000_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_000_M', 'MP_exec_teams_000_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_001_M', 'MP_exec_teams_001_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_002_M', 'MP_exec_teams_002_F', 0], ['mpexecutive_overlays', 'MP_exec_teams_003_M', 'MP_exec_teams_003_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_000_M', 'MP_exec_prizes_000_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_001_M', 'MP_exec_prizes_001_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_002_M', 'MP_exec_prizes_002_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_003_M', 'MP_exec_prizes_003_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_004_M', 'MP_exec_prizes_004_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_005_M', 'MP_exec_prizes_005_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_006_M', 'MP_exec_prizes_006_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_007_M', 'MP_exec_prizes_007_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_008_M', 'MP_exec_prizes_008_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_009_M', 'MP_exec_prizes_009_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_010_M', 'MP_exec_prizes_010_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_011_M', 'MP_exec_prizes_011_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_012_M', 'MP_exec_prizes_012_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_013_M', 'MP_exec_prizes_013_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_014_M', 'MP_exec_prizes_014_F', 0], ['mpexecutive_overlays', 'MP_exec_prizes_015_M', 'MP_exec_prizes_015_F', 0], ['mphalloween_overlays', 'HW_Tee_000_M', 'HW_Tee_000_F', 0], ['mphalloween_overlays', 'HW_Tee_002_M', 'HW_Tee_002_F', 0], ['mphalloween_overlays', 'HW_Tee_004_M', 'HW_Tee_004_F', 0], ['mphalloween_overlays', 'HW_Tee_006_M', 'HW_Tee_006_F', 0], ['mphalloween_overlays', 'HW_Tee_008_M', 'HW_Tee_008_F', 0], ['mphalloween_overlays', 'HW_Tee_010_M', 'HW_Tee_010_F', 0], ['mphalloween_overlays', 'HW_Tee_012_M', 'HW_Tee_012_F', 0], ['mphalloween_overlays', 'HW_Tee_001_M', 'HW_Tee_001_F', 0], ['mphalloween_overlays', 'HW_Tee_003_M', 'HW_Tee_003_F', 0], ['mphalloween_overlays', 'HW_Tee_005_M', 'HW_Tee_005_F', 0], ['mphalloween_overlays', 'HW_Tee_007_M', 'HW_Tee_007_F', 0], ['mphalloween_overlays', 'HW_Tee_009_M', 'HW_Tee_009_F', 0], ['mphalloween_overlays', 'HW_Tee_011_M', 'HW_Tee_011_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_000_M', 'MP_Vinewood_Tee_000_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_001_M', 'MP_Vinewood_Tee_001_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_002_M', 'MP_Vinewood_Tee_002_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_003_M', 'MP_Vinewood_Tee_003_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_004_M', 'MP_Vinewood_Tee_004_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_005_M', 'MP_Vinewood_Tee_005_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_006_M', 'MP_Vinewood_Tee_006_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_007_M', 'MP_Vinewood_Tee_007_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_008_M', 'MP_Vinewood_Tee_008_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_009_M', 'MP_Vinewood_Tee_009_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_010_M', 'MP_Vinewood_Tee_010_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_011_M', 'MP_Vinewood_Tee_011_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_012_M', 'MP_Vinewood_Tee_012_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_013_M', 'MP_Vinewood_Tee_013_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_014_M', 'MP_Vinewood_Tee_014_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_015_M', 'MP_Vinewood_Tee_015_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_016_M', 'MP_Vinewood_Tee_016_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_017_M', 'MP_Vinewood_Tee_017_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_018_M', 'MP_Vinewood_Tee_018_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_019_M', 'MP_Vinewood_Tee_019_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_020_M', 'MP_Vinewood_Tee_020_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_021_M', 'MP_Vinewood_Tee_021_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_022_M', 'MP_Vinewood_Tee_022_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_023_M', 'MP_Vinewood_Tee_023_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_024_M', 'MP_Vinewood_Tee_024_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_025_M', 'MP_Vinewood_Tee_025_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_026_M', 'MP_Vinewood_Tee_026_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_027_M', 'MP_Vinewood_Tee_027_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_028_M', 'MP_Vinewood_Tee_028_F', 0], ['mpvinewood_overlays', 'MP_Vinewood_Tee_029_M', 'MP_Vinewood_Tee_029_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_000_M', 'MP_Gunrunning_Award_000_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_001_M', 'MP_Gunrunning_Award_001_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_002_M', 'MP_Gunrunning_Award_002_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_003_M', 'MP_Gunrunning_Award_003_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_004_M', 'MP_Gunrunning_Award_004_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_005_M', 'MP_Gunrunning_Award_005_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_006_M', 'MP_Gunrunning_Award_006_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_007_M', 'MP_Gunrunning_Award_007_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_008_M', 'MP_Gunrunning_Award_008_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_009_M', 'MP_Gunrunning_Award_009_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_010_M', 'MP_Gunrunning_Award_010_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_011_M', 'MP_Gunrunning_Award_011_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_012_M', 'MP_Gunrunning_Award_012_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_013_M', 'MP_Gunrunning_Award_013_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_014_M', 'MP_Gunrunning_Award_014_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_015_M', 'MP_Gunrunning_Award_015_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_016_M', 'MP_Gunrunning_Award_016_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_017_M', 'MP_Gunrunning_Award_017_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_018_M', 'MP_Gunrunning_Award_018_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_019_M', 'MP_Gunrunning_Award_019_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_020_M', 'MP_Gunrunning_Award_020_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_021_M', 'MP_Gunrunning_Award_021_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_022_M', 'MP_Gunrunning_Award_022_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_023_M', 'MP_Gunrunning_Award_023_F', 0], ['mpgunrunning_overlays', 'MP_Gunrunning_Award_024_M', 'MP_Gunrunning_Award_024_F', 0], ['mplowrider_overlays', 'MP_Broker_000_M', 'MP_Broker_000_F', 0], ['mplowrider_overlays', 'MP_Broker_001_M', 'MP_Broker_001_F', 0], ['mplowrider_overlays', 'MP_Broker_002_M', 'MP_Broker_002_F', 0], ['mplowrider2_overlays', 'MP_Chianski_000_M', 'MP_Chianski_000_F', 0], ['mplowrider2_overlays', 'MP_Chianski_001_M', 'MP_Chianski_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_004_M', 'MP_LUXE_LC_004_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_011_M', 'MP_LUXE_LC_005_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_005_M', 'MP_LUXE_LC_010_F', 0], ['mpluxe_overlays', 'MP_LUXE_LC_010_M', 'MP_LUXE_LC_011_F', 0], ['mpluxe_overlays', 'MP_LUXE_ENEMA_000_M', 'MP_LUXE_Enema_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_Per_001_M', 'MP_LUXE_Per_001_F', 0], ['mpluxe_overlays', 'MP_FAKE_SN_000_M', 'MP_FAKE_LB_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_SC_000_M', 'MP_FAKE_LC_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DS_000_M', 'MP_FAKE_ENEMA_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_Vap_000_M', 'MP_FAKE_Per_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DIS_000_M', 'MP_FAKE_SN_000_F', 0], ['mpluxe_overlays', 'MP_FAKE_DIS_001_M', 'MP_FAKE_SC_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_000_M', 'MP_FAKE_DS_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_001_M', 'MP_FAKE_Vap_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_DIX_002_M', 'MP_FAKE_DIS_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_000_M', 'MP_FAKE_DIS_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_001_M', 'MP_LUXE_DIX_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_002_M', 'MP_LUXE_DIX_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_003_M', 'MP_LUXE_DIX_002_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_004_M', 'MP_LUXE_SN_000_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_005_M', 'MP_LUXE_SN_001_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_006_M', 'MP_LUXE_SN_002_F', 0], ['mpluxe_overlays', 'MP_LUXE_SN_007_M', 'MP_LUXE_SN_003_F', 0], ['mpluxe_overlays', 'MP_FILM_000_M', 'MP_LUXE_SN_004_F', 0], ['mpluxe_overlays', 'MP_FILM_001_M', 'MP_LUXE_SN_005_F', 0], ['mpluxe_overlays', 'MP_FILM_002_M', 'MP_LUXE_SN_006_F', 0], ['mpluxe_overlays', 'MP_FILM_003_M', 'MP_LUXE_SN_007_F', 0], ['mpluxe_overlays', 'MP_FILM_004_M', 'MP_LUXE_SC_000_F', 0], ['mpluxe_overlays', 'MP_FILM_005_M', 'MP_FILM_000_F', 0], ['mpluxe_overlays', 'MP_FILM_006_M', 'MP_FILM_001_F', 0], ['mpluxe_overlays', 'MP_FILM_007_M', 'MP_FILM_002_F', 0], ['mpluxe_overlays', 'MP_FILM_008_M', 'MP_FILM_003_F', 0], ['mpluxe_overlays', 'MP_FILM_009_M', 'MP_FILM_004_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_000_M', 'MP_LUXE_LC_000_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_001_M', 'MP_LUXE_LC_001_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_002_M', 'MP_LUXE_LC_002_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_003_M', 'MP_LUXE_LC_003_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_006_M', 'MP_LUXE_LC_006_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_007_M', 'MP_LUXE_LC_007_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_008_M', 'MP_LUXE_LC_008_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_009_M', 'MP_LUXE_LC_009_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_012_M', 'MP_LUXE_LC_012_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_013_M', 'MP_LUXE_LC_013_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_014_M', 'MP_LUXE_LC_014_F', 0], ['mpluxe2_overlays', 'MP_LUXE_LC_015_M', 'MP_LUXE_LC_015_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_000_M', 'MP_LUXE_VDG_000_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_001_M', 'MP_LUXE_VDG_001_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_002_M', 'MP_LUXE_VDG_002_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_004_M', 'MP_LUXE_VDG_004_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_005_M', 'MP_LUXE_VDG_005_F', 0], ['mpluxe2_overlays', 'MP_LUXE_VDG_006_M', 'MP_LUXE_VDG_006_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_000_M', 'MP_Smuggler_Graphic_000_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_001_M', 'MP_Smuggler_Graphic_001_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_002_M', 'MP_Smuggler_Graphic_002_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_003_M', 'MP_Smuggler_Graphic_003_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_004_M', 'MP_Smuggler_Graphic_004_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_005_M', 'MP_Smuggler_Graphic_005_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_006_M', 'MP_Smuggler_Graphic_006_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_007_M', 'MP_Smuggler_Graphic_007_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_008_M', 'MP_Smuggler_Graphic_008_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_009_M', 'MP_Smuggler_Graphic_009_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_010_M', 'MP_Smuggler_Graphic_010_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_011_M', 'MP_Smuggler_Graphic_011_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_012_M', 'MP_Smuggler_Graphic_012_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_013_M', 'MP_Smuggler_Graphic_013_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_014_M', 'MP_Smuggler_Graphic_014_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_015_M', 'MP_Smuggler_Graphic_015_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_016_M', 'MP_Smuggler_Graphic_016_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_017_M', 'MP_Smuggler_Graphic_017_F', 0], ['mpsmuggler_overlays', 'MP_Smuggler_Graphic_018_M', 'MP_Smuggler_Graphic_018_F', 0]];
exports.printListUtil = printListUtil;
const houseFridgeAmount = [100000, 500000, 1000000];
exports.houseFridgeAmount = houseFridgeAmount;
const houseFridgeCost = 250000;
exports.houseFridgeCost = houseFridgeCost;
},{}],"ZRYf":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.enums = exports._vehicleInfo = exports._tprint = exports._tattooList = exports._shopList = exports._propM = exports._propF = exports._overlays = exports._clothM = exports._clothF = void 0;

var _sharedData = require("../util/sharedData");

var _inventory = require("../util/inventory");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let _clothM = _inventory.clothMutil;
exports._clothM = _clothM;
let _propM = _inventory.propMutil;
exports._propM = _propM;
let _clothF = _inventory.clothFutil;
exports._clothF = _clothF;
let _propF = _inventory.propFutil;
exports._propF = _propF;
let _shopList = [];
exports._shopList = _shopList;
let _overlays = [];
exports._overlays = _overlays;
let _tprint = _inventory.printListUtil;
exports._tprint = _tprint;
let _tattooList = [];
exports._tattooList = _tattooList;
let _vehicleInfo = [];
exports._vehicleInfo = _vehicleInfo;
let currentRequestID = 0;
let pendingRequests = {};
let enums = {
  get: _enum => {
    switch (_enum) {
      case 'clothM':
        return _clothM;

      case 'propM':
        return _propM;

      case 'clothF':
        return _clothF;

      case 'propF':
        return _propF;

      case 'shopList':
        return _shopList;

      case 'vehicleInfo':
        return _vehicleInfo;

      case 'printList':
        return _tprint;

      case 'overlays':
        return _overlays;

      case 'tattooList':
        return _tattooList;

      default:
        return undefined;
    }
  },
  resetVehicleInfo: () => {
    exports._vehicleInfo = _vehicleInfo = [];
  },
  updateVehicleInfo: data => {
    exports._vehicleInfo = _vehicleInfo = _vehicleInfo.concat(data);
  },
  removeVehicleInfo: id => {
    _vehicleInfo.forEach((item, index) => {
      if (item.id == id) _vehicleInfo.splice(index, 1);
    });
  },
  editVehicleInfo: (id, value) => {
    let en = _vehicleInfo.find(v => v.id === id);

    if (en) {
      en = _objectSpread(_objectSpread({}, en), value);
    }
  },
  kitchenIntData: _sharedData.kitchenIntDataUtil,
  dispatchItemList: [],
  lscClassPrice: [['Commercials', 1.2], ['Compacts', 1], ['Coupes', 1.5], ['Industrial', 1.6], ['Motorcycles', 1.2], ['Muscle', 5], ['Off-Road', 1.5], ['Sedans', 2], ['Sports', 5], ['Sports Classics', 8], ['Super', 10], ['SUVs', 3], ['Utility', 1], ['Vans', 2]],
  lscNames: [['Спойлер', 750], ['Передний бампер', 1000], ['Задний бампер', 1000], ['Боковые юбки', 925], ['Выхлопная труба', 810], ['Внутренняя рама', 600], ['Решетка радиатора', 450], ['Капот', 1100], ['Крылья', 650], ['Крылья-2', 650], ['Крыша', 1000], ['Двигатель', 750], ['Тормозная система', 1000], ['Трансмиссия', 1500], ['Гудок', 59000], ['Высота подвески', 1600], ['Броня', 0], ['17', 0], ['Турбо', 12500], ['19', 0], ['20', 0], ['21', 0], ['Ксенон', 750], ['Колёса', 2000], ['Заднее колесо', 1250], ['Номер ТС', 500], ['Панель радиатора', 350], ['Салон', 2500], ['Украшения', 1000], ['Салон', 1000], ['Циферблат', 350], ['Обшивка', 500], ['Сиденья', 650], ['Руль', 500], ['Рычаг переключателя', 250], ['Бляшки', 350], ['Акустика', 1500], ['37', 0], ['Гидравлика', 10000], ['Блок двигателя', 1350], ['Воздушный фильтр', 550], ['41', 0], ['Крышка', 0], ['Антены', 1100], ['Крыша', 750], ['45', 0], ['Тонировка', 1000], ['47', 0], ['Винилл', 7500], ['49', 0], ['50', 0], ['51', 0], ['52', 0], ['53', 0], ['Высота подвески', 0], ['55', 0], ['56', 0], ['57', 0], ['58', 0], ['59', 0], ['60', 0], ['61', 0], ['Колёса', 0], ['63', 0], ['64', 0], ['65', 0], ['66', 0], ['67', 0], ['68', 0], ['Тонировка', 1000], ['70', 0], ['71', 0], ['72', 0], ['73', 0], ['Цвет приборной панели', 1000], ['Цвет отделки', 2500], ['Специальная окраска', 2500], ['Тип колёс', 0], ['Тип колёс', 0], ['Крутящий момент', 5000]],
  lscSNames: [['Привод', 1000], ['Ускорение', 100000], ['Мощность Двигателя', 150000], ['Сила торможения', 50], ['Распределение силы торм.', 50], ['Ручной тормоз', 50], ['Угол поворота колёс', 200], ['Сцепление колес на повороте', 50], ['Пробуксовка колес', 50]],
  lscCarColorPos: [[-1167.36, -2013.42, 11.63059, 136.2973], [-327.3558, -144.5778, 38.04641, 250.0263], [735.6607, -1072.729, 21.2193, 179.3472], [-206.2765, -1323.342, 29.87665, 2.203119], [1182.65, 2638.49, 36.78132, 357.8441], [103.6963, 6622.596, 30.81484, 224.0517], [-151.0918, -594.4427, 166.0052, 308.8605], [478.4267, -1308.524, 28.01912, 27.1145]],
  lscCamColorPos: [[-1167.856, -2016.76, 13.53096], [-323.593, -143.7437, 39.26034], [733.7505, -1069.566, 22.43295], [-209.2587, -1319.221, 31.09041], [1184.5, 2635.391, 38.0], [100.3815, 6623.296, 32.12886], [-146.051, -593.9824, 167.5002], [475.9341, -1307.055, 29.43324]],
  lscCarPos: [[-1159.827, -2015.182, 12.16598, 338.3167], [-330.8568, -137.6985, 38.00612, 95.85743], [732.1998, -1088.71, 21.15658, 89.10553], [-222.6972, -1329.915, 29.87796, 269.8108], [1174.876, 2640.67, 36.7454, 0.5306945], [110.3291, 6626.977, 30.7735, 223.695], [-147.4434, -599.0691, 166.0058, 315.3235], [481.2153, -1317.698, 28.09073, 296.715]],
  lscCamPos: [[-1155.691, -2012.395, 13.18026], [-335.2385, -136.069, 39.00966], [727.5853, -1091.216, 22.16918], [-217.821, -1327.9, 30.89041], [1177.862, 2644.075, 37.78613], [111.6643, 6621.887, 31.78725], [-145.8006, -594.2851, 167.0002], [482.9536, -1314.375, 29.20051]],
  lscCam: null,
  lscCamRot: 0,
  customIpl: [['Arcadius', -113.6372, -606.4175, 35.28072, 250], ['Bike_rent_Chumash', -3239.396, 979.3148, 11.73511, 200], ['Bike_rent_DelPerro', -511.15, -290.38, 34.41, 200], ['Bike_rent_DowntownVinewood', 318.6217, 134.4918, 102.5139, 200], ['Bike_rent_GrandSenoraDesert', 1932.529, 2624.868, 45.17271, 200], ['Bike_rent_Grapeseed', 1681.826, 4848.959, 41.11597, 200], ['Bike_rent_Harmony', 287.979, 2594.161, 43.42525, 200], ['Bike_rent_LittleSeoul', -873.5806, -811.7497, 18.28642, 200], ['Bike_rent_MirrorPark', 1127.512, -504.3805, 63.17381, 200], ['Bike_rent_MissionRow', 387.4997, -948.7668, 28.42549, 200], ['Bike_rent_PaletoBay', -265.0951, 6285.909, 30.47534, 200], ['Bike_rent_PillboxHill', -53.90234, -914.5641, 28.43059, 200], ['Bike_rent_RockfordHills', -824.4766, -116.8027, 36.5822, 200], ['Bike_rent_SandyShores', 1868.151, 3684.298, 32.72649, 200], ['Bike_rent_TextileCity', 297.3168, -602.5576, 42.30396, 200], ['Bike_rent_VespucciBeach', -1208.258, -1551.33, 3.373086, 200], ['Boat_FS_LTD_LagoZancudo', -2079.196, 2604.659, 1.030312, 400], ['Boat_FS_LTD_SanChianskiMR', 3855.35, 4458.623, 0.8497663, 400], ['Boat_FS_Xero_LaPuerta', -793.9843, -1505.001, -1.474684, 400], ['Boat_rent_LaPuerta', -789.2872, -1451.436, 0.6233408, 200], ['Boat_rent_PaletoCove', -1605.6, 5250.369, 2.974098, 200], ['Boat_rent_SanChianskiMR', 3865.394, 4463.864, 1.716229, 200], ['CCTV_LosSantos', -500.6877, -511.4886, 24.12395, 3000], ['CCTV_MirrorPark', 1129.704, -558.191, 55.74935, 500], ['Emergency', 343.1284, -1398.297, 31.50923, 200], ['Green_MirrorPark', 1129.704, -558.191, 55.74935, 750], ['Jail', 1702.445, 2518.294, 44.56486, 700], ['LSPD_MissionRow', 450.8555, -1002.655, 25.12975, 300], ['M83_Ammunation_PillboxHill', 6.731856, -1116.993, 27.67282, 250], ['MazeOffice', -50.70406, -788.6946, 43.2251, 200], ['Meria', -1378.306, -486.7387, 49.01204, 350], ['MirrorPark_Park', 1093.131, -635.7221, 57.74927, 400], ['M83_House623', 906.3942, -623.0359, 57.04899, 200], ['SD_PaletoBay', -461.1251, 6012.547, 30.34048, 400], ['Bike_rent_Strawberry', 56.76987, -1331.693, 28.3127, 200], ['Bike_rent_LISA', -1012.182, -2682.097, 12.98296, 200], ['Gruppe6_Garage', 452.8934, -1097.205, 34.05798, 400], ['M83_Ammunation_Morningwood', -1330.159, -392.0733, 35.56855, 200], ['RockfordHills_Church', -776.3428, 19.6968, 39.65411, 100], ['M83_House258', -1551.61, -86.43635, 53.3255, 200], ['M83_Apartaments33', 385.6998, -56.79765, 121.5355, 400], ['M83_House1126', -82.94398, 981.2236, 233.4471, 350], ['AutoSchool', -1582.849, -556.4066, 33.95407, 100], ['M83_House364', -554.9221, 753.3491, 184.4249, 250], ['M83_House254', -1492.88, 127.1316, 54.64317, 300], ['Army_Port', 528.8688, -3215.303, 16.12999, 400], ['M83_PacificStandart', 242.8493, 206.8475, 104.2568, 150], ['M83_Fleeca_Alta', 315.4205, -275.294, 52.92414, 100], ['M83_Fleeca_PillboxHill', 150.9835, -1037.152, 28.33922, 100], ['M83_Fleeca_BanhamCanyon', -2966.818, 483.0374, 14.69272, 100], ['M83_Fleeca_Burton', -349.8218, -46.09695, 48.0368, 100], ['M83_Fleeca_GrandSenoraDesert', 1175.237, 2702.871, 37.17272, 100]],
  rentList: [[1033245328, 'Dinghy', 'Boats', 434], [276773164, 'Dinghy2', 'Boats', 315], [509498602, 'Dinghy3', 'Boats', 365], [867467158, 'Dinghy4', 'Boats', 430], [861409633, 'Jetmax', 'Boats', 1460], [-1043459709, 'Marquis', 'Boats', 31010], [-1030275036, 'Seashark', 'Boats', 86], [-311022263, 'Seashark3', 'Boats', 92], [944930284, 'Smuggler', 'Boats', 3960], [231083307, 'Speeder', 'Boats', 1860], [437538602, 'Speeder2', 'Boats', 1880], [400514754, 'Squalo', 'Boats', 552], [771711535, 'Submersible', 'Boats', 12510], [-1066334226, 'Submersible2', 'Boats', 17510], [-282946103, 'Suntrap', 'Boats', 300], [1070967343, 'Toro', 'Boats', 6110], [908897389, 'Toro2', 'Boats', 6260], [290013743, 'Tropic', 'Boats', 705], [1448677353, 'Tropic2', 'Boats', 735], [-2100640717, 'Tug', 'Boats', 13560], [2053223216, 'Benson', 'Commercials', 529], [1518533038, 'Hauler', 'Commercials', 358], [904750859, 'Mule', 'Commercials', 365], [-1050465301, 'Mule2', 'Commercials', 369], [-2052737935, 'Mule3', 'Commercials', 406], [569305213, 'Packer', 'Commercials', 289], [-2137348917, 'Phantom', 'Commercials', 601], [2112052861, 'Pounder', 'Commercials', 636], [1827997487, 'Roadkiller', 'Commercials', 472], [-344943009, 'Blista', 'Compacts', 74], [1039032026, 'Blista2', 'Compacts', 31], [-591651781, 'Blista3', 'Compacts', 42], [1549126457, 'Brioso', 'Compacts', 144], [-1130810103, 'Dilettante', 'Compacts', 90], [-1177863319, 'Issi2', 'Compacts', 66], [931280609, 'Issi3', 'Compacts', 260], [-431692672, 'Panto', 'Compacts', 58], [1507916787, 'Picador', 'Compacts', 287], [-1450650718, 'Prairie', 'Compacts', 71], [841808271, 'Rhapsody', 'Compacts', 75], [330661258, 'CogCabrio', 'Coupes', 970], [-5153954, 'Exemplar', 'Coupes', 785], [-591610296, 'F620', 'Coupes', 530], [-391594584, 'Felon', 'Coupes', 420], [-89291282, 'Felon2', 'Coupes', 460], [-624529134, 'Jackal', 'Coupes', 134], [1348744438, 'Oracle', 'Coupes', 122], [-511601230, 'Oracle2', 'Coupes', 305], [1349725314, 'Sentinel', 'Coupes', 366], [873639469, 'Sentinel2', 'Coupes', 416], [1581459400, 'Windsor', 'Coupes', 2680], [-1930048799, 'Windsor2', 'Coupes', 3110], [-1122289213, 'Zion', 'Coupes', 154], [-1193103848, 'Zion2', 'Coupes', 204], [1131912276, 'bmx', 'Cycles', 13], [448402357, 'Cruiser', 'Cycles', 14], [-836512833, 'Fixter', 'Cycles', 17], [-186537451, 'Scorcher', 'Cycles', 18], [1127861609, 'TriBike', 'Cycles', 24], [-1233807380, 'TriBike2', 'Cycles', 24], [-400295096, 'TriBike3', 'Cycles', 24], [745926877, 'Buzzard2', 'Helicopters', 7910], [744705981, 'Frogger', 'Helicopters', 13910], [-1984275979, 'Havok', 'Helicopters', 900], [-1660661558, 'Maverick', 'Helicopters', 9210], [-726768679, 'Seasparrow', 'Helicopters', 1960], [710198397, 'Supervolito', 'Helicopters', 25010], [-1671539132, 'Supervolito2', 'Helicopters', 30010], [-339587598, 'Swift', 'Helicopters', 19460], [1075432268, 'Swift2', 'Helicopters', 39460], [-1845487887, 'Volatus', 'Helicopters', 88510], [-2107990196, 'Guardian', 'Industrial', 915], [1672195559, 'Akuma', 'Motorcycles', 56], [-571009320, 'Angel', 'Motorcycles', 94], [-2115793025, 'Avarus', 'Motorcycles', 66], [-2140431165, 'Bagger', 'Motorcycles', 250], [-114291515, 'Bati', 'Motorcycles', 145], [-891462355, 'Bati2', 'Motorcycles', 175], [86520421, 'BF400', 'Motorcycles', 49], [-440768424, 'Blazer4', 'Motorcycles', 106], [11251904, 'CarbonRS', 'Motorcycles', 193], [6774487, 'Chimera', 'Motorcycles', 255], [390201602, 'Cliffhanger', 'Motorcycles', 392], [2006142190, 'Daemon', 'Motorcycles', 77], [-1404136503, 'Daemon2', 'Motorcycles', 80], [822018448, 'Defiler', 'Motorcycles', 82], [-239841468, 'Diablous', 'Motorcycles', 130], [1790834270, 'Diablous2', 'Motorcycles', 250], [-1670998136, 'Double', 'Motorcycles', 131], [1753414259, 'Enduro', 'Motorcycles', 32], [2035069708, 'Esskey', 'Motorcycles', 142], [627535535, 'Fcr', 'Motorcycles', 125], [-757735410, 'Fcr2', 'Motorcycles', 225], [741090084, 'Gargoyle', 'Motorcycles', 595], [1265391242, 'Hakuchou', 'Motorcycles', 115], [-255678177, 'Hakuchou2', 'Motorcycles', 215], [301427732, 'Hexer', 'Motorcycles', 79], [-159126838, 'Innovation', 'Motorcycles', 194], [640818791, 'Lectro', 'Motorcycles', 81], [-1523428744, 'Manchez', 'Motorcycles', 94], [-634879114, 'Nemesis', 'Motorcycles', 90], [-1606187161, 'Nightblade', 'Motorcycles', 145], [-909201658, 'PCJ', 'Motorcycles', 86], [1873600305, 'Ratbike', 'Motorcycles', 59], [-893578776, 'Ruffian', 'Motorcycles', 87], [788045382, 'Sanchez', 'Motorcycles', 84], [-1453280962, 'Sanchez2', 'Motorcycles', 89], [1491277511, 'Sanctus', 'Motorcycles', 166], [-405626514, 'Shotaro', 'Motorcycles', 3910], [743478836, 'Sovereign', 'Motorcycles', 95], [1836027715, 'Thrust', 'Motorcycles', 61], [-140902153, 'Vader', 'Motorcycles', 77], [-1353081087, 'Vindicator', 'Motorcycles', 101], [-609625092, 'Vortex', 'Motorcycles', 207], [-618617997, 'Wolfsbane', 'Motorcycles', 50], [-1009268949, 'Zombiea', 'Motorcycles', 109], [-570033273, 'Zombieb', 'Motorcycles', 108], [-1205801634, 'Blade', 'Muscle', 338], [-682211828, 'Buccaneer', 'Muscle', 250], [-1013450936, 'Buccaneer2', 'Muscle', 350], [349605904, 'Chino', 'Muscle', 205], [-1361687965, 'Chino2', 'Muscle', 305], [-1116818112, 'Domc', 'Muscle', 474], [80636076, 'Dominator', 'Muscle', 91], [-915704871, 'Dominator2', 'Muscle', 101], [-986944621, 'Dominator3', 'Muscle', 460], [723973206, 'Dukes', 'Muscle', 764], [2134119907, 'Dukes3', 'Muscle', 854], [-1267543371, 'Ellie', 'Muscle', 1900], [-2119578145, 'Faction', 'Muscle', 305], [-1790546981, 'Faction2', 'Muscle', 405], [-2039755226, 'Faction3', 'Muscle', 425], [-1800170043, 'Gauntlet', 'Muscle', 209], [349315417, 'Gauntlet2', 'Muscle', 219], [-1848730848, 'Gauntlets', 'Muscle', 262], [15219735, 'Hermes', 'Muscle', 825], [37348240, 'Hotknife', 'Muscle', 463], [600450546, 'Hustler', 'Muscle', 493], [525509695, 'Moonbeam', 'Muscle', 57], [1896491931, 'Moonbeam2', 'Muscle', 157], [-1943285540, 'NightShade', 'Muscle', 352], [-2095439403, 'Phoenix', 'Muscle', 373], [-667151410, 'RatLoader', 'Muscle', 104], [-589178377, 'RatLoader2', 'Muscle', 404], [-227741703, 'Ruiner', 'Muscle', 97], [-1685021548, 'SabreGT', 'Muscle', 244], [223258115, 'SabreGT2', 'Muscle', 344], [729783779, 'Slamvan', 'Muscle', 365], [833469436, 'SlamVan2', 'Muscle', 415], [1119641113, 'SlamVan3', 'Muscle', 465], [1923400478, 'Stalion', 'Muscle', 260], [-401643538, 'Stalion2', 'Muscle', 270], [972671128, 'Tampa', 'Muscle', 282], [-825837129, 'Vigero', 'Muscle', 454], [-1758379524, 'Vigero2', 'Muscle', 55], [-498054846, 'Virgo', 'Muscle', 73], [-899509638, 'Virgo2', 'Muscle', 243], [16646064, 'Virgo3', 'Muscle', 143], [2006667053, 'Voodoo', 'Muscle', 363], [523724515, 'Voodoo2', 'Muscle', 64], [1871995513, 'Yosemite', 'Muscle', 165], [1126868326, 'BfInjection', 'Off-Road', 79], [-349601129, 'Bifta', 'Off-Road', 104], [-2128233223, 'Blazer', 'Off-Road', 52], [-1269889662, 'Blazer3', 'Off-Road', 56], [-1435919434, 'Bodhi2', 'Off-Road', 122], [-1479664699, 'Brawler', 'Off-Road', 1295], [-1993175239, 'Cara', 'Off-Road', 375], [1770332643, 'DLoader', 'Off-Road', 145], [-1661854193, 'Dune', 'Off-Road', 19], [92612664, 'Kalahari', 'Off-Road', 190], [-121446169, 'Kamacho', 'Off-Road', 463], [-2064372143, 'Mesa3', 'Off-Road', 280], [1390084576, 'Rancher', 'Off-Road', 262], [1645267888, 'RancherXL', 'Off-Road', 310], [-1207771834, 'Rebel', 'Off-Road', 22], [-2045594037, 'Rebel2', 'Off-Road', 47], [-1532697517, 'Riata', 'Off-Road', 860], [-1189015600, 'Sandking', 'Off-Road', 252], [989381445, 'Sandking2', 'Off-Road', 202], [101905590, 'TrophyTruck', 'Off-Road', 765], [-663299102, 'TrophyTruck2', 'Off-Road', 715], [-1523619738, 'AlphaZ1', 'Planes', 5360], [-150975354, 'Blimp', 'Planes', 25010], [-613725916, 'Blimp2', 'Planes', 25510], [-644710429, 'Cuban800', 'Planes', 1364], [-901163259, 'Dodo', 'Planes', 3465], [970356638, 'Duster', 'Planes', 489], [-1007528109, 'Howard', 'Planes', 4135], [621481054, 'Luxor', 'Planes', 23010], [-1214293858, 'Luxor2', 'Planes', 53010], [-1746576111, 'Mammatus', 'Planes', 1500], [-1763555241, 'Microlight', 'Planes', 363], [-392675425, 'Seabreeze', 'Planes', 3500], [-2122757008, 'Stunt', 'Planes', 3000], [-1673356438, 'Velum', 'Planes', 26010], [1077420264, 'Velum2', 'Planes', 28010], [1341619767, 'Vestra', 'Planes', 18810], [-1809822327, 'Asea', 'Sedans', 75], [-1903012613, 'Asterope', 'Sedans', 155], [906642318, 'Cog55', 'Sedans', 710], [-2030171296, 'Cognoscenti', 'Sedans', 530], [-685276541, 'Emperor', 'Sedans', 84], [-1883002148, 'Emperor2', 'Sedans', 33], [-311302597, 'Emperor4', 'Sedans', 154], [1909141499, 'Fugitive', 'Sedans', 150], [75131841, 'Glendale', 'Sedans', 161], [40817712, 'Greenwood', 'Sedans', 67], [-1289722222, 'Ingot', 'Sedans', 43], [886934177, 'Intruder', 'Sedans', 51], [-350899544, 'Merit2', 'Sedans', 100], [-2077743597, 'Perennial', 'Sedans', 29], [-1883869285, 'Premier', 'Sedans', 54], [-1150599089, 'Primo', 'Sedans', 55], [-2040426790, 'Primo2', 'Sedans', 155], [-14495224, 'Regina', 'Sedans', 86], [-1369781310, 'Regina3', 'Sedans', 94], [-322343873, 'Schafter', 'Sedans', 54], [-1477580979, 'Stanier', 'Sedans', 35], [-1445320949, 'Stanier2', 'Sedans', 40], [1723137093, 'Stratum', 'Sedans', 33], [-1961627517, 'Stretch', 'Sedans', 535], [-1894894188, 'Surge', 'Sedans', 102], [-1008861746, 'Tailgater', 'Sedans', 76], [251388012, 'Torrence', 'Sedans', 152], [-583281407, 'Vincent', 'Sedans', 45], [1373123368, 'Warrener', 'Sedans', 559], [1777363799, 'Washington', 'Sedans', 58], [767087018, 'Alpha', 'Sports', 1290], [-1041692462, 'Banshee', 'Sports', 860], [1274868363, 'BestiaGTS', 'Sports', 1930], [-304802106, 'Buffalo', 'Sports', 64], [736902334, 'Buffalo2', 'Sports', 105], [237764926, 'Buffalo3', 'Sports', 125], [2072687711, 'Carbonizzare', 'Sports', 2990], [-1045541610, 'Comet2', 'Sports', 1710], [-2022483795, 'Comet3', 'Sports', 1255], [1561920505, 'Comet4', 'Sports', 3910], [661493923, 'Comet5', 'Sports', 4610], [108773431, 'Coquette', 'Sports', 690], [-1728685474, 'Coquette4', 'Sports', 258], [-2125340601, 'Coquette42', 'Sports', 263], [196747873, 'Elegy', 'Sports', 669], [-566387422, 'Elegy2', 'Sports', 709], [-1995326987, 'Feltzer2', 'Sports', 260], [-1566741232, 'Feltzer3', 'Sports', 12510], [-1259134696, 'FlashGT', 'Sports', 910], [-1089039904, 'Furoregt', 'Sports', 1700], [499169875, 'Fusilade', 'Sports', 145], [2016857647, 'Futo', 'Sports', 175], [1909189272, 'GB200', 'Sports', 560], [-1297672541, 'Jester', 'Sports', 1790], [-1106353882, 'Jester2', 'Sports', 1820], [544021352, 'Khamelion', 'Sports', 830], [-1372848492, 'Kuruma', 'Sports', 245], [482197771, 'Lynx', 'Sports', 870], [-142942670, 'Massacro', 'Sports', 1330], [-631760477, 'Massacro2', 'Sports', 1360], [-1848994066, 'Neon', 'Sports', 2910], [1032823388, 'Ninef', 'Sports', 960], [-1461482751, 'Ninef2', 'Sports', 1010], [-777172681, 'Omnis', 'Sports', 595], [867799010, 'Pariah', 'Sports', 3260], [-377465520, 'Penumbra', 'Sports', 76], [-1529242755, 'Raiden', 'Sports', 2310], [-1934452204, 'RapidGT', 'Sports', 530], [1737773231, 'RapidGT2', 'Sports', 580], [-674927303, 'Raptor', 'Sports', 610], [-410205223, 'Revolter', 'Sports', 755], [719660200, 'Ruston', 'Sports', 990], [-1255452397, 'Schafter2', 'Sports', 186], [-1485523546, 'Schafter3', 'Sports', 286], [1489967196, 'Schafter4', 'Sports', 336], [-746882698, 'Schwarzer', 'Sports', 246], [1104234922, 'Sentinel3', 'Sports', 462], [-1757836725, 'Seven70', 'Sports', 2710], [1886268224, 'Specter', 'Sports', 28510], [1074745671, 'Specter2', 'Sports', 29510], [1741861769, 'Streiter', 'Sports', 1410], [970598228, 'Sultan', 'Sports', 276], [384071873, 'Surano', 'Sports', 1500], [-1071380347, 'Tampa2', 'Sports', 782], [1887331236, 'Tropos', 'Sports', 4760], [1102544804, 'Verlierer2', 'Sports', 650], [117401876, 'BType', 'Sports Classics', 4510], [-831834716, 'BType2', 'Sports Classics', 3810], [-602287871, 'BType3', 'Sports Classics', 5810], [941800958, 'Casco', 'Sports Classics', 2910], [-988501280, 'Cheburek', 'Sports Classics', 61], [223240013, 'Cheetah2', 'Sports Classics', 1260], [1011753235, 'Coquette2', 'Sports Classics', 950], [784565758, 'Coquette3', 'Sports Classics', 1240], [1617472902, 'Fagaloa', 'Sports Classics', 154], [-2079788230, 'GT500', 'Sports Classics', 6210], [-1405937764, 'Infernus2', 'Sports Classics', 2760], [1051415893, 'JB700', 'Sports Classics', 9710], [-1660945322, 'Mamba', 'Sports Classics', 560], [-2124201592, 'Manana', 'Sports Classics', 221], [1046206681, 'Michelli', 'Sports Classics', 466], [-433375717, 'Monroe', 'Sports Classics', 16010], [1830407356, 'Peyote', 'Sports Classics', 460], [1078682497, 'Pigalle', 'Sports Classics', 402], [2049897956, 'RapidGT3', 'Sports Classics', 1605], [1841130506, 'Retinue', 'Sports Classics', 359], [903794909, 'Savestra', 'Sports Classics', 1160], [1545842587, 'Stinger', 'Sports Classics', 85010], [-2098947590, 'StingerGT', 'Sports Classics', 120010], [1504306544, 'Torero', 'Sports Classics', 4810], [464687292, 'Tornado', 'Sports Classics', 365], [1531094468, 'Tornado2', 'Sports Classics', 415], [1762279763, 'Tornado3', 'Sports Classics', 85], [-2033222435, 'Tornado4', 'Sports Classics', 75], [-1797613329, 'Tornado5', 'Sports Classics', 515], [-1558399629, 'Tornado6', 'Sports Classics', 256], [-982130927, 'Turismo2', 'Sports Classics', 12510], [-391595372, 'Viseris', 'Sports Classics', 1460], [838982985, 'Z190', 'Sports Classics', 305], [758895617, 'ZType', 'Sports Classics', 100010], [-1216765807, 'Adder', 'Super', 17010], [-313185164, 'Autarch', 'Super', 21510], [633712403, 'Banshee2', 'Super', 1790], [-1696146015, 'Bullet', 'Super', 2660], [-802062533, 'Bullet2', 'Super', 2810], [-1311154784, 'Cheetah', 'Super', 24510], [1392481335, 'Cyclone', 'Super', 9810], [-2120700196, 'Entity2', 'Super', 25010], [-1291952903, 'EntityXF', 'Super', 13210], [1426219628, 'FMJ', 'Super', 20510], [1234311532, 'GP1', 'Super', 39010], [418536135, 'Infernus', 'Super', 1730], [-2048333973, 'Italigtb', 'Super', 1910], [-482719877, 'Italigtb2', 'Super', 2610], [-1232836011, 'LE7B', 'Super', 29010], [1034187331, 'Nero', 'Super', 33510], [1093792632, 'Nero2', 'Super', 36510], [1987142870, 'Osiris', 'Super', 22510], [-1758137366, 'Penetrator', 'Super', 6610], [-1829802492, 'Pfister811', 'Super', 14910], [2123327359, 'Prototipo', 'Super', 25010], [234062309, 'Reaper', 'Super', 33910], [1352136073, 'SC1', 'Super', 2960], [819197656, 'Sheava', 'Super', 3260], [-295689028, 'SultanRS', 'Super', 776], [1123216662, 'Superd', 'Super', 2210], [1663218586, 'T20', 'Super', 19510], [-1134706562, 'Taipan', 'Super', 16510], [272929391, 'Tempesta', 'Super', 2360], [1031562256, 'Tezeract', 'Super', 28510], [408192225, 'Turismor', 'Super', 34010], [-376434238, 'Tyrant', 'Super', 8160], [2067820283, 'Tyrus', 'Super', 57010], [338562499, 'Vacca', 'Super', 1360], [1939284556, 'Vagner', 'Super', 36510], [-998177792, 'Visione', 'Super', 43510], [-1622444098, 'Voltic', 'Super', 660], [917809321, 'XA21', 'Super', 12910], [-1403128555, 'Zentorno', 'Super', 30110], [-808831384, 'Baller', 'SUVs', 370], [142944341, 'Baller2', 'SUVs', 440], [1878062887, 'Baller3', 'SUVs', 505], [634118882, 'Baller4', 'SUVs', 575], [850565707, 'BJXL', 'SUVs', 195], [2006918058, 'Cavalcade', 'SUVs', 86], [-789894171, 'Cavalcade2', 'SUVs', 191], [683047626, 'Contender', 'SUVs', 1960], [1034516789, 'Contender2', 'SUVs', 135], [1177543287, 'Dubsta', 'SUVs', 1060], [-394074634, 'Dubsta2', 'SUVs', 1510], [-1237253773, 'Dubsta3', 'SUVs', 8760], [-2078554704, 'Executioner', 'SUVs', 108], [-1137532101, 'FQ2', 'SUVs', 235], [-1775728740, 'Granger', 'SUVs', 170], [-261346873, 'Granger2', 'SUVs', 66], [-33078019, 'Granger3', 'SUVs', 72], [-1543762099, 'Gresley', 'SUVs', 142], [884422927, 'Habanero', 'SUVs', 84], [486987393, 'Huntley', 'SUVs', 2110], [-330060047, 'Huntley2', 'SUVs', 180], [1269098716, 'Landstalker', 'SUVs', 189], [914654722, 'Mesa', 'SUVs', 180], [-808457413, 'Patriot', 'SUVs', 725], [-1651067813, 'Radi', 'SUVs', 114], [2136773105, 'Rocoto', 'SUVs', 389], [1221512915, 'Seminole', 'SUVs', 122], [-1810806490, 'Seminole2', 'SUVs', 129], [1337041428, 'Serrano', 'SUVs', 132], [1203490606, 'XLS', 'SUVs', 122], [-599568815, 'Sadler', 'Utility', 323], [-2076478498, 'Tractor2', 'Utility', 460], [-16948145, 'Bison', 'Vans', 281], [2072156101, 'Bison2', 'Vans', 285], [1739845664, 'Bison3', 'Vans', 307], [1069929536, 'BobcatXL', 'Vans', 64], [-1346687836, 'Burrito', 'Vans', 80], [-907477130, 'Burrito2', 'Vans', 79], [-1743316013, 'Burrito3', 'Vans', 72], [893081117, 'Burrito4', 'Vans', 79], [1876516712, 'Camper', 'Vans', 204], [486160351, 'Contender8', 'Vans', 68], [-1745203402, 'GBurrito', 'Vans', 145], [296357396, 'GBurrito2', 'Vans', 140], [-120287622, 'Journey', 'Vans', 99], [-310465116, 'Minivan', 'Vans', 42], [-1126264336, 'Minivan2', 'Vans', 142], [1488164764, 'Paradise', 'Vans', 144], [-119658072, 'Pony', 'Vans', 79], [943752001, 'Pony2', 'Vans', 84], [-1776615689, 'Rumpo2', 'Vans', 122], [1475773103, 'Rumpo3', 'Vans', 217], [524266990, 'Speedo3', 'Vans', 96], [440299355, 'Steed2', 'Vans', 68], [699456151, 'Surfer', 'Vans', 225], [-1311240698, 'Surfer2', 'Vans', 75], [1951180813, 'Taco', 'Vans', 236], [65402552, 'Youga', 'Vans', 79], [1026149675, 'Youga2', 'Vans', 46]],
  animActions: [['Поднять руки', 'random@mugging3', 'handsup_standing_base', 49], ['Передать что-то по рации', 'random@arrests', 'generic_radio_chatter', 49], ['Свистнуть', 'taxi_hail', 'fp_hail_taxi', 8], ['Выполнить воиское приветствие', 'anim@mp_player_intincarsalutestd@ds@', 'idle_a', 8], ['Показать пальцем', 'gestures@m@standing@casual', 'gesture_point', 8], ['Согласиться-1', 'gestures@m@standing@casual', 'gesture_i_will', 8], ['Согласиться-2', 'gestures@m@standing@fat', 'gesture_bye_soft', 8], ['Отказать-1', 'gestures@m@standing@casual', 'gesture_nod_no_hard', 8], ['Отказать-2', 'gestures@m@standing@casual', 'gesture_no_way', 8], ['Отказать-3', 'amb@code_human_in_car_mp_actions@nod@bodhi@ds@base', 'nod_no_fp', 8], ['Пожать плечами', 'gestures@m@standing@casual', 'gesture_what_soft', 8], ['Положить что-то в рот', 'mp_player_int_uppersmoke', 'mp_player_int_smoke_enter', 8], ['Закинуться', 'move_m@drunk@transitions', 'slightly_to_idle', 8], ['Постучать', 'amb@code_human_in_car_mp_actions@dance@bodhi@ps@base', 'idle_a_fp', 8], ['Ударить по лежащему', 'anim@heists@ornate_bank@hostages@hit', 'player_melee_long_pistol_a', 8], ['Пнуть ногой', 'anim@mp_freemode_return@f@fail', 'fail_a', 8], ['Махать руками', 'random@car_thief@victimpoints_ig_3', 'arms_waving', 8], ['Отмахнуться-1', 'taxi_hail', 'forget_it', 8], ['Отмахнуться-2', 'anim@mp_freemode_return@f@idle', 'idle_b', 8], ['Подобрать с земли', 'random@mugging4', 'pickup_low', 8], ['Осмотреть землю', 'amb@code_human_police_investigate@idle_b', 'idle_f', 8], ['Ковырять в земле', 'amb@world_human_bum_wash@male@high@idle_a', 'idle_a', 8], ['Схватиться за живот', 'rcmpaparazzo1', 'idle', 8], ['Почесать задницу', 'anim@heists@team_respawn@respawn_02', 'heist_spawn_02_ped_d', 8], ['Помолиться', 'pro_mcs_7_concat-0', 'cs_priest_dual-0', 8], ['Поклониться-1', 'anim@mp_player_intcelebrationpaired@f_f_sarcastic', 'sarcastic_right', 8], ['Поклониться-2', 'anim@mp_player_intcelebrationpaired@m_m_sarcastic', 'sarcastic_left', 8], ['Отжаться', 'amb@world_human_push_ups@male@base', 'base', 8], ['Качать пресс', 'amb@world_human_sit_ups@male@base', 'base', 8], ['Отдышаться', 'timetable@reunited@ig_2', 'jimmy_base', 8], ['Потерять сознание', 'missfam5_blackout', 'pass_out', 8], ['Умыться', 'missfam2_washing_face', 'michael_washing_face', 8], ['Потереть шею', 'amb@world_human_cop_idles@female@idle_a', 'idle_c', 8], ['Потереть ладони', 'amb@world_human_cop_idles@female@idle_b', 'idle_d', 8], ['Потереть руки', 'move_action@p_m_one@unarmed@idle@variations', 'idle_a', 8], ['Показать два пальца', 'amb@code_human_in_car_mp_actions@v_sign@bodhi@rps@base', 'idle_a', 8], ['Смотреть по сторонам', 'amb@world_human_guard_patrol@male@idle_a', 'idle_b', 8], ['Осмотреть', 'amb@medic@standing@kneel@enter', 'enter', 8], ['Высматривать', 'missmic4premiere', 'crowd_c_idle_01', 8], ['Тссс', 'anim@mp_player_intcelebrationfemale@shush', 'shush', 8], ['Ковырять в носу', 'anim@mp_player_intcelebrationfemale@nose_pick', 'nose_pick', 8], ['Подумать', 'amb@code_human_police_investigate@idle_a', 'idle_a', 8], ['Собирать в руках', 'amb@prop_human_movie_studio_light@idle_a', 'idle_a', 8], ['Греться у костра', 'amb@world_human_stand_fire@male@base', 'base', 9], ['Принимать душ', 'mp_safehouseshower@male@', 'male_shower_idle_d', 8], ['Секс (Мужчина)', 'rcmpaparazzo_2', 'shag_action_a', 8], ['Секс (Женщина)', 'rcmpaparazzo_2', 'shag_action_poppy', 8]],
  animPose: [['Руки вверх', 'anim@move_hostages@male', 'male_idle', 9], ['Руки за голову', 'anim@heists@ornate_bank@hostages@cashier_b@', 'flinch_loop_underfire', 8], ['Руки за спину', 'anim@miss@low@fin@vagos@', 'idle_ped06', 8], ['Просить пощады', 'amb@code_human_cower@male@react_cowering', 'base_front', 9], ['Присесть-1', 'anim@miss@low@fin@lamar@', 'idle', 9], ['Присесть-2', 'amb@medic@standing@tendtodead@enter', 'enter', 8], ['Присесть-3', 'amb@medic@standing@kneel@base', 'base', 9], ['Лечь на бок', 'amb@world_human_bum_slumped@male@laying_on_right_side@base', 'base', 9], ['Лечь на живот', 'amb@world_human_sunbathe@male@front@base', 'base', 9], ['Лечь на спину', 'missfbi1', 'cpr_pumpchest_idle', 9], ['Распальцовка-1', 'missmic4premiere', 'wave_b', 8], ['Распальцовка-2', 'amb@code_human_in_car_mp_actions@v_sign@std@rds@base', 'enter', 8], ['Пальцы вверх', 'anim@mp_player_intcelebrationfemale@thumbs_up', 'thumbs_up', 8], ['Палец вверх', 'anim@mp_player_intincarthumbs_upbodhi@ds@', 'enter_fp', 8], ['Скрестить руки-1', 'rcmme_amanda1', 'stand_loop_cop', 9], ['Скрестить руки-2', 'amb@world_human_cop_idles@female@idle_b', 'idle_e', 8], ['Руки в боки', 'amb@code_human_police_investigate@base', 'base', 9], ['Поза охранника', 'missfbi4mcs_2', 'loop_sec_b', 9], ['Бег на месте разводя руки', 'amb@world_human_jog_standing@female@idle_a', 'idle_a', 8], ['Бег на месте', 'amb@world_human_jog_standing@male@base', 'base', 8], ['Размяться-1', 'amb@world_human_muscle_flex@arms_at_side@idle_a', 'idle_a', 8], ['Размяться-2', 'timetable@tracy@ig_5@idle_b', 'idle_d', 8], ['Показать бицепс-1', 'amb@world_human_muscle_flex@arms_at_side@idle_a', 'idle_c', 8], ['Показать бицепс-2', 'amb@world_human_muscle_flex@arms_in_front@base', 'base', 8], ['Расставить руки в стороны', 'missfam5_yoga', 'c1_pose', 8], ['Расставить руки и ноги в стороны', 'missfam5_yoga', 'a2_pose', 8], ['Медитировать-1', 'missfam5_yoga', 'f_yogapose_a', 8], ['Медитировать-2', 'missfam5_yoga', 'c8_pose', 8], ['Медитировать-3', 'missfam5_yoga', 'b4_fail_to_start', 8], ['Медитировать-4', 'missfam5_yoga', 'start_to_c1', 8], ['Медитировать-5', 'missfam5_yoga', 'start_to_a1', 8], ['Медитировать-6', 'missfam5_yoga', 'a2_to_a3', 8], ['Медитировать-7', 'missfam5_yoga', 'a3_fail_to_start', 8]],
  animPositive: [['Радоваться-1', 'missmic_4premiere', 'movie_prem_01_f_a', 8], ['Радоваться-2', 'mini@dartsoutro', 'darts_outro_03_guy2', 8], ['Радоваться-3', 'mini@dartsoutro', 'darts_outro_01_guy1', 8], ['Радоваться-4', 'anim@mp_player_intcelebrationfemale@freakout', 'freakout', 8], ['Хлопать в ладоши-1', 'missmic_4premiere', 'movie_prem_02_f_a', 8], ['Хлопать в ладоши-2', 'amb@world_human_cheering@female_d', 'base', 8], ['Хлопать в ладоши-3', 'amb@world_human_cheering@male_a', 'base', 8], ['Хлопать в ладоши-4', 'amb@world_human_cheering@male_e', 'base', 8], ['Хлопать в ладоши-5', 'anim@mp_player_intcelebrationfemale@slow_clap', 'slow_clap', 8], ['Поддержать-1', 'amb@world_human_cheering@female_a', 'base', 8], ['Поддержать-2', 'amb@world_human_cheering@female_c', 'base', 8], ['Поддержать-3', 'amb@world_human_cheering@male_b', 'base', 8], ['Поцеловать-1', 'anim@mp_player_intcelebrationfemale@blow_kiss', 'blow_kiss', 8], ['Поцеловать-2', 'anim@mp_player_intcelebrationfemale@chin_brush', 'chin_brush', 8], ['Поцеловать-3', 'anim@mp_player_intcelebrationfemale@finger_kiss', 'finger_kiss', 8], ['Успокоить', 'amb@code_human_police_crowd_control@idle_a', 'idle_c', 8], ['Уважение', 'anim@mp_player_intcelebrationfemale@bro_love', 'bro_love', 8]],
  animNegative: [['Размять кулаки-1', 'anim@mp_player_intcelebrationfemale@knuckle_crunch', 'knuckle_crunch', 8], ['Размять кулаки-2', 'anim@mp_player_intincarknuckle_crunchbodhi@ps@', 'idle_a_fp', 8], ['Разочароваться', 'mini@dartsoutro', 'darts_outro_03_guy1', 8], ['Виноват', 'anim@mp_parachute_outro@female@lose', 'lose_loop', 8], ['Дурак', 'anim@mp_player_intcelebrationfemale@you_loco', 'you_loco', 8], ['Facepalm', 'anim@mp_player_intcelebrationfemale@face_palm', 'face_palm', 8], ['Расстрелять', 'amb@world_human_superhero@male@space_pistol@idle_a', 'idle_b', 8], ['С ружьем', 'anim@deathmatch_intros@2hcombat_mgmale', 'intro_male_mg_c', 8], ['С битой', 'anim@deathmatch_intros@melee@2h', 'intro_male_melee_2h_b_gclub', 8], ['Встать в стойку-1', 'anim@deathmatch_intros@unarmed', 'intro_male_unarmed_c', 8], ['Встать в стойку-2', 'anim@deathmatch_intros@unarmed', 'intro_male_unarmed_a', 8], ['Встать в стойку-3', 'anim@deathmatch_intros@unarmed', 'intro_male_unarmed_b', 8], ['Встать в стойку-4', 'anim@deathmatch_intros@unarmed', 'intro_male_unarmed_d', 8]],
  animDance: [['DJ', 'anim@mp_player_intcelebrationfemale@dj', 'dj', 8], ['Танец-1', 'misschinese2_crystalmazemcs1_ig', 'dance_loop_tao', 9], ['Танец-2', 'mini@strip_club@lap_dance_2g@ld_2g_p2', 'ld_2g_p2_s1', 9], ['Танец-3', 'mini@strip_club@lap_dance_2g@ld_2g_p3', 'ld_2g_p3_s2', 9], ['Танец-4', 'amb@world_human_partying@female@partying_beer@idle_a', 'idle_b', 9], ['Танец-5', 'amb@world_human_prostitute@cokehead@idle_a', 'idle_a', 9], ['Танец-6', 'amb@world_human_prostitute@cokehead@idle_a', 'idle_c', 9], ['Танец-7', 'amb@world_human_jog_standing@female@base', 'base', 9], ['Танец-8', 'timetable@tracy@ig_8@idle_a', 'idle_a', 8], ['Танец-9', 'timetable@tracy@ig_5@idle_a', 'idle_a', 9], ['Танец-10', 'timetable@tracy@ig_5@idle_a', 'idle_b', 9], ['Танец-11', 'timetable@tracy@ig_5@idle_a', 'idle_c', 9], ['Танец-12', 'oddjobs@assassinate@multi@yachttarget@lapdance', 'yacht_ld_f', 8], ['Танец-13', 'mp_safehouse', 'lap_dance_girl', 8], ['Пританцовывать', 'misscarsteal4@toilet', 'desperate_toilet_idle_a', 9], ['Доп. Танец 1', 'anim@amb@nightclub@dancers@club_ambientpeds@med-hi_intensity', 'mi-hi_amb_club_10_v1_male^6', 9], ['Доп. Танец 2', 'amb@code_human_in_car_mp_actions@dance@bodhi@ds@base', 'idle_a_fp', 9], ['Доп. Танец 3', 'amb@code_human_in_car_mp_actions@dance@bodhi@rds@base', 'idle_b', 9], ['Доп. Танец 4', 'amb@code_human_in_car_mp_actions@dance@std@ds@base', 'idle_a', 9], ['Доп. Танец 5', 'anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity', 'hi_dance_facedj_09_v2_male^6', 9], ['Доп. Танец 6', 'anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity', 'li_dance_facedj_09_v1_male^6', 9], ['Доп. Танец 7', 'anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_hi_intensity', 'trans_dance_facedj_hi_to_li_09_v1_male^6', 9], ['Доп. Танец 8', 'anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_low_intensity', 'trans_dance_facedj_li_to_hi_07_v1_male^6', 9], ['Доп. Танец 9', 'anim@amb@nightclub@dancers@crowddance_groups@hi_intensity', 'hi_dance_crowd_13_v2_male^6', 9], ['Доп. Танец 10', 'anim@amb@nightclub@dancers@crowddance_groups_transitions@from_hi_intensity', 'trans_dance_crowd_hi_to_li__07_v1_male^6', 9], ['Доп. Танец 11', 'anim@amb@nightclub@dancers@crowddance_single_props@hi_intensity', 'hi_dance_prop_13_v1_male^6', 9], ['Доп. Танец 12', 'anim@amb@nightclub@dancers@crowddance_single_props_transitions@from_med_intensity', 'trans_crowd_prop_mi_to_li_11_v1_male^6', 9], ['Доп. Танец 13', 'anim@amb@nightclub@mini@dance@dance_solo@male@var_a@', 'med_center_up', 9], ['Доп. Танец 14', 'anim@amb@nightclub@mini@dance@dance_solo@male@var_a@', 'med_right_up', 9], ['Доп. Танец 15', 'anim@amb@nightclub@dancers@crowddance_groups@low_intensity', 'li_dance_crowd_17_v1_male^6', 9], ['Доп. Танец 16', 'anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_med_intensity', 'trans_dance_facedj_mi_to_li_09_v1_male^6', 9], ['Доп. Танец 17', 'timetable@tracy@ig_5@idle_b', 'idle_e', 9], ['Доп. Танец 18', 'mini@strip_club@idles@dj@idle_04', 'idle_04', 9], ['Доп. Танец 19', 'special_ped@mountain_dancer@monologue_1@monologue_1a', 'mtn_dnc_if_you_want_to_get_to_heaven', 9], ['Доп. Танец 20', 'special_ped@mountain_dancer@monologue_4@monologue_4a', 'mnt_dnc_verse', 9], ['Доп. Танец 21', 'special_ped@mountain_dancer@monologue_3@monologue_3a', 'mnt_dnc_buttwag', 9], ['Доп. Танец 22', 'anim@amb@nightclub@dancers@black_madonna_entourage@', 'hi_dance_facedj_09_v2_male^5', 9], ['Доп. Танец 23', 'anim@amb@nightclub@dancers@crowddance_single_props@', 'hi_dance_prop_09_v1_male^6', 9], ['Доп. Танец 24', 'anim@amb@nightclub@dancers@dixon_entourage@', 'mi_dance_facedj_15_v1_male^4', 9], ['Доп. Танец 25', 'anim@amb@nightclub@dancers@podium_dancers@', 'hi_dance_facedj_17_v2_male^5', 9], ['Доп. Танец 26', 'anim@amb@nightclub@dancers@tale_of_us_entourage@', 'mi_dance_prop_13_v2_male^4', 9], ['Доп. Танец 27', 'misschinese2_crystalmazemcs1_cs', 'dance_loop_tao', 9], ['Доп. Танец 28', 'misschinese2_crystalmazemcs1_ig', 'dance_loop_tao', 9], ['Доп. Танец 29', 'anim@mp_player_intcelebrationfemale@uncle_disco', 'uncle_disco', 9], ['Доп. Танец 30', 'anim@mp_player_intcelebrationfemale@raise_the_roof', 'raise_the_roof', 9], ['Доп. Танец 31', 'anim@mp_player_intcelebrationmale@cats_cradle', 'cats_cradle', 9], ['Доп. Танец 32', 'anim@mp_player_intupperbanging_tunes', 'idle_a', 9], ['Доп. Танец 33', 'anim@amb@nightclub@mini@dance@dance_solo@female@var_a@', 'high_center', 9], ['Доп. Танец 34', 'anim@amb@nightclub@mini@dance@dance_solo@female@var_b@', 'high_center', 9], ['Доп. Танец 35', 'anim@amb@nightclub@mini@dance@dance_solo@male@var_b@', 'high_center', 9], ['Доп. Танец 36', 'anim@amb@nightclub@dancers@crowddance_facedj_transitions@', 'trans_dance_facedj_hi_to_mi_11_v1_female^6', 9], ['Доп. Танец 37', 'anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_hi_intensity', 'trans_dance_facedj_hi_to_li_07_v1_female^6', 9], ['Доп. Танец 38', 'anim@amb@nightclub@dancers@crowddance_facedj@', 'hi_dance_facedj_09_v1_female^6', 9], ['Доп. Танец 39', 'anim@amb@nightclub@dancers@crowddance_groups@hi_intensity', 'hi_dance_crowd_09_v1_female^6', 9], ['Доп. Танец 40', 'anim@amb@nightclub@lazlow@hi_podium@', 'danceidle_hi_06_base_laz', 9], ['Доп. Танец 41', 'special_ped@zombie@monologue_4@monologue_4l', 'iamtheundead_11', 9]],
  animRemain: [['Секс-1', 'anim@mp_player_intcelebrationfemale@air_shagging', 'air_shagging', 8], ['Секс-2', 'anim@mp_player_intcelebrationfemale@dock', 'dock', 8], ['Курица', 'anim@mp_player_intcelebrationfemale@chicken_taunt', 'chicken_taunt', 8], ['Дразнить-1', 'anim@mp_player_intcelebrationfemale@jazz_hands', 'jazz_hands', 8], ['Дразнить-2', 'anim@mp_player_intcelebrationfemale@thumb_on_ears', 'thumb_on_ears', 8], ['Дразнить-3', 'anim@mp_player_intcelebrationmale@thumb_on_ears', 'thumb_on_ears', 8], ['Фотограф', 'anim@mp_player_intcelebrationfemale@photography', 'photography', 8], ['Рок', 'amb@code_human_in_car_mp_actions@rock@bodhi@rps@base', 'idle_a', 8], ['Гитарист', 'anim@mp_player_intcelebrationfemale@air_guitar', 'air_guitar', 8], ['Труп', 'anim@melee@machete@streamed_core@', 'victim_front_takedown', 8], ['Ломка', 'creatures@rottweiler@melee@', 'victim_takedown_from_front', 8], ['Пробежка на месте', 'amb@world_human_jog_standing@male@base', 'base', 8], ['Качаться', 'anim@mp_player_intcelebrationmale@peace', 'peace', 9]]
};
exports.enums = enums;
},{"../util/sharedData":"bNis","../util/inventory":"Jhu1"}],"uehX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weather = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

let Day = 0;
let Month = 0;
let Year = 0;
let Hour = 0;
let Min = 0;
let Sec = 0;
let Temp = 27;
let TempServer = 27;
let DayName = 'Понедельник';
let RealHour = 0;
let Players = 0;
let FullRealDateTime = '';
let CurrentWeather = 'CLEAR';
let DayNames = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];
const MonthNames = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
const weather = {
  nextWeather: (weatherName, delay) => {
    mp.game.gameplay.setWeatherTypeOverTime(weatherName, CurrentWeather == weatherName ? 1 : delay);
    CurrentWeather = weatherName;
    setTimeout(function () {
      if (weatherName == 'XMAS') {} else {}
    }, delay);
  },
  getWeatherId: weatherName => {
    let weatherId = 0;

    switch (weatherName) {
      case 'CLEAR':
        weatherId = 1;
        break;

      case 'CLOUDS':
        weatherId = 2;
        break;

      case 'SMOG':
        weatherId = 3;
        break;

      case 'FOGGY':
        weatherId = 4;
        break;

      case 'OVERCAST':
        weatherId = 5;
        break;

      case 'RAIN':
        weatherId = 6;
        break;

      case 'THUNDER':
        weatherId = 7;
        break;

      case 'CLEARING':
        weatherId = 8;
        break;

      case 'XMAS':
        weatherId = 13;
        break;
    }

    return _methods.methods.parseInt(weatherId);
  },
  syncDateTime: (min, hour, day, month, year) => {
    mp.discord.update('Diamond RolePlay', 'gta-5.ru');
    DayName = DayNames[new Date(year, month, day).getDay()];
    Day = day;
    Month = month;
    Year = year;
    Hour = hour;
    Min = min;
    Sec = 0;
    Players = mp.players.length;
    mp.game.time.setClockDate(day, month, year);
    mp.game.time.setClockTime(hour, min, Sec);
  },
  getCurrentDayName: () => {
    return DayName;
  },
  getMonth: () => {
    return Month;
  },
  getHour: () => {
    return Hour;
  },
  getMin: () => {
    return Min;
  },
  getTime: () => {
    return `${_methods.methods.digitFormat(Hour)}:${_methods.methods.digitFormat(Min)}`;
  },
  getFullRpDateTime: () => {
    return `${_methods.methods.digitFormat(Hour)}:${_methods.methods.digitFormat(Min)} | ${_methods.methods.digitFormat(Day)}/${_methods.methods.digitFormat(Month)}/${Year}`;
  },
  getFullRpDate: () => {
    return `${_methods.methods.digitFormat(Day)}.${_methods.methods.digitFormat(Month)}.${Year}`;
  },
  getMonthYearDate: () => {
    const dateTime = new Date();
    return `${MonthNames[dateTime.getMonth()]} ${dateTime.getFullYear()}`;
  },
  getFullRpTime: () => {
    return `${_methods.methods.digitFormat(Hour)}:${_methods.methods.digitFormat(Min)}`;
  },
  syncRealTime: hour => {
    RealHour = hour;
  },
  getRealTime: () => {
    return RealHour;
  },
  syncRealFullDateTime: dateTime => {
    FullRealDateTime = dateTime;
  },
  getRealFullDateTime: () => {
    return FullRealDateTime;
  },
  getRealFullDateTimeWithOnline: () => {
    return FullRealDateTime + ' | Игроков: ' + Players + ' /1000 | ID: ' + _user.user.get('id') + (_user.user.isAdmin() && mp.players.local.getVariable('enableAdmin') === true ? ' | ~r~ADMIN MOD' : "");
  },
  syncWeatherTemp: temp => {
    Temp = temp;
    TempServer = temp;
  },
  getWeatherTemp: () => {
    return Temp;
  },
  getWeatherTempServer: () => {
    return TempServer;
  },
  secSyncTimer: () => {
    Sec++;
    if (Sec >= 59) Sec = 59;
    mp.game.time.setClockTime(Hour, Min, Sec);
    setTimeout(weather.secSyncTimer, 141);
  },
  getCurrentWeather: () => {
    return CurrentWeather;
  }
};
exports.weather = weather;
},{"../modules/methods":"qXSp","../user":"QE3B"}],"ir2T":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hiddenIdMask = void 0;
const hiddenIdMask = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180];
exports.hiddenIdMask = hiddenIdMask;
},{}],"bk91":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.progressbar = exports.gui = void 0;

var _user = require("../user");

var _methods = require("./methods");

var _ui = require("./ui");

var _weather = require("../managers/weather");

var _mask = require("../../util/mask");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

mp.gui.chat.show(false);
let browser;
let mapEventList = [];
mp.events.add('mapEvent:new', datas => {
  const item = JSON.parse(datas);
  mapEventList.push(item);
});
mp.events.add('mapEvent:load', datas => {
  const data = JSON.parse(datas);
  mapEventList.push(...data);
});
mp.events.add('mapEvent:remove', id => {
  mapEventList.map((item, i) => {
    if (item.id === id) mapEventList.splice(i, 1);
  });
});
let currentEventZone = null;
setInterval(() => {
  if (!_user.user.isLogin()) return;
  let eventName = null;
  mapEventList.map(item => {
    if (_methods.methods.distanceToPos2D(_objectSpread({}, item), mp.players.local.position) < item.range) eventName = item.name;
  });
  if (currentEventZone == eventName) return;
  currentEventZone = eventName;
  gui.browser.execute(`CEF.hud.setSpecialZone(${eventName ? "'" + eventName + "'" : 'null'})`);
}, 1000);
const gui = {
  updateChatSettings: () => {
    if (!mp.storage.data.heightChat) mp.storage.data.heightChat = 30;
    if (!mp.storage.data.fontChat) mp.storage.data.fontChat = 16;
    mp.events.triggerBrowser('cef:chat:params', mp.storage.data);
  },
  browser,
  hudLoaded: false,
  currentGui: null,
  chatActive: false,
  showSpeedometer: false,
  setGui: guiName => {
    mp.console.logWarning(gui.browser ? "BROWSER EXISTS" : "NO BROWSER EXISTS");
    gui.currentGui = guiName;
    gui.browser.execute(`CEF.gui.setGui(${guiName === null ? 'null' : "'" + guiName + "'"})`);
  },
  isActionGui: () => {
    return ['personage', 'license', 'dialog', 'police_bage', 'npc', 'quests', 'inventory', 'tablet', 'atm'].includes(gui.currentGui);
  },
  isActionMoveGui: () => {
    return ['inventory', 'tablet'].includes(gui.currentGui);
  },
  updateHud: () => {
    if (_user.user.isLogin() && gui.hudLoaded) {
      gui.browser.execute(`
      CEF.hud.setHasBankCard(${!!(_user.user.get('bank_prefix') > 0)});
      CEF.hud.setHasWatch(${!!_user.user.get('item_clock')});
      CEF.hud.setTime('${_weather.weather.getFullRpTime()}');
      CEF.hud.setDate('${_weather.weather.getMonthYearDate()}');
      CEF.hud.setTemp(${_weather.weather.getWeatherTemp()});
      CEF.hud.setCompass('${_ui.ui.updateDirectionText()}');
      CEF.hud.setStat('${_weather.weather.getRealFullDateTime()}', ${mp.players.length}, ${_user.user.get('id')}, ${_user.user.isAdmin() && mp.players.local.getVariable('enableAdmin')}, ${_user.user.godmode}, ${!!mp.players.local.getVariable('isAfk') ? 'true' : 'false'}, ${_user.user.isAdmin() && mp.players.local.getVariable('enableAdmin') && mp.players.local.getVariable('enableAdminHidden')}, ${_mask.hiddenIdMask.includes(mp.players.local.getDrawableVariation(1)) ? 'true' : 'false'});
      CEF.hud.setZone('${escape(_ui.ui.getCurrentZone())}', '${escape(_ui.ui.getCurrentStreet())}');`);
    }
  }
};
exports.gui = gui;
setInterval(() => {
  if (gui.currentGui == 'tablet') mp.events.triggerBrowser('setTimeTablet', _weather.weather.getFullRpTime());
}, 1000);
mp.events.add('web:browsers:urls', q => {
  let url = q[0];
  browser = mp.browsers.new(url);
  browser.markAsChat();
  gui.browser = browser;

  gui.browser.executeAll = code => {
    const call = code.reduce((str, func) => {
      if (func.split('').slice(-1)[0] == ';') {
        func = func.slice(0, -1);
      }

      return str + func + ';';
    }, '');
    gui.browser.execute(call);
  };

  setTimeout(() => {
    gui.updateChatSettings();
  }, 5000);
});
mp.events.add('mainBrowserInited', () => {
  mp.events.triggerBrowser('cef:hud:setChips', _user.user.chipsBalance);
  gui.updateChatSettings();
});
let disableEsc = false;
mp.events.add('client:gui:set', guiName => {
  gui.setGui(guiName);
});
mp.events.add('client:gui:updateGui', guiName => {
  gui.currentGui = guiName == '/' ? null : guiName;

  if (guiName != '/') {
    disableEsc = true;
  } else if (!['/reg', '/login', '/newpass'].includes(guiName)) {
    setTimeout(() => {
      if (gui.currentGui === null) disableEsc = false;
    }, 500);
  }
});
mp.events.add('render', () => {
  if ((gui.chatActive || gui.currentGui) && !mp.game.ui.isPauseMenuActive() || disableEsc) {
    mp.game.controls.disableControlAction(2, 200, true);
  }

  if (mp.game.controls.isDisabledControlJustReleased(2, 200)) {
    if (['azs', 'license', 'police_bage', 'quests', 'npc', 'casino', 'chest_equip', 'inventory', 'tablet', 'atm', 'autosale'].includes(gui.currentGui)) {
      if (gui.currentGui === 'inventory') {
        mp.events.callSocket('inventory:close');
        gui.setGui(null);
      } else if (gui.currentGui === 'casino') {
        mp.events.callSocket('onPressKeyCasino:e');
      } else if (browser) {
        gui.setGui(null);
      }
    }
  }
});
const progressbar = {
  isShowed: false,
  show: text => {
    if (text) {
      progressbar.setText(text);
    }

    gui.browser.execute(`CEF.progressbar.show(true)`);
    progressbar.isShowed = true;
  },
  hide: () => {
    gui.browser.execute(`CEF.progressbar.show(false)`);
    progressbar.isShowed = false;
  },
  update: width => {
    gui.browser.execute(`CEF.progressbar.update(${width})`);
  },
  setText: text => {
    gui.browser.execute(`CEF.progressbar.setText('${escape(text)}')`);
  }
};
exports.progressbar = progressbar;
mp.keys.bind(119, false, function () {
  if (gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (gui.currentGui) return;
  mp.events.callSocket("server:show:quests");
});
},{"../user":"QE3B","./methods":"qXSp","./ui":"zOnK","../managers/weather":"uehX","../../util/mask":"ir2T"}],"zOnK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ui = void 0;

var _methods = require("./methods");

var _gui = require("./gui");

var _newrage = require("../../util/newrage");

let _zone = 'Подключение к сети GPS';
let _street = '...';
let menuBrowser = null;
let chatBox = null;
let showRadar = true;
let showHud = true;
let showMenu = false;
const maxStringLength = 99;

if (_newrage.RAGE_BETA) {
  Object.defineProperty(mp.gui.chat, "push", {
    writable: true
  });

  mp.gui.chat.push = text => mp.events.triggerBrowser('outputChatBox', text);
}

let menuBrowserUrl;
mp.events.add('web:browsers:urls', q => {
  menuBrowserUrl = q[1];
});
let ui = {
  ColorTransparent: [0, 0, 0, 0],
  ColorRed: [244, 67, 54, 255],
  ColorRed900: [183, 28, 28, 255],
  ColorWhite: [255, 255, 255, 255],
  ColorBlue: [33, 150, 243, 255],
  ColorGreen: [76, 175, 80, 255],
  ColorAmber: [255, 193, 7],
  ColorDeepOrange: [255, 87, 34, 255],
  MarkerRed: [244, 67, 54, 100],
  MarkerGreen: [139, 195, 74, 100],
  MarkerBlue: [33, 150, 243, 100],
  MarkerYellow: [255, 235, 59, 100],
  MarkerBlue100: [187, 222, 251, 100],
  MarkerWhite: [255, 255, 255, 100],
  DisableMouseControl: false,
  showOrHideRadar: () => {
    showRadar = !showRadar;
    mp.game.ui.displayRadar(showRadar);
    if (!showRadar) ui.hideHud();else ui.showHud();
  },
  isShowRadar: () => {
    return showRadar;
  },
  showOrHideHud: () => {
    showHud = !showHud;
    mp.game.ui.displayHud(showHud);
  },
  isShowHud: () => {
    return showHud;
  },
  create: () => {
    menuBrowser = mp.browsers.new(menuBrowserUrl);
  },
  init: () => {},
  showOrHideMenu: () => {
    if (!showMenu) ui.showMenu();else ui.hideMenu();
  },
  showMenu: () => {
    if (menuBrowser) {
      try {
        menuBrowser.execute(`eventSend(${JSON.stringify({
          type: 'show'
        })});`);
        showMenu = true;
        mp.gui.cursor.show(false, true);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }
  },
  showMenuIds: list => {
    if (menuBrowser) {
      try {
        menuBrowser.execute(`eventSend(${JSON.stringify({
          type: 'showIdsMenu',
          menuList: list
        })});`);
        showMenu = true;
        mp.gui.cursor.show(false, true);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }
  },
  hideMenu: () => {
    if (menuBrowser) {
      try {
        menuBrowser.execute(`eventSend(${JSON.stringify({
          type: 'hide'
        })});`);
        showMenu = false;
        mp.gui.cursor.show(false, false);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }
  },
  isShowMenu: () => {
    return showMenu;
  },
  soundHit: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'hit'
      })})`);
    }
  },
  soundPlay2: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'play2'
      })})`);
    }
  },
  radioSoundPeer: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'radioPeer'
      })})`);
    }
  },
  radioSoundOn: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'radioOn'
      })})`);
    }
  },
  radioSoundOff: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'radioOff'
      })})`);
    }
  },
  radioSoundShOn: (offsetVol = 0) => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'radioShStart',
        shVol: offsetVol
      })})`);
    }
  },
  radioSoundShOff: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'radioShStop'
      })})`);
    }
  },
  buckle: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'buckle'
      })})`);
    }
  },
  unbuckle: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.radio.radioManager(${JSON.stringify({
        type: 'unbuckle'
      })})`);
    }
  },
  hideHud: () => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`CEF.hud.showHud(false)`);
    }
  },
  showHud: () => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`CEF.hud.showHud(true)`);
    }
  },
  updateMafiaInfo: (lme, rm, trd, lcn, time) => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.updateMafiaInfo(${time}, ${lcn}, ${trd}, ${rm}, ${lme})`);
    }
  },
  showMafiaInfo: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.showMafiaInfo(true)`);
    }
  },
  hideMafiaInfo: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.showMafiaInfo(false)`);
    }
  },
  updateGangInfo: (top1, top2, time) => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.updateGangInfo(${time}, ${top1}, ${top2})`);
    }
  },
  showGangInfo: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.showGangInfo(true)`);
    }
  },
  hideGangInfo: () => {
    if (_gui.gui.browser) {
      _gui.gui.browser.execute(`CEF.capture.showGangInfo(false)`);
    }
  },
  updateDeathTimer: timerCounter => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`CEF.hud.setDeathTime(${timerCounter})`);
    }
  },
  showDeathTimer: () => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`CEF.hud.toggleDeathTimer(true)`);
    }
  },
  hideDeathTimer: () => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`CEF.hud.toggleDeathTimer(false)`);
    }
  },
  showToolTip: text => {
    mp.game.ui.notifications.show(text);
  },
  showSubtitle: (message, duration = 5000, drawImmediately = true) => {
    mp.game.ui.notifications.show(message);
  },
  updateZoneAndStreet: () => {
    const local = mp.players.local;
    let getStreet = mp.game.pathfind.getStreetNameAtCoord(local.position.x, local.position.y, local.position.z, 0, 0);
    _street = mp.game.ui.getStreetNameFromHashKey(getStreet.streetName);
    _zone = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(local.position.x, local.position.y, local.position.z));
  },
  updateToolBars: () => {
    return;
  },
  getCurrentZone: () => {
    return _zone;
  },
  getCurrentStreet: () => {
    return _street;
  },
  updateDirectionText: () => {
    let dgr = mp.players.local.getRotation(0).z + 180;
    if (dgr >= 22.5 && dgr < 67.5) return 'SE';
    if (dgr >= 67.5 && dgr < 112.5) return 'E';
    if (dgr >= 112.5 && dgr < 157.5) return 'NE';
    if (dgr >= 157.5 && dgr < 202.5) return 'N';
    if (dgr >= 202.53 && dgr < 247.5) return 'NW';
    if (dgr >= 247.5 && dgr < 292.5) return 'W';
    if (dgr >= 292.5 && dgr < 337.5) return 'SW';
    return 'S';
  },
  drawText: (caption, xPos, yPos, scale, r, g, b, a, font, justify, shadow, outline) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    mp.game.ui.setTextFont(font);
    mp.game.ui.setTextScale(1, scale);
    mp.game.ui.setTextColour(r, g, b, a);
    if (shadow) mp.game.invoke('0x1CA3E9EAC9D93E5E');
    if (outline) mp.game.invoke('0x2513DFB0FB8400FE');

    switch (justify) {
      case 1:
        mp.game.ui.setTextCentre(true);
        break;

      case 2:
        mp.game.ui.setTextRightJustify(true);
        mp.game.ui.setTextWrap(0, xPos);
        break;
    }

    mp.game.ui.setTextEntry('STRING');
    mp.game.ui.addTextComponentSubstringPlayerName(caption);
    mp.game.ui.drawText(xPos, yPos);
  },
  drawRect: (xPos, yPos, wSize, hSize, r, g, b, a) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    let x = xPos + wSize * 0.5;
    let y = yPos + hSize * 0.5;
    mp.game.invoke('0x3A618A217E5154F0', x, y, wSize, hSize, r, g, b, a);
  },
  drawText3D: (caption, x, y, z) => {
    if (!mp.game.ui.isHudComponentActive(0)) return false;
    z = z + 0.5;
    mp.game.graphics.setDrawOrigin(x, y, z, 0);
    let scale = 0.40;
    mp.game.ui.setTextFont(0);
    mp.game.ui.setTextScale(0.1 * scale, 0.55 * scale);
    mp.game.ui.setTextColour(255, 255, 255, 255);
    mp.game.ui.setTextProportional(true);
    mp.game.ui.setTextDropshadow(0, 0, 0, 0, 255);
    mp.game.ui.setTextEdge(2, 0, 0, 0, 150);
    mp.game.invoke('0x2513DFB0FB8400FE');
    mp.game.ui.setTextEntry('STRING');
    mp.game.ui.setTextCentre(true);
    mp.game.ui.addTextComponentSubstringPlayerName(caption);
    mp.game.ui.drawText(0, 0);
    mp.game.invoke('0xFF0B610F6BE0D7AF');
  }
};
exports.ui = ui;
},{"./methods":"qXSp","./gui":"bk91","../../util/newrage":"mgLX"}],"sKID":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coffer = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

let containerId = 99999;
let coffer = {
  addMoney: money => {
    mp.events.callSocket('server:coffer:addMoney', money);
  },
  removeMoney: money => {
    mp.events.callSocket('server:coffer:removeMoney', money);
  },
  setMoney: money => {
    mp.events.callSocket('server:coffer:setMoney', money);
  },
  getMoney: async () => {
    return _methods.methods.parseInt(await _data.Container.Get(containerId, 'cofferMoney'));
  },
  getAllData: async () => {
    return await _data.Container.GetAll(containerId);
  },
  getNalogBizz: async () => {
    return await _data.Container.Get(containerId, 'cofferNalogBizz');
  },
  setNalogBizz: num => {
    _data.Container.Set(containerId, 'cofferNalogBizz', num);

    _methods.methods.notifyWithPictureToAll('Maze Bank', 'Новости правительства', `Налоговая ставка на бизнес: ~g~${num}%`, 'CHAR_BANK_MAZE');
  },
  setNalog: num => {
    _data.Container.Set(containerId, 'cofferNalog', num);

    _methods.methods.notifyWithPictureToAll('Maze Bank', 'Новости правительства', `Текущая налоговая ставка: ~g~${num}%`, 'CHAR_BANK_MAZE');
  },
  setMoneyBomj: num => {
    _data.Container.Set(containerId, 'cofferMoneyBomj', num);

    _methods.methods.notifyWithPictureToAll('Maze Bank', 'Новости правительства', `Пособие: ~g~$${num}`, 'CHAR_BANK_MAZE');
  },
  setMoneyOld: num => {
    _data.Container.Set(containerId, 'cofferMoneyOld', num);

    _methods.methods.notifyWithPictureToAll('Maze Bank', 'Новости правительства', `Пенсия: ~g~$${num}`, 'CHAR_BANK_MAZE');
  }
};
exports.coffer = coffer;
},{"./modules/data":"Edcz","./modules/methods":"qXSp"}],"y5vZ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.business = void 0;

var _methods = require("./modules/methods");

let business = {
  typeList: ['Банки', 'Магазины 24/7', 'Магазины одежды', 'Автомастерские', 'Пункты аренды', 'Заправки', 'Парикмахерские', 'Развлечения', 'Услуги', 'Юридические компании', 'Офисы', 'Магазины оружия', 'Тату салоны', 'Разное', 'Салоны транспорта'],
  BusinessOfficePos: new mp.Vector3(-140.7121, -617.3683, 168.1204),
  BusinessMotorPos: new mp.Vector3(-138.6593, -592.6267, 166.3002),
  BusinessStreetPos: new mp.Vector3(-116.8427, -604.7336, 35.58074),
  BusinessGaragePos: new mp.Vector3(-155.6696, -577.3766, 31.72448),
  BusinessRoofPos: new mp.Vector3(-136.6686, -596.3055, 207.2157),
  BusinessBotPos: new mp.Vector3(-139.2922, -631.5964, 167.8204),
  addMoney: (id, money, ignoreLimit = false) => {
    mp.events.callSocket('server:business:addMoney', id, money, ignoreLimit);
  },
  getMoney: async id => {
    try {
      let data = await business.getData(id);
      if (data) return data.bank;else return 0;
    } catch (e) {
      _methods.methods.debug(e);

      return 0;
    }
  },
  getPrice: async id => {
    try {
      let data = await business.getData(id);
      if (data) return data.price_product;else return 0;
    } catch (e) {
      _methods.methods.debug(e);

      return 0;
    }
  },
  getData: async id => {
    let data = await mp.events.callServer('get:business:data', id);
    return data;
  }
};
exports.business = business;
},{"./modules/methods":"qXSp"}],"kwVd":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weaponsUtil = exports.blackListWeapon = exports.WEAPON_LEVEL_MIN = void 0;
const WEAPON_LEVEL_MIN = 2;
exports.WEAPON_LEVEL_MIN = WEAPON_LEVEL_MIN;
const blackListWeapon = ["weapon_combatmg_mk2", "weapon_gusenberg", "weapon_flaregun", "weapon_marksmanpistol", "weapon_revolver_mk2", "weapon_doubleaction", "weapon_raypistol", "weapon_navyrevolver", "weapon_smg_mk2", "weapon_raycarbine", "weapon_assaultshotgun", "weapon_bullpupshotgun", "weapon_assaultrifle_mk2", "weapon_combatmg", "weapon_combatmg_mk2", "weapon_heavysniper", "weapon_heavysniper_mk2", "weapon_marksmanrifle_mk2", "weapon_rpg", "weapon_grenadelauncher", "weapon_grenadelauncher_smoke", "weapon_minigun", "weapon_firework", "weapon_railgun", "weapon_hominglauncher", "weapon_compactlauncher", "weapon_rayminigun", "weapon_grenade", "weapon_bzgas", "weapon_molotov", "weapon_stickybomb", "weapon_proxmine", "weapon_snowball", "weapon_pipebomb", "weapon_ball", "weapon_smokegrenade", "weapon_flare", "weapon_petrolcan", "weapon_hazardcan"];
exports.blackListWeapon = blackListWeapon;
const weaponsUtil = {
  hashesMap: [['SniperRifle', 100416529], ['FireExtinguisher', 101631238], ['CompactGrenadeLauncher', 1980066947], ['Snowball', 126349499], ['VintagePistol', 137902532], ['CombatPDW', 171789620], ['HeavySniper_Mk2', 1429927647], ['HeavySniper', 205991906], ['SweeperShotgun', -1652067232], ['MicroSMG', 324215364], ['Wrench', 419712736], ['Pistol', 453432689], ['PumpShotgun', 487013001], ['APPistol', 584646201], ['Ball', 600439132], ['Molotov', 615608432], ['SMG', 736523883], ['StickyBomb', 741814745], ['PetrolCan', 883325847], ['StunGun', 911657153], ['AssaultRifle_Mk2', 961495388], ['HeavyShotgun', 984333226], ['Minigun', 1119849093], ['GolfClub', 1141786504], ['FlareGun', 1198879012], ['Flare', 1233104067], ['GrenadeLauncherSmoke', -275866417], ['Hammer', 1317494643], ['CombatPistol', 1593441988], ['Gusenberg', 1627465347], ['CompactRifle', 1649403952], ['HomingLauncher', 1672152130], ['Nightstick', 1737195953], ['Railgun', 1834241177], ['SawnOffShotgun', 2017895192], ['SMG_Mk2', 166524245], ['BullpupRifle', 2132975508], ['Firework', 2138347493], ['CombatMG', 2144741730], ['CarbineRifle', -2084633992], ['Crowbar', -2067956739], ['Flashlight', -1951375401], ['Dagger', -1834847097], ['Grenade', -1813897027], ['PoolCue', -1810795771], ['Bat', -1786099057], ['Pistol50', -1716589765], ['Knife', -1716189206], ['MG', -1660422300], ['BullpupShotgun', -1654528753], ['BZGas', -1600701090], ['GrenadeLauncher', -1568386805], ['NightVision', -1843655570], ['Musket', -1466123874], ['ProximityMine', 986082911], ['AdvancedRifle', -1357824103], ['RPG', -1312131151], ['PipeBomb', -1169823560], ['MiniSMG', -1121678507], ['SNSPistol', -1076751822], ['PistolMk2', -1075685676], ['AssaultRifle', -1074790547], ['SpecialCarbine', -1063057011], ['Revolver', -1045183535], ['MarksmanRifle', -952879014], ['BattleAxe', -853065399], ['HeavyPistol', -771403250], ['Knuckle', -656458692], ['MachinePistol', -619010992], ['CombatMG_Mk2', -439798208], ['MarksmanPistol', -598887786], ['Machete', -581044007], ['SwitchBlade', -538741184], ['AssaultShotgun', -494615257], ['DoubleBarrelShotgun', -275439685], ['AssaultSMG', -270015777], ['Hatchet', -102973651], ['Bottle', -102323637], ['CarbineRifle_Mk2', 1085370391], ['BullpupRifle_Mk2', -2066285827], ['Parachute', -196322845], ['SmokeGrenade', -37975472]],
  hashes: {
    SniperRifle: 100416529,
    FireExtinguisher: 101631238,
    CompactGrenadeLauncher: 125959754,
    Snowball: 126349499,
    VintagePistol: 137902532,
    CombatPDW: 171789620,
    HeavySniperMk2: 177293209,
    HeavySniper: 205991906,
    SweeperShotgun: 317205821,
    MicroSMG: 324215364,
    Wrench: 419712736,
    Pistol: 453432689,
    PumpShotgun: 487013001,
    APPistol: 584646201,
    Ball: 600439132,
    Molotov: 615608432,
    SMG: 736523883,
    StickyBomb: 741814745,
    PetrolCan: 883325847,
    StunGun: 911657153,
    AssaultRifleMk2: 961495388,
    HeavyShotgun: 984333226,
    Minigun: 1119849093,
    GolfClub: 1141786504,
    FlareGun: 1198879012,
    Flare: 1233104067,
    GrenadeLauncherSmoke: 1305664598,
    Hammer: 1317494643,
    CombatPistol: 1593441988,
    Gusenberg: 1627465347,
    CompactRifle: 1649403952,
    HomingLauncher: 1672152130,
    Nightstick: 1737195953,
    Railgun: 1834241177,
    SawnOffShotgun: 2017895192,
    SMGMk2: 2024373456,
    BullpupRifle: 2132975508,
    Firework: 2138347493,
    CombatMG: 2144741730,
    CarbineRifle: 2210333304,
    Crowbar: 2227010557,
    Flashlight: 2343591895,
    Dagger: 2460120199,
    Grenade: 2481070269,
    PoolCue: 2484171525,
    Bat: 2508868239,
    Pistol50: 2578377531,
    Knife: 2578778090,
    MG: 2634544996,
    BullpupShotgun: 2640438543,
    BZGas: 2694266206,
    GrenadeLauncher: 2726580491,
    NightVision: 2803906140,
    Musket: 2828843422,
    ProximityMine: 2874559379,
    AdvancedRifle: 2937143193,
    RPG: 2982836145,
    PipeBomb: 3125143736,
    MiniSMG: 3173288789,
    SNSPistol: 3218215474,
    PistolMk2: 3219281620,
    AssaultRifle: 3220176749,
    SpecialCarbine: 3231910285,
    Revolver: 3249783761,
    MarksmanRifle: 3342088282,
    BattleAxe: 3441901897,
    HeavyPistol: 3523564046,
    Knuckle: 3638508604,
    MachinePistol: 3675956304,
    CombatMGMk2: 3686625920,
    MarksmanPistol: 3696079510,
    Machete: 3713923289,
    SwitchBlade: 3756226112,
    AssaultShotgun: 3800352039,
    DoubleBarrelShotgun: 4019527611,
    AssaultSMG: 4024951519,
    Hatchet: 4191993645,
    Bottle: 4192643659,
    CarbineRifleMk2: 4208062921,
    Parachute: 4222310262,
    SmokeGrenade: 4256991824
  }
};
exports.weaponsUtil = weaponsUtil;
},{}],"YeMF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.weapons = void 0;

var _weapons = require("../util/weapons");

const weapons = _weapons.weaponsUtil;
exports.weapons = weapons;
},{"../util/weapons":"kwVd"}],"A2KQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.items_old = void 0;

var _inventory = require("../util/inventory");

const ItemList = _inventory.itemsUtil;
const items_old = {
  isWeapon: _inventory.isWeapon,
  defaultModelHash: 1108364521,
  canEquipById: id => {
    try {
      return ItemList[id][2];
    } catch (_unused) {
      return false;
    }
  },
  getItemNameById: id => {
    try {
      return ItemList[id][0];
    } catch (_unused2) {
      return 'UNKNOWN';
    }
  },
  getItemNameHashById: id => {
    try {
      return ItemList[id][1];
    } catch (_unused3) {
      return 'UNKNOWN';
    }
  },
  getItemHashById: id => {
    try {
      return ItemList[id][3];
    } catch (_unused4) {
      return 1108364521;
    }
  },
  getItemWeightById: id => {
    try {
      return ItemList[id][4];
    } catch (_unused5) {
      return -1;
    }
  },
  getItemWeightKgById: id => {
    try {
      return Math.round(ItemList[id][4] / 1000.0);
    } catch (_unused6) {
      return -1;
    }
  },
  getItemAmountById: id => {
    try {
      return ItemList[id][5];
    } catch (_unused7) {
      return -1;
    }
  }
};
exports.items_old = items_old;
},{"../util/inventory":"Jhu1"}],"j7m4":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkpoint = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _menu = _interopRequireDefault(require("../modules/menu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let itemList = [];
let entityList = new Map();
let checkpoint = {
  checkPosition: () => {
    let playerPos = mp.players.local.position;
    itemList.forEach((item, idx) => {
      try {
        if (_methods.methods.distanceToPos(playerPos, new mp.Vector3(item.x, item.y, item.z)) <= item.scale + 1.4) {
          if (!entityList.has(idx)) {
            entityList.set(idx, true);
            mp.events.callRemote('client:enterStaticCheckpoint', idx);
          }
        } else {
          if (entityList.has(idx)) {
            entityList.delete(idx);

            _menu.default.Menu.HideMenu();
          }
        }
      } catch (e) {
        _methods.methods.debug('Exception: checkpoint.checkPosition.forEach IDX:' + idx);

        _methods.methods.debug(e);
      }
    });

    if (itemList.length < 1000 && _user.user.isLogin()) {
      checkpoint.fixCheckpointList();
      setTimeout(checkpoint.checkPosition, 10000);
    } else setTimeout(checkpoint.checkPosition, 1000);
  },
  updateCheckpointList: (data, i) => {
    try {
      if (i == 0) itemList = [];

      _methods.methods.debug('Execute: checkpoint.updateCheckpointList');

      itemList = itemList.concat(data);
    } catch (e) {
      _methods.methods.debug('Exception: checkpoint.updateCheckpointList');

      _methods.methods.debug(e);
    }
  },
  fixCheckpointList: () => {
    try {
      _methods.methods.debug('Execute: checkpoint.fixCheckpointList');

      itemList = [];
      mp.events.callRemote('server:fixCheckpointList');
      mp.events.callRemote('server:updateGangZoneList');
    } catch (e) {
      _methods.methods.debug('Exception: checkpoint.fixCheckpointList');

      _methods.methods.debug(e);
    }
  }
};
exports.checkpoint = checkpoint;
let itemListNear = [];
setInterval(() => {
  let playerPos = mp.players.local.position;
  itemListNear = [];

  if (itemList.length > 0) {
    itemList.forEach(function (item, idx) {
      if (_methods.methods.distanceToPos(playerPos, new mp.Vector3(item.x, item.y, item.z)) <= 400) {
        itemListNear.push(item);
      }
    });
  }
}, 1000);
mp.events.add('render', () => {
  let playerPos = mp.players.local.position;

  if (itemListNear.length > 0) {
    itemListNear.forEach(function (item, idx) {
      if (_methods.methods.distanceToPos(playerPos, new mp.Vector3(item.x, item.y, item.z)) <= 90) {
        mp.game.graphics.drawMarker(1, item.x, item.y, item.z, 0, 0, 0, 0, 0, 0, item.scale, item.scale, item.height, item.color[0], item.color[1], item.color[2], item.color[3], false, false, 2, false, 'null', 'null', false);
      }
    });
  }
});
},{"../modules/methods":"qXSp","../user":"QE3B","../modules/menu":"Aiz7"}],"bsac":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatcher = void 0;

var _user = require("../user");

var _methods = require("../modules/methods");

let itemList = [];
let itemTaxiList = [];
const dispatcher = {
  callFraction: (title, desc, fraction) => {
    mp.events.callRemote('server:dispatcher:callFraction', JSON.stringify(fraction), title, desc);
  },
  send: (title, desc, withCoord = true) => {
    dispatcher.sendPos(title, desc, mp.players.local.position, withCoord);
  },
  sendPos: (title, desc, pos, withCoord = true, fromPhone = false) => {
    mp.events.callRemote('server:dispatcher:sendPos', title, desc, pos.x, pos.y, pos.z, withCoord, fromPhone);
  },
  sendLocal: (title, desc, withCoord = true) => {
    dispatcher.sendLocalPos(title, desc, mp.players.local.position, _user.user.get('fraction_id'), withCoord);
  },
  sendLocalPos: (title, desc, pos, fractionId, withCoord = true) => {
    mp.events.callRemote('server:dispatcher:sendLocalPos', title, desc, pos.x, pos.y, pos.z, fractionId, withCoord);
  },
  addDispatcherList: (title, desc, time, x, y, z, withCoord) => {
    let getStreet = mp.game.pathfind.getStreetNameAtCoord(x, y, z, 0, 0);
    let street1 = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(x, y, z));
    let street2 = mp.game.ui.getStreetNameFromHashKey(getStreet.streetName);
    itemList.unshift({
      title: title,
      desc: desc,
      street1: street1,
      street2: street2,
      time: time,
      x: x,
      y: y,
      z: z,
      withCoord: withCoord
    });
    mp.game.ui.notifications.showWithPicture(title, 'Диспетчер', desc, 'CHAR_CALL911', 1);
    mp.game.ui.notifications.show(`~y~Время:~s~ ${time}\n${withCoord ? `~y~Район:~s~ ${street1}\n~y~Улица:~s~ ${street2}` : ''}`);
  },
  addDispatcherTaxiList: (count, title, desc, time, price, x, y, z, id) => {
    let getStreet = mp.game.pathfind.getStreetNameAtCoord(x, y, z, 0, 0);
    let street1 = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(x, y, z));
    let street2 = mp.game.ui.getStreetNameFromHashKey(getStreet.streetName);
    itemTaxiList.unshift({
      count: count,
      title: title,
      desc: desc,
      street1: street1,
      street2: street2,
      time: time,
      price: price,
      x: x,
      y: y,
      z: z,
      id: id
    });
    let icon = _user.user.get('job') == 'taxi1' ? 'CHAR_TAXI' : 'CHAR_TAXI_LIZ';
    mp.game.ui.notifications.showWithPicture(title, 'Диспетчер', desc, icon, 1);
    mp.game.ui.notifications.show(`~y~Время:~s~ ${time}\n~y~Район:~s~ ${street1}\n~y~Улица:~s~ ${street2}`);
  },
  sendNotification: (title, desc, desc2, desc3) => {
    _methods.methods.notifyWithPictureToFraction(title, 'Диспетчер', desc, 'CHAR_CALL911', 2, 1);

    _methods.methods.notifyWithPictureToFraction(title, 'Диспетчер', desc, 'CHAR_CALL911', 3, 1);

    _methods.methods.notifyWithPictureToFraction(title, 'Диспетчер', desc, 'CHAR_CALL911', 7, 1);

    _methods.methods.notifyWithPictureToFraction(title, 'Диспетчер', desc, 'CHAR_CALL911', 16, 1);

    if (desc2) {
      setTimeout(function () {
        _methods.methods.notifyToFraction(desc2, 2);

        _methods.methods.notifyToFraction(desc2, 3);

        _methods.methods.notifyToFraction(desc2, 7);

        _methods.methods.notifyToFraction(desc2, 16);
      }, 100);
    }

    if (desc3) {
      setTimeout(function () {
        _methods.methods.notifyToFraction(desc3, 2);

        _methods.methods.notifyToFraction(desc3, 3);

        _methods.methods.notifyToFraction(desc3, 7);

        _methods.methods.notifyToFraction(desc3, 16);
      }, 200);
    }
  },
  sendNotificationFraction: (title, desc, desc2, desc3, fractionId) => {
    _methods.methods.notifyWithPictureToFraction(title, 'Диспетчер', desc, 'CHAR_CALL911', fractionId, 1);

    if (desc2) {
      setTimeout(function () {
        _methods.methods.notifyToFraction(desc2, fractionId);
      }, 100);
    }

    if (desc3) {
      setTimeout(function () {
        _methods.methods.notifyToFraction(desc3, fractionId);
      }, 200);
    }
  },
  getItemList: () => {
    return itemList;
  },
  getItemTaxiList: () => {
    return itemTaxiList;
  }
};
exports.dispatcher = dispatcher;
},{"../user":"QE3B","../modules/methods":"qXSp"}],"ygeq":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.teleportProtection = exports.healProtection = void 0;

var _user = require("../user");

var _methods = require("./methods");

var _weapons = require("../weapons");

var _data = require("./data");

var _weapons2 = require("../../util/weapons");

const player = mp.players.local;
let isCheatDetect = false;
const TELEPORT_FOOT_DIST = 100;
const TELEPORT_VEHICLE_DIST = 200;
const TELEPORT_TIMER_CHECK = 100;
const USERDATA_CHECK = 1000;
const WEAPON_TIMER_CHECK = 1000;
const VEHICLE_BOOST_TIMER_CHECK = 1000;
const AUTOHEAL_TIMER_CHECK = 100;
let oldHp;
let healProtectionStatus = 0;
let lastPosition;
let teleportProtectionStatus = 0;

const teleportProtection = (time = 5000) => {
  teleportProtectionStatus++;
  setTimeout(() => {
    teleportProtectionStatus--;
  }, time);
};

exports.teleportProtection = teleportProtection;

const healProtection = (time = 1000) => {
  healProtectionStatus++;
  setTimeout(() => {
    healProtectionStatus--;
  }, time);
};

exports.healProtection = healProtection;
mp.events.add('teleport:protect', (time = 5000) => {
  teleportProtection(time);
});
mp.events.add('heal:protect', (time = 1000) => {
  healProtection(time);
});
let inmp = false;
mp.events.add('anticheat:inmp', status => {
  inmp = status;
});
setInterval(() => {
  if (!_user.user.isLogin()) return lastPosition = player.position;
  if (_user.user.isAdmin()) return lastPosition = player.position;
  if (teleportProtectionStatus) return lastPosition = player.position;
  if (_user.user.isTeleport) return lastPosition = player.position;
  if (!lastPosition) return lastPosition = player.position;

  if (!player.vehicle) {
    if (_methods.methods.distanceToPos(lastPosition, player.position) > TELEPORT_FOOT_DIST) {
      sendCheater("TELEPORT_FOOT", `Преодоление ${_methods.methods.distanceToPos(lastPosition, player.position).toFixed(0)}m за ${TELEPORT_TIMER_CHECK}ms`);
    }

    lastPosition = player.position;
  } else {
    if (_methods.methods.distanceToPos(lastPosition, player.position) > TELEPORT_VEHICLE_DIST) {
      if (player.vehicle.getPedInSeat(-1) != mp.players.local.handle) return;
      sendCheater("TELEPORT_VEHICLE", `Преодоление ${_methods.methods.distanceToPos(lastPosition, player.position).toFixed(0)}m за ${TELEPORT_TIMER_CHECK}ms`);
    }

    lastPosition = player.position;
  }
}, TELEPORT_TIMER_CHECK);
setInterval(() => {
  if (!_user.user.isLogin()) oldHp = player.health;
  if (_user.user.isAdmin()) oldHp = player.health;
  if (healProtectionStatus) oldHp = player.health;
  if (typeof oldHp != 'number') oldHp = player.health;
  if (player.health > oldHp) return sendCheater("AUTO_HEAL", `Было ${oldHp.toFixed(0)}, Стало ${player.health.toFixed(0)}`);else oldHp = player.health;
}, AUTOHEAL_TIMER_CHECK);
setInterval(() => {
  if (!_user.user.isLogin()) return;
  if (_user.user.isAdmin()) return;
  if (inmp) return;
  let q = [];

  _weapons.weapons.hashesMap.forEach(item => {
    if (mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, item[1] / 2, false)) {
      if (_weapons2.WEAPON_LEVEL_MIN > _user.user.getLevel()) return sendCheater('WEAPON', 'Уровень игрока ниже допустимого для использования оружия');

      if (!_data.Container.HasLocally(0, (item[1] / 2).toString()) && item[0] != 'Unarmed') {
        q.push(item[0]);
        return;
      }
    }
  });

  if (q.length > 0) {
    sendCheater('WEAPON', 'список: ' + q.join(', '));
    mp.game.invoke("0xF25DF915FA38C5F3", player.handle, true);
  }

  let usedBlWeapon = [];

  _weapons2.blackListWeapon.map(name => {
    let hash = mp.game.joaat(name.toUpperCase());

    if (mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) {
      usedBlWeapon.push(name.toUpperCase().replace('WEAPON_', ''));
    }
  });

  if (usedBlWeapon.length > 0) {
    sendCheater('WEAPON', 'использование оружия из чёрного списка: ' + usedBlWeapon.join(', '));
    mp.game.invoke("0xF25DF915FA38C5F3", player.handle, true);
  }

  if (player.vehicle) return;
}, WEAPON_TIMER_CHECK);
setInterval(() => {
  if (!_user.user.isLogin()) return;
  if (_user.user.isAdmin()) return;
  if (!player.vehicle) return;
  if (player.vehicle.isInAir()) return;
  let maxSpeed = mp.game.vehicle.getVehicleModelMaxSpeed(player.vehicle.model);
  if (player.vehicle.getVariable('boost')) maxSpeed *= player.vehicle.getVariable('boost');else maxSpeed *= 1.3;
  maxSpeed += 50;

  if (player.vehicle.getSpeed() > maxSpeed) {
    sendCheater("VEHICLE_BOOST", `Текущая скорость: ${(player.vehicle.getSpeed() * 3.6).toFixed(0)}, Максимальная: ${(maxSpeed * 3.6).toFixed(0)}`);
  }
}, VEHICLE_BOOST_TIMER_CHECK);

const sendCheater = (reason, more) => {
  if (isCheatDetect) return;
  isCheatDetect = true;

  if (reason.includes('TELEPORT_')) {
    setTimeout(() => {
      if (teleportProtectionStatus) {
        isCheatDetect = false;
        return;
      }

      mp.events.callRemote('cheat:detect', reason, more);
      setTimeout(() => {
        isCheatDetect = false;
      }, 30000);
    }, 1000);
  } else if (reason === "AUTO_HEAL") {
    setTimeout(() => {
      if (teleportProtectionStatus) {
        isCheatDetect = false;
        return;
      }

      mp.events.callRemote('cheat:detect', reason, more);
      setTimeout(() => {
        isCheatDetect = false;
      }, 30000);
    }, 1000);
  } else {
    mp.events.callRemote('cheat:detect', reason, more);
    setTimeout(() => {
      isCheatDetect = false;
    }, 30000);
  }
};
},{"../user":"QE3B","./methods":"qXSp","../weapons":"YeMF","./data":"Edcz","../../util/weapons":"kwVd"}],"GDbQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spawn = void 0;

var _methods = require("../modules/methods");

var _ui = require("../modules/ui");

var _user = require("../user");

var _data = require("../modules/data");

var _ach = require("../modules/ach");

let _currentCam = null;
let currentTimer = null;
let _posX = 0;
let _posY = 0;
let _posZ = 0;
let _posH = 0;
let _posR = 0;
let _posRot = 0;
let characterChanger = null;
let currentCam = null;
let currentCamCoords = null;
let currentCamDist = 0.2;
let currentCamRot = -2;
let _rows = null;
let currentAccount = 0;
let currentSpawn = 0;
let acceptRules = false;
let _spawnList = [];
let spawn = {
  changeCamPos: async (x, y, z) => {
    mp.game.streaming.requestCollisionAtCoord(x, y, z);

    _user.user.showLoadDisplay();

    await _methods.methods.sleep(500);
    _posX = x;
    _posY = y;
    _posZ = z;
    spawn.destroyCam();
    spawn.createOrbitCam(x, y, z, 100, 100);
    (0, _ach.teleportProtection)();
    mp.players.local.position = new mp.Vector3(x, y, z);

    _user.user.hideLoadDisplay();
  },
  updateSpawnList: accountId => {
    let spawnList = [];
    _spawnList = [];

    if (_rows[accountId].lastSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].lastSpawn);

      spawnList.push('Точка выхода');
    }

    if (_rows[accountId].houseSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].houseSpawn);

      spawnList.push('Дом');
    }

    if (_rows[accountId].trailerSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].trailerSpawn);

      spawnList.push('Дом на колёсах');
    }

    if (_rows[accountId].stockSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].stockSpawn);

      spawnList.push('Склад');
    }

    if (_rows[accountId].apartSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].apartSpawn);

      spawnList.push('Апартаменты');
    }

    if (_rows[accountId].condoSpawn[0] != 0) {
      _spawnList.push(_rows[accountId].condoSpawn);

      spawnList.push('Квартира');
    }

    if (spawnList.length == 0) {
      _spawnList.push(_rows[accountId].standartSpawn);

      spawnList.push('Стандартный спавн');
    }

    let data = {
      type: 'updateSpawnList',
      list: spawnList
    };
    characterChanger.execute(`eventSend(${JSON.stringify(data)});`);
  },
  updateAccountList: () => {
    let accountList = [];

    _rows.forEach(row => {
      accountList.push(row['rp_name']);
    });

    let data = {
      type: 'updateAccountList',
      list: accountList
    };
    characterChanger.execute(`eventSend(${JSON.stringify(data)});`);
  },
  setSpawnCam: (x, y, z) => {
    mp.gui.cursor.show(true, true);
    mp.game.streaming.requestCollisionAtCoord(x, y, z);
    mp.players.local.position = new mp.Vector3(x, y, z);
    spawn.createOrbitCam(x, y, z, 100, 100);
  },
  createOrbitCam: (x, y, z, height, maxRadius = 100, fov = 20) => {
    _posX = x;
    _posY = y;
    _posZ = z;
    _posH = height;
    _posR = maxRadius;
    if (_methods.methods.distanceToPos2D(new mp.Vector3(-66.66476, -802.0474, 44.22729), new mp.Vector3(_posX, _posY, _posZ)) < 700) _posH = 250;
    let newPos = spawn.getOrbit(_posX, _posY, _posZ + _posH, 0, _posR);
    _currentCam = mp.cameras.new('orbitCam', newPos, new mp.Vector3(0, 0, 0), fov);

    _currentCam.pointAtCoord(x, y, z);

    _currentCam.setActive(true);

    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    return _currentCam;
  },
  timer: () => {
    if (_currentCam) {
      _posRot += 0.002;
      if (_posRot >= 360) _posRot = 0;
      let newPos = spawn.getOrbit(_posX, _posY, _posZ + _posH, _posRot, _posR);

      _currentCam.setCoord(newPos.x, newPos.y, newPos.z);
    }

    setTimeout(spawn.timer, 20);
  },
  destroyCam: () => {
    if (_currentCam) {
      _currentCam.destroy();

      mp.game.cam.renderScriptCams(false, true, 500, true, true);
    }

    _posX = 0;
    _posY = 0;
    _posZ = 0;
    _posH = 0;
    _posR = 0;
    _currentCam = null;
  },
  destroy: () => {
    spawn.destroyCam();
    if (characterChanger) characterChanger.destroy();
    characterChanger = null;
  },
  getOrbit: (x, y, z, rot, range) => {
    let newPos = new mp.Vector3(range * Math.sin(rot) + x, range * Math.cos(rot) + y, z);
    return newPos;
  }
};
exports.spawn = spawn;
mp.events.add('client:user:creator:hide', function () {
  characterChanger.destroy();

  _ui.ui.showHud();

  mp.gui.chat.activate(true);
  currentCam = null;
  currentCamDist = 0.2;
  currentCamRot = -2;
  currentCamCoords = null;
  characterChanger = null;
  mp.players.local.freezePosition(false);
  mp.gui.cursor.show(false, false);
  mp.game.ui.displayRadar(true);
});
mp.events.add('client:user:spawn:auth', function (nick, password) {
  if (_data.Container.HasLocally(mp.players.local.remoteId, 'isAuthTimeout')) {
    mp.game.ui.notifications.show('~r~Нельзя так часто нажимать эту кнопку');
    mp.game.ui.notifications.show('~r~Подождите 10 секунд');
    return;
  }

  nick = nick.replace(/[^a-zA-Z\s]/gi, '');
  if (_spawnList[currentSpawn].length > 4) mp.events.callRemote('server:user:validate:account', nick, password, -1, -1, -1, -1);else if (_rows == null) mp.events.callRemote('server:user:validate:account', nick, password, -2, -2, -2, -2);else {
    try {
      if (_rows[currentAccount].rp_name != nick) mp.events.callRemote('server:user:validate:account', nick, password, -2, -2, -2, -2);else mp.events.callRemote('server:user:validate:account', nick, password, _spawnList[currentSpawn][0], _spawnList[currentSpawn][1], _spawnList[currentSpawn][2], _spawnList[currentSpawn][3]);
    } catch (e) {
      mp.events.callRemote('server:user:validate:account', nick, password, -2, -2, -2, -2);
    }
  }

  _data.Container.SetLocally(mp.players.local.remoteId, 'isAuthTimeout', true);

  setTimeout(function () {
    _data.Container.ResetLocally(mp.players.local.remoteId, 'isAuthTimeout');
  }, 10000);
});
mp.events.add('client:user:spawn:reg', function (name, surname, email, pass1, pass2, referer, promocode) {
  if (_data.Container.HasLocally(mp.players.local.remoteId, 'isAuthTimeout')) {
    mp.game.ui.notifications.show('~r~Нельзя так часто нажимать эту кнопку');
    mp.game.ui.notifications.show('~r~Подождите 10 секунд');
    return;
  }

  name = name.replace(/[^a-zA-Z\s]/gi, '');
  surname = surname.replace(/[^a-zA-Z\s]/gi, '');
  email = email.replace("'", '');
  referer = referer.replace(/[^a-zA-Z\s]/gi, '');
  promocode = promocode.replace("'", '');

  if (name == '') {
    mp.game.ui.notifications.show('~r~Имя - поле не заполнено');
    return;
  }

  if (surname == '') {
    mp.game.ui.notifications.show('~r~Фамилия - поле не заполнено');
    return;
  }

  if (email == '') {
    mp.game.ui.notifications.show('~r~Email - поле не заполнено');
    return;
  }

  if (pass1 == '') {
    mp.game.ui.notifications.show('~r~Пароль - поле не заполнено');
    return;
  }

  if (pass2 != pass1) {
    mp.game.ui.notifications.show('~r~Пароли не совпадают');
    return;
  }

  if (acceptRules == false) {
    mp.game.ui.notifications.show('~r~Вы не согласились с правилами сервера');
    return;
  }

  mp.game.ui.notifications.show('~b~Пожалуйста подождите...');
  mp.events.callRemote('server:user:register:account', name + ' ' + surname, pass1, email, referer, promocode);

  _data.Container.SetLocally(mp.players.local.remoteId, 'isAuthTimeout', true);

  setTimeout(function () {
    _data.Container.ResetLocally(mp.players.local.remoteId, 'isAuthTimeout');
  }, 10000);
});
},{"../modules/methods":"qXSp","../modules/ui":"zOnK","../user":"QE3B","../modules/data":"Edcz","../modules/ach":"ygeq"}],"o0SG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skills = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _user = require("./user");

let skills = {
  execute: () => {
    setInterval(checkStats, 180000);
    setInterval(checkShooting, 10000);
    setInterval(updateStats, 10000);
  }
};
exports.skills = skills;

let checkStats = async () => {
  if (!_user.user.isLogin()) return;
  let localPlayer = mp.players.local;

  if (mp.players.local.isSprinting() && _user.user.get('mp0_stamina') < 99) {
    mp.game.ui.notifications.show(`~g~Навык "Выносливость" был повышен`);

    _user.user.set('mp0_stamina', _user.user.get('mp0_stamina') + 1);

    let vipData = _user.user.getVipData();

    if (vipData) {
      if (vipData.skillpersbonus > 0 && _user.user.get('mp0_stamina') % vipData.skillpersbonus === 0) _user.user.set('mp0_stamina', _user.user.get('mp0_stamina') + 1);
    }

    if (_user.user.isUsmc()) _user.user.set('mp0_stamina', _user.user.get('mp0_stamina') + 1);

    _data.Container.Set(mp.players.local.remoteId, 'mp0_stamina', _user.user.get('mp0_stamina'));
  }

  if (mp.players.local.isSprinting() && _user.user.get('mp0_strength') < 99) {
    mp.game.ui.notifications.show(`~g~Навык "Сила" был повышен`);

    _user.user.set('mp0_strength', _user.user.get('mp0_strength') + 1);

    let vipData = _user.user.getVipData();

    if (vipData) {
      if (vipData.skillpersbonus > 0 && _user.user.get('mp0_strength') % vipData.skillpersbonus === 0) _user.user.set('mp0_strength', _user.user.get('mp0_strength') + 1);
    }

    if (_user.user.isUsmc()) _user.user.set('mp0_strength', _user.user.get('mp0_strength') + 1);

    _data.Container.Set(mp.players.local.remoteId, 'mp0_strength', _user.user.get('mp0_strength'));
  }

  if (mp.players.local.isSwimmingUnderWater() && _user.user.get('mp0_lung_capacity') < 99) {
    mp.game.ui.notifications.show(`~g~Навык "Объем легких" был повышен`);

    _user.user.set('mp0_lung_capacity', _user.user.get('mp0_lung_capacity') + 3);

    let vipData = _user.user.getVipData();

    if (vipData) {
      if (vipData.skillpersbonus > 0 && _user.user.get('mp0_lung_capacity') % vipData.skillpersbonus === 0) _user.user.set('mp0_lung_capacity', _user.user.get('mp0_lung_capacity') + 1);
    }

    if ((await _data.Container.Get(mp.players.local.remoteId, 'mp0_lung_capacity')) > 99) _user.user.set('mp0_lung_capacity', 99);

    _data.Container.Set(mp.players.local.remoteId, 'mp0_lung_capacity', _user.user.get('mp0_lung_capacity'));
  }

  if (_user.user.get('mp0_wheelie_ability') < 99) {
    if (mp.players.local.isSittingInAnyVehicle()) {
      let veh = mp.players.local.vehicle;

      if (veh.getPedInSeat(-1) == localPlayer.handle && !veh.isInAir() && _methods.methods.getCurrentSpeed() > 10) {
        mp.game.ui.notifications.show(`~g~Навык вождения был повышен`);
        if (_user.user.isUsmc()) _user.user.set('mp0_wheelie_ability', _user.user.get('mp0_wheelie_ability') + 1);

        _user.user.set('mp0_wheelie_ability', _user.user.get('mp0_wheelie_ability') + 1);

        let vipData = _user.user.getVipData();

        if (vipData) {
          if (vipData.skillpersbonus > 0 && _user.user.get('mp0_wheelie_ability') % vipData.skillpersbonus === 0) _user.user.set('mp0_wheelie_ability', _user.user.get('mp0_wheelie_ability') + 1);
        }

        _data.Container.Set(mp.players.local.remoteId, 'mp0_wheelie_ability', _user.user.get('mp0_wheelie_ability'));
      }
    }
  }

  if (_user.user.get('mp0_flying_ability') < 99) {
    if (mp.players.local.isSittingInAnyVehicle()) {
      let veh = mp.players.local.vehicle;

      if (veh.getPedInSeat(-1) == localPlayer.handle && veh.isInAir()) {
        mp.game.ui.notifications.show(`~g~Навык пилота был повышен`);
        if (_user.user.isUsmc()) _user.user.set('mp0_flying_ability', _user.user.get('mp0_flying_ability') + 1);

        let vipData = _user.user.getVipData();

        if (vipData) {
          if (vipData.skillpersbonus > 0 && _user.user.get('mp0_flying_ability') % vipData.skillpersbonus === 0) _user.user.set('mp0_flying_ability', _user.user.get('mp0_flying_ability') + 1);
        }

        _user.user.set('mp0_flying_ability', _user.user.get('mp0_flying_ability') + 1);

        _data.Container.Set(mp.players.local.remoteId, 'mp0_flying_ability', _user.user.get('mp0_flying_ability'));
      }
    }
  }
};

let checkShooting = () => {
  if (!_user.user.isLogin()) return;

  if (mp.players.local.isShooting() && _user.user.get('mp0_shooting_ability') < 99) {
    mp.game.ui.notifications.show(`~g~Навык стрельбы был повышен`);
    if (_user.user.isUsmc()) _user.user.set('mp0_shooting_ability', _user.user.get('mp0_shooting_ability') + 1);

    let vipData = _user.user.getVipData();

    if (vipData) {
      if (vipData.skillpersbonus > 0 && _user.user.get('mp0_shooting_ability') % vipData.skillpersbonus === 0) _user.user.set('mp0_shooting_ability', _user.user.get('mp0_shooting_ability') + 1);
    }

    _user.user.set('mp0_shooting_ability', _user.user.get('mp0_shooting_ability') + 1);

    _data.Container.Set(mp.players.local.remoteId, 'mp0_shooting_ability', _user.user.get('mp0_shooting_ability'));
  }
};

let updateStats = () => {
  if (!_user.user.isLogin()) return;
  mp.game.gameplay.terminateAllScriptsWithThisName('stats_controller');
  mp.game.stats.statSetInt(mp.game.joaat('MP0_STAMINA'), _user.user.get('mp0_stamina'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_STRENGTH'), _user.user.get('mp0_strength'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_LUNG_CAPACITY'), _user.user.get('mp0_lung_capacity'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_WHEELIE_ABILITY'), _user.user.get('mp0_wheelie_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_FLYING_ABILITY'), _user.user.get('mp0_flying_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_STEALTH_ABILITY'), _user.user.get('mp0_stealth_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('MP0_SHOOTING_ABILITY'), _user.user.get('mp0_shooting_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('STAMINA'), _user.user.get('mp0_stamina'), true);
  mp.game.stats.statSetInt(mp.game.joaat('STRENGTH'), _user.user.get('mp0_strength'), true);
  mp.game.stats.statSetInt(mp.game.joaat('LUNG_CAPACITY'), _user.user.get('mp0_lung_capacity'), true);
  mp.game.stats.statSetInt(mp.game.joaat('WHEELIE_ABILITY'), _user.user.get('mp0_wheelie_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('FLYING_ABILITY'), _user.user.get('mp0_flying_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('STEALTH_ABILITY'), _user.user.get('mp0_stealth_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SHOOTING_ABILITY'), _user.user.get('mp0_shooting_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_STAMINA'), _user.user.get('mp0_stamina'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_STRENGTH'), _user.user.get('mp0_strength'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_LUNG_CAPACITY'), _user.user.get('mp0_lung_capacity'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_WHEELIE_ABILITY'), _user.user.get('mp0_wheelie_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_FLYING_ABILITY'), _user.user.get('mp0_flying_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_STEALTH_ABILITY'), _user.user.get('mp0_stealth_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP0_SHOOTING_ABILITY'), _user.user.get('mp0_shooting_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_STAMINA'), _user.user.get('mp0_stamina'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_STRENGTH'), _user.user.get('mp0_strength'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_LUNG_CAPACITY'), _user.user.get('mp0_lung_capacity'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_WHEELIE_ABILITY'), _user.user.get('mp0_wheelie_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_FLYING_ABILITY'), _user.user.get('mp0_flying_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_STEALTH_ABILITY'), _user.user.get('mp0_stealth_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP1_SHOOTING_ABILITY'), _user.user.get('mp0_shooting_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_STAMINA'), _user.user.get('mp0_stamina'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_STRENGTH'), _user.user.get('mp0_strength'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_LUNG_CAPACITY'), _user.user.get('mp0_lung_capacity'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_WHEELIE_ABILITY'), _user.user.get('mp0_wheelie_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_FLYING_ABILITY'), _user.user.get('mp0_flying_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_STEALTH_ABILITY'), _user.user.get('mp0_stealth_ability'), true);
  mp.game.stats.statSetInt(mp.game.joaat('SP2_SHOOTING_ABILITY'), _user.user.get('mp0_shooting_ability'), true);
};
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./user":"QE3B"}],"Vike":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.taxi = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _business = require("../business");

var _methods2 = require("../../util/methods");

let isProcess = false;
let isStart = false;
let currentPedId = -1;
let posStart = new mp.Vector3(0, 0, 0);
let posEnd = new mp.Vector3(0, 0, 0);
let countPeds = 0;
let pedList = [];
let taxi = {
  markers: [[-111.1722, 6467.846, 31.62671, 2], [-1117.679, 2698.744, 17.55415, 105], [-113.3064, 6469.969, 31.62672, 2], [-1148.878, -2000.123, 12.18026, 14], [-1212.83, -330.3573, 37.78702, 1], [-1223.059, -906.7239, 12.32635, 4], [-1282.688, -1117.432, 5.990113, 110], [-1305.899, -394.5485, 36.69577, 79], [-1487.533, -379.3019, 40.16339, 5], [-207.0201, -1331.493, 33.89437, 56], [-276.4055, 6226.398, 30.69552, 109], [-2962.951, 482.8024, 15.7031, 1], [-2968.295, 390.9566, 15.04331, 10], [-3039.184, 586.3903, 7.90893, 11], [-3171.98, 1087.908, 19.83874, 104], [-3241.895, 1001.701, 12.83071, 9], [-33.34319, -154.1892, 56.07654, 48], [-330.36, 6083.885, 30.45477, 107], [-347.0815, -133.3432, 38.00966, 54], [-350.6871, -49.60739, 49.04258, 1], [-657.087, -857.313, 23.490, 85], [-661.947, -935.6796, 21.82924, 78], [-813.5332, -183.2378, 36.5689, 112], [101.0262, 6618.267, 31.43771, 71], [1133.0963, -472.6430, 65.7651, 85], [1135.979, -982.2205, 46.4158, 6], [1165.314, 2709.109, 38.15772, 51], [1175.054, 2706.404, 38.09407, 1], [1187.764, 2639.15, 37.43521, 57], [1214.091, -472.9952, 65.208, 109], [138.7087, -1705.711, 28.29162, 109], [148.5, -1039.971, 29.37775, 1], [1693.555, 3759.9, 33.70533, 106], [1699.741, 4924.002, 42.06367, 7], [1729.792, 6414.979, 35.03723, 85], [1931.844, 3730.305, 31.84443, 111], [1960.845, 3741.882, 32.34375, 84], [22.08832, -1106.986, 29.79703, 75], [252.17, -50.08245, 69.94106, 76], [253.4611, 220.7204, 106.2865, 108], [2567.651, 294.4759, 107.7349, 103], [26.213, -1345.442, 29.49702, 3], [314.3541, -278.5519, 54.17077, 1], [318.2640, -1076.7376, 28.4785, 85], [374.3559, 327.7817, 103.5664, 8], [472.2666, -1310.529, 28.22178, 123], [547.8511, 2669.281, 42.1565, 50], [726.0679, -1071.613, 27.31101, 55], [809.9118, -2157.209, 28.61901, 102], [842.2239, -1033.294, 28.19486, 77]],
  peds: ['a_f_m_beach_01', 'a_f_y_beach_01', 'a_m_m_beach_01', 'a_m_o_beach_01', 'a_m_y_beach_01', 'a_m_m_beach_02', 'a_m_y_beach_02', 'a_m_y_beach_03', 'a_m_y_beachvesp_01', 'a_m_y_beachvesp_02', 'a_f_m_bevhills_01', 'a_f_y_bevhills_01', 'a_m_m_bevhills_01', 'a_m_y_bevhills_01', 'a_f_m_bevhills_02', 'a_f_y_bevhills_02', 'a_m_m_bevhills_02', 'a_m_y_bevhills_02', 'a_f_y_bevhills_03', 'a_f_y_bevhills_04', 'a_m_y_busicas_01', 'a_f_y_business_01', 'a_m_m_business_01', 'a_m_y_business_01', 'a_f_m_business_02', 'a_f_y_business_02', 'a_m_y_business_02', 'a_f_y_business_03', 'a_m_y_business_03', 'a_f_y_business_04', 's_m_y_dealer_01', 'a_f_m_eastsa_01', 'a_f_y_eastsa_01', 'a_m_m_eastsa_01', 'a_m_y_eastsa_01', 'a_f_m_eastsa_02', 'a_f_y_eastsa_02', 'a_m_m_eastsa_02', 'a_m_y_eastsa_02', 'a_f_y_eastsa_03', 'a_m_m_farmer_01', 'a_f_m_fatbla_01', 'a_f_m_fatcult_01', 'a_m_m_fatlatin_01', 'a_f_m_fatwhite_01', 'a_m_y_gay_01', 'a_m_y_gay_02', 'a_m_m_genfat_01', 'a_m_m_genfat_02', 'a_f_y_genhot_01', 'a_f_o_genstreet_01', 'a_f_o_genstreet_01', 'a_m_o_genstreet_01', 'a_m_y_genstreet_01', 'a_m_y_genstreet_02', 's_m_m_gentransport', 'u_m_m_glenstank_01', 'a_f_y_golfer_01', 'a_m_m_golfer_01', 'a_m_m_hillbilly_01', 'a_m_m_hillbilly_02', 'u_m_y_hippie_01', 'a_f_y_hippie_01', 'a_m_y_hippy_01', 'a_f_y_hipster_01', 'a_m_y_hipster_01', 'a_f_y_hipster_02', 'a_m_y_hipster_02', 'a_f_y_hipster_03', 'a_m_y_hipster_03', 'a_f_y_hipster_04', 's_f_y_hooker_01', 's_f_y_hooker_02', 's_f_y_hooker_03', 'g_m_y_korean_01', 'g_m_y_korean_02', 'g_m_y_korlieut_01', 'a_m_m_ktown_01', 'a_m_y_ktown_01', 'a_f_m_ktown_02', 'a_m_y_ktown_02', 'g_f_y_lost_01', 'g_m_y_lost_01', 'g_m_y_lost_02'],
  start: function () {
    if (isProcess) {
      mp.game.ui.notifications.show('~r~Вы уже получили задание');

      _user.user.setWaypointTarget(posStart.x, posStart.y, posStart.z);

      return;
    }

    let q = _methods.methods.getNearestHousePos(mp.players.local.position, 5000);

    if (_methods.methods.distanceToPos2D(q, new mp.Vector3(0, 0, 0)) < 5) {
      mp.game.ui.notifications.show('~r~В данном месте нет заказов. Советуем поискать их в более населённых местах');
      return;
    }

    isProcess = true;
    let icon = _user.user.get('job') == 'taxi1' ? 'CHAR_TAXI' : 'CHAR_TAXI_LIZ';
    mp.game.ui.notifications.showWithPicture('Заказ', "Диспетчер", 'Клиент вызвал такси', icon, 1);
    posStart = q;

    _user.user.setWaypointTarget(posStart.x, posStart.y, posStart.z);
  },
  findRandomPickup: function () {
    let tp = (0, _methods2.randomArrayEl)(taxi.markers);
    posEnd = new mp.Vector3(tp[0], tp[1], tp[2]);

    _user.user.setWaypointTarget(posEnd.x, posEnd.y, posEnd.z);
  },
  checkPos: function () {
    if (!isProcess) return;

    if (mp.players.local.vehicle && (mp.players.local.vehicle.getVariable('job') == 'taxi1' || mp.players.local.vehicle.getVariable('job') == 'taxi2')) {
      if (isStart) {
        if (posEnd.x != 0 && _methods.methods.distanceToPos2D(posEnd, mp.players.local.position) < 20) {
          if (_methods.methods.getCurrentSpeed() > 1) {
            mp.game.ui.notifications.show('~b~Вы достигли точки, остановитесь');
            return;
          }

          isStart = false;
          isProcess = false;

          _user.user.showLoadDisplay();

          setTimeout(function () {
            _user.user.clearWaypointTarget();

            mp.events.call('client:methods:deleteGlobalPed', currentPedId);
            currentPedId = -1;
            let price = taxi.getTaxiDistPrice(posStart, posEnd, taxi.getTaxiModalClass(mp.players.local.vehicle.model));
            if (_user.user.get('skill_taxi') < 400) _user.user.setData('skill_taxi', _user.user.get('skill_taxi') + 1);
            posStart = new mp.Vector3(0, 0, 0);
            posEnd = new mp.Vector3(0, 0, 0);
            taxi.giveTaxiJobMoney(price);
            setTimeout(function () {
              _user.user.hideLoadDisplay();
            }, 1000);
          }, 500);
        }
      } else {
        if (posStart.x != 0 && _methods.methods.distanceToPos2D(posStart, mp.players.local.position) < 20) {
          if (_methods.methods.getCurrentSpeed() > 1) {
            mp.game.ui.notifications.show('~b~Вы достигли точки, остановитесь');
            return;
          }

          isStart = true;

          _user.user.showLoadDisplay();

          setTimeout(function () {
            let modelId = _methods.methods.getRandomInt(0, taxi.peds.length - 1);

            mp.events.call('client:methods:createGlobalPedInVehicle', countPeds, taxi.peds[modelId], mp.players.local.vehicle.remoteId);
            setTimeout(function () {
              _user.user.clearWaypointTarget();

              _user.user.hideLoadDisplay();

              let ped = taxi.getNearestPed(mp.players.local.position, 20);
              if (ped) currentPedId = ped.pedId;
              mp.game.ui.notifications.show('~b~Пассажир сел к Вам в авто');
              taxi.findRandomPickup();
            }, 1000);
          }, 500);
        }
      }
    }
  },
  giveTaxiJobMoney: function (money) {
    let businessId = _user.user.get('job') == 'taxi2' ? 147 : 114;

    let taxiMoney = _methods.methods.parseInt(money * ((100 - 2) / 100));

    let businessMoney = _methods.methods.parseInt(money * (2 / 100));

    if (_user.user.get('skill_taxi') >= 400) taxiMoney = _methods.methods.parseInt(taxiMoney * 1.5);

    if (_user.user.get('bank_prefix') < 1) {
      _user.user.addCashMoney(taxiMoney);

      mp.game.ui.notifications.show('Вы заработали: ~g~$' + taxiMoney);
    } else {
      _user.user.addBankMoney(taxiMoney);

      _user.user.sendSmsBankOperation(`Зачисление средств: ~g~$${taxiMoney}`);
    }

    _business.business.addMoney(businessId, businessMoney);
  },
  getTaxiModalClass: function (model) {
    if (_methods.methods.getVehicleInfo(model).display_name == 'Oracle2') return 1;else if (_methods.methods.getVehicleInfo(model).display_name == 'Schafter4') return 2;else if (_methods.methods.getVehicleInfo(model).display_name == 'Revolter') return 3;else if (_methods.methods.getVehicleInfo(model).display_name == 'SC1') return 4;
    return 0;
  },
  getTaxiDistPrice: function (pos1, pos2, type = 0) {
    let typePrice = 19;

    let distance = _methods.methods.distanceToPos(pos1, pos2);

    switch (type) {
      case 1:
        typePrice = 17;
        break;

      case 2:
        typePrice = 15;
        break;

      case 3:
        typePrice = 12;
        break;

      case 4:
        typePrice = 10;
        break;
    }

    let price = _methods.methods.parseInt(distance / typePrice) + 50;
    if (price > 2000) price = 2000;
    return _methods.methods.parseInt(price / 2);
  },
  execute: function () {
    setInterval(taxi.checkPos, 3000);
  },
  getNearestPed: function (pos, r) {
    let nearest, dist;
    let min = r;
    pedList.forEach(item => {
      if (!mp.peds.exists(item.ped)) return;
      dist = _methods.methods.distanceToPos(pos, item.ped.getCoords(true));

      if (dist < min) {
        nearest = item;
        min = dist;
      }
    });
    return nearest;
  }
};
exports.taxi = taxi;
mp.events.add('client:methods:createGlobalPedInVehicle', (id, model, vehicleId) => {
  let veh = mp.vehicles.atRemoteId(vehicleId);

  if (mp.vehicles.exists(veh) && _methods.methods.distanceToPos(veh.position, mp.players.local.position) < 300) {
    let ped = mp.peds.new(mp.game.joaat(model), veh.position, 270.0);

    try {
      ped.setCollision(false, false);
    } catch (e) {
      _methods.methods.debug(e);
    }

    mp.game.invoke(_methods.methods.TASK_ENTER_VEHICLE, ped.handle, veh.handle, 3, 0, 0, 0);
    pedList.push({
      ped: ped,
      pedId: id
    });
  }
});
mp.events.add('client:methods:deleteGlobalPed', id => {
  pedList.forEach(item => {
    if (item.pedId == id) {
      if (mp.peds.exists(item.ped)) item.ped.destroy();
    }
  });
});
},{"../modules/methods":"qXSp","../user":"QE3B","../business":"y5vZ","../../util/methods":"Z5QB"}],"MpJF":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.levelAccess = void 0;
const levelAccess = {
  truckerjob: 5,
  buyBusiness: 6,
  startQuest: 6,
  gr6: 6,
  c4grab: 4,
  weapongrab: 3,
  diceWork: 6,
  inviteFraction2: 2,
  freeTaxi: 1,
  startPromocode: 4,
  fleecaGrab: 4,
  pacificGrab: 4,
  x2lvlNewPlayers: 4,
  healSkidka: 1,
  taxiLic: 2,
  companyWork: 4,
  swater: 99999,
  oldmoney: 25
};
exports.levelAccess = levelAccess;
},{}],"MASL":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jail = void 0;

var _methods = require("../modules/methods");

var _data = require("../modules/data");

var _user = require("../user");

var _coffer = require("../coffer");

var _level = require("../../util/level");

var _ach = require("../modules/ach");

let _pos = new mp.Vector3(1707.69, 2546.69, 45.56);

let _posFree = new mp.Vector3(1849.444, 2601.747, 45.60717);

let _medPos = new mp.Vector3(288.61148, -1345.5358, 23.5378017);

let _izolPos1 = new mp.Vector3(1642.200927734375, 2570.389892578125, 44.56486129760742);

let _izolPos2 = new mp.Vector3(1651.0296630859375, 2570.64697265625, 44.56485366821289);

let _izolPos3 = new mp.Vector3(1629.5426025390625, 2571.131103515625, 44.56486892700195);

let prvTime = 0;
mp.events.add('server:fullHeal', () => {
  (0, _ach.healProtection)();

  _user.user.set('med_time', 0);

  _user.user.setData('med_time', 0);

  if (_user.user.get('jail_time') == 0) prvTime = 0;
});
mp.events.add('server:jailworktime', time => {
  _user.user.set('jail_time', time);

  prvTime = time;
});
let jail = {
  jailPos: _pos,
  timer: async () => {
    if (_user.user.isLogin()) {
      if (_user.user.get('med_time') > 0 && _user.user.get('jail_time') > 0) {
        _user.user.set('med_time', 0);

        _user.user.setData('med_time', 0);

        prvTime = _user.user.get('jail_time');
      }

      if (_user.user.get('med_time') < 0) _user.user.setData('med_time', 0);

      if (_user.user.get('med_time') > 1) {
        _user.user.setData('med_time', _user.user.get('med_time') - 1);

        if (typeof _user.user.get('med_time') == "number") {
          setTimeout(() => {
            let vipData = _user.user.getVipData();

            if (vipData) {
              if (vipData.healmultipler && _user.user.get('med_time') > 3) {
                _user.user.setData('med_time', _user.user.get('med_time') - 1);
              }
            }
          }, 500);
        }

        if (prvTime > _user.user.get('med_time') + 20) {
          mp.gui.chat.push(`!{03A9F4}Здравствуйте, это была плохая идея. Всё равно не получится, да и администратор логи еще посмотрит. Оно того стоит?`);

          _user.user.kickAntiCheat('Cheat Engine');

          _methods.methods.saveLog('CheatEngine', `${_user.user.get('rp_name')} (${_user.user.get('id')}) try unmed`);

          return;
        }

        prvTime = _user.user.get('med_time') + _methods.methods.getRandomInt(1, 5);

        if (_methods.methods.distanceToPos(mp.players.local.position, _medPos) > 60) {
          mp.game.ui.notifications.show('~r~Вам необходимо проходить лечение');

          _user.user.teleportv(_medPos);
        }
      }

      if (_user.user.get('med_time') == 1) {
        _user.user.setData('med_time', _user.user.get('med_time') - 1);

        prvTime = _user.user.get('med_time');
        jail.medFreePlayer();
      }

      if (_user.user.get('jail_time') > 1) {
        if (mp.players.local.getVariable('isAfk')) {
          mp.game.ui.notifications.show('~r~Время тюрьмы не идёт пока вы АФК');
        } else {
          _user.user.setData('jail_time', _user.user.get('jail_time') - 1);
        }

        if (prvTime > _user.user.get('jail_time') + 20) {
          mp.gui.chat.push(`!{03A9F4}Очень плохая идея, вот очень. Всё равно не получится, да и администратор логи еще посмотрит. Оно того стоит?`);

          _user.user.kickAntiCheat('Cheat Engine');

          _methods.methods.saveLog('CheatEngine', `${_user.user.get('rp_name')} (${_user.user.get('id')}) try unjail`);

          return;
        }

        prvTime = _user.user.get('jail_time') + _methods.methods.getRandomInt(1, 5);
        if (_user.user.get('med_time') > 0) _user.user.setData('med_time', 0);

        if (!_user.user.isDead()) {
          if (!_data.Container.HasLocally(0, 'canRun') && _methods.methods.distanceToPos(mp.players.local.position, _pos) > 200) {
            mp.game.ui.notifications.show('~r~Попытка сбежать из тюрьмы');

            if (_data.Container.HasLocally(0, 'izol')) {
              switch (_data.Container.GetLocally(0, 'izol')) {
                case 1:
                  _user.user.teleportv(_izolPos1);

                  break;

                case 2:
                  _user.user.teleportv(_izolPos2);

                  break;

                default:
                  _user.user.teleportv(_izolPos3);

                  break;
              }
            } else _user.user.teleportv(_pos);
          }
        }
      }

      if (_user.user.get('jail_time') == 1) {
        _user.user.setData('jail_time', _user.user.get('jail_time') - 1);

        jail.jailFreePlayer();
      }
    }

    setTimeout(jail.timer, 1000);
  },
  setIzol: type => {
    _data.Container.SetLocally(0, 'izol', type);

    switch (type) {
      case 1:
        _user.user.teleportv(_izolPos1);

        break;

      case 2:
        _user.user.teleportv(_izolPos2);

        break;

      default:
        _user.user.teleportv(_izolPos3);

        type = 3;
        break;
    }

    _user.user.setVirtualWorld(mp.players.local.remoteId + 1);
  },
  jailFreePlayer: async () => {
    prvTime = 0;

    _user.user.set('jail_time', 0);

    _user.user.setData('jail_time', 0);

    _user.user.setData('jailed', false);

    _user.user.setData('jailed_admin', 0);

    _user.user.setVirtualWorld(0);

    if (_data.Container.HasLocally(0, 'canRun') && _methods.methods.distanceToPos(mp.players.local.position, _pos) < 200) _user.user.teleportv(_posFree);else if (!_data.Container.HasLocally(0, 'canRun')) _user.user.teleportv(_posFree);
    mp.game.ui.notifications.show('~g~Вы отплатили свой долг. Теперь вы свободны.');

    _user.user.updateCharacterCloth();

    _data.Container.ResetLocally(0, 'izol');

    _data.Container.ResetLocally(0, 'canRun');
  },
  medFreePlayer: (pay = true) => {
    _user.user.set('med_time', 0);

    _user.user.setData('med_time', 0);

    prvTime = 0;
    mp.game.ui.notifications.show('~g~Вы успешно прошли лечение');
    if (!pay) return;

    if (_user.user.get('med_lic')) {
      _user.user.removeMoney(10);

      _coffer.coffer.addMoney(10);

      mp.game.ui.notifications.show('~g~Стоимость лечения со страховкой ~s~$10');
    } else {
      if (_user.user.getLevel() <= _level.levelAccess.healSkidka) {
        _user.user.removeMoney(50);

        _coffer.coffer.addMoney(50);

        mp.game.ui.notifications.show('~g~Стоимость лечения ~s~$50');
      } else {
        _user.user.removeMoney(150);

        _coffer.coffer.addMoney(150);

        mp.game.ui.notifications.show('~g~Стоимость лечения ~s~$150');
      }
    }
  },
  jailPlayer: (sec, withIzol = false) => {
    try {
      sec = _methods.methods.parseInt(sec);

      _user.user.unCuff();

      _user.user.unTie();

      if (sec == 0) {
        jail.jailFreePlayer();
        if (!_user.user.get('jailed_admin')) _user.user.setData('wanted_level', 0);
        return;
      }

      if (_user.user.get('jailed') === true) jail.setIzol(1);
      if (_user.user.get('jailed_admin') === 1) jail.setIzol(1);
      if (withIzol) jail.setIzol(1);else _user.user.teleportv(_pos);

      _user.user.setGrabMoney(0);

      prvTime = sec;

      _user.user.setData('jail_time', sec);

      if (!_user.user.get('jailed_admin')) _user.user.setData('wanted_level', 0);
      mp.players.local.freezePosition(false);

      _user.user.removeAllWeapons();

      if (_user.user.getSex() == 1) {
        _user.user.setComponentVariation(4, 3, 15);

        _user.user.setComponentVariation(6, 5, 0);

        _user.user.setComponentVariation(8, 60, 500);

        _user.user.setComponentVariation(11, 0, 0);

        _user.user.setComponentVariation(3, 0, 0);
      } else {
        if (_methods.methods.getRandomInt(0, 2) == 0) {
          _user.user.setComponentVariation(3, 15, 0);

          _user.user.setComponentVariation(11, 56, 1);
        } else {
          _user.user.setComponentVariation(3, 0, 0);

          _user.user.setComponentVariation(11, 56, 0);
        }

        _user.user.setComponentVariation(4, 7, 15);

        _user.user.setComponentVariation(8, 60, 500);

        _user.user.setComponentVariation(6, 6, 0);
      }

      setTimeout(function () {
        _user.user.updateCache().then();
      }, 5000);
    } catch (e) {
      _methods.methods.debug('Exception: jail.jailPlayer');

      _methods.methods.debug(e);
    }
  }
};
exports.jail = jail;
},{"../modules/methods":"qXSp","../modules/data":"Edcz","../user":"QE3B","../coffer":"sKID","../../util/level":"MpJF","../modules/ach":"ygeq"}],"Lio2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloth = void 0;

var _methods = require("../modules/methods");

var _enums = require("../enums");

let clothM;
let clothF;
let propM;
let propF;
let shopList;
let initCloth = false;

let checkInit = function () {
  if (!initCloth) {
    cloth.initCloth();
    initCloth = !initCloth;
  }
};

let cloth = {
  initCloth: function () {
    clothM = _enums.enums.get('clothM');
    clothF = _enums.enums.get('clothF');
    propM = _enums.enums.get('propM');
    propF = _enums.enums.get('propF');
    shopList = _enums.enums.get('shopList');

    _methods.methods.debug('Execute: cloth.initCloth');
  },
  getShopIdInRadius: function (pos, radius, id) {
    checkInit();

    for (var i = 0; i < shopList.length; i++) {
      if (shopList[i][2] != id) continue;
      if (_methods.methods.distanceToPos(pos, new mp.Vector3(shopList[i][3], shopList[i][4], shopList[i][5])) < radius) return ~~shopList[i][1];
    }

    return -1;
  },
  findNearest: function (pos) {
    checkInit();
    var shopPosPrew = new mp.Vector3(shopList[0][3], shopList[0][4], shopList[0][5]);

    for (var i = 0; i < shopList.length; i++) {
      if (shopList[i][2] != 0) continue;
      var shopPos = new mp.Vector3(shopList[i][3], shopList[i][4], shopList[i][5]);
      if (_methods.methods.distanceToPos(shopPos, pos) < _methods.methods.distanceToPos(shopPosPrew, pos)) shopPosPrew = shopPos;
    }

    return shopPosPrew;
  },
  buy: function (price, body, cloth, color, torso, torsoColor, parachute, parachuteColor, shopId = 0, isFree = false) {
    checkInit();

    _methods.methods.debug('cloth', price, body, cloth, color, torso, torsoColor, parachute, parachuteColor);

    mp.events.callRemote('server:business:cloth:buy', price, body, cloth, color, torso, torsoColor, parachute, parachuteColor, shopId, isFree);
  },
  changeMask: function (cloth, color) {
    checkInit();
    mp.events.callRemote('server:business:cloth:changeMask', cloth, color);
  },
  buyMask: function (price, cloth, color, shopId = 0) {
    checkInit();
    mp.events.callRemote('server:business:cloth:buyMask', price, cloth, color, shopId);
  },
  change: function (body, cloth, color, torso, torsoColor, parachute, parachuteColor) {
    checkInit();
    mp.events.callRemote('server:business:cloth:change', body, cloth, color, torso, torsoColor, parachute, parachuteColor);
  },
  buyProp: function (price, body, cloth, color, shopId = 0, isFree = false) {
    checkInit();
    mp.events.callRemote('server:business:cloth:buyProp', price, body, cloth, color, shopId, isFree);
  },
  changeProp: function (body, cloth, color) {
    checkInit();
    mp.events.callRemote('server:business:cloth:changeProp', body, cloth, color);
  }
};
exports.cloth = cloth;
},{"../modules/methods":"qXSp","../enums":"ZRYf"}],"yieC":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerDrawNow = void 0;

var _methods = require("./modules/methods");

var _user = require("./user");

var _checkpoint = require("./managers/checkpoint");

var _gui = require("./modules/gui");

var _spawn = require("./managers/spawn");

var _ui = require("./modules/ui");

var _timer = require("./modules/timer");

var _skills = require("./skills");

var _taxi = require("./jobs/taxi");

var _jail = require("./managers/jail");

var _weather = require("./managers/weather");

var _enums = require("./enums");

var _cloth = require("./business/cloth");

var _ach = require("./modules/ach");

const player = mp.players.local;
let personageCam = null;
let currentCamCoords = null;
let currentCamDist = 0.2;
let currentCamRot = -2;
let pos = [[-1037.20, -2728.15, 20.08, 239.87], [-444.81, -243.59, 36.06, 118.25]];
const startBusPosEnd = new mp.Vector3(-515.74, -263.49, 35.38);
const startBusHeadingEnd = 112.27;
let registerDrawNow = false;
exports.registerDrawNow = registerDrawNow;

async function registerDraw() {
  player.position = new mp.Vector3(-520.84, -256.94, 35.63);
  player.setCoordsNoOffset(-520.84, -256.94, 35.63, true, true, true);
  player.setHeading(29.87);

  _user.user.setVirtualWorld(0);
}

mp.events.add({
  'render': () => {
    if (!registerDrawNow) return;
    mp.game.controls.disableAllControlActions(0);
    mp.game.controls.disableAllControlActions(1);
  },
  'regtest': async () => {
    registerDraw();
  },
  'client:player:init': async data => {
    await _methods.methods.sleep(1000);
    mp.events.register('client:auth:change_spawn', ([x, y, z]) => {
      _spawn.spawn.changeCamPos(x, y, z);
    });

    if (data) {
      data = data.map(player => {
        return {
          name: player.rp_name,
          spawnPos: player.spawns
        };
      });
    }

    _methods.methods.debug('Event: client:player:init');

    _user.user.showLoadDisplay();

    _checkpoint.checkpoint.checkPosition();

    mp.nametags.enabled = false;
    mp.discord.update('Diamond RolePlay', 'gta-5.ru');
    mp.players.local.freezePosition(true);
    mp.game.ui.displayRadar(false);
    mp.players.local.setVisible(false, false);
    mp.players.local.position = new mp.Vector3(-306.342, 202.8106, 190.4903);
    mp.players.local.heading = 0;

    if (data) {
      _gui.gui.setGui('login');

      mp.events.triggerBrowser('cef:login:setData', data);
      const [_, x, y, z] = data[0].spawnPos[0];

      _spawn.spawn.setSpawnCam(x, y, z);
    } else {
      _gui.gui.setGui('reg');
    }

    await _methods.methods.sleep();

    _user.user.clearChat();

    _methods.methods.requestIpls();

    _methods.methods.loadAllPeds();

    _user.user.hideLoadDisplay();
  },
  'client:user:login:success': async (x, y, z, rot, data, is_reg) => {
    let cacheData = new Map(data);

    _user.user.setCacheData(cacheData);

    mp.game.ui.displayRadar(true);

    if (is_reg) {
      mp.storage.data.help_toggle = true;
      mp.storage.flush();
    }

    _methods.methods.debug('Event: client:user:login:success');

    _ui.ui.create();

    await _methods.methods.sleep(500);

    _spawn.spawn.destroy();

    mp.players.local.heading = rot;
    mp.players.local.freezePosition(false);
    mp.players.local.setVisible(true, false);

    _methods.methods.disableAllControls(false);

    _timer.timer.loadAll();

    _skills.skills.execute();

    _taxi.taxi.execute();

    if (_user.user.get('jail_time') > 0) _jail.jail.jailPlayer(_user.user.get('jail_time'), _user.user.get('jailed_admin') == 1);else _user.user.teleport(x, y, z);

    _gui.gui.browser.execute('CEF.hud.setHud(true)');

    _user.user.setIsLogin(true);

    _jail.jail.timer();

    mp.gui.cursor.show(false, false);

    if (is_reg) {
      registerDraw();
    }
  },
  'client:user:personage:start': async () => {
    _user.user.isTeleport = true;
    const skin = {
      SEX: 0,
      GTAO_SHAPE_THRID_ID: 0,
      GTAO_SKIN_THRID_ID: 0,
      GTAO_SHAPE_SECOND_ID: 0,
      GTAO_SKIN_SECOND_ID: 0,
      GTAO_SHAPE_MIX: 0,
      GTAO_SKIN_MIX: 0,
      GTAO_HAIR: 0,
      GTAO_HAIR_COLOR: 1,
      GTAO_HAIR_COLOR2: 1,
      GTAO_EYE_COLOR: 0,
      GTAO_EYEBROWS: 0,
      GTAO_EYEBROWS_COLOR: 1,
      GTAO_OVERLAY: 0,
      GTAO_OVERLAY_COLOR: 1,
      GTAO_OVERLAY9: 0,
      GTAO_OVERLAY9_COLOR: 1,
      GTAO_OVERLAY8: -1,
      GTAO_OVERLAY8_COLOR: 1,
      GTAO_OVERLAY5: -1,
      GTAO_OVERLAY5_COLOR: 1,
      GTAO_OVERLAY4: -1,
      GTAO_OVERLAY4_COLOR: 1,
      GTAO_OVERLAY10: -1,
      GTAO_OVERLAY10_COLOR: 1,
      GTAO_FACE_SPECIFICATIONS: '[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]'
    };
    Object.entries(skin).map(([key, value]) => {
      _user.user.setData(key, value);
    });

    _user.user.clearAllProp();

    _user.user.showLoadDisplay();

    await _methods.methods.sleep(500);

    _user.user.hideLoadDisplay();

    personageCam = mp.cameras.new('customization', new mp.Vector3(8.243752, 527.4373, 171.6173), new mp.Vector3(0, 0, 0), 20);
    personageCam.pointAtCoord(9.66692, 528.34783, 171.2);
    personageCam.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);

    _user.user.setVirtualWorld(mp.players.local.remoteId);

    _ui.ui.hideHud();

    _ui.ui.hideHud();

    mp.gui.chat.activate(false);
    mp.gui.chat.show(false);
    mp.gui.cursor.show(true, true);
    mp.game.ui.displayRadar(false);

    _gui.gui.setGui('personage');

    (0, _ach.teleportProtection)();

    _user.user.setVirtualWorld(mp.players.local.remoteId + 1);

    mp.players.local.position = new mp.Vector3(9.66692, 528.34783, 170.63504);
    mp.players.local.setCoordsNoOffset(9.66692, 528.34783, 170.63504, true, true, true);
    mp.players.local.setRotation(0, 0, 123.53768, 0, true);
    mp.players.local.freezePosition(true);
    mp.players.local.setVisible(true, false);
    mp.players.local.taskPlayAnim('amb@world_human_guard_patrol@male@base', 'base', 8.0, -8, -1, 9, 0, false, false, false);
    await _methods.methods.sleep(1000);
    _user.user.isTeleport = false;
  },
  'client:user:personage:eventManager': async (type, value) => {
    switch (type) {
      case 'save':
        personageCam.destroy();

        _gui.gui.setGui(null);

        _ui.ui.showHud();

        mp.gui.chat.show(true);
        personageCam = null;
        mp.players.local.freezePosition(false);
        mp.gui.cursor.show(false, false);
        mp.game.ui.displayRadar(true);
        mp.game.cam.renderScriptCams(false, true, 500, true, true);

        if (!mp.players.local.getVariable('fixPersonage')) {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');
          let listTorso = [];
          let listLeg = [];
          let listFoot = [];

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 11) continue;
            if (clothList[i][0] != 0) continue;
            if (clothList[i][10] > _weather.weather.getWeatherTemp() + 5) continue;
            listTorso.push(i);
          }

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 4) continue;
            if (clothList[i][0] != 0) continue;
            if (clothList[i][10] > _weather.weather.getWeatherTemp() + 5) continue;
            listLeg.push(i);
          }

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 6) continue;
            if (clothList[i][0] != 0) continue;
            if (clothList[i][10] > _weather.weather.getWeatherTemp() + 5) continue;
            listFoot.push(i);
          }

          let idTorso = listTorso[_methods.methods.getRandomInt(0, listTorso.length - 1)];

          let idLeg = listLeg[_methods.methods.getRandomInt(0, listLeg.length - 1)];

          let idFoot = listFoot[_methods.methods.getRandomInt(0, listFoot.length - 1)];

          let cl1 = _methods.methods.getRandomInt(0, clothList[idTorso][3] - 1);

          let cl2 = _methods.methods.getRandomInt(0, clothList[idLeg][3] - 1);

          let cl3 = _methods.methods.getRandomInt(0, clothList[idFoot][3] - 1);

          if (idTorso >= 0) _cloth.cloth.buy(10, clothList[idTorso][1], clothList[idTorso][2], cl1 < 0 ? 0 : cl1, clothList[idTorso][4], clothList[idTorso][5], clothList[idTorso][6], clothList[idTorso][7], 0, true);
          if (idLeg >= 0) _cloth.cloth.buy(10, clothList[idLeg][1], clothList[idLeg][2], cl2 < 0 ? 0 : cl2, clothList[idLeg][4], clothList[idLeg][5], clothList[idLeg][6], clothList[idLeg][7], 0, true);
          if (idFoot >= 0) _cloth.cloth.buy(10, clothList[idFoot][1], clothList[idFoot][2], cl3 < 0 ? 0 : cl3, clothList[idFoot][4], clothList[idFoot][5], clothList[idFoot][6], clothList[idFoot][7], 0, true);
        }

        mp.events.callSocket('server:user:personage:done');
        break;

      case 'features':
        _user.user.setData('GTAO_FACE_SPECIFICATIONS', value);

        break;

      case 'floor':
        _user.user.showLoadDisplay(500);

        await _methods.methods.sleep(500);

        _user.user.setData('SEX', value);

        _user.user.setPlayerModel(!value ? 'mp_m_freemode_01' : 'mp_f_freemode_01');

        setTimeout(() => _user.user.updateCharacterFace(true));
        mp.players.local.taskPlayAnim('amb@world_human_guard_patrol@male@base', 'base', 8.0, -8, -1, 9, 0, false, false, false);
        await _methods.methods.sleep(500);

        _user.user.updateCharacterFace(true);

        _user.user.hideLoadDisplay();

        break;

      case 'mother':
        _user.user.setData('GTAO_SHAPE_THRID_ID', value);

        _user.user.setData('GTAO_SKIN_THRID_ID', value);

        break;

      case 'father':
        _user.user.setData('GTAO_SHAPE_SECOND_ID', value);

        _user.user.setData('GTAO_SKIN_SECOND_ID', value);

        break;

      case 'heredity':
        _user.user.setData('GTAO_SHAPE_MIX', value);

        break;

      case 'skin':
        _user.user.setData('GTAO_SKIN_MIX', value);

        break;

      case 'hair':
        _user.user.setData('GTAO_HAIR', value);

        break;

      case 'hairColor':
        _user.user.setData('GTAO_HAIR_COLOR', value);

        break;

      case 'eyeColor':
        _user.user.setData('GTAO_EYE_COLOR', value);

        break;

      case 'eyebrows':
        _user.user.setData('GTAO_EYEBROWS', value);

        break;

      case 'eyebrowsColor':
        _user.user.setData('GTAO_EYEBROWS_COLOR', value);

        break;

      case 'beard':
        _user.user.setData('GTAO_OVERLAY', value - 1);

        break;

      case 'beardColor':
        _user.user.setData('GTAO_OVERLAY_COLOR', value);

        break;

      case 'freckles':
        _user.user.setData('GTAO_OVERLAY9', value - 1);

        break;
    }

    if (type != 'rotate' && type != 'height' && type != 'depth') _user.user.updateCharacterFace(true);

    if (type == 'rotate') {
      try {
        let coords = new mp.Vector3(9.66692, 528.34783, 171.3);
        currentCamRot = value / 180 * -2;
        let newCoords = new mp.Vector3((1 + currentCamDist) * Math.sin(currentCamRot) + coords.x, (1 + currentCamDist) * Math.cos(currentCamRot) + coords.y, coords.z);
        personageCam.setCoord(newCoords.x, newCoords.y, newCoords.z);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }

    if (type == 'height') {
      personageCam.pointAtCoord(9.66692, 528.34783, 171.2 + value);
    }

    if (type == 'depth') {
      currentCamDist = value;
      let coords = new mp.Vector3(9.66692, 528.34783, 171.3);
      let newCoords = new mp.Vector3((1 + currentCamDist) * Math.sin(currentCamRot) + coords.x, (1 + currentCamDist) * Math.cos(currentCamRot) + coords.y, coords.z);
      personageCam.setCoord(newCoords.x, newCoords.y, newCoords.z);
    }
  }
});
},{"./modules/methods":"qXSp","./user":"QE3B","./managers/checkpoint":"j7m4","./modules/gui":"bk91","./managers/spawn":"GDbQ","./modules/ui":"zOnK","./modules/timer":"BpKR","./skills":"o0SG","./jobs/taxi":"Vike","./managers/jail":"MASL","./managers/weather":"uehX","./enums":"ZRYf","./business/cloth":"Lio2","./modules/ach":"ygeq"}],"E081":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mouseMove = void 0;

var _newrage = require("../util/newrage");

mp.events.add('render', () => {
  if (!_newrage.RAGE_BETA) mp.game.controls.disableControlAction(1, 44, true);
  let veh = mp.players.local.vehicle;

  if (!veh) {
    mp.game.controls.disableControlAction(0, 36, true);
  } else {
    if (veh.getClass() == 18) {
      mp.game.controls.disableControlAction(0, 86, true);
      mp.game.controls.disableControlAction(0, 81, true);
      mp.game.controls.disableControlAction(0, 82, true);
      mp.game.controls.disableControlAction(0, 85, true);
      mp.game.controls.disableControlAction(0, 80, true);
      mp.game.controls.disableControlAction(0, 19, true);
    }

    if (veh.getVariable("skate")) {
      mp.game.controls.disableControlAction(0, 75, true);
    }

    if (veh.doesHaveWeapons()) {
      mp.game.controls.disableControlAction(0, 69, true);
      mp.game.controls.disableControlAction(0, 70, true);
      mp.game.controls.disableControlAction(0, 76, true);
      mp.game.controls.disableControlAction(0, 331, true);
      mp.game.controls.disableControlAction(0, 330, true);
      mp.game.controls.disableControlAction(0, 347, true);
      mp.game.controls.disableControlAction(0, 25, true);
      mp.game.controls.disableControlAction(0, 114, true);
    }
  }

  moveX = mp.gui.cursor.position[0] - oldX;
  moveY = mp.gui.cursor.position[1] - oldY;
  oldX = mp.gui.cursor.position[0];
  oldY = mp.gui.cursor.position[1];
});
let leftKeyPressed = false;
let rightKeyPressed = false;
let oldX = mp.gui.cursor.position[0];
let oldY = mp.gui.cursor.position[1];
let moveX = mp.gui.cursor.position[0];
let moveY = mp.gui.cursor.position[1];
mp.events.add('click', (x, y, upOrDown, leftOrRight, relativeX, relativeY, worldPosition, hitEntity) => {
  if (leftOrRight === "left") {
    leftKeyPressed = upOrDown === "down";
  } else {
    rightKeyPressed = upOrDown === "down";
  }
});

const mouseMove = (cb, interval = 100) => {
  setInterval(() => {
    if (!leftKeyPressed && !rightKeyPressed) return;
    cb(moveX, moveY, leftKeyPressed, rightKeyPressed);
  }, interval);
};

exports.mouseMove = mouseMove;
},{"../util/newrage":"mgLX"}],"V6sO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testDriveMode = void 0;

var _gui = require("../modules/gui");

var _user = require("../user");

var _control = require("../control");

var _methods = require("../../util/methods");

const player = mp.players.local;
let camera = null;
let vehicle = null;
let carsData = null;
let carId = 0;
let colors = [[42, '#FFC016'], [27, '#B4131A'], [23, '#999C94'], [0, '#000000']];
let colorId = 0;
let type = '';
let exitPos;
let newRot = 132.0;
let showType;
let showPos;
let testPos;
let showOffset = [1.23276901245117, -10.93903710937500, 2.160024642944336];
let showHeading;
let testDriveMode = false;
exports.testDriveMode = testDriveMode;
(0, _control.mouseMove)((right, down, leftKey) => {
  if (!leftKey) return;
  if (!vehicle) return;
  if (!vehicle.handle) return;
  if (testDriveMode) return;
  vehicle.setHeading(vehicle.getHeading() + right / 1.5);
});

function focusCamera() {
  const _colors = colors.map(item => item[0]);

  if (mp.vehicles.exists(vehicle)) {
    vehicle.position = new mp.Vector3(...showPos);
    vehicle.setHeading(showHeading);
    vehicle.setColours(_colors[colorId], _colors[colorId]);

    if (showType == 'auto' || showType == 'technical') {}

    vehicle.setFixed();
  }

  mp.game.streaming.requestCollisionAtCoord(...showPos);
  mp.game.streaming.setFocusArea(showPos[0], showPos[1], showPos[2], 0.0, 0.0, 0.0);
  player.freezePosition(true);
  player.position = new mp.Vector3(showPos[0], showPos[1], showPos[2] + 50);
  !camera ? (camera = mp.cameras.new('car_dealing'), mp.game.cam.renderScriptCams(true, false, 0, true, false), camera.setFov(30)) : true;
  camera.setCoord(showPos[0] + showOffset[0], showPos[1] + showOffset[1], showPos[2] + showOffset[2]);

  if (mp.vehicles.exists(vehicle)) {
    camera.pointAtCoord(vehicle.position.x, vehicle.position.y, vehicle.position.z);
  }

  mp.game.cam.renderScriptCams(true, true, 1500, true, false);
  mp.game.ui.displayRadar(false);

  _gui.gui.setGui('autosalon');

  _gui.gui.browser.executeAll([`CEF.buycar.allowTestDrive()`, `CEF.buycar.setType('${type}')`, `CEF.buycar.setCars('${JSON.stringify(carsData)}')`, `CEF.buycar.setCar(${carId})`, `CEF.buycar.setColors('${JSON.stringify(colors.map(item => item[1]))}')`]);

  _user.user.hideLoadDisplay(500, false);
}

mp.events.add({
  'client:autosalon:startBuyCar': (_carsData, colorsData, _type, _showType) => {
    carId = 0;

    _gui.gui.browser.execute('CEF.hud.showHud(false)');

    _gui.gui.browser.execute('window.chatAPI.show(false)');

    if (vehicle) {
      vehicle.destroy();
      vehicle = null;
    }

    exitPos = player.position;
    carsData = _carsData;
    colors = colorsData;
    type = _type;
    showType = _showType;

    switch (showType) {
      case 'auto':
        showPos = [-43.07925796508789, -1094.6630859375, 25.762327194213867];
        testPos = [-47.19, -1112.14, 26.44, 70.43];
        showOffset = [1.23276901245117, -10.93903710937500, 2.160024642944336];
        showHeading = 132;
        break;

      case 'boat':
        showPos = [-833.9078369140625, -1440.7279052734375, -0.4744686484336853];
        testPos = [-841.29, -1440.42, -0.47, -177.05];
        showOffset = [11.23276901245117, -10.93903710937500, 6.160024642944336];
        showHeading = 182;
        break;

      case 'plane':
        showPos = [-1442.887451171875, -2661.849365234375, 13.94493579864502];
        testPos = [-921.96, -3188.10, 13.95, 55.90];
        showOffset = [21.23276901245117, -10.93903710937500, 16.160024642944336];
        showHeading = 182;
        break;

      case 'technical':
        showPos = [778.1519165039062, -2970.34716796875, 5.800717353820801];
        testPos = [870.61, -2956.15, 5.90, -92.45];
        showOffset = [4.23276901245117, -10.93903710937500, 4.160024642944336];
        showHeading = 132;
        break;
    }

    vehicle = mp.vehicles.new(mp.game.joaat(carsData[carId].model), new mp.Vector3(...showPos), {
      dimension: player.dimension,
      heading: showHeading
    });
    focusCamera();
  },
  'client:autosalon:changeCar': async id => {
    if (vehicle && mp.vehicles.exists(vehicle)) {
      vehicle.destroy();
    }

    carId = id;
    vehicle = mp.vehicles.new(mp.game.joaat(carsData[carId].model), new mp.Vector3(showPos[0], showPos[1], showPos[2]), {
      dimension: mp.players.local.dimension,
      heading: showHeading
    });
    mp.game.streaming.setModelAsNoLongerNeeded(mp.game.joaat(carsData[carId].model));

    if (mp.vehicles.exists(vehicle)) {
      vehicle.setHeading(showHeading);

      const _colors = colors.map(item => item[0]);

      vehicle.setColours(_colors[colorId], _colors[colorId]);

      if (showType == 'auto' || showType == 'technical') {}
    }
  },
  'client:autosalon:changeColor': id => {
    if (vehicle && mp.vehicles.exists(vehicle)) {
      colorId = id;

      const _colors = colors.map(item => item[0]);

      vehicle.setColours(_colors[colorId], _colors[colorId]);
    }
  },
  'client:autosalon:stopBuyCar': () => {
    _gui.gui.browser.execute('CEF.gui.setGui(null)');

    _gui.gui.browser.execute('CEF.hud.showHud(true)');

    _gui.gui.browser.execute('window.chatAPI.show(true)');

    if (vehicle && mp.vehicles.exists(vehicle)) {
      vehicle.destroy();
      vehicle = null;
    }

    carId = 0;
    colorId = 0;

    if (camera) {
      camera.destroy(true);
      camera = null;
    }

    mp.game.cam.renderScriptCams(false, false, 0, false, false);
    player.position = exitPos;
    player.freezePosition(false);
    mp.game.invoke('0x198F77705FA0931D', player.handle);
    mp.game.ui.displayRadar(true);
    mp.game.cam.setGameplayCamRelativeHeading(0);

    _user.user.hideLoadDisplay(500, false);
  },
  'client:autosalon:rentCar': (id, colorId) => {
    mp.events.callRemote('server:autosalon:rentCar', id, colorId);
  },
  'client:autosalon:testDrive': async () => {
    if (!vehicle) return;
    exports.testDriveMode = testDriveMode = true;
    vehicle.position = new mp.Vector3(testPos[0], testPos[1], testPos[2]);
    vehicle.setHeading(testPos[3]);

    _user.user.showLoadDisplay(500);

    await (0, _methods.sleep)(1000);

    _gui.gui.browser.execute('CEF.gui.setGui(null)');

    _gui.gui.browser.execute('CEF.hud.showHud(true)');

    _gui.gui.browser.execute('window.chatAPI.show(true)');

    mp.game.invoke("0xC20E50AA46D09CA8", player.handle, vehicle.handle, 1, -1, 1.0, 16, 0);

    if (camera) {
      camera.destroy(true);
      camera = null;
    }

    mp.game.cam.renderScriptCams(false, false, 0, false, false);
    player.freezePosition(false);
    mp.game.invoke('0x198F77705FA0931D', player.handle);
    mp.game.ui.displayRadar(true);
    mp.game.cam.setGameplayCamRelativeHeading(0);

    _user.user.hideLoadDisplay(500, false);

    _user.user.notify('У вас 60 секунд на тестирование транспорта');

    vehicle.engine = true;
    vehicle.setEngineOn(true, true, true);
    vehicle.setFixed();
    let timeend = false;
    setTimeout(() => {
      timeend = true;
    }, 60000);
    await (0, _methods.sleep)(5000);

    while (player.isInVehicle(vehicle.handle, false) && !timeend) await (0, _methods.sleep)(500);

    _user.user.notify('~r~Тестирование завершено');

    _user.user.showLoadDisplay(500);

    await (0, _methods.sleep)(1000);
    focusCamera();
    exports.testDriveMode = testDriveMode = false;
  },
  'client:autosalon:buyCar': (id, colorId) => {
    mp.events.callRemote('server:autosalon:buyCar', id, colorId);
  }
});
},{"../modules/gui":"bk91","../user":"QE3B","../control":"E081","../../util/methods":"Z5QB"}],"pYYy":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vehicles = void 0;

var _methods = require("./modules/methods");

var _user = require("./user");

var _data = require("./modules/data");

var _auth = require("./auth");

var _autosalon = require("./business/autosalon");

let player = mp.players.local;
let isAutopilotEnable = false;
let offset = 1000000;
let carCompareShow = false;
mp.events.add('carCompare', () => {
  carCompareShow = !carCompareShow;
  mp.events.triggerBrowser('carCompareShow', carCompareShow);
});
let currentSpeed;
let currentTime;
let time0To100;
let time0To200;
let vmax;
let startTime;
let modify0To100;
let modify0To200;
let modifyCurrentTime;
currentSpeed = currentTime = time0To100 = time0To200 = vmax = startTime = 0;
modify0To100 = modify0To200 = modifyCurrentTime = true;
mp.events.add('render', () => {
  if (!carCompareShow) return;
  if (!player.vehicle) return;
  currentSpeed = (player.vehicle.getSpeed() * 3.6).toFixed(0) * 1;

  if (currentSpeed == 0) {
    currentTime = time0To100 = time0To200 = vmax = startTime = 0;
    modify0To100 = modify0To200 = modifyCurrentTime = true;
  } else {
    if (currentSpeed > vmax) vmax = currentSpeed;
    if (startTime == 0) startTime = new Date().getTime();
    if (modifyCurrentTime) currentTime = ((new Date().getTime() - startTime) / 1000).toFixed(3);
    if (modify0To100) time0To100 = currentTime;
    if (currentSpeed >= 100) modify0To100 = false;
    if (modify0To200) time0To200 = currentTime;

    if (currentSpeed >= 200) {
      modify0To200 = false;
      modifyCurrentTime = false;
    }
  }

  mp.events.triggerBrowser('carCompareData', time0To100, time0To200, vmax);
});
let vehicles = {
  set: (id, key, val) => {
    _data.Container.SetLocally(offset + id, key, val);
  },
  reset: (id, key) => {
    _data.Container.ResetLocally(offset + id, key);
  },
  get: (id, key) => {
    if (vehicles.has(id, key)) return _data.Container.GetLocally(offset + id, key);
    return undefined;
  },
  has: (id, key) => {
    return _data.Container.HasLocally(offset + id, key);
  },
  enableAutopilot: () => {
    if (mp.game.invoke(_methods.methods.IS_WAYPOINT_ACTIVE)) {
      let pos = _methods.methods.getWaypointPosition();

      mp.players.local.taskVehicleDriveToCoordLongrange(mp.players.local.vehicle.handle, pos.x, pos.y, pos.z, 55 / 2.2, 786603, 30);
      isAutopilotEnable = true;
      vehicles.checkAutopilot();
      mp.game.ui.notifications.show('~g~Автопилот активирован');
    } else {
      mp.players.local.clearTasks();
      mp.game.ui.notifications.show('Сначала установите маркер на карте');
    }
  },
  disableAutopilot: () => {
    mp.game.ui.notifications.show('~y~Автопилот деактивирован');
    mp.players.local.clearTasks();
    isAutopilotEnable = false;
  },
  setInteriorLightState: state => {
    if (mp.players.local.vehicle) mp.events.callRemote('s:vSync:setInteriorLightState', mp.players.local.vehicle, state);
  },
  setTaxiLightState: state => {
    if (mp.players.local.vehicle) mp.events.callRemote('s:vSync:setTaxiLightState', mp.players.local.vehicle, state);
  },
  setIndicatorLeftState: state => {
    if (mp.players.local.vehicle) mp.events.callRemote('s:vSync:setIndicatorLeftState', mp.players.local.vehicle, state);
  },
  setIndicatorRightState: state => {
    if (mp.players.local.vehicle) mp.events.callRemote('s:vSync:setIndicatorRightState', mp.players.local.vehicle, state);
  },
  checkerControl: () => {
    let veh = mp.players.local.vehicle;

    if (veh) {
      let vInfo = _methods.methods.getVehicleInfo(veh.model);

      if (vInfo.class_name == 'Helicopters' || vInfo.class_name == 'Planes' || vInfo.class_name == 'Boats' || vInfo.class_name == 'Motorcycles' || vInfo.class_name == 'Cycles') return false;
      return veh.isInAir();
    }

    return false;
  },
  checkAutopilot: () => {
    if (isAutopilotEnable) {
      if (_methods.methods.getWaypointPosition().x == 0) {
        mp.players.local.clearTasks();
        isAutopilotEnable = false;
        mp.players.local.taskVehicleTempAction(mp.players.local.vehicle.handle, 27, 8000);
        setTimeout(function () {
          mp.game.ui.notifications.show('~g~Вы достигли конечной точки маршрута');
          mp.game.ui.notifications.show('~y~Автопилот деактивирован');
          mp.players.local.clearTasks();
        }, 8000);
      } else setTimeout(vehicles.checkAutopilot, 1000);
    }
  },
  getData: async id => {
    return await _data.Container.GetAll(200000 + _methods.methods.parseInt(id));
  },
  getSpecialModName: id => {
    if (id >= 100) id = id - 100;

    switch (id) {
      case 0:
        return 'fDriveBiasFront';

      case 1:
        return 'fInitialDriveForce';

      case 2:
        return 'fDriveInertia';

      case 3:
        return 'fBrakeForce';

      case 4:
        return 'fBrakeBiasFront';

      case 5:
        return 'fHandBrakeForce';

      case 6:
        return 'fSteeringLock';

      case 7:
        return 'fTractionCurveMax';

      case 8:
        return 'fTractionCurveMin';
    }
  },
  isVehicleSirenValid: model => {
    let vInfo = _methods.methods.getVehicleInfo(model);

    switch (vInfo.display_name) {
      case 'Police':
      case 'Police2':
      case 'Police3':
      case 'Police4':
      case 'PoliceT':
      case 'Policeb':
      case 'FBI':
      case 'FBI2':
      case 'Sheriff':
      case 'Sheriff2':
      case 'Riot':
      case 'Riot2':
      case 'Lguard':
      case 'Pranger':
      case 'Ambulance':
      case 'FireTruck':
      case 'PoliceOld1':
      case 'PoliceOld2':
        return true;
    }

    return false;
  },
  getSirenSound: (model, state) => {
    let vInfo = _methods.methods.getVehicleInfo(model);

    switch (vInfo.display_name) {
      case 'Police':
      case 'FBI2':
      case 'Sheriff':
      case 'Sheriff2':
      case 'Pranger':
        {
          if (state == 2) return 'RESIDENT_VEHICLES_SIREN_WAIL_03';
          if (state == 3) return 'RESIDENT_VEHICLES_SIREN_QUICK_03';
          if (state == 4) return 'VEHICLES_HORNS_POLICE_WARNING';
          break;
        }

      case 'Police2':
      case 'Police3':
        {
          if (state == 2) return 'VEHICLES_HORNS_SIREN_1';
          if (state == 3) return 'VEHICLES_HORNS_SIREN_2';
          if (state == 4) return 'VEHICLES_HORNS_POLICE_WARNING';
          break;
        }

      case 'FBI':
      case 'Police4':
      case 'Lguard':
      case 'PoliceT':
        {
          if (state == 2) return 'RESIDENT_VEHICLES_SIREN_WAIL_02';
          if (state == 3) return 'RESIDENT_VEHICLES_SIREN_QUICK_02';
          if (state == 4) return 'VEHICLES_HORNS_POLICE_WARNING';
          break;
        }

      case 'Policeb':
      case 'Riot':
      case 'Riot2':
      case 'Ambulance':
      case 'PoliceOld1':
      case 'PoliceOld2':
        {
          if (state == 2) return 'RESIDENT_VEHICLES_SIREN_WAIL_01';
          if (state == 3) return 'RESIDENT_VEHICLES_SIREN_QUICK_01';
          if (state == 4) return 'VEHICLES_HORNS_POLICE_WARNING';
          break;
        }

      case 'FireTruck':
        {
          if (state == 2) return 'RESIDENT_VEHICLES_SIREN_FIRETRUCK_QUICK_01';
          if (state == 3) return 'RESIDENT_VEHICLES_SIREN_FIRETRUCK_QUICK_01';
          if (state == 4) return 'VEHICLES_HORNS_FIRETRUCK_WARNING';
          break;
        }
    }

    return '';
  },
  getWarningSound: model => {
    let vInfo = _methods.methods.getVehicleInfo(model);

    switch (vInfo.display_name) {
      case 'Police':
      case 'Police2':
      case 'Police3':
      case 'Police4':
      case 'PoliceT':
      case 'Policeb':
      case 'FBI':
      case 'FBI2':
      case 'Sheriff':
      case 'Sheriff2':
      case 'Riot':
      case 'Riot2':
      case 'Lguard':
      case 'Pranger':
      case 'Ambulance':
      case 'PoliceOld1':
      case 'PoliceOld2':
        return 'SIRENS_AIRHORN';

      case 'FireTruck':
        return 'VEHICLES_HORNS_FIRETRUCK_WARNING';
    }
  },
  getSpeedBoost: model => {
    let modelName = _methods.methods.getVehicleInfo(model).display_name;

    switch (modelName) {
      case 'Adder':
        return 47;

      case 'Akuma':
        return 26;

      case 'Ambulance':
        return 5;

      case 'Autarch':
        return 45;

      case 'Bagger':
        return 8;

      case 'Bati':
        return 35;

      case 'Bati2':
        return 35;

      case 'Bullet':
        return 20;

      case 'Cheetah':
        return 40;

      case 'Cheetah2':
        return 23;

      case 'Cyclone':
        return 40;

      case 'Deveste':
        return 48;

      case 'Diablous':
        return 20;

      case 'Diablous2':
        return 30;

      case 'Double':
        return 30;

      case 'Entity2':
        return 60;

      case 'EntityXF':
        return 47;

      case 'FBI':
        return 30;

      case 'FBI2':
        return 20;

      case 'GP1':
        return 40;

      case 'Hakuchou':
        return 20;

      case 'Hakuchou2':
        return 40;

      case 'Hexer':
        return 2;

      case 'Infernus':
        return 20;

      case 'Infernus2':
        return 20;

      case 'Insurgent':
        return 10;

      case 'Insurgent2':
        return 10;

      case 'Insurgent3':
        return 10;

      case 'LE7B':
        return 35;

      case 'Lectro':
        return 10;

      case 'Lguard':
        return 10;

      case 'Nemesis':
        return 10;

      case 'Neon':
        return 30;

      case 'Nero':
        return 62;

      case 'Nero2':
        return 63;

      case 'Nightblade':
        return 5;

      case 'PCJ':
        return 10;

      case 'Penetrator':
        return 35;

      case 'Pfister811':
        return 25;

      case 'Police':
        return 35;

      case 'Police2':
        return 25;

      case 'Police3':
        return 30;

      case 'Police4':
        return 30;

      case 'Policeb':
        return 30;

      case 'PoliceBuffalo':
        return 30;

      case 'PoliceOld1':
        return 10;

      case 'PoliceOld2':
        return 10;

      case 'PoliceT':
        return 10;

      case 'Polmav':
        return 50;

      case 'Prototipo':
        return 50;

      case 'Raiden':
        return 20;

      case 'Reaper':
        return 50;

      case 'Ruffian':
        return 10;

      case 'Sanctus':
        return 4;

      case 'SC1':
        return 20;

      case 'Schlagen':
        return 23;

      case 'Sheriff':
        return 30;

      case 'Sheriff2':
        return 30;

      case 'Shotaro':
        return 10;

      case 'Sovereign':
        return 5;

      case 'Stinger':
        return 10;

      case 'StingerGT':
        return 14;

      case 'Swinger':
        return 20;

      case 'T20':
        return 44;

      case 'Tempesta':
        return 30;

      case 'Tezeract':
        return 46;

      case 'Thrust':
        return 8;

      case 'Turismo2':
        return 20;

      case 'Turismor':
        return 44;

      case 'Tyrant':
        return 42;

      case 'Tyrus':
        return 40;

      case 'Vacca':
        return 30;

      case 'Visione':
        return 42;

      case 'Voltic':
        return 20;

      case 'Wolfsbane':
        return 3;

      case 'XA21':
        return 40;

      case 'Zentorno':
        return 38;

      case 'Zombiea':
        return 8;

      case 'Zombieb':
        return 8;

      case 'Emerus':
        return 48;

      case 'Krieger':
        return 45;

      case 'Neo':
        return 31;

      case 'S80':
        return 40;

      case 'Thrax':
        return 60;

      case 'Zorrusso':
        return 40;

      case 'Vagner':
        return 40;

      case 'Taipan':
        return 30;

      case 'Osiris':
        return 30;

      case 'Gauntlet4':
        return 30;

      case 'Tropos':
        return 30;

      case 'FlashGT':
        return 30;

      case 'Surrano':
        return 30;

      case 'Jugular':
        return 30;

      case 'Verlierer2':
        return 20;

      case 'Specter':
        return 35;

      case 'Specter2':
        return 39;

      case 'Dominator3':
        return 60;
    }

    return 1;
  },
  getSpeedMax: model => {
    let modelName = _methods.methods.getVehicleInfo(model).display_name;

    switch (modelName) {
      case 'Adder':
        return 340;

      case 'Akuma':
        return 285;

      case 'Alpha':
        return 240;

      case 'Ambulance':
        return 203;

      case 'Ardent':
        return 240;

      case 'Asea':
        return 150;

      case 'Asterope':
        return 150;

      case 'Autarch':
        return 340;

      case 'Avarus':
        return 200;

      case 'Bagger':
        return 230;

      case 'Baller':
        return 180;

      case 'Baller2':
        return 180;

      case 'Baller3':
        return 190;

      case 'Baller4':
        return 180;

      case 'Banshee':
        return 252;

      case 'Banshee2':
        return 280;

      case 'Barracks':
        return 150;

      case 'Barracks2':
        return 150;

      case 'Barracks3':
        return 150;

      case 'Bati':
        return 290;

      case 'Bati2':
        return 292;

      case 'Benson':
        return 150;

      case 'BestiaGTS':
        return 273;

      case 'BF400':
        return 130;

      case 'BfInjection':
        return 140;

      case 'Biff':
        return 150;

      case 'Bifta':
        return 150;

      case 'Bison':
        return 170;

      case 'Bison2':
        return 170;

      case 'Bison3':
        return 170;

      case 'BJXL':
        return 170;

      case 'Blade':
        return 170;

      case 'Blazer':
        return 140;

      case 'Blazer2':
        return 140;

      case 'Blazer3':
        return 150;

      case 'Blazer4':
        return 160;

      case 'Blazer5':
        return 150;

      case 'Blimp':
        return 1;

      case 'Blimp2':
        return 1;

      case 'Blimp3':
        return 1;

      case 'Blista':
        return 170;

      case 'Blista2':
        return 170;

      case 'Blista3':
        return 170;

      case 'Bmx':
        return 60;

      case 'BoatTrailer':
        return 1;

      case 'BobcatXL':
        return 180;

      case 'Bodhi2':
        return 160;

      case 'Bombushka':
        return 1;

      case 'Boxville':
        return 140;

      case 'Boxville2':
        return 140;

      case 'Boxville3':
        return 140;

      case 'Boxville4':
        return 140;

      case 'Boxville5':
        return 140;

      case 'Brawler':
        return 239;

      case 'Brickade':
        return 160;

      case 'Brioso':
        return 180;

      case 'Bruiser':
        return 190;

      case 'Bruiser2':
        return 190;

      case 'Bruiser3':
        return 190;

      case 'Brutus':
        return 190;

      case 'Brutus2':
        return 190;

      case 'Brutus3':
        return 190;

      case 'BType':
        return 130;

      case 'BType2':
        return 180;

      case 'BType3':
        return 180;

      case 'Buccaneer':
        return 1;

      case 'Buccaneer2':
        return 1;

      case 'Buffalo':
        return 200;

      case 'Buffalo2':
        return 211;

      case 'Buffalo3':
        return 210;

      case 'Bulldozer':
        return 40;

      case 'Bullet':
        return 270;

      case 'Burrito':
        return 180;

      case 'Burrito2':
        return 180;

      case 'Burrito3':
        return 180;

      case 'Burrito4':
        return 180;

      case 'Burrito5':
        return 180;

      case 'Bus':
        return 170;

      case 'Buzzard':
        return 1;

      case 'Buzzard2':
        return 1;

      case 'CableCar':
        return 1;

      case 'Caddy':
        return 70;

      case 'Caddy2':
        return 70;

      case 'Caddy3':
        return 70;

      case 'Camper':
        return 180;

      case 'Caracara':
        return 200;

      case 'Carbonizzare':
        return 280;

      case 'CarbonRS':
        return 280;

      case 'Cargobob':
        return 1;

      case 'Cargobob3':
        return 1;

      case 'Cargobob4':
        return 1;

      case 'CargoPlane':
        return 1;

      case 'Casco':
        return 220;

      case 'Cavalcade':
        return 180;

      case 'Cavalcade2':
        return 180;

      case 'Cerberus':
        return 120;

      case 'Cerberus2':
        return 120;

      case 'Cerberus3':
        return 120;

      case 'Cheburek':
        return 170;

      case 'Cheetah':
        return 290;

      case 'Cheetah2':
        return 220;

      case 'Chernobog':
        return 1;

      case 'Chimera':
        return 220;

      case 'Chino':
        return 180;

      case 'Chino2':
        return 180;

      case 'Cliffhanger':
        return 205;

      case 'Clique':
        return 220;

      case 'Coach':
        return 170;

      case 'Cog55':
        return 215;

      case 'CogCabrio':
        return 215;

      case 'Cognoscenti':
        return 215;

      case 'Comet2':
        return 280;

      case 'Comet3':
        return 275;

      case 'Comet4':
        return 270;

      case 'Comet5':
        return 280;

      case 'Contender':
        return 190;

      case 'Coquette':
        return 250;

      case 'Coquette2':
        return 220;

      case 'Coquette3':
        return 222;

      case 'Cruiser':
        return 20;

      case 'Crusader':
        return 200;

      case 'Cuban800':
        return 1;

      case 'Cutter':
        return 30;

      case 'Cyclone':
        return 280;

      case 'Daemon':
        return 220;

      case 'Daemon2':
        return 220;

      case 'Deathbike':
        return 220;

      case 'Deathbike2':
        return 230;

      case 'Deathbike3':
        return 230;

      case 'Defiler':
        return 270;

      case 'Deluxo':
        return 1;

      case 'Deveste':
        return 330;

      case 'Deviant':
        return 234;

      case 'Diablous':
        return 250;

      case 'Diablous2':
        return 280;

      case 'Dilettante':
        return 195;

      case 'Dilettante2':
        return 200;

      case 'Dinghy':
        return 1;

      case 'Dinghy2':
        return 1;

      case 'Dinghy3':
        return 1;

      case 'Dinghy4':
        return 1;

      case 'DLoader':
        return 170;

      case 'DockTrailer':
        return 1;

      case 'Docktug':
        return 50;

      case 'Dodo':
        return 1;

      case 'Dominator':
        return 245;

      case 'Dominator2':
        return 245;

      case 'Dominator3':
        return 290;

      case 'Dominator4':
        return 250;

      case 'Dominator5':
        return 250;

      case 'Dominator6':
        return 250;

      case 'Double':
        return 279;

      case 'Dubsta':
        return 213;

      case 'Dubsta2':
        return 223;

      case 'Dubsta3':
        return 220;

      case 'Dukes':
        return 200;

      case 'Dukes2':
        return 200;

      case 'Dump':
        return 70;

      case 'Dune':
        return 160;

      case 'Dune2':
        return 160;

      case 'Dune3':
        return 160;

      case 'Dune4':
        return 160;

      case 'Dune5':
        return 160;

      case 'Duster':
        return 1;

      case 'Elegy':
        return 280;

      case 'Elegy2':
        return 270;

      case 'Ellie':
        return 220;

      case 'Emperor':
        return 160;

      case 'Emperor2':
        return 140;

      case 'Emperor3':
        return 140;

      case 'Enduro':
        return 170;

      case 'Entity2':
        return 350;

      case 'EntityXF':
        return 330;

      case 'Esskey':
        return 220;

      case 'Exemplar':
        return 240;

      case 'F620':
        return 250;

      case 'Faction':
        return 170;

      case 'Faction2':
        return 170;

      case 'Faction3':
        return 160;

      case 'Fagaloa':
        return 150;

      case 'Faggio':
        return 90;

      case 'Faggio2':
        return 90;

      case 'Faggio3':
        return 90;

      case 'FBI':
        return 300;

      case 'FBI2':
        return 290;

      case 'Fcr':
        return 270;

      case 'Fcr2':
        return 270;

      case 'Felon':
        return 230;

      case 'Felon2':
        return 230;

      case 'Feltzer2':
        return 250;

      case 'Feltzer3':
        return 190;

      case 'Fixter':
        return 60;

      case 'FlashGT':
        return 296;

      case 'Flatbed':
        return 170;

      case 'FMJ':
        return 298;

      case 'Forklift':
        return 60;

      case 'FQ2':
        return 200;

      case 'Freecrwaler':
        return 206;

      case 'Frogger':
        return 1;

      case 'Frogger2':
        return 1;

      case 'Fugitive':
        return 250;

      case 'Furoregt':
        return 256;

      case 'Fusilade':
        return 205;

      case 'Futo':
        return 190;

      case 'Gargoyle':
        return 201;

      case 'Gauntlet':
        return 220;

      case 'Gauntlet2':
        return 220;

      case 'GB200':
        return 260;

      case 'GBurrito':
        return 180;

      case 'GBurrito2':
        return 180;

      case 'Glendale':
        return 180;

      case 'GP1':
        return 290;

      case 'GrainTrailer':
        return 1;

      case 'Granger':
        return 190;

      case 'Gresley':
        return 195;

      case 'GT500':
        return 210;

      case 'Guardian':
        return 190;

      case 'Habanero':
        return 190;

      case 'Hakuchou':
        return 290;

      case 'Hakuchou2':
        return 305;

      case 'Halftrack':
        return 120;

      case 'Handler':
        return 40;

      case 'Hauler':
        return 170;

      case 'Havok':
        return 1;

      case 'Hermes':
        return 170;

      case 'Hexer':
        return 210;

      case 'Hotknife':
        return 201;

      case 'Howard':
        return 1;

      case 'Hunter':
        return 1;

      case 'Huntley':
        return 220;

      case 'Hustler':
        return 220;

      case 'Hydra':
        return 1;

      case 'Impaler':
        return 170;

      case 'Impaler2':
        return 170;

      case 'Impaler3':
        return 170;

      case 'Impaler4':
        return 170;

      case 'Imperator':
        return 210;

      case 'Imperator2':
        return 210;

      case 'Imperator3':
        return 210;

      case 'Infernus':
        return 260;

      case 'Infernus2':
        return 240;

      case 'Ingot':
        return 130;

      case 'Innovation':
        return 210;

      case 'Insurgent':
        return 250;

      case 'Insurgent2':
        return 250;

      case 'Insurgent3':
        return 250;

      case 'Intruder':
        return 170;

      case 'Issi2':
        return 150;

      case 'Issi3':
        return 150;

      case 'Issi4':
        return 150;

      case 'Issi5':
        return 150;

      case 'Issi6':
        return 150;

      case 'Italigtb':
        return 286;

      case 'Italigtb2':
        return 286;

      case 'Italigto':
        return 280;

      case 'Jackal':
        return 230;

      case 'JB700':
        return 200;

      case 'Jester':
        return 267;

      case 'Jester2':
        return 267;

      case 'Jester3':
        return 262;

      case 'Jet':
        return 1;

      case 'Jetmax':
        return 1;

      case 'Journey':
        return 150;

      case 'Kalahari':
        return 120;

      case 'Kamacho':
        return 200;

      case 'Khamelion':
        return 230;

      case 'Khanjali':
        return 1;

      case 'Kuruma':
        return 220;

      case 'Landstalker':
        return 180;

      case 'Lazer':
        return 1;

      case 'LE7B':
        return 330;

      case 'Lectro':
        return 260;

      case 'Lguard':
        return 260;

      case 'Lurcher':
        return 200;

      case 'Luxor':
        return 1;

      case 'Luxor2':
        return 1;

      case 'Lynx':
        return 270;

      case 'Mamba':
        return 200;

      case 'Mammatus':
        return 1;

      case 'Manana':
        return 170;

      case 'Manchez':
        return 200;

      case 'Marquis':
        return 1;

      case 'Massacro':
        return 277;

      case 'Massacro2':
        return 280;

      case 'Maverick':
        return 1;

      case 'Menacer':
        return 180;

      case 'Mesa':
        return 200;

      case 'Mesa2':
        return 200;

      case 'Mesa3':
        return 200;

      case 'Michelli':
        return 230;

      case 'Microlight':
        return 1;

      case 'Miljet':
        return 1;

      case 'Minivan':
        return 190;

      case 'Minivan2':
        return 190;

      case 'Mixer':
        return 160;

      case 'Mixer2':
        return 160;

      case 'Mogul':
        return 1;

      case 'Molotok':
        return 1;

      case 'Monroe':
        return 210;

      case 'Monster3':
        return 200;

      case 'Monster4':
        return 200;

      case 'Monster5':
        return 200;

      case 'Moonbeam':
        return 180;

      case 'Moonbeam2':
        return 180;

      case 'Mower':
        return 30;

      case 'Mule':
        return 170;

      case 'Mule2':
        return 170;

      case 'Mule3':
        return 170;

      case 'Mule4':
        return 170;

      case 'Nemesis':
        return 240;

      case 'Neon':
        return 270;

      case 'Nero':
        return 350;

      case 'Nero2':
        return 350;

      case 'Nightblade':
        return 220;

      case 'Nightshade':
        return 220;

      case 'Nightshark':
        return 180;

      case 'Nimbus':
        return 1;

      case 'Ninef':
        return 220;

      case 'Ninef2':
        return 220;

      case 'Nokota':
        return 1;

      case 'Omnis':
        return 230;

      case 'Oppressor':
        return 1;

      case 'Oppressor2':
        return 1;

      case 'Oracle':
        return 220;

      case 'Oracle2':
        return 220;

      case 'Osiris':
        return 331;

      case 'Packer':
        return 170;

      case 'Panto':
        return 150;

      case 'Paradise':
        return 160;

      case 'Pariah':
        return 250;

      case 'Patriot':
        return 180;

      case 'Patriot2':
        return 180;

      case 'PBus':
        return 170;

      case 'PBus2':
        return 170;

      case 'PCJ':
        return 260;

      case 'Penetrator':
        return 290;

      case 'Penumbra':
        return 210;

      case 'Peyote':
        return 140;

      case 'Pfister811':
        return 294;

      case 'Phantom':
        return 170;

      case 'Phantom2':
        return 170;

      case 'Phantom3':
        return 170;

      case 'Phoenix':
        return 210;

      case 'Picador':
        return 160;

      case 'Pigalle':
        return 140;

      case 'Police':
        return 290;

      case 'Police2':
        return 290;

      case 'Police3':
        return 290;

      case 'Police4':
        return 290;

      case 'Policeb':
        return 290;

      case 'PoliceBuffalo':
        return 290;

      case 'PoliceOld1':
        return 290;

      case 'PoliceOld2':
        return 290;

      case 'PoliceT':
        return 250;

      case 'Polmav':
        return 1;

      case 'Pony':
        return 170;

      case 'Pony2':
        return 170;

      case 'Pounder':
        return 170;

      case 'Pounder2':
        return 170;

      case 'Prairie':
        return 160;

      case 'Pranger':
        return 280;

      case 'Predator':
        return 280;

      case 'Premier':
        return 160;

      case 'Primo':
        return 160;

      case 'Primo2':
        return 160;

      case 'PropTrailer':
        return 1;

      case 'Prototipo':
        return 350;

      case 'Pyro':
        return 1;

      case 'Radi':
        return 150;

      case 'Raiden':
        return 240;

      case 'RakeTrailer':
        return 1;

      case 'RancherXL':
        return 170;

      case 'RancherXL2':
        return 170;

      case 'RapidGT':
        return 210;

      case 'RapidGT2':
        return 210;

      case 'RapidGT3':
        return 190;

      case 'Raptor':
        return 170;

      case 'Ratbike':
        return 160;

      case 'RatLoader':
        return 140;

      case 'RatLoader2':
        return 180;

      case 'Rcbandito':
        return 1;

      case 'Reaper':
        return 350;

      case 'Rebel':
        return 140;

      case 'Rebel2':
        return 180;

      case 'Regina':
        return 140;

      case 'RentalBus':
        return 170;

      case 'Retinue':
        return 230;

      case 'Revolter':
        return 230;

      case 'Rhapsody':
        return 150;

      case 'Rhino':
        return 1;

      case 'Riata':
        return 200;

      case 'Riot':
        return 200;

      case 'Riot2':
        return 200;

      case 'Ripley':
        return 60;

      case 'Rocoto':
        return 190;

      case 'Rogue':
        return 1;

      case 'Romero':
        return 170;

      case 'Rubble':
        return 170;

      case 'Ruffian':
        return 260;

      case 'Ruiner':
        return 170;

      case 'Ruiner2':
        return 170;

      case 'Ruiner3':
        return 170;

      case 'Rumpo2':
        return 170;

      case 'Rumpo3':
        return 200;

      case 'Ruston':
        return 207;

      case 'Sabre':
        return 180;

      case 'SabreGT':
        return 190;

      case 'SabreGT2':
        return 190;

      case 'Sadler':
        return 170;

      case 'Sadler2':
        return 170;

      case 'Sanchez':
        return 200;

      case 'Sanchez2':
        return 200;

      case 'Sanctus':
        return 230;

      case 'Sandking':
        return 180;

      case 'Sandking2':
        return 180;

      case 'Savage':
        return 1;

      case 'Savestra':
        return 240;

      case 'SC1':
        return 280;

      case 'Scarab':
        return 170;

      case 'Scarab2':
        return 170;

      case 'Scarab3':
        return 170;

      case 'Schafter2':
        return 210;

      case 'Schafter3':
        return 230;

      case 'Schafter4':
        return 210;

      case 'Schlagen':
        return 304;

      case 'Schwarzer':
        return 250;

      case 'Scorcher':
        return 30;

      case 'Scramjet':
        return 1;

      case 'Scrap':
        return 170;

      case 'Seabreeze':
        return 1;

      case 'Seashark':
        return 1;

      case 'Seashark2':
        return 1;

      case 'Seashark3':
        return 1;

      case 'Seasparrow':
        return 1;

      case 'Seminole':
        return 190;

      case 'Seminole2':
        return 1;

      case 'Sentinel':
        return 200;

      case 'Sentinel2':
        return 200;

      case 'Sentinel3':
        return 200;

      case 'Serrano':
        return 190;

      case 'Seven70':
        return 280;

      case 'Shamal':
        return 1;

      case 'Sheava':
        return 280;

      case 'Sheriff':
        return 290;

      case 'Sheriff2':
        return 290;

      case 'Shotaro':
        return 310;

      case 'SlamVan':
        return 200;

      case 'SlamVan2':
        return 215;

      case 'SlamVan3':
        return 220;

      case 'SlamVan4':
        return 220;

      case 'SlamVan5':
        return 220;

      case 'SlamVan6':
        return 220;

      case 'Smuggler':
        return 200;

      case 'Sovereign':
        return 250;

      case 'Specter':
        return 285;

      case 'Specter2':
        return 310;

      case 'Speeder':
        return 1;

      case 'Speeder2':
        return 1;

      case 'Speedo2':
        return 170;

      case 'Speedo4':
        return 170;

      case 'Squalo':
        return 1;

      case 'Stafford':
        return 130;

      case 'Stalion':
        return 175;

      case 'Stalion2':
        return 175;

      case 'Stanier':
        return 180;

      case 'Starling':
        return 1;

      case 'Stinger':
        return 200;

      case 'StingerGT':
        return 210;

      case 'Stockade':
        return 170;

      case 'Stockade3':
        return 170;

      case 'Stratum':
        return 170;

      case 'Streiter':
        return 230;

      case 'Stretch':
        return 170;

      case 'Strikeforce':
        return 1;

      case 'Stromberg':
        return 240;

      case 'Stunt':
        return 1;

      case 'Submersible':
        return 1;

      case 'Submersible2':
        return 1;

      case 'Sultan':
        return 221;

      case 'SultanRS':
        return 281;

      case 'Suntrap':
        return 1;

      case 'Superd':
        return 200;

      case 'Supervolito':
        return 1;

      case 'Supervolito2':
        return 1;

      case 'Surano':
        return 240;

      case 'Surfer':
        return 170;

      case 'Surfer2':
        return 170;

      case 'Surge':
        return 170;

      case 'Swift':
        return 1;

      case 'Swift2':
        return 1;

      case 'Swinger':
        return 210;

      case 'T20':
        return 345;

      case 'Taco':
        return 160;

      case 'Tailgater':
        return 225;

      case 'Taipan':
        return 335;

      case 'Tampa':
        return 210;

      case 'Tampa2':
        return 270;

      case 'Tampa3':
        return 200;

      case 'Tanker':
        return 1;

      case 'Tanker2':
        return 1;

      case 'Taxi':
        return 186;

      case 'Technical':
        return 200;

      case 'Technical2':
        return 200;

      case 'Technical3':
        return 200;

      case 'Tempesta':
        return 290;

      case 'Terbyte':
        return 150;

      case 'Tezeract':
        return 350;

      case 'Thrust':
        return 240;

      case 'Thruster':
        return 1;

      case 'TipTruck':
        return 170;

      case 'TipTruck2':
        return 170;

      case 'Titan':
        return 1;

      case 'Torero':
        return 267;

      case 'Tornado':
        return 180;

      case 'Tornado2':
        return 180;

      case 'Tornado3':
        return 170;

      case 'Tornado4':
        return 170;

      case 'Tornado5':
        return 180;

      case 'Tornado6':
        return 250;

      case 'Toro':
        return 1;

      case 'Toro2':
        return 1;

      case 'Toros':
        return 280;

      case 'Tourbus':
        return 170;

      case 'TowTruck':
        return 1;

      case 'TowTruck2':
        return 1;

      case 'Tractor':
        return 70;

      case 'Tractor2':
        return 70;

      case 'Tractor3':
        return 70;

      case 'Trash':
        return 120;

      case 'Trash2':
        return 120;

      case 'TriBike':
        return 50;

      case 'TriBike2':
        return 50;

      case 'TriBike3':
        return 50;

      case 'TrophyTruck':
        return 230;

      case 'TrophyTruck2':
        return 230;

      case 'Tropic':
        return 1;

      case 'Tropic2':
        return 1;

      case 'Tropos':
        return 288;

      case 'Tula':
        return 1;

      case 'Tulip':
        return 170;

      case 'Turismo2':
        return 285;

      case 'Turismor':
        return 340;

      case 'Tyrant':
        return 330;

      case 'Tyrus':
        return 330;

      case 'Vacca':
        return 300;

      case 'Vader':
        return 260;

      case 'Vagner':
        return 340;

      case 'Vamos':
        return 170;

      case 'Velum':
        return 1;

      case 'Velum2':
        return 1;

      case 'Verlierer2':
        return 240;

      case 'Vestra':
        return 1;

      case 'Vigero':
        return 180;

      case 'Vigilante':
        return 1;

      case 'Vindicator':
        return 240;

      case 'Virgo':
        return 170;

      case 'Virgo2':
        return 170;

      case 'Virgo3':
        return 170;

      case 'Viseris':
        return 250;

      case 'Visione':
        return 1;

      case 'Voltic':
        return 260;

      case 'Voodoo':
        return 170;

      case 'Voodoo2':
        return 160;

      case 'Vortex':
        return 285;

      case 'Warrener':
        return 210;

      case 'Washington':
        return 190;

      case 'Windsor':
        return 211;

      case 'Windsor2':
        return 211;

      case 'Wolfsbane':
        return 211;

      case 'XA21':
        return 330;

      case 'XLS':
        return 200;

      case 'Yosemite':
        return 220;

      case 'Youga':
        return 185;

      case 'Youga2':
        return 185;

      case 'Z190':
        return 190;

      case 'Zentorno':
        return 349;

      case 'Zion':
        return 230;

      case 'Zion2':
        return 230;

      case 'Zombiea':
        return 220;

      case 'Zombieb':
        return 220;

      case 'ZType':
        return 210;

      case 'Caracara2':
        return 240;

      case 'Dynasty':
        return 150;

      case 'Emerus':
        return 345;

      case 'Hellion':
        return 166;

      case 'Krieger':
        return 350;

      case 'Loсust':
        return 280;

      case 'Nebula':
        return 150;

      case 'Neo':
        return 330;

      case 'Rrocket':
        return 250;

      case 'S80':
        return 340;

      case 'Thrax':
        return 370;

      case 'Zion3':
        return 210;

      case 'Drafter':
        return 298;

      case 'Gauntlet3':
        return 240;

      case 'Gauntlet4':
        return 298;

      case 'Issi7':
        return 250;

      case 'Jugular':
        return 290;

      case 'Paragon':
        return 280;

      case 'Paragon2':
        return 260;

      case 'Peyote2':
        return 280;

      case 'Zorrusso':
        return 320;

      case 'Novak':
        return 270;

      case 'Deluxo':
        return 240;
    }

    return 1;
  },
  spawnJobCar: (x, y, z, heading, name, job) => {
    _user.user.setWaypoint(x, y);

    mp.game.ui.notifications.show('Нажмите ~g~2~s~ рядом с ТС, чтобы его открыть');
    mp.game.ui.notifications.show('Транспорт стоит на парковке');
    mp.events.callRemote('server:vehicles:spawnJobCar', x, y, z, heading, name, job);
  },
  findVehicleByNumber: number => {
    _methods.methods.debug('vehicles.findVehicleByNumber');

    let returnVehicle = null;

    try {
      mp.vehicles.forEach(vehicle => {
        if (!mp.vehicles.exists(vehicle)) return;
        if (vehicle.numberPlate == number) returnVehicle = vehicle;
      });
    } catch (e) {
      _methods.methods.debug(e);
    }

    return returnVehicle;
  }
};
exports.vehicles = vehicles;
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "vehicle") return;
  if (entity.getVariable('engine')) entity.setEngineOn(true, true, false);else entity.setEngineOn(false, true, false);
  entity.setUndriveable(entity.getVariable('engine') ? false : true);
});
mp.events.addDataHandler("engine", (entity, value) => {
  if (!value) entity.setEngineOn(false, true, false);else entity.setEngineOn(true, true, false);
  entity.setUndriveable(value ? false : true);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "vehicle") return;
  if (entity.getVariable('freezePosition')) entity.freezePosition(true);
});
mp.events.addDataHandler("freezePosition", (entity, value) => {
  if (!value) entity.freezePosition(false);else entity.freezePosition(true);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "vehicle") return;
  if (entity.getVariable('anchor')) mp.game.invoke('0x75DBEC174AEEAD10', entity.handle, true);
});
mp.events.addDataHandler("anchor", (entity, value) => {
  if (!value) mp.game.invoke('0x75DBEC174AEEAD10', entity.handle, false);else mp.game.invoke('0x75DBEC174AEEAD10', entity.handle, true);
});
setInterval(() => {
  if (!mp.players.local.vehicle) return;
  if (!mp.players.local.vehicle.remoteId) return;
  if (_auth.registerDrawNow) return;
  if (_autosalon.testDriveMode) return;
  const vehicle = mp.players.local.vehicle;
  if (vehicle.getVariable('engine')) vehicle.setEngineOn(true, true, true);else vehicle.setEngineOn(false, true, true);
  vehicle.setUndriveable(vehicle.getVariable('engine') ? false : true);
}, 700);
setTimeout(() => {
  mp.events.register('getGround', () => {
    return mp.game.gameplay.getGroundZFor3dCoord(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, 0.0, false);
  });
}, 1000);
},{"./modules/methods":"qXSp","./user":"QE3B","./modules/data":"Edcz","./auth":"yieC","./business/autosalon":"V6sO"}],"waLt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vSync = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _vehicles = require("../vehicles");

var _newrage = require("../../util/newrage");

let trailerHeal = 1000;
let radioInterval = null;
let currentSound;
let vSync = {
  updateValues: entity => {
    if (_newrage.RAGE_BETA) return;

    if (entity && mp.vehicles.exists(entity)) {
      let typeor = typeof entity.getVariable('vehicleSyncData');
      let actualData = entity.getVariable('vehicleSyncData');

      if (typeor !== 'undefined') {
        if (_vehicles.vehicles.isVehicleSirenValid(entity.model)) {
          entity.setSirenSound(true);
          entity.setSiren(false);
          let vehId = entity.remoteId;

          if (actualData.SirenState == 0) {
            entity.setSiren(false);
            vSync.stopSound(vehId, 'srn');
          } else if (actualData.SirenState == 1) {
            entity.setSiren(true);
            vSync.stopSound(vehId, 'srn');
          } else if (actualData.SirenState > 1 && actualData.SirenState < 5) {
            entity.setSiren(true);
            vSync.playSound(vehId, 'srn', _vehicles.vehicles.getSirenSound(entity.model, actualData.SirenState));
          }
        }

        entity.setDirtLevel(actualData.Dirt);
        entity.setIndicatorLights(1, actualData.IndicatorLeftToggle);
        entity.setIndicatorLights(0, actualData.IndicatorRightToggle);
        if (typeof entity.setInteriorLight == "function") entity.setInteriorLight(actualData.InteriorLight);
        entity.setTaxiLights(actualData.TaxiLight);
      } else {}
    }
  },
  playSound: (vehId, prefix, name) => {
    try {
      let veh = mp.vehicles.atRemoteId(vehId);

      if (veh !== undefined && mp.vehicles.exists(veh)) {
        if (_vehicles.vehicles.has(veh.remoteId, prefix + 'currentSound')) {
          let sId = _vehicles.vehicles.get(veh.remoteId, prefix + 'currentSound');

          mp.game.audio.stopSound(sId);
          mp.game.audio.releaseSoundId(sId);

          _vehicles.vehicles.reset(veh.remoteId, prefix + 'currentSound');
        }

        let sId = mp.game.invoke(_methods.methods.GET_SOUND_ID);
        mp.game.invoke(_methods.methods.PLAY_SOUND_FROM_ENTITY, sId, name, veh.handle, 0, 0, 0);

        _vehicles.vehicles.set(veh.remoteId, prefix + 'currentSound', sId);
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  stopSound: (vehId, prefix) => {
    try {
      let veh = mp.vehicles.atRemoteId(vehId);

      if (veh !== undefined && mp.vehicles.exists(veh)) {
        if (_vehicles.vehicles.has(veh.remoteId, prefix + 'currentSound')) {
          let sId = _vehicles.vehicles.get(veh.remoteId, prefix + 'currentSound');

          mp.game.audio.stopSound(sId);
          mp.game.audio.releaseSoundId(sId);

          _vehicles.vehicles.reset(veh.remoteId, prefix + 'currentSound');
        }
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  syncToServer: entity => {
    if (_newrage.RAGE_BETA) return;

    try {
      if (entity === undefined) {
        if (!mp.players.local.vehicle) return;
        entity = mp.players.local.vehicle;
        if (entity.getPedInSeat(-1) != mp.players.local.handle) return;
      }

      let typeor = typeof entity.getVariable('vehicleSyncData');
      let actualData = entity.getVariable('vehicleSyncData');
      let trailerId = entity.getVariable('trailer');

      if (trailerId) {
        let trailer = mp.vehicles.atRemoteId(trailerId);

        if (mp.vehicles.exists(trailer)) {
          if (_methods.methods.parseInt(trailerHeal) != _methods.methods.parseInt(trailer.getBodyHealth())) {
            trailerHeal = _methods.methods.parseInt(trailer.getBodyHealth());
            mp.events.callRemote('s:vSync:setBodyHealth', trailer, trailerHeal);
          }
        }
      }

      if (typeor !== 'undefined') {
        var Status = [];
        let dirtLevel = entity.getDirtLevel();
        if (_methods.methods.parseInt(actualData.Dirt) != _methods.methods.parseInt(dirtLevel)) mp.events.callRemote('s:vSync:setDirtLevel', entity, dirtLevel);
      }
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
};
exports.vSync = vSync;
mp.events.add('vSync:playerExitVehicle', vehId => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      vSync.syncToServer(veh);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:playSound', (vehId, prefix, name) => {
  vSync.playSound(vehId, prefix, name);
});
mp.events.add('vSync:stopSound', (vehId, prefix) => {
  vSync.stopSound(vehId, prefix);
});
mp.events.add('vSync:setVehicleWindowStatus', (vehId, windw, state) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      if (state === 1) {
        veh.rollDownWindow(windw);
      } else if (state === 0) {
        veh.fixWindow(windw);
        veh.rollUpWindow(windw);
      } else {
        veh.smashWindow(windw);
      }
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
setInterval(() => {
  if (_newrage.RAGE_BETA) return;
  const veh = mp.players.local.vehicle;
  if (!veh) return;
  let currentRadio = mp.game.invoke(_methods.methods.GET_PLAYER_RADIO_STATION_INDEX);
  let vehRadio = veh.getVariable('radioStation');

  if (veh.getPedInSeat(-1) == mp.players.local.handle) {
    if (currentRadio != vehRadio) mp.events.callRemote('vehicleRadio', currentRadio);
  } else {
    if (!vehRadio || vehRadio == 255) {
      mp.game.audio.setRadioToStationName("OFF");
    } else if (vehRadio) {
      mp.game.invoke(_methods.methods.SET_FRONTEND_RADIO_ACTIVE, true);
      mp.game.invoke(_methods.methods.SET_RADIO_TO_STATION_INDEX, vehRadio);
    }
  }
}, 500);
mp.events.add('vSync:setVehicleWheelStatus', (vehId, wheel, state) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      if (wheel === 9) {
        if (state === 1) {
          veh.setTyreBurst(45, false, 1000);
        } else if (state === 0) {
          veh.setTyreFixed(45);
        } else {
          veh.setTyreBurst(45, true, 1000);
        }
      } else if (wheel === 10) {
        if (state === 1) {
          veh.setTyreBurst(47, false, 1000);
        } else if (state === 0) {
          veh.setTyreFixed(47);
        } else {
          veh.setTyreBurst(47, true, 1000);
        }
      } else {
        if (state === 1) {
          veh.setTyreBurst(wheel, false, 1000);
        } else if (state === 0) {
          veh.setTyreFixed(wheel);
        } else {
          veh.setTyreBurst(wheel, true, 1000);
        }
      }
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setVehicleDirt', (vehId, dirt) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      veh.setDirtLevel(dirt);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setVehicleDoorState', (vehId, door, state) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      if (state === 0) veh.setDoorShut(door, false);else if (state === 1) veh.setDoorOpen(door, false, false);else veh.setDoorBroken(door, true);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setEngineState', (vehId, status) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {}
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setInteriorLightState', (vehId, status) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      veh.setInteriorLight(status);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setTaxiLightState', (vehId, status) => {
  if (_newrage.RAGE_BETA) return;

  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      veh.setTaxiLights(status);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setIndicatorRightToggle', (vehId, status) => {
  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      veh.setIndicatorLights(0, status);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setIndicatorLeftToggle', (vehId, status) => {
  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      veh.setIndicatorLights(1, status);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setLockStatus', (vehId, status) => {
  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      if (status) {
        mp.game.audio.playSoundFromEntity(1, 'Remote_Control_Close', veh.handle, 'PI_Menu_Sounds', true, 0);
      } else {
        mp.game.audio.playSoundFromEntity(1, 'Remote_Control_Open', veh.handle, 'PI_Menu_Sounds', true, 0);
      }
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('vSync:setSirenState', (vehId, state) => {
  try {
    let veh = mp.vehicles.atRemoteId(vehId);

    if (veh !== undefined && mp.vehicles.exists(veh)) {
      if (_vehicles.vehicles.isVehicleSirenValid(veh.model)) {
        veh.setSirenSound(true);

        if (state == 0) {
          veh.setSiren(false);
          vSync.stopSound(vehId, 'srn');
        } else if (state == 1) {
          veh.setSiren(true);
          vSync.stopSound(vehId, 'srn');
        } else if (state > 1 && state < 5) {
          vSync.playSound(vehId, 'srn', _vehicles.vehicles.getSirenSound(veh.model, state));
        }
      }
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('playerEnterVehicle', (entity, seat) => {
  if (entity !== undefined && mp.vehicles.exists(entity)) {
    vSync.updateValues(entity);
  }
});
mp.events.add('playerLeaveVehicle', entity => {
  mp.events.callRemote('s:vSync:stopSound', entity, 'wrng');
});
mp.keys.bind(0x45, true, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    mp.events.callRemote('s:vSync:playSound', veh, 'wrng', _vehicles.vehicles.getWarningSound(mp.players.local.vehicle.model));
  }
});
mp.keys.bind(0x45, false, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    mp.events.callRemote('s:vSync:stopSound', veh, 'wrng');
  }
});
mp.keys.bind(0x51, true, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    let typeor = typeof veh.getVariable('vehicleSyncData');
    let actualData = veh.getVariable('vehicleSyncData');

    if (typeor !== 'undefined') {
      if (actualData.SirenState == 0) {
        mp.game.audio.playSound(-1, 'NAV_LEFT_RIGHT', 'HUD_FRONTEND_DEFAULT_SOUNDSET', false, 0, true);
        mp.events.callRemote('s:vSync:setSirenState', veh, 1);
      } else {
        mp.game.audio.playSound(-1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', false, 0, true);
        mp.events.callRemote('s:vSync:setSirenState', veh, 0);
      }
    }
  }
});
mp.keys.bind(0xbc, true, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    let typeor = typeof veh.getVariable('vehicleSyncData');
    let actualData = veh.getVariable('vehicleSyncData');

    if (typeor !== 'undefined') {
      if (actualData.SirenState > 0) {
        let currentState = actualData.SirenState;
        currentState--;
        if (currentState < 1) currentState = 4;
        mp.game.audio.playSound(-1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', false, 0, true);
        mp.events.callRemote('s:vSync:setSirenState', veh, currentState);
      }
    }
  }
});
mp.keys.bind(0xbe, true, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    let typeor = typeof veh.getVariable('vehicleSyncData');
    let actualData = veh.getVariable('vehicleSyncData');

    if (typeor !== 'undefined') {
      if (actualData.SirenState > 0) {
        let currentState = actualData.SirenState;
        currentState++;
        if (currentState > 4) currentState = 1;
        mp.game.audio.playSound(-1, 'NAV_UP_DOWN', 'HUD_FRONTEND_DEFAULT_SOUNDSET', false, 0, true);
        mp.events.callRemote('s:vSync:setSirenState', veh, currentState);
      } else {
        mp.events.callRemote('s:vSync:playSound', veh, 'srn', _vehicles.vehicles.getSirenSound(mp.players.local.vehicle.model, 2));
      }
    }
  }
});
mp.keys.bind(0xbe, false, function () {
  if (!_user.user.isLogin()) return;
  let veh = mp.players.local.vehicle;

  if (!_methods.methods.isBlockKeys() && veh && _vehicles.vehicles.isVehicleSirenValid(veh.model)) {
    let typeor = typeof veh.getVariable('vehicleSyncData');
    let actualData = veh.getVariable('vehicleSyncData');

    if (typeor !== 'undefined') {
      if (actualData.SirenState == 0) {
        mp.events.callRemote('s:vSync:stopSound', veh, 'srn');
      }
    }
  }
});
mp.events.add('entityStreamIn', entity => {
  try {
    if (entity.type === 'vehicle') {
      if (!mp.vehicles.exists(entity)) return;
      entity.trackVisibility();
      entity.setTyresCanBurst(true);
      vSync.updateValues(entity);
    }
  } catch (e) {
    _methods.methods.debug(e);
  }
});
},{"../modules/methods":"qXSp","../user":"QE3B","../vehicles":"pYYy","../../util/newrage":"mgLX"}],"BpKR":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timer = void 0;

var _user = require("../user");

var _weather = require("../managers/weather");

var _methods = require("./methods");

var _weapons = require("../weapons");

var _vehicles = require("../vehicles");

var _data = require("./data");

var _ui = require("./ui");

var _vSync = require("../managers/vSync");

var _inventory = require("../inventory");

var _enums = require("../enums");

var _dispatcher = require("../managers/dispatcher");

var _gui = require("./gui");

let EntityFleeca = 0;
let EntityOther1 = 0;
let EntityOther2 = 0;
let EntityOther3 = 0;
let isDisableControl = false;
let allModelLoader = false;
let allVehiclesLoader = false;
let deathTimer = 0;
let prevPos = new mp.Vector3(0, 0, 0);
let prevWpPos = new mp.Vector3(0, 0, 0);
let timer = {
  setDeathTimer: sec => {
    deathTimer = sec;
    if (sec > 0) _ui.ui.showDeathTimer();else _ui.ui.hideDeathTimer();
  },
  getDeathTimer: () => {
    return deathTimer;
  },
  twoMinTimer: () => {
    _methods.methods.showHelpNotify();

    let veh = mp.players.local.vehicle;

    if (veh && mp.vehicles.exists(veh) && veh.getClass() == 18 && !_user.user.isGos()) {
      if (veh.getPedInSeat(-1) == mp.players.local.handle) {
        _user.user.giveWanted(10, 'Угон служебного ТС');

        _dispatcher.dispatcher.send(`Код 0`, `Неизвестный угнал служебный транспорт`);
      }
    }

    setTimeout(timer.twoMinTimer, 1000 * 60 * 2);
    return;
  },
  oneMinTimer: () => {},
  min15Timer: () => {
    _user.user.saveAccount();

    setTimeout(timer.min15Timer, 1000 * 60 * 16);
  },
  ms300Timer: () => {
    _gui.gui.updateHud();

    isDisableControl = _vehicles.vehicles.checkerControl();

    if (_data.Container.HasLocally(0, 'hasSeat')) {
      mp.players.local.freezePosition(true);
      mp.players.local.setCollision(false, false);
    }

    setTimeout(timer.ms300Timer, 300);
  },
  twoSecTimer: () => {
    if (_user.user.isLogin()) _inventory.inventory.updateInfo(_user.user.get('rp_name'), _user.user.getLevel(), ``);
    let plPos = mp.players.local.position;
    EntityFleeca = mp.game.object.getClosestObjectOfType(plPos.x, plPos.y, plPos.z, 0.68, 506770882, false, false, false);
    EntityOther1 = mp.game.object.getClosestObjectOfType(plPos.x, plPos.y, plPos.z, 0.68, -1126237515, false, false, false);
    EntityOther2 = mp.game.object.getClosestObjectOfType(plPos.x, plPos.y, plPos.z, 0.68, -1364697528, false, false, false);
    EntityOther3 = mp.game.object.getClosestObjectOfType(plPos.x, plPos.y, plPos.z, 0.68, -870868698, false, false, false);
    if ((EntityFleeca != 0 || EntityOther1 != 0 || EntityOther2 != 0 || EntityOther3 != 0) && !mp.gui.cursor.visible) mp.game.ui.notifications.show('Нажмите ~g~E~s~ чтобы открыть меню банкомата');
    setTimeout(timer.twoSecTimer, 2000);
  },
  allModelLoader: () => {
    allModelLoader = !allModelLoader;
    if (allModelLoader) mp.game.ui.notifications.show('Прогрузка моделей ~g~включена');else mp.game.ui.notifications.show('Прогрузка моделей ~r~выключена');
  },
  allVehiclesLoader: () => {
    allVehiclesLoader = !allVehiclesLoader;
    if (allVehiclesLoader) mp.game.ui.notifications.show('Прогрузка моделей транспорта ~g~включена');else mp.game.ui.notifications.show('Прогрузка моделей транспорта ~r~выключена');
  },
  tenSecTimer: () => {
    if (_user.user.isLogin()) _vSync.vSync.syncToServer();

    if (allModelLoader) {
      try {
        mp.game.invoke('0xBD6E84632DD4CB3F');
      } catch (e) {
        _methods.methods.debug(e);
      }
    }

    if (allVehiclesLoader) {
      let vehInfo = _enums.enums.get('vehicleInfo');

      for (let item in vehInfo) {
        try {
          let vItem = vehInfo[item];
          mp.game.streaming.requestModel(mp.game.joaat(vItem.display_name.toString().toLowerCase()));
        } catch (e) {
          _methods.methods.debug(e);
        }
      }
    }

    _weapons.weapons.hashesMap.forEach(item => {
      let hash = item[1] / 2;

      if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) {
        if (_data.Container.HasLocally(0, hash.toString())) {
          _data.Container.ResetLocally(0, hash.toString());

          _data.Container.Reset(mp.players.local.remoteId, hash.toString());
        }
      }
    });

    setTimeout(timer.tenSecTimer, 10000);
  },
  secTimer: () => {
    if (deathTimer > 0) {
      deathTimer--;

      _ui.ui.updateDeathTimer(deathTimer);

      if (deathTimer == 0) {
        _user.user.showLoadDisplay(500);

        timer.setDeathTimer(0);
        let hospPos = new mp.Vector3(294.3142, -1350.633, 23.53781);
        mp.players.local.clearBloodDamage();
        mp.players.local.freezePosition(false);
        if (!_user.user.isGos()) _user.user.removeAllWeapons();else if ((_weather.weather.getHour() > 20 || _weather.weather.getHour() < 6) && _user.user.isGos()) _user.user.removeAllWeapons();
        if (_user.user.isSheriff()) _user.user.respawn(-242.5556, 6326.2358, 31.4261);else _user.user.respawn(288.61148, -1345.5358, 23.5378017);

        _user.user.setVirtualWorld(0);

        mp.game.ui.displayRadar(true);
        mp.game.ui.displayHud(true);

        if (_user.user.get('jail_time') == 0) {
          if (!_user.user.isSheriff() && !_user.user.isAdmin()) {
            if (_user.user.get('med_lic')) _user.user.setData('med_time', 200);else _user.user.setData('med_time', 500);
          }
        }

        mp.events.callRemote('playerDeathDone');

        _user.user.setGrabMoney(0);

        _user.user.unCuff();

        _user.user.unTie();

        setTimeout(function () {
          _user.user.hideLoadDisplay();
        }, 1000);
      }

      if (!_user.user.isDead()) timer.setDeathTimer(0);
    }

    let drugId = 0;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (!mp.game.graphics.getScreenEffectIsActive('DrugsMichaelAliensFightIn')) mp.game.graphics.startScreenEffect('DrugsMichaelAliensFightIn', 0, true);
      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('DrugsMichaelAliensFightIn');
        mp.game.graphics.startScreenEffect('DrugsMichaelAliensFightOut', 0, false);
        setTimeout(function () {
          mp.game.graphics.stopScreenEffect('DrugsMichaelAliensFightOut');
        }, 10000);
      }
    }

    drugId = 1;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (!mp.game.graphics.getScreenEffectIsActive('DrugsTrevorClownsFightIn')) mp.game.graphics.startScreenEffect('DrugsTrevorClownsFightIn', 0, true);
      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('DrugsTrevorClownsFightIn');
        mp.game.graphics.startScreenEffect('DrugsTrevorClownsFightOut', 0, false);
        setTimeout(function () {
          mp.game.graphics.stopScreenEffect('DrugsTrevorClownsFightOut');
        }, 10000);
      }
    }

    drugId = 2;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);
      if (!mp.game.graphics.getScreenEffectIsActive('DMT_flight')) mp.game.graphics.startScreenEffect('DMT_flight', 0, true);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('DMT_flight');
      }
    }

    drugId = 3;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);
      if (!mp.game.graphics.getScreenEffectIsActive('Rampage')) mp.game.graphics.startScreenEffect('Rampage', 0, true);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('Rampage');
      }
    }

    drugId = 4;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (!mp.game.graphics.getScreenEffectIsActive('DrugsDrivingIn')) mp.game.graphics.startScreenEffect('DrugsDrivingIn', 0, true);
      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('DrugsDrivingIn');
        mp.game.graphics.startScreenEffect('DrugsDrivingOut', 0, false);
        setTimeout(function () {
          mp.game.graphics.stopScreenEffect('DrugsDrivingOut');
        }, 10000);
      }
    }

    drugId = 5;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (!mp.game.graphics.getScreenEffectIsActive('PeyoteEndIn')) mp.game.graphics.startScreenEffect('PeyoteEndIn', 0, true);
      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('PeyoteEndIn');
        mp.game.graphics.startScreenEffect('PeyoteEndOut', 0, false);
        setTimeout(function () {
          mp.game.graphics.stopScreenEffect('PeyoteEndOut');
        }, 10000);
      }
    }

    drugId = 99;

    if (_user.user.getDrugLevel(drugId) > 0) {
      _user.user.removeDrugLevel(drugId, 1);

      if (_user.user.getDrugLevel(drugId) > 210) {
        mp.gui.chat.push(`!{03A9F4}Вы в коме от передозировки`);

        _user.user.setHeal(0);
      }

      if (_user.user.isDead()) _user.user.setDrugLevel(drugId, 0);
      if (!mp.game.graphics.getScreenEffectIsActive('ChopVision')) mp.game.graphics.startScreenEffect('ChopVision', 0, true);

      if (_user.user.getDrugLevel(drugId) < 1) {
        mp.game.graphics.stopScreenEffect('ChopVision');
      }
    }

    if (_user.user.has('id')) {
      if (_user.user.currentId - 1000000 != _user.user.get('id')) {
        mp.gui.chat.push(`!{03A9F4}Ой, ну зря ты попытался сменить ID. Логи были отправлены администрации, ВАМ БАН!`);

        _user.user.kickAntiCheat(`Cheat Engine`);

        _methods.methods.saveLog('CheatEngine', `${_user.user.get('rp_name')} (${_user.user.get('id')}) try change ID`);

        return;
      }
    }

    if (_user.user.get('money') < -15000 || _user.user.get('money_bank') < -15000) {
      _user.user.kick(`Anti-Cheat System: Пожалуйста, свяжитесь с администрацией`);

      _methods.methods.saveLog('CheaterMoney', `${_user.user.get('rp_name')} (${_user.user.get('id')})`);

      return;
    }

    let wpPos = _methods.methods.getWaypointPosition();

    if (mp.players.local.vehicle && wpPos.x != 0 && wpPos.y != 0) {
      if (prevWpPos.x != wpPos.x && prevWpPos.y != wpPos.y) mp.events.callRemote('server:changeWaypointPos', wpPos.x, wpPos.y);
    }

    prevWpPos = wpPos;

    try {
      let time = _weather.weather.getFullRpDateTime().split('|');

      mp.events.call('client:phone:updateValues', _weather.weather.getCurrentDayName(), time[1], time[0], _weather.weather.getWeatherTemp(), _user.user.get('phone_code'), _user.user.get('bank_prefix'), 100);
    } catch (e) {
      _methods.methods.debug(e);
    }

    setTimeout(timer.secTimer, 1000);
  },
  loadAll: () => {
    timer.min15Timer();
    timer.twoMinTimer();
    timer.oneMinTimer();
    timer.twoSecTimer();
    timer.tenSecTimer();
    timer.secTimer();
    timer.ms300Timer();
  },
  isFleecaAtm: () => {
    return _user.user.get('bank_prefix') == 2222 && EntityFleeca != 0;
  },
  isOtherAtm: () => {
    return _user.user.get('bank_prefix') > 0 && (EntityOther1 != 0 || EntityOther2 != 0 || EntityOther3 != 0);
  }
};
exports.timer = timer;
mp.events.add('render', () => {
  if (isDisableControl) {
    mp.game.controls.disableControlAction(0, 21, true);
    mp.game.controls.disableControlAction(0, 24, true);
    mp.game.controls.disableControlAction(0, 25, true);
    mp.game.controls.disableControlAction(0, 47, true);
    mp.game.controls.disableControlAction(0, 58, true);
    mp.game.controls.disableControlAction(0, 263, true);
    mp.game.controls.disableControlAction(0, 264, true);
    mp.game.controls.disableControlAction(0, 257, true);
    mp.game.controls.disableControlAction(0, 140, true);
    mp.game.controls.disableControlAction(0, 141, true);
    mp.game.controls.disableControlAction(0, 142, true);
    mp.game.controls.disableControlAction(0, 143, true);
    mp.game.controls.disableControlAction(0, 32, true);
    mp.game.controls.disableControlAction(0, 34, true);
    mp.game.controls.disableControlAction(0, 33, true);
    mp.game.controls.disableControlAction(0, 35, true);
    mp.game.controls.disableControlAction(0, 59, true);
    mp.game.controls.disableControlAction(0, 60, true);
  }
});
},{"../user":"QE3B","../managers/weather":"uehX","./methods":"qXSp","../weapons":"YeMF","../vehicles":"pYYy","./data":"Edcz","./ui":"zOnK","../managers/vSync":"waLt","../inventory":"m5ow","../enums":"ZRYf","../managers/dispatcher":"bsac","./gui":"bk91"}],"MdNj":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stock = void 0;

var _user = require("./user");

var _data = require("./modules/data");

var _methods = require("./modules/methods");

let stock = {
  pcPos: new mp.Vector3(1088.792, -3101.406, -39.96338),
  stockPos: new mp.Vector3(1095.231, -3098.371, -39.99991),
  exitPos: new mp.Vector3(1104.422, -3099.484, -39.99992),
  enter: id => {
    _user.user.setVirtualWorld(id + 5100000);

    _user.user.teleport(1104.422, -3099.484, -39.99992);
  },
  exit: (x, y, z) => {
    _user.user.setVirtualWorld(0);

    _user.user.teleport(x, y, z);
  },
  buy: id => {
    if (_user.user.getCacheData().get('stock_id') > 0) {
      mp.game.ui.notifications.show('~r~У Вас уже есть склад');
      return false;
    }

    mp.events.callRemote('server:stock:buy', id);
    return true;
  },
  getData: async id => {
    return await _data.Container.GetAll(400000 + _methods.methods.parseInt(id));
  },
  updatePin1: (id, pin) => {
    mp.events.callRemote('server:stock:updatePin1', id, pin);
  },
  updatePin2: (id, pin) => {
    mp.events.callRemote('server:stock:updatePin2', id, pin);
  },
  updatePin3: (id, pin) => {
    mp.events.callRemote('server:stock:updatePin3', id, pin);
  },
  addLog: (name, text, stockId) => {
    mp.events.callRemote('server:stock:addLog', name, text, stockId);
  }
};
exports.stock = stock;
},{"./user":"QE3B","./modules/data":"Edcz","./modules/methods":"qXSp"}],"MuUD":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chat = void 0;
const chat = {
  clRed: '#f44336',
  clBlue: '#2196F3',
  clOrange: '#FFC107',
  clWhite: '#FFFFFF',
  clBlack: '#000000',
  sendMeCommand: text => {
    mp.events.callRemote('server:chat:sendMeCommand', text);
  }
};
exports.chat = chat;
},{}],"YoDO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.condo = void 0;

var _user = require("./user");

var _data = require("./modules/data");

var _methods = require("./modules/methods");

let condo = {
  enter: (id, x, y, z) => {
    _user.user.setVirtualWorld(id + 5000000);

    _user.user.teleport(x, y, z);
  },
  exit: (x, y, z) => {
    _user.user.setVirtualWorld(0);

    _user.user.teleport(x, y, z);
  },
  getData: async id => {
    return await _data.Container.GetAll(300000 + _methods.methods.parseInt(id));
  },
  buy: id => {
    if (_user.user.getCacheData().get('condo_id') > 0) {
      mp.game.ui.notifications.show('~r~У Вас уже есть дом');
      return false;
    }

    mp.events.callSocket('server:condo:buy', id);
    return true;
  },
  updatePin: (id, pin) => {
    mp.events.callSocket('server:condo:updatePin', id, pin);
  }
};
exports.condo = condo;
},{"./user":"QE3B","./modules/data":"Edcz","./modules/methods":"qXSp"}],"AmGY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jobPoint = void 0;

var _ui = require("../modules/ui");

var _methods = require("../modules/methods");

let _checkpoint = null;
let _marker = null;
let _blip = null;

let _lastPos = new mp.Vector3(0, 0, 0);

let _deleteWhenNear = false;
const player = mp.players.local;
setInterval(() => {
  if (!_deleteWhenNear) return;
  let pos = player.position;

  if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, _marker.position.x, _marker.position.y, _marker.position.z, true) < 10) {
    jobPoint.delete();
  }
}, 1000);
let jobPoint = {
  create: (pickupPos, route = false, radius = 1, deleteWhenNear = false) => {
    jobPoint.delete();
    _deleteWhenNear = deleteWhenNear;
    _lastPos = pickupPos;
    _marker = mp.markers.new(1, pickupPos, radius, {
      color: [_ui.ui.MarkerRed[0], _ui.ui.MarkerRed[1], _ui.ui.MarkerRed[2], _ui.ui.MarkerRed[3]],
      dimension: -1
    });
    _checkpoint = mp.checkpoints.new(1, pickupPos, radius + 0.2, {
      direction: new mp.Vector3(0, 0, 0),
      color: [33, 150, 243, 0],
      visible: true,
      dimension: -1
    });
    _blip = mp.blips.new(1, pickupPos, {
      color: 59,
      scale: 0.8,
      name: 'Работа',
      drawDistance: 100,
      shortRange: false,
      dimension: -1
    });

    _blip.setRoute(route);

    return _checkpoint.id;
  },
  delete: () => {
    _deleteWhenNear = false;

    try {
      if (typeof _blip == 'object' && mp.blips.exists(_blip)) _blip.destroy();else {
        mp.blips.forEach(function (blip) {
          if (mp.blips.exists(blip) && blip.getSprite() == 1) blip.destroy();
        });
      }
    } catch (e) {
      mp.console.logError(e);
      mp.blips.forEach(function (blip) {
        if (mp.blips.exists(blip) && blip.getSprite() == 1) blip.destroy();
      });
    }

    try {
      if (typeof _marker == 'object' && mp.markers.exists(_marker)) _marker.destroy();else {
        mp.markers.forEach(function (marker) {
          if (typeof marker == "object" && typeof marker.getColor == "function" && mp.markers.exists(marker) && marker.getColor() === _ui.ui.ColorRed) marker.destroy();
        });
      }
    } catch (e) {
      mp.console.logError(e);
      mp.markers.forEach(function (marker) {
        if (typeof marker == "object" && typeof marker.getColor == "function" && mp.markers.exists(marker) && marker.getColor() === _ui.ui.ColorRed) marker.destroy();
      });
    }

    try {
      if (typeof _checkpoint == 'object' && mp.checkpoints.exists(_checkpoint)) _checkpoint.destroy();else {
        mp.checkpoints.forEach(function (cp) {
          if (_methods.methods.distanceToPos(_lastPos, cp.position) < 3) cp.destroy();
        });
      }
    } catch (e) {
      mp.console.logError(e);
      mp.checkpoints.forEach(function (cp) {
        if (_methods.methods.distanceToPos(_lastPos, cp.position) < 3) cp.destroy();
      });
    }

    _checkpoint = null;
    _marker = null;
    _blip = null;
  }
};
exports.jobPoint = jobPoint;
},{"../modules/ui":"zOnK","../modules/methods":"qXSp"}],"KnNo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.playMinigame = playMinigame;
let baseUrl;
mp.events.add('web:browsers:urls', q => {
  baseUrl = 'http://localhost:3400/minigames/';
});
let minigameID = 0;
let minigameCb = new Map();
let minigameBrowser = new Map();
let minigameName = new Map();

function playMinigame(name) {
  return new Promise(resolve => {
    if (minigameName.has(name)) return;
    mp.gui.cursor.show(true, true);
    minigameID++;
    const id = minigameID;
    let browser = mp.browsers.new(baseUrl + name + "/index.html");
    browser.execute("minigameID = " + id + ";");
    minigameCb.set(id, resolve);
    minigameName.set(name, id);
    minigameBrowser.set(id, browser);
    setTimeout(() => {
      mp.gui.cursor.visible = true;
    }, 500);
    if (name == "gr6") mp.game.ui.notifications.show("Соберите деньги в сумку");else if (name == "wash") mp.game.ui.notifications.show("Вытрите всю грязь тряпкой");
    setTimeout(() => {
      if (!mp.gui.cursor.visible) mp.game.ui.notifications.show("Если курсор не отображается - нажмите F3");
      mp.gui.cursor.visible = true;
    }, 2000);
  });
}

setTimeout(() => {
  mp.events.add("server:playMinigame", name => {
    return playMinigame(name);
  });
}, 100);
mp.keys.bind(0x72, false, () => {
  if ([...minigameName].length > 0) {
    mp.gui.cursor.visible = true;
  }
});
mp.events.add("minigame:end", (id, status) => {
  mp.gui.cursor.show(false, false);
  if (minigameBrowser.has(id)) minigameBrowser.get(id).destroy();
  minigameBrowser.delete(id);
  if (minigameCb.has(id)) minigameCb.get(id)(status);
  minigameName.forEach((ids, name) => {
    if (ids == id) minigameName.delete(name);
  });
  minigameCb.delete(id);
});
},{}],"lN65":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleaner = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _coffer = require("../coffer");

var _menuList = require("../menuList");

var _jobPoint = require("../managers/jobPoint");

var _minigame = require("../modules/minigame");

var _gui = require("../modules/gui");

let isStart = false;
let isProcess = false;
let count = 0;

let _checkpointId = -1;

let cleaner = {
  isStart: false,
  markers: [[-1536.631, -451.4576, 34.88205, 137.3628], [-1532.549, -454.8775, 34.88456, 139.3095], [-1553.697, -446.5077, 39.51906, 142.7419], [-1535.673, -459.0544, 39.52384, 142.13], [-1540.909, -454.7619, 39.51913, 137.2621], [-1541.229, -429.4637, 34.59196, 51.92725], [-1554.131, -441.6807, 39.51905, 51.12228], [-1533.775, -420.5667, 34.59194, 37.03086], [-1538.859, -456.4115, 39.52203, 142.7622], [-1534.811, -462.4519, 34.44516, 30.1082], [-1528.802, -462.5171, 34.4021, 214.4953]],
  startOrEnd: function () {
    if (_user.user.get('job') == 'gr6') {
      mp.game.ui.notifications.show('~b~Вы не можете работать на этой работе сейчас');
      return;
    }

    if (isStart) {
      _jobPoint.jobPoint.delete();

      _user.user.updateCharacterCloth();

      mp.game.ui.notifications.show('~b~Вы закончили рабочий день');
      isStart = false;
      isProcess = false;
      _checkpointId = -1;
    } else {
      mp.game.ui.notifications.show('~b~Вы начали рабочий день');
      isStart = true;
      cleaner.findRandomPickup();
    }

    cleaner.isStart = isStart;
  },
  findRandomPickup: function () {
    if (isProcess || !isStart) return;

    let pickupId = _methods.methods.getRandomInt(0, 10);

    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(cleaner.markers[pickupId][0], cleaner.markers[pickupId][1], cleaner.markers[pickupId][2]));
  },
  workProcess: function () {
    if (isProcess || !isStart) return;
    let pos = mp.players.local.position;
    cleaner.markers.forEach(function (item) {
      let pPos = new mp.Vector3(item[0], item[1], item[2]);

      if (_methods.methods.distanceToPos(pPos, pos) < 2) {
        mp.players.local.position = pPos;
        mp.players.local.setHeading(item[3]);
        isProcess = true;

        _methods.methods.disableAllControls(true);

        _jobPoint.jobPoint.delete();

        _checkpointId = -1;

        _user.user.playScenario("WORLD_HUMAN_MAID_CLEAN");

        (0, _minigame.playMinigame)("wash").then(status => {
          isProcess = false;

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          if (!status) {
            mp.game.ui.notifications.show('~r~Вы ничего не заработали');
          } else {
            count++;
            cleaner.takeMoney();

            _user.user.setData('skill_scrap', _user.user.get('skill_scrap') + 1);

            cleaner.findRandomPickup();
          }
        });
      }
    });
  },
  takeMoney: function () {
    if (count > 0) {
      let money = count * 15;

      _user.user.giveJobMoney(money);

      _coffer.coffer.removeMoney(money);

      mp.game.ui.notifications.show('Вы заработали ~g~$' + _methods.methods.numberFormat(money));
      count = 0;
      return;
    }

    mp.game.ui.notifications.show('~r~Вы ничего не заработали');
  },
  checkPressE: function () {
    let distanceCheck = 2;
    if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(-1539.165, -448.0839, 34.88203)) < distanceCheck) _menuList.menuList.showJobCleanerMenu();
  }
};
exports.cleaner = cleaner;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) cleaner.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../coffer":"sKID","../menuList":"U1Al","../managers/jobPoint":"AmGY","../modules/minigame":"KnNo","../modules/gui":"bk91"}],"iDVm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.roadWorker = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _coffer = require("../coffer");

var _menuList = require("../menuList");

var _jobPoint = require("../managers/jobPoint");

var _minigame = require("../modules/minigame");

var _gui = require("../modules/gui");

let isStart = false;
let isProcess = false;
let count = 0;

let _checkpointId = -1;

let roadWorker = {
  isStart: false,
  markers: [[53.50541, -711.3873, 29.87694], [57.57128, -708.451, 30.00957], [56.72814, -701.3369, 30.09235], [90.61273, -616.3182, 29.7602], [91.80334, -607.3279, 30.17802], [91.80334, -607.3279, 30.17802]],
  startOrEnd: function () {
    if (_user.user.get('job') == 'gr6') {
      mp.game.ui.notifications.show('~b~Вы не можете работать на этой работе сейчас');
      return;
    }

    if (isStart) {
      _jobPoint.jobPoint.delete();

      _user.user.updateCharacterCloth();

      mp.game.ui.notifications.show('~b~Вы закончили рабочий день');
      isStart = false;
      isProcess = false;
      _checkpointId = -1;
    } else {
      mp.game.ui.notifications.show('~b~Вы начали рабочий день');

      if (_user.user.getSex() == 1) {
        _user.user.setComponentVariation(3, 55, 0);

        _user.user.setComponentVariation(8, 36, 0);

        _user.user.setComponentVariation(11, 0, 0);
      } else {
        _user.user.setComponentVariation(3, 30, 0);

        _user.user.setComponentVariation(8, 59, _methods.methods.getRandomInt(0, 2));

        _user.user.setComponentVariation(11, 0, 0);
      }

      isStart = true;
      roadWorker.findRandomPickup();
    }

    roadWorker.isStart = isStart;
  },
  findRandomPickup: function () {
    if (isProcess || !isStart) return;

    let pickupId = _methods.methods.getRandomInt(0, 5);

    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(roadWorker.markers[pickupId][0], roadWorker.markers[pickupId][1], roadWorker.markers[pickupId][2]));
  },
  workProcess: function () {
    if (isProcess || !isStart) return;
    let pos = mp.players.local.position;
    roadWorker.markers.forEach(function (item) {
      let pPos = new mp.Vector3(item[0], item[1], item[2]);

      if (_methods.methods.distanceToPos(pPos, pos) < 2) {
        mp.players.local.position = pPos;
        mp.players.local.setHeading(item[3]);
        isProcess = true;

        _methods.methods.disableAllControls(true);

        _jobPoint.jobPoint.delete();

        _checkpointId = -1;

        _user.user.playScenario("WORLD_HUMAN_CONST_DRILL");

        (0, _minigame.playMinigame)("hammer").then(status => {
          isProcess = false;

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          if (status) {
            count++;
            roadWorker.takeMoney();
          } else {
            mp.game.ui.notifications.show('~r~Вы ничего не заработали');
          }

          roadWorker.findRandomPickup();
        });
      }
    });
  },
  takeMoney: function () {
    if (count > 0) {
      let money = count * 12;

      _user.user.giveJobMoney(money);

      _coffer.coffer.removeMoney(money);

      mp.game.ui.notifications.show('Вы заработали ~g~$' + _methods.methods.numberFormat(money));
      count = 0;
      return;
    }

    mp.game.ui.notifications.show('~r~Вы ничего не заработали');
  },
  checkPressE: function () {
    let distanceCheck = 2;
    if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(52.84556, -722.4211, 30.7647)) < distanceCheck) _menuList.menuList.showJobRoadWorkerMenu();
  }
};
exports.roadWorker = roadWorker;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) roadWorker.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../coffer":"sKID","../menuList":"U1Al","../managers/jobPoint":"AmGY","../modules/minigame":"KnNo","../modules/gui":"bk91"}],"BSgz":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mainer = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _coffer = require("../coffer");

var _menuList = require("../menuList");

var _jobPoint = require("../managers/jobPoint");

var _minigame = require("../modules/minigame");

var _gui = require("../modules/gui");

let isStart = false;
let isProcess = false;
let count = 0;

let _checkpointId = -1;

let mainer = {
  isStart: false,
  markers: [[2926.32373046875, 2800.27490234375, 40.433074951171875], [2928.197509765625, 2789.14013671875, 39.64565658569336], [2940.468994140625, 2778.12255859375, 38.307369232177734], [2952.239990234375, 2781.09375, 39.23149490356445], [2950.103759765625, 2795.388427734375, 39.81355285644531], [2947.564208984375, 2811.36328125, 40.845672607421875], [2959.59228515625, 2808.4130859375, 41.28612518310547], [2974.08544921875, 2796.08154296875, 40.03358459472656], [2975.476318359375, 2780.2724609375, 37.6644973754882], [2956.1630859375, 2781.392333984375, 39.77700424194336]],
  startOrEnd: function () {
    if (_user.user.get('job') == 'gr6') {
      mp.game.ui.notifications.show('~b~Вы не можете работать на этой работе сейчас');
      return;
    }

    if (isStart) {
      _jobPoint.jobPoint.delete();

      mp.game.ui.notifications.show('~b~Вы закончили рабочий день');
      isStart = false;
      isProcess = false;
      _checkpointId = -1;
    } else {
      mp.game.ui.notifications.show('~b~Вы начали рабочий день');
      isStart = true;
      mainer.findRandomPickup();
    }

    mainer.isStart = isStart;
  },
  findRandomPickup: function () {
    if (isProcess || !isStart) return;

    let pickupId = _methods.methods.getRandomInt(0, 5);

    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(mainer.markers[pickupId][0], mainer.markers[pickupId][1], mainer.markers[pickupId][2]));
  },
  workProcess: function () {
    if (isProcess || !isStart) return;
    let pos = mp.players.local.position;
    mainer.markers.forEach(function (item) {
      let pPos = new mp.Vector3(item[0], item[1], item[2]);

      if (_methods.methods.distanceToPos(pPos, pos) < 2) {
        mp.players.local.position = pPos;
        mp.players.local.setHeading(item[3]);
        isProcess = true;

        _methods.methods.disableAllControls(true);

        _jobPoint.jobPoint.delete();

        _checkpointId = -1;

        _user.user.playScenario("WORLD_HUMAN_CONST_DRILL");

        (0, _minigame.playMinigame)("hammer").then(status => {
          isProcess = false;

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          if (status) {
            count++;
            mainer.takeMoney();
          } else {
            mp.game.ui.notifications.show('~r~Вы ничего не заработали');
          }

          mainer.findRandomPickup();
        });
      }
    });
  },
  takeMoney: function () {
    if (count > 0) {
      let money = count * 14;

      _user.user.giveJobMoney(money);

      _coffer.coffer.removeMoney(money);

      count = 0;
      return;
    }

    mp.game.ui.notifications.show('~r~Вы ничего не заработали');
  },
  checkPressE: function () {
    let distanceCheck = 2;
    if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(2947.1118, 2745.2358, 42.37148)) < distanceCheck) _menuList.menuList.showJobMainerMenu();
  }
};
exports.mainer = mainer;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) mainer.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../coffer":"sKID","../menuList":"U1Al","../managers/jobPoint":"AmGY","../modules/minigame":"KnNo","../modules/gui":"bk91"}],"uLEY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.licenseCenter = void 0;
let licenseCenter = {
  buy: function (type, price) {
    mp.events.callRemote('server:licenseCenter:buy', type, price);
  }
};
exports.licenseCenter = licenseCenter;
},{}],"buna":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.houses = void 0;

var _user = require("./user");

var _data = require("./modules/data");

var _methods = require("./modules/methods");

let houses = {
  enter: function (id, x, y, z) {
    _user.user.setVirtualWorld(id);

    _user.user.teleport(x, y, z);
  },
  exit: (x, y, z) => {
    _user.user.setVirtualWorld(0);

    _user.user.teleport(x, y, z);
  },
  getData: async id => {
    return await _data.Container.GetAll(100000 + _methods.methods.parseInt(id));
  },
  buy: id => {
    if (_user.user.getCacheData().get('id_house') > 0) {
      mp.game.ui.notifications.show('~r~У Вас уже есть дом');
      return false;
    }

    mp.events.callSocket('server:houses:buy', id);
    return true;
  },
  updatePin: (id, pin) => {
    mp.events.callSocket('server:houses:updatePin', id, pin);
  },
  getRandomHousePositionOfLosSantos: (triggerCallBack = 'client:getRandomHousePositionOfLosSantos') => {
    mp.events.callSocket('server:houses:getRandomHousePositionOfLosSantos', triggerCallBack);
  }
};
exports.houses = houses;
},{"./user":"QE3B","./modules/data":"Edcz","./modules/methods":"qXSp"}],"SscJ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bugstars = void 0;

var _data = require("../modules/data");

var _methods = require("../modules/methods");

var _user = require("../user");

var _houses = require("../houses");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let bugstars = {
  findHouse: function () {
    try {
      _methods.methods.debug('Execute: bugstars.findHouse');

      if (isProcess) return;

      _houses.houses.getRandomHousePositionOfLosSantos('client:jobs:bugstars:findHouse');
    } catch (e) {
      _methods.methods.debug('Exception: bugstars.findHouse');

      _methods.methods.debug(e);
    }
  },
  findHouseEvent: function (x, y, z) {
    try {
      _methods.methods.debug('Execute: bugstars.findHouseEvent');

      if (isProcess) return;
      isProcess = true;
      mp.game.ui.notifications.showWithPicture('Начальник', "323-555-4122", 'Скинул координаты точки', "CHAR_MICHAEL", 1);
      _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z), true);
    } catch (e) {
      _methods.methods.debug('Exception: bugstars.findHouseEvent');

      _methods.methods.debug(e);
    }
  },
  workProcess: function () {
    try {
      _methods.methods.debug('Execute: bugstars.workProcess');

      if (!isProcess) return;

      _user.user.showLoadDisplay();

      _data.Container.ResetLocally(mp.players.local.id, 'workerTool');

      isProcess = false;

      _methods.methods.disableAllControls(true);

      _jobPoint.jobPoint.delete();

      _user.user.playScenario("CODE_HUMAN_MEDIC_TIME_OF_DEATH");

      setTimeout(function () {
        try {
          _methods.methods.debug('Execute: bugstars.workProcess function ()');

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          _user.user.hideLoadDisplay();

          _user.user.giveJobMoney(_methods.methods.getRandomInt(35, 45));

          _user.user.giveJobSkill();

          mp.game.ui.notifications.show('~b~Вы произвели необходимую проверку в доме');
        } catch (e) {
          _methods.methods.debug('Exception: bugstars.workProcess function ()');

          _methods.methods.debug(e);
        }
      }, 5000);
    } catch (e) {
      _methods.methods.debug('Exception: bugstars.workProcess');

      _methods.methods.debug(e);
    }
  }
};
exports.bugstars = bugstars;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;

  if (checkpoint.id == _checkpointId) {
    if (!_data.Container.HasLocally(mp.players.local.id, 'workerTool')) {
      mp.game.ui.notifications.show('~r~Возьмите инструменты в транспорте');
      return;
    }

    bugstars.workProcess();
  }
});
mp.events.add("client:jobs:bugstars:findHouse", (x, y, z) => {
  bugstars.findHouseEvent(x, y, z);
});
},{"../modules/data":"Edcz","../modules/methods":"qXSp","../user":"QE3B","../houses":"buna","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"Wq1B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sunBleach = void 0;

var _data = require("../modules/data");

var _methods = require("../modules/methods");

var _user = require("../user");

var _houses = require("../houses");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let sunBleach = {
  findHouse: function () {
    if (isProcess) return;

    _houses.houses.getRandomHousePositionOfLosSantos('client:jobs:sunBleach:findHouse');
  },
  findHouseEvent: function (x, y, z) {
    if (isProcess) return;
    isProcess = true;
    mp.game.ui.notifications.showWithPicture('Начальник', "323-555-0600", 'Скинул координаты точки', "CHAR_MP_RAY_LAVOY", 1);
    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z), true);
  },
  workProcess: function () {
    if (!isProcess) return;

    _user.user.showLoadDisplay();

    _data.Container.ResetLocally(mp.players.local.id, 'workerTool');

    isProcess = false;

    _methods.methods.disableAllControls(true);

    _jobPoint.jobPoint.delete();

    _user.user.playScenario("CODE_HUMAN_MEDIC_TIME_OF_DEATH");

    setTimeout(function () {
      _methods.methods.disableAllControls(false);

      _user.user.stopScenario();

      _user.user.hideLoadDisplay();

      _user.user.giveJobMoney(_methods.methods.getRandomInt(35, 45));

      mp.game.ui.notifications.show('~b~Вы произвели необходимую проверку в доме');

      _user.user.giveJobSkill();
    }, 5000);
  }
};
exports.sunBleach = sunBleach;
mp.events.add("client:jobs:sunBleach:findHouse", (x, y, z) => {
  sunBleach.findHouseEvent(x, y, z);
});
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;

  if (checkpoint.id == _checkpointId) {
    if (!_data.Container.HasLocally(mp.players.local.id, 'workerTool')) {
      mp.game.ui.notifications.show('~r~Возьмите инструменты в транспорте');
      return;
    }

    sunBleach.workProcess();
  }
});
},{"../modules/data":"Edcz","../modules/methods":"qXSp","../user":"QE3B","../houses":"buna","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"YpKT":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waterPower = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _menu = _interopRequireDefault(require("../modules/menu"));

var _houses = require("../houses");

var _jobPoint = require("../managers/jobPoint");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let isProcess = false;

let _checkpointId = -1;

let waterPower = {
  findHouse: function () {
    if (isProcess) return;

    _houses.houses.getRandomHousePositionOfLosSantos('client:jobs:waterPower:findHouse');
  },
  findHouseEvent: function (x, y, z) {
    if (isProcess) return;
    isProcess = true;
    mp.game.ui.notifications.showWithPicture('Начальник', "323-555-0600", 'Скинул координаты точки', "CHAR_MP_RAY_LAVOY", 1);
    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z), true);
  },
  workProcess: function () {
    if (!isProcess) return;
    isProcess = false;

    _jobPoint.jobPoint.delete();

    _user.user.playScenario("CODE_HUMAN_MEDIC_TIME_OF_DEATH");

    let randomNum = _methods.methods.getRandomInt(1000, 9999);

    mp.game.ui.notifications.show(`~b~Номер счета: ${randomNum}`);
    setTimeout(async function () {
      let num = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput("Введите номер счёта", "", 4));

      _user.user.stopScenario();

      if (randomNum == num) {
        _user.user.giveJobMoney(_methods.methods.getRandomInt(45, 60));

        mp.game.ui.notifications.show('~b~Вы произвели необходимую проверку в доме');

        _user.user.giveJobSkill();
      } else {
        _user.user.giveJobMoney(_methods.methods.getRandomInt(10, 20));

        mp.game.ui.notifications.show('~r~Вы ошиблись с вводом данных');
      }
    }, 5000);
  }
};
exports.waterPower = waterPower;
mp.events.add("client:jobs:waterPower:findHouse", (x, y, z) => {
  waterPower.findHouseEvent(x, y, z);
});
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;

  if (checkpoint.id == _checkpointId) {
    waterPower.workProcess();
  }
});
},{"../modules/methods":"qXSp","../user":"QE3B","../modules/menu":"Aiz7","../houses":"buna","../managers/jobPoint":"AmGY"}],"tWKG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gardener = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let gardener = {
  markers: [[-1623.738, 96.66486, 62.11858], [-1499.166, -739.9906, 26.20651], [-1550.103, -694.4716, 29.21308], [-80.43311, -420.6727, 36.78386], [-1608.822, -643.9052, 31.38339], [-1481.061, 130.019, 55.6546], [-1674.133, -601.9937, 33.72008], [212.2592, -379.3662, 44.40764], [-1817.289, -464.2487, 42.90029], [268.4755, -400.9404, 44.81379], [-1556.303, 118.2675, 56.79749], [-1887.14, -405.7795, 48.03875], [-1569.9, -5.048523, 60.0406], [-1510.645, 1.18523, 56.76347], [-1471.073, 43.35913, 54.01854], [-837.3448, -937.908, 15.98954], [-999.4036, -646.9059, 23.88176], [-1447.015, -13.90357, 54.65688], [-849.4641, -1009.881, 13.41574], [-885.2766, -878.1136, 16.05929], [-1128.506, -1253.044, 6.866948], [-1863.341, 214.3598, 84.29323], [-1134.065, -1239.2, 6.233136], [971.6022, -611.0195, 58.47553], [-1304.935, -952.8572, 9.341719], [-1328.938, -961.0013, 8.179737], [977.6599, -533.1627, 59.84], [-1441.158, -917.528, 11.88954], [-1040.217, -1308.903, 6.020633], [-882.3195, -1208.285, 5.319786], [-970.1645, -1259.546, 5.582035], [-1948.157, 370.0023, 93.61497], [-1145.459, -1280.558, 7.2417], [-1829.874, 282.9827, 86.09788], [-843.1174, 112.1876, 55.17134], [-843.4338, 100.1544, 53.20478], [-1374.987, -1136.972, 4.693842], [-843.9388, 173.9445, 69.80807], [-1697.869, 364.2751, 87.15717], [-838.0018, 186.1826, 72.13165], [-1445.205, -921.1709, 12.45693], [-935.3578, 113.6355, 57.12218], [-956.7496, 105.7805, 56.15186], [-1315.548, -1112.302, 6.956872], [-990.7855, 156.2806, 61.41539], [-1351.03, -1362.751, 4.462386], [-946.5805, 188.8411, 66.63117], [-1325.24, -1394.652, 5.359413], [-918.2573, 184.5136, 68.65635], [-1215.592, 128.7445, 58.68906], [-1298.852, -1438.6, 4.97308], [-1225.961, -1548.186, 4.601189], [-1058.372, 232.0741, 63.91761], [-1264.696, -1570.552, 4.459717], [-1350.352, -1491.232, 4.782222]],
  start: function () {
    if (isProcess) {
      mp.game.ui.notifications.show('~r~Вы уже получили задание');
      return;
    }

    mp.game.ui.notifications.showWithPicture('Начальник', "323-555-0002", 'Скинул координаты точки', "CHAR_MP_BRUCIE", 1);
    gardener.findRandomPickup();
  },
  findRandomPickup: function () {
    isProcess = true;

    let pickupId = _methods.methods.getRandomInt(0, gardener.markers.length - 1);

    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(gardener.markers[pickupId][0], gardener.markers[pickupId][1], gardener.markers[pickupId][2] - 1));

    _user.user.setWaypoint(gardener.markers[pickupId][0], gardener.markers[pickupId][1]);
  },
  workProcess: function () {
    let pos = mp.players.local.position;
    gardener.markers.forEach(function (item) {
      let pPos = new mp.Vector3(item[0], item[1], item[2]);

      if (_methods.methods.distanceToPos(pPos, pos) < 2) {
        isProcess = true;

        _methods.methods.disableAllControls(true);

        _jobPoint.jobPoint.delete();

        _checkpointId = -1;

        _user.user.playScenario(_methods.methods.getRandomInt(0, 2) == 1 ? "WORLD_HUMAN_GARDENER_PLANT" : "WORLD_HUMAN_GARDENER_LEAF_BLOWER");

        setTimeout(function () {
          isProcess = false;

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          _user.user.giveJobMoney(40);

          _user.user.giveJobSkill();
        }, 30000);
      }
    });
  }
};
exports.gardener = gardener;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) gardener.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"EjBH":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.photo = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let price = 0;
let photo = {
  markers: [[-2147.697, -500.8055, 1.808812], [-1802.926, -979.5959, 0.8247299], [-1529.48, -1170.853, 0.6652265], [-1150.43, -1883.995, 0.8556018], [-951.2028, -984.1022, 0.2137202], [-785.668, -1493.263, 0.5745819], [-113.2224, -1879.044, 0.6524521], [1215.647, -2708.443, 0.6189926], [1109.928, -1220.048, 15.36792], [663.9535, -498.1472, 15.08265], [1100.557, -555.3084, 55.89379], [1264.158, -1045.235, 38.68134], [1098.827, -160.9295, 53.86881], [1928.864, 410.9628, 161.0442], [2837.639, -679.6146, 0.5003721], [29.41303, 871.0053, 196.5249], [-180.1949, 795.683, 196.4767], [-3116.456, 438.9633, 0.9076679], [-3225.826, 1353.027, 0.7466202], [-1500.024, 1574.277, 105.0456], [-1651.97, 2579.359, 0.5195942], [-2090.691, 2612.525, 0.4330854], [-1245.869, 2664.031, 0.4098645], [-415.5812, 2944.076, 13.85313], [297.7439, 3553.998, 30.04643], [-170.1436, 4137.855, 30.58113], [-215.3174, 4327.854, 30.36332], [-870.7251, 4432.679, 15.36371], [-1657.555, 4464.896, 0.3635531], [-1879.15, 4783.202, 0.9304351], [-3194.069, 3262.599, 0.3009984], [-1005.672, 6275.037, 1.211535], [-127.4178, 6736.716, 0.7080706], [146.1358, 7097.081, 0.4930558], [1508.745, 6639.454, 1.264099], [2588.054, 6141.128, 162.1035], [3366.186, 5193.819, 0.1716362], [3842.051, 4489.926, 0.8470399], [2434.03, 4618.897, 29.06884], [2119.215, 4575.23, 30.61998], [2166.003, 3830.607, 30.69661], [1580.655, 3914.799, 30.49529], [1413.794, 4258.563, 30.6244], [706.6923, 4139.002, 30.32208], [-1691.388, -207.5315, 56.70388], [1673.238, -2497.599, 79.63357], [1387.134, -1945.667, 65.68669], [2004.425, -886.1641, 79.07301], [2730.614, -740.934, 20.75201], [1650.889, -64.17523, 164.6689], [2169.16, 128.5417, 228.2811], [1976.624, 905.296, 223.8133], [-2076.867, -126.9384, 36.53727], [-2303.513, 545.1491, 182.4584], [-2236.82, 1044.593, 208.015], [-3130.185, 1343.642, 20.21685], [-2820.715, 2249.65, 29.77978], [-2362.491, 2787.569, 2.682229], [-2270.325, 4322.655, 43.0285], [-1512.462, 4239.353, 65.27418], [-1216.76, 4444.553, 29.99684], [-1133.724, 4660.337, 243.7695], [-274.677, 4686.053, 236.7642], [-483.1308, 5619.704, 64.67578], [72.52802, 7049.892, 15.5201], [821.9828, 6449.445, 31.53106], [1624.15, 6655.603, 23.72502], [202.1006, 5278.594, 610.1451], [1392.455, 5536.185, 466.5204], [1600.266, 5804.852, 415.5432], [1674.373, 5143.856, 150.8606], [3364.964, 5454.675, 17.09648], [3623.534, 4518.104, 38.99737], [2442.344, 4397.227, 34.90043], [1540.602, 4520.084, 59.09164], [167.5663, 4399.423, 78.29996], [-393.0041, 4380.564, 54.61767], [-144.3843, 2916.276, 40.98077], [-1257.691, 2500.003, 29.30817], [-2061.354, 1984.752, 197.8799], [-1339.939, 728.8558, 185.5612], [-315.0531, 1296.85, 345.9303], [-229.5341, 2153.169, 146.8271], [591.9678, 2092.038, 86.7029], [866.6752, 1194.328, 345.6783], [1110.347, 734.1995, 156.8002], [2427.27, 2006.669, 84.59879], [2953.969, 2786.999, 41.49084], [2397.269, 3685.833, 56.83162], [1379.197, 2642.405, 47.51794], [1094.303, 3243.898, 37.71872], [-1623.738, 96.66486, 62.11858], [-1499.166, -739.9906, 26.20651], [-1550.103, -694.4716, 29.21308], [-80.43311, -420.6727, 36.78386], [-1608.822, -643.9052, 31.38339], [-1481.061, 130.019, 55.6546], [-1674.133, -601.9937, 33.72008], [212.2592, -379.3662, 44.40764], [-1817.289, -464.2487, 42.90029], [268.4755, -400.9404, 44.81379], [-1556.303, 118.2675, 56.79749], [-1887.14, -405.7795, 48.03875], [-1569.9, -5.048523, 60.0406], [-1510.645, 1.18523, 56.76347], [-1471.073, 43.35913, 54.01854], [-837.3448, -937.908, 15.98954], [-999.4036, -646.9059, 23.88176], [-1447.015, -13.90357, 54.65688], [-849.4641, -1009.881, 13.41574], [-885.2766, -878.1136, 16.05929], [-1128.506, -1253.044, 6.866948], [-1863.341, 214.3598, 84.29323], [-1134.065, -1239.2, 6.233136], [1049.006, -605.6581, 57.25797], [971.6022, -611.0195, 58.47553], [-1304.935, -952.8572, 9.341719], [-1328.938, -961.0013, 8.179737], [977.6599, -533.1627, 59.84], [-1441.158, -917.528, 11.88954], [-1040.217, -1308.903, 6.020633], [-882.3195, -1208.285, 5.319786], [-970.1645, -1259.546, 5.582035], [-1948.157, 370.0023, 93.61497], [-1145.459, -1280.558, 7.2417], [-1829.874, 282.9827, 86.09788], [-843.1174, 112.1876, 55.17134], [-843.4338, 100.1544, 53.20478], [-1374.987, -1136.972, 4.693842], [-843.9388, 173.9445, 69.80807], [-1697.869, 364.2751, 87.15717], [-838.0018, 186.1826, 72.13165], [-1445.205, -921.1709, 12.45693], [-935.3578, 113.6355, 57.12218], [-956.7496, 105.7805, 56.15186], [-1315.548, -1112.302, 6.956872], [-990.7855, 156.2806, 61.41539], [-1351.03, -1362.751, 4.462386], [-946.5805, 188.8411, 66.63117], [-1325.24, -1394.652, 5.359413], [-918.2573, 184.5136, 68.65635], [-1215.592, 128.7445, 58.68906], [-1298.852, -1438.6, 4.97308], [-1225.961, -1548.186, 4.601189], [-1058.372, 232.0741, 63.91761], [-1264.696, -1570.552, 4.459717], [-1350.352, -1491.232, 4.782222]],
  start: function () {
    if (isProcess) {
      mp.game.ui.notifications.show('~r~Вы уже получили задание');
      return;
    }

    mp.game.ui.notifications.showWithPicture('Life Invader', "323-777-777", 'Скинул координаты точки', "CHAR_LIFEINVADER", 1);
    photo.findRandomPickup();
  },
  findRandomPickup: function () {
    isProcess = true;

    let pickupId = _methods.methods.getRandomInt(0, photo.markers.length - 1);

    let pos = new mp.Vector3(photo.markers[pickupId][0], photo.markers[pickupId][1], photo.markers[pickupId][2]);
    price = _methods.methods.parseInt(_methods.methods.distanceToPos(pos, mp.players.local.position) / 50);
    if (price > 400) price = 400;
    _checkpointId = _jobPoint.jobPoint.create(pos);

    _user.user.setWaypoint(photo.markers[pickupId][0], photo.markers[pickupId][1]);
  },
  workProcess: function () {
    let pos = mp.players.local.position;
    photo.markers.forEach(function (item) {
      let pPos = new mp.Vector3(item[0], item[1], item[2]);

      if (_methods.methods.distanceToPos(pPos, pos) < 2) {
        if (mp.players.local.vehicle) return mp.game.ui.notifications.show('~r~Покиньте транспорт');
        isProcess = true;

        _methods.methods.disableAllControls(true);

        try {
          _jobPoint.jobPoint.delete();
        } catch (e) {
          _methods.methods.debug(e);
        }

        _checkpointId = -1;

        _user.user.playScenario("WORLD_HUMAN_PAPARAZZI");

        setTimeout(function () {
          isProcess = false;

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          _user.user.giveJobMoney(_methods.methods.getRandomInt(30, 50) + price);

          _user.user.giveJobSkill();

          price = 0;
        }, 30000);
      }
    });
  }
};
exports.photo = photo;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) photo.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"tqRS":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bus = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let _isBus1 = false;
let _isBus2 = false;
let _isBus3 = false;

let _checkpointId = -1;

let _currentId = 0;
let bus = {
  markers1: [[-1032.266, -2724.416, 12.65254], [189.878, -1988.402, 17.70164], [146.5654, -1734.431, 28.08748], [-214.3812, -1003.525, 28.17548], [-72.5507, -618.2736, 35.09362], [-503.8881, 20.96746, 43.68846], [-1191.871, -270.6994, 36.61627], [-1619.696, -531.4001, 33.41887], [-1231.549, -1134.148, 6.699632], [-658.9761, -1400.086, 9.50183], [-556.3972, -1753.336, 20.77087]],
  markers2: [[-1031.312, -2725.107, 12.64634], [-214.3812, -1003.525, 28.17548]],
  markers3: [[-214.3812, -1003.525, 28.17548], [2761.002, 4618.438, 43.94569], [-216.0822, 6172.684, 30.2277], [-2275.199, 4255.438, 42.92985], [-3014.472, 368.9521, 13.75097]],
  start: function (busType) {
    try {
      _methods.methods.debug('Execute: bus.start');

      switch (busType) {
        case 1:
          {
            if (_isBus1) break;
            _isBus1 = true;
            _currentId = 0;
            _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers1[_currentId][0], bus.markers1[_currentId][1], bus.markers1[_currentId][2]), true, 3);
            _currentId++;
            mp.game.ui.notifications.show('~g~Вы начали рейс, не выходите из автобуса до конца поездки');
            break;
          }

        case 2:
          {
            if (_isBus2) break;
            _isBus2 = true;
            _currentId = 0;
            _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers2[_currentId][0], bus.markers2[_currentId][1], bus.markers2[_currentId][2]), true, 3);
            _currentId++;
            mp.game.ui.notifications.show('~g~Вы начали рейс, не выходите из автобуса до конца поездки');
            break;
          }

        case 3:
          {
            if (_isBus3) break;
            _isBus3 = true;
            _currentId = 0;
            _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers3[_currentId][0], bus.markers3[_currentId][1], bus.markers3[_currentId][2]), true, 3);
            _currentId++;
            mp.game.ui.notifications.show('~g~Вы начали рейс, не выходите из автобуса до конца поездки');
            break;
          }
      }
    } catch (e) {
      _methods.methods.debug('Exception: bus.start');

      _methods.methods.debug(e);
    }
  },
  nextCheckpoint: function () {
    mp.game.ui.notifications.show('~g~Ожидайте 10 секунд');

    _jobPoint.jobPoint.delete();

    mp.players.local.freezePosition(true);
    setTimeout(function () {
      mp.players.local.freezePosition(false);

      try {
        _methods.methods.debug('Execute: bus.nextCheckpoint');

        if (mp.players.local.vehicle) {
          switch (mp.players.local.vehicle.model) {
            case mp.game.joaat('bus'):
              {
                if (!_isBus1) {
                  bus.stop();
                  break;
                }

                if (_currentId > 10) {
                  _user.user.giveJobMoney(250);

                  _user.user.giveJobSkill();

                  mp.game.ui.notifications.show('~g~Вы закончили свой рейс');
                  _isBus1 = false;
                  _currentId = 0;
                  _checkpointId = -1;
                  break;
                }

                _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers1[_currentId][0], bus.markers1[_currentId][1], bus.markers1[_currentId][2]), true, 3);
                _currentId++;
                mp.game.ui.notifications.show('~b~Двигайтесь к следующей остановке');
                break;
              }

            case mp.game.joaat('airbus'):
              {
                if (!_isBus2) {
                  bus.stop();
                  break;
                }

                if (_currentId > 1) {
                  _user.user.giveJobMoney(79);

                  _user.user.giveJobSkill();

                  mp.game.ui.notifications.show('~g~Вы закончили свой рейс');
                  _isBus2 = false;
                  _currentId = 0;
                  _checkpointId = -1;
                  break;
                }

                _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers2[_currentId][0], bus.markers2[_currentId][1], bus.markers2[_currentId][2]), true, 3);
                _currentId++;
                mp.game.ui.notifications.show('~b~Двигайтесь к следующей остановке');
                break;
              }

            case mp.game.joaat('coach'):
              {
                if (!_isBus3) {
                  bus.stop();
                  break;
                }

                if (_currentId > 4) {
                  _user.user.giveJobMoney(321);

                  _user.user.giveJobSkill();

                  mp.game.ui.notifications.show('~g~Вы закончили свой рейс');
                  _isBus3 = false;
                  _currentId = 0;
                  _checkpointId = -1;
                  break;
                }

                _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(bus.markers3[_currentId][0], bus.markers3[_currentId][1], bus.markers3[_currentId][2]), true, 3);
                _currentId++;
                mp.game.ui.notifications.show('~b~Двигайтесь к следующей остановке');
                break;
              }

            default:
              bus.stop();
              break;
          }
        } else bus.stop();
      } catch (e) {
        _methods.methods.debug('Exception: bus.nextCheckpoint');

        _methods.methods.debug(e);
      }
    }, 10000);
  },
  stop: function () {
    _jobPoint.jobPoint.delete();

    mp.players.local.freezePosition(false);
    _isBus1 = false;
    _isBus2 = false;
    _isBus3 = false;
    _checkpointId = -1;
    _currentId = 0;
    mp.game.ui.notifications.show('~r~Ваш рейс досрочно завершен');
  }
};
exports.bus = bus;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) bus.nextCheckpoint();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"x8sI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mail = void 0;

var _data = require("../modules/data");

var _methods = require("../modules/methods");

var _user = require("../user");

mp.events.add('sendMail', id => {
  mail.sendMail(id);
});
let mail = {
  sendMail: function (houseId) {
    try {
      _methods.methods.debug('Execute: mail.sendMail');

      if (_data.Container.HasLocally(mp.players.local.id, 'mail')) {
        if (_data.Container.GetLocally(mp.players.local.id, 'mail') > 0) {
          _data.Container.Set(houseId, 'isMail', true);

          _data.Container.SetLocally(mp.players.local.id, 'mail', _data.Container.GetLocally(mp.players.local.id, 'mail') - 1);

          mp.game.ui.notifications.show(`~g~Вы отнесли почту ${_data.Container.GetLocally(mp.players.local.id, 'mail')}/10`);

          _user.user.giveJobSkill();

          _user.user.giveJobMoney(11);

          return;
        }
      }

      mp.game.ui.notifications.show('~r~У Вас нет почты, возьмите из авто');
    } catch (e) {
      _methods.methods.debug('Exception: mail.sendMail');

      _methods.methods.debug(e);
    }
  },
  sendMail2: function (houseId) {
    try {
      _methods.methods.debug('Execute: mail.sendMail2');

      if (_data.Container.HasLocally(mp.players.local.id, 'mail')) {
        if (_data.Container.GetLocally(mp.players.local.id, 'mail') > 0) {
          _data.Container.Set(houseId, 'isMail2', true);

          _data.Container.SetLocally(mp.players.local.id, 'mail', _data.Container.GetLocally(mp.players.local.id, 'mail') - 1);

          mp.game.ui.notifications.show(`~g~Вы отнесли почту ${_data.Container.GetLocally(mp.players.local.id, 'mail')}/10`);

          _user.user.giveJobSkill();

          _user.user.giveJobMoney(11);

          return;
        }
      }

      mp.game.ui.notifications.show('~r~У Вас нет почты, возьмите из авто');
    } catch (e) {
      _methods.methods.debug('Exception: mail.sendMail2');

      _methods.methods.debug(e);
    }
  },
  takeMail: function () {
    try {
      _methods.methods.debug('Execute: mail.takeMail');

      _data.Container.SetLocally(mp.players.local.id, 'mail', 10);

      mp.game.ui.notifications.show("~g~Вы взяли почту из транспорта");
    } catch (e) {
      _methods.methods.debug('Exception: mail.takeMail');

      _methods.methods.debug(e);
    }
  }
};
exports.mail = mail;
},{"../modules/data":"Edcz","../modules/methods":"qXSp","../user":"QE3B"}],"VeeO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.burgershot = void 0;

var _data = require("../modules/data");

var _methods = require("../modules/methods");

var _user = require("../user");

var _houses = require("../houses");

var _jobPoint = require("../managers/jobPoint");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let burgershot = {
  findHouse: function () {
    try {
      _methods.methods.debug('Execute: burgershot.findHouse');

      if (isProcess) return;

      _houses.houses.getRandomHousePositionOfLosSantos('client:jobs:burgershot:findHouse');
    } catch (e) {
      _methods.methods.debug('Exception: burgershot.findHouse');

      _methods.methods.debug(e);
    }
  },
  findHouseEvent: function (x, y, z) {
    try {
      _methods.methods.debug('Execute: burgershot.findHouseEvent');

      if (isProcess) return;
      isProcess = true;
      mp.game.ui.notifications.showWithPicture('Начальник', "323-555-4122", 'Скинул координаты точки', "CHAR_MICHAEL", 1);
      _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z), true);
    } catch (e) {
      _methods.methods.debug('Exception: burgershot.findHouseEvent');

      _methods.methods.debug(e);
    }
  },
  workProcess: function () {
    try {
      _methods.methods.debug('Execute: burgershot.workProcess');

      if (!isProcess) return;

      _user.user.showLoadDisplay();

      _data.Container.ResetLocally(mp.players.local.id, 'workerTool');

      isProcess = false;

      _methods.methods.disableAllControls(true);

      _jobPoint.jobPoint.delete();

      _user.user.playScenario("CODE_HUMAN_MEDIC_TIME_OF_DEATH");

      setTimeout(function () {
        try {
          _methods.methods.debug('Execute: burgershot.workProcess function ()');

          _methods.methods.disableAllControls(false);

          _user.user.stopScenario();

          _user.user.hideLoadDisplay();

          _user.user.giveJobMoney(_methods.methods.getRandomInt(35, 45));

          _user.user.giveJobSkill();

          mp.game.ui.notifications.show('~b~Вы доставили заказ');
        } catch (e) {
          _methods.methods.debug('Exception: burgershot.workProcess function ()');

          _methods.methods.debug(e);
        }
      }, 5000);
    } catch (e) {
      _methods.methods.debug('Exception: burgershot.workProcess');

      _methods.methods.debug(e);
    }
  }
};
exports.burgershot = burgershot;
mp.events.add("client:jobs:burgershot:findHouse", (x, y, z) => {
  burgershot.findHouseEvent(x, y, z);
});
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (!isProcess) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;

  if (checkpoint.id == _checkpointId) {
    if (!_data.Container.HasLocally(mp.players.local.id, 'workerTool')) {
      mp.game.ui.notifications.show('~r~Возьмите заказ в транспорте');
      return;
    }

    burgershot.workProcess();
  }
});
},{"../modules/data":"Edcz","../modules/methods":"qXSp","../user":"QE3B","../houses":"buna","../managers/jobPoint":"AmGY","../modules/gui":"bk91"}],"O54w":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gr6 = void 0;

var _methods = require("../modules/methods");

var _data = require("../modules/data");

var _user = require("../user");

var _jobPoint = require("../managers/jobPoint");

var _weather = require("../managers/weather");

var _business = require("../business");

var _minigame = require("../modules/minigame");

var _gui = require("../modules/gui");

let isProcess = false;

let _checkpointId = -1;

let notifyCarTimer = -1;
let notifyCar;
setInterval(() => {
  if (!_user.user.get("is6Duty")) return;

  if (mp.players.local.vehicle) {
    if (mp.players.local.vehicle.getVariable("job") == "gr6") {
      notifyCarTimer = -1;
      notifyCar = null;
      if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle && _checkpointId != -1) mp.players.local.taskLeaveVehicle(mp.players.local.vehicle.handle, 0), mp.game.ui.notifications.show('~r~Вы не можете вести транспорт при активном заказе');
    }
  }

  if (notifyCarTimer == -1) return;

  if (notifyCarTimer == 0) {
    mp.events.callRemote("gr6:fakeCar");
  } else {
    if (mp.players.local.vehicle && mp.players.local.vehicle.getVariable('job') == 'gr6') notifyCarTimer = -1, notifyCar = null;else if (mp.players.local.vehicle && mp.players.local.vehicle.getSpeed() > 2) notifyCarTimer--;
  }
}, 1000);
let gr6 = {
  correctPosCheck: () => {
    return mp.players.local.position.z > 0;
  },
  startJob: () => {
    if (_user.user.getCashMoney() < 500) {
      mp.game.ui.notifications.show('~r~У Вас нет на руках $500');
      return;
    }

    _user.user.removeCashMoney(500);

    _business.business.addMoney(162, 500);

    mp.events.callRemote('server:uniform:gr6');

    _data.Container.SetLocally(0, 'is6Duty', true);

    _user.user.giveWeapon('weapon_pistol', 100);

    mp.players.local.setArmour(20);

    _user.user.setData("is6Duty", true);

    mp.game.ui.notifications.show('~g~Вы вышли на дежурство');
  },
  stopJob: () => {
    _user.user.updateCharacterCloth();

    mp.game.ui.notifications.show('~y~Вы закончили дежурство и сдали бронежилет.');

    _data.Container.ResetLocally(0, 'is6Duty');

    _data.Container.ResetLocally(0, 'gr6Money');

    _data.Container.ResetLocally(0, 'gr6MoneyBag');

    _user.user.set("is6Duty", false);

    _user.user.setData("is6Duty", false);

    isProcess = false;

    _jobPoint.jobPoint.delete();

    _checkpointId = -1;
    notifyCarTimer = -1;
    notifyCar = null;
  },
  grabMarkers: [[2544.863, 2580.673, 36.94484, 280.2184], [2552.278, 4672.925, 32.95345, 198.5477], [2307.159, 4888.141, 40.80823, 225.9266], [1711.456, 4747.02, 40.94597, 192.7653], [2413.809, 4991.302, 45.2426, 314.7328], [408.0634, 6493.51, 27.09958, 352.5662], [-24.08177, 6459.26, 30.41778, 43.72857], [47.56932, 6299.511, 30.23523, 31.10848], [723.0118, -822.5493, 23.72392, 268.9451], [906.7827, -1518.068, 29.43467, 2.248956], [845.0453, -2360.232, 29.34108, 176.5479], [69.28804, -1428.331, 28.31164, 313.6071], [388.5147, 62.68007, 96.97788, 332.0949], [-452.1371, 292.7735, 82.2362, 159.7401], [-457.0465, -51.68466, 43.51545, 286.6151], [-414.9887, -2182.779, 9.318105, 88.39629], [-195.8015, -2679.408, 5.006399, 263.6298], [254.6616, -3057.888, 4.782318, 312.1826], [1234.291, -3204.701, 4.641251, 352.1098]],
  unload: function () {
    if (_methods.methods.distanceToPos(new mp.Vector3(478.9451, -1091.8182, 28.2014), mp.players.local.position) > 30) {
      mp.game.ui.notifications.show('~r~Деньги надо разгружать на базе');

      _user.user.setWaypoint(478.9451, -1091.8182);

      return;
    }

    mp.events.callRemote('server:gr6:unload', mp.players.local.vehicle.remoteId);
  },
  deleteVeh: function () {
    if (_methods.methods.distanceToPos(new mp.Vector3(478.9451, -1091.8182, 28.2014), mp.players.local.position) > 30) {
      mp.game.ui.notifications.show('~r~Транспорт можно сдать только на базе');

      _user.user.setWaypoint(478.9451, -1091.8182);

      return;
    }

    mp.events.callRemote('server:gr6:delete');

    _jobPoint.jobPoint.delete();
  },
  grab: function () {
    if (_weather.weather.getHour() < 22 && _weather.weather.getHour() > 6) {
      mp.game.ui.notifications.show('~r~Доступно только с 22 до 6 утра игрового времени');
      return;
    }

    let isFind = false;
    gr6.grabMarkers.forEach(function (item) {
      if (_methods.methods.distanceToPos(new mp.Vector3(item[0], item[1], item[2]), mp.players.local.position) < 20) {
        mp.events.callRemote('server:gr6:grab');

        _user.user.giveWanted(5, 'Ограбление инкассаторского ТС');

        isFind = true;
        return;
      }
    });

    if (!isFind) {
      let pickupId = _methods.methods.getRandomInt(0, gr6.grabMarkers.length - 1);

      _user.user.setWaypoint(gr6.grabMarkers[pickupId][0], gr6.grabMarkers[pickupId][1]);

      mp.game.ui.notifications.show('~y~Точка для ограбления транспорта');
    }
  },
  workProcess: function () {
    (0, _minigame.playMinigame)("gr6").then(status => {
      if (!status) return mp.game.ui.notifications.show('~r~Вам не удалось спаковать сумку');

      _jobPoint.jobPoint.delete();

      _data.Container.SetLocally(0, 'gr6MoneyBag', true);

      _user.user.setComponentVariation(5, 45, 0);

      mp.game.ui.notifications.show('~y~Вы взяли сумку с деньгами, садитесь в транспорт');
      isProcess = false;
      _checkpointId = -1;
    });
  }
};
exports.gr6 = gr6;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) gr6.workProcess();
});
mp.events.add("client:createGr6Checkpoint", (x, y, z) => {
  isProcess = true;
  let pos = new mp.Vector3(x, y, z);
  _checkpointId = _jobPoint.jobPoint.create(pos, true);
});
mp.events.add("server:gr6:stop", () => {
  gr6.stopJob();
});
mp.events.add("server:gr6:removeTask", () => {
  if (_checkpointId != -1) {
    _jobPoint.jobPoint.delete();

    _checkpointId = -1;
  }

  _user.user.setComponentVariation(5, 0, 0);

  _data.Container.ResetLocally(0, 'gr6MoneyBag');

  notifyCarTimer = -1;
  notifyCar = null;
  isProcess = false;
});
mp.events.add("playerEnterVehicle", function (vehicle, seat) {
  if (_gui.gui.isActionGui()) return;
  if (_user.user.get('job') != 'gr6') return;
  if (!_user.user.get('is6Duty')) return;

  if (vehicle.getVariable('job') == 'gr6' && _data.Container.HasLocally(0, 'gr6MoneyBag')) {
    mp.events.callRemote('server:gr6:dropCar', vehicle.remoteId);

    _user.user.setComponentVariation(5, 0, 0);

    _data.Container.ResetLocally(0, 'gr6MoneyBag');

    notifyCarTimer = -1;
    notifyCar = null;
    mp.game.ui.notifications.show('~g~Вы загрузили деньги в транспорт');

    _user.user.giveJobSkill();
  }

  if (vehicle.getVariable('job') != 'gr6' && isProcess) {
    if (!notifyCar) {
      mp.game.ui.notifications.show('Запрещено передвигатся в не рабочем ТС');
      if (notifyCarTimer == -1) notifyCarTimer = 5;
      notifyCar = vehicle;
      return;
    }
  }
});
},{"../modules/methods":"qXSp","../modules/data":"Edcz","../user":"QE3B","../managers/jobPoint":"AmGY","../managers/weather":"uehX","../business":"y5vZ","../modules/minigame":"KnNo","../modules/gui":"bk91"}],"kruA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trucker = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _coffer = require("../coffer");

var _jobPoint = require("../managers/jobPoint");

let isProcess = false;
let isSpawn = false;
let type = 0;

let _checkpointId = -1;

let trailerName = '';
let offerId = 0;
let toPosX = 0;
let toPosY = 0;
let toPosZ = 0;
let fromPosX = 0;
let fromPosY = 0;
let fromPosZ = 0;
let trucker = {
  loadAll: function () {
    setInterval(trucker.timer, 5000);
  },
  acceptOffer1: function (id, name, company, x, y, z, px, py, pz, price) {
    type = 1;
    trucker.notify('Заберите груз в указанной точке');
    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z), true, 5);
    offerId = id;
    toPosX = px;
    toPosY = py;
    toPosZ = pz;
  },
  acceptOffer2: function (id, name, company, trName, cl1, cl2, liv, x, y, z, rot, px, py, pz, price) {
    type = 2;
    trucker.notify('Заберите груз в указанной точке');
    _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(x, y, z - 3), true, 5);
    offerId = id;
    fromPosX = x;
    fromPosY = y;
    fromPosZ = z;
    toPosX = px;
    toPosY = py;
    toPosZ = pz;
    trailerName = trName;
  },
  notify: function (text, title = 'Информация') {
    _methods.methods.debug('trucker.notify');

    mp.game.ui.notifications.showWithPicture(title, "Грузоперевозки", text, "DIA_DRIVER", 2);
  },
  workProcess1: function () {
    _user.user.showLoadDisplay();

    isProcess = true;

    _jobPoint.jobPoint.delete();

    setTimeout(function () {
      _user.user.hideLoadDisplay();

      trucker.notify('Вы забрали груз, отвезите его заказчику');
      _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(toPosX, toPosY, toPosZ), true, 5);
    }, 5000);
  },
  doneOffer: function () {
    if (type == 2) {
      if (!mp.players.local.vehicle || !mp.players.local.vehicle.isAttachedToTrailer()) {
        trucker.notify('У Вас нет прицепа');
        return;
      }
    }

    _user.user.showLoadDisplay();

    _jobPoint.jobPoint.delete();

    type = 0;
    isProcess = false;
    isSpawn = false;
    setTimeout(function () {
      mp.events.callRemote('server:trucker:doneOffer', offerId);
    }, 4000);
    setTimeout(function () {
      _user.user.hideLoadDisplay();

      offerId = 0;
      toPosX = 0;
      toPosY = 0;
      toPosZ = 0;
      fromPosX = 0;
      fromPosY = 0;
      fromPosZ = 0;
    }, 5000);
  },
  stop: function () {
    _user.user.showLoadDisplay();

    _jobPoint.jobPoint.delete();

    type = 0;
    isProcess = false;
    isSpawn = false;

    _user.user.removeCashMoney(500);

    _coffer.coffer.addMoney(500);

    setTimeout(function () {
      mp.events.callRemote('server:trucker:stop', offerId);
    }, 4000);
    setTimeout(function () {
      _user.user.hideLoadDisplay();

      offerId = 0;
      toPosX = 0;
      toPosY = 0;
      toPosZ = 0;
      fromPosX = 0;
      fromPosY = 0;
      fromPosZ = 0;
    }, 5000);
  },
  isProcess: function () {
    return isProcess;
  },
  timer: function () {
    if (isSpawn && !isProcess) {
      if (mp.players.local.vehicle && mp.players.local.vehicle.isAttachedToTrailer()) {
        _jobPoint.jobPoint.delete();

        isProcess = true;
        trucker.notify('Вы забрали груз, отвезите его заказчику');
        _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(toPosX, toPosY, toPosZ), true, 5);
      }

      return;
    }

    if (type == 2 && isProcess == false && _methods.methods.distanceToPos(new mp.Vector3(fromPosX, fromPosY, fromPosZ), mp.players.local.position) < 50) {
      mp.events.callRemote('server:trucker:trySpawnTrailer', offerId);
    }
  }
};
exports.trucker = trucker;
mp.events.add("client:jobs:trucker:isSpawn", cbSpawn => {
  if (!cbSpawn) {
    trucker.notify('~r~Перед вами стоит чужой груз, ждите когда его заберут');
    return;
  }

  trucker.notify('~g~Ваш груз был загружен и стоит на точке');
  isSpawn = true;
});
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  let veh = mp.players.local.vehicle;

  if (veh && mp.vehicles.exists(veh)) {
    let vInfo = _methods.methods.getVehicleInfo(veh.model);

    if (vInfo.class_name == 'Vans' || vInfo.class_name == 'Commercials') {
      if (checkpoint.id == _checkpointId) {
        if (isProcess) {
          trucker.doneOffer();
        } else {
          if (type == 1) trucker.workProcess1();
        }
      }
    }
  }
});
},{"../modules/methods":"qXSp","../user":"QE3B","../coffer":"sKID","../managers/jobPoint":"AmGY"}],"Gt5n":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.phone = void 0;

var _chat = require("./chat");

var _user = require("./user");

var _menu = _interopRequireDefault(require("./modules/menu"));

var _data = require("./modules/data");

var _business = require("./business");

var _dispatcher = require("./managers/dispatcher");

var _methods = require("./modules/methods");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let phoneBrowser;
mp.events.add('web:browsers:urls', q => {
  let url = q[2];
  phoneBrowser = url;
  phone.browser = mp.browsers.new(phoneBrowser);
});
mp.events.add('phone:hide', () => {
  phone.phoneShowSet(false);
});
let phone = {
  phoneShow: false,
  phoneShowSet: status => {
    phone.phoneShow = status;
  },
  misterk1: () => {},
  misterk2: () => {},
  updateRadioVolume: () => {
    mp.events.triggerBrowser('radio:volume', _user.user.audioRadioVolume);
  },
  browser: null,
  ingameBrowser: null,
  isPhoneOpen: () => {
    return phone.phoneShow;
  },
  showBrowser: () => {
    phone.ingameBrowser = mp.browsers.new(`https://rp.gta-5.ru/browser`);
    mp.gui.chat.show(false);
    mp.gui.cursor.show(true, true);

    _user.user.saveAccount();

    mp.console.logInfo("ENABLE Phone Site browser");
  },
  showFaqBrowser: () => {
    if (phone.ingameBrowser) {
      phone.ingameBrowser.destroy();
    }

    setTimeout(() => {
      phone.ingameBrowser = mp.browsers.new(`https://rp.gta-5.ru/faq?ingame`);
      mp.gui.chat.activate(false);
      mp.gui.cursor.show(true, true);
      mp.game.graphics.transitionToBlurred(1);

      _user.user.saveAccount();
    }, 500);
  },
  destroyBrowser: () => {
    phone.ingameBrowser.destroy();
    mp.gui.chat.show(true);
    mp.gui.cursor.show(false, false);
    mp.game.graphics.transitionFromBlurred(1);
    setTimeout(() => {
      phone.ingameBrowser = null;
    }, 500);
  },
  enableRadio: () => {
    mp.events.triggerBrowser('radio:enable', true);
  },
  disableRadio: () => {
    mp.events.triggerBrowser('radio:enable', false);
  },
  transferBank: async () => {
    let prefix = await _menu.default.Menu.GetUserInput('Префикс карты', '', 4);
    let number = await _menu.default.Menu.GetUserInput('Номер карты', '', 10);
    let sum = await _menu.default.Menu.GetUserInput('Введите сумму', '', 10);
    sum = _methods.methods.parseInt(sum);
    number = _methods.methods.parseInt(number);
    prefix = _methods.methods.parseInt(prefix);

    if (number < 10000) {
      mp.game.ui.notifications.show('~r~Должно быть больше 5 цифр');
      return;
    }

    if (prefix < 1 || sum < 1) {
      mp.game.ui.notifications.show('~r~Неверное значение');
      return;
    }

    if (sum > _user.user.get('money_bank')) {
      mp.game.ui.notifications.show('~r~У вас недостаточно денег на счету');
      return;
    }

    _user.user.set('money_bank', _user.user.get('money_bank') - sum);

    mp.events.callRemote('server:bank:transferMoney', prefix, number, sum);
  },
  showBankMenu: async () => {
    mp.events.call('client:phone:showBankMenu', `$${_methods.methods.numberFormat(_user.user.getBankMoney())}`, `${_user.user.get('bank_prefix')}-${_user.user.get('bank_number')}`);
  },
  arcadiusMenu: async () => {
    if (_user.user.get('business_id') > 0) {
      let money = await _business.business.getMoney(_user.user.get('business_id'));
      mp.game.ui.notifications.showWithPicture('Ваш счёт', 'Arcadius', 'На вашем счету: ' + money, 'CHAR_SOCIAL_CLUB', 1);
    } else {
      mp.game.ui.notifications.showWithPicture('Ошибка', 'Arcadius', 'Аккаунт не найден в системе', 'CHAR_SOCIAL_CLUB', 1);
    }
  },
  call911: async type => {
    try {
      let text = await _menu.default.Menu.GetUserInput('Текст...', '', 50);
      text = _methods.methods.filter(text);
      if (text == '') return;
      mp.game.ui.notifications.show('~b~Сообщение было отправлено');
      if (type == 1) _dispatcher.dispatcher.callFraction('[PD] ' + _user.user.get('phone_code') + '-' + _user.user.get('phone'), text, [2, 7]);else if (type == 2) _dispatcher.dispatcher.callFraction('[EMS] ' + _user.user.get('phone_code') + '-' + _user.user.get('phone'), text, [16]);else if (type == 3) _dispatcher.dispatcher.callFraction('[FD] ' + _user.user.get('phone_code') + '-' + _user.user.get('phone'), text, [3]);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  invaderLoto: async () => {
    try {
      if (_user.user.get('money_bank') < 100) {
        mp.game.ui.notifications.show('~r~У Вас недостаточно денег в банке');
        return;
      }

      if (await _data.Container.Has(mp.players.local.remoteId, 'lotoNumber')) {
        mp.game.ui.notifications.show('~r~Лотерейный билетик может быть только 1');
        return;
      }

      let number = await _menu.default.Menu.GetUserInput('Введите число', '', 2);

      if (number < 0 || number > 99) {
        mp.game.ui.notifications.show('~r~Число должно быть от 0 до 99');
        return;
      }

      _data.Container.Set(mp.players.local.remoteId, 'lotoNumber', number);

      mp.game.ui.notifications.show('~g~Вы купили билет с числом ' + number);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  getTaxi: type => {
    if (mp.players.local.dimension != 0) {
      mp.game.ui.notifications.show('~g~В интерьерах запрещено вызывать такси');
      return;
    }

    if (mp.game.invoke(_methods.methods.IS_WAYPOINT_ACTIVE)) {
      let typePrice = 20;

      let markerPos = _methods.methods.getWaypointPosition();

      let distance = _methods.methods.distanceToPos(mp.players.local.position, markerPos);

      switch (type) {
        case 1:
          typePrice = 16;
          break;

        case 2:
          typePrice = 13;
          break;

        case 3:
          typePrice = 7;
          break;

        case 4:
          typePrice = 5;
          break;
      }

      let price = _methods.methods.parseInt(distance / typePrice);

      if (price > 2000) price = 2000;

      if (_user.user.getLevel() == 1) {
        mp.game.ui.notifications.show('~g~Акция для новичков');
        mp.game.ui.notifications.show('~g~Ваша поездка будет бесплатной');
      } else {
        if (_user.user.getCashMoney() < price) {
          mp.game.ui.notifications.show('~r~У Вас недостаточно денег на руках');
          return;
        }

        mp.game.ui.notifications.show(`~b~Вы вызвали такси`);
        mp.game.ui.notifications.show(`~b~Итоговая стоимость поездки: ~s~$${_methods.methods.numberFormat(price)}`);
      }

      _user.user.setData('taxiPosX', markerPos.x);

      _user.user.setData('taxiPosY', markerPos.y);

      mp.events.callRemote('server:user:getTaxi', type, price);
    } else {
      mp.game.ui.notifications.show('~y~Ошибка оформления заказа');
      mp.game.ui.notifications.show('~y~Установите маркер на карте, куда вам необходимо поехать');
    }
  },
  invaderAd: async idx => {
    try {
      if (_user.user.get('money_bank') < 100) {
        mp.game.ui.notifications.show('~r~У Вас недостаточно денег в банке');
        return;
      }

      if (_data.Container.HasLocally(mp.players.local.remoteId, 'isAdTimeout')) {
        mp.game.ui.notifications.show('~r~Таймаут 5 минуты');
        return;
      }

      let text = await _menu.default.Menu.GetUserInput('Текст...', '', 150);
      if (text == '') return;
      let type = 'Разное';

      switch (idx) {
        case 0:
          type = 'Покупка';
          break;

        case 1:
          type = 'Продажа';
          break;
      }

      mp.game.ui.notifications.show('~b~Сообщение было отправлено');

      _user.user.removeBankMoney(100);

      _business.business.addMoney(92, 100);

      text = _methods.methods.removeQuotes(text);
      mp.events.callRemote('server:phone:AddAd', text, _user.user.get('rp_name'), `${_user.user.get('phone_code')}-${_user.user.get('phone')}`, type);
      text = text.length > 49 ? text.slice(0, 50) + '...' : text;

      _methods.methods.notifyWithPictureToAll(`${_user.user.get('phone_code')}-${_user.user.get('phone')} (${_user.user.get('id')})`, '~g~Реклама', text, 'CHAR_LIFEINVADER', 1);

      _data.Container.SetLocally(mp.players.local.remoteId, 'isAdTimeout', true);

      setTimeout(function () {
        _data.Container.ResetLocally(mp.players.local.remoteId, 'isAdTimeout');
      }, 300000);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  newCont: async () => {
    _methods.methods.debug('Execute: phone.newCont');

    try {
      let title = await _menu.default.Menu.GetUserInput('Заголовок', '', 50);
      if (title == '') return;
      let num = await _menu.default.Menu.GetUserInput('Номер', '', 15);
      if (num == '') return;
      let myPhone = `${_user.user.get('phone_code')}-${_user.user.get('phone')}`;
      mp.events.callRemote('server:phone:AddContact', myPhone, _methods.methods.removeQuotes(title), _methods.methods.removeQuotes(num));
    } catch (e) {
      _methods.methods.debug('Exception: phone.newCont');

      _methods.methods.debug(e);
    }
  },
  newSms: async () => {
    try {
      let number = await _menu.default.Menu.GetUserInput('Введите номер телефона', '', 15);
      let text = await _menu.default.Menu.GetUserInput('Текст', '', 300);
      if (text == '') return;

      _chat.chat.sendMeCommand('достал телефон и отправил смс');

      mp.events.callRemote('server:phone:SendSms', _methods.methods.removeQuotes(number), _methods.methods.removeQuotes(text));
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  newSmsWithNumber: async number => {
    try {
      let text = await _menu.default.Menu.GetUserInput('Текст', '', 300);
      if (text == '') return;

      _chat.chat.sendMeCommand('достал телефон и отправил смс');

      mp.events.callRemote('server:phone:SendSms', _methods.methods.removeQuotes(number), _methods.methods.removeQuotes(text));
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  callWithNumber: async number => {
    mp.events.callRemote('server:phone:call', _methods.methods.removeQuotes(number));
  },
  cancelCall: async () => {
    mp.events.callRemote('server:phone:cancelCall');
  },
  readSms: text => {
    text = text.replace('~b~', '!{03A9F4}').replace('!{FFFFFF}', '');
    let smsItem = text.split('\n');
    mp.gui.chat.push(`${escape(smsItem[0])}`);
    mp.gui.chat.push(`${escape(smsItem[1])}`);
  },
  delSms: id => {
    mp.events.callRemote('server:phone:DeleteSms', id);
    phone.showSmsList();
  },
  delCont: id => {
    mp.events.callRemote('server:phone:DeleteContact', id);
    phone.showContList();
  },
  renCont: async id => {
    let text = await _menu.default.Menu.GetUserInput('Имя', '', 50);
    if (text == '') return;
    mp.events.callRemote('server:phone:RenameContact', id, _methods.methods.removeQuotes(text));
    phone.showContList();
  },
  smsInfo: id => {
    mp.events.callRemote('server:phone:OpenSmsInfoMenu', id);
  },
  contInfo: id => {
    mp.events.callRemote('server:phone:OpenContInfoMenu', id);
  },
  showSmsList: () => {
    mp.events.callRemote('server:phone:OpenSmsListMenu', _user.user.get('phone_code') + '-' + _user.user.get('phone'));
  },
  showContList: () => {
    mp.events.callRemote('server:phone:OpenContactListMenu', _user.user.get('phone_code') + '-' + _user.user.get('phone'));
  },
  addNewSms: (numberFrom, text) => {
    text = text.length > 49 ? text.slice(0, 50) + '...' : text;
    mp.game.ui.notifications.showWithPicture(numberFrom, 'Входящее СМС', text, 'CHAR_ARTHUR', 1);
  }
};
exports.phone = phone;
mp.game.streaming.requestAnimDict("cellphone@");
mp.game.streaming.requestAnimDict("cellphone@in_car@ds");
mp.events.addDataHandler('call', (entity, status) => {
  if (status) {
    let dict = "cellphone@";
    if (entity.vehicle) dict += "in_car@ds";
    entity.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
  }
});
setInterval(() => {
  if (!mp.players.local.getVariable('call')) return;
  let dict = "cellphone@";
  if (mp.players.local.vehicle) dict += "in_car@ds";

  if (!mp.players.local.isPlayingAnim(dict, 'cellphone_call_listen_base', 3)) {
    mp.players.local.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
  }
}, 5000);
mp.events.add('entityStreamIn', entity => {
  if (entity.type != 'player') return;
  if (!entity.getVariable('call')) return;
  let dict = "cellphone@";
  if (entity.vehicle) dict += "in_car@ds";
  entity.taskPlayAnim(dict, 'cellphone_call_listen_base', 4.0, -1, -1, 50, 0, false, false, false);
});
},{"./chat":"MuUD","./user":"QE3B","./modules/menu":"Aiz7","./modules/data":"Edcz","./business":"y5vZ","./managers/dispatcher":"bsac","./modules/methods":"qXSp"}],"p3bl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noClipSwitch = exports.noClip = exports.isNoClipEnable = exports.getNoClipSpeedName = void 0;

var _user = require("./user");

var _methods = require("./modules/methods");

const controlsIds = {
  F5: 74,
  W: 32,
  S: 33,
  A: 34,
  D: 35,
  Space: 321,
  Shift: 21,
  LCtrl: 326,
  SpeedUP: 38,
  SpeedDOWN: 44
};
mp.events.addDataHandler("alpha", (entity, value, oldValue) => {
  if (entity.type != "player") return;
  entity.setAlpha(value);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "player") return;
  if (entity.getVariable('alpha')) entity.setAlpha(entity.getVariable('alpha'));
});
const fly = {
  flying: false,
  lockZ: false,
  f: 2.0,
  w: 2.0,
  h: 2.0
};
const gameplayCam = mp.cameras.new('gameplay');

function switchFly(status) {
  if (status && mp.players.local.vehicle) return mp.game.ui.notifications.show("Покиньте транспорт");
  if (status && _user.user.get('is6Duty') && !_methods.methods.isTestServer()) return mp.game.ui.notifications.show("Не стоит летать пока вы работаете инкассатором");
  fly.flying = !fly.flying;
  const player = mp.players.local;
  player.setInvincible(fly.flying);
  if (!fly.flying) mp.players.local.setInvincible(_user.user.godmode);
  player.freezePosition(fly.flying);
  mp.players.local.setMaxSpeed(fly.flying ? 0 : 99999);

  if (!fly.flying && !mp.game.controls.isControlPressed(0, controlsIds.Space)) {
    let position = mp.players.local.position;
    position.z = mp.game.gameplay.getGroundZFor3dCoord(position.x, position.y, position.z, 0.0, false);
    mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    mp.game.streaming.requestCollisionAtCoord(position.x, position.y, position.z);
  }

  mp.game.ui.notifications.show(fly.flying ? 'Fly: ~g~Enabled' : 'Fly: ~r~Disabled');

  if (fly.flying) {
    mp.game.ui.notifications.show(`<strong>Управление</strong><b>Перемещение</b>: WSAD\n<b>Смена оси Z</b>: CTRL + Space\n<b>Смена скорости</b>: Q + E\n<b>Зафиксировать ось Z</b>: X`);
  }

  mp.events.callSocket('flyMode', fly.flying);
}

setInterval(() => {
  if (fly.flying && mp.players.local.getVariable('enableAdmin') !== true) switchFly(false);
}, 1000);
mp.keys.bind(0x58, true, function () {
  if (!_user.user.isLogin()) return;
  if (!fly.flying) return;
  if (!_user.user.isAdmin() || !mp.players.local.getVariable('enableAdmin') === true) return;
  fly.lockZ = !fly.lockZ;
  mp.game.ui.notifications.show(fly.lockZ ? 'Ось Z: ~g~Зафиксирована' : 'Ось Z: ~r~Снята с фиксации');
});
mp.events.add('render', () => {
  if (!_user.user.isLogin()) return;

  if (_user.user.isAdmin() && mp.players.local.getVariable('enableAdmin') === true) {
    if (mp.game.controls.isControlJustPressed(0, controlsIds.F5)) switchFly(!fly.flying);
  }

  if (_user.user.isLogin() && fly.flying) {
    let controls = mp.game.controls;
    const direction = gameplayCam.getDirection();
    let updated = false;
    let position = mp.players.local.position;
    if (controls.isControlPressed(0, controlsIds.SpeedUP)) fly.f += 0.01;
    if (controls.isDisabledControlPressed(0, controlsIds.SpeedDOWN)) fly.f -= 0.01;
    if (fly.f < 0.1) fly.f = 0.1;
    if (fly.f > 20.0) fly.f = 20.0;
    const speed = controls.isControlPressed(0, controlsIds.Shift) ? fly.f * 3 : fly.f;

    if (controls.isControlPressed(0, controlsIds.W)) {
      position.x += direction.x * speed;
      position.y += direction.y * speed;
      if (!fly.lockZ) position.z += direction.z * speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.S)) {
      position.x -= direction.x * speed;
      position.y -= direction.y * speed;
      if (!fly.lockZ) position.z -= direction.z * speed;
      updated = true;
    }

    if (controls.isControlPressed(0, controlsIds.A)) {
      position.x += -direction.y * speed;
      position.y += direction.x * speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.D)) {
      position.x -= -direction.y * speed;
      position.y -= direction.x * speed;
      updated = true;
    }

    if (controls.isControlPressed(0, controlsIds.Space)) {
      position.z += speed;
      updated = true;
    } else if (controls.isControlPressed(0, controlsIds.LCtrl)) {
      position.z -= speed;
      updated = true;
    }

    if (updated) {
      mp.players.local.setMaxSpeed(99999999);
      mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
    } else {
      mp.players.local.setMaxSpeed(0);
    }
  }
});
let noClipEnabled = false;
let noClipSpeed = 1;
let noClipSpeedNames = ["Die", "Slow", "Medium", "Fast", "Very Fast", "Extremely Fast", "Snail Speed!"];

const noClipSwitch = function () {
  noClip(!noClipEnabled);
};

exports.noClipSwitch = noClipSwitch;

const noClip = function (enable) {
  try {
    _methods.methods.debug('Execute: admin.noClip');

    noClipEnabled = enable;
    if (noClipEnabled) mp.game.ui.notifications.show(`~b~Нажмите ~s~H~b~ чтобы выключить No Clip`);
  } catch (e) {
    _methods.methods.debug('Exception: admin.noClip');

    _methods.methods.debug(e);
  }
};

exports.noClip = noClip;

const isNoClipEnable = function () {
  return noClipEnabled;
};

exports.isNoClipEnable = isNoClipEnable;

const getNoClipSpeedName = function () {
  return noClipSpeedNames[noClipSpeed];
};

exports.getNoClipSpeedName = getNoClipSpeedName;
mp.events.add('render', () => {
  if (noClipEnabled) {
    let noClipEntity = mp.players.local.isSittingInAnyVehicle() ? mp.players.local.vehicle : mp.players.local;
    noClipEntity.freezePosition(true);
    noClipEntity.setInvincible(true);
    mp.game.controls.disableControlAction(0, 31, true);
    mp.game.controls.disableControlAction(0, 32, true);
    mp.game.controls.disableControlAction(0, 33, true);
    mp.game.controls.disableControlAction(0, 34, true);
    mp.game.controls.disableControlAction(0, 35, true);
    mp.game.controls.disableControlAction(0, 36, true);
    mp.game.controls.disableControlAction(0, 266, true);
    mp.game.controls.disableControlAction(0, 267, true);
    mp.game.controls.disableControlAction(0, 268, true);
    mp.game.controls.disableControlAction(0, 269, true);
    mp.game.controls.disableControlAction(0, 44, true);
    mp.game.controls.disableControlAction(0, 20, true);
    mp.game.controls.disableControlAction(0, 47, true);
    let yoff = 0.0;
    let zoff = 0.0;

    if (mp.game.controls.isControlJustPressed(0, 22)) {
      noClipSpeed++;
      if (noClipSpeed >= noClipSpeedNames.length) noClipSpeed = 0;
    }

    if (mp.game.controls.isDisabledControlPressed(0, 32)) {
      yoff = 0.5;
    }

    if (mp.game.controls.isDisabledControlPressed(0, 33)) {
      yoff = -0.5;
    }

    if (mp.game.controls.isDisabledControlPressed(0, 34)) {
      noClipEntity.setRotation(0, 0, noClipEntity.getRotation(0).z + 3, 0, true);
    }

    if (mp.game.controls.isDisabledControlPressed(0, 35)) {
      noClipEntity.setRotation(0, 0, noClipEntity.getRotation(0).z - 3, 0, true);
    }

    if (mp.game.controls.isDisabledControlPressed(0, 44)) {
      zoff = 0.21;
    }

    if (mp.game.controls.isDisabledControlPressed(0, 20)) {
      zoff = -0.21;
    }

    if (mp.game.controls.isDisabledControlPressed(0, 74)) {
      if (!noClipEntity.getVariable('isTyping')) {
        noClipEnabled = false;
      }
    }

    let newPos = noClipEntity.getOffsetFromInWorldCoords(0, yoff * (noClipSpeed * 0.7), zoff * (noClipSpeed * 0.7));
    let heading = noClipEntity.getRotation(0).z;
    noClipEntity.setVelocity(0, 0, 0);
    noClipEntity.setRotation(0, 0, heading, 0, false);
    noClipEntity.setCollision(false, false);
    noClipEntity.setCoordsNoOffset(newPos.x, newPos.y, newPos.z, true, true, true);
    noClipEntity.freezePosition(false);
    noClipEntity.setInvincible(false);
    noClipEntity.setCollision(true, true);
  }
});
},{"./user":"QE3B","./modules/methods":"qXSp"}],"WXxh":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chests = void 0;

var _weather = require("../managers/weather");

var _methods = require("./methods");

var _user = require("../user");

const chests = {
  grabMarkers: [[2544.863, 2580.673, 36.94484, 280.2184], [2552.278, 4672.925, 32.95345, 198.5477], [2307.159, 4888.141, 40.80823, 225.9266], [1711.456, 4747.02, 40.94597, 192.7653], [2413.809, 4991.302, 45.2426, 314.7328], [408.0634, 6493.51, 27.09958, 352.5662], [-24.08177, 6459.26, 30.41778, 43.72857], [47.56932, 6299.511, 30.23523, 31.10848], [723.0118, -822.5493, 23.72392, 268.9451], [906.7827, -1518.068, 29.43467, 2.248956], [845.0453, -2360.232, 29.34108, 176.5479], [69.28804, -1428.331, 28.31164, 313.6071], [388.5147, 62.68007, 96.97788, 332.0949], [-452.1371, 292.7735, 82.2362, 159.7401], [-457.0465, -51.68466, 43.51545, 286.6151], [-414.9887, -2182.779, 9.318105, 88.39629], [-195.8015, -2679.408, 5.006399, 263.6298], [254.6616, -3057.888, 4.782318, 312.1826], [1234.291, -3204.701, 4.641251, 352.1098]],
  grab: function () {
    if (_weather.weather.getHour() < 22 && _weather.weather.getHour() > 6) {
      mp.game.ui.notifications.show('~r~Доступно только с 22 до 6 утра игрового времени');
      return;
    }

    let isFind = false;
    chests.grabMarkers.forEach(function (item) {
      if (_methods.methods.distanceToPos(new mp.Vector3(item[0], item[1], item[2]), mp.players.local.position) < 20) {
        mp.events.callRemote('server:chests:vehicle:grab');

        _user.user.giveWanted(5, 'Ограбление транспорта с вооружением');

        isFind = true;
        return;
      }
    });

    if (!isFind) {
      let pickupId = _methods.methods.getRandomInt(0, chests.grabMarkers.length - 1);

      _user.user.setWaypoint(chests.grabMarkers[pickupId][0], chests.grabMarkers[pickupId][1]);

      mp.game.ui.notifications.show('~y~Точка для ограбления транспорта');
    }
  }
};
exports.chests = chests;
},{"../managers/weather":"uehX","./methods":"qXSp","../user":"QE3B"}],"ehdN":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inGreenZone = void 0;

var _gui = require("./gui");

var _user = require("../user");

let greenzones = [{
  x: -715.31,
  y: -1295.16,
  z: 5.10,
  r: 30
}, {
  x: -261.15,
  y: -2025.24,
  z: 30.15,
  r: 50
}, {
  x: -116.84,
  y: -605.05,
  z: 36.28,
  r: 50
}, {
  x: -66.51,
  y: -802.07,
  z: 44.23,
  r: 50
}, {
  x: 124.8076,
  y: -1215.845,
  z: 28.33152,
  r: 50
}, {
  x: 1.66987,
  y: -1225.569,
  z: 28.29525,
  r: 50
}, {
  x: 462.8509,
  y: -850.47,
  z: 26.12981,
  r: 30
}, {
  x: 359.9,
  y: -590.07,
  z: 28.23,
  r: 40
}, {
  x: 1692.77,
  y: 2603.04,
  z: 45.56,
  r: 250
}, {
  x: 978.22,
  y: -3114.71,
  z: 5.90,
  r: 320
}, {
  x: -40.70,
  y: -1097.67,
  z: 26.42,
  r: 20
}, {
  x: -94.41,
  y: 84.65,
  z: 71.67,
  r: 40
}, {
  x: 478.74,
  y: -107.67,
  z: 62.16,
  r: 50
}, {
  x: -422.88,
  y: 1135.57,
  z: 325.85,
  r: 100,
  customd: true
}, {
  x: -430.16,
  y: 258.72,
  z: 83.01,
  r: 40
}, {
  x: -552.77,
  y: 272.35,
  z: 83.02,
  r: 30
}, {
  x: -26.29,
  y: 215.28,
  z: 106.52,
  r: 40
}, {
  x: 128.42,
  y: -1301.55,
  z: 28.98,
  r: 50
}, {
  x: 470.07,
  y: -1093.59,
  z: 29.20,
  r: 30
}, {
  x: 454.48,
  y: -990.5,
  z: 30.69,
  r: 50
}, {
  x: 135.51,
  y: -717.06,
  z: 33.13,
  r: 60
}, {
  x: 1849.89,
  y: 3688.99,
  z: 34.27,
  r: 30
}, {
  x: -446.30,
  y: 6010.08,
  z: 31.72,
  r: 40
}, {
  x: -2343.30,
  y: 3264.50,
  z: 32.83,
  r: 40
}, {
  x: -527.33,
  y: -234.79,
  z: 37.92,
  r: 90
}, {
  x: -1387.15,
  y: -623.27,
  z: 30.82,
  r: 43
}, {
  x: -1648.79,
  y: -897.86,
  z: 8.71,
  r: 90
}];
let disableSaveZon = [{
  x: 230.34,
  y: -878.80,
  z: 23.87,
  r: 100.83,
  customd: true
}];
let greenzonesInt = [60418, 243201, 237313, 238849, 65026, 275201, 274689, 60674];
let gosdisable = false;
let ingreenzones = false;

const inGreenZone = () => ingreenzones;

exports.inGreenZone = inGreenZone;
setInterval(() => {
  if (!_user.user.isLogin()) return;
  let blockzone = disableSaveZon.find(item => mp.game.gameplay.getDistanceBetweenCoords(item.x, item.y, item.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < item.r && (mp.players.local.dimension != 0 && item.customd || mp.players.local.dimension == 0 && !item.customd));

  if (blockzone) {
    _gui.gui.browser.execute(`CEF.hud.setGreenZone(${0});`);

    ingreenzones = false;
    return;
  }

  let grzn = greenzones.find(item => mp.game.gameplay.getDistanceBetweenCoords(item.x, item.y, item.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < item.r);
  gosdisable = greenzones.find(item => mp.game.gameplay.getDistanceBetweenCoords(item.x, item.y, item.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < item.r) ? greenzones.find(item => mp.game.gameplay.getDistanceBetweenCoords(item.x, item.y, item.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < item.r).customd && mp.players.local.dimension != 0 : false;
  let grznint = !!greenzonesInt.find(item => mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) == item);
  let allowCurrentZone = grznint;

  if (grzn) {
    allowCurrentZone = mp.players.local.dimension == 0 || grzn.customd && mp.players.local.dimension != 0;
  }

  if (ingreenzones == allowCurrentZone) return;

  _gui.gui.browser.execute(`CEF.hud.setGreenZone(${allowCurrentZone ? 1 : 0});`);

  ingreenzones = allowCurrentZone;
}, 2000);
mp.events.add("render", () => {
  if (ingreenzones) {
    if (_user.user.isGos() && !_user.user.isEms() && !gosdisable) return;
    mp.game.controls.disableControlAction(0, 24, true);
    mp.game.controls.disableControlAction(0, 68, true);
    mp.game.controls.disableControlAction(0, 69, true);
    mp.game.controls.disableControlAction(0, 70, true);
    mp.game.controls.disableControlAction(0, 91, true);
    mp.game.controls.disableControlAction(0, 92, true);
    mp.game.controls.disableControlAction(0, 140, true);
    mp.game.controls.disableControlAction(0, 141, true);
    mp.game.controls.disableControlAction(0, 142, true);
    mp.game.controls.disableControlAction(0, 257, true);
  }
});
},{"./gui":"bk91","../user":"QE3B"}],"SYvm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.voiceDistanceRangePlus = exports.voiceDistanceRange = void 0;
const voiceDistanceRange = 15.0;
exports.voiceDistanceRange = voiceDistanceRange;
const voiceDistanceRangePlus = 5;
exports.voiceDistanceRangePlus = voiceDistanceRangePlus;
},{}],"Tpi6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressFinger = void 0;

var _user = require("../user");

var _gui = require("../modules/gui");

var _ragevoice = require("../ragevoice");

let pointing = {
  active: false,
  interval: null,
  lastSent: 0,
  start: function () {
    if (!pointing.active) {
      pointing.active = true;
      mp.game.streaming.requestAnimDict("anim@mp_point");

      while (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) {
        mp.game.wait(0);
      }

      mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);
      mp.players.local.setConfigFlag(36, true);
      mp.players.local.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
      mp.game.streaming.removeAnimDict("anim@mp_point");
      pointing.interval = setInterval(pointing.process.bind(this), 0);
    }
  },
  stop: function () {
    if (pointing.active) {
      clearInterval(pointing.interval);
      pointing.interval = null;
      pointing.active = false;
      mp.game.invoke("0xd01015c7316ae176", mp.players.local.handle, "Stop");

      if (!mp.players.local.isInAnyVehicle(true)) {
        mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 1, 1, 1, 1);
      }

      mp.players.local.setConfigFlag(36, false);

      _user.user.stopAllAnimation();
    } else {
      mp.console.logInfo("NO ACTIVE POINTING");
    }
  },
  gameplayCam: mp.cameras.new("gameplay"),
  lastSync: 0,
  getRelativePitch: function () {
    let camRot = pointing.gameplayCam.getRot(2);
    return camRot.x - mp.players.local.getPitch();
  },
  process: function () {
    if (pointing.active) {
      mp.game.invoke("0x921ce12c489c4c41", mp.players.local.handle);
      let camPitch = pointing.getRelativePitch();

      if (camPitch < -70.0) {
        camPitch = -70.0;
      } else if (camPitch > 42.0) {
        camPitch = 42.0;
      }

      camPitch = (camPitch + 70.0) / 112.0;
      let camHeading = mp.game.cam.getGameplayCamRelativeHeading();
      let cosCamHeading = mp.game.system.cos(camHeading);
      let sinCamHeading = mp.game.system.sin(camHeading);

      if (camHeading < -180.0) {
        camHeading = -180.0;
      } else if (camHeading > 180.0) {
        camHeading = 180.0;
      }

      camHeading = (camHeading + 180.0) / 360.0;
      let coords = mp.players.local.getOffsetFromGivenWorldCoords(cosCamHeading * -0.2 - sinCamHeading * (0.4 * camHeading + 0.3), sinCamHeading * -0.2 + cosCamHeading * (0.4 * camHeading + 0.3), 0.6);
      let blocked = typeof mp.raycasting.testPointToPoint(new mp.Vector3(coords.x, coords.y, coords.z - 0.2), new mp.Vector3(coords.x, coords.y, coords.z + 0.2), mp.players.local.handle, 7) !== 'undefined';
      mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Pitch", camPitch);
      mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Heading", camHeading * -1.0 + 1.0);
      mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isBlocked", blocked);
      mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isFirstPerson", mp.game.invoke('0xee778f8c7e1142e2', mp.game.invoke('0x19cafa3c87f7c2ff')) == 4);

      if (Date.now() - pointing.lastSent > 100) {
        pointing.lastSent = Date.now();
        mp.events.callRemote("fpsync.update", camPitch, camHeading);
      }
    }
  }
};
mp.events.add("fpsync.stop", id => {
  setTimeout(() => {
    let netPlayer = getPlayerByRemoteId(parseInt(id));
    if (netPlayer == null) return;
    netPlayer.clearSecondaryTask();
    netPlayer.lastReceivedPointing = undefined;
    netPlayer.pointingInterval = undefined;
    mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");

    if (!netPlayer.isInAnyVehicle(true)) {
      mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
    }

    netPlayer.setConfigFlag(36, false);
    netPlayer.clearSecondaryTask();
    mp.gui.chat.push("fpsync.stop");
  }, 300);
});
mp.events.add("fpsync.update", (id, camPitch, camHeading) => {
  let netPlayer = getPlayerByRemoteId(parseInt(id));

  if (netPlayer != null) {
    if (netPlayer != mp.players.local) {
      netPlayer.lastReceivedPointing = Date.now();

      if (!netPlayer.pointingInterval) {
        netPlayer.pointingInterval = setInterval(function () {
          if (Date.now() - netPlayer.lastReceivedPointing > 1000) {
            clearInterval(netPlayer.pointingInterval);
            netPlayer.lastReceivedPointing = undefined;
            netPlayer.pointingInterval = undefined;
            mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");

            if (!netPlayer.isInAnyVehicle(true)) {
              mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
            }

            netPlayer.setConfigFlag(36, false);
          }
        }.bind(netPlayer), 500);
        mp.game.streaming.requestAnimDict("anim@mp_point");

        while (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) {
          mp.game.wait(0);
        }

        mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 0, 1, 1, 1);
        netPlayer.setConfigFlag(36, true);
        netPlayer.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
        mp.game.streaming.removeAnimDict("anim@mp_point");
      }

      mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Pitch", camPitch);
      mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Heading", camHeading * -1.0 + 1.0);
      mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isBlocked", 0);
      mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isFirstPerson", 0);
    }
  }
});
let pressFinger = false;
exports.pressFinger = pressFinger;
mp.keys.bind(0x42, true, () => {
  if (!_user.user.isLogin()) return;
  if (_gui.gui.isActionGui()) return;
  if (_user.user.isCuff()) return;
  if (_user.user.isDead()) return;
  if (mp.players.local.vehicle) return;
  if (_ragevoice.pressVoice) return;
  if (pressFinger) return;

  if (!mp.gui.cursor.visible) {
    exports.pressFinger = pressFinger = true;
    setTimeout(() => {
      exports.pressFinger = pressFinger = false;
    }, 300);
    pointing.start();
  }
});
mp.keys.bind(0x42, false, () => {
  pointing.stop();
});

function getPlayerByRemoteId(remoteId) {
  let pla = mp.players.atRemoteId(remoteId);

  if (pla == undefined || pla == null) {
    return null;
  }

  return pla;
}
},{"../user":"QE3B","../modules/gui":"bk91","../ragevoice":"VUJK"}],"VUJK":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pressVoice = void 0;
exports.restartVoice = restartVoice;

var _user = require("./user");

var _methods = require("./modules/methods");

var _voice = require("../util/voice");

var _ui = require("./modules/ui");

var _gui = require("./modules/gui");

var _fingerpoint = require("./managers/fingerpoint");

let voiceVolume = 6.0;
let phoneVolume = 11.0;
let currentRadio = "";
const MaxRange = _voice.voiceDistanceRange;
let worldList = [];
let phoneTarget;
let radioList = [];
let block = false;

function restartVoice() {
  if (block) return mp.game.ui.notifications.show('~r~Нельзя так часто перезагружать голосовой чат');
  block = true;
  setTimeout(() => {
    block = false;
  }, 10000);
  mp.voiceChat.cleanupAndReload(true, true, true);
  mp.game.ui.notifications.show('~g~Голосовой чат перезапущен');
}

function removeWorldVoice(nplayer, disconnect = true) {
  if (typeof nplayer == "number") nplayer = mp.players.atRemoteId(nplayer);
  if (!mp.players.exists(nplayer)) return;
  if (nplayer.remoteId == phoneTarget) return;
  if (radioList.indexOf(nplayer.remoteId) > -1) return;
  let idx = worldList.indexOf(nplayer.remoteId);
  if (idx !== -1) worldList.splice(idx, 1);
  if (!disconnect) return;
  mp.events.callSocket("worldVoiceRemove", nplayer);
  nplayer.isListening = false;
  nplayer.voiceVolume = 0.0;
  nplayer.voice3d = false;
}

let radioSpeakersq = [];

function voiceControllerTick() {
  radioSpeakersq = [];
  voiceVolume = _user.user.get('s_voice_vol') * 5;
  phoneVolume = _user.user.get('s_radio_vol') * 5;
  currentRadio = mp.players.local.getVariable('radioVol');
  mp.players.forEach(nplayer => {
    if (nplayer.id == mp.players.local.id) return;

    if (!phoneRadioController(nplayer)) {
      if (!nplayer.handle) {
        nplayer.voiceVolume = 0.0;
        nplayer.voice3d = false;
        return;
      }

      const dist = _methods.methods.distanceToPos(mp.players.local.position, nplayer.position);

      const needSpeak = dist < MaxRange && mp.players.local.dimension == nplayer.dimension;

      if (!needSpeak) {
        if (worldList.indexOf(nplayer.remoteId) > -1) {
          removeWorldVoice(nplayer);
        }

        nplayer.voiceVolume = 0.0;
        nplayer.voice3d = false;
      } else {
        if (worldList.indexOf(nplayer.remoteId) == -1) {
          worldList.push(nplayer.remoteId);
          mp.events.callSocket("worldVoiceAdd", nplayer);
          nplayer.isListening = true;
        }

        if (nplayer.vehicle && nplayer.vehicle == mp.players.local.vehicle) {
          nplayer.voiceVolume = voiceVolume;
          nplayer.voice3d = false;
        } else if (nplayer.vehicle && !mp.game.vehicle.isThisModelABike(nplayer.vehicle.model) && !mp.game.vehicle.isThisModelABicycle(nplayer.vehicle.model) && !mp.game.vehicle.isThisModelAQuadbike(nplayer.vehicle.model) && !mp.game.vehicle.isThisModelABoat(nplayer.vehicle.model)) {
          nplayer.voiceVolume = voiceVolume / 3;
          nplayer.voice3d = true;
        } else {
          if (mp.players.local.vehicle) {
            nplayer.voiceVolume = voiceVolume / 3;
            nplayer.voice3d = true;
          } else {
            let endVolume = (mp.players.local.hasClearLosTo(nplayer.handle, 17) ? voiceVolume : voiceVolume / 4) - voiceVolume / MaxRange * (dist + 1.3);
            if (endVolume > voiceVolume) endVolume = voiceVolume;else if (endVolume < 0) endVolume = 0.0;
            nplayer.voiceVolume = endVolume;
            nplayer.voice3d = true;
          }
        }
      }
    }
  });
  radioSpeakers = radioSpeakersq;
}

setInterval(() => {
  if (!_user.user.isLogin()) return;
  voiceControllerTick();
}, 300);
setInterval(() => {
  mp.events.triggerBrowser("cef:hud:radioSpeakerList", radioSpeakers);
}, 1000);

function phoneRadioController(nplayer) {
  let speak = false;

  if (nplayer) {
    if (currentRadio && currentRadio.length > 3 && currentRadio == nplayer.getVariable('radioVol') && nplayer.getVariable('radioSpeak')) {
      nplayer.voiceVolume = phoneVolume;
      nplayer.voice3d = false;
      speak = true;
      if (!radioSpeakersq.includes(`${nplayer.getVariable('name')} [${nplayer.getVariable('id')}]`)) radioSpeakersq.push(`${nplayer.getVariable('name')} [${nplayer.getVariable('id')}]`);
    }

    if (typeof phoneTarget === "number" && phoneTarget == nplayer.remoteId) {
      nplayer.voiceVolume = phoneVolume;
      nplayer.voice3d = false;
      speak = true;
    }
  }

  if (!speak) {
    if (worldList.indexOf(nplayer.remoteId) == -1) {
      nplayer.voiceVolume = 0.0;
      nplayer.voice3d = false;
    }
  }

  return speak;
}

mp.events.addDataHandler("muted:voice", (entity, value) => {
  if (entity != mp.players.local) return;
  if (!value) return _gui.gui.browser.execute('CEF.hud.lockMicrophone(false)');
  disableMicrophone();
  disableMicrophoneRadio();

  _gui.gui.browser.execute('CEF.hud.lockMicrophone(true)');
});
let pressVoice = false;
exports.pressVoice = pressVoice;

const enableMicrophone = async () => {
  if (!_user.user.isLogin()) return;
  if (_user.user.isDead()) return;
  if (mp.players.local.getVariable('muted:voice')) return;
  if (pressVoice) return;
  if (_fingerpoint.pressFinger) return;
  mp.voiceChat.muted = false;

  _gui.gui.browser.execute('CEF.hud.setMicrophone(true)');

  mp.events.callSocket('startWorldSpeak');
  exports.pressVoice = pressVoice = true;
  setTimeout(() => {
    exports.pressVoice = pressVoice = false;
  }, 300);
  voiceKeyPressed = true;
  mp.game.streaming.requestAnimDict("mp_facial");

  while (!mp.game.streaming.hasAnimDictLoaded("mp_facial")) await _methods.methods.sleep(10);

  mp.players.local.playFacialAnim("mic_chatter", "mp_facial");
};

const disableMicrophone = async () => {
  if (!_user.user.isLogin()) return;
  mp.voiceChat.muted = true;

  _gui.gui.browser.execute('CEF.hud.setMicrophone(false)');

  mp.events.callSocket('stopWorldSpeak');
  voiceKeyPressed = false;
  mp.game.streaming.requestAnimDict("facials@gen_male@variations@normal");

  while (!mp.game.streaming.hasAnimDictLoaded("facials@gen_male@variations@normal")) await _methods.methods.sleep(10);

  mp.players.local.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
};

setInterval(() => {
  if (radioKeyPressed || mp.players.local.getVariable('radioSpeak')) {
    if (mp.keys.isDown(0x14)) return;
    if (mp.keys.isDown(0x72)) return;
    disableMicrophoneRadio();
    return;
  }

  if (voiceKeyPressed) {
    if (mp.keys.isDown(78)) return;
    disableMicrophone();
    return;
  }
}, 1500);
let radioKeyPressed = false;
let voiceKeyPressed = false;

const enableMicrophoneRadio = () => {
  if (!_user.user.isLogin()) return;
  if (_user.user.isCuff()) return;
  if (_user.user.isDead()) return;
  if (radioKeyPressed) return;
  if (mp.players.local.getVariable('muted:voice')) return;

  const freq = _methods.methods.parseInt(_user.user.get('walkietalkie_num').split('.')[0]);

  if (freq == 0) return;

  if (_user.user.get('walkietalkie_num') != "0" && _user.user.get('jail_time') == 0 && !mp.players.local.getVariable('muted:voice')) {
    _gui.gui.browser.execute('CEF.hud.setRadio(true)');

    _ui.ui.radioSoundOn();

    enableMicrophone();
    radioKeyPressed = true;
    mp.events.call("radioSpeakerAdd", _user.user.get("rp_name"));
    mp.events.callSocket("voice.server.enableMic");

    _user.user.playAnimation("random@arrests", "generic_radio_chatter");
  }
};

const disableMicrophoneRadio = () => {
  if (!_user.user.isLogin()) return;

  _ui.ui.radioSoundOff();

  disableMicrophone();
  mp.events.call("radioSpeakerRemove", _user.user.get("rp_name"));
  mp.events.callSocket("voice.server.disableMic");

  _gui.gui.browser.execute('CEF.hud.setRadio(false)');

  _user.user.stopAllAnimation();

  radioKeyPressed = false;
};

mp.keys.bind(0x14, true, enableMicrophoneRadio);
mp.keys.bind(0x14, false, disableMicrophoneRadio);
mp.keys.bind(0x72, true, enableMicrophoneRadio);
mp.keys.bind(0x72, false, disableMicrophoneRadio);
mp.keys.bind(78, true, enableMicrophone);
mp.keys.bind(78, false, disableMicrophone);
mp.events.add({
  "playerStartTalking": nplayer => {
    phoneRadioController(nplayer);
  },
  "playerStartTalkingEvent": async nplayer => {
    if (!nplayer) return;
    nplayer.isSpeaking = true;
    let radioVol = mp.players.local.getVariable("radioVol");
    let nradioVol = nplayer.getVariable("radioVol");
    let nradiospeak = nplayer.getVariable('radioSpeak');

    if (phoneTarget == nplayer.remoteId || radioVol && radioVol == nradioVol && nradiospeak) {
      nplayer.voiceVolume = phoneVolume;
      nplayer.voice3d = false;
    }

    phoneRadioController(nplayer);
    if (!nplayer.handle) return;
    mp.game.streaming.requestAnimDict("mp_facial");

    while (!mp.game.streaming.hasAnimDictLoaded("mp_facial")) await _methods.methods.sleep(10);

    nplayer.playFacialAnim("mic_chatter", "mp_facial");
  },
  "playerStopTalkingEvent": async nplayer => {
    if (!nplayer) return;
    nplayer.isSpeaking = false;
    if (!nplayer.handle) return;
    mp.game.streaming.requestAnimDict("facials@gen_male@variations@normal");

    while (!mp.game.streaming.hasAnimDictLoaded("facials@gen_male@variations@normal")) await _methods.methods.sleep(10);

    nplayer.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal");
  },
  "playerQuit": nplayer => {
    if (!nplayer) return;
    worldList.splice(worldList.indexOf(nplayer.remoteId), 1);
    radioList.splice(radioList.indexOf(nplayer.remoteId), 1);
    if (phoneTarget == nplayer.remoteId) phoneTarget = null;
  },
  "callStop": () => {
    if (worldList.indexOf(phoneTarget) == -1) {
      let nplayer = mp.players.atRemoteId(phoneVolume);
      if (!nplayer) return;
      removeWorldVoice(nplayer);
    }

    phoneTarget = null;
  },
  "callStart": nplayer => {
    if (!mp.players.exists(nplayer)) return;
    phoneTarget = nplayer.remoteId;
  },
  'radioClientConnect': nplayer => {
    if (!mp.players.exists(nplayer)) return;
    if (radioList.indexOf(nplayer) == -1) radioList.push(nplayer);
  },
  'radioClientDisconnect': nplayer => {
    radioList.splice(radioList.indexOf(nplayer), 1);
    if (worldList.indexOf(nplayer) == -1) removeWorldVoice(nplayer);
  },
  'radioClientDisconnectClear': () => {
    radioList = [];
    radioSpeakers = [];
    worldList = [];
    mp.events.triggerBrowser("cef:hud:radioSpeakerClear");
  }
});
let radioSpeakers = [];
},{"./user":"QE3B","./modules/methods":"qXSp","../util/voice":"SYvm","./modules/ui":"zOnK","./modules/gui":"bk91","./managers/fingerpoint":"Tpi6"}],"Qkcg":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixString = fixString;
exports.getColor = getColor;
exports.getFirstColor = getFirstColor;
exports.gtaStrToHtml = gtaStrToHtml;

String.prototype.regexIndexOf = function (regex, startpos) {
  var indexOf = this.substring(startpos || 0).search(regex);
  return indexOf >= 0 ? indexOf + (startpos || 0) : indexOf;
};

String.prototype.isNumberOnly = function () {
  let nm = String(parseInt(this));
  return nm == this;
};

Object.defineProperty(Array.prototype, 'chunk_inefficient', {
  value: function (chunkSize) {
    var array = this;
    return [].concat.apply([], array.map(function (elem, i) {
      return i % chunkSize ? [] : [array.slice(i, i + chunkSize)];
    }));
  }
});

function fixString(string) {
  if (!string) return string;
  string = string.replace(/\(/g, '[').replace(/\)/g, ']');
  string = string.replace(/\`/g, '');
  string = string.replace(/\'/g, '');
  string = string.replace(/\"/g, '');
  string = string.replace(/\\/g, '');
  return string;
}

function gtaStrToHtml(message) {
  if (!message) message = "";
  let str = message;
  let regex = /~[a-z]~/g,
      result,
      indices = [];
  let startColor = false;

  while (result = regex.exec(str)) {
    let replaceString = "";
    let color = getColor(result[0]);

    if (color) {
      if (startColor) replaceString += "</font>";
      if (color != "white") replaceString += `<font color="${color}">`, startColor = true;else startColor = false;
    } else {
      if (result[0] == "~n~") replaceString += "<br/>";
    }

    str = str.replace(result[0], replaceString);
  }

  str = str.replace(/\n/g, "<br/>");
  str = str.replace(/~[a-zA-Z]~/g, "");
  if (startColor) str += "</font>";
  return str;
}

function getFirstColor(message) {
  let fnd = message.substr(0, 3);
  let color = getColor(fnd);
  let string = color ? message.slice(3) : message;
  return {
    string,
    color
  };
}

function getColor(fnd) {
  switch (fnd) {
    case "~r~":
      return "#f51d1d";
      break;

    case "~g~":
      return "#7FFF00";
      break;

    case "~b~":
      return "#1E90FF";
      break;

    case "~y~":
      return "#FFD700";
      break;

    case "~p~":
      return "purple";
      break;

    case "~o~":
      return "orange";
      break;

    case "~c~":
      return "grey";
      break;

    case "~m~":
      return "grey";
      break;

    case "~u~":
      return "black";
      break;

    case "~s~":
      return "white";
      break;

    case "~w~":
      return "white";
      break;

    default:
      return null;
      break;
  }
}
},{}],"BkU5":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menuid = exports.currentMenu = exports.MenuClass = void 0;

var _string = require("../../util/string");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let menuid = 0;
exports.menuid = menuid;
let currentMenu;
exports.currentMenu = currentMenu;

function filter(str) {
  if (!str) return "";
  return (0, _string.gtaStrToHtml)(str).replace(/\n/gi, ' ').replace(/"/gi, "").replace(/'/gi, "");
}

function itemMenuCEF(item) {
  return {
    name: item.name,
    more: item.more,
    desc: item.desc,
    type: item.type,
    rangeselect: item.rangeselect,
    list: item.list,
    listSelected: item.listSelected,
    icon: item.icon
  };
}

class MenuClass {
  constructor(title, subtitle, items, oldsystem = false) {
    var _menuid;

    if (currentMenu) currentMenu.close();
    this.opened = false;
    this.oldsystem = oldsystem;
    this.closedMenu = false;
    this.id = parseInt(`${(_menuid = +menuid, exports.menuid = menuid = _menuid + 1, _menuid)}`);
    this.title = filter(title);
    this.subtitle = filter(subtitle);
    this.items = (items ? items : []).map(item => {
      if (!item.type) item.type = "select";
      return item;
    });
    this.customParams = {};
    this.ItemSelect = {
      onHandle: [],
      on: handler => {
        this.ItemSelect.onHandle.push(handler);
      }
    };
    this.ListChange = {
      onHandle: [],
      on: handler => {
        this.ListChange.onHandle.push(handler);
      }
    };
    this.MenuClose = {
      onHandle: [],
      on: handler => {
        this.MenuClose.onHandle.push(handler);

        this.onclose = () => {
          this.MenuClose.onHandle.map(itm => {
            itm();
          });
        };
      }
    };
    this.IndexChange = {
      onHandle: [],
      on: handler => {
        this.IndexChange.onHandle.push(handler);
      }
    };
  }

  newItem(item) {
    if (!this.items) return;
    if (!item.type) item.type = "select";
    if (item.name) item.name = filter(item.name);
    if (item.more) item.more = filter(String(item.more));
    if (item.desc) item.desc = filter(item.desc);

    if (item.list) {
      item.list.map(q => {
        q = filter(q);
      });
    }

    item.SetRightLabel = text => {
      item.more = text;
      return item;
    };

    item.SetIcon = url => {
      item.icon = url;
      return item;
    };

    this.items.push(item);

    if (this.opened) {
      mp.events.triggerBrowser('menu:addItems', itemMenuCEF(item));
    }

    return item;
  }

  async open(selected = null) {
    setTimeout(() => {
      if (!this.items) return;
      this.customParams.selected = selected ? selected : 0;
      this.items.forEach(item => {
        if (item.type == "list") {
          if (item.Index) item.listSelected = item.Index;
          if (!item.listSelected) item.listSelected = 0;
          item.listSelectedName = item.list[item.listSelected];
        }

        if (item.name) item.name = filter(item.name);
        if (item.more) item.more = filter(String(item.more));
        if (item.desc) item.desc = filter(item.desc);

        if (item.list) {
          item.list.map(q => {
            q = filter(q);
          });
        }
      });
      let data = {
        id: this.id,
        select: this.customParams.selected,
        title: this.title,
        subtitle: this.subtitle,
        items: [...this.items].map(q => {
          return itemMenuCEF(q);
        }),
        sprite: this.spriteName ? this.spriteName : null
      };
      this.opened = true;
      exports.currentMenu = currentMenu = this;
      mp.events.triggerBrowser('menu:open', data);
    }, 100);
  }

  close(fromCef = false) {
    exports.currentMenu = currentMenu = null;
    if (!fromCef) mp.events.triggerBrowser('menu:close');
    if (this.onclose) this.onclose();
  }

  AddMenuItem(title, subtitle) {
    return this.newItem({
      name: title,
      desc: subtitle ? subtitle : ""
    });
  }

  AddMenuItemList(title, list, subtitle) {
    return this.newItem({
      type: "list",
      list,
      name: title,
      desc: subtitle ? subtitle : ""
    });
  }

}

exports.MenuClass = MenuClass;
mp.events.add('menu:close', () => {
  if (!currentMenu) return;
  currentMenu.close(true);
});
mp.events.add('menu:setindex', (id, select) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;
  if (!currentMenu.IndexChange || !currentMenu.IndexChange.onHandle) return;
  currentMenu.IndexChange.onHandle.map(itm => {
    itm(select);
  });
});
mp.events.add('menu:select', (id, select) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;

  if (currentMenu.ItemSelect && currentMenu.ItemSelect.onHandle && currentMenu.ItemSelect.onHandle.length > 0) {
    currentMenu.ItemSelect.onHandle.map(itm => {
      itm(item, select);
    });
    return;
  }

  if (typeof item.onpress == "function") item.onpress(item, select);
});
mp.events.add('menu:onchange', (id, select, value) => {
  if (!currentMenu) return;
  if (currentMenu.id != id) return;
  let item = currentMenu.items[select];
  if (!item) return;

  if (currentMenu.ListChange && currentMenu.ListChange.onHandle && currentMenu.ListChange.onHandle.length > 0) {
    currentMenu.ListChange.onHandle.map(itm => {
      itm(item, value);
    });
  }

  if (item.type == "list" && !item.list[value]) return;
  item.listSelected = value;
  if (item.type == "list") item.listSelectedName = item.list[value];
  if (typeof item.onchange == "function") item.onchange(item.listSelected, item, select);
});
let serverEventClose = false;
mp.events.add('server:menu:close', () => {
  serverEventClose = true;
  if (currentMenu) currentMenu.close();
  serverEventClose = false;
});
let longMenuData;
setTimeout(() => {
  mp.events.register("server:menu:openPartPrepare", (id, title, subtitle, customParams, length, workAnyTime, sprite) => {
    longMenuData = {
      items: [],
      itemsBlock: [],
      id,
      title,
      subtitle,
      customParams,
      length,
      workAnyTime,
      sprite
    };

    for (let id = 0; id < length; id++) longMenuData.itemsBlock.push([]);

    return true;
  });
}, 100);
let reopen = false;
mp.events.add("server:menu:openPartItems", (index, items) => {
  longMenuData.itemsBlock[index].push(...items);
  let q = 0;
  longMenuData.itemsBlock.forEach(items => {
    q += items.length;
  });

  if (q == longMenuData.length) {
    longMenuData.itemsBlock.forEach(items => {
      longMenuData.items.push(...items);
    });
    openMenu(longMenuData.id, longMenuData.title, longMenuData.subtitle, longMenuData.items, longMenuData.customParams, longMenuData.workAnyTime, longMenuData.sprite);
  }

  return true;
});
mp.events.add('server:menu:open', (id, title, subtitle, items, customParams, workAnyTime, sprite) => {
  openMenu(id, title, subtitle, items, customParams, workAnyTime, sprite);
});

function openMenu(id, title, subtitle, items, customParams, workAnyTime = false, sprite) {
  reopen = true;
  let m = new MenuClass(title, subtitle);
  if (sprite) m.spriteName = sprite;
  m.serverid = id;
  items.map(item => {
    m.newItem(_objectSpread(_objectSpread({}, item), {}, {
      onpress: (_, index) => {
        mp.events.callSocket('client:menu:itemSelect', id, index);
      },
      onchange: (val, _, index) => {
        mp.events.callSocket('client:menu:listChange', id, index, val);
      }
    }));
  });

  m.onclose = () => {
    if (serverEventClose) return;
    if (reopen) return;
    if (!customParams.closeEvent) return;
    mp.events.callSocket('client:menu:closeEvent', id);
  };

  m.workAnyTime = workAnyTime;
  m.open(customParams.selected);
  reopen = false;
}
},{"../../util/string":"Qkcg"}],"sFsE":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.walkstylesList = void 0;
const walkstylesList = {
  "Опьянение": [["Слабое опьянение", "drunk@moderatedrunk_head_up"], ["Умеренное опьянение", "drunk@slightlydrunk"], ["Сильное опьянение", "drunk@verydrunk"]],
  "Общие походки": [["Ганстер", "gangster@ng"], ["Батя", "gangster@var_e"], ["Резвый", "gangster@var_i"], ["Шестёрка", "gangster@var_f"], ["Депрессия", "depressed@a"], ["Бомж", "hobo@a"], ["Уныние", "sad@a"], ["Качек", "muscle@a"], ["Шокирован", "shocked@a"], ["Скромность", "shadyped@a"], ["Гудящий", "buzzed"], ["Спешка", "hurry_butch@a"], ["Состоятельный", "money"], ["Быстрая", "quick"], ["Нахально", "sassy"], ["Заносчиво", "arrogant@a"], ["Высокомерная", "tough_guy@"], ["Элегантно", "sexy@a"], ["Важно", "flee@a"], ["Напуган", "scared"], ["Депрессия", "depressed@a"], ["Покалечен", "injured"]]
};
exports.walkstylesList = walkstylesList;
},{}],"Cj84":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shopListElectro = exports.shopList = void 0;

var _sharedData = require("./sharedData");

const shopList = [[275, 700], [280, _sharedData.itemCosts.Bag], [284, _sharedData.itemCosts.BagSmall], [6, 120], [251, 500], [59, 350]];
exports.shopList = shopList;
const shopListElectro = [[8, 200, 8, 'IFruit'], [20008, 1500, 8, 'IFruit X'], [10008, 600, 8, 'Invader'], [2820000, 2500, 282], [7, 350], [59, 350], [47, 1099]];
exports.shopListElectro = shopListElectro;
},{"./sharedData":"bNis"}],"U1Al":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.menuList = void 0;

var _data = require("./modules/data");

var _menu = _interopRequireDefault(require("./modules/menu"));

var _methods = require("./modules/methods");

var _timer = require("./modules/timer");

var _dispatcher = require("./managers/dispatcher");

var _ui = require("./modules/ui");

var _user = require("./user");

var _inventory = require("./inventory");

var _enums = require("./enums");

var _items_old = require("./items_old");

var _stock = require("./stock");

var _chat = require("./chat");

var _business = require("./business");

var _condo = require("./condo");

var _coffer = require("./coffer");

var _vehicles = require("./vehicles");

var _builder = require("./jobs/builder");

var _cleaner = require("./jobs/cleaner");

var _roadWorker = require("./jobs/roadWorker");

var _mainer = require("./jobs/mainer");

var _licenseCenter = require("./business/licenseCenter");

var _bugstars = require("./jobs/bugstars");

var _sunBleach = require("./jobs/sunBleach");

var _waterPower = require("./jobs/waterPower");

var _gardener = require("./jobs/gardener");

var _photo = require("./jobs/photo");

var _bus = require("./jobs/bus");

var _mail = require("./jobs/mail");

var _cloth = require("./business/cloth");

var _burgetshot = require("./jobs/burgetshot");

var _gr = require("./jobs/gr6");

var _taxi = require("./jobs/taxi");

var _trucker = require("./jobs/trucker");

var _phone = require("./phone");

var _fly = require("./fly");

var _chests = require("./modules/chests");

var _sharedData = require("../util/sharedData");

var _savezone = require("./modules/savezone");

var _level = require("../util/level");

var _gui = require("./modules/gui");

var _ragevoice = require("./ragevoice");

var _ach = require("./modules/ach");

var _weapons = require("../util/weapons");

var _inventory2 = require("../util/inventory");

var _menu2 = require("./managers/menu");

var _walkstyles = require("../util/walkstyles");

var _shop = require("../util/shop");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let items = _items_old.items_old;
let passProtect = 0;
let passProtectMax = 5;
let healCd = false;
setInterval(() => {
  if (passProtect > 0) passProtect--;
}, 10000);
let walkieState = false;
mp.events.add('setTag', tag => {
  tag = _methods.methods.removeQuotes(tag);
  if (tag == '') mp.game.ui.notifications.show(`~y~Вы удалили тег`);else mp.game.ui.notifications.show(`~y~Вы установили тег - ~s~${tag}`);

  _user.user.set('tag', tag);

  _user.user.setData('tag', tag);

  _user.user.saveAccount();

  mp.events.callSocket('tablet:openfraction');
});
mp.events.add('showVehicleAutopilotMenu', () => menuList.showVehicleAutopilotMenu());
mp.events.add('showVehicleDoMenu', () => menuList.showVehicleDoMenu());
let skin = {};
let test = false;
mp.events.add("server:test", () => {
  test = true;
});
mp.events.add("report", () => {
  report();
});

async function report() {
  if (reportWait) return mp.game.ui.notifications.show('~r~Подождите 60 секунд');
  let text = await _menu.default.Menu.GetUserInput('Опишите жалобу', '', 300);

  if (text != '') {
    mp.events.callRemote('server:sendReport', text);
    reportWait = true;
    setTimeout(() => {
      reportWait = false;
    }, 60000);
  }
}

mp.events.add("godmode:switch", () => {
  mp.players.local.setInvincible(!_user.user.godmode);
  _user.user.godmode = !_user.user.godmode;
  mp.game.ui.notifications.show("GodMode " + _user.user.godmode ? "~g~Включен" : "~r~Выключен");
});
let reportWait = false;
let helperWait = false;
mp.events.add('client:user:openCustomization', (x, y, z, rot, cacheData) => {
  try {
    _user.user.updateCharacterFace();

    _user.user.updateCharacterCloth();

    let cam = mp.cameras.new('customization', new mp.Vector3(8.243752, 527.4373, 171.6173), new mp.Vector3(0, 0, 0), 20);
    cam.pointAtCoord(9.66692, 528.34783, 171.2);
    cam.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    setTimeout(function () {
      _user.user.hideLoadDisplay();
    }, 1000);
  } catch (e) {
    _methods.methods.debug('openCustomization', e);
  }
});

let updateSex = function (idx) {
  if (idx != undefined) _user.user.setPlayerModel(idx == 0 ? 'mp_m_freemode_01' : 'mp_f_freemode_01');else _user.user.setPlayerModel(_user.user.getSex() == 0 ? 'mp_m_freemode_01' : 'mp_f_freemode_01');
  setTimeout(function () {
    _user.user.updateCharacterFace(true);
  }, 100);
};

let menuList = {
  customIsShow: false,
  customX: 0,
  customY: 0,
  customZ: 0,
  customRot: 0,
  customCam: null,
  customData: new Map(),
  showCondoBuyMenu: async function (h) {
    let menu = _menu.default.Menu.Create(`№${h.get('id')}`, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`);

    let buyHouseItem = menu.AddMenuItem(`Купить квартиру за ~g~$${_methods.methods.numberFormat(h.get('price'))}`);
    let enterHouseItem = menu.AddMenuItem('~g~Осмотреть квартиру');

    if (_user.user.get('job') == 'mail' || _user.user.get('job') == 'mail2') {
      if (!(await _data.Container.Has(h.get('id'), 'isMail2'))) menu.AddMenuItem('~g~Положить почту').doName = h.get('id');else menu.AddMenuItem('~o~Дом уже обслуживался');
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();

      if (item == enterHouseItem) {
        _condo.condo.enter(h.get('id'), h.get('int_x'), h.get('int_y'), h.get('int_z'));
      } else if (item == buyHouseItem) {
        _condo.condo.buy(h.get('id'));
      }

      if (item.doName) _mail.mail.sendMail2(parseInt(item.doName));
    });
  },
  showCondoInMenu: function (h) {
    let menu = _menu.default.Menu.Create(`№${h.get('id')}`, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`);

    let setPinItem = null;
    let resetPinItem = null;
    if (h.get('id_user') == _user.user.getCacheData().get('id') && h.get('pin') > 0) setPinItem = menu.AddMenuItem('~y~Сменить пинкод');
    let exitHouseItem = menu.AddMenuItem('~g~Выйти из квартиры');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item == exitHouseItem) {
        _condo.condo.exit(h.get('x'), h.get('y'), h.get('z'));
      }

      if (item == setPinItem) {
        let pass = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Пароль', '', 5));

        if (pass < 1) {
          mp.game.ui.notifications.show('~r~Пароль должен быть больше нуля');
          return false;
        }

        mp.game.ui.notifications.show('~g~Ваш новый пароль: ~s~' + pass);

        _condo.condo.updatePin(h.get('id'), pass);
      }

      if (item == resetPinItem) {
        mp.game.ui.notifications.show('~g~Пароль сброшен');

        _condo.condo.updatePin(h.get('id'), 0);
      }
    });
  },
  showCondoOutMenu: async function (h) {
    let menu = _menu.default.Menu.Create(``, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`, false, false, false, 'house', 'house');

    let infoItem = menu.AddMenuItem(`~b~Владелец:~s~ ${h.get('name_user')}`);
    let enterHouseItem = menu.AddMenuItem('~g~Войти');

    if (_user.user.get('job') == 'mail' || _user.user.get('job') == 'mail2') {
      if (!(await _data.Container.Has(h.get('id'), 'isMail2'))) menu.AddMenuItem('~g~Положить почту').doName = h.get('id');else menu.AddMenuItem('~o~Дом уже обслуживался');
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item == enterHouseItem) {
        if (h.get('pin') > 0 && _user.user.get('id') != h.get('id_user')) {
          if (passProtect >= passProtectMax) return _user.user.notify("~r~Подождите перед вводом пароля");
          passProtect++;

          let pass = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Введите пинкод', '', 10, 'password'));

          if (pass == h.get('pin')) _condo.condo.enter(h.get('id'), h.get('int_x'), h.get('int_y'), h.get('int_z'));else mp.game.ui.notifications.show('~r~Вы ввели не правильный пинкод');
        } else _condo.condo.enter(h.get('id'), h.get('int_x'), h.get('int_y'), h.get('int_z'));
      }

      if (item.doName) _mail.mail.sendMail2(parseInt(item.doName));
    });
  },
  showStockBuyMenu: function (h) {
    let menu = _menu.default.Menu.Create(`№${h.get('id')}`, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`);

    let buyHouseItem = menu.AddMenuItem(`Купить склад за ~g~$${_methods.methods.numberFormat(h.get('price'))}`);
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();

      if (item == buyHouseItem) {
        _stock.stock.buy(h.get('id'));
      }
    });
  },
  showStockOutMenu: function (h) {
    let menu = _menu.default.Menu.Create(`№${h.get('id')}`, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`);

    let infoItem = menu.AddMenuItem(`~b~Владелец:~s~ ${h.get('user_name')}`);
    let enterHouseItem = menu.AddMenuItem('~g~Войти');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item == enterHouseItem) {
        if (_user.user.get('id') != h.get('user_id')) {
          if (passProtect >= passProtectMax) return _user.user.notify("~r~Подождите перед вводом пароля");
          passProtect++;

          let pass = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Введите пинкод', '', 10, 'password'));

          if (pass == h.get('pin1')) _stock.stock.enter(h.get('id'));else {
            _stock.stock.addLog(_user.user.get('rp_name'), `Ввёл не правильно пинкод (${pass})`, h.get('id'));

            mp.game.ui.notifications.show('~r~Вы ввели не правильный пинкод');
          }
        } else _stock.stock.enter(h.get('id'));
      }
    });
  },
  showStockInMenu: function (h) {
    let menu = _menu.default.Menu.Create(`№${h.get('id')}`, `~b~Адрес: ~s~${h.get('address')} ${h.get('id')}`);

    let exitHouseItem = menu.AddMenuItem('~g~Выйти');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item == exitHouseItem) {
        _stock.stock.exit(h.get('x'), h.get('y'), h.get('z'));
      }
    });
  },
  showApartmentListMenu: function (countFloor, buildId) {
    let menu = _menu.default.Menu.Create(``, `~b~Меню апартаментов`, false, false, false, 'house', 'house');

    let exitItem = null;
    if (mp.players.local.dimension != 0) exitItem = menu.AddMenuItem(`~g~Улица`);

    for (let i = 1; i <= countFloor; i++) menu.AddMenuItem(`Этаж №${i}`).floor = i;

    if (buildId == 32) {
      let roofItem = menu.AddMenuItem(`~g~Крыша`);
      roofItem.x = 387.8792;
      roofItem.y = -60.072224;
      roofItem.z = 121.5355;
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      if (index == 0 && mp.players.local.dimension != 0) {
        mp.events.callRemote('server:apartments:exit', buildId);
        return;
      } else if (item.x) {
        _user.user.teleport(item.x, item.y, item.z);

        _user.user.setVirtualWorld(0);

        return;
      }

      mp.events.callRemote('server:events:floorList', item.floor, buildId);
    });
  },
  showApartmentInfoMenu: function (data) {
    let menu = _menu.default.Menu.Create(``, `~b~Владелец: ~s~${data.get('user_id') == 0 ? 'Государство' : data.get('user_name')}`, false, false, false, 'house', 'house');

    let exitItem = menu.AddMenuItem(`~g~Выйти`);
    let buyItem = null;
    if (data.get('user_id') == 0) buyItem = menu.AddMenuItem(`~g~Купить`, `Цена: ~g~$${_methods.methods.numberFormat(data.get('price'))}`);
    if (data.get('pin') != 0 && data.get('user_id') == _user.user.get('id')) menu.AddMenuItem(`~y~Сменить пинкод`).doName = 'changePin';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item == exitItem) mp.events.callRemote('server:events:showApartmentListMenu', data.get('build_id'));else if (item == buyItem) mp.events.callRemote('server:apartments:buy', data.get('id'));else if (item.doName == 'changePin') {
        let pass = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Пинкод', '', 5));

        if (pass == 0) {
          mp.game.ui.notifications.show('~r~Можно ставить только цифры');
          return;
        }

        mp.game.ui.notifications.show('~g~Ваш новый пинкод: ~s~' + pass);
        mp.events.callRemote('server:apartments:updatePin', data.get('id'), pass);
      } else if (item.doName == 'resetPin') {
        mp.game.ui.notifications.show('~g~Пароль сброшен');
        mp.events.callRemote('server:apartments:updatePin', data.get('id'), 0);
      }
    });
  },
  showApartmentFloorListMenu: function (data) {
    let menu = _menu.default.Menu.Create(``, `~b~Список апартаментов`, false, false, false, 'house', 'house');

    data.forEach(function (item, i, arr) {
      let ownerName = item[1] == '' ? 'Государство' : item[1];
      menu.AddMenuItem(`Апартаменты №${item[0]}`, `~b~Владелец: ~s~${ownerName}`).apartId = item[0];
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      let pin = _methods.methods.parseInt(await _data.Container.Get(-100000 + _methods.methods.parseInt(item.apartId), 'pin'));

      if (pin != 0) {
        if (passProtect >= passProtectMax) return _user.user.notify("~r~Подождите перед вводом пароля");
        passProtect++;

        let pass = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Введите пинкод', '', 10, 'password'));

        if (pass == pin) mp.events.callRemote('server:apartments:enter', _methods.methods.parseInt(item.apartId));else {
          mp.game.ui.notifications.show('~r~Вы ввели не правильный пинкод');
        }
      } else mp.events.callRemote('server:apartments:enter', _methods.methods.parseInt(item.apartId));
    });
  },
  showVehicleMenu: async function (data) {
    if (!mp.players.local.vehicle) return;

    let vInfo = _methods.methods.getVehicleInfo(mp.players.local.vehicle.model);

    let ownerName = 'Государство';
    if (data.get('id_user') > 0) ownerName = data.get('user_name');
    if (data.get('fraction_id') > 0) ownerName = _methods.methods.getFractionName(data.get('fraction_id'));
    if (data.get('job') > 0) ownerName = _methods.methods.getCompanyName(data.get('job'));

    let menu = _menu.default.Menu.Create(`Транспорт`, `~b~Владелец: ~s~${ownerName}`);

    if (data.get('job') != 'bgstar' && data.get('job') != 'sunb' && data.get('job') != 'water') {
      switch (_user.user.get('job')) {
        case 'trucker1':
          if (vInfo.class_name == 'Vans') {
            menu.AddMenuItem('~g~Список заказов').doName = 'trucker:getList';
            menu.AddMenuItem('~b~Частота рации:~s~ ').SetRightLabel('266.001');
            if (_trucker.trucker.isProcess()) menu.AddMenuItem('~r~Завершить досрочно рейс', 'Штраф ~r~$500').doName = 'trucker:stop';
          }

          break;

        case 'trucker2':
          if (vInfo.display_name == 'Benson' || vInfo.display_name == 'Mule' || vInfo.display_name == 'Mule2' || vInfo.display_name == 'Mule3' || vInfo.display_name == 'Pounder') {
            menu.AddMenuItem('~g~Список заказов').doName = 'trucker:getList';
            menu.AddMenuItem('~b~Частота рации:~s~ ').SetRightLabel('266.002');
            if (_trucker.trucker.isProcess()) menu.AddMenuItem('~r~Завершить досрочно рейс', 'Штраф ~r~$500').doName = 'trucker:stop';
          }

          break;

        case 'trucker3':
          if (vInfo.display_name == 'Hauler' || vInfo.display_name == 'Packer' || vInfo.display_name == 'Phantom') {
            menu.AddMenuItem('~g~Список заказов').doName = 'trucker:getList';
            menu.AddMenuItem('~b~Частота рации:~s~ ').SetRightLabel('266.003');
            if (_trucker.trucker.isProcess()) menu.AddMenuItem('~r~Завершить досрочно рейс', 'Штраф ~r~$500').doName = 'trucker:stop';
          }

          break;
      }
    }

    if (_user.user.get('job') == data.get('job')) {
      menu.AddMenuItem('~g~Открыть~s~ / ~r~Закрыть~s~').eventName = 'server:vehicle:lockStatus';

      switch (data.get('job')) {
        case 'bshot':
          menu.AddMenuItem('~g~Получить задание').doName = 'bshot:find';
          menu.AddMenuItem('~g~Взять заказ').doName = 'takeTool';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Данная работа служит для того, чтобы вы привыкли к управлению и динамике сервера, дальше будет интересней.';
          break;

        case 'bgstar':
          menu.AddMenuItem('~g~Получить задание').doName = 'bugstar:find';
          menu.AddMenuItem('~g~Взять инструменты').doName = 'takeTool';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Данная работа служит для того, чтобы вы привыкли к управлению и динамике сервера, дальше будет интересней.';
          break;

        case 'sunb':
          menu.AddMenuItem('~g~Получить задание').doName = 'sunb:find';
          menu.AddMenuItem('~g~Взять инструменты').doName = 'takeTool';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Данная работа служит для того, чтобы вы привыкли к управлению и динамике сервера, дальше будет интересней.';
          break;

        case 'water':
          menu.AddMenuItem('~g~Получить задание').doName = 'water:find';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Данная работа служит для того, чтобы вы привыкли к управлению и динамике сервера, дальше будет интересней.';
          break;

        case 'photo':
          menu.AddMenuItem('~g~Получить задание').doName = 'photo:find';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Получайте и выполняйте задания от начальника';
          break;

        case 'three':
          menu.AddMenuItem('~g~Получить задание').doName = 'three:find';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Получайте и выполняйте задания от начальника';
          break;

        case 'bus1':
          menu.AddMenuItem('~g~Начать рейс').doName = 'bus:start1';
          menu.AddMenuItem('~y~Завершить рейс', 'Завершение рейса досрочно').doName = 'bus:stop';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Начните рейс и вперед зарабатывать!';
          break;

        case 'bus2':
          menu.AddMenuItem('~g~Начать рейс').doName = 'bus:start2';
          menu.AddMenuItem('~y~Завершить рейс', 'Завершение рейса досрочно').doName = 'bus:stop';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Начните рейс и вперед зарабатывать!';
          break;

        case 'bus3':
          menu.AddMenuItem('~g~Начать рейс').doName = 'bus:start3';
          menu.AddMenuItem('~y~Завершить рейс', 'Завершение рейса досрочно').doName = 'bus:stop';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Начните рейс и вперед зарабатывать!';
          break;

        case 'gr6':
          menu.AddMenuItem('~g~Меню инкассатора').doName = 'gr6:menuVeh';
          break;

        case 'mail':
        case 'mail2':
          menu.AddMenuItem('~g~Взять почту из транспорта').doName = 'mail:take';
          menu.AddMenuItem('~b~Справка').sendChatMessage = 'Возьмите почту из транспорта, далее езжай к любым жилым домам, подходи к дому нажимай E и клади туда почту.';
          break;

        case 'taxi1':
        case 'taxi2':
          menu.AddMenuItem('~g~Диспетчерская таксопарка').doName = 'taxi:dispatch';
          menu.AddMenuItem('~g~Получить задание').doName = 'taxi:start';
          break;
      }
    }

    if (data.get('job') == 'gr6') {
      menu.AddMenuItem('~y~Ограбить транспорт').doName = 'gr6:grab';
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      } else if (item.sendChatMessage) mp.gui.chat.push(`${item.sendChatMessage}`);else if (item.doName == 'chests:grab') _chests.chests.grab();else if (item.doName == 'taxi:dispatch') menuList.showDispatchTaxiMenu();else if (item.doName == 'mail:take') _mail.mail.takeMail();else if (item.doName == 'taxi:start') _taxi.taxi.start();else if (item.doName == 'bus:start1') _bus.bus.start(1);else if (item.doName == 'bus:start2') _bus.bus.start(2);else if (item.doName == 'bus:start3') _bus.bus.start(3);else if (item.doName == 'bus:stop') _bus.bus.stop();else if (item.doName == 'three:find') _gardener.gardener.start();else if (item.doName == 'gr6:grab') _gr.gr6.grab();else if (item.doName == 'gr6:menuVeh') mp.events.callRemote('gr6:menuVeh');else if (item.doName == 'gr6:getHelp') {
        _dispatcher.dispatcher.send(`Код 0`, `${_user.user.get('rp_name')} - инкассация требует поддержки`);

        mp.game.ui.notifications.show('~b~Вызов был отправлен');
      } else if (item.doName == 'photo:find') _photo.photo.start();else if (item.doName == 'bshot:find') _burgetshot.burgershot.findHouse();else if (item.doName == 'bugstar:find') _bugstars.bugstars.findHouse();else if (item.doName == 'sunb:find') _sunBleach.sunBleach.findHouse();else if (item.doName == 'water:find') _waterPower.waterPower.findHouse();else if (item.doName == 'trucker:getList') mp.events.callRemote('server:trucker:showMenu');else if (item.doName == 'trucker:stop') _trucker.trucker.stop();else if (item.doName == 'takeTool') _user.user.takeTool();else if (item.doName == 'showVehicleAutopilotMenu') menuList.showVehicleAutopilotMenu();else if (item.eventName == 'server:vehicle:neonStatus') mp.events.callRemote(item.eventName);else if (item.eventName == 'server:vehicle:lockStatus') {
        if (data.get('fraction_id') > 0) {
          if (data.get('fraction_id') == _user.user.get('fraction_id')) mp.events.callRemote(item.eventName);else mp.game.ui.notifications.show('~r~У Вас нет ключей от транспорта');
        } else mp.events.callRemote(item.eventName);
      } else if (item.eventName == 'server:vehicle:engineStatus') {
        _user.user.engineVehicle();
      } else if (item.doName == 'showVehicleDoMenu') {
        menuList.showVehicleDoMenu();
      } else if (item.eventName == 'server:vehicleFreeze') {
        if (_methods.methods.getCurrentSpeed() > 4) {
          mp.game.ui.notifications.show('~r~Скорость должна быть меньше 5 км в час');
          return;
        }

        mp.events.callSocket('server:vehicleFreeze');
        let isFreeze = !mp.players.local.vehicle.getVariable('freezePosition');
        if (isFreeze === true) mp.game.ui.notifications.show('~g~Вы поставили якорь');else mp.game.ui.notifications.show('~y~Вы сняли якорь');
      } else if (item.eventName == 'server:vehicle:park') {
        if (!mp.players.local.vehicle) return mp.game.ui.notifications.show('~r~Вы должны быть в транспорте');
        if (mp.players.local.vehicle.getSpeed() > 1) return mp.game.ui.notifications.show('~r~Транспорт не должен быть в движении');
        if ((0, _savezone.inGreenZone)()) return mp.game.ui.notifications.show('~r~Нельзя парковать транспорт в зелёной зоне');

        _menu.default.Menu.HideMenu();

        mp.events.callSocket(item.eventName);
      } else if (item.eventName == 'server:autosalon:unrent') {
        _menu.default.Menu.HideMenu();

        mp.events.callSocket(item.eventName);
      } else if (item.eventName == 'server:vehicle:setNeonColor') {
        _menu.default.Menu.HideMenu();

        mp.game.ui.notifications.show('Введите цвет ~r~R~g~G~b~B');
        let r = await _menu.default.Menu.GetUserInput('R', '', 3);
        let g = await _menu.default.Menu.GetUserInput('G', '', 3);
        let b = await _menu.default.Menu.GetUserInput('B', '', 3);
        if (r > 255) r = 255;
        if (g > 255) g = 255;
        if (b > 255) b = 255;
        mp.events.callRemote(item.eventName, _methods.methods.parseInt(r), _methods.methods.parseInt(g), _methods.methods.parseInt(b));
      } else if (item.eventName) {
        _menu.default.Menu.HideMenu();

        mp.events.callRemote(item.eventName);
      }
    });
  },
  showVehicleAutopilotMenu: function () {
    let vInfo = _methods.methods.getVehicleInfo(mp.players.local.vehicle.model);

    if (vInfo.fuel_min != 0) return;

    let menu = _menu.default.Menu.Create(`Транспорт`, `~b~Меню автопилота`);

    menu.AddMenuItem('~g~Включить').doName = 'enable';
    menu.AddMenuItem('~y~Выключить').doName = 'disable';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();

      if (item.doName == 'enable') {
        let vInfo = _methods.methods.getVehicleInfo(mp.players.local.vehicle.model);

        if (vInfo.fuel_min != 0) return;

        _vehicles.vehicles.enableAutopilot();
      } else if (item.doName == 'disable') {
        _vehicles.vehicles.disableAutopilot();
      }
    });
  },
  showVehicleDoMenu: function () {
    try {
      let menu = _menu.default.Menu.Create(`Транспорт`, `~b~Нажмите Enter чтобы применить`);

      let listEn = ['Выкл', 'Вкл'];
      let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');
      let listItem = menu.AddMenuItemList('Аварийка', listEn, 'Поворотники включаются на [ и ]');
      listItem.doName = 'twoIndicator';
      listItem.Index = actualData.IndicatorRightToggle === true && actualData.IndicatorLeftToggle === true ? 1 : 0;
      listItem = menu.AddMenuItemList('Свет в салоне', listEn, 'Днём очень плохо видно');
      listItem.doName = 'light';
      listItem.Index = actualData.InteriorLight === true ? 1 : 0;
      let closeItem = menu.AddMenuItem('~r~Закрыть');
      let listIndex = 0;
      menu.ListChange.on((item, index) => {
        listIndex = index;
      });
      menu.ItemSelect.on((item, index) => {
        if (item == closeItem) _menu.default.Menu.HideMenu();

        if (item.doName == 'light') {
          _vehicles.vehicles.setInteriorLightState(listIndex == 1);
        }

        if (item.doName == 'lightTaxi') {
          _vehicles.vehicles.setTaxiLightState(listIndex == 1);
        }

        if (item.doName == 'twoIndicator') {
          _vehicles.vehicles.setIndicatorLeftState(listIndex == 1);

          _vehicles.vehicles.setIndicatorRightState(listIndex == 1);
        }
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  showMainMenu: function () {
    let menu = _menu.default.Menu.Create(`Меню`, `~b~Меню помощи`);

    menu.AddMenuItem('Персонаж').SetIcon('man').doName = 'showPlayerMenu';
    menu.AddMenuItem('Транспорт').SetIcon('hatchback').eventName = 'onKeyPress:2';
    menu.AddMenuItem('Список игроков').SetIcon('teamwork').eventName = 'server:users:list';
    if (_user.user.get('fraction_id2') > 0) menu.AddMenuItem('Неоф. Организация').SetIcon('Item_45').doName = 'showFraction2Menu';
    menu.AddMenuItem('Помощь').SetIcon('help').doName = 'showHelpMenu';
    menu.AddMenuItem('GPS').SetIcon('map').doName = 'showGpsMenu';
    menu.AddMenuItem('Настройки').SetIcon('settings').doName = 'showSettingsMenu';
    menu.AddMenuItem('~y~Задать вопрос').SetIcon('ask').eventName = 'server:sendAsk';
    if (_user.user.get('helper_level') > 0) menu.AddMenuItem('~y~Ответить на вопрос').SetIcon('ask').eventName = 'server:sendAnswerAsk';
    menu.AddMenuItem('~r~Жалоба (/report)').SetIcon('report').eventName = 'server:sendReport';
    if (_user.user.get('admin_level') > 0) menu.AddMenuItem('~r~Ответить на жалобу').SetIcon('report').eventName = 'server:sendAnswerReport';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.eventName != undefined) {
        if (item.eventName == 'server:sendAsk') {
          if (helperWait) return mp.game.ui.notifications.show('~r~Подождите 60 секунд');
          ;
          let text = await _menu.default.Menu.GetUserInput('Задайте вопрос', '', 300);

          if (text != '') {
            mp.events.callRemote('server:sendAsk', text);
            helperWait = true;
            setTimeout(() => {
              helperWait = false;
            }, 60000);
          }
        } else if (item.eventName == 'server:sendAnswerAsk') {
          let id = await _menu.default.Menu.GetUserInput('ID', '', 5);
          let text = await _menu.default.Menu.GetUserInput('Ответ', '', 300);
          if (text != '') mp.events.callRemote('server:sendAnswerAsk', _methods.methods.parseInt(id), text);
        } else if (item.eventName == 'server:sendReport') {
          report();
        } else if (item.eventName == 'server:sendAnswerReport') {
          let id = await _menu.default.Menu.GetUserInput('ID', '', 5);
          let text = await _menu.default.Menu.GetUserInput('Ответ', '', 300);
          if (text != '') mp.events.callRemote('server:sendAnswerReport', _methods.methods.parseInt(id), text);
        } else mp.events.callRemote(item.eventName);
      } else if (item.doName == 'showSettingsMenu') menuList.showSettingsMenu();else if (item.doName == 'showHelpMenu') menuList.showHelpMenu();else if (item.doName == 'showGpsMenu') menuList.showGpsMenu();else if (item.doName == 'showPlayerMenu') menuList.showPlayerMenu();else if (item.doName == 'showFraction2Menu') menuList.showFraction2Menu();
    });
  },
  showFraction2Menu: async function () {
    let frType = await _data.Container.Get(mp.players.local.remoteId, 'fractionType');

    let menu = _menu.default.Menu.Create(`Организация`, `~b~Меню организации`);

    menu.AddMenuItem('Написать членам организации').doName = 'sendFractionMessage';
    if (_user.user.isLeader2() || _user.user.isSubLeader2()) menu.AddMenuItem('~g~Принять в организацию').doName = 'showFraction2MemberInviteMenu';

    if (frType == 3 || frType == 4) {
      if (_user.user.get('rank2') > 9) menu.AddMenuItem('Связаться с мафией').doName = 'sendMafiaMessage';
    }

    menu.AddMenuItem('Установить тег').doName = 'setTag';
    menu.AddMenuItem('Список членов организации').eventName = 'server:showMember2ListMenu';
    if (frType == 3 || frType == 4) menu.AddMenuItem('~y~Отмыть деньги').doName = 'clearMoney';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();else if (item.doName == 'sendFractionMessage') {
        let text = await _menu.default.Menu.GetUserInput('Текст', '', 55);
        if (text == '') return;

        _methods.methods.notifyWithPictureToFraction2(_user.user.get('rp_name'), `Организация`, text, 'CHAR_DEFAULT', _user.user.get('fraction_id2'));
      } else if (item.doName == 'sendMafiaMessage') {
        if (_user.user.get('phone_code') == 0) {
          mp.game.ui.notifications.show(`~r~У Вас нет телефона`);
          return;
        }

        let text = await _menu.default.Menu.GetUserInput('Текст', '', 55);
        if (text == '') return;

        let phone = _user.user.get('phone_code') + '-' + _user.user.get('phone');

        _methods.methods.notifyWithPictureToFraction(phone, `Связь`, text, 'CHAR_DEFAULT', 8);

        _methods.methods.notifyWithPictureToFraction(phone, `Связь`, text, 'CHAR_DEFAULT', 9);

        _methods.methods.notifyWithPictureToFraction(phone, `Связь`, text, 'CHAR_DEFAULT', 10);

        _methods.methods.notifyWithPictureToFraction(phone, `Связь`, text, 'CHAR_DEFAULT', 11);

        mp.game.ui.notifications.show(`~y~Сообщение было отправлено`);
      } else if (item.doName == 'showFraction2MemberInviteMenu') menuList.showPlayerInvite2Menu();else if (item.eventName == 'server:showMember2ListMenu') mp.events.callRemote(item.eventName);else if (item.doName == 'setTag') {
        let tag = await _menu.default.Menu.GetUserInput('Тег', '', 16);
        tag = _methods.methods.removeQuotes(tag);
        if (tag == '') mp.game.ui.notifications.show(`~y~Вы удалили тег`);else mp.game.ui.notifications.show(`~y~Вы установили тег - ~s~${tag}`);

        _user.user.set('tag', tag);

        _user.user.setData('tag', tag);

        _user.user.saveAccount();
      } else if (item.doName == 'clearMoney') {
        _user.user.setWaypoint(-139, -631);

        mp.game.ui.notifications.show(`~y~Езжайте в Аркадиус и отмывайте деньги в вашем офисе`);
      }
    });
  },
  showAdminMenu: function () {
    let menu = _menu.default.Menu.Create(``, `~b~Админ меню`, false, false, false, 'admin', 'admin', true);

    menu.AddMenuItem('~b~Админ-меню ~s~(~g~Beta~s~)').doName = 'adminNewMenu';

    if (_user.user.isAdmin() && mp.players.local.getVariable('enableAdmin') === true) {
      menu.AddMenuItem('Спавн ТС').doName = 'spawnVeh';
      menu.AddMenuItem('Цвет ТС').doName = 'colorVeh';
      menu.AddMenuItem('Одежда').doName = 'cloth';
      menu.AddMenuItem('Noclip (old)').doName = 'noclipOld';
      menu.AddMenuItem('~b~Дополнительные данные игрока').doName = 'switchHpAp';
      menu.AddMenuItem('~b~Дополнительные данные ТС').doName = 'advancedData';
      menu.AddMenuItem('Уведомление').doName = 'notify';
      menu.AddMenuItem('Посадить в тюрьму').doName = 'jail';
      menu.AddMenuItem('Кикнуть игрока').doName = 'kick';
      menu.AddMenuItem('Телепортироваться к игроку').doName = 'tptoid';
      menu.AddMenuItem('Телепортировать игрока к себе').doName = 'tptome';
      menu.AddMenuItem('Godmode ON/OFF').doName = 'godmode';
      menu.AddMenuItem('Телепорт на метку').doName = 'teleportToWaypoint';
      menu.AddMenuItem('Пофиксить тачку').doName = 'fixvehicle';
      menu.AddMenuItem('Зареспавнить ближайший ТС').doName = 'respvehicle';
      menu.AddMenuItem('Удалить ближайший ТС').doName = 'deletevehicle';
      menu.AddMenuItem('Перевернуть ближайший ТС').doName = 'flipVehicle';
      menu.AddMenuItem('Сменить ID').eventName = 'server:user:changeIdadmin';
      menu.AddMenuItem('Прогрузка ID', '15 по умолчанию').eventName = 'client:distId';
      menu.AddMenuItem('Оказать первую помощь').eventName = 'server:user:healFirstAdmin';
      menu.AddMenuItem('Дефибриллятор').eventName = 'server:user:adrenaline';

      if (_user.user.isAdmin(5)) {
        menu.AddMenuItem('Коорды').doName = 'server:user:getPlayerPos';
        menu.AddMenuItem('Одежда').doName = 'debug';
      }

      menu.AddMenuItem('~y~Выключить админку').doName = 'disableAdmin';
    } else {
      menu.AddMenuItem('~y~Включить админку').doName = 'enableAdmin';
    }

    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      if (item.doName == 'adminNewMenu') mp.events.callRemote('admin:menu');
      if (item.doName == 'switchHpAp') _user.user.showhpap = !_user.user.showhpap;

      if (item.doName == 'advancedData') {
        _user.user.adminAdvancedData = !_user.user.adminAdvancedData;
        mp.game.ui.notifications.show('AdvancedData: ' + (_user.user.adminAdvancedData ? "~g~On" : "~r~Off"));
      }

      if (item.doName == 'noclipOld') (0, _fly.noClipSwitch)();
      if (item.doName == 'enableAdmin') _user.user.setVariable('enableAdmin', true), _menu.default.Menu.HideMenu();

      if (item.doName == 'disableAdmin') {
        _user.user.setVariable('enableAdmin', false);

        if (_user.user.godmode) mp.players.local.setInvincible(false), _user.user.godmode = false;

        _menu.default.Menu.HideMenu();
      }

      ;

      if (item.eventName == 'server:user:changeIdadmin') {
        _menu.default.Menu.HideMenu();

        let id = await _menu.default.Menu.GetUserInput('Новый ID', '', 10);
        mp.events.callRemote(item.eventName, _methods.methods.parseInt(id));
      } else if (item.eventName == 'client:distId') {
        _menu.default.Menu.HideMenu();

        let id = await _menu.default.Menu.GetUserInput('Расстояние', '', 10);
        mp.events.call(item.eventName, _methods.methods.parseInt(id));
      }

      if (item.doName == 'spawnVeh') {
        _menu.default.Menu.HideMenu();

        let vName = await _menu.default.Menu.GetUserInput('Название ТС', '', 16);
        if (vName == '') return;

        _methods.methods.saveLog('AdminSpawnVehicle', `${_user.user.get('rp_name')} - ${vName}`);

        mp.events.callRemote('server:admin:spawnVeh', vName);
      }

      if (item.doName == 'colorVeh') {
        menuList.showAdminColorVehMenu();
      }

      if (item.doName == 'dropTimer') {
        mp.events.callRemote('server:gangWar:dropTimer');
      }

      if (item.doName == 'cloth') {
        menuList.showAdminClothMenu();
      }

      if (item.doName == 'godmode') {
        _user.user.godmode = !_user.user.godmode;
        mp.game.ui.notifications.show('GodMode: ' + (_user.user.godmode ? "~g~On" : "~r~Off"));
        mp.players.local.setInvincible(_user.user.godmode);
      }

      if (item.doName == 'debug') {
        menuList.showAdminDebugMenu();
      }

      if (item.doName == 'teleportToWaypoint') _user.user.tpToWaypoint();

      if (item.doName == 'notify') {
        _menu.default.Menu.HideMenu();

        let title = await _menu.default.Menu.GetUserInput('Заголовок', '', 20);
        if (title == '') return;
        let text = await _menu.default.Menu.GetUserInput('Текст новости', '', 55);
        if (text == '') return;

        _methods.methods.saveLog('AdminNotify', `${_user.user.get('rp_name')} - ${title} | ${text}`);

        _methods.methods.notifyWithPictureToAll(title, 'Администрация', text, 'CHAR_ACTING_UP');
      }

      if (item.doName == 'kick') {
        _menu.default.Menu.HideMenu();

        let id = await _menu.default.Menu.GetUserInput('ID Игрока', '', 10);
        let reason = await _menu.default.Menu.GetUserInput('Причина', '', 100);

        _methods.methods.saveLog('AdminKick', `${_user.user.get('rp_name')} - ${id} | ${reason}`);

        mp.events.callRemote('server:user:kickByAdmin', _methods.methods.parseInt(id), reason);
      }

      if (item.doName == 'jail') {
        _menu.default.Menu.HideMenu();

        let id = parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 10));
        let min = parseInt(await _menu.default.Menu.GetUserInput('Кол-во минут', '', 10));
        let reason = await _menu.default.Menu.GetUserInput('Причина', '', 100);
        if (isNaN(id) || id < 0) return mp.game.ui.notifications.show(`ID указан не верно`);
        if (isNaN(min) || min < 0) return mp.game.ui.notifications.show(`Время указано не верно`);

        _methods.methods.saveLog('AdminJail', `${_user.user.get('rp_name')} - ${id} | ${min}m | ${reason}`);

        mp.events.callRemote('server:user:jailByAdmin', _methods.methods.parseInt(id), reason, _methods.methods.parseInt(min));
      }

      if (item.doName == 'tptoid') {
        let id = parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 10));
        if (isNaN(id) || id < 0) return mp.game.ui.notifications.show(`ID указан не верно`);
        mp.events.callRemote('server:user:tpTo', id);
      }

      if (item.doName == 'tptome') {
        let id = parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 10));
        if (isNaN(id) || id < 0) return mp.game.ui.notifications.show(`ID указан не верно`);
        mp.events.callRemote('server:user:tpToMe', id);
      }

      if (item.doName == 'invisibleON') {
        mp.events.callRemote('server:user:setAlpha', 0);
        mp.game.ui.notifications.show(`~q~Инвиз: ON`);
      }

      if (item.doName == 'invisibleOFF') {
        mp.events.callRemote('server:user:setAlpha', 255);
        mp.game.ui.notifications.show(`~q~Инвиз: OFF`);
      }

      if (item.doName == 'fixvehicle') {
        mp.events.callRemote('server:user:fixNearestVehicle');
      }

      if (item.doName == 'respvehicle') {
        mp.events.callRemote('server:respawnNearstVehicle');
      }

      if (item.doName == 'deletevehicle') {
        mp.events.callRemote('server:deleteNearstVehicle');
      }

      if (item.doName == 'flipVehicle') {
        mp.events.callRemote('server:flipNearstVehicle');
      }

      if (item.doName == 'server:user:getPlayerPos') {
        mp.events.callRemote('server:user:getPlayerPos');
      }

      if (item.eventName == 'server:user:adrenaline') {
        _menu.default.Menu.HideMenu();

        let id = parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 10));
        if (isNaN(id) || id < 0) return mp.game.ui.notifications.show(`ID указан не верно`);

        _methods.methods.saveLog('AdminHealPlayer', `${_user.user.get('rp_name')} | Adrenaline to id: ${id}`);

        mp.events.callRemote('server:user:adrenaline', _methods.methods.parseInt(id));
      }

      if (item.eventName == 'server:user:healFirstAdmin') {
        _menu.default.Menu.HideMenu();

        let id = parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 10));
        if (isNaN(id) || id < 0) return mp.game.ui.notifications.show(`ID указан не верно`);

        _methods.methods.saveLog('AdminHealPlayer', `${_user.user.get('rp_name')} | Heal to id: ${id}`);

        mp.events.callRemote('server:user:healFirstAdmin', _methods.methods.parseInt(id));
      }
    });
  },
  showAdminColorVehMenu: function () {
    let menu = _menu.default.Menu.Create(`Admin`, `~b~Цвет ТС`);

    let color1 = 0;
    let color2 = 0;
    let list = [];

    for (let j = 0; j < 156; j++) list.push(j + '');

    let list1Item = menu.AddMenuItemList('Цвет 1', list);
    let list2Item = menu.AddMenuItemList('Цвет 2', list);
    let list3Item;

    if (mp.players.local.vehicle.getLiveryCount() > 1) {
      let list2 = [];

      for (let j = 0; j < mp.players.local.vehicle.getLiveryCount(); j++) list2.push(j + '');

      list3Item = menu.AddMenuItemList('Livery', list2);
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ListChange.on((item, index) => {
      if (list3Item == item) {
        mp.events.callRemote('server:vehicle:setLivery', index);
        return;
      }

      if (list1Item == item) color1 = index;
      if (list2Item == item) color2 = index;
      mp.events.callRemote('server:vehicle:setColor', color1, color2);
    });
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();
    });
  },
  showAdminClothMenu: function () {
    let menu = _menu.default.Menu.Create(`Admin`, `~b~Одежда`);

    let list = [];

    for (let j = 0; j < 500; j++) list.push(j + '');

    let listColor = [];

    for (let j = 0; j < 100; j++) listColor.push(j + '');

    let id = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let idColor = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let id1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let idColor1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

    for (let i = 0; i < 12; i++) {
      let list1Item = menu.AddMenuItemList('Слот ' + i, list);
      list1Item.slotId = i;
      list1Item._type = 0;
      let list2Item = menu.AddMenuItemList('Цвет ' + i, list);
      list2Item.slotId = i;
      list2Item._type = 1;
      menu.AddMenuItem(' ');
    }

    for (let i = 0; i < 8; i++) {
      let list1Item = menu.AddMenuItemList('ПСлот ' + i, list);
      list1Item.slotId = i;
      list1Item._type = 2;
      let list2Item = menu.AddMenuItemList('ПЦвет ' + i, list);
      list2Item.slotId = i;
      list2Item._type = 3;
      menu.AddMenuItem(' ');
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ListChange.on((item, index) => {
      switch (item._type) {
        case 0:
          id[item.slotId] = index;

          _user.user.setComponentVariation(item.slotId, id[item.slotId], idColor[item.slotId]);

          break;

        case 1:
          idColor[item.slotId] = index;

          _user.user.setComponentVariation(item.slotId, id[item.slotId], idColor[item.slotId]);

          break;

        case 2:
          id1[item.slotId] = index;

          _user.user.setProp(item.slotId, id1[item.slotId], idColor1[item.slotId]);

          break;

        case 3:
          idColor1[item.slotId] = index;

          _user.user.setProp(item.slotId, id1[item.slotId], idColor1[item.slotId]);

          break;
      }
    });
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();
    });
  },
  showAdminDebugMenu: function () {
    try {
      menuList.showUsmcArsenalMenu();
    } catch (e) {
      _methods.methods.debug('Exception: menuList.debug');

      _methods.methods.debug(e);
    }
  },
  showSapdClearMenu: function () {
    if (_user.user.get('rank') < 4) {
      mp.game.ui.notifications.show('~r~Доступно с 4 ранга');
      return;
    }

    let menu = _menu.default.Menu.Create(`PC`, `~b~Очистить розыск`);

    menu.AddMenuItem('Очистить розыск').eventName = 'server:user:giveWanted';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item.eventName == 'server:user:giveWanted') {
        let id = await _menu.default.Menu.GetUserInput('ID Игрока', '', 10);
        mp.events.callRemote('server:user:giveWanted', _methods.methods.parseInt(id), 0, 'clear');
      }
    });
  },
  showHouseSellToPlayerMenu: function (houseId, sum, userId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Дом', '~b~Купить дом №' + houseId);

    menu.AddMenuItem('Купить за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:houses:sellToPlayer:accept', houseId, sum, userId);
    });
  },
  showCarSellToPlayerMenu: function (houseId, name, sum, userId, slot) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Транспорт', '~b~Купить ' + name);

    menu.AddMenuItem('Транспорт за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:car:sellToPlayer:accept', sum, userId, slot);
    });
  },
  showCondoSellToPlayerMenu: function (houseId, sum, userId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Квартира', '~b~Купить квартиру №' + houseId);

    menu.AddMenuItem('Купить за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:condo:sellToPlayer:accept', houseId, sum, userId);
    });
  },
  showApartSellToPlayerMenu: function (houseId, sum, userId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Апартаменты', '~b~Купить апартаменты №' + houseId);

    menu.AddMenuItem('Купить за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:apartments:sellToPlayer:accept', houseId, sum, userId);
    });
  },
  showStockSellToPlayerMenu: function (houseId, sum, userId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Склад', '~b~Купить склад №' + houseId);

    menu.AddMenuItem('Купить за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:stock:sellToPlayer:accept', houseId, sum, userId);
    });
  },
  showBusinessSellToPlayerMenu: function (houseId, sum, userId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('Бизнес', '~b~Купить бизнес №' + houseId);

    menu.AddMenuItem('Купить за ~g~$' + _methods.methods.numberFormat(sum), '').doName = 'accept';
    menu.AddMenuItem('~r~Отказаться', '').doName = 'closeMenu';
    menu.ItemSelect.on(async (item, idx) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'accept') mp.events.callRemote('server:business:sellToPlayer:accept', houseId, sum, userId);
    });
  },
  showUsmcArsenalMenu: function () {
    let menu = _menu.default.Menu.Create(`USMC`, `~b~Гардероб`, false, false, false, 'shopui_title_gr_gunmod', 'shopui_title_gr_gunmod');

    let list = ['Civil', 'Regular #1', 'Regular #2', 'Regular #3', 'Tactical #1', 'Tactical #2', 'Pilot #1', 'Pilot #2', 'Officer', 'Special #1', 'Special #2'];
    menu.AddMenuItemList('Форма', list);
    menu.AddMenuItem('~r~Закрыть');
    menu.ListChange.on((item, index) => {
      mp.events.callRemote('server:uniform:usmc', index);
    });
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();
    });
  },
  showSapdArrestMenu: function () {
    let menu = _menu.default.Menu.Create(`PC`, `~b~Арест`);

    menu.AddMenuItem('Арест').eventName = 'server:user:arrest';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item.eventName == 'server:user:arrest') {
        let id = await _menu.default.Menu.GetUserInput('ID Игрока', '', 10);
        mp.events.callRemote('server:user:arrest', _methods.methods.parseInt(id));
      }
    });
  },
  showMember2ListMenu: function (data) {
    let menu = _menu.default.Menu.Create(`Организация`, `~b~Список членов организации`);

    data.forEach(function (item) {
      let nick = item[0].toString().substr(8);
      if ((_user.user.isLeader2() || _user.user.isSubLeader2()) && _user.user.get('rp_name') != nick) menu.AddMenuItem(`${item[0]}`, `${item[1]}`).eventParam = nick;else menu.AddMenuItem(`${item[0]}`, `${item[1]}`);
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();

      if (item.eventParam) menuList.showMember2DoMenu(item.eventParam);
    });
  },
  showMember2DoMenu: function (name) {
    let menu = _menu.default.Menu.Create(`Организация`, `~b~` + name);

    menu.AddMenuItem(`Выдать ранг`).eventName = 'server:giveRank2';
    menu.AddMenuItem(`~r~Уволить`).eventName = 'server:uninvite2';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (item.eventName == 'server:giveRank2') {
        let rank = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Ранг', '', 2));

        if (isNaN(rank) || rank < 1 || rank > 10) {
          mp.game.ui.notifications.show('~r~Число должно быть выше 0 и ниже 11');
          return;
        }

        mp.events.callRemote(item.eventName, name, rank);
      } else if (item.eventName == 'server:uninvite2') {
        mp.events.callRemote(item.eventName, name);
      }
    });
  },
  showDispatchTaxiMenu: function () {
    let menu = _menu.default.Menu.Create(`Диспетчер`, `~b~Нажмите ~g~Enter~b~ чтобы принять вызов`);

    _dispatcher.dispatcher.getItemTaxiList().forEach(function (item, idx) {
      let mItem = menu.AddMenuItem(`[${item.time}] ${item.title}`, `~b~[№${item.id}] Район: ~s~${item.street1}`);
      mItem.taxiId = item.id;
      mItem.taxiCount = item.count;
      mItem.taxiPrice = item.price;
      mItem.title = item.title;
      mItem.desc = item.desc;
      mItem.street1 = item.street1;
      mItem.posX = item.x;
      mItem.posY = item.y;
    });

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async item => {
      _menu.default.Menu.HideMenu();

      if (closeItem == item) return;

      if (await _data.Container.Has(item.taxiId, 'acceptTaxi')) {
        mp.game.ui.notifications.show('~r~Данный заказ уже был принят');
        return;
      }

      if (item.title.split('-').length == 2) mp.events.callRemote('server:user:sendTaxiAccept', item.title, item.taxiId);

      _user.user.setWaypoint(item.posX, item.posY);
    });
  },
  showPlayerMenu: function () {
    if (_user.user.get('jail_time') > 0) {
      mp.game.ui.notifications.show('~r~В тюрьме нельзя этим пользоваться');
      return;
    }

    let menu = _menu.default.Menu.Create(``, `~b~Меню вашего персонажа`);

    menu.spriteName = "profile";
    menu.AddMenuItem('Действия').SetIcon('hand').doName = 'showPlayerDoMenu';
    menu.AddMenuItem('Документы').SetIcon('Item_53').doName = 'showPlayerDoсMenu';
    if (_user.user.get('phone_code') > 0) menu.AddMenuItem('Телефон').SetIcon('Item_8').doName = 'showPhoneMenu';
    if (_user.user.get('is_buy_walkietalkie')) menu.AddMenuItem('Рация').SetIcon('Item_47').doName = 'showWalkietalkieMenu';

    if (_user.user.get('job') == 'lawyer1' || _user.user.get('job') == 'lawyer2' || _user.user.get('job') == 'lawyer3') {
      menu.AddMenuItem('~y~Предложить сделку подселения', 'Доступно только для юристов').eventName = 'server:houses:lawyer:tryaddUser';
    }

    menu.AddMenuItem('Статистика').SetIcon('statistic').doName = 'showPlayerStatsMenu';
    menu.AddMenuItem('Топ 20').SetIcon('top').doName = 'top';
    menu.AddMenuItem('VIP Статус').SetIcon('vip').doName = 'vipMenu';
    menu.AddMenuItem('Анимации').SetIcon('anims').doName = 'showAnimationTypeListMenu';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();else if (item.doName == 'top') mp.events.callRemote('users:top');else if (item.doName == 'vipMenu') menuList.showPlayerVipMenu();else if (item.doName == 'showPlayerStatsMenu') menuList.showPlayerStatsMenu();else if (item.doName == 'showAnimationTypeListMenu') menuList.showAnimationTypeListMenu();else if (item.doName == 'showPlayerDoMenu') menuList.showPlayerDoMenu();else if (item.doName == 'showPlayerDoсMenu') menuList.showPlayerDoсMenu();else if (item.doName == 'showPhoneMenu') menuList.showPlayerPhoneMenu();else if (item.doName == 'showWalkietalkieMenu') menuList.showPlayerWalkietalkieMenu();else if (item.eventName == 'server:houses:lawyer:tryaddUser') {
        _menu.default.Menu.HideMenu();

        let id1 = await _menu.default.Menu.GetUserInput('ID Владельца', '', 10);
        let id2 = await _menu.default.Menu.GetUserInput('ID Подселяющего', '', 10);
        mp.events.callRemote(item.eventName, id1, id2);
      }
    });
  },
  showPlayerWalkietalkieMenu: function () {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create(`Рация`, `~b~Меню вашей рации`);

    let listVoiceVol = ['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'];
    let listVoiceItem = menu.AddMenuItemList('Громкость', listVoiceVol, 'Нажмите ~g~Enter~s~ чтобы применить');
    listVoiceItem.doName = 'vol';
    listVoiceItem.Index = _methods.methods.parseInt(_user.user.get('s_radio_vol') * 10);
    menu.AddMenuItem('Изменить частоту').doName = 'frequency';
    menu.AddMenuItem('Справка').doName = 'about';
    let backButton = menu.AddMenuItem('~g~Назад');
    let closeButton = menu.AddMenuItem('~r~Закрыть');
    let radioVol = 1;
    menu.ListChange.on(async (item, index) => {
      if (item.doName == 'vol') {
        radioVol = index / 10;
        if (radioVol == 0.0) radioVol = 0.001;

        _user.user.setData('s_radio_vol', radioVol);

        mp.game.ui.notifications.show('~b~Вы установили значение: ~s~' + radioVol * 100 + '%');
      }
    });
    menu.ListChange.on(async (item, index) => {
      if (item.doName == 'balance') {
        _user.user.setData('s_radio_bal', index - 1.0);

        mp.game.ui.notifications.show('~g~Наушник установлен');
      }
    });
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeButton) _menu.default.Menu.HideMenu();else if (item == backButton) {
        menuList.showPlayerMenu();
      } else if (item.doName == 'frequency') {
        let num = parseInt(await _menu.default.Menu.GetUserInput('До точки', '', 4));
        num = _methods.methods.parseInt(num);

        if (num > 3520 || num < 30) {
          mp.game.ui.notifications.show('~r~Значение должно быть от 30 до 3520');
          return;
        }

        if (num > 2000 && num < 3000 && !_user.user.isGos()) {
          mp.game.ui.notifications.show('~r~Частоты от 2000 до 3000 закреплены за гос организациями');
          return;
        }

        let num2 = parseInt(await _menu.default.Menu.GetUserInput('После точки', '', 3));
        num2 = _methods.methods.parseInt(num2);

        if (num2 < 0) {
          mp.game.ui.notifications.show('~r~Значение должно быть больше 0');
          return;
        }

        let walkie_num = num + '.' + num2;

        _user.user.set('walkietalkie_num', walkie_num);

        _user.user.setData('walkietalkie_num', walkie_num);

        mp.events.callRemote('voice.server.changeRadioFrequency', walkie_num);
        mp.game.ui.notifications.show('~g~Значение установлено: ~s~' + walkie_num);
      } else if (item.doName == 'about') {
        mp.gui.chat.push(`!{03A9F4}Говорить на кнопку CAPS LOCK. Доп клавиши зажимать не надо!`);
      }
    });
  },
  showPlayerDoMenu: function () {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Меню действий`);

    menu.AddMenuItem('Передать деньги').doName = 'giveMoney';
    menu.AddMenuItem('Познакомиться').doName = 'dating';
    menu.AddMenuItem('Снять наручники').doName = 'unCuff';
    menu.AddMenuItem('Затащить в ближайшее авто').doName = 'inCar';
    menu.AddMenuItem('Вести за собой').eventName = 'server:taskFollow';
    menu.AddMenuItem('Снять маску с игрока').eventName = 'server:taskRemoveMask';
    menu.AddMenuItem('Вытащить из тс').eventName = 'server:removeFromCar';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();else if (item.doName == 'giveMoney') menuList.showPlayerGiveMoneyMenu();else if (item.doName == 'dating') menuList.showPlayerDatingMenu();else if (item.doName == 'unCuff') mp.events.callRemote('server:unCuffNearst');else if (item.doName == 'inCar') mp.events.callRemote('server:inCarNearst');else if (item.doName == 'seeGosDoc') menuList.showPlayerSeeDocMenu();else if (item.eventName == 'server:taskFollow') mp.events.callRemote(item.eventName);else if (item.eventName == 'server:taskRemoveMask') mp.events.callRemote(item.eventName);else if (item.eventName == 'server:removeFromCar') mp.events.callRemote(item.eventName);
    });
  },
  showPlayerDoсMenu: function () {
    let menu = _menu.default.Menu.Create(`Документы`, `~b~Меню документов`);

    if (_user.user.isGos()) menu.AddMenuItem('Показать удостоверение').doName = 'showGosDoc';
    menu.AddMenuItem('Показать паспорт').doName = 'showCardId';
    menu.AddMenuItem('Показать лицензии').doName = 'showLic';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();else if (item.doName) menuList.showPlayerShowDocMenu(item.doName);
    });
  },
  showPlayerSeeDocMenu: function () {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Посмотреть жетон`);

    mp.players.forEachInRange(mp.players.local.position, 5, function (p) {
      if (p.getAlpha() > 0 && p.getHealth() > 0) menu.AddMenuItem(_user.user.getShowingIdString(p).toString()).remoteId = p.remoteId;
    });
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        _chat.chat.sendMeCommand('посмотрел на человека рядом');

        mp.events.callRemote('server:user:seeGosDoc', item.remoteId);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showPlayerShowDocMenu: function (eventName) {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Показать документы`);

    mp.players.forEachInRange(mp.players.local.position, 2, function (p) {
      if (p.getAlpha() > 0 && p.getHealth() > 0) menu.AddMenuItem(_user.user.getShowingIdString(p).toString()).remoteId = p.remoteId;
    });
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        _chat.chat.sendMeCommand('показал документы');

        mp.events.callRemote('server:user:' + eventName, item.remoteId);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showPlayerGiveMoneyMenu: function () {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Передать деньги`);

    mp.players.forEachInRange(mp.players.local.position, 2, function (p) {
      if (p && mp.players.exists(p) && p != mp.players.local && p.getAlpha() > 0 && p.getHealth() > 0) menu.AddMenuItem(_user.user.getShowingIdString(p).toString()).remoteId = p.remoteId;
    });
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.remoteId >= 0) {
          let money = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма', '', 9));

          if (money < 1) {
            mp.game.ui.notifications.show('~r~Нельзя передавать меньше 1$');
            return;
          }

          mp.events.callRemote('server:user:giveMoneyToPlayerId', item.remoteId, money);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showPlayerDatingMenu: function () {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Знакомства`);

    mp.players.forEachInRange(mp.players.local.position, 2, function (p) {
      if (p && mp.players.exists(p) && p != mp.players.local && p.getAlpha() > 0 && !_user.user.isDead(p)) menu.AddMenuItem(_user.user.getShowingIdString(p).toString()).remoteId = p.remoteId;
    });
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.remoteId >= 0) {
          let rpName = _user.user.get('rp_name').split(' ');

          let name = await _menu.default.Menu.GetUserInput('Как вы себя представите?', rpName[0], 30);
          if (name == '') return;
          name = name.replace(/[^a-zA-Z\s]/gi, '');

          if (name == '' || name == ' ') {
            mp.game.ui.notifications.show('~r~Доступны только английские буквы');
            return;
          }

          mp.events.callRemote('server:user:askDatingToPlayerId', item.remoteId, name);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showPlayerDatingAskMenu: function (playerId, name) {
    let player = mp.players.atRemoteId(playerId);

    if (mp.players.exists(player)) {
      let menu = _menu.default.Menu.Create(`Знакомства`, `~b~${player.getVariable('id')} хочет познакомиться`);

      menu.AddMenuItem('~g~Принять знакомство').doName = 'yes';
      menu.AddMenuItem('~r~Отказать');
      menu.AddMenuItem('~r~Закрыть');
      menu.ItemSelect.on(async (item, index) => {
        _menu.default.Menu.HideMenu();

        if (item.doName) {
          let rpName = _user.user.get('rp_name').split(' ');

          let nameAnswer = await _menu.default.Menu.GetUserInput('Как вы себя представите?', rpName[0], 30);
          if (nameAnswer == '') return;
          nameAnswer = nameAnswer.replace(/[^a-zA-Z\s]/gi, '');

          if (nameAnswer == '' || nameAnswer == ' ') {
            mp.game.ui.notifications.show('~r~Доступны только английские буквы');
            return;
          }

          mp.events.callRemote('server:user:askDatingToPlayerIdYes', playerId, name, nameAnswer);

          _user.user.playAnimationWithUser(player.getVariable('id'), 0);
        }
      });
    }
  },
  showPlayerInvite2Menu: function () {
    let menu = _menu.default.Menu.Create(`Действие`, `~b~Принять в организацию`);

    mp.players.forEachInRange(mp.players.local.position, 2, function (p) {
      if (p && mp.players.exists(p) && p != mp.players.local && p.getAlpha() > 0 && p.getHealth() > 0) menu.AddMenuItem(_user.user.getShowingIdString(p).toString()).remoteId = p.remoteId;
    });
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.remoteId >= 0) mp.events.callRemote('server:user:inviteFraction2', item.remoteId);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showPlayerStatsMenu: function () {
    let menu = _menu.default.Menu.Create(`Персонаж`, `~b~${_user.user.get('rp_name')}`);

    menu.AddMenuItem('~b~Имя:~s~').SetRightLabel(`${_user.user.get('rp_name')}`);
    menu.AddMenuItem('~b~Уровень:~s~').SetRightLabel(`${_user.user.getLevel()} (${_user.user.getExp()} / ${_user.user.getMaxExp()})`);
    menu.AddMenuItem((_user.user.warns >= 2 ? "~r~" : "~b~") + 'Активных предупреждений:~s~').SetRightLabel(`[${_user.user.warns}/3]`);
    menu.AddMenuItem('~b~Возраст:~s~').SetRightLabel(`${_user.user.get('age')}`);
    menu.AddMenuItem('~b~Отыграно времени:~s~').SetRightLabel(`${_user.user.online_time} минут`);
    menu.AddMenuItem('~b~Отыграно сегодня:~s~').SetRightLabel(`${_user.user.online_today}/24 часов`);
    menu.AddMenuItem('~b~Организация:~s~').SetRightLabel(`${_user.user.get('fraction_id') > 0 ? _methods.methods.getFractionName(_user.user.get('fraction_id')) : _methods.methods.getJobName(_user.user.get('job'))}`);
    menu.AddMenuItem('~b~Регистрация:~s~').SetRightLabel(`${_user.user.getRegStatusName()}`);
    if (_user.user.get('reg_time') > 0) menu.AddMenuItem('~b~Время регистрации:~s~').SetRightLabel(`${(_user.user.get('reg_time') / 31.0).toFixed(2)} мес.`);
    if (_user.user.get('bank_prefix') > 0) menu.AddMenuItem('~b~Номер карты:~s~').SetRightLabel(`${_user.user.get('bank_prefix')}-${_user.user.get('bank_number')}`);
    if (_user.user.get('phone_code') > 0) menu.AddMenuItem('~b~Телефон:~s~').SetRightLabel(`${_user.user.get('phone_code')}-${_user.user.get('phone')}`);
    menu.AddMenuItem('~b~Розыск:~s~').SetRightLabel(`${_user.user.get('wanted_level') > 0 ? '~r~В розыске' : '~g~Нет'}`);
    menu.AddMenuItem('~b~ЧС гос.организаций:~s~').SetRightLabel(`${_user.user.get('is_gos_blacklist') ? '~r~Да' : '~g~Нет'}`);
    menu.AddMenuItem('~b~Рецепт марихуаны:~s~').SetRightLabel(`${_user.user.get('allow_marg') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия категории "А":~s~').SetRightLabel(`${_user.user.get('a_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия категории "B":~s~').SetRightLabel(`${_user.user.get('b_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия категории "C":~s~').SetRightLabel(`${_user.user.get('c_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на авиатранспорт:~s~').SetRightLabel(`${_user.user.get('air_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на водный транспорт:~s~').SetRightLabel(`${_user.user.get('ship_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на оружие:~s~').SetRightLabel(`${_user.user.get('gun_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на таксиста:~s~').SetRightLabel(`${_user.user.get('taxi_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на адвоката:~s~').SetRightLabel(`${_user.user.get('law_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Лицензия на бизнес:~s~').SetRightLabel(`${_user.user.get('biz_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Разрешение на рыболовство:~s~').SetRightLabel(`${_user.user.get('fish_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Мед. страховка:~s~').SetRightLabel(`${_user.user.get('med_lic') ? 'Есть' : '~r~Нет'}`);
    menu.AddMenuItem('~b~Выносливость:~s~').SetRightLabel(`${_user.user.get('mp0_stamina') + 1}%`);
    menu.AddMenuItem('~b~Сила:~s~').SetRightLabel(`${_user.user.get('mp0_strength') + 1}%`);
    menu.AddMenuItem('~b~Объем легких:~s~').SetRightLabel(`${_user.user.get('mp0_lung_capacity') + 1}%`);
    menu.AddMenuItem('~b~Навык водителя:~s~').SetRightLabel(`${_user.user.get('mp0_wheelie_ability') + 1}%`);
    menu.AddMenuItem('~b~Навык пилота:~s~').SetRightLabel(`${_user.user.get('mp0_flying_ability') + 1}%`);
    menu.AddMenuItem('~b~Навык стрельбы:~s~').SetRightLabel(`${_user.user.get('mp0_shooting_ability') + 1}%`);
    menu.AddMenuItem('~b~Навык таксиста:~s~').SetRightLabel(`${(_user.user.get('skill_taxi') / 4).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык почтальона:~s~', 'Компания PostOp').SetRightLabel(`${(_user.user.get('skill_mail') / 10).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык почтальона:~s~', 'Компания GoPostal').SetRightLabel(`${(_user.user.get('skill_mail2') / 10).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык фотографа:~s~').SetRightLabel(`${(_user.user.get('skill_photo') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык уборщика квартир:~s~').SetRightLabel(`${(_user.user.get('skill_sunb') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык дезинсектора:~s~').SetRightLabel(`${(_user.user.get('skill_bgstar') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык доставщика еды:~s~').SetRightLabel(`${(_user.user.get('skill_bshot') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык мехатроника:~s~').SetRightLabel(`${(_user.user.get('skill_water') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык садовника:~s~').SetRightLabel(`${(_user.user.get('skill_three') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык инкассатора:~s~').SetRightLabel(`${(_user.user.get('skill_gr6') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык водителя автобуса #1:~s~').SetRightLabel(`${(_user.user.get('skill_bus1') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык водителя автобуса #2:~s~').SetRightLabel(`${(_user.user.get('skill_bus2') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык водителя автобуса #3:~s~').SetRightLabel(`${(_user.user.get('skill_bus3') / 5).toFixed(2)}%`);
    menu.AddMenuItem('~b~Навык дальнобойщика:~s~').SetRightLabel(`${(_user.user.get('skill_trucker') / 15).toFixed(2)}%`);
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();else if (item.doName == 'showPlayerStatsMenu') menuList.showPlayerStatsMenu();else if (item.doName == 'showAnimationTypeListMenu') menuList.showAnimationTypeListMenu();
    });
  },
  showPlayerVipMenu: function () {
    let menu = _menu.default.Menu.Create(`VIP Статус`, `~b~Информация`);

    let data = _user.user.getVipData();

    if (data) {
      menu.AddMenuItem('~b~Название:~s~').SetRightLabel(`${data.name}`);
      menu.AddMenuItem('~b~Действует до:~s~').SetRightLabel(`${_methods.methods.unixTimeStampToDateTime(_user.user.get('vip_time'))}`);
      menu.AddMenuItem('~b~Стоимость:~s~').SetRightLabel(`${_methods.methods.numberFormat(data.cost)} Coins / Мес.`);
      menu.AddMenuItem('~b~Оплата налогов через сайт:~s~').SetRightLabel(`${data.sitepay ? "~g~Да" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Бесплатная смена слотов ТС:~s~').SetRightLabel(`${data.changeslots ? "~g~Да" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Бонус опыта:~s~').SetRightLabel(`${data.expbonus > 0 ? "+" + data.expbonus + " EXP" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Бонус зарплаты:~s~').SetRightLabel(`+$${_methods.methods.numberFormat(data.moneybonus)}`);
      menu.AddMenuItem('~b~Бонусные коины:~s~').SetRightLabel(`${data.givecoin > 0 ? "+" + data.givecoin + " Coins" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Возможность стоять AFK:~s~').SetRightLabel(`${data.afkminutes} мин.`);
      menu.AddMenuItem('~b~Доступ к ~g~/vipuninvite~b~:~s~').SetRightLabel(`${data.vipuninvite ? "~g~Да" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Бонус к навыкам персонажа:~s~').SetRightLabel(`${data.skillpersbonus > 0 ? "+" + 100 / data.skillpersbonus + "%" : "~r~Нет"}`);
      menu.AddMenuItem('~b~Бонус к рабочим навыкам:~s~').SetRightLabel(`${data.skilljobbonus > 0 ? "+" + 100 / data.skilljobbonus + "%" : "~r~Нет"}`);
    } else {
      menu.AddMenuItem('~r~Информация отсутствует');
      menu.AddMenuItem('~b~Приобрести випку можно на сайте');
      menu.AddMenuItem('~b~https://gta-5.ru/trade');
    }
  },
  showMenu: function (title, desc, menuData) {
    let menu = _menu.default.Menu.Create(title.toString(), `~b~${desc}`);

    menuData.forEach(function (val, key, map) {
      menu.AddMenuItem(`~b~${key}: ~s~`).SetRightLabel(val.toString());
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();
    });
  },
  showTruckerOffersMenu: function (menuData) {
    let menu = _menu.default.Menu.Create('Грузоперевозки', `~b~Список заказов`);

    menuData.forEach(item => {
      let x = 0;
      let y = 0;
      let z = 0;
      let tx = 0;
      let ty = 0;
      let tz = 0;

      if (item.length == 10) {
        x = item[3];
        y = item[4];
        z = item[5];
        tx = item[6];
        ty = item[7];
        tz = item[8];
      } else {
        x = item[7];
        y = item[8];
        z = item[9];
        tx = item[11];
        ty = item[12];
        tz = item[13];
      }

      let dist = mp.game.pathfind.calculateTravelDistanceBetweenPoints(x, y, z, tx, ty, tz);
      if (dist > 10000) dist = _methods.methods.parseInt(_methods.methods.distanceToPos(new mp.Vector3(x, y, z), new mp.Vector3(tx, ty, tz)));

      if (item[0]) {
        let menuItem = menu.AddMenuItem(`~b~№${item[0]}.~s~ ${item[1]}`, `~y~Расстояние: ~s~${dist}m\n~y~Место загрузки: ~s~${mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(x, y, z))}`);
        menuItem.SetRightLabel(`~g~$${_methods.methods.numberFormat(item[item.length - 1])}`);
        menuItem.offerId = item;
      }
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.offerId) menuList.showTruckerOfferInfoMenu(item.offerId);
    });
  },
  showTruckerOfferInfoMenu: function (item) {
    let x = 0;
    let y = 0;
    let z = 0;
    let tx = 0;
    let ty = 0;
    let tz = 0;

    if (item.length == 10) {
      x = item[3];
      y = item[4];
      z = item[5];
      tx = item[6];
      ty = item[7];
      tz = item[8];
    } else {
      x = item[7];
      y = item[8];
      z = item[9];
      tx = item[11];
      ty = item[12];
      tz = item[13];
    }

    let menu = _menu.default.Menu.Create(`Грузоперевозки`, `~b~Информация о заказе`);

    let dist = mp.game.pathfind.calculateTravelDistanceBetweenPoints(x, y, z, tx, ty, tz);
    if (dist > 10000) dist = _methods.methods.parseInt(_methods.methods.distanceToPos(new mp.Vector3(x, y, z), new mp.Vector3(tx, ty, tz)));
    menu.AddMenuItem('~y~Номер заказа:~s~').SetRightLabel(item[0]);
    menu.AddMenuItem('~y~Груз:~s~').SetRightLabel(item[1]);
    menu.AddMenuItem('~y~Компания:~s~').SetRightLabel(item[2]);
    menu.AddMenuItem('~y~Стоимость:~s~').SetRightLabel(`$${_methods.methods.numberFormat(item[item.length - 1])}`);
    menu.AddMenuItem('~y~Место загрузки:~s~').SetRightLabel(`${mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(x, y, z))}`);
    menu.AddMenuItem('~y~Место разгрузки:~s~').SetRightLabel(`${mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(tx, ty, tz))}`);
    menu.AddMenuItem('~y~Расстояние:~s~').SetRightLabel(`${dist}m`);
    menu.AddMenuItem('~g~Принять заказ').accept = item[0];
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.accept) mp.events.callRemote('server:tucker:acceptOffer', item.accept);
    });
  },
  showLawyerOffersMenu: function (price, id, rpName) {
    let menu = _menu.default.Menu.Create('Юрист', `~b~${rpName}`);

    menu.AddMenuItem('~g~Согласиться', `Цена: ~g~$${_methods.methods.numberFormat(price)}`).eventName = 'server:user:lawyer:accept';
    menu.AddMenuItem('~r~Отказаться');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.eventName) mp.events.callRemote(item.eventName, id);
    });
  },
  showLawyerHouseOffersMenu: function (buyerId, id) {
    let menu = _menu.default.Menu.Create('Юрист', `~b~Подселение`);

    menu.AddMenuItem('~g~Согласиться', `Цена: ~g~$10,000`).eventName = 'server:houses:lawyer:addUser';
    menu.AddMenuItem('~r~Отказаться');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.eventName) mp.events.callRemote(item.eventName, id, buyerId);
    });
  },
  showGpsMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Главное меню`);

    menu.AddMenuItem('Важные места');
    menu.AddMenuItem('Работы');
    menu.AddMenuItem('Магазины и прочее');
    menu.AddMenuItem('Компании');
    menu.AddMenuItem('Интересные места');
    menu.AddMenuItem('Моё имущество');
    menu.AddMenuItem('~y~Убрать метку');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();
      if (index == 0) menuList.showGpsImportantMenu();else if (index == 1) menuList.showGpsJobMenu();else if (index == 2) menuList.showGpsOtherMenu();else if (index == 3) menuList.showGpsCompMenu();else if (index == 4) menuList.showGpsInterestingMenu();else if (index == 5) mp.events.callRemote('my:gps');else if (index == 6) _user.user.removeWaypoint();
    });
  },
  showGpsImportantMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Важные места`);

    let menuItem = menu.AddMenuItem('Казино');
    menuItem.gpsX = 935.53;
    menuItem.gpsY = 46.44;
    menuItem = menu.AddMenuItem('Гонки и дуэли');
    menuItem.gpsX = -247.4;
    menuItem.gpsY = -2032.4;
    menuItem = menu.AddMenuItem('Стрельбище');
    menuItem.gpsX = -1653.26;
    menuItem.gpsY = -3113.55;
    menuItem = menu.AddMenuItem('Аукцион');
    menuItem.gpsX = 478.74;
    menuItem.gpsY = -107.67;
    menuItem = menu.AddMenuItem('Здание правительства', 'Получение регистрации\nТрудоустройство\nИные вопросы');
    menuItem.gpsX = -546;
    menuItem.gpsY = -202;
    menuItem = menu.AddMenuItem('Лицензионный центр');
    menuItem.gpsX = -716;
    menuItem.gpsY = -1296;
    menuItem = menu.AddMenuItem('Государственный банк "~r~Maze Bank~s~"', 'Продажа вашего имущества\nОперации со счетом');
    menuItem.gpsX = -75;
    menuItem.gpsY = -826;
    menuItem = menu.AddMenuItem('Частный банк "~o~Pacific Standard~s~"');
    menuItem.gpsX = 235.0;
    menuItem.gpsY = 216.0;
    menuItem = menu.AddMenuItem('Найти ближайший "~g~Fleeca"~s~ банк');
    menuItem.gpsEvent = 'server:gps:findFleeca';
    menuItem = menu.AddMenuItem('Частный банк "~b~Blaine County~s~"');
    menuItem.gpsX = -111;
    menuItem.gpsY = 6467;
    menuItem = menu.AddMenuItem('Бизнес центр "~b~Arcadius~s~"');
    menuItem.gpsX = -139;
    menuItem.gpsY = -631;
    menuItem = menu.AddMenuItem('Полицейский участок');
    menuItem.gpsX = 437;
    menuItem.gpsY = -982;
    menuItem = menu.AddMenuItem('Шериф департамент Палето');
    menuItem.gpsX = -448;
    menuItem.gpsY = 6012;
    menuItem = menu.AddMenuItem('Шериф департамент Сенди');
    menuItem.gpsX = 1853;
    menuItem.gpsY = 3686;
    menuItem = menu.AddMenuItem('Больница Лос-Сантоса');
    menuItem.gpsX = 354.65;
    menuItem.gpsY = -595.92;
    menuItem = menu.AddMenuItem('Федеральная тюрьма');
    menuItem.gpsX = 1830;
    menuItem.gpsY = 2603;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      if (item.gpsEvent != undefined) mp.events.callRemote(item.gpsEvent);else _user.user.setWaypoint(item.gpsX, item.gpsY);
    });
  },
  showGpsJobMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Работы`);

    let menuItem = menu.AddMenuItem('Строитель', 'Для новичков');
    menuItem.gpsX = -142;
    menuItem.gpsY = -936;
    menuItem = menu.AddMenuItem('Мойщик окон', 'Для новичков');
    menuItem.gpsX = -1539;
    menuItem.gpsY = -448;
    menuItem = menu.AddMenuItem('Дорожные работы', 'Для новичков');
    menuItem.gpsX = 53;
    menuItem.gpsY = -723;
    menuItem = menu.AddMenuItem('Карьер', 'Для новичков');
    menuItem.gpsX = 2947;
    menuItem.gpsY = 2745;
    menuItem = menu.AddMenuItem('Стоянка садовников');
    menuItem.gpsX = -1146;
    menuItem.gpsY = -745;
    menuItem = menu.AddMenuItem('Автобусный парк');
    menuItem.gpsX = -675;
    menuItem.gpsY = -2166;
    menuItem = menu.AddMenuItem('Почта Post Op');
    menuItem.gpsX = -416;
    menuItem.gpsY = -2855;
    menuItem = menu.AddMenuItem('Почта GoPostal');
    menuItem.gpsX = 74;
    menuItem.gpsY = 120;
    menuItem = menu.AddMenuItem('Дезинсектор в Bugstars');
    menuItem.gpsX = 151;
    menuItem.gpsY = -3083;
    menuItem = menu.AddMenuItem('Развозчик еды в BurgerShot');
    menuItem.gpsX = -1178;
    menuItem.gpsY = -891;
    menuItem = menu.AddMenuItem('Уборщик квартир в Sunset Bleach');
    menuItem.gpsX = -1194;
    menuItem.gpsY = -1480;
    menuItem = menu.AddMenuItem('Мехатроник в Water & Power');
    menuItem.gpsX = 633;
    menuItem.gpsY = 125;
    menuItem = menu.AddMenuItem("Садовник в O'Connor");
    menuItem.gpsX = -1146;
    menuItem.gpsY = -745;
    menuItem = menu.AddMenuItem('Фотограф в Life Invader');
    menuItem.gpsX = -1041;
    menuItem.gpsY = -241;
    menuItem = menu.AddMenuItem('Таксист в Downtown Cab Co.');
    menuItem.gpsX = 895;
    menuItem.gpsY = -179;
    menuItem = menu.AddMenuItem('Таксист в Express Car Service');
    menuItem.gpsX = 896;
    menuItem.gpsY = -1035;
    menuItem = menu.AddMenuItem('Инкассатор в Gruppe6');
    menuItem.gpsX = 478;
    menuItem.gpsY = -1091;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      if (item.gpsEvent != undefined) mp.events.callRemote(item.gpsEvent);else _user.user.setWaypoint(item.gpsX, item.gpsY);
    });
  },
  showGpsOtherMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Магазины и прочее`);

    let menuItem = menu.AddMenuItem('Аптека Family Pharmacy');
    menuItem.gpsX = 318;
    menuItem.gpsY = -1078;
    menuItem = menu.AddMenuItem('Магазин электронной техники #1');
    menuItem.gpsX = -658;
    menuItem.gpsY = -857;
    menuItem = menu.AddMenuItem('Магазин электронной техники #2');
    menuItem.gpsX = 1133;
    menuItem.gpsY = -472;
    menuItem = menu.AddMenuItem('Найти ближайший магазин одежды');
    menuItem.gpsEvent = 'server:gps:findCloth';
    menuItem = menu.AddMenuItem('Найти ближайший магазин 24/7');
    menuItem.gpsEvent = 'server:gps:find247';
    menuItem = menu.AddMenuItem('Найти ближайшую заправку');
    menuItem.gpsEvent = 'server:gps:findFuel';
    menuItem = menu.AddMenuItem('Австосалон Эконом');
    menuItem.gpsEvent = 'server:gps:findAutosalon1';
    menuItem = menu.AddMenuItem('Австосалон Комфорт');
    menuItem.gpsEvent = 'server:gps:findAutosalon2';
    menuItem = menu.AddMenuItem('Австосалон Элитный');
    menuItem.gpsEvent = 'server:gps:findAutosalon3';
    menuItem = menu.AddMenuItem('Мотосалон');
    menuItem.gpsEvent = 'server:gps:findAutosalon4';
    menuItem = menu.AddMenuItem('Салон лодочного ТС');
    menuItem.gpsEvent = 'server:gps:findAutosalon5';
    menuItem = menu.AddMenuItem('Салон воздушного ТС');
    menuItem.gpsEvent = 'server:gps:findAutosalon6';
    menuItem = menu.AddMenuItem('Салон тех. ТС');
    menuItem.gpsEvent = 'server:gps:findAutosalon7';
    menuItem = menu.AddMenuItem('Найти ближайший пункт аренды вело/мото');
    menuItem.gpsEvent = 'server:gps:findRent';
    menuItem = menu.AddMenuItem('Найти ближайший бар');
    menuItem.gpsEvent = 'server:gps:findBar';
    menuItem = menu.AddMenuItem('Найти ближайший магазин оружия');
    menuItem.gpsEvent = 'server:gps:findGunShop';
    menuItem = menu.AddMenuItem('Найти ближайший барбершоп');
    menuItem.gpsEvent = 'server:gps:findBarberShop';
    menuItem = menu.AddMenuItem('Найти ближайшую автомастерскую');
    menuItem.gpsEvent = 'server:gps:findLsc';
    menuItem = menu.AddMenuItem('Магазин масок');
    menuItem.gpsX = -1337;
    menuItem.gpsY = -1277;
    menuItem = menu.AddMenuItem('Магазин принтов');
    menuItem.gpsX = -1234;
    menuItem.gpsY = -1477;
    menuItem = menu.AddMenuItem('Автомойка');
    menuItem.gpsX = -700;
    menuItem.gpsY = -932;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      if (item.gpsEvent != undefined) mp.events.callRemote(item.gpsEvent);else _user.user.setWaypoint(item.gpsX, item.gpsY);
    });
  },
  showGpsCompMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Компании`);

    let menuItem = menu.AddMenuItem('Post Op');
    menuItem.gpsX = -416;
    menuItem.gpsY = -2855;
    menuItem = menu.AddMenuItem('GoPostal');
    menuItem.gpsX = 74;
    menuItem.gpsY = 120;
    menuItem = menu.AddMenuItem('Bugstars');
    menuItem.gpsX = 151;
    menuItem.gpsY = -3083;
    menuItem = menu.AddMenuItem('BurgerShot');
    menuItem.gpsX = -1178;
    menuItem.gpsY = -891;
    menuItem = menu.AddMenuItem('Sunset Bleach');
    menuItem.gpsX = -1194;
    menuItem.gpsY = -1480;
    menuItem = menu.AddMenuItem('Water & Power');
    menuItem.gpsX = 633;
    menuItem.gpsY = 125;
    menuItem = menu.AddMenuItem("O'Connor");
    menuItem.gpsX = -1146;
    menuItem.gpsY = -745;
    menuItem = menu.AddMenuItem('Humane Labs');
    menuItem.gpsX = 3616;
    menuItem.gpsY = 3730;
    menuItem = menu.AddMenuItem('Life Invader');
    menuItem.gpsX = -1041;
    menuItem.gpsY = -241;
    menuItem = menu.AddMenuItem('Downtown Cab Co.');
    menuItem.gpsX = 895;
    menuItem.gpsY = -179;
    menuItem = menu.AddMenuItem('Express Car Service');
    menuItem.gpsX = 896;
    menuItem.gpsY = -1035;
    menuItem = menu.AddMenuItem('Gruppe6');
    menuItem.gpsX = 478;
    menuItem.gpsY = -1091;
    menuItem = menu.AddMenuItem('Bilgeco');
    menuItem.gpsX = 858;
    menuItem.gpsY = -3203;
    menuItem = menu.AddMenuItem('Jetsam');
    menuItem.gpsX = 114;
    menuItem.gpsY = -2569;
    menuItem = menu.AddMenuItem('Lando-Corp');
    menuItem.gpsX = 671;
    menuItem.gpsY = -2667;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      if (item.gpsEvent != undefined) mp.events.callRemote(item.gpsEvent);else _user.user.setWaypoint(item.gpsX, item.gpsY);
    });
  },
  showGpsInterestingMenu: function () {
    let menu = _menu.default.Menu.Create(`GPS`, `~b~Интересные места`);

    let menuItem = menu.AddMenuItem('Life Invader');
    menuItem.gpsX = -1041;
    menuItem.gpsY = -241;
    menuItem = menu.AddMenuItem('Международный аэропорт');
    menuItem.gpsX = -1037;
    menuItem.gpsY = -2737;
    menuItem = menu.AddMenuItem('Спортзал');
    menuItem.gpsX = -1204;
    menuItem.gpsY = -1564;
    menuItem = menu.AddMenuItem('Площадь Лос-Сантоса');
    menuItem.gpsX = 161;
    menuItem.gpsY = -993;
    menuItem = menu.AddMenuItem('Торговый центр Mega Moll');
    menuItem.gpsX = 46;
    menuItem.gpsY = -1753;
    menuItem = menu.AddMenuItem('Стриптиз клуб');
    menuItem.gpsX = 105;
    menuItem.gpsY = -1291;
    menuItem = menu.AddMenuItem('Бар "Tequila"');
    menuItem.gpsX = -562;
    menuItem.gpsY = 286;
    menuItem = menu.AddMenuItem('Бар "Yellow Jack"');
    menuItem.gpsX = 1986;
    menuItem.gpsY = 3054;
    menuItem = menu.AddMenuItem('Байкер клуб');
    menuItem.gpsX = 988;
    menuItem.gpsY = -96;
    menuItem = menu.AddMenuItem('Камеди клуб');
    menuItem.gpsX = -450;
    menuItem.gpsY = 280;
    menuItem = menu.AddMenuItem('Пляж');
    menuItem.gpsX = -1581;
    menuItem.gpsY = -1162;
    menuItem = menu.AddMenuItem('Обсерватория');
    menuItem.gpsX = -411;
    menuItem.gpsY = 1173;
    menuItem = menu.AddMenuItem('Надпись Vinewood');
    menuItem.gpsX = 716;
    menuItem.gpsY = 1203;
    menuItem = menu.AddMenuItem('Сцена-1');
    menuItem.gpsX = 226;
    menuItem.gpsY = 1173;
    menuItem = menu.AddMenuItem('Сцена-2');
    menuItem.gpsX = 689;
    menuItem.gpsY = 602;
    menuItem = menu.AddMenuItem('Библиотека Рокфорд-Хиллз');
    menuItem.gpsX = -615;
    menuItem.gpsY = -146;
    menuItem = menu.AddMenuItem('Гольф-клуб');
    menuItem.gpsX = -1375;
    menuItem.gpsY = 55;
    menuItem = menu.AddMenuItem('Музей Пасифик-Блаффс');
    menuItem.gpsX = -2291;
    menuItem.gpsY = 367;
    menuItem = menu.AddMenuItem('Университет Сан-Андреас');
    menuItem.gpsX = -1636;
    menuItem.gpsY = 180;
    menuItem = menu.AddMenuItem('Церковь Рокфорд-Хиллз');
    menuItem.gpsX = -766;
    menuItem.gpsY = -23;
    menuItem = menu.AddMenuItem('Церковь Маленький Сиул');
    menuItem.gpsX = -759;
    menuItem.gpsY = -709;
    menuItem = menu.AddMenuItem('Церковь Южный Лос-Сантос');
    menuItem.gpsX = 20;
    menuItem.gpsY = -1505;
    menuItem = menu.AddMenuItem('Миррор-Парк');
    menuItem.gpsX = 1080;
    menuItem.gpsY = -693;
    menuItem = menu.AddMenuItem('Казино Лос-Сантос');
    menuItem.gpsX = 928;
    menuItem.gpsY = 44;
    menuItem = menu.AddMenuItem('Ипподром');
    menuItem.gpsX = 1138;
    menuItem.gpsY = 106;
    menuItem = menu.AddMenuItem('Надпись Vinewood');
    menuItem.gpsX = 719;
    menuItem.gpsY = 1198;
    menuItem = menu.AddMenuItem('Восточный Театр');
    menuItem.gpsX = 301;
    menuItem.gpsY = 203;
    menuItem = menu.AddMenuItem('Weazel News');
    menuItem.gpsX = -598;
    menuItem.gpsY = -929;
    menuItem = menu.AddMenuItem('Парк Маленький Сиул');
    menuItem.gpsX = -880;
    menuItem.gpsY = -809;
    menuItem = menu.AddMenuItem('Коттеджный парк');
    menuItem.gpsX = -940;
    menuItem.gpsY = 303;
    menuItem = menu.AddMenuItem('Обсерватория Галилео');
    menuItem.gpsX = -429;
    menuItem.gpsY = 1109;
    menuItem = menu.AddMenuItem('City Hall Alta');
    menuItem.gpsX = 236;
    menuItem.gpsY = -409;
    menuItem = menu.AddMenuItem('Десять центов Театр');
    menuItem.gpsX = 393;
    menuItem.gpsY = -711;
    menuItem = menu.AddMenuItem('Здание суда');
    menuItem.gpsX = 322;
    menuItem.gpsY = -1625;
    menuItem = menu.AddMenuItem('Вальдез Театр');
    menuItem.gpsX = -721;
    menuItem.gpsY = -684;
    menuItem = menu.AddMenuItem('Richards Majestic');
    menuItem.gpsX = -1052;
    menuItem.gpsY = -478;
    menuItem = menu.AddMenuItem('City Hall Del Perro');
    menuItem.gpsX = -1285;
    menuItem.gpsY = -567;
    menuItem = menu.AddMenuItem('City Hall Rockford-Hills');
    menuItem.gpsX = -545;
    menuItem.gpsY = -203;
    menuItem = menu.AddMenuItem('Пирс Дель-Перро');
    menuItem.gpsX = -1604;
    menuItem.gpsY = -1048;
    menuItem = menu.AddMenuItem('Пирс Веспуччи');
    menuItem.gpsX = -3265;
    menuItem.gpsY = 947;
    menuItem = menu.AddMenuItem('Виноградник');
    menuItem.gpsX = -1887;
    menuItem.gpsY = 2051;
    menuItem = menu.AddMenuItem('Церковь Сэнди-Шорс');
    menuItem.gpsX = -324;
    menuItem.gpsY = 2817;
    menuItem = menu.AddMenuItem('Церковь Дель-Перро');
    menuItem.gpsX = -1681;
    menuItem.gpsY = -290;
    menuItem = menu.AddMenuItem('Rebel Radio');
    menuItem.gpsX = 732;
    menuItem.gpsY = 2523;
    menuItem = menu.AddMenuItem('Аэропорт Сэнди-Шорс');
    menuItem.gpsX = 1722;
    menuItem.gpsY = 3255;
    menuItem = menu.AddMenuItem('Озеро Аламо-Си');
    menuItem.gpsX = 1578;
    menuItem.gpsY = 3835;
    menuItem = menu.AddMenuItem('Аэропорт Грейпсид');
    menuItem.gpsX = 2138;
    menuItem.gpsY = 4812;
    menuItem = menu.AddMenuItem('Заповедник Сэнди-Шорс');
    menuItem.gpsX = -1638;
    menuItem.gpsY = 4725;
    menuItem = menu.AddMenuItem('Лесопилка Палето-Бэй');
    menuItem.gpsX = -565;
    menuItem.gpsY = 5325;
    menuItem = menu.AddMenuItem('Церковь Палето-Бэй');
    menuItem.gpsX = -329;
    menuItem.gpsY = 6150;
    menuItem = menu.AddMenuItem('Пирс Палето-Бэй');
    menuItem.gpsX = -213;
    menuItem.gpsY = 6572;
    menuItem = menu.AddMenuItem('Гора Чиллиад');
    menuItem.gpsX = 501;
    menuItem.gpsY = 5603;
    menuItem = menu.AddMenuItem('Гора Гордо');
    menuItem.gpsX = 2877;
    menuItem.gpsY = 5910;
    menuItem = menu.AddMenuItem('Карьер');
    menuItem.gpsX = 2906;
    menuItem.gpsY = 2803;
    menuItem = menu.AddMenuItem('Электростанция');
    menuItem.gpsX = 2661;
    menuItem.gpsY = 1641;
    menuItem = menu.AddMenuItem('Дамба');
    menuItem.gpsX = 1662;
    menuItem.gpsY = -13;
    menuItem = menu.AddMenuItem('Швейная фабрика');
    menuItem.gpsX = 718;
    menuItem.gpsY = -975;
    menuItem = menu.AddMenuItem('Литейный завод');
    menuItem.gpsX = 1083;
    menuItem.gpsY = -1974;
    menuItem = menu.AddMenuItem('Скотобойня');
    menuItem.gpsX = 961;
    menuItem.gpsY = -2185;
    menuItem = menu.AddMenuItem('Maze Bank Arena');
    menuItem.gpsX = -254;
    menuItem.gpsY = -2026;
    menuItem = menu.AddMenuItem('Завод по переработке отходов');
    menuItem.gpsX = -609;
    menuItem.gpsY = -1609;
    menuItem = menu.AddMenuItem('Цементный завод');
    menuItem.gpsX = 266;
    menuItem.gpsY = 2849;
    menuItem = menu.AddMenuItem('Центр переработки металлолома');
    menuItem.gpsX = 2340;
    menuItem.gpsY = 3136;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      if (item.gpsEvent != undefined) mp.events.callRemote(item.gpsEvent);else _user.user.setWaypoint(item.gpsX, item.gpsY);
    });
  },
  showFuelMenu: function (shopId, isShop, price) {
    if (!isShop) return mp.events.callRemote('server:azs:openAzs');

    let menu = _menu.default.Menu.Create(`Заправка`, ` `);

    menu.AddMenuItem('Меню заправки').doName = 'showFuelMenu';
    if (isShop) menu.AddMenuItem('Меню магазина').doName = 'showShopMenu';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    let currentListChangeItem = null;
    let currentListChangeItemIndex = 0;
    menu.ListChange.on((item, index) => {
      currentListChangeItem = item;
      currentListChangeItemIndex = index;
    });
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName && item.doName == "showFuelMenu") mp.events.callRemote('server:azs:openAzs');else if (item.price > 0) mp.events.callRemote('server:shop:buy', item.itemId, item.price, shopId);else if (item.doName) menuList.showShopMenu(shopId, price);
    });
  },
  showHelpMenu: function () {
    _phone.phone.showFaqBrowser();
  },
  chatSettings: () => {
    let menu = _menu.default.Menu.Create(`Меню`, `~b~Настройки чата`);

    let fontChat = [];

    for (let id = 0; id < 50; id++) fontChat.push(id + 1 + "px");

    let heightChat = [];

    for (let id = 0; id < 50; id++) heightChat.push(id + 1 + "vh");

    menu.AddMenuItem('Очистить чат', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'clearChat';
    let heightChatItem = menu.AddMenuItemList('Высота чата', heightChat);
    heightChatItem.doName = 'heightChat';
    heightChatItem.Index = mp.storage.data.heightChat ? mp.storage.data.heightChat : 0;
    let fontChatItem = menu.AddMenuItemList('Размер шрифта', fontChat);
    fontChatItem.doName = 'fontChat';
    fontChatItem.Index = mp.storage.data.fontChat ? mp.storage.data.fontChat : 0;
    let closeItem = menu.AddMenuItem('~r~Назад');
    menu.ListChange.on(async (item, index) => {
      if (item.doName == 'heightChat') {
        mp.storage.data.heightChat = index + 1;

        _gui.gui.updateChatSettings();
      }

      if (item.doName == 'fontChat') {
        mp.storage.data.fontChat = index + 1;

        _gui.gui.updateChatSettings();
      }
    });
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) menuList.showSettingsMenu();

      if (item.doName == 'clearChat') {
        _user.user.clearChat();
      }
    });
  },
  showSettingsMenu: function () {
    let menu = _menu.default.Menu.Create(`Меню`, `~b~Настройки`);

    let listVoiceType = ['Шепот', 'Нормально', 'Крик'];
    let listVoice3d = ['Вкл', 'Выкл'];
    let listVoiceVol = ['0%', '10%', '20%', '30%', '40%', '50%', '60%', '70%', '80%', '90%', '100%'];
    let listRadioVol = [];

    for (let q = 0; q < 101; q++) listRadioVol.push(q + '%');

    if (_methods.methods.parseInt(_user.user.get("exp_age")) > 0) {
      menu.AddMenuItem('~r~Указать возраст персонажа', 'Нажмите ~g~Enter~s~ чтобы указать').doName = 'setAge';
    }

    menu.AddMenuItem('Показывать HUD (~g~Вкл~s~/~r~Выкл~s~)', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'showRadar';
    menu.AddMenuItem('Показывать ID игроков (~g~Вкл~s~/~r~Выкл~s~)', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'showId';
    menu.AddMenuItem('Экспериментальные функции').eventName = 'server:user:testSetting';
    let listVoiceItem = menu.AddMenuItemList('Громкость голосового чата', listVoiceVol, 'Нажмите ~g~Enter~s~ чтобы применить');
    listVoiceItem.doName = 'vol';
    listVoiceItem.Index = _methods.methods.parseInt(_user.user.get('s_voice_vol') * 10);
    let listRadioItem = menu.AddMenuItemList('Громкость радиостанции', listRadioVol, 'Нажмите ~g~Enter~s~ чтобы применить');
    listRadioItem.doName = 'volRadio';
    listRadioItem.Index = _user.user.audioRadioVolume;
    menu.AddMenuItem('~y~Перезагрузить голосовой чат', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'restartVoice';
    menu.AddMenuItem('Настройки чата', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'setchat';
    menu.AddMenuItem('~y~Пофиксить кастомизацию', '~r~Ваше экипированное оружие исчезнет!').doName = 'fixCustom';
    menu.AddMenuItem('~y~Вкл. / Выкл. доп. прогрузку моделей', '~r~Возможно слегка повлияет на FPS').doName = 'loadAllModels';
    menu.AddMenuItem('~b~Промокод', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'enterPromocode';
    if (_user.user.get('job') != '') menu.AddMenuItem('~b~Топ 20 активных работяг').eventName = 'server:user:showJobSkillTopMenu';
    menu.AddMenuItem('~r~Выйти с сервера', 'Нажмите ~g~Enter~s~ чтобы применить').doName = 'exit';
    let voiceVol = 1;
    let radioVol = 1;
    menu.ListChange.on(async (item, index) => {
      if (item.doName == 'vol') {
        voiceVol = index / 10;

        _user.user.setData('s_voice_vol', voiceVol);

        mp.game.ui.notifications.show('~b~Вы установили значение: ~s~' + voiceVol * 100 + '%');
      }

      if (item.doName == 'volRadio') {
        _user.user.audioRadioVolume = index;
        mp.game.ui.notifications.show('~b~Вы установили значение: ~s~' + index + '%', 500);

        _phone.phone.updateRadioVolume();
      }
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();

      if (item.doName == 'vol') {
        _user.user.setData('s_voice_vol', voiceVol);

        mp.game.ui.notifications.show('~b~Вы установили значение: ~s~' + voiceVol * 100 + '%');
      }

      if (item.doName == 'setchat') {
        menuList.chatSettings();
      }

      if (item.doName == 'loadAllVeh') {
        _timer.timer.allVehiclesLoader();
      }

      if (item.doName == 'loadAllModels') {
        _timer.timer.allModelLoader();
      }

      if (item.doName == 'showId') {
        mp.events.call('client:showId');
      }

      if (item.doName == 'showHud') {
        _ui.ui.showOrHideHud();
      }

      if (item.doName == 'setAge') {
        mp.events.callRemote("setAge");
      }

      if (item.doName == 'showRadar') {
        _ui.ui.showOrHideRadar();
      }

      if (item.doName == 'restartVoice') {
        (0, _ragevoice.restartVoice)();
      }

      if (item.doName == 'exit') {
        _user.user.kick('Выход с сервера');
      }

      if (item.doName == 'enterPromocode') {
        let promocode = await _menu.default.Menu.GetUserInput('Введите промокод', '', 20);
        if (promocode == '') return;
        mp.events.callRemote('server:activatePromocode', promocode);
      }

      if (item.doName == 'fixCustom') {
        _menu.default.Menu.HideMenu();

        if (_user.user.get('jail_time') > 0) return;

        _user.user.updateCharacterFace();

        _user.user.updateCharacterCloth();
      }

      if (item.eventName) {
        _menu.default.Menu.HideMenu();

        mp.events.callRemote(item.eventName);
      }
    });
  },
  showJobBuilderMenu: function () {
    let menu = _menu.default.Menu.Create('Прораб', '~b~Выберите пункт меню');

    let startEndItem = menu.AddMenuItem('~g~Начать/~r~Закончить~s~ рабочий день');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == startEndItem) _builder.builder.startOrEnd();
    });
  },
  showJobCleanerMenu: function () {
    let menu = _menu.default.Menu.Create('Прораб', '~b~Выберите пункт меню');

    let startEndItem = menu.AddMenuItem('~g~Начать/~r~Закончить~s~ рабочий день');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == startEndItem) _cleaner.cleaner.startOrEnd();
    });
  },
  showJobRoadWorkerMenu: function () {
    let menu = _menu.default.Menu.Create('Прораб', '~b~Выберите пункт меню');

    let startEndItem = menu.AddMenuItem('~g~Начать/~r~Закончить~s~ рабочий день');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == startEndItem) _roadWorker.roadWorker.startOrEnd();
    });
  },
  showJobMainerMenu: function () {
    let menu = _menu.default.Menu.Create('Прораб', '~b~Выберите пункт меню');

    let startEndItem = menu.AddMenuItem('~g~Начать/~r~Закончить~s~ рабочий день');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == startEndItem) _mainer.mainer.startOrEnd();
    });
  },
  walkstyleMenu: function () {
    let menu = new _menu2.MenuClass("Походки", "Список категорий");

    if (mp.players.local.getVariable('walkstyle')) {
      menu.newItem({
        name: "Сбросить походку",
        onpress: () => {
          _user.user.setVariable('walkstyle', null);

          _user.user.notify('~g~Вы сбросили стиль походки');

          menuList.walkstyleMenu();
        }
      });
    }

    for (let cat in _walkstyles.walkstylesList) {
      let data = _walkstyles.walkstylesList[cat];
      menu.newItem({
        name: cat,
        more: `x${data.length}`,
        onpress: () => {
          let submenu = new _menu2.MenuClass(cat, "Список походок");
          data.map(item => {
            let style = (_user.user.isMale() ? "move_m@" : "move_f@") + item[1];
            submenu.newItem({
              name: item[0],
              more: style == mp.players.local.getVariable('walkstyle') ? "~g~Выбрано" : "Выбрать",
              onpress: () => {
                _user.user.setVariable('walkstyle', (_user.user.isMale() ? "move_m@" : "move_f@") + item[1]);

                _user.user.notify('~g~Вы сменили стиль походки');
              }
            });
          });
          submenu.open();
        }
      });
    }

    menu.open();
  },
  showAnimationTypeListMenu: function () {
    let menu = _menu.default.Menu.Create(`Анимации`, `~b~Меню анимаций`);

    let walkStyle = menu.AddMenuItem('Походки');
    let animActionItem = menu.AddMenuItem('Анимации действий');
    let animPoseItem = menu.AddMenuItem('Позирующие анимации');
    let animPositiveItem = menu.AddMenuItem('Положительные эмоции');
    let animNegativeItem = menu.AddMenuItem('Негативные эмоции');
    let animDanceItem = menu.AddMenuItem('Танцы');
    let animOtherItem = menu.AddMenuItem('Остальные анимации');
    let animSyncItem = menu.AddMenuItem('Взаимодействие');
    let animStopItem = menu.AddMenuItem('~y~Остановить анимацию');
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;else if (item == walkStyle) menuList.walkstyleMenu();else if (item == animStopItem) _user.user.stopAllAnimation();else if (item == animOtherItem) menuList.showAnimationOtherListMenu();else if (item == animSyncItem) menuList.showAnimationSyncListMenu();else if (item == animActionItem) menuList.showAnimationListMenu('Анимации действий', _enums.enums.animActions);else if (item == animDanceItem) menuList.showAnimationListMenu('Танцы', _enums.enums.animDance);else if (item == animNegativeItem) menuList.showAnimationListMenu('Негативные эмоции', _enums.enums.animNegative);else if (item == animPositiveItem) menuList.showAnimationListMenu('Положительные эмоции', _enums.enums.animPositive);else if (item == animPoseItem) menuList.showAnimationListMenu('Позирующие анимации', _enums.enums.animPose);
    });
  },
  showAnimationListMenu: function (subtitle, array) {
    let menu = _menu.default.Menu.Create(`Анимации`, `~b~${subtitle}`);

    array.forEach(function (item, i, arr) {
      let menuItem = menu.AddMenuItem(`${item[0]}`);
      menuItem.anim1 = item[1];
      menuItem.anim2 = item[2];
      menuItem.animFlag = item[3];
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      let plPos = mp.players.local.position;

      if (item.anim1 == 'amb@prop_human_seat_chair@male@generic@base' || item.anim1 == 'amb@prop_human_seat_chair@male@right_foot_out@base' || item.anim1 == 'amb@prop_human_seat_chair@male@left_elbow_on_knee@base' || item.anim1 == 'amb@prop_human_seat_chair@male@elbows_on_knees@base') {
        mp.players.local.freezePosition(true);
        mp.players.local.setCollision(false, false);
        if (!_data.Container.HasLocally(0, 'hasSeat')) mp.players.local.position = new mp.Vector3(plPos.x, plPos.y, plPos.z - 0.95);

        _data.Container.SetLocally(0, 'hasSeat', true);
      } else if (_data.Container.HasLocally(0, 'hasSeat')) {
        mp.players.local.freezePosition(false);
        mp.players.local.setCollision(true, true);
        mp.players.local.position = new mp.Vector3(plPos.x, plPos.y, plPos.z + 0.95);

        _data.Container.ResetLocally(0, 'hasSeat');
      }

      mp.game.ui.notifications.show('~b~Нажмите ~s~F10~b~ чтобы отменить анимацию');

      _user.user.playAnimation(item.anim1, item.anim2, item.animFlag);
    });
  },
  showAnimationOtherListMenu: function () {
    let menu = _menu.default.Menu.Create(`Анимации`, `~b~Остальные анимации`);

    _enums.enums.animRemain.forEach(function (item, i, arr) {
      let menuItem = menu.AddMenuItem(`${item[0]}`);
      menuItem.anim1 = item[1];
      menuItem.anim2 = item[2];
      menuItem.animFlag = item[3];
    });

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      mp.game.ui.notifications.show('~b~Нажмите ~s~F10~b~ чтобы отменить анимацию');
      if (item.scenario != undefined) _user.user.playScenario(item.scenario);else _user.user.playAnimation(item.anim1, item.anim2, item.animFlag);
    });
  },
  showAnimationSyncListMenu: function () {
    let menu = _menu.default.Menu.Create(`Анимации`, `~b~Взаимодействие`);

    menu.AddMenuItem(`Подзороваться 1`).animId = 0;
    menu.AddMenuItem(`Поздороваться 2`).animId = 2;
    menu.AddMenuItem(`Дать пять`).animId = 1;
    menu.AddMenuItem(`Поцелуй`).animId = 3;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      if (item == closeItem) {
        _menu.default.Menu.HideMenu();

        return;
      }

      let playerId = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 9));

      if (playerId < 0) {
        mp.game.ui.notifications.show('~r~ID Игркоа не может быть меньше нуля');
        return;
      }

      _user.user.playAnimationWithUser(playerId, item.animId);
    });
  },
  showMazeOfficeTeleportMenu: function () {
    let menu = _menu.default.Menu.Create(``, `~b~Maze Bank Лифт`, false, false, false, 'maze_bank', 'maze_bank');

    let BankMazeLiftOfficePos = new mp.Vector3(-77.77799, -829.6542, 242.7859);
    let BankMazeLiftStreetPos = new mp.Vector3(-66.66476, -802.0474, 43.22729);
    let BankMazeLiftRoofPos = new mp.Vector3(-67.13605, -821.9, 320.2874);
    let BankMazeLiftGaragePos = new mp.Vector3(-84.9765, -818.7122, 35.02804);
    menu.AddMenuItem('Гараж').teleportPos = BankMazeLiftGaragePos;
    menu.AddMenuItem('Офис').teleportPos = BankMazeLiftOfficePos;
    menu.AddMenuItem('Улица').teleportPos = BankMazeLiftStreetPos;
    menu.AddMenuItem('Крыша').teleportPos = BankMazeLiftRoofPos;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      _user.user.teleportv(item.teleportPos);
    });
  },
  showFibOfficeTeleportMenu: function () {
    let menu = _menu.default.Menu.Create(`Fib`, `~b~Лифт`);

    let FibLift0StationPos = new mp.Vector3(122.9873, -741.1865, 32.13323);
    let FibLift1StationPos = new mp.Vector3(136.2213, -761.6816, 44.75201);
    let FibLift2StationPos = new mp.Vector3(136.2213, -761.6816, 241.152);
    let FibLift3StationPos = new mp.Vector3(114.9807, -741.8279, 257.1521);
    let FibLift4StationPos = new mp.Vector3(141.4099, -735.3376, 261.8516);
    menu.AddMenuItem('Гараж').teleportPos = FibLift0StationPos;
    menu.AddMenuItem('1 этаж').teleportPos = FibLift1StationPos;
    menu.AddMenuItem('49 этаж').teleportPos = FibLift2StationPos;
    menu.AddMenuItem('52 этаж').teleportPos = FibLift3StationPos;
    menu.AddMenuItem('Крыша').teleportPos = FibLift4StationPos;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      _user.user.teleportv(item.teleportPos);
    });
  },
  showGovOfficeTeleportMenu: function () {
    let menu = _menu.default.Menu.Create(`Правительство`, `~b~Лифт`);

    let MeriaUpPos = new mp.Vector3(-1395.997, -479.8439, 71.04215);
    let MeriaDownPos = new mp.Vector3(-1379.659, -499.748, 32.15739);
    let MeriaRoofPos = new mp.Vector3(-1369, -471.5994, 83.44699);
    let MeriaGarPos = new mp.Vector3(-1360.679, -471.8841, 30.59572);
    menu.AddMenuItem('Гараж').teleportPos = MeriaGarPos;
    menu.AddMenuItem('Офис').teleportPos = MeriaUpPos;
    menu.AddMenuItem('Улица').teleportPos = MeriaDownPos;
    menu.AddMenuItem('Крыша').teleportPos = MeriaRoofPos;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      _user.user.teleportv(item.teleportPos);
    });
  },
  showMeriaMainMenu: function () {
    let menu = _menu.default.Menu.Create(``, `Секретарь правительства`, false, false, false, 'suemurry_background_left', 'suemurry_background_left');

    menu.AddMenuItem('Лицензия таксиста', 'Цена: ~g~$500').doName = 'getTaxiLic';
    menu.AddMenuItem('Оформить регистрацию', 'Оформление регистрации на 6 месяцев').doName = 'getRegister';
    menu.AddMenuItem('Трудовая биржа').doName = 'showMeriaJobListMenu';
    menu.AddMenuItem('Оформить пособие').doName = 'getPosob';
    menu.AddMenuItem('Оформить пенсию').doName = 'getMoneyOld';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;
      if (item.doName == 'showMeriaJobListMenu') menuList.showMeriaJobListMenu();

      if (item.doName == 'getTaxiLic') {
        if (_user.user.get('reg_status') == 0) {
          mp.game.ui.notifications.show('~r~У Вас нет регистрации');
          return;
        }

        if (_user.user.getLevel() < _level.levelAccess.taxiLic) {
          mp.game.ui.notifications.show('~r~Вы должны достичь ' + _level.levelAccess.taxiLic + ' уровня');
          return;
        }

        _licenseCenter.licenseCenter.buy('taxi_lic', 500);
      }

      if (item.doName == 'getRegister') {
        if (_user.user.get('reg_status') > 1) {
          mp.game.ui.notifications.show('~r~Вам не нужна регистрация');
          return;
        }

        _user.user.setData('reg_status', 1);

        _user.user.setData('reg_time', 186);

        mp.game.ui.notifications.show('~g~Вы получили регистрацию на ~s~6 мес.');
      }

      if (item.doName == 'getPosob') {
        if (_user.user.get('job') == '' && (_user.user.get('fraction_id') > 7 && _user.user.get('fraction_id') < 15 || _user.user.get('fraction_id') == 0)) {
          mp.game.ui.notifications.show('~g~Вы оформили пособие');

          _user.user.setData('posob', true);

          return;
        }

        _user.user.setData('posob', false);

        mp.game.ui.notifications.show('~r~Вам было отказано в оформлении пособия');
      }

      if (item.doName == 'getMoneyOld') {
        if (_user.user.getLevel() >= _level.levelAccess.oldmoney) {
          mp.game.ui.notifications.show('~g~Вы оформили пенсию');

          _user.user.setData('is_old_money', true);

          return;
        }

        _user.user.setData('is_old_money', false);

        mp.game.ui.notifications.show('~r~Пенсия доступна с ' + _level.levelAccess.oldmoney + ' уровня');
      }
    });
  },
  showMeriaJobListMenu: function () {
    let menu = _menu.default.Menu.Create(`Секретарь`, `~b~Трудовая биржа`);

    menu.AddMenuItem('Уборщик квартир', 'Компания: ~y~Sunset Bleach').jobName = 'sunb';
    menu.AddMenuItem('Дезинсектор', 'Компания: ~y~Bugstars').jobName = 'bgstar';
    menu.AddMenuItem('Доставщик еды', 'Компания: ~y~BurgerShot').jobName = 'bshot';
    menu.AddMenuItem('Мехатроник', 'Компания: ~y~Water & Power').jobName = 'water';
    menu.AddMenuItem('Садовник', "Компания: ~y~O'Connor").jobName = 'three';
    menu.AddMenuItem('Фотограф', 'Компания: ~y~LifeInvader').jobName = 'photo';
    menu.AddMenuItem('Почтальон (PostOp)', 'Компания: ~y~PostOp').jobName = 'mail';
    menu.AddMenuItem('Почтальон (GoPostal)', 'Компания: ~y~GoPost').jobName = 'mail2';
    menu.AddMenuItem('Таксист (DT Cab Co.)', 'Компания: ~y~DownTown Cab Co.').jobName = 'taxi1';
    menu.AddMenuItem('Таксист (Express C.S.)', 'Компания: ~y~Express C.S.').jobName = 'taxi2';
    menu.AddMenuItem('Водитель автобуса-1', 'Городской автобус').jobName = 'bus1';
    menu.AddMenuItem('Водитель автобуса-2', 'Трансферный автобус').jobName = 'bus2';
    menu.AddMenuItem('Водитель автобуса-3', 'Рейсовый автобус').jobName = 'bus3';

    if (!_user.user.isGos() && !_user.user.isGang()) {
      menu.AddMenuItem('Инкассатор', 'Компания: ~y~Gruppe6').jobName = 'gr6';
      menu.AddMenuItem('Грузоперевозки').doName = 'showTruckerMenu';
    }

    menu.AddMenuItem('Юрист').doName = 'showLawerMenu';
    menu.AddMenuItem('~y~Уволиться с работы').doName = 'uninvite';
    menu.AddMenuItem('~y~Уволиться из неоф. организации', 'Уволиться из неоф. организации').doName = 'uninviteFraction';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;else if (item.doName == 'uninvite') {
        _user.user.setData('job', '');

        mp.game.ui.notifications.show('~y~Вы уволились с работы');
      } else if (item.doName == 'uninviteFraction') {
        if (!_user.user.isLeader2()) {
          _user.user.setData('fraction_id2', 0);

          _user.user.setData('rank2', 0);

          mp.game.ui.notifications.show('~y~Вы уволились из организации');
        }
      } else {
        if (_user.user.isGos()) return mp.game.ui.notifications.show('~y~Вы не можете устроится на работу');
      }

      if (item.doName == 'showTruckerMenu') {
        menuList.showMeriaJobTruckerListMenu();
      }

      if (item.doName == 'showLawerMenu') {
        menuList.showMeriaJobLawerListMenu();
      }

      if (item.jobName) {
        if (_user.user.get('reg_status') == 0) {
          mp.game.ui.notifications.show('~r~У Вас нет регистрации');
          return;
        }

        if (!_user.user.get('b_lic')) {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии категории B');
          return;
        }

        if (_user.user.getLevel() < 2 && (item.jobName == 'three' || item.jobName == 'photo')) {
          mp.game.ui.notifications.show('~r~Доступно со второго уровня');
          return;
        }

        if (_user.user.getLevel() < 2 && (item.jobName == 'mail1' || item.jobName == 'mail2')) {
          mp.game.ui.notifications.show('~r~Доступно со второго уровня');
          return;
        }

        if (_user.user.getLevel() < 2 && (item.jobName == 'bus1' || item.jobName == 'bus2' || item.jobName == 'bus3')) {
          mp.game.ui.notifications.show('~r~Доступно со второго уровня');
          return;
        }

        if (!_user.user.get('gun_lic') && item.jobName == 'gr6') {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии на оружие');
          return;
        }

        if (!_user.user.get('c_lic') && item.jobName == 'gr6') {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии категории С');
          return;
        }

        if (_user.user.getLevel() < _level.levelAccess.gr6 && item.jobName == 'gr6') {
          mp.game.ui.notifications.show('~r~Вы должны достичь ' + _level.levelAccess.gr6 + ' уровня');
          return;
        }

        if (!_user.user.get('taxi_lic') && (item.jobName == 'taxi1' || item.jobName == 'taxi2')) {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии таксиста');
          return;
        }

        if (_user.user.getLevel() < _level.levelAccess.swater && (item.jobName == 'swater' || item.jobName == 'sground')) {
          mp.game.ui.notifications.show('~r~Вы должны быть иметь уровень ' + _level.levelAccess.swater);
          return;
        }

        if (_user.user.isGos()) {
          mp.game.ui.notifications.show('~r~Вы не должны быть в гос фракции');
          return;
        }

        _user.user.setData('posob', false);

        _user.user.setData('job', item.jobName);

        mp.game.ui.notifications.show('~g~Вы устроились на работу');

        _user.user.saveAccount();
      }
    });
  },
  showMeriaJobTruckerListMenu: function () {
    let menu = _menu.default.Menu.Create(`Секретарь`, `~b~Грузоперевозки`);

    menu.AddMenuItem('На фургонах', 'Компании: ~y~PostOp~s~ | ~y~GoPostal').jobName = 'trucker1';
    menu.AddMenuItem('На грузовиках', 'Компании: ~y~Bilgeco~s~ | ~y~Jetsam~s~ | ~y~Lando-Corp').jobName = 'trucker2';
    menu.AddMenuItem('На фурах', 'Компании: ~y~Bilgeco~s~ | ~y~Jetsam~s~ | ~y~Lando-Corp').jobName = 'trucker3';
    menu.AddMenuItem('~y~Уволиться с работы').doName = 'uninvite';
    menu.AddMenuItem('~y~Уволиться из неоф. организации', 'Уволиться из неоф. организации').doName = 'uninviteFraction';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;else if (item.doName == 'uninvite') {
        _user.user.setData('job', '');

        mp.game.ui.notifications.show('~y~Вы уволились с работы');
      } else if (item.doName == 'uninviteFraction') {
        if (!_user.user.isLeader2()) {
          _user.user.setData('fraction_id2', 0);

          _user.user.setData('rank2', 0);

          mp.game.ui.notifications.show('~y~Вы уволились из организации');
        }
      } else {
        if (_user.user.isGos()) return mp.game.ui.notifications.show('~y~Вы не можете устроится на работу');
      }

      if (item.jobName) {
        if (_user.user.get('reg_status') == 0) {
          mp.game.ui.notifications.show('~r~У Вас нет регистрации');
          return;
        }

        if (!_user.user.get('b_lic')) {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии категории B');
          return;
        }

        if (!_user.user.get('c_lic')) {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии категории C');
          return;
        }

        if (_user.user.getLevel() < _level.levelAccess.truckerjob) {
          mp.game.ui.notifications.show('~r~Вы должны достичь уровня: ' + _level.levelAccess.truckerjob);
          return;
        }

        if (_user.user.get('skill_trucker') < 500 && item.jobName == 'trucker2') {
          mp.game.ui.notifications.show('~r~Навык дальнобойщика должен быть не менее 33%');
          return;
        }

        if (_user.user.get('skill_trucker') < 1000 && item.jobName == 'trucker3') {
          mp.game.ui.notifications.show('~r~Навык дальнобойщика должен быть не менее 66%');
          return;
        }

        _user.user.setData('posob', false);

        _user.user.setData('job', item.jobName);

        mp.game.ui.notifications.show('~g~Вы устроились на работу');

        _user.user.saveAccount();
      }
    });
  },
  showMeriaJobLawerListMenu: async function () {
    let pricent1 = (await _business.business.getPrice(58)) * 10;
    let pricent2 = (await _business.business.getPrice(58)) * 10;
    let pricent3 = (await _business.business.getPrice(58)) * 10;

    let menu = _menu.default.Menu.Create(`Секретарь`, `~b~Выберите компанию`);

    menu.AddMenuItem('Slaughter, Slaughter & Slaughter', `Процентная ставка: ~y~${pricent1}%`).jobName = 'lawyer1';
    menu.AddMenuItem('Bullhead', `Процентная ставка: ~y~${pricent2}%`).jobName = 'lawyer2';
    menu.AddMenuItem('Pearson Specter', `Процентная ставка: ~y~${pricent3}%`).jobName = 'lawyer3';
    menu.AddMenuItem('~y~Уволиться с работы').doName = 'uninvite';
    menu.AddMenuItem('~y~Уволиться из неоф. организации', 'Уволиться из неоф. организации').doName = 'uninviteFraction';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      if (item.doName == 'uninvite') {
        _user.user.setData('job', '');

        mp.game.ui.notifications.show('~y~Вы уволились с работы');
      }

      if (item.doName == 'uninviteFraction') {
        if (!_user.user.isLeader2()) {
          _user.user.setData('fraction_id2', 0);

          _user.user.setData('rank2', 0);

          mp.game.ui.notifications.show('~y~Вы уволились из организации');
        }
      }

      if (item.jobName) {
        if (_user.user.get('reg_status') != 3) {
          mp.game.ui.notifications.show('~r~У Вас нет гражданства США');
          return;
        }

        if (!_user.user.get('law_lic')) {
          mp.game.ui.notifications.show('~r~У Вас нет лицензии юриста');
          return;
        }

        if (_user.user.getLevel() < _level.levelAccess.companyWork) {
          mp.game.ui.notifications.show('~r~Минимум уровень ' + _level.levelAccess.companyWork);
          return;
        }

        _user.user.setData('posob', false);

        _user.user.setData('job', item.jobName);

        mp.game.ui.notifications.show('~g~Вы устроились на работу');

        _user.user.saveAccount();
      }
    });
  },
  showMazeOfficeMenu: function () {
    let menu = _menu.default.Menu.Create(``, `~b~Офис государственного банка "~r~Maze~b~"`, false, false, false, 'maze_bank', 'maze_bank');

    menu.AddMenuItem('Имущество', 'Операции с вашим имуществом').doName = 'showMazeBankOfficeSellHvbMenu';
    if (_user.user.get('id_house') > 0) menu.AddMenuItem('Жилищный вопрос', 'Операции с вашими жильцами').doName = 'showMazeBankHousePeopleMenu';
    menu.AddMenuItem('Налоговый кабинет').doName = 'showMazeBankOfficeTaxMenu';
    menu.AddMenuItem('Банк').doName = 'showBankMenu';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;
      if (item.doName == 'showBankMenu') menuList.showBankMenu(0, 10);
      if (item.doName == 'showMazeBankOfficeSellHvbMenu') menuList.showMazeBankOfficeSellHvbMenu(await _coffer.coffer.getAllData());
      if (item.doName == 'showMazeBankOfficeTaxMenu') menuList.showMazeBankOfficeTaxMenu();
      if (item.doName == 'showMazeBankHousePeopleMenu') menuList.showMazeBankHousePeopleMenu();
    });
  },
  showMazeBankOfficeSellHvbMenu: function (cofferData) {
    _user.user.updateCache().then(function () {
      let menu = _menu.default.Menu.Create(`Maze`, `~b~Текущая налоговая ставка: ~s~${cofferData.get('cofferNalog')}%`);

      if (_user.user.get('id_house') > 0) {
        menu.AddMenuItem('Продать дом', 'Продать дом государству, с учетом налога').eventName = 'server:houses:sell';
        menu.AddMenuItem('~y~Продать дом игроку').eventNameSell = 'server:houses:sellToPlayer';
      }

      if (_user.user.get('condo_id') > 0) {
        menu.AddMenuItem('Продать квартиру', 'Продать квартиру государству, с учетом налога').eventName = 'server:condo:sell';
        menu.AddMenuItem('~y~Продать квартиру игроку').eventNameSell = 'server:condo:sellToPlayer';
      }

      if (_user.user.get('apartment_id') > 0) {
        menu.AddMenuItem('Продать апартаменты', 'Продать апартаменты государству, с учетом налога').eventName = 'server:apartments:sell';
        menu.AddMenuItem('~y~Продать апартаменты игроку').eventNameSell = 'server:apartments:sellToPlayer';
      }

      if (_user.user.get('business_id') > 0) {
        menu.AddMenuItem('Продать бизнес', 'Продать бизнес государству, с учетом налога').eventName = 'server:business:sell';
        menu.AddMenuItem('~y~Продать бизнес игроку').eventNameSell = 'server:business:sellToPlayer';
      }

      if (_user.user.get('stock_id') > 0) {
        menu.AddMenuItem('Продать склад', 'Продать склад государству, с учетом налога').eventName = 'server:stock:sell';
        menu.AddMenuItem('~y~Продать склад игроку').eventNameSell = 'server:stock:sellToPlayer';
      }

      if (_user.user.get('car_id1') > 0) {
        menu.AddMenuItem('Продать ТС #1', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car1:sell';
        menu.AddMenuItem('~y~Продать ТС #1 игроку').eventNameSell = 'server:car1:sellToPlayer';
      }

      if (_user.user.get('car_id2') > 0) {
        menu.AddMenuItem('Продать ТС #2', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car2:sell';
        menu.AddMenuItem('~y~Продать ТС #2 игроку').eventNameSell = 'server:car2:sellToPlayer';
      }

      if (_user.user.get('car_id3') > 0) {
        menu.AddMenuItem('Продать ТС #3', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car3:sell';
        menu.AddMenuItem('~y~Продать ТС #3 игроку').eventNameSell = 'server:car3:sellToPlayer';
      }

      if (_user.user.get('car_id4') > 0) {
        menu.AddMenuItem('Продать ТС #4', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car4:sell';
        menu.AddMenuItem('~y~Продать ТС #4 игроку').eventNameSell = 'server:car4:sellToPlayer';
      }

      if (_user.user.get('car_id5') > 0) {
        menu.AddMenuItem('Продать ТС #5', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car5:sell';
        menu.AddMenuItem('~y~Продать ТС #5 игроку').eventNameSell = 'server:car5:sellToPlayer';
      }

      if (_user.user.get('car_id6') > 0) {
        menu.AddMenuItem('Продать ТС #6', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car6:sell';
        menu.AddMenuItem('~y~Продать ТС #6 игроку').eventNameSell = 'server:car6:sellToPlayer';
      }

      if (_user.user.get('car_id7') > 0) {
        menu.AddMenuItem('Продать ТС #7', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car7:sell';
        menu.AddMenuItem('~y~Продать ТС #7 игроку').eventNameSell = 'server:car7:sellToPlayer';
      }

      if (_user.user.get('car_id8') > 0) {
        menu.AddMenuItem('Продать ТС #8', 'Продать транспорт государству.\nНалог: ~g~' + (cofferData.get('cofferNalog') + 20) + '%').eventName = 'server:car8:sell';
        menu.AddMenuItem('~y~Продать ТС #8 игроку').eventNameSell = 'server:car8:sellToPlayer';
      }

      let closeItem = menu.AddMenuItem('~r~Закрыть');
      menu.ItemSelect.on(async (item, index) => {
        _menu.default.Menu.HideMenu();

        if (item == closeItem) return;

        if (item.eventName) {
          menuList.showMazeAcceptSellMenu(item.eventName);
        }

        if (item.eventNameSell) {
          if (_data.Container.HasLocally(mp.players.local.remoteId, 'isSellTimeout')) {
            mp.game.ui.notifications.show('~r~Таймаут 1 минута');
          }

          let playerId = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 9));

          if (playerId < 0) {
            mp.game.ui.notifications.show('~r~ID Игркоа не может быть меньше нуля');
            return;
          }

          let sum = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма', '', 9));

          if (sum < 0) {
            mp.game.ui.notifications.show('~r~Сумма не может быть меньше нуля');
            return;
          }

          if (item.eventNameSell == 'server:car1:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 1);else if (item.eventNameSell == 'server:car2:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 2);else if (item.eventNameSell == 'server:car3:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 3);else if (item.eventNameSell == 'server:car4:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 4);else if (item.eventNameSell == 'server:car5:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 5);else if (item.eventNameSell == 'server:car6:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 6);else if (item.eventNameSell == 'server:car7:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 7);else if (item.eventNameSell == 'server:car8:sellToPlayer') mp.events.callRemote('server:car:sellToPlayer', playerId, sum, 8);else mp.events.callRemote(item.eventNameSell, playerId, sum);

          _data.Container.SetLocally(mp.players.local.remoteId, 'isSellTimeout', true);

          setTimeout(function () {
            _data.Container.ResetLocally(mp.players.local.remoteId, 'isSellTimeout');
          }, 1000 * 60);
        }
      });
    });
  },
  showMazeBankHousePeopleMenu: function () {
    _user.user.updateCache().then(function () {
      let menu = _menu.default.Menu.Create(`Maze`, `~b~Жилищный вопрос`);

      if (_user.user.get('id_house') > 0) {
        menu.AddMenuItem('Подселить игрока в дом', 'Стоимость ~g~$50.000\n~s~Через юристов ~g~$10.000').eventName = 'server:houses:addUser';
        menu.AddMenuItem('Список жильцов').eventName = 'server:houses:userList';
        menu.AddMenuItem('~y~Выселиться', 'Стоимость ~g~$1.000').eventName = 'server:houses:removeMe';
      }

      let closeItem = menu.AddMenuItem('~r~Закрыть');
      menu.ItemSelect.on(async (item, index) => {
        _menu.default.Menu.HideMenu();

        if (item == closeItem) return;

        if (item.eventName == 'server:houses:addUser') {
          let playerId = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('ID Игрока', '', 9));

          if (playerId < 0) {
            mp.game.ui.notifications.show('~r~ID Игрока не может быть меньше нуля');
            return;
          }

          mp.events.callRemote(item.eventName, playerId);
        } else if (item.eventName) {
          mp.events.callRemote(item.eventName);
        }
      });
    });
  },
  showMazeBankHousePeopleListMenu: function (data) {
    let menu = _menu.default.Menu.Create(`Жилье`, `~b~Список жильцов`);

    data.forEach(function (item) {
      let userId = _methods.methods.parseInt(item[0]);

      if (userId == _user.user.get('id')) menu.AddMenuItem(`${item[1]} (${item[0]})`);else menu.AddMenuItem(`${item[1]} (${item[0]})`).eventParam = userId;
    });
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();

      if (item.eventParam) menuList.showMazeBankHousePeopleListDoMenu(item.eventParam);
    });
  },
  showMazeBankHousePeopleListDoMenu: function (id) {
    let menu = _menu.default.Menu.Create(`Жилье`, `~b~` + id);

    menu.AddMenuItem(`~r~Выселить по цене $1.000`).eventName = 'server:house:removeId';
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(item => {
      _menu.default.Menu.HideMenu();

      if (item.eventName == 'server:house:removeId') {
        mp.events.callRemote(item.eventName, id);
      }
    });
  },
  showMazeAcceptSellMenu: function (eventName) {
    let menu = _menu.default.Menu.Create(`Maze`, `~b~Вы точно хотите продать?`);

    menu.AddMenuItem('~y~Продать').eventName = eventName;
    let closeItem = menu.AddMenuItem('~r~Отменить');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;
      if (item.eventName) mp.events.callRemote(item.eventName);
    });
  },
  showMazeBankOfficeTaxMenu: function () {
    _user.user.updateCache().then(function () {
      let menu = _menu.default.Menu.Create(`Maze`, `~b~Налоговый кабинет`);

      if (_user.user.get('id_house') > 0) {
        let menuItem = menu.AddMenuItem('Налог за дом');
        menuItem.itemId = _user.user.get('id_house');
        menuItem._type = 0;
      }

      if (_user.user.get('condo_id') > 0) {
        let menuItem = menu.AddMenuItem('Налог за квартиру');
        menuItem.itemId = _user.user.get('condo_id');
        menuItem._type = 5;
      }

      if (_user.user.get('apartment_id') > 0) {
        let menuItem = menu.AddMenuItem('Налог за апартаменты');
        menuItem.itemId = _user.user.get('apartment_id');
        menuItem._type = 3;
      }

      if (_user.user.get('business_id') > 0) {
        let menuItem = menu.AddMenuItem('Налог за бизнес');
        menuItem.itemId = _user.user.get('business_id');
        menuItem._type = 2;
      }

      if (_user.user.get('stock_id') > 0) {
        let menuItem = menu.AddMenuItem('Налог за склад');
        menuItem.itemId = _user.user.get('stock_id');
        menuItem._type = 4;
      }

      for (let i = 1; i < 9; i++) {
        if (_user.user.get('car_id' + i) > 0) {
          let menuItem = menu.AddMenuItem('Налог за ТС #' + i);
          menuItem.itemId = _user.user.get('car_id' + i);
          menuItem._type = 1;
        }
      }

      let closeItem = menu.AddMenuItem('~r~Закрыть');
      menu.ItemSelect.on(async (item, index) => {
        _menu.default.Menu.HideMenu();

        if (item == closeItem) return;

        if (item.itemId) {
          menuList.showMazeBankOfficeTaxInfoMenu(item._type, item.itemId);
        }
      });
    });
  },
  showMazeBankOfficeTaxInfoMenu: async function (type, id) {
    let tax = 0;
    let taxLimit = 0;
    let taxDay = 0;
    let score = 0;
    let name = '';

    if (type == 0) {
      let item = await mp.events.callServer('house:getData', id);
      taxDay = _methods.methods.parseInt((item.price * 0.0001 + 10) / 7);
      tax = item.money_tax;
      taxLimit = _methods.methods.parseInt(item.price * 0.0001 + 10) * 21;
      score = item.score_tax;
      name = item.address + ' №' + item.id;
    } else if (type == 1) {
      let item = await _vehicles.vehicles.getData(id);
      taxDay = _methods.methods.parseInt((item.get('price') * 0.0001 + 10) / 7);
      tax = item.get('money_tax');
      taxLimit = _methods.methods.parseInt(item.get('price') * 0.0001 + 10) * 21;
      score = item.get('score_tax');
      name = _methods.methods.getVehicleInfo(item.get('hash')).display_name + ' (' + item.get('number') + ')';
    } else if (type == 2) {
      let item = await _business.business.getData(id);
      taxDay = _methods.methods.parseInt((item.price * 0.0001 + 10) / 7);
      tax = item.money_tax;
      taxLimit = _methods.methods.parseInt(item.price * 0.0001 + 10) * 21;
      score = item.score_tax;
      name = item.name;
    } else if (type == 3) {
      let item = await _data.Container.GetAll(-100000 + _methods.methods.parseInt(id));
      taxDay = _methods.methods.parseInt((item.get('price') * 0.0001 + 10) / 7);
      tax = item.get('money_tax');
      taxLimit = _methods.methods.parseInt(item.get('price') * 0.0001 + 10) * 21;
      score = item.get('score_tax');
      name = 'Апартаменты №' + item.get('id');
    } else if (type == 4) {
      let item = await _stock.stock.getData(id);
      taxDay = _methods.methods.parseInt((item.get('price') * 0.0001 + 10) / 7);
      tax = item.get('money_tax');
      taxLimit = _methods.methods.parseInt(item.get('price') * 0.0001 + 10) * 21;
      score = item.get('score_tax');
      name = 'Склад №' + item.get('id');
    } else if (type == 5) {
      let item = await _condo.condo.getData(id);
      taxDay = _methods.methods.parseInt((item.get('price') * 0.0001 + 10) / 7);
      tax = item.get('money_tax');
      taxLimit = _methods.methods.parseInt(item.get('price') * 0.0001 + 10) * 21;
      score = item.get('score_tax');
      name = item.get('address') + ' №' + item.get('id');
    }

    _methods.methods.debug(name, tax, taxLimit, taxDay, score);

    let menu = _menu.default.Menu.Create(`Maze`, `~b~` + name);

    menu.AddMenuItem(`~b~Счёт:~s~ ${score}`, 'Уникальный счёт вашего имущества');
    menu.AddMenuItem(`~b~Ваша задолженность:~s~ ~r~${tax == 0 ? '~g~Отсутствует' : `$${tax}`}`, `Ваш текущий долг, при достижении ~r~$${taxLimit}~s~ ваше имущество будет изъято`);
    menu.AddMenuItem(`~b~Налог в день:~s~ $${taxDay}`, 'Индвивидуальная налоговая ставка');
    menu.AddMenuItem(`~b~Допустимый лимит:~s~ $${taxLimit}`, 'Допустимый лимит до обнуления имущества');
    menu.AddMenuItem('Оплатить наличкой').payTaxType = 0;
    menu.AddMenuItem('Оплатить картой').payTaxType = 1;
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item == closeItem) return;

      if (item.payTaxType >= 0) {
        let sum = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма', '', 9));

        if (sum == 0) return;

        if (item.payTaxType == 0 && _user.user.getCashMoney() < sum) {
          mp.game.ui.notifications.show('~r~У Вас нет такой суммы на руках');
          return;
        }

        if (item.payTaxType == 1 && _user.user.getBankMoney() < sum) {
          mp.game.ui.notifications.show('~r~У Вас нет такой суммы в банке');
          return;
        }

        mp.events.callRemote('server:tax:payTax', item.payTaxType, score, sum);
      }
    });
  },
  showBankMenu: function (bankId, priceCard) {
    let menu = _menu.default.Menu.Create(``, `~b~Нажмите "~g~Enter~b~", чтобы выбрать пункт`);

    switch (bankId) {
      case 1:
        menu.spriteName = "fleeca";
        break;

      case 2:
        menu.spriteName = "blane";
        break;

      case 108:
        menu.spriteName = "pacific";
        break;

      case 0:
        menu.spriteName = "maze";
        break;

      default:
        menu.title = 'Банк';
        break;
    }

    if (bankId == 0 && _user.user.get('bank_prefix') == 1111 || bankId == 1 && _user.user.get('bank_prefix') == 2222 || bankId == 2 && _user.user.get('bank_prefix') == 3333 || bankId == 108 && _user.user.get('bank_prefix') == 4444) {
      menu.AddMenuItem('Снять средства').eventName = 'server:bank:withdraw';
      menu.AddMenuItem('Положить средства').eventName = 'server:bank:deposit';
      menu.AddMenuItem('Баланс').SetRightLabel('~g~$' + _methods.methods.numberFormat(_user.user.get('money_bank')));
      menu.AddMenuItem('Номер карты').SetRightLabel(_user.user.get('bank_prefix') + '-' + _user.user.get('bank_number'));
      menu.AddMenuItem('Перевести на другой счет', '1% от суммы, при переводе').eventName = 'server:bank:transferMoney';
      if (_user.user.get('bank_prefix') == 2222 || _user.user.get('bank_prefix') == 3333 || _user.user.get('bank_prefix') == 4444) menu.AddMenuItem('~b~Изменить номер карты', 'Цена: ~g~$100,000').eventName = 'server:bank:changeCardNumber';
      menu.AddMenuItem('~r~Закрыть счёт').eventName = 'server:bank:closeCard';
    } else {
      menu.AddMenuItem('Оформить карту банка', 'Цена: ~g~$' + priceCard).eventName = 'server:bank:openCard';
    }

    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.eventName == 'server:bank:withdraw') {
        let mStr = await _menu.default.Menu.GetUserInput('Сумма снятия', '', 9);
        if (mStr == '') return;

        let money = _methods.methods.parseInt(mStr);

        mp.events.callRemote(item.eventName, money, 0);
      } else if (item.eventName == 'server:bank:deposit') {
        let mStr = await _menu.default.Menu.GetUserInput('Сумма внесения', '', 9);
        if (mStr == '') return;

        let money = _methods.methods.parseInt(mStr);

        mp.events.callRemote(item.eventName, money, 0);
      } else if (item.eventName == 'server:bank:transferMoney') {
        let bankPrefix = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Префикс карты', '', 4));

        let bankNumber = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Номер карты', '', 9));

        let money = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма перевода', '', 9));

        mp.events.callRemote(item.eventName, bankPrefix, bankNumber, money);
      } else if (item.eventName == 'server:bank:changeCardNumber') {
        let bankNumber = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Желаемый номер карты', '', 9));

        mp.events.callRemote(item.eventName, bankNumber);
      } else if (item.eventName == 'server:bank:closeCard') {
        mp.events.callRemote(item.eventName);
      } else if (item.eventName == 'server:bank:openCard') {
        mp.events.callRemote(item.eventName, bankId, priceCard);
      }
    });
  },
  showAtmMenu: function () {
    mp.events.callRemote('atm:open');

    _gui.gui.setGui('atm');
  },
  showRentVehMailMenu: function () {
    let menu = _menu.default.Menu.Create(`Почта`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Транспорт почты', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('Транспорт грузоперевозок', 'Цена: ~g~$900').doName = 'takeVehicle1';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.get('job') != 'mail' && _user.user.get('job') != 'mail2') {
          mp.game.ui.notifications.show('~r~Вы не работаете в почтовой компании');
          return;
        }

        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        if (_user.user.get('job') == 'mail') _business.business.addMoney(115, 100);
        if (_user.user.get('job') == 'mail2') _business.business.addMoney(119, 100);

        switch (_user.user.get('job')) {
          case 'mail':
            _vehicles.vehicles.spawnJobCar(-416.051, -2855.117, 5.903267, 29.43917, 444171386, 'mail');

            break;

          case 'mail2':
            _vehicles.vehicles.spawnJobCar(74.63538, 120.9179, 79.095, 159.2784, -233098306, 'mail2');

            break;
        }
      }

      if (item.doName == 'takeVehicle1') {
        if (_user.user.get('job') != 'trucker1' && _user.user.get('job') != 'trucker2' && _user.user.get('job') != 'trucker3') {
          mp.game.ui.notifications.show('~r~Вы не работаете в грузоперевозках');
          return;
        }

        if (_user.user.getCashMoney() < 900) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $900');
          return;
        }

        _user.user.removeCashMoney(900);

        if (_methods.methods.distanceToPos(new mp.Vector3(-416.051, -2855.117, 5.903267), mp.players.local.position) < 100) {
          _vehicles.vehicles.spawnJobCar(-416.051, -2855.117, 5.903267, 29.43917, 'burrito3', 'trucker11');

          _business.business.addMoney(115, 900);
        }

        if (_methods.methods.distanceToPos(new mp.Vector3(74.63538, 120.9179, 79.095), mp.players.local.position) < 50) {
          _vehicles.vehicles.spawnJobCar(74.63538, 120.9179, 79.095, 159.2784, 'pony', 'trucker12');

          _business.business.addMoney(119, 900);
        }
      }
    });
  },
  showRentVehTruckerMenu: function (id) {
    let menu = _menu.default.Menu.Create(`Грузоперевозки`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('~g~==========[Грузовики]===========');
    let price = 4000;
    let vItem = menu.AddMenuItem('Mule', 'Цена: ~g~$' + price);
    vItem.price = price;

    switch (_methods.methods.getRandomInt(0, 3)) {
      case 0:
        vItem.name = 'Mule3';
        break;

      case 1:
        vItem.name = 'Mule2';
        break;

      default:
        vItem.name = 'Mule';
        break;
    }

    vItem.doName = 'takeVehicle';
    price = 3500;
    vItem = menu.AddMenuItem('Benson', 'Цена: ~g~$' + price);
    vItem.price = price;
    vItem.name = 'Benson';
    vItem.doName = 'takeVehicle';
    price = 3000;
    vItem = menu.AddMenuItem('Pounder', 'Цена: ~g~$' + price);
    vItem.price = price;
    vItem.name = 'Pounder';
    vItem.doName = 'takeVehicle';
    menu.AddMenuItem('~g~==========[Тягочи]===========');
    price = 8000;
    vItem = menu.AddMenuItem('Hauler', 'Цена: ~g~$' + price);
    vItem.price = price;
    vItem.name = 'Hauler';
    vItem.doName = 'takeVehicle1';
    price = 9000;
    vItem = menu.AddMenuItem('Packer', 'Цена: ~g~$' + price);
    vItem.price = price;
    vItem.name = 'Packer';
    vItem.doName = 'takeVehicle1';
    price = 10000;
    vItem = menu.AddMenuItem('Phantom', 'Цена: ~g~$' + price);
    vItem.price = price;
    vItem.name = 'Phantom';
    vItem.doName = 'takeVehicle1';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.get('job') != 'trucker2') {
          mp.game.ui.notifications.show('~r~Вам необходимо работать в грузоперевозках на грузовиках');
          return;
        }

        if (_user.user.get('skill_trucker') < 500) {
          mp.game.ui.notifications.show('~r~Скилл дальнобойщика должен быть не менее 33%');
          return;
        }

        if (_user.user.getCashMoney() < item.price) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $' + item.price);
          return;
        }

        _user.user.removeCashMoney(item.price);

        switch (id) {
          case 1:
            _business.business.addMoney(159, item.price);

            _vehicles.vehicles.spawnJobCar(834.4056396484375, -3210.1337890625, 4.876688003540039, 39.51744079589844, item.name.toLowerCase(), 'trucker21');

            break;

          case 2:
            _business.business.addMoney(161, item.price);

            _vehicles.vehicles.spawnJobCar(120.0014877319336, -2581.646240234375, 4.986051082611084, 178.07183837890625, item.name.toLowerCase(), 'trucker22');

            break;

          case 3:
            _business.business.addMoney(160, item.price);

            _vehicles.vehicles.spawnJobCar(665.429443359375, -2672.387939453125, 5.05723237991333, 89.58071899414062, item.name.toLowerCase(), 'trucker23');

            break;
        }
      }

      if (item.doName == 'takeVehicle1') {
        if (_user.user.get('job') != 'trucker3') {
          mp.game.ui.notifications.show('~r~Вам необходимо работать в грузоперевозках на фурах');
          return;
        }

        if (_user.user.get('skill_trucker') < 1000) {
          mp.game.ui.notifications.show('~r~Навык дальнобойщика должен быть не менее 66%');
          return;
        }

        if (_user.user.getCashMoney() < item.price) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $' + item.price);
          return;
        }

        _user.user.removeCashMoney(item.price);

        switch (id) {
          case 1:
            _business.business.addMoney(159, item.price);

            _vehicles.vehicles.spawnJobCar(834.4056396484375, -3210.1337890625, 4.876688003540039, 39.51744079589844, item.name.toLowerCase(), 'trucker31');

            break;

          case 2:
            _business.business.addMoney(161, item.price);

            _vehicles.vehicles.spawnJobCar(120.0014877319336, -2581.646240234375, 4.986051082611084, 178.07183837890625, item.name.toLowerCase(), 'trucker32');

            break;

          case 3:
            _business.business.addMoney(160, item.price);

            _vehicles.vehicles.spawnJobCar(665.429443359375, -2672.387939453125, 5.05723237991333, 89.58071899414062, item.name.toLowerCase(), 'trucker33');

            break;
        }
      }
    });
  },
  showRentVehBusMenu: function () {
    if (_user.user.get('job') != 'bus1' && _user.user.get('job') != 'bus2' && _user.user.get('job') != 'bus3') {
      mp.game.ui.notifications.show('~r~Вы не работаете в автобусной компании');
      return;
    }

    let menu = _menu.default.Menu.Create(`Автобус`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _coffer.coffer.addMoney(100);

        switch (_user.user.get('job')) {
          case 'bus1':
            _vehicles.vehicles.spawnJobCar(-733.1366, -2149.65356, 6.821907, -174.20549, -713569950, 'bus1');

            break;

          case 'bus2':
            _vehicles.vehicles.spawnJobCar(-728.104, -2154.26245, 6.82229853, -174.645248, 1283517198, 'bus2');

            break;

          case 'bus3':
            _vehicles.vehicles.spawnJobCar(-723.1534, -2158.188, 6.821994, -174.612122, -2072933068, 'bus3');

            break;
        }
      }
    });
  },
  showRentVehTaxi1Menu: function () {
    if (_user.user.get('job') != 'taxi1') {
      mp.game.ui.notifications.show('~r~Вы не работаете таксистом');
      return;
    }

    let menu = _menu.default.Menu.Create(`Такси`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    let itemPrice = 100;
    let menuItem = menu.AddMenuItem('Stanier (Эконом)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -956048545;
    menuItem.skill = 0;
    itemPrice = 250;
    menuItem = menu.AddMenuItem('Oracle2 (Комфорт)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -511601230;
    menuItem.skill = 100;
    itemPrice = 500;
    menuItem = menu.AddMenuItem('Schafter4 (Комфорт+)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1489967196;
    menuItem.skill = 200;
    itemPrice = 1000;
    menuItem = menu.AddMenuItem('Revolter (Бизнес)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -410205223;
    menuItem.skill = 300;
    itemPrice = 3000;
    menuItem = menu.AddMenuItem('SC1 (Спорт)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1352136073;
    menuItem.skill = 400;
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.price > 0) {
        if (_user.user.getCashMoney() < item.price) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $' + item.price);
          return;
        }

        if (_user.user.get('skill_taxi') < item.skill) {
          mp.game.ui.notifications.show(`~r~Необходим навык таксиста ~s~${item.skill / 4}% ~r~для аренды`);
          return;
        }

        _user.user.removeCashMoney(item.price);

        _business.business.addMoney(114, item.price);

        _vehicles.vehicles.spawnJobCar(906.6081, -186.1309, 74.62754, 63.30142, item.hash, 'taxi1');
      }
    });
  },
  showRentVehTaxi2Menu: function () {
    if (_user.user.get('job') != 'taxi2') {
      mp.game.ui.notifications.show('~r~Вы не работаете таксистом');
      return;
    }

    let menu = _menu.default.Menu.Create(`Такси`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    let itemPrice = 100;
    let menuItem = menu.AddMenuItem('Primo (Эконом)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -1150599089;
    menuItem.skill = 0;
    itemPrice = 250;
    menuItem = menu.AddMenuItem('Oracle2 (Комфорт)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -511601230;
    menuItem.skill = 100;
    itemPrice = 500;
    menuItem = menu.AddMenuItem('Schafter4 (Комфорт+)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1489967196;
    menuItem.skill = 200;
    itemPrice = 1000;
    menuItem = menu.AddMenuItem('Revolter (Бизнес)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -410205223;
    menuItem.skill = 300;
    itemPrice = 3000;
    menuItem = menu.AddMenuItem('SC1 (Спорт)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1352136073;
    menuItem.skill = 400;
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.price > 0) {
        if (_user.user.getCashMoney() < item.price) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $' + item.price);
          return;
        }

        if (_user.user.get('skill_taxi') < item.skill) {
          mp.game.ui.notifications.show(`~r~Необходим навык таксиста ~s~${item.skill / 4}% ~r~для аренды`);
          return;
        }

        _user.user.removeCashMoney(item.price);

        _business.business.addMoney(147, item.price);

        _vehicles.vehicles.spawnJobCar(891.8828, -1024.4975, 33.9666, 272.55, item.hash, 'taxi2');
      }
    });
  },
  showRentVehBugstarMenu: function () {
    if (_user.user.get('job') != 'bgstar') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании BugStars');
      return;
    }

    let menu = _menu.default.Menu.Create(`Bugstars`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _business.business.addMoney(116, 100);

        _vehicles.vehicles.spawnJobCar(151.1033, -3083.113, 5.711528, 177.4191, -907477130, 'bgstar');
      }
    });
  },
  showRentVehBshotMenu: function () {
    if (_user.user.get('job') != 'bshot') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании BugStars');
      return;
    }

    let menu = _menu.default.Menu.Create(`BurgerShot`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _business.business.addMoney(116, 100);

        _vehicles.vehicles.spawnJobCar(-1163.2613, -891.0358, 14.142, 123.2237, 1039032026, 'bshot');
      }
    });
  },
  showRentVehWaterPowerMenu: function () {
    if (_user.user.get('job') != 'water') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании Water & Power');
      return;
    }

    let menu = _menu.default.Menu.Create(`W&P`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _coffer.coffer.addMoney(100);

        _vehicles.vehicles.spawnJobCar(633.9341, 125.0401, 92.60691, 69.48256, -1346687836, 'water');
      }
    });
  },
  showRentVehSunsetBleachMenu: function () {
    if (_user.user.get('job') != 'sunb') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании Sunset Bleach');
      return;
    }

    let menu = _menu.default.Menu.Create(`Sunset`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _business.business.addMoney(117, 100);

        _vehicles.vehicles.spawnJobCar(-1194.017, -1480.142, 4.167116, 124.8127, -119658072, 'sunb');
      }
    });
  },
  showRentVehGardenerMenu: function () {
    if (_user.user.get('job') != 'three') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании OConnor');
      return;
    }

    let menu = _menu.default.Menu.Create(`Sunset`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _business.business.addMoney(118, 100);

        _vehicles.vehicles.spawnJobCar(-1146.226, -745.6683, 19, 107.6955, 2132890591, 'three');
      }
    });
  },
  showRentVehPhotoMenu: function () {
    if (_user.user.get('job') != 'photo') {
      mp.game.ui.notifications.show('~r~Вы не работаете в компании Life Invader');
      return;
    }

    let menu = _menu.default.Menu.Create(`Sunset`, `~b~Нажмите "~g~Enter~b~", чтобы арендовать`);

    menu.AddMenuItem('Арендовать транспорт', 'Цена: ~g~$100').doName = 'takeVehicle';
    menu.AddMenuItem('~r~Закрыть');
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'takeVehicle') {
        if (_user.user.getCashMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет на руках $100');
          return;
        }

        _user.user.removeCashMoney(100);

        _business.business.addMoney(92, 100);

        _vehicles.vehicles.spawnJobCar(-1051.927, -249.231, 37.56403, 205.1753, -2064372143, 'photo');
      }
    });
  },
  showInvVehBagMenu: function (veh) {
    try {
      if (veh.isDead()) {
        mp.game.ui.notifications.show('~r~Транспорт уничтожен');
      } else if (veh.getDoorLockStatus() !== 1) {
        mp.game.ui.notifications.show('~r~Транспорт закрыт');
      } else if (mp.players.local.isInAnyVehicle(false)) {
        mp.game.ui.notifications.show('~r~Вы должны находиться около багажника');
      } else if (_methods.methods.getVehicleInfo(veh.model).stock == 0) {
        mp.game.ui.notifications.show('~r~Багажник отсутсвует у этого ТС');
      } else {
        _inventory.inventory.getItemList(_inventory.inventory.types.Vehicle, veh.getNumberPlateText());
      }
    } catch (e) {
      _methods.methods.debug(e);

      mp.game.ui.notifications.show('~r~Вы должны находиться около багажника');
    }
  },
  showPlayerPhoneSmsMenu: function (data, phone) {
    let smsList = '<li class="collection-item green-text" act="newsms" tabindex="0">Написать СМС</li>';
    let id = 0;
    let phoneOwner = `${_user.user.get('phone_code')}-${_user.user.get('phone')}`;
    data.forEach(property => {
      let phoneNumber = phone != property[1][0].toString() ? `${property[1][0]}` : `${property[1][1]}`;
      let phoneInOrOut = phone != property[1][0].toString() ? 'Входящее' : 'Исходящее';
      smsList += `<li class=\"collection-item\" act=\"smsinfo\" param1=\"${property[0]}\" tabindex=\"${++id}\">${phoneNumber}<br><label>${property[1][2]} / ${phoneInOrOut}</label></li>`;
    });
    smsList += `<li class=\"collection-item green-text\" act=\"tomain\" tabindex=\"${++id}\">Назад</li>`;
    mp.events.call('client:phone:addSmsList', smsList);
  },
  showPlayerPhoneSmsInfoMenu: function (id, numberFrom, numberTo, text, dateTime) {
    let isNumberFromOwner = numberFrom == _user.user.get('phone_code') + '-' + _user.user.get('phone');

    let smsItem = `<div class=\"hide\" id=\"data-sms-text\">Номер: ${numberFrom}\n${text}</div>`;
    smsItem += `<li class=\"collection-item\" tabindex=\"0\">Отправитель: <label>${numberFrom}</label></li>`;
    smsItem += `<li class=\"collection-item\" tabindex=\"1\">Получатель: <label>${numberTo}</label></li>`;
    smsItem += `<li class=\"collection-item\" tabindex=\"2\">Время: <label>${dateTime}</label></li>`;
    smsItem += `<li class=\"collection-item\" act=\"sms-read\" tabindex=\"3\">Прочитать</li>`;
    if (isNumberFromOwner) smsItem += `<li class=\"collection-item\" act=\"newsmswithnum\" param1=\"${numberTo}\" tabindex=\"4\">Написать ещё одно</li>`;else smsItem += `<li class=\"collection-item\" act=\"newsmswithnum\" param1=\"${numberFrom}\" tabindex=\"4\">Ответить</li>`;
    smsItem += `<li class=\"collection-item\" act=\"callwithnum\" param1=\"${numberFrom}\" tabindex=\"4\">Позвонить</li>`;
    smsItem += `<li class=\"collection-item red-text\" act=\"sms-del\" param1=\"${id}\" tabindex=\"5\">Удалить</li>`;
    smsItem += `<li class=\"collection-item green-text\" act=\"tomain\" tabindex=\"6\">Назад</li>`;
    mp.events.call('client:phone:showSmsItem', smsItem);
  },
  showPlayerPhoneContInfoMenu: function (id, title, number) {
    let smsItem = `<li class=\"collection-item\" tabindex=\"0\">${title}</li>`;
    smsItem += `<li class=\"collection-item\" tabindex=\"1\"><label>${number}</label></li>`;
    smsItem += `<li class=\"collection-item\" act=\"newsmswithnum\" param1=\"${number}\" tabindex=\"4\">Написать</li>`;
    smsItem += `<li class=\"collection-item\" act=\"callwithnum\" param1=\"${number}\" tabindex=\"4\">Позвонить</li>`;
    smsItem += `<li class=\"collection-item\" act=\"cont-ren\" param1=\"${id}\" tabindex=\"4\">Переименовать</li>`;
    smsItem += `<li class=\"collection-item red-text\" act=\"cont-del\" param1=\"${id}\" tabindex=\"5\">Удалить</li>`;
    smsItem += '<li class="collection-item green-text" act="tomain" tabindex="6">Назад</li>';
    mp.events.call('client:phone:showContItem', smsItem);
  },
  showPlayerPhoneBookMenu: function (data) {
    let smsList = '<li class="collection-item green-text" act="newcont" tabindex="0">Новый контакт</li>';
    smsList += '<li class="collection-item" act="911-1" tabindex="1">Полиция<br><label>911-1</label></li>';
    smsList += '<li class="collection-item" act="911-2" tabindex="2">Скорая<br><label>911-2</label></li>';
    let id = 0;
    data.forEach(property => {
      smsList = smsList + `<li class=\"collection-item\" act=\"continfo\" param1=\"${property[0]}\" tabindex=\"${++id}\">${property[1][0]}<br><label>${property[1][1]}</label></li>`;
    });
    smsList += `<li class=\"collection-item green-text\" act=\"tomain\" tabindex=\"${++id}\">Назад</li>`;
    mp.events.call('client:phone:addContList', smsList);
    return;
  },
  showPlayerPhoneMenu: function () {
    if (_gui.gui.isActionGui()) return;

    if (_user.user.get('jail_time') > 0) {
      mp.game.ui.notifications.show('~r~Вы в тюрьме');
      return;
    }

    _menu.default.Menu.HideMenu();

    _user.user.playPhoneAnimation();

    mp.events.call('client:phone:show');
  },
  showInvMenu: function () {
    if (_gui.gui.currentGui != null && _gui.gui.currentGui != "inventory") return;

    _menu.default.Menu.HideMenu();

    if (_user.user.get('jail_time') > 0) {
      mp.game.ui.notifications.show('~r~В тюрьме нельзя этим пользоваться');
      return;
    }

    mp.events.callRemote("inventory:open");
  },
  showShopMaskMenu: function (shopId) {
    try {
      _methods.methods.debug('Execute: menuList.showShopMaskMenu');

      let menu = _menu.default.Menu.Create('', '~b~Магазин масок', false, false, false, 'shopui_title_movie_masks', 'shopui_title_movie_masks');

      let maskIdx = 1;

      for (let i = 1; i < 160; i++) {
        let id = i;
        if (id == 32 || id == 35 || id == 37 || id == 47 || id == 48 || id == 52 || id == 53) continue;
        if (id == 141 || id == 138 || id == 135 || id == 134 || id == 133 || id == 132 || id == 131) continue;
        if (id == 130 || id == 129 || id == 128 || id == 127 || id == 125 || id == 124 || id == 123 || id == 122 || id == 119 || id == 118 || id == 116 || id == 115 || id == 114 || id == 113 || id == 66 || id == 95 || id == 96 || id == 97 || id == 102 || id == 103 || id == 105 || id == 106 || id == 107 || id == 108 || id == 110 || id == 111 || id == 112) continue;
        let list = [];

        for (let j = 0; j <= 20; j++) {
          if (mp.players.local.isComponentVariationValid(1, id, j)) list.push(j + '');
        }

        menu.AddMenuItemList('Маска #' + maskIdx, list, `Цена: ~g~$500`).maskId = id;
        maskIdx++;
      }

      menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
      menu.MenuClose.on(() => {
        try {
          _user.user.updateCharacterCloth();
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showShopClothMenu menu.MenuClose');

          _methods.methods.debug(e);
        }
      });
      let currentListChangeItem = null;
      let currentListChangeItemIndex = 0;
      menu.ListChange.on((item, index) => {
        currentListChangeItem = item;
        currentListChangeItemIndex = index;

        _cloth.cloth.changeMask(item.maskId, index);
      });
      menu.ItemSelect.on(async (item, index) => {
        try {
          if (currentListChangeItem == item) {
            _cloth.cloth.buyMask(500, item.maskId, currentListChangeItemIndex, shopId);
          }

          if (item.doName == 'closeButton') {
            _menu.default.Menu.HideMenu();

            _user.user.updateCharacterCloth();
          }
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showShopClothMenu menu.ItemSelect');

          _methods.methods.debug(e);
        }
      });
    } catch (e) {
      _methods.methods.debug('Exception: menuList.showShopMaskMenu');

      _methods.methods.debug(e);
    }
  },
  showShopClothMenu: function (shopId, type, menuType) {
    try {
      _methods.methods.debug('Execute: menuList.showShopClothMenu');

      if (menuType == 11) _inventory.inventory.unEquipItem(265, 0, 1, 0, false);
      let title1 = 'commonmenu';
      let title2 = 'interaction_bgd';

      switch (type) {
        case 0:
          title1 = 'shopui_title_lowendfashion';
          title2 = 'shopui_title_lowendfashion';
          break;

        case 1:
          title1 = 'shopui_title_midfashion';
          title2 = 'shopui_title_midfashion';
          break;

        case 2:
          title1 = 'shopui_title_highendfashion';
          title2 = 'shopui_title_highendfashion';
          break;

        case 3:
          title1 = 'shopui_title_gunclub';
          title2 = 'shopui_title_gunclub';
          break;

        case 5:
          title1 = 'shopui_title_lowendfashion2';
          title2 = 'shopui_title_lowendfashion2';
          break;
      }

      let menu = _menu.default.Menu.Create(title1 != 'commonmenu' ? ' ' : 'Vangelico', '~b~Магазин', true, false, false, title1, title2);

      if (menuType == 0) {
        menu.AddMenuItem('Головные уборы').doName = 'head';
        menu.AddMenuItem('Очки').doName = 'glasses';
        menu.AddMenuItem('Серьги').doName = 'earring';
        menu.AddMenuItem('Левая рука').doName = 'leftHand';
        menu.AddMenuItem('Правая рука').doName = 'rightHand';
        menu.AddMenuItem('~y~Ограбить').doName = 'grab';
      } else if (menuType == 1) {
        menu.AddMenuItem('Головные уборы').doName = 'head';
        menu.AddMenuItem('Очки').doName = 'glasses';
        menu.AddMenuItem('Торс').doName = 'body';
        menu.AddMenuItem('Ноги').doName = 'legs';
        menu.AddMenuItem('Обувь').doName = 'shoes';
      } else {
        if (menuType == 7) {
          menu.AddMenuItem('~y~Снять').doName = 'takeOff';
        }

        let skin = JSON.parse(_user.user.get('skin'));
        let cloth = skin.SEX == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

        for (let i = 0; i < cloth.length; i++) {
          let id = i;
          if (cloth[id][1] != menuType) continue;
          if (cloth[id][0] != type) continue;
          let list = [];

          for (let j = 0; j <= cloth[i][3] + 1; j++) {
            list.push(j + '');
          }

          let menuListItem = menu.AddMenuItemList(cloth[i][9].toString(), list, `Цена: ~g~$${_methods.methods.numberFormat(cloth[i][8])} ${cloth[i][10] > -99 ? `\n~s~Термостойкость до ~g~${cloth[i][10]}°` : ''}`);
          menuListItem.id1 = cloth[id][1];
          menuListItem.id2 = cloth[id][2];
          menuListItem.id4 = cloth[id][4];
          menuListItem.id5 = cloth[id][5];
          menuListItem.id6 = cloth[id][6];
          menuListItem.id7 = cloth[id][7];
          menuListItem.id8 = cloth[id][8];
        }
      }

      if (type == 5 && _weapons.WEAPON_LEVEL_MIN <= _user.user.getLevel()) {
        let menuItem = menu.AddMenuItem('Бита', `Цена: ~g~$350`);
        menuItem.price = 350;
        menuItem.itemId = 55;
      }

      menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
      menu.MenuClose.on(() => {
        try {
          _user.user.updateCharacterCloth();
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showShopClothMenu menu.MenuClose');

          _methods.methods.debug(e);
        }
      });
      let currentListChangeItem = null;
      let currentListChangeItemIndex = 0;
      menu.ListChange.on((item, index) => {
        currentListChangeItem = item;
        currentListChangeItemIndex = index;

        _cloth.cloth.change(item.id1, item.id2, index, item.id4, item.id5, item.id6, item.id7);
      });
      menu.ItemSelect.on((item, index) => {
        try {
          if (item == currentListChangeItem) {
            _cloth.cloth.buy(item.id8, item.id1, item.id2, currentListChangeItemIndex, item.id4, item.id5, item.id6, item.id7, shopId);
          } else if (item.doName == 'grab') {
            _menu.default.Menu.HideMenu();

            _user.user.grab(shopId);
          } else if (item.doName == 'takeOff') {
            _menu.default.Menu.HideMenu();

            _cloth.cloth.buy(10, menuType, 0, 0, -1, -1, -1, -1, shopId, true);
          } else if (item.doName == 'closeButton') {
            _menu.default.Menu.HideMenu();

            _user.user.updateCharacterCloth();
          } else if (item.price > 0) mp.events.callRemote('server:shop:buy', item.itemId, item.price, shopId);else if (item.doName == 'head') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 0);
          } else if (item.doName == 'glasses') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 1);
          } else if (item.doName == 'earring') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 2);
          } else if (item.doName == 'leftHand') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 6);
          } else if (item.doName == 'rightHand') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 7);
          } else if (item.doName == 'head') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 0);
          } else if (item.doName == 'glasses') {
            _menu.default.Menu.HideMenu();

            menuList.showShopPropMenu(shopId, type, 1);
          } else if (item.doName == 'body') {
            _menu.default.Menu.HideMenu();

            menuList.showShopClothMenu(shopId, 3, 11);
          } else if (item.doName == 'legs') {
            _menu.default.Menu.HideMenu();

            menuList.showShopClothMenu(shopId, 3, 4);
          } else if (item.doName == 'shoes') {
            _menu.default.Menu.HideMenu();

            menuList.showShopClothMenu(shopId, 3, 6);
          }
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showShopClothMenu menu.ItemSelect');

          _methods.methods.debug(e);
        }
      });
    } catch (e) {
      _methods.methods.debug('Exception: menuList.showShopClothMenu');

      _methods.methods.debug(e);
    }
  },
  showShopPropMenu: function (shopId, type, menuType) {
    let title1 = 'commonmenu';
    let title2 = 'interaction_bgd';

    switch (type) {
      case 0:
        title1 = 'shopui_title_lowendfashion';
        title2 = 'shopui_title_lowendfashion';
        break;

      case 1:
        title1 = 'shopui_title_midfashion';
        title2 = 'shopui_title_midfashion';
        break;

      case 2:
        title1 = 'shopui_title_highendfashion';
        title2 = 'shopui_title_highendfashion';
        break;

      case 3:
        title1 = 'shopui_title_gunclub';
        title2 = 'shopui_title_gunclub';
        break;

      case 5:
        title1 = 'shopui_title_lowendfashion2';
        title2 = 'shopui_title_lowendfashion2';
        break;
    }

    let menu = _menu.default.Menu.Create(title1 != 'commonmenu' ? ' ' : 'Vangelico', '~b~Магазин', true, false, false, title1, title2);

    menu.AddMenuItem('~y~Снять').doName = 'takeOff';

    let q = _user.user.get('skin');

    let skin = JSON.parse(_user.user.get('skin'));
    let clothList = skin.SEX == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

    for (let i = 0; i < clothList.length; i++) {
      let id = i;
      if (clothList[id][1] != menuType) continue;
      if (clothList[id][0] != type) continue;
      let list = [];

      for (let j = 0; j <= clothList[i][3] + 1; j++) {
        list.push(j + '');
      }

      let menuListItem = menu.AddMenuItemList(clothList[i][5].toString(), list, `Цена: ~g~$${_methods.methods.numberFormat(clothList[i][4])}`);
      menuListItem.id1 = clothList[id][1];
      menuListItem.id2 = clothList[id][2];
      menuListItem.id4 = clothList[id][4];
    }

    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.MenuClose.on(() => {
      _user.user.updateCharacterCloth();
    });
    let currentListChangeItem = null;
    let currentListChangeItemIndex = 0;
    menu.ListChange.on((item, index) => {
      currentListChangeItem = item;
      currentListChangeItemIndex = index;

      _cloth.cloth.changeProp(item.id1, item.id2, index);
    });
    menu.ItemSelect.on((item, index) => {
      try {
        if (item == currentListChangeItem) {
          _cloth.cloth.buyProp(item.id4, item.id1, item.id2, currentListChangeItemIndex, shopId);
        }

        if (item.doName == 'closeButton') {
          _menu.default.Menu.HideMenu();

          _user.user.updateCharacterCloth();
        }

        if (item.doName == 'takeOff') {
          _menu.default.Menu.HideMenu();

          _cloth.cloth.buyProp(0, menuType, -1, -1, shopId, true);
        }
      } catch (e) {
        _methods.methods.debug('Exception: menuList.showShopPropMenu menu.ItemSelect');

        _methods.methods.debug(e);
      }
    });
  },
  showBarberShopMenu: function (shopId) {
    let title1 = 'commonmenu';
    let title2 = 'interaction_bgd';

    switch (shopId) {
      case 109:
        title1 = 'shopui_title_barber';
        title2 = 'shopui_title_barber';
        break;

      case 110:
        title1 = 'shopui_title_barber2';
        title2 = 'shopui_title_barber2';
        break;

      case 111:
        title1 = 'shopui_title_barber3';
        title2 = 'shopui_title_barber3';
        break;

      case 48:
        title1 = 'shopui_title_barber4';
        title2 = 'shopui_title_barber4';
        break;

      case 112:
        title1 = 'shopui_title_highendsalon';
        title2 = 'shopui_title_highendsalon';
        break;
    }

    let menu = _menu.default.Menu.Create(' ', '~b~Влево/вправо менять внешность', false, false, false, title1, title2);

    let list = [];

    if (_user.user.getSex() == 1) {
      for (let j = 0; j < 77; j++) {
        list.push(j + '');
      }
    } else {
      for (let j = 0; j < 72; j++) {
        list.push(j + '');
      }
    }

    let menuListItem = menu.AddMenuItemList('Причёска', list, `Цена: ~g~$400`);
    menuListItem.doName = 'GTAO_HAIR';
    menuListItem.price = 400;
    list = [];

    for (let j = 0; j < 64; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Цвет волос', list, `Цена: ~g~$160`);
    menuListItem.doName = 'GTAO_HAIR_COLOR';
    menuListItem.price = 160;
    list = [];

    for (let j = 0; j < 64; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Мелирование волос', list, `Цена: ~g~$160`);
    menuListItem.doName = 'GTAO_HAIR_COLOR2';
    menuListItem.price = 160;
    list = [];

    for (let j = 0; j < 32; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Цвет глаз', list, `Цена: ~g~$120`);
    menuListItem.doName = 'GTAO_EYE_COLOR';
    menuListItem.price = 120;
    list = [];

    for (let j = 0; j < 30; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Брови', list, `Цена: ~g~$70`);
    menuListItem.doName = 'GTAO_EYEBROWS';
    menuListItem.price = 70;
    list = [];

    for (let j = 0; j < 64; j++) {
      list.push(j + '');
    }

    list = ['~r~Нет'];

    for (let j = 0; j < 10; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Веснушки', list, `Цена: ~g~$250`);
    menuListItem.doName = 'GTAO_OVERLAY9';
    menuListItem.price = 250;
    list = [];

    for (let j = 0; j < 5; j++) {
      list.push(j + '');
    }

    menuListItem = menu.AddMenuItemList('Цвет веснушек', list, `Цена: ~g~$50`);
    menuListItem.doName = 'GTAO_OVERLAY9_COLOR';
    menuListItem.price = 50;

    if (_user.user.getSex() == 0) {
      list = ['~r~Нет'];

      for (let j = 0; j < 30; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Борода', list, `Цена: ~g~$250`);
      menuListItem.doName = 'GTAO_OVERLAY';
      menuListItem.price = 250;
      list = [];

      for (let j = 0; j < 64; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Цвет бороды', list, `Цена: ~g~$120`);
      menuListItem.doName = 'GTAO_OVERLAY_COLOR';
      menuListItem.price = 120;
      list = ['~r~Нет'];

      for (let j = 0; j < mp.game.ped.getNumHeadOverlayValues(10) + 1; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Волосы на груди', list, `Цена: ~g~$250`);
      menuListItem.doName = 'GTAO_OVERLAY10';
      menuListItem.price = 250;
      list = [];

      for (let j = 0; j < 64; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Волосы на груди', list, `Цена: ~g~$120`);
      menuListItem.doName = 'GTAO_OVERLAY10_COLOR';
      menuListItem.price = 120;
    } else {
      list = ['~r~Нет'];

      for (let j = 0; j < mp.game.ped.getNumHeadOverlayValues(8) + 1; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Помада', list, `Цена: ~g~$250`);
      menuListItem.doName = 'GTAO_OVERLAY8';
      menuListItem.price = 250;
      list = [];

      for (let j = 0; j < 60; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Цвет помады', list, `Цена: ~g~$110`);
      menuListItem.doName = 'GTAO_OVERLAY8_COLOR';
      menuListItem.price = 110;
      list = ['~r~Нет'];

      for (let j = 0; j < 7; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Румянец', list, `Цена: ~g~$250`);
      menuListItem.doName = 'GTAO_OVERLAY5';
      menuListItem.price = 250;
      list = [];

      for (let j = 0; j < 60; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Цвет румянца', list, `Цена: ~g~$110`);
      menuListItem.doName = 'GTAO_OVERLAY5_COLOR';
      menuListItem.price = 110;
      list = ['~r~Нет'];

      for (let j = 0; j < mp.game.ped.getNumHeadOverlayValues(8) + 1; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Макияж', list, `Цена: ~g~$300`);
      menuListItem.doName = 'GTAO_OVERLAY4';
      menuListItem.price = 300;
      list = [];

      for (let j = 0; j < 10; j++) {
        list.push(j + '');
      }

      menuListItem = menu.AddMenuItemList('Цвет макияжа', list, `Цена: ~g~$150`);
      menuListItem.doName = 'GTAO_OVERLAY4_COLOR';
      menuListItem.price = 150;
    }

    menu.AddMenuItem('~y~Ограбить').doName = 'grab';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.MenuClose.on(() => {
      _user.user.updateCharacterFace();

      _user.user.updateCharacterCloth();
    });
    let currentListChangeItem = null;
    let currentListChangeItemIndex = 0;
    let skin = {
      GTAO_HAIR: _methods.methods.parseInt(_user.user.get('GTAO_HAIR')),
      GTAO_HAIR_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_HAIR_COLOR')),
      GTAO_HAIR_COLOR2: _methods.methods.parseInt(_user.user.get('GTAO_HAIR_COLOR2')),
      GTAO_EYE_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_EYE_COLOR')),
      GTAO_EYEBROWS_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_EYEBROWS_COLOR')),
      GTAO_OVERLAY9: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY9')),
      GTAO_OVERLAY9_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY9_COLOR')),
      GTAO_OVERLAY: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY')),
      GTAO_OVERLAY_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY_COLOR')),
      GTAO_OVERLAY4: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY4')),
      GTAO_OVERLAY4_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY4_COLOR')),
      GTAO_OVERLAY5: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY5')),
      GTAO_OVERLAY5_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY5_COLOR')),
      GTAO_OVERLAY8: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY8')),
      GTAO_OVERLAY8_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY8_COLOR')),
      GTAO_OVERLAY10: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY10')),
      GTAO_OVERLAY10_COLOR: _methods.methods.parseInt(_user.user.get('GTAO_OVERLAY10_COLOR')),
      GTAO_EYEBROWS: _methods.methods.parseInt(_user.user.get('GTAO_EYEBROWS'))
    };
    setTimeout(function () {
      _user.user.updateCharacterFace();

      _user.user.updateCharacterCloth();
    }, 500);
    menu.ListChange.on((item, index) => {
      currentListChangeItem = item;
      currentListChangeItemIndex = index;

      switch (item.doName) {
        case 'GTAO_HAIR':
          if (index == 23 || index == 24) skin.GTAO_HAIR = 1;else skin.GTAO_HAIR = index;
          mp.players.local.setComponentVariation(2, skin.GTAO_HAIR, 0, 2);
          mp.players.local.setHairColor(skin.GTAO_HAIR_COLOR, skin.GTAO_HAIR_COLOR2);
          break;

        case 'GTAO_HAIR_COLOR':
          skin.GTAO_HAIR_COLOR = index;
          mp.players.local.setHairColor(skin.GTAO_HAIR_COLOR, skin.GTAO_HAIR_COLOR2);
          break;

        case 'GTAO_HAIR_COLOR2':
          skin.GTAO_HAIR_COLOR2 = index;
          mp.players.local.setHairColor(skin.GTAO_HAIR_COLOR, skin.GTAO_HAIR_COLOR2);
          break;

        case 'GTAO_EYE_COLOR':
          skin.GTAO_EYE_COLOR = index;
          mp.players.local.setEyeColor(skin.GTAO_EYE_COLOR);
          break;

        case 'GTAO_EYEBROWS':
          skin.GTAO_EYEBROWS = index;
          mp.players.local.setHeadOverlay(2, skin.GTAO_EYEBROWS, 1.0, skin.GTAO_EYEBROWS_COLOR, 0);
          break;

        case 'GTAO_EYEBROWS_COLOR':
          skin.GTAO_EYEBROWS_COLOR = index;
          mp.players.local.setHeadOverlay(2, skin.GTAO_EYEBROWS, 1.0, skin.GTAO_EYEBROWS_COLOR, 0);
          break;

        case 'GTAO_OVERLAY9':
          skin.GTAO_OVERLAY9 = index - 1;
          mp.players.local.setHeadOverlay(9, skin.GTAO_OVERLAY9, 1.0, skin.GTAO_OVERLAY9_COLOR, 0);
          break;

        case 'GTAO_OVERLAY9_COLOR':
          skin.GTAO_OVERLAY9_COLOR = index;
          mp.players.local.setHeadOverlay(9, skin.GTAO_OVERLAY9, 1.0, skin.GTAO_OVERLAY9_COLOR, 0);
          break;

        case 'GTAO_OVERLAY':
          skin.GTAO_OVERLAY = index - 1;
          mp.players.local.setHeadOverlay(1, skin.GTAO_OVERLAY, 1.0, skin.GTAO_OVERLAY_COLOR, 0);
          break;

        case 'GTAO_OVERLAY_COLOR':
          skin.GTAO_OVERLAY_COLOR = index;
          mp.players.local.setHeadOverlay(1, skin.GTAO_OVERLAY, 1.0, skin.GTAO_OVERLAY_COLOR, 0);
          break;

        case 'GTAO_OVERLAY4':
          skin.GTAO_OVERLAY4 = index - 1;
          mp.players.local.setHeadOverlay(4, skin.GTAO_OVERLAY4, 1.0, skin.GTAO_OVERLAY4_COLOR, 0);
          break;

        case 'GTAO_OVERLAY4_COLOR':
          skin.GTAO_OVERLAY4_COLOR = index;
          mp.players.local.setHeadOverlay(4, skin.GTAO_OVERLAY4, 1.0, skin.GTAO_OVERLAY4_COLOR, 0);
          break;

        case 'GTAO_OVERLAY5':
          skin.GTAO_OVERLAY5 = index - 1;
          mp.players.local.setHeadOverlay(5, skin.GTAO_OVERLAY5, 1.0, skin.GTAO_OVERLAY5_COLOR, 0);
          break;

        case 'GTAO_OVERLAY5_COLOR':
          skin.GTAO_OVERLAY5_COLOR = index;
          mp.players.local.setHeadOverlay(5, skin.GTAO_OVERLAY5, 1.0, skin.GTAO_OVERLAY5_COLOR, 0);
          break;

        case 'GTAO_OVERLAY8':
          skin.GTAO_OVERLAY8 = index - 1;
          mp.players.local.setHeadOverlay(8, skin.GTAO_OVERLAY8, 1.0, skin.GTAO_OVERLAY8_COLOR, 0);
          break;

        case 'GTAO_OVERLAY8_COLOR':
          skin.GTAO_OVERLAY8_COLOR = index;
          mp.players.local.setHeadOverlay(8, skin.GTAO_OVERLAY8, 1.0, skin.GTAO_OVERLAY8_COLOR, 0);
          break;

        case 'GTAO_OVERLAY10':
          skin.GTAO_OVERLAY10 = index - 1;
          mp.players.local.setHeadOverlay(10, skin.GTAO_OVERLAY10, 1.0, skin.GTAO_OVERLAY10_COLOR, 0);
          break;

        case 'GTAO_OVERLAY10_COLOR':
          skin.GTAO_OVERLAY10_COLOR = index;
          mp.players.local.setHeadOverlay(10, skin.GTAO_OVERLAY10, 1.0, skin.GTAO_OVERLAY10_COLOR, 0);
          break;
      }
    });
    menu.ItemSelect.on(async (item, index) => {
      if (!_menu.default.Menu.getMenuDistance(5)) return;

      try {
        _menu.default.Menu.HideMenu();

        if (item == currentListChangeItem) {
          switch (item.doName) {
            case 'GTAO_OVERLAY':
            case 'GTAO_OVERLAY4':
            case 'GTAO_OVERLAY5':
            case 'GTAO_OVERLAY8':
            case 'GTAO_OVERLAY9':
            case 'GTAO_OVERLAY10':
              currentListChangeItemIndex = currentListChangeItemIndex - 1;
              break;
          }

          if (_user.user.getMoney() < item.price) {
            mp.game.ui.notifications.show('~r~У Вас недостаточно денег');
            return;
          }

          if (item.price < 1) return;

          _user.user.removeMoney(item.price);

          _business.business.addMoney(shopId, item.price);

          _user.user.setData(item.doName, currentListChangeItemIndex);

          mp.game.ui.notifications.show('~g~Вы изменили внешность по цене: ~s~$' + item.price);

          _user.user.saveAccount();

          _user.user.updateCharacterFace();

          _user.user.updateCharacterCloth();
        }

        if (item.doName == 'grab') {
          _user.user.grab(shopId);
        }

        if (item.doName == 'closeButton') {
          _user.user.updateCharacterFace();

          _user.user.updateCharacterCloth();
        }
      } catch (e) {
        _methods.methods.debug('Exception: menuList.showBarberShopMenu menu.ItemSelect');

        _methods.methods.debug(e);
      }
    });
  },
  showPrintShopMenu: function () {
    _menu.default.Menu.HideMenu();

    if (_user.user.get('torso') == 15) {
      mp.game.ui.notifications.show('~r~Вам необходимо купить футболку в магазине одежды');
      mp.game.ui.notifications.show('~r~Прежде чем пользоваться услугой наклейки принта');
      return;
    }

    let menu = _menu.default.Menu.Create('Магазин', '~b~Магазин принтов');

    let list = [];

    let printList = _enums.enums.get('printList');

    for (let i = 0; i < printList.length; i++) {
      let price = 1000;

      if (_user.user.getSex() == 1 && printList[i][2] != '') {
        let menuListItem = menu.AddMenuItem('Принт #' + i, `Цена: ~g~$${_methods.methods.numberFormat(price)}`);
        menuListItem.doName = 'show';
        menuListItem.price = price;
        menuListItem.tatto1 = printList[i][0];
        menuListItem.tatto2 = printList[i][2];
        list.push(menuListItem);
      } else if (_user.user.getSex() == 0 && printList[i][1] != '') {
        let menuListItem = menu.AddMenuItem('Принт #' + i, `Цена: ~g~$${_methods.methods.numberFormat(price)}`);
        menuListItem.doName = 'show';
        menuListItem.price = price;
        menuListItem.tatto1 = printList[i][0];
        menuListItem.tatto2 = printList[i][1];
        list.push(menuListItem);
      }
    }

    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.IndexChange.on(index => {
      if (index >= list.length) return;

      _user.user.clearDecorations();

      _user.user.setDecoration(list[index].tatto1, list[index].tatto2);
    });
    menu.MenuClose.on(() => {
      _user.user.updateTattoo();
    });
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.doName == 'show') mp.events.callRemote('server:print:buy', item.tatto1, item.tatto2, item.price);
    });
  },
  showTattooShopApplyMenu: function (title1, title2, shopId) {
    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create(' ', '~b~Тату салон', false, false, false, title1, title2);

    menu.AddMenuItem('~g~Купить').zone = 'ZONE_HEAD';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();
    });
  },
  showRentBikeMenu: function (shopId, price = 1) {
    if (typeof price !== "number" || price == 0) price = 1;

    _menu.default.Menu.HideMenu();

    let menu = _menu.default.Menu.Create('', '~b~Аренда', false, false, false, 'rent', 'rent');

    let itemPrice = 3 * price;
    let menuItem = menu.AddMenuItem('Cruiser').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 448402357;
    itemPrice = 5 * price;
    menuItem = menu.AddMenuItem('Bmx').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1131912276;
    itemPrice = 10 * price;
    menuItem = menu.AddMenuItem('Fixter').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -836512833;
    itemPrice = 10 * price;
    menuItem = menu.AddMenuItem('Scorcher').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -186537451;
    itemPrice = 30 * price;
    menuItem = menu.AddMenuItem('TriBike').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 1127861609;
    itemPrice = 30 * price;
    menuItem = menu.AddMenuItem('TriBike2').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -1233807380;
    itemPrice = 30 * price;
    menuItem = menu.AddMenuItem('TriBike3').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -400295096;
    itemPrice = 60 * price;
    menuItem = menu.AddMenuItem('Faggio').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -1842748181;
    itemPrice = 55 * price;
    menuItem = menu.AddMenuItem('Faggio2').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = 55628203;
    itemPrice = 50 * price;
    menuItem = menu.AddMenuItem('Faggio3').SetRightLabel(`Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.hash = -1289178744;
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on((item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) mp.events.callRemote('server:rent:buy', item.hash, item.price, shopId);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showAptekaShopMenu: function (shopId) {
    let menu = _menu.default.Menu.Create('', '~b~Магазин', false, false, false, 'm3', 'm3');

    let menuItem = menu.AddMenuItem('Медстраховка', `Цена: ~g~$20,000`);
    menuItem.doName = 'medLic';
    menuItem = menu.AddMenuItem('Аптечка', `Цена: ~g~$${_sharedData.PillBoxCost.healer2}~s~ с мед. страховкой\nЦена: ~g~$${_sharedData.PillBoxCost.healer1}`);
    menuItem.price = _sharedData.PillBoxCost.healer2;
    menuItem.itemId = 215;
    menuItem = menu.AddMenuItem('Антипохмелин (x10)', `Цена: ~g~$${_sharedData.PillBoxCost.antipohmelin2x10}~s~ с мед. страховкой\nЦена: ~g~$${_sharedData.PillBoxCost.antipohmelin1x10}`);
    menuItem.price = _sharedData.PillBoxCost.antipohmelin2x10;
    menuItem.itemId = 221;
    menuItem = menu.AddMenuItem('Лечебная марихуана (10гр)', `Цена: ~g~$${_sharedData.PillBoxCost.marih2x10}~s~ с мед. страховкой\nЦена: ~g~$${_sharedData.PillBoxCost.marih1x10}`);
    menuItem.price = _sharedData.PillBoxCost.marih2x10;
    menuItem.itemId = 155;
    menu.AddMenuItem('~y~Ограбить').doName = 'grab';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      if (!_menu.default.Menu.getMenuDistance(5)) return;

      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) {
          if (item.itemId == 31 && !_user.user.get('med_lic')) item.price = 1000;
          if (item.itemId == 215 && !_user.user.get('med_lic')) item.price = _sharedData.PillBoxCost.healer1;
          if (item.itemId == 221 && !_user.user.get('med_lic')) item.price = _sharedData.PillBoxCost.antipohmelin1x10;
          if (item.itemId == 155 && !_user.user.get('med_lic')) item.price = _sharedData.PillBoxCost.marih1x10;
          mp.events.callRemote('server:shop:buy', item.itemId, item.price, shopId, _sharedData.businessNalog.PillBox);
        }

        if (item.doName == 'medLic') {
          if (_user.user.get('med_lic')) {
            mp.game.ui.notifications.show('~r~У Вас уже есть медстраховка');
            return;
          }

          if (_user.user.getMoney() < 20000) {
            mp.game.ui.notifications.show('~r~У Вас недостаточно денег');
            return;
          }

          _user.user.setData('med_lic', true);

          _user.user.removeMoney(20000);

          _business.business.addMoney(shopId, 20000);

          mp.game.ui.notifications.show('~g~Вы купили мед. страховку');
        }

        if (item.doName == 'grab') {
          _user.user.grab(shopId);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showElectroShopMenu: function (shopId) {
    let menu = _menu.default.Menu.Create('', '~b~Магазин', false, false, false, shopId == 92 ? 'lifeinvader' : 'digital', shopId == 92 ? 'lifeinvader' : 'digital');

    _shop.shopListElectro.map(itm => {
      let itemPrice = itm[1];
      let menuItem = menu.AddMenuItem((0, _inventory2.getItemNameById)(itm[2] ? itm[2] : itm[0]) + (itm[3] ? ' ' + itm[3] : ''));
      menuItem.SetRightLabel(`$${_methods.methods.numberFormat(itemPrice)}`);
      menuItem.icon = "Item_" + (itm[2] ? itm[2] : itm[0]);
      menuItem.price = itemPrice;
      menuItem.itemId = itm[0];
    });

    let menuItem;
    menuItem = menu.AddMenuItem('Дверь с пинкодом для дома', `Цена: ~g~$20,000`);
    menuItem.doName = 'housePin';
    menuItem.icon = "Item_44";
    menuItem = menu.AddMenuItem('Дверь с пинкодом для квартиры', `Цена: ~g~$10,000`);
    menuItem.doName = 'condoPin';
    menuItem.icon = "Item_43";
    menuItem = menu.AddMenuItem('Дверь с пинкодом для апартаментов', `Цена: ~g~$20,000`);
    menuItem.doName = 'apartPin';
    menuItem.icon = "Item_42";
    menu.AddMenuItem('~y~Ограбить').doName = 'grab';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      if (!_menu.default.Menu.getMenuDistance(5)) return;

      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) mp.events.callRemote('server:shop:buy', item.itemId, item.price, shopId);

        if (item.doName == 'housePin') {
          if (_user.user.get('id_house') == 0) {
            mp.game.ui.notifications.show('~r~У Вас нет дома');
            return;
          }

          let pin = await _menu.default.Menu.GetUserInput('Пинкод', '', 5);
          if (!pin.isNumberOnly()) return mp.game.ui.notifications.show('~r~Пинкод должен содержать только цифры');
          pin = _methods.methods.parseInt(pin);

          if (pin == 0) {
            mp.game.ui.notifications.show('~r~Пинкод не должен быть равен нулю');
            return;
          }

          mp.events.callRemote('server:housePin:buy', pin, shopId);
        }

        if (item.doName == 'apartPin') {
          if (_user.user.get('apartment_id') == 0) {
            mp.game.ui.notifications.show('~r~У Вас нет апартаментов');
            return;
          }

          let pin = await _menu.default.Menu.GetUserInput('Пинкод', '', 5);
          if (!pin.isNumberOnly()) return mp.game.ui.notifications.show('~r~Пинкод должен содержать только цифры');
          pin = _methods.methods.parseInt(pin);

          if (pin == 0) {
            mp.game.ui.notifications.show('~r~Пинкод не должен быть равен нулю');
            return;
          }

          mp.events.callRemote('server:apartPin:buy', pin, shopId);
        }

        if (item.doName == 'condoPin') {
          if (_user.user.get('condo_id') == 0) {
            mp.game.ui.notifications.show('~r~У Вас нет квартиры');
            return;
          }

          let pin = await _menu.default.Menu.GetUserInput('Пинкод', '', 5);
          if (!pin.isNumberOnly()) return mp.game.ui.notifications.show('~r~Пинкод должен содержать только цифры');
          pin = _methods.methods.parseInt(pin);

          if (pin == 0) {
            mp.game.ui.notifications.show('~r~Пинкод не должен быть равен нулю');
            return;
          }

          mp.events.callRemote('server:condoPin:buy', pin, shopId);
        }

        if (item.doName == 'grab') {
          _user.user.grab(shopId);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showInvaderShopMenu: function (shopId = 92) {
    return menuList.showElectroShopMenu(shopId);
  },
  showGunShopMenu: function (shopId, price = 1) {
    if (_weapons.WEAPON_LEVEL_MIN > _user.user.getLevel()) return mp.game.ui.notifications.show('~r~Для покупки оружия необходимо требуется уровень ' + _weapons.WEAPON_LEVEL_MIN);

    let menu = _menu.default.Menu.Create(' ', '~b~Магазин оружия', false, false, false, 'shopui_title_gunclub', 'shopui_title_gunclub');

    let itemPrice = _sharedData.weaponCost.Knife * price;
    let menuItem = menu.AddMenuItem('Нож', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 63;
    itemPrice = _sharedData.weaponCost.Knife2 * price;
    menuItem = menu.AddMenuItem('Выкидной нож', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 69;
    itemPrice = _sharedData.weaponCost.Machete * price;
    menuItem = menu.AddMenuItem('Мачете', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 65;
    itemPrice = _sharedData.weaponCost.Taurus * price;
    menuItem = menu.AddMenuItem('Taurus PT92', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 77;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.P99 * price;
    menuItem = menu.AddMenuItem('P99', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 71;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.Obrez * price;
    menuItem = menu.AddMenuItem('Обрез', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 87;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.BenelliM3 * price;
    menuItem = menu.AddMenuItem('Benelli M3', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 90;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.P90 * price;
    menuItem = menu.AddMenuItem('P-90', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 94;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.MP5A3 * price;
    menuItem = menu.AddMenuItem('MP5A3', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 103;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.G36C * price;
    menuItem = menu.AddMenuItem('G36C', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 113;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.QBZ97 * price;
    menuItem = menu.AddMenuItem('QBZ-97', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 108;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box127 * price;
    menuItem = menu.AddMenuItem('Коробка патронов 12.7mm', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 146;
    menuItem.countItems = 60;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box9smg * price;
    menuItem = menu.AddMenuItem('Коробка патронов 9mm (SMG)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 153;
    menuItem.countItems = 140;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box9pistol * price;
    menuItem = menu.AddMenuItem('Коробка патронов 9mm (Пистолет)', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 27;
    menuItem.countItems = 140;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box185 * price;
    menuItem = menu.AddMenuItem('Коробка патронов 18.5mm', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 28;
    menuItem.countItems = 60;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box556 * price;
    menuItem = menu.AddMenuItem('Коробка патронов 5.56mm', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 30;
    menuItem.countItems = 260;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.box762 * price;
    menuItem = menu.AddMenuItem('Коробка патронов 7.62mm', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.itemId = 29;
    menuItem.countItems = 130;
    menuItem.checkLic = true;
    itemPrice = _sharedData.weaponCost.armour * price;
    menuItem = menu.AddMenuItem('Лёгкий бронежилет', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.armor = 20;
    itemPrice = _sharedData.weaponCost.armourMiddle * price;
    menuItem = menu.AddMenuItem('Средний бронежилет', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.armor = 50;
    menu.AddMenuItem('~y~Ограбить').doName = 'grab';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on((item, index) => {
      if (!_menu.default.Menu.getMenuDistance(5)) return;

      _menu.default.Menu.HideMenu();

      try {
        if (item.armor) {
          if (item.price > _user.user.getCashMoney()) {
            mp.game.ui.notifications.show('~r~У вас недостаточно средств');
            return;
          }

          mp.players.local.setArmour(item.armor);
          mp.game.ui.notifications.show('~b~Вы купили бронежилет');

          _user.user.removeCashMoney(item.price);

          _business.business.addMoney(shopId, item.price);
        } else if (item.price > 0) {
          if (item.checkLic && !_user.user.get('gun_lic')) {
            mp.game.ui.notifications.show('~r~У Вас нет лицензии на оружие');
            return;
          }

          mp.events.callRemote('server:gun:buy', item.itemId, item.price, item.countItems ? item.countItems : 1, shopId);
        } else if (item.doName == 'grab') {
          if (_methods.methods.getRandomInt(0, 30) == 1) _user.user.grabGun(shopId).then();else _user.user.grab(shopId);
        } else if (item.doName == 'server:shop:sellGun') {
          if (!_data.Container.HasLocally(0, 'sellFish')) {
            _data.Container.SetLocally(0, 'sellFish', true);

            mp.events.callRemote('server:shop:sellGun');
            setTimeout(function () {
              _data.Container.ResetLocally(0, 'sellFish');
            }, 20000);
          } else {
            mp.game.ui.notifications.show('~r~Нельзя так часто продавать оружие');
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showShopMenu: function (shopId, price = 1) {
    if (typeof price != "number") price = 1;

    let menu = _menu.default.Menu.Create(' ', '~b~Магазин 24/7', false, false, false, 'shopui_title_conveniencestore', 'shopui_title_conveniencestore');

    _shop.shopList.map(itm => {
      let itemPrice = itm[1] * price;
      let menuItem = menu.AddMenuItem((0, _inventory2.getItemNameById)(itm[0]));
      menuItem.SetRightLabel(`$${_methods.methods.numberFormat(itemPrice)}`);
      menuItem.icon = "Item_" + itm[0];
      menuItem.price = itemPrice;
      menuItem.itemId = itm[0];
    });

    menu.AddMenuItem('~b~Американское лото').doName = 'loto';
    menu.AddMenuItem('~y~Продать сырую рыбу', '10% с прибыли получает владелец магазина').doName = 'server:shop:sellFish';
    menu.AddMenuItem('~y~Ограбить').doName = 'grab';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      if (!_menu.default.Menu.getMenuDistance(5)) return;

      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) mp.events.callRemote('server:shop:buy', item.itemId, item.price, shopId);

        if (item.doName == 'server:shop:sellFish') {
          if (!_data.Container.HasLocally(0, 'sellFish')) {
            _data.Container.SetLocally(0, 'sellFish', true);

            mp.events.callRemote('server:shop:sellFish', shopId);
            setTimeout(function () {
              _data.Container.ResetLocally(0, 'sellFish');
            }, 20000);
          } else {
            mp.game.ui.notifications.show('~r~Нельзя так часто продавать рыбу');
          }
        }

        if (item.doName == 'grab') {
          _user.user.grab(shopId);
        }

        if (item.doName == 'loto') {
          mp.events.callRemote('openLoto', shopId);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showBarMenu: function (shopId, price = 1) {
    let menu = _menu.default.Menu.Create('Бар', '~b~Меню бара');

    let itemPrice = 1 * price;
    let menuItem = menu.AddMenuItem('Вода', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'воду';
    itemPrice = 2 * price;
    menuItem = menu.AddMenuItem('Лимонад', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'лимонад';
    itemPrice = 4 * price;
    menuItem = menu.AddMenuItem('Кола', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'колу';
    itemPrice = 5 * price;
    menuItem = menu.AddMenuItem('Пиво', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'пиво';
    menuItem.drunkLevel = 10;
    itemPrice = 10 * price;
    menuItem = menu.AddMenuItem('Водка', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'водку';
    menuItem.drunkLevel = 20;
    itemPrice = 12 * price;
    menuItem = menu.AddMenuItem('Текила', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'текилу';
    menuItem.drunkLevel = 25;
    itemPrice = 14 * price;
    menuItem = menu.AddMenuItem('Бурбон', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'бурбон';
    menuItem.drunkLevel = 30;
    itemPrice = 25 * price;
    menuItem = menu.AddMenuItem('Виски', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.label = 'виски';
    menuItem.drunkLevel = 40;
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) {
          if (_user.user.getMoney() < item.price) {
            mp.game.ui.notifications.show('~r~У Вас недостаточно средств');
            return;
          }

          _business.business.addMoney(shopId, item.price);

          _user.user.removeMoney(item.price);

          (0, _ach.healProtection)();
          if (mp.players.local.health < 90) mp.players.local.health += 10;
          if (item.drunkLevel) _user.user.addDrugLevel(99, item.drunkLevel);

          _chat.chat.sendMeCommand(`выпил ${item.label}`);

          _user.user.playAnimation('mp_player_intdrink', 'loop_bottle', 48);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showBarFreeMenu: function (price = 1, business_id = 0) {
    let menu = _menu.default.Menu.Create('Бар', '~b~Меню бара');

    let itemPrice = 1 * price;
    let menuItem = menu.AddMenuItem('Вода', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'воду';
    itemPrice = 2 * price;
    menuItem = menu.AddMenuItem('Лимонад', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'лимонад';
    itemPrice = 4 * price;
    menuItem = menu.AddMenuItem('Кола', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'колу';
    itemPrice = 5 * price;
    menuItem = menu.AddMenuItem('Пиво', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'пиво';
    menuItem.drunkLevel = 10;
    itemPrice = 10 * price;
    menuItem = menu.AddMenuItem('Водка', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'водку';
    menuItem.drunkLevel = 20;
    itemPrice = 12 * price;
    menuItem = menu.AddMenuItem('Текила', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'текилу';
    menuItem.drunkLevel = 20;
    itemPrice = 14 * price;
    menuItem = menu.AddMenuItem('Бурбон', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'бурбон';
    menuItem.drunkLevel = 20;
    itemPrice = 25 * price;
    menuItem = menu.AddMenuItem('Виски', itemPrice + "$");
    menuItem.price = itemPrice;
    menuItem.label = 'виски';
    menuItem.drunkLevel = 20;
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      try {
        if (item.price > 0) {
          (0, _ach.healProtection)();
          if (mp.players.local.health < 90) mp.players.local.health += 10;
          if (item.drunkLevel) _user.user.addDrugLevel(99, item.drunkLevel);

          _user.user.removeCashMoney(item.price);

          if (business_id != 0) {
            _business.business.addMoney(business_id, item.price);
          }

          _chat.chat.sendMeCommand(`выпил ${item.label}`);

          _user.user.playAnimation('mp_player_intdrink', 'loop_bottle', 48);
        }
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showLscMenu: function (shopId, price = 1, idx, vListTun, vListColor) {
    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    let menu = _menu.default.Menu.Create(' ', '~b~Автомастерская', false, false, false, lscBanner1, lscBanner2);

    let itemPrice = 400 * price;
    let menuItem = menu.AddMenuItem('Ремонт', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.doName = 'repair';
    menuItem = menu.AddMenuItem('Тюнинг');
    menuItem.doName = 'setTunning';
    itemPrice = 150000;
    menuItem = menu.AddMenuItem('Неон', `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
    menuItem.price = itemPrice;
    menuItem.doName = 'setNeon';
    let acceptNeon = false;
    menuItem = menu.AddMenuItem('Цвет');
    menuItem.doName = 'setColor';
    menuItem = menu.AddMenuItem('~y~Сбыт угнанного ТС');
    menuItem.doName = 'sellCar';
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on((item, index) => {
      try {
        if (item.doName == 'setNeon' && !acceptNeon) {
          acceptNeon = true;

          _user.user.notify('~g~Нажмите ещё раз для подтверждения установки');

          return;
        }

        _menu.default.Menu.HideMenu();

        if (item.doName == 'setNeon' || item.doName == 'setTunning' || item.doName == 'repair' || item.doName == 'sellCar') menuList.showLscVehicleListMenu(shopId, idx, vListTun, vListColor, item.doName, item.price);else if (item.doName == 'setColor') menuList.showLscVehicleColorListMenu(shopId, idx, vListTun, vListColor, item.doName, price);
      } catch (e) {
        _methods.methods.debug(e);
      }
    });
  },
  showLscVehicleListMenu: function (shopId, idx, vListTun, vListColor, action, price = 1) {
    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    let menu = _menu.default.Menu.Create(' ', '~b~Автомастерская', false, false, false, lscBanner1, lscBanner2);

    vListTun.forEach(function (item) {
      menu.AddMenuItem('~b~Номер авто:~s~ ' + item, 'Нажмите ~g~Enter~s~ чтобы применить').number = item.toString();
    });
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.number) {
        if (action == 'sellCar') {
          mp.events.callRemote('server:sellVeh', item.number);
        } else if (action == 'setTunning') {
          mp.events.callRemote('server:lsc:showLscVehicleTunningMenu', shopId, idx, item.number, price);
        } else {
          let number = '';
          if (action == 'setNumber') number = await _menu.default.Menu.GetUserInput('Номер', '', 8);
          mp.events.callRemote('server:lsc:buy', item.number, price, shopId, action, number.toUpperCase());
        }
      }
    });
  },
  showLscVehicleColorListMenu: function (shopId, idx, vListTun, vListColor, action, price = 1) {
    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    let menu = _menu.default.Menu.Create(' ', '~b~Перекраска', false, false, false, lscBanner1, lscBanner2);

    vListColor.forEach(function (item) {
      menu.AddMenuItem('~b~Номер авто:~s~ ' + item, 'Нажмите ~g~Enter~s~ чтобы перекрасить').number = item.toString();
    });
    menu.AddMenuItem('~r~Закрыть').doName = 'closeButton';
    menu.ItemSelect.on(async (item, index) => {
      _menu.default.Menu.HideMenu();

      if (item.number) menuList.showLscVehicleColorMenu(shopId, idx, item.number, price);
    });
  },
  showLscVehicleColorMenu: function (shopId, idx, vehNumber, price = 1) {
    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    let camPos = new mp.Vector3(_enums.enums.lscCamColorPos[idx][0], _enums.enums.lscCamColorPos[idx][1], _enums.enums.lscCamColorPos[idx][2]);
    let cam = mp.cameras.new('lscColor', camPos, new mp.Vector3(0, 0, 0), 90);
    cam.pointAtCoord(_enums.enums.lscCarColorPos[idx][0], _enums.enums.lscCarColorPos[idx][1], _enums.enums.lscCarColorPos[idx][2]);
    cam.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 500, false, false);

    let menu = _menu.default.Menu.Create(' ', '~b~Покраска', false, false, false, lscBanner1, lscBanner2);

    let list = [];

    for (let i = 0; i < 156; i++) list.push(i + '');

    let color1Item = menu.AddMenuItemList('Цвет-1', list, 'Цена: ~g~$' + 500 * price);
    list = [];

    for (let i = 0; i < 156; i++) list.push(i + '');

    let color2Item = menu.AddMenuItemList('Цвет-2', list, 'Цена: ~g~$' + 300 * price);
    let closeItem = menu.AddMenuItem('~r~Закрыть');
    menu.MenuClose.on(() => {
      try {
        cam.destroy(true);
        mp.game.cam.renderScriptCams(false, true, 500, true, true);
        mp.events.callRemote('server:lsc:resetMod', vehNumber);
      } catch (e) {
        _methods.methods.debug('Exception: menuList.showLscVehicleColorMenu menu.MenuClose');

        _methods.methods.debug(e);
      }
    });
    let currentListChangeItem = null;
    let currentListChangeItemIndex = null;
    menu.ListChange.on((item, index) => {
      currentListChangeItem = item;
      currentListChangeItemIndex = index;
      if (item == color1Item) mp.events.callRemote('server:lsc:showColor1', vehNumber, index);
      if (item == color2Item) mp.events.callRemote('server:lsc:showColor2', vehNumber, index);
    });
    menu.ItemSelect.on((item, index) => {
      if (item == closeItem) _menu.default.Menu.HideMenu();
      if (item == color1Item) mp.events.callRemote('server:lsc:buyColor1', vehNumber, currentListChangeItemIndex, 500 * price, shopId);else if (item == color2Item) mp.events.callRemote('server:lsc:buyColor2', vehNumber, currentListChangeItemIndex, 300 * price, shopId);
    });
  },
  showLscVehicleSTunningMenu: async function (shopId, idx, vehNumber, vehId, price = 1) {
    mp.game.ui.notifications.show('~b~Кнопки ~s~[ ~b~,~s~ ]~b~ для поворота камеры');
    mp.game.ui.notifications.show('~b~Кнопки ~s~+ ~b~,~s~ -~b~ для отдаления камеры');
    mp.game.ui.notifications.show('~b~Кнопка ~s~K ~b~открывает и закрывает все двери');
    _enums.enums.lscCamRot = _enums.enums.lscCamRot - 0.2;
    let pos = new mp.Vector3(_enums.enums.lscCam.getRange * Math.sin(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.x, _enums.enums.lscCam.getRange * Math.cos(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.y, _enums.enums.lscCam.getPointAtCoords.z);

    _enums.enums.lscCam.setCoord(pos.x, pos.y, pos.z + 1.7);

    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    try {
      let veh = mp.vehicles.atRemoteId(vehId);
      let car = await _vehicles.vehicles.getData(veh.getVariable('container'));
      let upgrade = null;
      if (car.has('upgrade')) upgrade = JSON.parse(car.get('upgrade'));
      if (veh.getVariable('price') >= 8000 && veh.getVariable('price') < 15000) price = 1.2;else if (veh.getVariable('price') >= 15000 && veh.getVariable('price') < 30000) price = 1.4;else if (veh.getVariable('price') >= 30000 && veh.getVariable('price') < 45000) price = 1.6;else if (veh.getVariable('price') >= 45000 && veh.getVariable('price') < 60000) price = 1.8;else if (veh.getVariable('price') >= 60000 && veh.getVariable('price') < 75000) price = 2;else if (veh.getVariable('price') >= 90000 && veh.getVariable('price') < 105000) price = 2.2;else if (veh.getVariable('price') >= 105000 && veh.getVariable('price') < 120000) price = 2.4;else if (veh.getVariable('price') >= 120000 && veh.getVariable('price') < 135000) price = 2.6;else if (veh.getVariable('price') >= 135000 && veh.getVariable('price') < 150000) price = 2.8;else if (veh.getVariable('price') >= 150000 && veh.getVariable('price') < 200000) price = 3;else if (veh.getVariable('price') >= 200000 && veh.getVariable('price') < 240000) price = 3.3;else if (veh.getVariable('price') >= 240000 && veh.getVariable('price') < 280000) price = 3.6;else if (veh.getVariable('price') >= 280000 && veh.getVariable('price') < 320000) price = 4;else if (veh.getVariable('price') >= 320000 && veh.getVariable('price') < 380000) price = 4.4;else if (veh.getVariable('price') >= 380000 && veh.getVariable('price') < 500000) price = 5;else if (veh.getVariable('price') >= 500000 && veh.getVariable('price') < 600000) price = 5.5;else if (veh.getVariable('price') >= 600000 && veh.getVariable('price') < 700000) price = 6;else if (veh.getVariable('price') >= 700000 && veh.getVariable('price') < 800000) price = 6.5;else if (veh.getVariable('price') >= 800000) price = 7;
      let camPos = new mp.Vector3(_enums.enums.lscCamPos[idx][0], _enums.enums.lscCamPos[idx][1], _enums.enums.lscCamPos[idx][2] + 0.7);
      let carPos = new mp.Vector3(_enums.enums.lscCarPos[idx][0], _enums.enums.lscCarPos[idx][1], veh.position.z);
      veh.freezePosition(true);
      _enums.enums.lscCam = mp.cameras.new('lscTun', new mp.Vector3(3.4 * Math.sin(_enums.enums.lscCamRot) + carPos.x, 3.4 * Math.cos(_enums.enums.lscCamRot) + carPos.y, carPos.z + 0.7), new mp.Vector3(0, 0, 0), 90);

      _enums.enums.lscCam.pointAtCoord(carPos.x, carPos.y, carPos.z - 1);

      _enums.enums.lscCam.setActive(true);

      _enums.enums.lscCam.getPointAtCoords = new mp.Vector3(carPos.x, carPos.y, carPos.z - 1);
      _enums.enums.lscCam.getRange = 3.4;
      _enums.enums.lscCam.vehId = vehId;
      veh.allDoorsOpen = true;

      for (let i = 0; i < 8; i++) veh.setDoorOpen(i, false, true);

      mp.game.cam.renderScriptCams(true, true, 500, false, false);

      let menu = _menu.default.Menu.Create(' ', '~b~Стандарт. настройки БЕСПЛАТНЫ', false, false, false, lscBanner1, lscBanner2);

      let globalList = [];
      let modId = 0;
      let list2 = ['Стандарт', 'Задний', 'Полный', 'Передний'];
      globalList.push(list2);
      let q = _enums.enums.lscSNames[modId][1];

      let itemPrice = _methods.methods.parseInt(q * price);

      let listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          switch (upgrade[modId + 100].toString()) {
            case '0':
              listItem.Index = 3;
              break;

            case '0.5':
              listItem.Index = 2;
              break;

            case '1':
              listItem.Index = 1;
              break;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 1;
      list2 = ['Стандарт'];

      for (let i = 1; i <= 15; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      let qw = _enums.enums.lscSNames[modId][1];
      itemPrice = _methods.methods.parseInt(qw * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            _methods.methods.debug(upgrade[modId + 100], list2[i], i);

            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 2;
      list2 = ['Стандарт'];

      for (let i = 1; i <= 11; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      let qe = _enums.enums.lscSNames[modId][1];
      itemPrice = _methods.methods.parseInt(qe * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            _methods.methods.debug(upgrade[modId + 100], list2[i], i);

            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 3;
      list2 = ['Стандарт'];

      for (let i = 1; i <= 20; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      let qa = _enums.enums.lscSNames[modId][1];
      itemPrice = _methods.methods.parseInt(qa * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 4;
      list2 = ['Стандарт'];

      for (let i = 1; i <= 10; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      itemPrice = _methods.methods.parseInt(_enums.enums.lscSNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 5;
      list2 = ['Стандарт'];

      for (let i = 1; i <= 8; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      itemPrice = _methods.methods.parseInt(_enums.enums.lscSNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 6;
      list2 = ['Стандарт'];

      for (let i = 5; i <= 16; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      itemPrice = _methods.methods.parseInt(_enums.enums.lscSNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 7;
      list2 = ['Стандарт'];

      for (let i = 10; i <= 30; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      itemPrice = _methods.methods.parseInt(_enums.enums.lscSNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      modId = 8;
      list2 = ['Стандарт'];

      for (let i = 14; i <= 30; i++) list2.push((i / 10).toString());

      globalList.push(list2);
      itemPrice = _methods.methods.parseInt(_enums.enums.lscSNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscSNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.sType = modId;
      listItem.price = itemPrice;

      try {
        if (upgrade != null && upgrade[modId + 100]) {
          for (let i = 0; i < list2.length; i++) {
            if (upgrade[modId + 100].toString() === list2[i].toString()) listItem.Index = i;
          }
        }
      } catch (e) {
        _methods.methods.debug(e);
      }

      let closeItem = menu.AddMenuItem('~r~Закрыть');
      menu.MenuClose.on(() => {
        try {
          _enums.enums.lscCam.destroy(true);

          mp.game.cam.renderScriptCams(false, true, 500, true, true);
          _enums.enums.lscCam = null;
          mp.events.callRemote('server:lsc:resetMod', vehNumber);
          veh.freezePosition(false);
          veh.allDoorsOpen = false;

          for (let i = 0; i < 8; i++) veh.setDoorShut(i, true);
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showLscVehicleTunningMenu menu.MenuClose');

          _methods.methods.debug(e);
        }
      });
      let currentListChangeItem = null;
      let currentListChangeItemIndex = null;
      menu.ListChange.on((item, index) => {
        currentListChangeItem = item;
        currentListChangeItemIndex = index;
        mp.game.ui.notifications.show('~b~Кнопки ~s~[ ~b~и~s~ ]~b~ для поворота камеры');
        mp.game.ui.notifications.show('~b~Кнопки ~s~+ ~b~и~s~ -~b~ для отдаления камеры');
        mp.game.ui.notifications.show('~b~Кнопка ~s~K ~b~открывает и закрывает все двери');
      });
      menu.ItemSelect.on((item, index) => {
        if (item == closeItem) _menu.default.Menu.HideMenu();

        if (index == currentListChangeItemIndex) {
          if (currentListChangeItemIndex == 0) {
            mp.game.ui.notifications.show('~y~Для того чтобы всё работало');
            mp.game.ui.notifications.show('~y~Необходимо перереспавнить трансопрт');
            mp.events.callRemote('server:lsc:resetSTun', vehNumber, item.sType);
          } else {
            if (item.sType == 0) mp.events.callRemote('server:lsc:buySTun', vehNumber, item.sType, currentListChangeItemIndex, item.price, shopId);else mp.events.callRemote('server:lsc:buySTun', vehNumber, item.sType, globalList[item.sType][currentListChangeItemIndex], item.price, shopId);
          }
        }
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  showLscVehicleTunningMenu: function (shopId, idx, vehNumber, vehId, price = 1) {
    mp.game.ui.notifications.show('~b~Кнопки ~s~[ ~b~и~s~ ]~b~ для поворота камеры');
    mp.game.ui.notifications.show('~b~Кнопки ~s~+ ~b~и~s~ -~b~ для отдаления камеры');
    mp.game.ui.notifications.show('~b~Кнопка ~s~K ~b~открывает и закрывает все двери');
    let lscBanner1 = 'shopui_title_ie_modgarage';
    let lscBanner2 = 'shopui_title_ie_modgarage';

    switch (shopId) {
      case 14:
      case 54:
      case 55:
      case 57:
        lscBanner1 = 'shopui_title_carmod';
        lscBanner2 = 'shopui_title_carmod';
        break;

      case 71:
        lscBanner1 = 'shopui_title_carmod2';
        lscBanner2 = 'shopui_title_carmod2';
        break;

      case 56:
        lscBanner1 = 'shopui_title_supermod';
        lscBanner2 = 'shopui_title_supermod';
        break;
    }

    try {
      let veh = mp.vehicles.atRemoteId(vehId);

      let vehInfo = _methods.methods.getVehicleInfo(veh.model);

      if (veh.getVariable('price') >= 8000 && veh.getVariable('price') < 15000) price = 1.2;else if (veh.getVariable('price') >= 15000 && veh.getVariable('price') < 30000) price = 1.4;else if (veh.getVariable('price') >= 30000 && veh.getVariable('price') < 45000) price = 1.6;else if (veh.getVariable('price') >= 45000 && veh.getVariable('price') < 60000) price = 1.8;else if (veh.getVariable('price') >= 60000 && veh.getVariable('price') < 75000) price = 2;else if (veh.getVariable('price') >= 90000 && veh.getVariable('price') < 105000) price = 2.2;else if (veh.getVariable('price') >= 105000 && veh.getVariable('price') < 120000) price = 2.4;else if (veh.getVariable('price') >= 120000 && veh.getVariable('price') < 135000) price = 2.6;else if (veh.getVariable('price') >= 135000 && veh.getVariable('price') < 150000) price = 2.8;else if (veh.getVariable('price') >= 150000 && veh.getVariable('price') < 200000) price = 3;else if (veh.getVariable('price') >= 200000 && veh.getVariable('price') < 240000) price = 3.3;else if (veh.getVariable('price') >= 240000 && veh.getVariable('price') < 280000) price = 3.6;else if (veh.getVariable('price') >= 280000 && veh.getVariable('price') < 320000) price = 4;else if (veh.getVariable('price') >= 320000 && veh.getVariable('price') < 380000) price = 4.4;else if (veh.getVariable('price') >= 380000 && veh.getVariable('price') < 500000) price = 5;else if (veh.getVariable('price') >= 500000 && veh.getVariable('price') < 600000) price = 5.5;else if (veh.getVariable('price') >= 600000 && veh.getVariable('price') < 700000) price = 6;else if (veh.getVariable('price') >= 700000 && veh.getVariable('price') < 800000) price = 6.5;else if (veh.getVariable('price') >= 800000) price = 7;
      let camPos = new mp.Vector3(_enums.enums.lscCamPos[idx][0], _enums.enums.lscCamPos[idx][1], _enums.enums.lscCamPos[idx][2] + 0.7);
      let carPos = new mp.Vector3(_enums.enums.lscCarPos[idx][0], _enums.enums.lscCarPos[idx][1], veh.position.z);
      veh.freezePosition(true);
      _enums.enums.lscCam = mp.cameras.new('lscTun', new mp.Vector3(3.4 * Math.sin(_enums.enums.lscCamRot) + carPos.x, 3.4 * Math.cos(_enums.enums.lscCamRot) + carPos.y, carPos.z + 0.7), new mp.Vector3(0, 0, 0), 90);

      _enums.enums.lscCam.pointAtCoord(carPos.x, carPos.y, carPos.z - 1);

      _enums.enums.lscCam.setActive(true);

      _enums.enums.lscCam.getPointAtCoords = new mp.Vector3(carPos.x, carPos.y, carPos.z - 1);
      _enums.enums.lscCam.getRange = 3.4;
      _enums.enums.lscCam.vehId = vehId;
      mp.game.cam.renderScriptCams(true, true, 500, false, false);

      let menu = _menu.default.Menu.Create(' ', '~b~Тюнинг', false, false, false, lscBanner1, lscBanner2);

      let itemPrice;
      let listItem;
      let list2 = [];
      let modId = 11;

      if (veh.getNumMods(modId)) {
        for (let i = 0; i < veh.getNumMods(modId); i++) list2.push('Level ' + i);

        itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
        listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена за 1 lvl: ~g~$${_methods.methods.numberFormat(itemPrice)}\n~s~Ставить по очереди не обязательно`);
        listItem.Index = veh.getMod(modId);
        listItem.modType = modId;
        listItem.price = itemPrice;
      }

      modId = 12;

      if (veh.getNumMods(modId)) {
        list2 = [];

        for (let i = 0; i < veh.getNumMods(modId); i++) list2.push('Level ' + i);

        itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
        listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена за 1 lvl: ~g~$${_methods.methods.numberFormat(itemPrice)}\n~s~Ставить по очереди не обязательно`);
        listItem.Index = veh.getMod(modId);
        listItem.modType = modId;
        listItem.price = itemPrice;
      }

      modId = 13;

      if (veh.getNumMods(modId)) {
        list2 = [];

        for (let i = 0; i < veh.getNumMods(modId); i++) list2.push('Level ' + i);

        itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
        listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена за 1 lvl: ~g~$${_methods.methods.numberFormat(itemPrice)}\n~s~Ставить по очереди не обязательно`);
        listItem.Index = veh.getMod(modId);
        listItem.modType = modId;
        listItem.price = itemPrice;
      }

      modId = 14;

      if (veh.getNumMods(modId)) {
        list2 = [];

        for (let i = 0; i < veh.getNumMods(modId); i++) list2.push('' + i);

        itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1]);
        listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
        listItem.Index = veh.getMod(modId);
        listItem.modType = modId;
        listItem.price = itemPrice;
      }

      list2 = ['Спорт', 'Массл', 'Лоурайдер', 'Кроссовер', 'Внедорожник', 'Специальные', 'Мото', 'Уникальные'];
      listItem = menu.AddMenuItemList(`Тип колёс`, list2, `Цена: ~g~Бесплатно\n~s~Нажмите ~g~Enter~s~ чтобы применить`);
      listItem.Index = veh.getWheelType();
      listItem.modType = 78;
      listItem.price = 0;

      for (let i = 0; i < 100; i++) {
        try {
          if (i == 11) continue;
          if (i == 12) continue;
          if (i == 13) continue;
          if (i == 14) continue;
          if (i == 46) continue;
          if (veh.getNumMods(i) == 0) continue;

          if (i == 1 || i == 10) {
            if (vehInfo.display_name == 'Havok' || vehInfo.display_name == 'Microlight' || vehInfo.display_name == 'Seasparrow' || vehInfo.display_name == 'Revolter' || vehInfo.display_name == 'Viseris' || vehInfo.display_name == 'Savestra' || vehInfo.display_name == 'Deluxo' || vehInfo.display_name == 'Comet4') continue;
          }

          if (veh.getNumMods(i) > 0 && _enums.enums.lscNames[i][1] > 0) {
            let list = [];

            for (let j = 0; j <= veh.getNumMods(i); j++) list.push(j + '');

            let itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[i][1] * price);

            let listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[i][0]}`, list, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
            listItem.Index = veh.getMod(i);
            listItem.modType = i;
            listItem.price = itemPrice;
          }
        } catch (e) {
          _methods.methods.debug(e);
        }
      }

      list2 = ['~b~Установить', '~r~Снять'];
      modId = 22;
      itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.Index = veh.getMod(modId);
      listItem.modType = modId;
      listItem.price = itemPrice;
      modId = 18;
      list2 = ['~b~Установить', '~r~Снять'];
      itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.Index = veh.getMod(modId);
      listItem.modType = modId;
      listItem.price = itemPrice;
      modId = 69;
      list2 = [];

      for (let i = 0; i < 6; i++) list2.push(i + '');

      itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
      listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
      listItem.Index = veh.getWindowTint();
      listItem.modType = modId;
      listItem.price = itemPrice;

      if (veh.getLiveryCount() > 0) {
        modId = 77;
        list2 = [];

        for (let i = 0; i <= veh.getLiveryCount(); i++) list2.push(i + '');

        itemPrice = _methods.methods.parseInt(_enums.enums.lscNames[modId][1] * price);
        listItem = menu.AddMenuItemList(`${_enums.enums.lscNames[modId][0]}`, list2, `Цена: ~g~$${_methods.methods.numberFormat(itemPrice)}`);
        listItem.Index = veh.getLivery();
        listItem.modType = modId;
        listItem.price = itemPrice;
      }

      let closeItem = menu.AddMenuItem('~r~Закрыть');
      menu.MenuClose.on(() => {
        try {
          _enums.enums.lscCam.destroy(true);

          mp.game.cam.renderScriptCams(false, true, 500, true, true);
          _enums.enums.lscCam = null;
          mp.events.callRemote('server:lsc:resetMod', vehNumber);
          veh.freezePosition(false);
          veh.allDoorsOpen = false;

          for (let i = 0; i < 8; i++) veh.setDoorShut(i, true);
        } catch (e) {
          _methods.methods.debug('Exception: menuList.showLscVehicleTunningMenu menu.MenuClose');

          _methods.methods.debug(e);
        }
      });
      let currentListChangeItem = null;
      let currentListChangeItemIndex = null;
      menu.ListChange.on((item, index) => {
        currentListChangeItem = item;
        currentListChangeItemIndex = index;
        mp.game.ui.notifications.show('~b~Кнопки ~s~[ ~b~и~s~ ]~b~ для поворота камеры');
        mp.game.ui.notifications.show('~b~Кнопки ~s~+ ~b~и~s~ -~b~ для отдаления камеры');
        mp.game.ui.notifications.show('~b~Кнопка ~s~K ~b~открывает и закрывает все двери');
        if (item.modType == 22) currentListChangeItemIndex = currentListChangeItemIndex - 1;
        mp.events.callRemote('server:lsc:checkTun', vehNumber, item.modType, currentListChangeItemIndex);
      });
      menu.ItemSelect.on((item, index) => {
        if (item == closeItem) _menu.default.Menu.HideMenu();

        if (item == currentListChangeItem) {
          if (item.modType == 22) currentListChangeItemIndex = currentListChangeItemIndex - 1;
          if (item.modType == 11 || item.modType == 12 || item.modType == 13) mp.events.callRemote('server:lsc:buyTun', vehNumber, item.modType, currentListChangeItemIndex, item.price * currentListChangeItemIndex, shopId);else mp.events.callRemote('server:lsc:buyTun', vehNumber, item.modType, currentListChangeItemIndex, item.price, shopId);

          if (item.modType == 78) {
            _menu.default.Menu.HideMenu();

            veh.setWheelType(currentListChangeItemIndex);
            mp.game.ui.notifications.show('~b~Тип колёс был обновлён');
            setTimeout(function () {
              menuList.showLscVehicleTunningMenu(shopId, idx, vehNumber, vehId, price);
            }, 500);
          }
        }
      });
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
};
exports.menuList = menuList;
setInterval(() => {
  if (!_user.user.get('walkietalkie_num')) return;
  if (_user.user.isGos()) return;
  if (_user.user.get('walkietalkie_num').indexOf('.') == -1) return;

  const freq = _methods.methods.parseInt(_user.user.get('walkietalkie_num').split('.')[0]);

  if (!isNaN(freq) && freq > 2000 && freq < 3000) {
    mp.game.ui.notifications.show('~r~Вы не можете пользоватся указанной частотой рации');

    _user.user.set('walkietalkie_num', "0.0");

    _user.user.setData('walkietalkie_num', "0.0");

    mp.events.callRemote('voice.server.changeRadioFrequency', "0.0");
    return;
  }
}, 10000);
},{"./modules/data":"Edcz","./modules/menu":"Aiz7","./modules/methods":"qXSp","./modules/timer":"BpKR","./managers/dispatcher":"bsac","./modules/ui":"zOnK","./user":"QE3B","./inventory":"m5ow","./enums":"ZRYf","./items_old":"A2KQ","./stock":"MdNj","./chat":"MuUD","./business":"y5vZ","./condo":"YoDO","./coffer":"sKID","./vehicles":"pYYy","./jobs/builder":"zK0g","./jobs/cleaner":"lN65","./jobs/roadWorker":"iDVm","./jobs/mainer":"BSgz","./business/licenseCenter":"uLEY","./jobs/bugstars":"SscJ","./jobs/sunBleach":"Wq1B","./jobs/waterPower":"YpKT","./jobs/gardener":"tWKG","./jobs/photo":"EjBH","./jobs/bus":"tqRS","./jobs/mail":"x8sI","./business/cloth":"Lio2","./jobs/burgetshot":"VeeO","./jobs/gr6":"O54w","./jobs/taxi":"Vike","./jobs/trucker":"kruA","./phone":"Gt5n","./fly":"p3bl","./modules/chests":"WXxh","../util/sharedData":"bNis","./modules/savezone":"ehdN","../util/level":"MpJF","./modules/gui":"bk91","./ragevoice":"VUJK","./modules/ach":"ygeq","../util/weapons":"kwVd","../util/inventory":"Jhu1","./managers/menu":"BkU5","../util/walkstyles":"sFsE","../util/shop":"Cj84"}],"d3wo":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._playerDisableAllControls = void 0;
exports.blockSpeedMax = blockSpeedMax;
exports.seatBelt = void 0;

var _data = require("./data");

var _menu = _interopRequireDefault(require("./menu"));

var _methods = require("./methods");

var _weather = require("../managers/weather");

var _checkpoint = require("../managers/checkpoint");

var _dispatcher = require("../managers/dispatcher");

var _ui = require("./ui");

var _menuList = require("../menuList");

var _user = require("../user");

var _inventory = require("../inventory");

var _enums = require("../enums");

var _items_old = require("../items_old");

var _timer = require("./timer");

var _phone = require("../phone");

var _jail = require("../managers/jail");

var _chat = require("../chat");

var _vehicles = require("../vehicles");

var _trucker = require("../jobs/trucker");

var _vSync = require("../managers/vSync");

var _gui = require("./gui");

var _methods2 = require("../../util/methods");

var _mask = require("../../util/mask");

var _ragevoice = require("../ragevoice");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let items = _items_old.items_old;
let flag1 = 8;
let flag2 = 9;
let maxSpeed = 350;
let seatBelt = false;
exports.seatBelt = seatBelt;
let _playerDisableAllControls = false;
exports._playerDisableAllControls = _playerDisableAllControls;
let _playerDisableDefaultControls = false;
let loadIndicatorDist = 30;
mp.events.add('modules:client:player:DisableAllControls', playerDisableAllControls => {
  exports._playerDisableAllControls = _playerDisableAllControls = playerDisableAllControls;
});
mp.events.add('modules:client:player:DisableDefaultControls', playerDisableDefaultControls => {
  _playerDisableDefaultControls = playerDisableDefaultControls;
  mp.players.local.setEnableHandcuffs(_playerDisableDefaultControls);
  mp.players.local.setCanSwitchWeapon(!_playerDisableDefaultControls);
});
mp.events.add('client:clearChat', () => {
  _user.user.clearChat();
});
let deadList = [];
mp.events.add('listAfterDeath', datas => {
  let data = JSON.parse(datas);
  deadList.push(...data);
});
mp.events.add('addAfterDeath', data => {
  deadList.push(data);
});
mp.events.add('removeAfterDeath', id => {
  let fnd = deadList.findIndex(value => value.ids == id);

  if (fnd > -1) {
    deadList.splice(fnd, 1);
  }
});
mp.events.add('client:teleport', (x, y, z, h) => {
  _methods.methods.debug('Event: client:teleport', x, y, z, h);

  _user.user.teleport(x, y, z, h);
});
mp.events.add('client:teleportWaypoint', () => {
  _user.user.tpToWaypoint();
});
mp.events.add('client:teleportVeh', (x, y, z) => {
  _methods.methods.debug('Event: client:teleportVeh', x, y, z);

  _user.user.teleportVeh(x, y, z);
});
mp.events.add('client:medTimerFree', (pay = true) => {
  _jail.jail.medFreePlayer(pay);
});
mp.events.add('client:dispatcher:addDispatcherList', (title, desc, time, x, y, z, withCoord) => {
  _methods.methods.debug('Event: client:dispatcher:addDispatcherList', title, desc, time, x, y, z, withCoord);

  _dispatcher.dispatcher.addDispatcherList(title, desc, time, x, y, z, withCoord);
});
mp.events.add('client:dispatcher:addDispatcherTaxiList', (count, title, desc, time, price, x, y, z, id) => {
  _methods.methods.debug('Event: client:dispatcher:addDispatcherTaxiList', count, title, desc, time, price, x, y, z);

  _dispatcher.dispatcher.addDispatcherTaxiList(count, title, desc, time, price, x, y, z, id);
});
mp.events.add('client:menuList:showMeriaMainMenu', () => {
  _methods.methods.debug('Event: client:menuList:showMeriaMainMenu');

  _menuList.menuList.showMeriaMainMenu();
});
mp.events.add('client:menuList:showMazeOfficeMenu', () => {
  _methods.methods.debug('Event: client:menuList:showMazeOfficeMenu');

  _menuList.menuList.showMazeOfficeMenu();
});
mp.events.add('client:menuList:showInvaderShopMenu', () => {
  _methods.methods.debug('Event: client:menuList:showInvaderShopMenu');

  _menuList.menuList.showInvaderShopMenu();
});
mp.events.add('client:menuList:showPrintShopMenu', () => {
  _methods.methods.debug('Event: client:menuList:showPrintShopMenu');

  _menuList.menuList.showPrintShopMenu();
});
mp.events.add('client:menuList:showRentVehBugstarMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehBugstarMenu');

  _menuList.menuList.showRentVehBugstarMenu();
});
mp.events.add('client:menuList:showRentVehBshotMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehBshotMenu');

  _menuList.menuList.showRentVehBshotMenu();
});
mp.events.add('client:menuList:showRentVehBusMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehBusMenu');

  _menuList.menuList.showRentVehBusMenu();
});
mp.events.add('client:menuList:showRentVehTaxi1Menu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehTaxi1Menu');

  _menuList.menuList.showRentVehTaxi1Menu();
});
mp.events.add('client:menuList:showRentVehTaxi2Menu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehTaxi2Menu');

  _menuList.menuList.showRentVehTaxi2Menu();
});
mp.events.add('client:menuList:showRentVehMailMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehMailMenu');

  _menuList.menuList.showRentVehMailMenu();
});
mp.events.add('client:menuList:showRentVehSunsetBleachMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehSunsetBleachMenu');

  _menuList.menuList.showRentVehSunsetBleachMenu();
});
mp.events.add('client:menuList:showRentVehGardenerMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehGardenerMenu');

  _menuList.menuList.showRentVehGardenerMenu();
});
mp.events.add('client:menuList:showRentVehPhotoMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehPhotoMenu');

  _menuList.menuList.showRentVehPhotoMenu();
});
mp.events.add('client:menuList:showRentVehTruckerMenu', id => {
  _methods.methods.debug('Event: client:menuList:showRentVehPhotoMenu');

  _menuList.menuList.showRentVehTruckerMenu(id);
});
mp.events.add('client:menuList:showRentVehWaterPowerMenu', () => {
  _methods.methods.debug('Event: client:menuList:showRentVehWaterPowerMenu');

  _menuList.menuList.showRentVehWaterPowerMenu();
});
mp.events.add('client:showApartmentListMenu', (countFloor, buildId) => {
  _methods.methods.debug('Event: client:menuList:showApartmentListMenu');

  _menuList.menuList.showApartmentListMenu(countFloor, buildId);
});
mp.events.add('client:showApartmentFloorListMenu', data => {
  _methods.methods.debug('Event: client:showApartmentFloorListMenu');

  _menuList.menuList.showApartmentFloorListMenu(data);
});
mp.events.add('client:showApartmentInfoMenu', data => {
  try {
    _methods.methods.debug('Event: client:showApartmentInfoMenu');

    _menuList.menuList.showApartmentInfoMenu(new Map(data));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showApartmentInfoMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showMember2ListMenu', data => {
  _methods.methods.debug('Event: client:showMember2ListMenu');

  _menuList.menuList.showMember2ListMenu(data);
});
mp.events.add('client:menuList:showMazeOfficeTeleportMenu', () => {
  _methods.methods.debug('Event: client:menuList:showMazeOfficeTeleportMenu');

  _menuList.menuList.showMazeOfficeTeleportMenu();
});
mp.events.add('client:menuList:showFibOfficeTeleportMenu', () => {
  _methods.methods.debug('Event: client:menuList:showFibOfficeTeleportMenu');

  _menuList.menuList.showFibOfficeTeleportMenu();
});
mp.events.add('client:menuList:showGovOfficeTeleportMenu', () => {
  _methods.methods.debug('Event: client:menuList:showGovOfficeTeleportMenu');

  _menuList.menuList.showGovOfficeTeleportMenu();
});
mp.events.add('client:menuList:showVehicleMenu', data => {
  try {
    _methods.methods.debug('Event: client:menuList:showVehicleMenu');

    _menuList.menuList.showVehicleMenu(new Map(data));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showVehicleMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:deleteObject', (x, y, z, hash, range = 1) => {
  mp.game.entity.createModelHide(x, y, z, range, hash, true);
});
mp.events.add('client:restoreObject', (x, y, z, hash) => {});
mp.events.add('client:explodeObject', (x, y, z, hash) => {
  mp.game.fire.addExplosion(x, y, z, 2, 20, false, false, 0);
  mp.game.entity.createModelHide(x, y, z, 1, hash, true);
  if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, x, y, z, true) > 150) return;
  mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", x, y, z, "exile_1", false, 0, false);
});
mp.events.add('client:showCondoOutMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showCondoOutMenu');

    _menuList.menuList.showCondoOutMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showCondoOutMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showCondoBuyMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showCondoBuyMenu');

    _menuList.menuList.showCondoBuyMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showCondoBuyMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showCondoInMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showCondoInMenu');

    _menuList.menuList.showCondoInMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showCondoInMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showStockOutMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showStockOutMenu');

    _menuList.menuList.showStockOutMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showStockOutMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showStockBuyMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showStockBuyMenu');

    _menuList.menuList.showStockBuyMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showStockBuyMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:showStockInMenu', item => {
  try {
    _methods.methods.debug('Event: client:menuList:showStockInMenu');

    _menuList.menuList.showStockInMenu(new Map(item));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:showStockInMenu');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:jail:jailPlayer', (sec, withIzol) => {
  _methods.methods.debug('Event: client:jail:jailPlayer' + sec);

  _jail.jail.jailPlayer(sec, withIzol);
});
mp.events.add('client:menuList:showSapdArrestMenu', () => {
  _methods.methods.debug('Event: client:menuList:showSapdArrestMenu');

  _menuList.menuList.showSapdArrestMenu();
});
mp.events.add('client:menuList:showSapdClearMenu', () => {
  _methods.methods.debug('Event: client:menuList:showSapdClearMenu');

  _menuList.menuList.showSapdClearMenu();
});
mp.events.add('client:menuList:showFuelMenu', (stationId, isShop, price) => {
  _methods.methods.debug('Event: client:menuList:showFuelMenu', stationId, isShop, price);

  _menuList.menuList.showFuelMenu(stationId, isShop, price);
});
mp.events.add('client:menuList:showBarberShopMenu', shopId => {
  _methods.methods.debug('Event: client:menuList:showBarberShopMenu');

  _menuList.menuList.showBarberShopMenu(shopId);
});
mp.events.add('client:menuList:showAptekaShopMenu', shopId => {
  _methods.methods.debug('Event: client:menuList:showAptekaShopMenu');

  _menuList.menuList.showAptekaShopMenu(shopId);
});
mp.events.add('client:menuList:showElectroShopMenu', shopId => {
  _methods.methods.debug('Event: client:menuList:showElectroShopMenu');

  _menuList.menuList.showElectroShopMenu(shopId);
});
mp.events.add('client:menuList:showGunShopMenu', (shopId, price) => {
  _methods.methods.debug('Event: client:menuList:showGunShopMenu');

  _menuList.menuList.showGunShopMenu(shopId, price);
});
mp.events.add('client:menuList:showLscMenu', (shopId, price, idx, vListTun, vListColor) => {
  _methods.methods.debug('Event: client:menuList:showLscMenu');

  _menuList.menuList.showLscMenu(shopId, price, idx, vListTun, vListColor);
});
mp.events.add('client:menuList:showShopMenu', (shopId, price) => {
  _methods.methods.debug('Event: client:menuList:showShopMenu');

  mp.console.logInfo(shopId, price);

  _menuList.menuList.showShopMenu(shopId, price);
});
mp.events.add('client:menuList:showBarMenu', (shopId, price) => {
  _methods.methods.debug('Event: client:menuList:showBarMenu');

  _menuList.menuList.showBarMenu(shopId, price);
});
mp.events.add('client:menuList:showBarFreeMenu', (businessid = 0) => {
  _methods.methods.debug('Event: client:menuList:showBarFreeMenu');

  _menuList.menuList.showBarFreeMenu(1, businessid);
});
mp.events.add('client:menuList:showRentBikeMenu', (shopId, price) => {
  _methods.methods.debug('Event: client:menuList:showRentBikeMenu');

  _menuList.menuList.showRentBikeMenu(shopId, price);
});
mp.events.add('client:menuList:showLicBuyMenu', () => {
  _methods.methods.debug('Event: client:menuList:showLicBuyMenu');
});
mp.events.add('client:menuList:showLscVehicleTunningMenu', (shopId, idx, vehNumber, vehId, price) => {
  _methods.methods.debug('Event: client:menuList:showLscVehicleTunningMenu', shopId, idx, vehNumber, vehId, price);

  _menuList.menuList.showLscVehicleTunningMenu(shopId, idx, vehNumber, vehId, price);
});
mp.events.add('client:menuList:showLscVehicleSTunningMenu', (shopId, idx, vehNumber, vehId, price) => {
  _methods.methods.debug('Event: client:menuList:showLscVehicleSTunningMenu', shopId, idx, vehNumber, vehId, price);

  _menuList.menuList.showLscVehicleSTunningMenu(shopId, idx, vehNumber, vehId, price);
});
mp.events.add('client:menuList:showShopClothMenu', (component, clothColor, ClothData) => {
  _methods.methods.debug('Event: client:menuList:showShopClothMenu');

  _menuList.menuList.showShopClothMenu(component, clothColor, ClothData);
});
mp.events.add('client:menuList:showShopMaskMenu', shopId => {
  _methods.methods.debug('Event: client:menuList:showShopMaskMenu');

  _menuList.menuList.showShopMaskMenu(shopId);
});
mp.events.add('client:menuList:showBankMenu', (bankId, priceCard) => {
  _methods.methods.debug('Event: client:menuList:showBankMenu');

  _menuList.menuList.showBankMenu(bankId, priceCard);
});
mp.events.add('client:user:setWaypoint', (x, y) => {
  _methods.methods.debug('Event: client:user:setWaypoint');

  _user.user.setWaypoint(x, y);
});
mp.events.add('client:user:setWaypointTarget', (x, y, z) => {
  _methods.methods.debug('Event: client:user:setWaypointTarget');

  _user.user.setWaypointTarget(x, y, z);
});
mp.events.add('client:user:removeWaypointTarget', () => {
  _methods.methods.debug('Event: client:user:removeWaypointTarget');

  _user.user.clearWaypointTarget();
});
mp.events.add('client:jail:izol', number => {
  _methods.methods.debug('Event: client:jail:izol');

  _jail.jail.setIzol(number);
});
mp.events.add('client:jail:giveJailRun', () => {
  _methods.methods.debug('Event: client:jail:giveJailRun');

  _data.Container.SetLocally(0, 'canRun', true);
});
mp.events.add('client:jail:takeJailRun', () => {
  _methods.methods.debug('Event: client:jail:takeJailRun');

  _data.Container.ResetLocally(0, 'canRun');
});
mp.events.add('client:grabBank:success', bankId => {
  if (_methods.methods.getRandomInt(0, 200) == 0) {
    _inventory.inventory.takeNewItem(141, _methods.methods.getRandomInt(15000, 30000));

    mp.game.ui.notifications.show(`~y~Вы сорвали куш`);
  } else {
    switch (_methods.methods.getRandomInt(0, 2000)) {
      case 0:
        _inventory.inventory.takeNewItem(83);

        break;

      case 6:
        _inventory.inventory.takeNewItem(89);

        break;

      case 7:
        _inventory.inventory.takeNewItem(97);

        break;

      default:
        if (bankId == 5) {
          _user.user.addGrabMoney(_methods.methods.getRandomInt(800, 1600));

          mp.game.ui.notifications.show(`~y~Необходимо отмыть деньги`);
        } else {
          _user.user.addGrabMoney(_methods.methods.getRandomInt(500, 1500));

          mp.game.ui.notifications.show(`~y~Необходимо отмыть деньги`);
        }

        break;
    }
  }
});
mp.events.add('client:user:addGrabMoney', money => {
  _user.user.addGrabMoney(money);
});
mp.events.add('client:user:removeGrabMoney', money => {
  _user.user.removeGrabMoney(money);
});
mp.events.add('client:user:setGrabMoney', money => {
  _user.user.setGrabMoney(money);
});
mp.events.add('client:user:addDrugLevel', (drugType, level) => {
  _user.user.addDrugLevel(drugType, level);
});
mp.events.add('client:user:removeDrugLevel', (drugType, level) => {
  _user.user.removeDrugLevel(drugType, level);
});
mp.events.add('client:user:setDrugLevel', (drugType, level) => {
  _user.user.setDrugLevel(drugType, level);
});
mp.events.add('client:user:stopAllScreenEffects', () => {
  _user.user.stopAllScreenEffect();
});
mp.events.add('client:user:freeze', freeze => {
  mp.players.local.freezePosition(freeze);
});
mp.events.add('client:user:disableAllControls', disable => {
  _methods.methods.disableAllControls(disable);
});
mp.events.add('client:houses:sellToPlayer', (houseId, sum, userId) => {
  _menuList.menuList.showHouseSellToPlayerMenu(houseId, sum, userId);
});
mp.events.add('client:car:sellToPlayer', (houseId, name, sum, userId, slot) => {
  _menuList.menuList.showCarSellToPlayerMenu(houseId, name, sum, userId, slot);
});
mp.events.add('client:stock:sellToPlayer', (houseId, sum, userId) => {
  _menuList.menuList.showStockSellToPlayerMenu(houseId, sum, userId);
});
mp.events.add('client:apartments:sellToPlayer', (houseId, sum, userId) => {
  _menuList.menuList.showApartSellToPlayerMenu(houseId, sum, userId);
});
mp.events.add('client:business:sellToPlayer', (houseId, sum, userId) => {
  _menuList.menuList.showBusinessSellToPlayerMenu(houseId, sum, userId);
});
mp.events.add('client:condo:sellToPlayer', (houseId, sum, userId) => {
  _menuList.menuList.showCondoSellToPlayerMenu(houseId, sum, userId);
});
mp.events.add('client:inventory:closeItemMenu', id => {
  _inventory.inventory.closeItemMenu(id);
});
mp.events.add('client:console', e => {
  mp.console.logError(e);
});
mp.events.add('client:sendToPlayerItemListUpdateAmountMenu', (data, ownerType, ownerId) => {
  _methods.methods.debug('Event: client:sendToPlayerItemListUpdateAmountMenu');

  _inventory.inventory.sendToPlayerItemListUpdateAmountMenu(data, ownerType, ownerId);
});
mp.events.add('client:startFishing', () => {
  _methods.methods.debug('Event: client:startFishing');

  _inventory.inventory.startFishing();
});
let handcuffTimerId = null;
mp.events.add('clearWeapons', () => {
  _user.user.removeAllWeapons();
});
mp.events.add('clearWeapon', hash => {
  _user.user.removeWeapon(hash);
});
mp.events.add('client:handcuffs', value => {
  if (!_menu.default.Menu.GetCurrentMenu() || !_menu.default.Menu.GetCurrentMenu().workAnyTime) _menu.default.Menu.HideMenu();

  _methods.methods.debug('Event: client:handcuffs');

  _methods.methods.disableDefaultControls(value);

  if (value) {
    handcuffTimerId = setInterval(function () {
      if (_user.user.isCuff() && !mp.players.local.isPlayingAnim('mp_arresting', 'idle', 3)) mp.players.local.clearTasks();

      _user.user.playAnimation('mp_arresting', 'idle', 49);
    }, 2500);
  } else {
    clearInterval(handcuffTimerId);
  }
});
mp.events.add('client:user:askDatingToPlayerId', (playerId, nick) => {
  _menuList.menuList.showPlayerDatingAskMenu(playerId, nick);
});
mp.events.add('client:user:setDating', (key, val) => {
  _user.user.setDating(key, val);
});
mp.events.add('client:user:loginAuth', function (nick, password) {
  nick = nick.replace(/[^a-zA-Z\s]/gi, '');

  _methods.methods.storage.set('nick', nick);
});
mp.events.add('client:user:registerAuth', function (name, surname, email, pass1, pass2, referer, promocode, acceptRules = false) {
  name = name.replace(/[^a-zA-Z\s]/gi, '');
  surname = surname.replace(/[^a-zA-Z\s]/gi, '');
  email = email.replace("'", '');
  referer = referer.replace(/[^a-zA-Z\s]/gi, '');
  promocode = promocode.replace(/[^\w\s]/gi, '');

  if (name == '') {
    mp.game.ui.notifications.show('~r~Имя - поле не заполнено');
    return;
  }

  if (surname == '') {
    mp.game.ui.notifications.show('~r~Фамилия - поле не заполнено');
    return;
  }

  if (email == '') {
    mp.game.ui.notifications.show('~r~Email - полеpromocode_top_list не заполнено');
    return;
  }

  if (pass1 == '') {
    mp.game.ui.notifications.show('~r~Пароль - поле не заполнено');
    return;
  }

  if (pass2 != pass1) {
    mp.game.ui.notifications.show('~r~Пароли не совпадают');
    return;
  }

  if (acceptRules == false) {
    mp.game.ui.notifications.show('~r~Вы не согласились с правилами сервера');
    return;
  }

  mp.game.ui.notifications.show('~b~Пожалуйста подождите...');

  _methods.methods.storage.set('nick', name + ' ' + surname);

  mp.events.callRemote('server:user:register:account', name + ' ' + surname, pass1, email, referer, promocode);
});
mp.events.add('client:washVehicle', vId => {
  try {
    let veh = mp.vehicles.atRemoteId(vId);
    if (mp.vehicles.exists(veh)) veh.setDirtLevel(0);
  } catch (e) {
    _methods.methods.debug(e);
  }
});
mp.events.add('client:user:updateCache', data => {
  try {
    _methods.methods.debug('Event: client:user:updateCache');

    _user.user.setCacheData(new Map(data));
  } catch (e) {
    _methods.methods.debug('Exception: events:client:user:updateCache');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:user:hideLoadDisplay', hud => {
  _methods.methods.debug('Event: client:user:hideLoadDisplay');

  _user.user.hideLoadDisplay(500, hud);
});
mp.events.add('client:user:showLoadDisplay', hud => {
  _methods.methods.debug('Event: client:user:showLoadDisplay');

  _user.user.showLoadDisplay(500, hud);
});
mp.events.add('client:updateCheckpointList', (data, i) => {
  _methods.methods.debug('Event: client:updateCheckpointList');

  _checkpoint.checkpoint.updateCheckpointList(data, i);
});
mp.events.add('client:updateGangZoneList', data => {
  _methods.methods.debug('Event: client:updateGangZoneList');

  _methods.methods.updateGangZoneList(data);
});
mp.events.add('client:updateVehicleInfo', data => {
  _methods.methods.debug('Event: client:updateVehicleInfo');

  _enums.enums.updateVehicleInfo(data);
});
mp.events.add('client:removeVehicleInfo', id => {
  _enums.enums.removeVehicleInfo(id);
});
mp.events.add('client:editVehicleInfo', (id, value) => {
  _enums.enums.editVehicleInfo(id, value);
});
mp.events.add('client:user:clearAllProp', playerId => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      _methods.methods.debug('Event: events:client:user:clearAllProp');

      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;
      remotePlayer.clearProp(0);
      remotePlayer.clearProp(1);
      remotePlayer.clearProp(2);
      remotePlayer.clearProp(6);
      remotePlayer.clearProp(7);
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:user:clearAllProp');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:user:setComponentVariation', (component, drawableId, textureId) => {
  _methods.methods.debug('Event: client:user:setComponentVariation', component, drawableId, textureId);

  mp.players.local.setComponentVariation(component, drawableId, textureId, 2);
});
mp.events.add('weatherdata:set', (...args) => {
  _weather.weather.syncDateTime(args[0], args[1], args[2], args[3], args[4]);

  _weather.weather.syncRealTime(args[5]);

  _weather.weather.syncWeatherTemp(args[6]);

  _weather.weather.syncRealFullDateTime(args[7]);

  _weather.weather.nextWeather(args[8], args[9] ? 1 : 10);
});
mp.events.add('client:user:stopAnimation', () => {
  _methods.methods.debug('Event: client:user:stopAnimation');

  if (!mp.players.local.getVariable('isBlockAnimation')) {
    mp.players.local.clearTasks();
  }
});
mp.events.add('client:user:revive', hp => {
  _methods.methods.debug('Event: client:user:revive');

  _user.user.revive(hp);
});
mp.events.add('client:menuList:showMenu', (title, desc, menuData) => {
  _methods.methods.debug('Event: client:menuList:showMenu');

  _menuList.menuList.showMenu(title, desc, new Map(menuData));
});
mp.events.add('client:menuList:showTruckerOffersMenu', menuData => {
  _methods.methods.debug('Event: client:menuList:showTruckerOffersMenu');

  _menuList.menuList.showTruckerOffersMenu(menuData);
});
mp.events.add('client:lawyer:accept', (price, id, rpName) => {
  _methods.methods.debug('Event: client:lawyer:accept', price, id, rpName);

  _menuList.menuList.showLawyerOffersMenu(price, id, rpName);
});
mp.events.add('client:lawyer:house:accept', (buyerId, id) => {
  _menuList.menuList.showLawyerHouseOffersMenu(buyerId, id);
});
mp.events.add('client:showMazeBankHousePeopleListMenu', data => {
  _menuList.menuList.showMazeBankHousePeopleListMenu(data);
});
mp.events.add('client:trucker:acceptOffer1', (id, name, company, x, y, z, px, py, pz, price) => {
  _methods.methods.debug('Event: client:trucker:acceptOffer1');

  _trucker.trucker.acceptOffer1(id, name, company, x, y, z, px, py, pz, price);
});
mp.events.add('client:trucker:acceptOffer2', (id, name, company, trName, cl1, cl2, liv, x, y, z, rot, px, py, pz, price) => {
  _methods.methods.debug('Event: client:trucker:acceptOffer2');

  _trucker.trucker.acceptOffer2(id, name, company, trName, cl1, cl2, liv, x, y, z, rot, px, py, pz, price);
});
mp.events.add('client:user:takeNewItem', (itemId, count) => {
  _methods.methods.debug('Event: client:user:takeNewItem');

  _inventory.inventory.takeNewItem(itemId, count);
});
mp.events.add('client:chatTyping', enable => {
  _user.user.setVariable('isTyping', enable);
});
mp.events.add('client:setPlayerDecoration', (id, slot, overlay) => {
  _methods.methods.debug('Event: client:setPlayerDecoration', id, slot, overlay);

  let remotePlayer = mp.players.atRemoteId(id);
  if (mp.players.exists(remotePlayer)) remotePlayer.setDecoration(mp.game.gameplay.getHashKey(slot), mp.game.gameplay.getHashKey(overlay));
});
mp.events.add('client:clearPlayerDecorations', id => {
  _methods.methods.debug('Event: client:clearPlayerDecorations', id);

  let remotePlayer = mp.players.atRemoteId(id);
  if (mp.players.exists(remotePlayer)) remotePlayer.clearDecorations();
});
mp.events.add('client:user:giveWeaponByHash', (hash, pt, inHand = false) => {
  _methods.methods.debug('Event: client:user:giveWeaponByHash', hash, pt);

  _user.user.giveWeaponByHash(hash, pt, inHand);
});
mp.events.add('client:distId', loadDist => {
  _methods.methods.debug('Event: client:distId', loadDist);

  loadIndicatorDist = loadDist;
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type === 'player') {
    let remotePlayer = entity;

    if (mp.players.exists(remotePlayer)) {
      for (let i = 0; i < 8; i++) {
        try {
          let propType = remotePlayer.getVariable('propType' + i);
          let propColor = remotePlayer.getVariable('propColor' + i);
          if (propType < 0 || propType == undefined) remotePlayer.clearProp(i);else remotePlayer.setPropIndex(i, propType, propColor, true);
        } catch (e) {
          _methods.methods.debug(e);
        }
      }
    }
  }
});
mp.events.add('playerDeath', async function (player, reason, killer) {
  if (mp.players.local.getVariable('inMp')) return;
  mp.events.triggerBrowser('cef:alert:setBigAlert', 'success', escape("Нажмите Y чтобы вызвать врача. Нажмите N чтобы отказаться от врача"), 7000);
  if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(288.61148, -1345.5358, 23.5378017)) > 3000) _timer.timer.setDeathTimer(400);else if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(288.61148, -1345.5358, 23.5378017)) > 4000) _timer.timer.setDeathTimer(500);else if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(288.61148, -1345.5358, 23.5378017)) > 5000) _timer.timer.setDeathTimer(600);else _timer.timer.setDeathTimer(300);
  if (player.getVariable('enableAdmin')) _timer.timer.setDeathTimer(10);

  _menu.default.Menu.HideMenu();

  _inventory.inventory.hide();

  mp.game.gameplay.disableAutomaticRespawn(true);
  mp.game.gameplay.ignoreNextRestart(true);
  mp.game.gameplay.setFadeInAfterDeathArrest(true);
  mp.game.gameplay.setFadeOutAfterDeath(false);

  _user.user.stopAllScreenEffect();

  mp.players.local.freezePosition(false);
  mp.players.local.setCollision(true, true);

  _data.Container.ResetLocally(0, 'hasSeat');

  _data.Container.ResetLocally(0, 'canRun');
});
let blockMaxSpeed = false;

function blockSpeedMax(time = 1000) {
  blockMaxSpeed = true;
  setTimeout(() => {
    blockMaxSpeed = false;
  }, time);
}

const baseKeyDisable = () => {
  mp.game.controls.disableControlAction(0, 21, true);
  mp.game.controls.disableControlAction(0, 24, true);
  mp.game.controls.disableControlAction(0, 25, true);
  mp.game.controls.disableControlAction(0, 58, true);
  mp.game.controls.disableControlAction(0, 263, true);
  mp.game.controls.disableControlAction(0, 264, true);
  mp.game.controls.disableControlAction(0, 257, true);
  mp.game.controls.disableControlAction(0, 140, true);
  mp.game.controls.disableControlAction(0, 141, true);
  mp.game.controls.disableControlAction(0, 142, true);
  mp.game.controls.disableControlAction(0, 143, true);
  mp.game.controls.disableControlAction(0, 75, true);
  mp.game.controls.disableControlAction(27, 75, true);
  mp.game.controls.disableControlAction(0, 23, true);
  mp.game.controls.disableControlAction(27, 23, true);
  mp.game.controls.disableControlAction(0, 22, true);
  mp.game.controls.disableControlAction(0, 32, true);
  mp.game.controls.disableControlAction(0, 268, true);
  mp.game.controls.disableControlAction(0, 33, true);
  mp.game.controls.disableControlAction(0, 269, true);
  mp.game.controls.disableControlAction(0, 34, true);
  mp.game.controls.disableControlAction(0, 270, true);
  mp.game.controls.disableControlAction(0, 35, true);
  mp.game.controls.disableControlAction(0, 271, true);
  mp.game.controls.disableControlAction(0, 37, true);
  mp.game.controls.disableControlAction(0, 91, true);
  mp.game.controls.disableControlAction(0, 92, true);
  mp.game.controls.disableControlAction(27, 91, true);
  mp.game.controls.disableControlAction(27, 92, true);
};

mp.events.add('render', () => {
  mp.game.controls.disableControlAction(0, 243, true);
  mp.game.controls.disableControlAction(0, 357, true);
  if (_phone.phone.ingameBrowser || _gui.gui.isActionGui() && !_gui.gui.isActionMoveGui()) mp.game.controls.disableAllControlActions(1);

  if (_playerDisableAllControls || _phone.phone.ingameBrowser || _gui.gui.isActionGui() && !_gui.gui.isActionMoveGui()) {
    mp.game.controls.disableAllControlActions(0);
    mp.game.controls.disableAllControlActions(2);
    mp.game.controls.enableControlAction(2, 172, true);
    mp.game.controls.enableControlAction(2, 173, true);
    mp.game.controls.enableControlAction(2, 174, true);
    mp.game.controls.enableControlAction(2, 175, true);
    mp.game.controls.enableControlAction(2, 201, true);
    mp.game.controls.enableControlAction(2, 177, true);
  }

  if (_playerDisableDefaultControls) {
    baseKeyDisable();
    mp.players.local.setEnableHandcuffs(true);
    mp.players.local.setCanSwitchWeapon(false);
    if (mp.players.local.vehicle) mp.game.controls.disableAllControlActions(0);
  }

  if (_ui.ui.DisableMouseControl || _ui.ui.isShowMenu()) {
    mp.game.controls.disableControlAction(0, 12, true);
    mp.game.controls.disableControlAction(0, 13, true);
    mp.game.controls.disableControlAction(0, 14, true);
    mp.game.controls.disableControlAction(0, 15, true);
    mp.game.controls.disableControlAction(0, 17, true);
    mp.game.controls.disableControlAction(0, 18, true);
    mp.game.controls.disableControlAction(0, 24, true);
    mp.game.controls.disableControlAction(0, 25, true);
    mp.game.controls.disableControlAction(0, 1, true);
    mp.game.controls.disableControlAction(0, 2, true);
    mp.game.controls.disableControlAction(0, 3, true);
    mp.game.controls.disableControlAction(0, 4, true);
    mp.game.controls.disableControlAction(0, 5, true);
    mp.game.controls.disableControlAction(0, 6, true);
  }

  if (_gui.gui.isActionMoveGui()) mp.gui.cursor.show(false, true);else if (_gui.gui.isActionGui() && !mp.gui.cursor.visible) mp.gui.cursor.show(true, true);

  if (_gui.gui.isActionMoveGui()) {
    mp.game.controls.disableControlAction(0, 1, true);
    mp.game.controls.disableControlAction(0, 2, true);
    mp.game.controls.disableControlAction(0, 3, true);
    mp.game.controls.disableControlAction(0, 4, true);
    mp.game.controls.disableControlAction(0, 5, true);
    mp.game.controls.disableControlAction(0, 6, true);
    mp.game.controls.disableControlAction(0, 199, true);
    baseKeyDisable();
  }

  let veh = mp.players.local.vehicle;

  if (veh && veh.getClass() != 8) {
    if (veh.getPedInSeat(-1) == mp.players.local.handle) {
      if (_user.user.get('mp0_shooting_ability') < 99 && !_user.user.isPolice()) {
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 25, true);
        mp.game.controls.disableControlAction(2, 66, true);
        mp.game.controls.disableControlAction(2, 67, true);
        mp.game.controls.disableControlAction(2, 69, true);
        mp.game.controls.disableControlAction(2, 70, true);
        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 143, true);
        mp.game.controls.disableControlAction(2, 263, true);
      }
    }
  } else if (veh && veh.getClass() == 8 && _methods.methods.getCurrentSpeed() > 50) {
    mp.game.controls.disableControlAction(2, 24, true);
    mp.game.controls.disableControlAction(2, 25, true);
    mp.game.controls.disableControlAction(2, 66, true);
    mp.game.controls.disableControlAction(2, 67, true);
    mp.game.controls.disableControlAction(2, 69, true);
    mp.game.controls.disableControlAction(2, 70, true);
    mp.game.controls.disableControlAction(2, 140, true);
    mp.game.controls.disableControlAction(2, 141, true);
    mp.game.controls.disableControlAction(2, 143, true);
    mp.game.controls.disableControlAction(2, 263, true);
  }

  if (_user.user.get('med_time') > 0) {
    mp.game.controls.disableControlAction(2, 24, true);
    mp.game.controls.disableControlAction(2, 25, true);
    mp.game.controls.disableControlAction(2, 66, true);
    mp.game.controls.disableControlAction(2, 67, true);
    mp.game.controls.disableControlAction(2, 69, true);
    mp.game.controls.disableControlAction(2, 70, true);
    mp.game.controls.disableControlAction(2, 140, true);
    mp.game.controls.disableControlAction(2, 141, true);
    mp.game.controls.disableControlAction(2, 143, true);
    mp.game.controls.disableControlAction(2, 263, true);
  }

  let plPos = mp.players.local.position;

  if ([60674, 60418].includes(mp.game.interior.getInteriorAtCoords(plPos.x, plPos.y, plPos.z))) {
    mp.game.graphics.drawLightWithRange(291.9079, -1348.883, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(279.4622, -1337.024, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(272.779, -1341.37, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(264.4822, -1360.97, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(253.408, -1364.389, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(254.8074, -1349.439, 27.03455, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(240.4855, -1368.784, 32.28351, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(247.7051, -1366.653, 32.34088, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(257.9836, -1358.863, 41.80476, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(255.0098, -1383.685, 42.01367, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(230.9255, -1367.348, 42.03852, 255, 255, 255, 20.0, 0.5);
    mp.game.graphics.drawLightWithRange(243.6069, -1366.777, 26.78872, 255, 255, 255, 20.0, 0.5);
  }

  mp.game.ui.hideHudComponentThisFrame(1);
  mp.game.ui.hideHudComponentThisFrame(2);
  mp.game.ui.hideHudComponentThisFrame(3);
  mp.game.ui.hideHudComponentThisFrame(4);
  mp.game.ui.hideHudComponentThisFrame(6);
  mp.game.ui.hideHudComponentThisFrame(7);
  mp.game.ui.hideHudComponentThisFrame(8);
  mp.game.ui.hideHudComponentThisFrame(9);
  mp.game.ui.hideHudComponentThisFrame(13);
  mp.game.ui.hideHudComponentThisFrame(17);
  mp.game.ui.hideHudComponentThisFrame(20);
  let vehicle = veh;

  if (vehicle && mp.players.local.isInAnyVehicle(false) && !blockMaxSpeed) {
    vehicle.setMaxSpeed(maxSpeed / 3.6);

    if (vehicle.getVariable('boost') > 0) {
      vehicle.setEngineTorqueMultiplier(vehicle.getVariable('boost'));
    } else vehicle.setEngineTorqueMultiplier(1.3);
  }

  if (mp.players.local.isBeingStunned(0)) mp.players.local.setMinGroundTimeForStungun(30000);
  mp.game.player.setHealthRechargeMultiplier(0.0);

  if (_user.user.isLogin() && showIds) {
    let localPlayer = mp.players.local;
    let __localPlayerPosition__ = mp.players.local.position;
    let admin = mp.players.local.getVariable('enableAdmin');

    if (admin && _user.user.adminAdvancedData) {
      mp.vehicles.forEach(vehicle => {
        const pos = vehicle.position;

        const dist = _methods.methods.distanceToPos(__localPlayerPosition__, pos);

        if (dist < loadIndicatorDist) {
          let text = ``;
          if (dist < loadIndicatorDist * 0.75) text += `[${vehicle.getNumberPlateText()}]\n`;
          if (vehicle.getVariable('id_user')) text += `USER: ${vehicle.getVariable('id_user')} ~b~|~w~`;
          if (vehicle.getVariable('fraction_id')) text += `FRACTION: ${vehicle.getVariable('fraction_id')} ~b~|~w~`;
          text += `ID: ${vehicle.remoteId}\n`;
          let velocity = vehicle.getVelocity();
          let speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);
          speed = Math.round(speed * 3.6);
          let maxSpeed = mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model);
          if (vehicle.getVariable('boost')) maxSpeed *= vehicle.getVariable('boost');else maxSpeed *= 1.3;
          if (speed > 30) text += (vehicle.getSpeed() > maxSpeed + 10 ? '~r~' : '~b~') + 'Speed: ' + speed + '~w~\n';
          if (speed > maxSpeed * 3.6 / 2) text += '~r~Max: ' + (maxSpeed * 3.6).toFixed(0) + '~w~\n';
          text += (vehicle.getVariable('locked') ? '~r~Doors~s~' : '~g~Doors~s~') + "/" + (vehicle.getVariable('engine') ? '~g~Engine~s~' : '~r~Engine~s~') + '\n';

          _ui.ui.drawText3D(text, pos.x, pos.y, pos.z - 1.0);
        }
      });
    }

    mp.players.forEachInStreamRange(player => {
      if (!player.handle) return;

      if (player === localPlayer || !mp.players.exists(player)) {
        return false;
      }

      if (player.getAlpha() < 10 && !admin && !player.getVariable('skate')) return false;
      const __playerPosition__ = player.position;

      const distance = _methods.methods.distanceToPos(__localPlayerPosition__, __playerPosition__);

      if (distance <= loadIndicatorDist && player.dimension == localPlayer.dimension) {
        const isConnected = player.isListening;
        const isEnable = player.isSpeaking;
        let indicatorColor = '~m~•';
        if (isConnected && !isEnable) indicatorColor = '~m~•';else if (isConnected && isEnable) indicatorColor = '~w~•';

        const headPosition = _objectSpread(_objectSpread({}, player.position), {}, {
          z: player.position.z + 0.6
        });

        let typingLabel = '';

        const IN_MASK = _mask.hiddenIdMask.includes(player.getDrawableVariation(1));

        if (_user.user.isDead(player)) typingLabel += '\n~r~Без сознания';
        if (player.getVariable('enableAdmin') && (!player.getVariable('enableAdminHidden') || _user.user.get('admin_level') >= 5)) typingLabel += '\n~r~ADMIN MOD';else if (player.getVariable('hiddenId')) typingLabel += '\n~m~HIDDEN ID';
        if (player.getVariable('isAfk')) typingLabel += '\n~r~AFK...';else if (player.getVariable('isTyping')) typingLabel += '\n~b~Печатает...';
        if (admin && _user.user.showhpap || mp.game.player.isFreeAimingAtEntity(player.handle)) typingLabel += '\n~g~HP:' + player.getHealth() + ' ~b~AP:' + player.getArmour();

        if (admin) {
          deadList.filter(item => item.id == player.getVariable('id')).map(item => {
            const posdeath = item;
            if (admin && posdeath && mp.game.gameplay.getDistanceBetweenCoords(player.position.x, player.position.y, player.position.z, posdeath.x, posdeath.y, posdeath.z, true) <= 100.0) typingLabel += '\n~r~AFTER DEATH ' + _methods.methods.parseInt(mp.game.gameplay.getDistanceBetweenCoords(player.position.x, player.position.y, player.position.z, posdeath.x, posdeath.y, posdeath.z, true)) + "m";
          });
        }

        let name = '';
        let dbid = player.getVariable('id');
        if (_user.user.hasDating(dbid) && !IN_MASK) name = _user.user.getDating(dbid) + ' | ';

        if (admin || !player.getVariable('hiddenId') && mp.players.local.hasClearLosTo(player.handle, 17)) {
          _ui.ui.drawText3D(name + (player.getVariable('fraction_id') && admin && _user.user.showhpap ? `(F:${player.getVariable('fraction_id')}) ` : '') + _user.user.getShowingIdString(player) + ' ' + indicatorColor + typingLabel, headPosition.x, headPosition.y, headPosition.z + 0.1);
        }
      }
    });
  }

  if (_user.user.isLogin()) {
    if (_user.user.get('jail_time')) {
      mp.game.graphics.drawText((0, _methods2.formatTime)(_user.user.get('jail_time')) + ' до освобождения', [0.5, 0.9], {
        font: 0,
        color: [255, 255, 255, 100],
        scale: [0.4, 0.4],
        outline: true,
        centre: false
      });
    }

    if (_user.user.get('med_time')) {
      mp.game.graphics.drawText((0, _methods2.formatTime)(_user.user.get('med_time')) + ' до выздоровления', [0.5, 0.9], {
        font: 0,
        color: [255, 255, 255, 100],
        scale: [0.4, 0.4],
        outline: true,
        centre: false
      });
    }
  }
});
mp.events.add('playerStartEnterVehicle', vehicle => {
  if (typeof vehicle.getVariable('locked') == 'boolean') {
    vehicle.setDoorsLockedForPlayer(mp.players.local.handle, vehicle.getVariable('locked'));
  }
});
mp.events.add('playerLeaveVehicle', function () {
  mp.players.local.setConfigFlag(32, true);
  exports.seatBelt = seatBelt = false;
});
mp.events.add('playerEnterVehicle', async function (vehicle, seat) {});
mp.events.add('entityStreamIn', entity => {
  if (entity.type === 'vehicle') {
    if (entity.getVariable('freezePosition') === true) entity.freezePosition(true);
  }
});
mp.events.addDataHandler("freezePosition", (entity, value) => {
  if (entity.type != "vehicle") return;
  entity.freezePosition(value);
});
mp.gui.execute("const _enableChatInput = enableChatInput;enableChatInput = (enable) => { mp.trigger('chatEnabled', enable); _enableChatInput(enable) };");
mp.events.add('chatEnabled', isEnabled => {
  mp.gui.chat.enabled = isEnabled;

  _methods.methods.disableAllControls(isEnabled);
});
mp.keys.bind(0x1b, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (_phone.phone.ingameBrowser) {
    _phone.phone.destroyBrowser();

    mp.gui.cursor.show(false, false);
  }

  if (!_inventory.inventory.isHide()) _inventory.inventory.hide();
});
mp.keys.bind(118, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  (0, _ragevoice.restartVoice)();
});
mp.keys.bind(0x08, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_phone.phone.ingameBrowser && !_inventory.inventory.isHide()) _inventory.inventory.hide();
});
let keyEspam = false;
mp.keys.bind(0x45, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (mp.gui.cursor.visible) return;
  if (keyEspam) return;
  keyEspam = true;
  setTimeout(() => {
    keyEspam = false;
  }, 1000);

  if (!_methods.methods.isBlockKeys()) {
    _methods.methods.pressEToPayRespect();

    mp.events.callSocket('onKeyPress:E');
  }
});
mp.keys.bind(0x4e, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (_user.user.isDead()) {
    if (_data.Container.HasLocally(mp.players.local.remoteId, 'isEmsTimeout')) {
      mp.game.ui.notifications.show('~r~Нельзя так часто нажимать эту кнопку');
      mp.game.ui.notifications.show('~r~Подождите 30 секунд');
      return;
    }

    if (_timer.timer.getDeathTimer() > 60) _timer.timer.setDeathTimer(60);
    mp.events.triggerBrowser('cef:alert:removeHelpKey');
    mp.game.ui.notifications.show('~r~Вы отказались от вызова медиков');

    _data.Container.SetLocally(mp.players.local.remoteId, 'isEmsTimeout', true);

    setTimeout(function () {
      _data.Container.ResetLocally(mp.players.local.remoteId, 'isEmsTimeout');
    }, 30000);
  }
});
mp.keys.bind(0x59, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (_user.user.isDead()) {
    if (_data.Container.HasLocally(mp.players.local.remoteId, 'isEmsTimeout')) {
      mp.game.ui.notifications.show('~r~Нельзя так часто нажимать эту кнопку');
      mp.game.ui.notifications.show('~r~Подождите 30 секунд');
      return;
    }

    _dispatcher.dispatcher.callFraction(`[EMS] Код 3`, `Человек без сознания`, [16]);

    mp.game.ui.notifications.show('~b~Вызов был отправлен медикам, ожидайте');

    _data.Container.SetLocally(mp.players.local.remoteId, 'isEmsTimeout', true);

    setTimeout(function () {
      _data.Container.ResetLocally(mp.players.local.remoteId, 'isEmsTimeout');
    }, 30000);
  }
});
mp.keys.bind(0x47, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys()) {
    _ui.ui.showOrHideMenu();
  }
});
mp.keys.bind(0xdb, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _enums.enums.lscCam != null) {
    try {
      _enums.enums.lscCamRot = _enums.enums.lscCamRot - 0.2;
      let pos = new mp.Vector3(_enums.enums.lscCam.getRange * Math.sin(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.x, _enums.enums.lscCam.getRange * Math.cos(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.y, _enums.enums.lscCam.getPointAtCoords.z);

      _enums.enums.lscCam.setCoord(pos.x, pos.y, pos.z + 1.7);
    } catch (e) {
      _methods.methods.debug(e);
    }
  } else if (!_methods.methods.isBlockKeys() && mp.players.local.vehicle) {
    let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');

    _vehicles.vehicles.setIndicatorLeftState(!actualData.IndicatorLeftToggle);

    _vehicles.vehicles.setIndicatorRightState(false);
  }
});
mp.keys.bind(0xdd, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _enums.enums.lscCam != null) {
    try {
      _enums.enums.lscCamRot = _enums.enums.lscCamRot + 0.2;
      let pos = new mp.Vector3(_enums.enums.lscCam.getRange * Math.sin(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.x, _enums.enums.lscCam.getRange * Math.cos(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.y, _enums.enums.lscCam.getPointAtCoords.z);

      _enums.enums.lscCam.setCoord(pos.x, pos.y, pos.z + 1.7);
    } catch (e) {
      _methods.methods.debug(e);
    }
  } else if (!_methods.methods.isBlockKeys() && mp.players.local.vehicle) {
    let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');

    _vehicles.vehicles.setIndicatorRightState(!actualData.IndicatorRightToggle);

    _vehicles.vehicles.setIndicatorLeftState(false);
  }
});
mp.keys.bind(0xbb, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _enums.enums.lscCam != null) {
    try {
      _enums.enums.lscCam.getRange = _enums.enums.lscCam.getRange - 0.2;
      let pos = new mp.Vector3(_enums.enums.lscCam.getRange * Math.sin(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.x, _enums.enums.lscCam.getRange * Math.cos(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.y, _enums.enums.lscCam.getPointAtCoords.z);

      _enums.enums.lscCam.setCoord(pos.x, pos.y, pos.z + 1.7);
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
});
mp.keys.bind(0xbd, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _enums.enums.lscCam != null) {
    try {
      _enums.enums.lscCam.getRange = _enums.enums.lscCam.getRange + 0.2;
      if (_enums.enums.lscCam.getRange > 4.6) _enums.enums.lscCam.getRange = 4.6;
      let pos = new mp.Vector3(_enums.enums.lscCam.getRange * Math.sin(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.x, _enums.enums.lscCam.getRange * Math.cos(_enums.enums.lscCamRot) + _enums.enums.lscCam.getPointAtCoords.y, _enums.enums.lscCam.getPointAtCoords.z);

      _enums.enums.lscCam.setCoord(pos.x, pos.y, pos.z + 1.7);
    } catch (e) {
      _methods.methods.debug(e);
    }
  }
});
mp.keys.bind(0x4b, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _enums.enums.lscCam != null) {
    let veh = mp.vehicles.atRemoteId(_enums.enums.lscCam.vehId);

    if (mp.vehicles.exists(veh)) {
      if (veh.allDoorsOpen) {
        veh.allDoorsOpen = false;

        for (let i = 0; i < 8; i++) veh.setDoorShut(i, true);
      } else {
        veh.allDoorsOpen = true;

        for (let i = 0; i < 8; i++) veh.setDoorOpen(i, false, true);
      }

      _vSync.vSync.syncToServer(veh);
    }
  }
});
mp.keys.bind(0x12, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) mp.events.callSocket('onKeyPress:LAlt');
});
mp.keys.bind(0x32, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) mp.events.callSocket('onKeyPress:2');
});
mp.keys.bind(0x4c, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) mp.events.callSocket('onKeyPress:L');
});
mp.events.add('unb', () => {
  let int = setInterval(() => {
    if (!_gui.gui.browser || !_gui.gui.browser.execute) return;
    clearInterval(int);

    _gui.gui.browser.execute(`freedombb()`);
  }, 100);
});
mp.keys.bind(0x33, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (_methods.methods.isBlockKeys()) return;
  if (!_user.user.get('tablet_equip')) return _user.user.notify("~r~У вас нет планшета в экипировке. Купите его в магазине либо экипируйте из инвентаря");
  mp.events.callRemote('tablet:main');
});
mp.keys.bind(0x34, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys() && _user.user.get('fraction_id2') > 0) _menuList.menuList.showFraction2Menu();
});
mp.keys.bind(0x35, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys() && _user.user.get('phone_code') > 0) _menuList.menuList.showPlayerPhoneMenu();else if (!(_user.user.get('phone_code') > 0)) return _user.user.notify("~r~У вас нет телефона. Купите его в магазине");
});
mp.keys.bind(0x36, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys() && _user.user.get('is_buy_walkietalkie')) _menuList.menuList.showPlayerWalkietalkieMenu();
});
mp.keys.bind(0x38, true, function () {
  if (_gui.gui.chatActive || !_user.user.isLogin() || !_user.user.isAdmin() || _gui.gui.currentGui === 'casino') {
    return;
  }

  if (!_methods.methods.isShowInput()) _menuList.menuList.showAdminMenu();
});
mp.keys.bind(0x31, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showPlayerMenu();
});
mp.keys.bind(0x39, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showAnimationTypeListMenu();
});
mp.keys.bind(0x42, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) _user.user.engineVehicle();
});
let seatBlock = false;
mp.keys.bind(0x58, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (seatBlock) return;

  if (!_methods.methods.isBlockKeys()) {
    if (mp.players.local.vehicle) {
      if (seatBelt) {
        exports.seatBelt = seatBelt = false;
        mp.players.local.setConfigFlag(32, true);
        mp.game.ui.notifications.show('~r~Вы отстегнули ремень безопасности');

        _chat.chat.sendMeCommand('отстегнул ремень безопасности');

        _ui.ui.unbuckle();
      } else {
        exports.seatBelt = seatBelt = true;
        mp.players.local.setConfigFlag(32, false);
        mp.game.ui.notifications.show('~g~Вы пристегнули ремень безопасности');

        _chat.chat.sendMeCommand('пристегнул ремень безопасности');

        _ui.ui.buckle();
      }

      seatBlock = true;
      setTimeout(() => {
        seatBlock = false;
      }, 5000);
    }
  }
});
mp.keys.bind(0x48, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && !mp.players.local.vehicle) {
    _user.user.playAnimation('gestures@m@standing@casual', 'gesture_hello', 48);
  }
});
mp.keys.bind(0x4d, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showMainMenu();
});
mp.keys.bind(0x71, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (_gui.gui.currentGui != null) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showHelpMenu();
});
mp.keys.bind(0x72, false, () => {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) mp.gui.cursor.show(true, true);
});
mp.keys.bind(0x78, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (!_methods.methods.isBlockKeys()) _ui.ui.showOrHideRadar();
});
mp.keys.bind(0x79, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) == 275201) return;
  if (_methods.methods.isBlockKeys()) return;
  if (mp.players.local.isReloading()) return;

  _user.user.stopAllAnimation();
});
mp.keys.bind(0xc0, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (_phone.phone.ingameBrowser) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showInvMenu();
});
mp.keys.bind(0x49, true, function () {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;
  if (_phone.phone.ingameBrowser) return;
  if (!_methods.methods.isBlockKeys()) _menuList.menuList.showInvMenu();
});
let showIds = true;
mp.events.add('client:showId', () => {
  showIds = !showIds;
  if (showIds) mp.game.ui.notifications.show('Вы ~g~включили~s~ ID игроков');else mp.game.ui.notifications.show('Вы ~r~отключили~s~ ID игроков');
});
let money = '$0';
let moneyBank = '$0';
let timerId = setTimeout(function updateMoney() {
  if (_user.user.isLogin()) {
    money = '$' + _methods.methods.numberFormat(parseInt(_user.user.get('money')));
    moneyBank = '$' + _methods.methods.numberFormat(parseInt(_user.user.get('money_bank')));

    _ui.ui.updateZoneAndStreet();
  }

  timerId = setTimeout(updateMoney, 200);
}, 200);
mp.events.add('client:clearGrabMoney', () => {
  let grabMoney = _user.user.getGrabMoney();

  if (grabMoney > 0) {
    _user.user.addCashMoney(grabMoney);

    _user.user.setGrabMoney(0);

    mp.game.ui.notifications.show('~g~Вы отмыли: ~s~$' + _methods.methods.numberFormat(grabMoney));
  } else {
    mp.game.ui.notifications.show('~r~У Вас нет денег для того, чтобы их отмыть');
  }
});
let mafiaWarTimeout = null;
mp.events.add('client:mafiaWar:sendInfo', (lme, rm, trd, lcn, timerCounter) => {
  if (mafiaWarTimeout) {
    clearTimeout(mafiaWarTimeout);
    mafiaWarTimeout = null;
  }

  try {
    _ui.ui.showMafiaInfo();

    _ui.ui.updateMafiaInfo(lme, rm, trd, lcn, timerCounter);

    mafiaWarTimeout = setTimeout(function () {
      _ui.ui.hideMafiaInfo();
    }, 3000);
  } catch (e) {
    mp.console.logError(e);

    _ui.ui.hideMafiaInfo();
  }
});
let isZone = false;
let gangWarTimeout = null;
mp.events.add('client:gangWar:sendInfo', (atC, defC, x, y, z, timerCounter) => {
  if (gangWarTimeout) {
    clearTimeout(gangWarTimeout);
    gangWarTimeout = null;
  }

  try {
    const local = mp.players.local;
    let street = mp.game.pathfind.getStreetNameAtCoord(local.position.x, local.position.y, local.position.z, 0, 0).streetName;
    let zone = mp.game.zone.getNameOfZone(local.position.x, local.position.y, local.position.z);
    let street2 = mp.game.pathfind.getStreetNameAtCoord(x, y, z, 0, 0).streetName;
    let zone2 = mp.game.zone.getNameOfZone(x, y, z);

    if (street2 == street && zone2 == zone) {
      if (!isZone) _user.user.setData('isGangZone', true);
      isZone = true;

      _ui.ui.showGangInfo();

      _ui.ui.updateGangInfo(atC, defC, timerCounter);

      gangWarTimeout = setTimeout(function () {
        _ui.ui.hideGangInfo();

        _user.user.resetData('isGangZone');

        isZone = false;
      }, 3000);
    } else {
      if (isZone) _user.user.resetData('isGangZone');
      isZone = false;

      _ui.ui.hideGangInfo();
    }
  } catch (e) {
    mp.console.logError(e);

    _ui.ui.hideGangInfo();
  }
});
mp.events.add('client:inv:updateItems', (ownerId, ownerType) => {
  ownerId = _methods.methods.parseInt(ownerId);
  ownerType = _methods.methods.parseInt(ownerType);

  if (ownerType == 0) {
    if (!mp.players.local.isSittingInAnyVehicle()) {
      _inventory.inventory.getItemListInRadius(mp.players.local.position);
    } else {
      mp.game.ui.notifications.show(`~r~Вы находитесь в транспорте`);
    }
  } else if (ownerType == 8) _menuList.menuList.showInvVehBagMenu(_methods.methods.getNearestVehicleWithCoords(mp.players.local.position, 5.0));else if (ownerType == 1 && ownerId == 0) _inventory.inventory.getItemList(1, _user.user.get('id'));else _inventory.inventory.getItemList(ownerType, ownerId);
});
mp.events.add('client:inv:hide', () => {
  _inventory.inventory.hide();
});
mp.events.add('client:inv:doItem', async (doName, ownerId, ownerType, id, itemId, number, prefix, countItems, keyId) => {
  if (_user.user.isDead()) {
    mp.game.ui.notifications.show(`~r~Вы мертвы`);
    return;
  }

  ownerId = _methods.methods.parseInt(ownerId);
  ownerType = _methods.methods.parseInt(ownerType);
  id = _methods.methods.parseInt(id);
  itemId = _methods.methods.parseInt(itemId);
  number = _methods.methods.parseInt(number);
  prefix = _methods.methods.parseInt(prefix);
  countItems = _methods.methods.parseInt(countItems);
  keyId = _methods.methods.parseInt(keyId);

  if (doName === 'useEquipItemButton') {
    _inventory.inventory.useItem(id, itemId);
  } else if (doName === 'equipItemButton') {
    _inventory.inventory.equipItem(id, itemId, prefix, number, keyId, countItems);
  } else if (doName === 'takeOneGrammPlayerItemButton') {
    _inventory.inventory.takeDrugItem(id, itemId, countItems);
  } else if (doName === 'takeOneItemPlayerItemButton') {
    _inventory.inventory.takeCountItem(id, itemId, countItems);
  } else if (doName === 'takeTenGrammPlayerItemButton') {
    _inventory.inventory.takeDrugItem(id, itemId, countItems, true, 10);
  } else if (doName === 'takeFiftyGrammPlayerItemButton') {
    _inventory.inventory.takeDrugItem(id, itemId, countItems, true, 50);
  } else if (doName === 'weighPlayerItemButton') {
    _chat.chat.sendMeCommand('взвесил');

    mp.game.ui.notifications.show(`~g~В пачке ${countItems}гр.`);
  } else if (doName === 'countPlayerItemButton') {
    _chat.chat.sendMeCommand('считает');

    mp.game.ui.notifications.show(`~g~В пачке ${countItems}шт.`);
  } else if (doName === 'upNearest10') {
    mp.events.callRemote('upNearest10', false);
  } else if (doName === 'upNearest100') {
    mp.events.callRemote('upNearest100', false);
  } else if (doName === 'upNearestPay10') {
    mp.events.callRemote('upNearest10', true);
  } else if (doName === 'upNearestPay100') {
    mp.events.callRemote('upNearest100', true);
  } else if (doName === 'healNearest') {
    mp.events.callRemote('healNearest', false);
  } else if (doName === 'healNearestPay') {
    mp.events.callRemote('healNearest', true);
  } else if (doName === 'bankcardreward') {
    mp.events.callRemote('bankcardreward', id);
  } else if (doName === 'usePlayerItemButton') {
    if (itemId == 279) {
      mp.events.callRemote("skate");
    } else {
      _inventory.inventory.useItem(id, itemId);
    }
  } else if (doName === 'countMoneyPlayerItemButton') {
    _chat.chat.sendMeCommand('считает наличку');

    mp.game.ui.notifications.show(`~g~В пачке $${_methods.methods.numberFormat(countItems)}`);
  } else if (doName === 'countBulletsPlayerItemButton') {
    _chat.chat.sendMeCommand('считает патроны');

    mp.game.ui.notifications.show(`~g~В коробке ${_methods.methods.numberFormat(countItems)}пт.`);
  } else if (doName === 'transferToSapdStockPlayerItemButton') {} else if (doName === 'transferToFridgePlayerItemButton') {
    _inventory.inventory.dropItemToFridge(id, itemId, mp.players.local.dimension);
  } else if (doName === 'transferToStockGosItemButton') {
    let money = 0;
    if (itemId == 88) money = 10000;
    if (itemId == 95) money = 20000;
    if (itemId == 100) money = 20000;
    if (itemId >= 171 && itemId <= 180) money = 50;
    if (itemId >= 154 && itemId <= 157) money = 50;
    if (itemId == 262) money = 50;

    if (money > 0) {
      _user.user.addMoney(money);

      mp.game.ui.notifications.show(`~g~Вы получили премию: $${money}`);
    }

    _inventory.inventory.deleteItemServer(id);
  } else if (doName === 'skate') {
    mp.events.callRemote("skate");
  } else if (doName === 'throwToGroundPlayerItemButton') {
    let hash = items.getItemHashById(itemId);

    if (_methods.methods.isPlayerInOcean()) {
      _inventory.inventory.deleteItemServer(id);

      mp.game.ui.notifications.show(`~g~Предмет был выброшен в океан`);
      return;
    }

    _inventory.inventory.dropItem(id, itemId, mp.players.local.position, new mp.Vector3(0.0, 0.0, 0.0), hash, _inventory.inventory.types.World, 0);
  } else if (doName === 'takeItemButton') {
    _inventory.inventory.takeItem(id, itemId, ownerType);
  } else if (doName == 'infoLotoItemButton') {
    mp.game.ui.notifications.show(`~g~Номер билета: ~s~${number}`);
    mp.game.ui.notifications.show(`~g~Розыгрыш: ~s~$${_methods.methods.numberFormat(prefix)}`);
    if (keyId == 1) mp.game.ui.notifications.show(`~g~Статус: ~s~Победитель`);else if (keyId == 0) mp.game.ui.notifications.show(`~g~Статус: ~s~Ожидание розыгрыша`);else if (keyId == -1) mp.game.ui.notifications.show(`~g~Статус: ~s~Проигрыш`);
  }

  if (doName != 'transferPlayerItemButton' && doName != 'transferToStockPlayerItemButton') {
    setTimeout(function () {
      if (_inventory.inventory.isHide()) return;
      if (ownerType == 0) _inventory.inventory.getItemListInRadius(mp.players.local.position);else if (ownerType == 8) _menuList.menuList.showInvVehBagMenu(_methods.methods.getNearestVehicleWithCoords(mp.players.local.position, 5.0));else _inventory.inventory.getItemList(ownerType, ownerId);
    }, 1000);
  }
});
mp.events.add('client:inv:openPhone', () => {
  _inventory.inventory.hide();

  _menuList.menuList.showPlayerPhoneMenu();
});
mp.events.add('client:inv:doItemUnEquip', itemId => {
  if (_user.user.isDead()) {
    mp.game.ui.notifications.show(`~r~Вы мертвы`);
    return;
  }

  if (items.isWeapon(itemId)) return mp.events.callRemote('inventory:unequipgun', itemId);

  _inventory.inventory.unEquipItem(_methods.methods.parseInt(itemId));
});
mp.events.add('client:phone:contInfo', id => {
  _methods.methods.debug('Execute: client:phone:contInfo ' + id);

  _phone.phone.contInfo(id);
});
mp.events.add('client:phone:smsInfo', id => {
  _phone.phone.smsInfo(id);
});
mp.events.add('client:phone:newSms', () => {
  _phone.phone.newSms();
});
mp.events.add('client:phone:newCont', () => {
  _phone.phone.newCont();
});
mp.events.add('client:phone:newSmsWithNum', number => {
  _phone.phone.newSmsWithNumber(number);
});
mp.events.add('client:phone:callwithnum', number => {
  if (mp.players.local.getVariable('call')) return;

  _phone.phone.callWithNumber(number);
});
mp.events.add('client:phone:cancelCall', () => {
  if (!mp.players.local.getVariable('call')) return;

  _phone.phone.cancelCall();
});
mp.events.add('client:phone:readSms', text => {
  _phone.phone.readSms(text);
});
mp.events.add('client:phone:delSms', id => {
  _phone.phone.delSms(id);
});
mp.events.add('client:phone:delCont', id => {
  _phone.phone.delCont(id);
});
mp.events.add('client:phone:renCont', id => {
  _phone.phone.renCont(id);
});
mp.events.add('client:phone:showSmsList', () => {
  _phone.phone.showSmsList();
});
mp.events.add('client:phone:showContList', () => {
  _phone.phone.showContList();
});
mp.events.add('client:phone:enableRadio', () => {
  _phone.phone.enableRadio();
});
mp.events.add('client:phone:disableRadio', () => {
  _phone.phone.disableRadio();
});
mp.events.add('client:phone:arcadiusMenu', () => {
  _phone.phone.arcadiusMenu();
});
mp.events.add('client:phone:misterk1', () => {
  _phone.phone.misterk1();
});
mp.events.add('client:phone:misterk2', () => {
  _phone.phone.misterk2();
});
mp.events.add('client:phone:9111', () => {
  _phone.phone.call911(1);
});
mp.events.add('client:phone:9112', () => {
  _phone.phone.call911(2);
});
mp.events.add('client:phone:9113', () => {
  _phone.phone.call911(3);
});
mp.events.add('client:phone:getTaxi', type => {
  _phone.phone.getTaxi(type);
});
mp.events.add('client:phone:getTaxi2', type => {
  _phone.phone.getTaxi(type);
});
mp.events.add('client:phone:invaderLoto', () => {
  _phone.phone.invaderLoto();
});
mp.events.add('client:phone:invaderAd', dix => {
  _phone.phone.invaderAd(dix);
});
mp.events.add('client:phone:setWaypoint', (x, y) => {
  _user.user.setWaypoint(x, y);
});
mp.events.add('client:phone:bankMenu', () => {
  _phone.phone.showBankMenu();
});
mp.events.add('client:phone:transferBank', () => {
  _phone.phone.transferBank();
});
mp.events.add('client:phone:payTaxByNumber', async () => {
  let number = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Счёт', '', 10));

  if (number == 0) return;

  let sum = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма', '', 9));

  if (sum == 0) return;
  mp.events.callRemote('server:tax:payTax', 1, number, sum);
});
mp.events.add('client:phone:addNewSms', (numberFrom, text) => {
  _phone.phone.addNewSms(numberFrom, text);
});
mp.events.add('client:phone:sendToPlayerSmsListMenu', (data, number) => {
  _menuList.menuList.showPlayerPhoneSmsMenu(data, number);
});
mp.events.add('client:phone:sendToPlayerSmsInfoMenu', (id, numberFrom, numberTo, text, dateTime) => {
  _menuList.menuList.showPlayerPhoneSmsInfoMenu(id, numberFrom, numberTo, text, dateTime);
});
mp.events.add('client:phone:sendToPlayerContactListMenu', data => {
  _menuList.menuList.showPlayerPhoneBookMenu(data);
});
mp.events.add('client:phone:sendToPlayerContInfoMenu', (id, title, number) => {
  _menuList.menuList.showPlayerPhoneContInfoMenu(id, title, number);
});
mp.events.add('client:phone:show', function () {
  let data = {
    type: 'showPhone'
  };

  _phone.phone.phoneShowSet(true);

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:hide', function () {
  let data = {
    type: 'hidePhone'
  };

  _phone.phone.phoneShowSet(false);

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:addSmsList', function (list) {
  let data = {
    type: 'addSmsList',
    list: list
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:addContList', function (list) {
  let data = {
    type: 'addContList',
    list: list
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:showSmsItem', function (item) {
  let data = {
    type: 'showSmsItem',
    item: item
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:showContItem', function (item) {
  let data = {
    type: 'showContItem',
    item: item
  };

  _methods.methods.debug('Execute: client:phone:showContItem');

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:addConsoleMessage', function (msg) {
  let data = {
    type: 'addConsoleMessageEvent',
    msg: msg
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:debug', function (msg) {
  _methods.methods.debug(msg);
});
mp.events.add('client:phone:updateValues', function (udayName, udate, utime, utemp, ucode, ubprefix, unetwork) {
  let data = {
    type: 'updateValues',
    dayname: udayName,
    date: _weather.weather.getMonthYearDate(),
    time: utime,
    temp: utemp,
    code: ucode,
    bprefix: ubprefix,
    network: unetwork
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:showBankMenu', function (money, number) {
  let data = {
    type: 'showBankMenu',
    money: money,
    number: number
  };

  _phone.phone.browser.execute(`eventSend(${JSON.stringify(data)});`);
});
mp.events.add('client:phone:showBrowser', function () {
  _phone.phone.showBrowser();
});
mp.events.add('client:taskRemoveMask', function () {
  if (_user.user.get('mask') > 0) _inventory.inventory.unEquipItem(274);
});
mp.events.add('playerRuleTriggered', (rule, counter) => {
  if (rule === 'ping' && counter > 5) {
    _user.user.kick('Ваш пинг слишком большой');
  }
});
mp.events.add('client:uimenu:hide', () => {
  _ui.ui.hideMenu();
});
mp.events.add('client:uimenu:trigger', async action => {
  if (action == 'donate') {
    mp.gui.chat.push(`!{03A9F4}Донат`);
    mp.gui.chat.push(`О всех услугах доната вы можете узнать в личном кабинете на сайте !{ef9a9a}gta-5.ru`);
  } else if (action == 'settings') {
    _menuList.menuList.showSettingsMenu();
  } else if (action == 'gps') {
    _menuList.menuList.showGpsMenu();
  } else if (action == 'faq') {
    _phone.phone.showFaqBrowser();
  } else if (action == 'lockV') {
    if (!_methods.methods.isBlockKeys()) mp.events.callRemote('onKeyPress:L');
  } else if (action == 'ask') {
    let text = await _menu.default.Menu.GetUserInput('Задайте вопрос', '', 300);
    if (text != '') mp.events.callRemote('server:sendAsk', text);
  } else if (action == 'report') {
    let text = await _menu.default.Menu.GetUserInput('Опишите жалобу', '', 300);
    if (text != '') mp.events.callRemote('server:sendReport', text);
  } else if (action == 'uncuff') {
    mp.events.callRemote('server:unCuffNearst');
  } else if (action == 'cuff') {
    if (_user.user.get('jail_time') > 0 || _user.user.get('med_time') > 0) {
      mp.game.ui.notifications.show('~r~Данное действие сейчас запрещено');
      return;
    }

    mp.events.callRemote('server:cuffNearst');

    if (_user.user.get('jail_time') > 0 || _user.user.get('med_time') > 0) {
      mp.game.ui.notifications.show('~r~Данное действие сейчас запрещено');
      return;
    }
  } else if (action == 'inCar') {
    mp.events.callRemote('server:inCarNearst');
  } else if (action == 'outCar') {
    mp.events.callRemote('server:removeFromCar');
  } else if (action == 'takeGun') {
    if (_user.user.get('jail_time') > 0 || _user.user.get('med_time') > 0) {
      mp.game.ui.notifications.show('~r~Данное действие сейчас запрещено');
      return;
    }

    mp.events.callRemote('server:removeAllWeaponsNearst');
  } else if (action == 'takeMask') {
    if (_user.user.get('jail_time') > 0 || _user.user.get('med_time') > 0) {
      mp.game.ui.notifications.show('~r~Данное действие сейчас запрещено');
      return;
    }

    mp.events.callRemote('server:taskRemoveMask');
  } else if (action == 'followUs') {
    if (_user.user.get('jail_time') > 0 || _user.user.get('med_time') > 0) {
      mp.game.ui.notifications.show('~r~Данное действие сейчас запрещено');
      return;
    }

    mp.events.callRemote('server:taskFollow');
  } else if (action == 'leftIndicator') {
    if (mp.players.local.vehicle) {
      let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');

      _vehicles.vehicles.setIndicatorLeftState(!actualData.IndicatorLeftToggle);

      _vehicles.vehicles.setIndicatorRightState(false);
    } else {
      mp.game.ui.notifications.show('~r~Вы должны находиться в транспорте');
    }
  } else if (action == 'rightIndicator') {
    if (mp.players.local.vehicle) {
      let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');

      _vehicles.vehicles.setIndicatorRightState(!actualData.IndicatorRightToggle);

      _vehicles.vehicles.setIndicatorLeftState(false);
    } else {
      mp.game.ui.notifications.show('~r~Вы должны находиться в транспорте');
    }
  } else if (action == 'twoIndicator') {
    if (mp.players.local.vehicle) {
      let actualData = mp.players.local.vehicle.getVariable('vehicleSyncData');
      let enable = !actualData.IndicatorRightToggle && !actualData.IndicatorLeftToggle;

      _vehicles.vehicles.setIndicatorLeftState(enable);

      _vehicles.vehicles.setIndicatorRightState(enable);
    } else {
      mp.game.ui.notifications.show('~r~Вы должны находиться в транспорте');
    }
  } else if (action == 'giveMoney' || action == 'friend') {
    let list = [];
    mp.players.forEachInRange(mp.players.local.position, 2, nplayer => {
      if (mp.players.local !== nplayer) {
        if (list.length > 7) return;
        let nid = nplayer.getVariable('id');
        list.push({
          id: `${action}_${nplayer.remoteId}`,
          title: `ID ${_user.user.getShowingIdString(nplayer)}`
        });
      }
    });
    if (list.length == 0) mp.game.ui.notifications.show('~r~Рядом с вами никого нет');

    _ui.ui.showMenuIds(list);
  } else if (action == 'showGosDoc' || action == 'showCardId' || action == 'showLic') {
    if (!_user.user.isGos() && action == 'showGosDoc') {
      mp.game.ui.notifications.show('~r~Вы не состоите в гос. организации');
      return;
    }

    let list = [];
    mp.players.forEachInRange(mp.players.local.position, 2, nplayer => {
      if (list.length > 7) return;
      let nid = nplayer.getVariable('id');
      list.push({
        id: `${action}_${nplayer.remoteId}`,
        title: `ID ${_user.user.getShowingIdString(nplayer)}`
      });
    });
    if (list.length == 0) mp.game.ui.notifications.show('~r~Рядом с вами никого нет');

    _ui.ui.showMenuIds(list);
  } else if (action == 'animDoPlayer') {
    let list = [];
    mp.players.forEachInRange(mp.players.local.position, 2, nplayer => {
      if (mp.players.local !== nplayer) {
        if (list.length > 7) return;
        let nid = nplayer.getVariable('id');
        list.push({
          id: `${action}_${nid}`,
          title: `ID ${_user.user.getShowingIdString(nplayer)}`
        });
      }
    });
    if (list.length == 0) mp.game.ui.notifications.show('~r~Рядом с вами никого нет');

    _ui.ui.showMenuIds(list);
  } else if (action == 'animStop') {
    _user.user.stopAllAnimation();
  } else if (action == 'animAll') {
    _menuList.menuList.showAnimationTypeListMenu();
  } else if (action == 'animDance1') {
    _user.user.playAnimation('misschinese2_crystalmazemcs1_ig', 'dance_loop_tao', 9);
  } else if (action == 'animDance2') {
    _user.user.playAnimation('mini@strip_club@lap_dance_2g@ld_2g_p2', 'ld_2g_p2_s1', 9);
  } else if (action == 'animDance3') {
    _user.user.playAnimation('mini@strip_club@lap_dance_2g@ld_2g_p3', 'ld_2g_p3_s2', 9);
  } else if (action == 'animDance4') {
    _user.user.playAnimation('amb@world_human_partying@female@partying_beer@idle_a', 'idle_b', 9);
  } else if (action == 'animDance5') {
    _user.user.playAnimation('amb@world_human_prostitute@cokehead@idle_a', 'idle_a', 9);
  } else if (action == 'animDance6') {
    _user.user.playAnimation('amb@world_human_prostitute@cokehead@idle_a', 'idle_c', 9);
  } else if (action == 'animDance7') {
    _user.user.playAnimation('amb@world_human_jog_standing@female@base', 'base', 9);
  } else if (action == 'animDance8') {
    _user.user.playAnimation('timetable@tracy@ig_8@idle_a', 'idle_a', 9);
  } else if (action == 'animEmoji1') {
    _user.user.playAnimation('missmic_4premiere', 'movie_prem_01_f_a', 8);
  } else if (action == 'animEmoji2') {
    _user.user.playAnimation('amb@world_human_cheering@female_a', 'base', 8);
  } else if (action == 'animEmoji3') {
    _user.user.playAnimation('anim@mp_player_intcelebrationfemale@bro_love', 'bro_love', 8);
  } else if (action == 'animEmoji4') {
    _user.user.playAnimation('mini@dartsoutro', 'darts_outro_03_guy1', 8);
  } else if (action == 'animEmoji5') {
    _user.user.playAnimation('anim@mp_player_intcelebrationfemale@you_loco', 'you_loco', 8);
  } else if (action == 'animPose1') {
    _user.user.playAnimation('missmic4premiere', 'wave_b', 8);
  } else if (action == 'animPose2') {
    _user.user.playAnimation('amb@code_human_police_investigate@base', 'base', 9);
  } else if (action == 'animPose3') {
    _user.user.playAnimation('missfbi4mcs_2', 'loop_sec_b', 9);
  } else if (action == 'animPose4') {
    _user.user.playAnimation('amb@world_human_muscle_flex@arms_at_side@idle_a', 'idle_a', 8);
  } else if (action == 'animPose5') {
    _user.user.playAnimation('amb@world_human_bum_slumped@male@laying_on_right_side@base', 'base', 9);
  } else if (action == 'animDo1') {
    _user.user.playAnimation('random@mugging3', 'handsup_standing_base', 49);
  } else if (action == 'animDo2') {
    _user.user.playAnimation('anim@mp_player_intincarsalutestd@ds@', 'idle_a', 49);
  } else if (action == 'animDo3') {
    _user.user.playAnimation('gestures@m@standing@casual', 'gesture_i_will', 8);
  } else if (action == 'animDo4') {
    _user.user.playAnimation('gestures@m@standing@casual', 'gesture_nod_no_hard', 8);
  } else if (action == 'animDo5') {
    _user.user.playAnimation('move_m@intimidation@cop@unarmed', 'idle', 49);
  } else {
    action = action.split('_');

    if (action.length > 1) {
      let id = _methods.methods.parseInt(action[1]);

      let act = action[0];

      if (act == 'giveMoney') {
        let money = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма', '', 9));

        if (money < 1) {
          mp.game.ui.notifications.show('~r~Нельзя передавать меньше 1$');
          return;
        }

        mp.events.callRemote('server:user:giveMoneyToPlayerId', id, money);
      } else if (act == 'friend') {
        let name = '';

        if (_methods.methods.storage.get('dating_nick') == '') {
          let rpName = _methods.methods.storage.get('dating_nick');

          name = await _menu.default.Menu.GetUserInput('Как вы себя представите?', rpName, 30);
        } else {
          let rpName = _user.user.get('rp_name').split(' ');

          name = await _menu.default.Menu.GetUserInput('Как вы себя представите?', rpName[0], 30);
        }

        if (name == '') return;
        name = name.replace(/[^a-zA-Z\s]/gi, '');

        if (name == '' || name == ' ') {
          mp.game.ui.notifications.show('~r~Доступны только английские буквы');
          return;
        }

        _methods.methods.storage.set('dating_nick', name);

        mp.events.callRemote('server:user:askDatingToPlayerId', id, name);
      } else if (act == 'showGosDoc' || act == 'showCardId' || act == 'showLic') {
        _chat.chat.sendMeCommand('показал документы');

        mp.events.callSocket('server:user:' + act, id);
      } else if (act == 'animDoPlayer1') {
        _user.user.playAnimationWithUser(id, 0);
      } else if (act == 'animDoPlayer2') {
        _user.user.playAnimationWithUser(id, 2);
      } else if (act == 'animDoPlayer3') {
        _user.user.playAnimationWithUser(id, 1);
      } else if (act == 'animDoPlayer4') {
        _user.user.playAnimationWithUser(id, 3);
      }
    }
  }

  mp.console.logInfo(action);
});
let taskFollowed = null;
let timerFollowedId = null;
setInterval(() => {
  if (taskFollowed) {
    if (!_user.user.isCuff() || _user.user.isDead()) {
      _user.user.stopAllAnimation();

      taskFollowed = null;
      clearInterval(timerFollowedId);
    }
  }
}, 1000);
mp.events.add('client:taskFollowStop', nplayer => {
  _user.user.stopAllAnimation();

  if (nplayer) mp.game.ui.notifications.show('~g~Вас отпустили');
  if (nplayer) mp.events.callRemote('server:nplayer:notify', nplayer, `~g~Вы отпустили человека (ID: ${_user.user.get('id')})`);
  taskFollowed = null;
  clearInterval(timerFollowedId);
  mp.players.local.clearTasks();
  mp.events.callRemote('server:stopAllAnimation');
  if (_user.user.isCuff()) _user.user.playAnimation('mp_arresting', 'idle', 49);else _playerDisableDefaultControls = false;
});
mp.events.add('client:taskFollow', nplayer => {
  if (!mp.players.exists(nplayer)) return;

  if (!taskFollowed) {
    _playerDisableDefaultControls = true;
    if (_user.user.isCuff()) _user.user.playAnimation('mp_arresting', 'idle', 49);
    mp.game.invoke(_methods.methods.TASK_GO_TO_ENTITY, mp.players.local.handle, nplayer.handle, -1, 10.0, 1073741824.0, 0);
    mp.game.invoke(_methods.methods.SET_PED_KEEP_TASK, mp.players.local.handle, true);
    mp.game.ui.notifications.show('~r~Человек повел вас за собой');
    mp.events.callRemote('server:nplayer:notify', nplayer, `~g~Вы повели человека за собой`);
    taskFollowed = nplayer;
    timerFollowedId = setInterval(function () {
      if (mp.players.local.dimension != taskFollowed.dimension) {
        mp.players.local.clearTasks();
        mp.events.callRemote('server:stopAllAnimation');
        mp.game.ui.notifications.show('~g~Вас отпустили');
        mp.events.callRemote('server:nplayer:notify', nplayer, `~g~Вы отпустили человека`);
        taskFollowed = null;
        clearInterval(timerFollowedId);
        if (_user.user.isCuff()) _user.user.playAnimation('mp_arresting', 'idle', 49);
      }

      if (taskFollowed && _methods.methods.distanceToPos(mp.players.local.position, taskFollowed.position) > 50.0) {
        _user.user.teleport(taskFollowed.position.x, taskFollowed.position.y, taskFollowed.position.z);

        if (_user.user.isCuff()) _user.user.playAnimation('mp_arresting', 'idle', 49);
      }

      if (!mp.players.local.vehicle) {
        mp.game.invoke(_methods.methods.TASK_GO_TO_ENTITY, mp.players.local.handle, taskFollowed.handle, -1, 10.0, 1073741824.0, 0);
        mp.game.invoke(_methods.methods.SET_PED_KEEP_TASK, mp.players.local.handle, true);
      }
    }, 3000);
  } else {
    _user.user.stopAllAnimation();

    if (nplayer) mp.game.ui.notifications.show('~g~Вас отпустили');
    if (nplayer) mp.events.callRemote('server:nplayer:notify', nplayer, `~g~Вы отпустили человека (ID: ${_user.user.get('id')})`);
    taskFollowed = null;
    clearInterval(timerFollowedId);
    if (_user.user.isCuff()) _user.user.playAnimation('mp_arresting', 'idle', 49);else _playerDisableDefaultControls = false;
  }
});
setTimeout(() => {
  mp.events.register("admin:debug:interrior", () => {
    return mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
  });
}, 5000);
mp.events.add('entityStreamIn', player => {
  if (player.type != "player") return;
  if (mp.players.local == player) return;

  if (player.isActiveInScenario() && !player.getVariable('use_scenario')) {
    player.clearTasksImmediately();
  } else if (!player.isActiveInScenario() && player.getVariable('use_scenario')) {
    const [name, x, y, z, h, teleport] = JSON.parse(player.getVariable('use_scenario'));
    mp.events.call('client:syncScenario', player.remoteId, name, x, y, z, h, teleport);
  }
});
setInterval(() => {
  mp.players.forEachInStreamRange(player => {
    if (mp.players.local == player) return;

    if (player.isActiveInScenario() && !player.getVariable('use_scenario')) {
      player.clearTasksImmediately();
    } else if (!player.isActiveInScenario() && player.getVariable('use_scenario')) {
      const [name, x, y, z, h, teleport] = JSON.parse(player.getVariable('use_scenario'));
      mp.events.call('client:syncScenario', player.remoteId, name, x, y, z, h, teleport);
    }
  });
}, 2000);
},{"./data":"Edcz","./menu":"Aiz7","./methods":"qXSp","../managers/weather":"uehX","../managers/checkpoint":"j7m4","../managers/dispatcher":"bsac","./ui":"zOnK","../menuList":"U1Al","../user":"QE3B","../inventory":"m5ow","../enums":"ZRYf","../items_old":"A2KQ","./timer":"BpKR","../phone":"Gt5n","../managers/jail":"MASL","../chat":"MuUD","../vehicles":"pYYy","../jobs/trucker":"kruA","../managers/vSync":"waLt","./gui":"bk91","../../util/methods":"Z5QB","../../util/mask":"ir2T","../ragevoice":"VUJK"}],"Aiz7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _methods = require("./methods");

var _user = require("../user");

var _gui = require("./gui");

var _methods2 = require("../../util/methods");

var _events = require("./events");

var _menu = require("../managers/menu");

let _isShowInput;

let inputGenId = 1;
setInterval(() => {
  if (!_user.user.isLogin()) return;
  if ((_user.user.isCuff() || _user.user.isTie() || _user.user.isDead() || _events._playerDisableAllControls) && Menu.GetCurrentMenu() && !Menu.GetCurrentMenu().workAnyTime) Menu.HideMenu();
}, 100);
let openMenuPosition;

class Menu {
  static getMenuDistance(range = 5, notify = false) {
    let playerPos = mp.players.local.position;
    let check = mp.game.gameplay.getDistanceBetweenCoords(playerPos.x, playerPos.y, playerPos.z, openMenuPosition.x, openMenuPosition.y, openMenuPosition.z, true) <= range;
    if (!check && notify) mp.game.ui.notifications.show('~r~Вы отошли слишком далеко');
    if (!check) this.HideMenu();
    return check;
  }

  static Create(title, subtitle, isResetBackKey, isDisableAllControls, DisableAllControlsOnClose, spriteLib = 'commonmenu', spriteName = 'gradient_bgd', workAnyTime = false) {
    try {
      this.HideMenu();
      if ((_user.user.isCuff() || _user.user.isTie() || _user.user.isDead() || _events._playerDisableAllControls) && !workAnyTime) return;
      let m = new _menu.MenuClass(title, subtitle, [], true);
      m.workAnyTime = workAnyTime;

      if (spriteLib != "commonmenu" || spriteName != "gradient_bgd") {
        m.spriteName = spriteName;
      }

      setTimeout(() => {
        m.open();
      }, 100);

      if (isDisableAllControls) {
        mp.players.local.freezePosition(true);

        _methods.methods.disableAllControls(true);
      }

      mp.events.triggerBrowser('cef:hud:disableHud', true);
      openMenuPosition = mp.players.local.position;
      m.MenuClose.on(() => {
        mp.players.local.freezePosition(false);

        _methods.methods.disableAllControls(false);

        mp.events.triggerBrowser('cef:hud:disableHud', false);
      });
      return m;
    } catch (e) {
      mp.console.logError(e);
    }
  }

  static GetCurrentMenu() {
    return _menu.currentMenu;
  }

  static IsShowInput() {
    return _isShowInput || mp.gui.chat.enabled;
  }

  static GetUserInput(title, defaultText, maxInputLength = 20, type = null) {
    return new Promise(async resolve => {
      if (_menu.currentMenu) _menu.currentMenu.onclose = null;
      this.HideMenu();

      while (mp.game.controls.isControlPressed(0, 176)) await (0, _methods2.wait)(1);

      _user.user.setVariable('isTyping', true);

      mp.events.triggerBrowser('cef:chat:can_activate', false);

      if (type == null && maxInputLength >= 50) {
        type = "textarea";
      }

      if (type == null) type = "text";
      const id = inputGenId++;
      answers.set(id, resolve);
      _isShowInput = true;
      mp.gui.chat.activate(false);
      await _methods.methods.sleep(100);

      _gui.gui.setGui('dialog');

      await _methods.methods.sleep(100);
      mp.events.triggerBrowser('cef:dialog:init', 0, id, title, " ", type, "Отмена", "Отправить", defaultText, true, maxInputLength);
    });
  }

  static HideMenu() {
    if (_menu.currentMenu) _menu.currentMenu.close();
  }

}

let answers = new Map();
mp.events.add(`client:dialog:submit`, (id, value) => {
  mp.console.logInfo("ANSWER");
  inputGenId++;
  _isShowInput = false;

  _user.user.setVariable('isTyping', false);

  _gui.gui.setGui(null);

  mp.events.triggerBrowser('cef:chat:can_activate', true);
  answers.get(id)(value);
  answers.delete(id);
});
mp.events.add(`dialog:stop`, (id, value) => {
  inputGenId++;
  _isShowInput = false;

  _user.user.setVariable('isTyping', false);

  _gui.gui.setGui(null);

  mp.events.triggerBrowser('cef:chat:can_activate', true);
});
mp.events.add('render', () => {
  if (_menu.currentMenu) {
    mp.game.controls.disableControlAction(2, 200, true);
  }
});
setTimeout(() => {
  mp.events.register("server:input", (title, value, limit) => {
    return new Promise(async resolve => {
      resolve(await Menu.GetUserInput(title, value, limit));
    });
  });
}, 100);
let serverEventClose = false;
mp.events.add('server:menu:close', () => {
  serverEventClose = true;
  Menu.HideMenu();
  serverEventClose = false;
});
let longMenuData;
var _default = {
  Menu
};
exports.default = _default;
},{"./methods":"qXSp","../user":"QE3B","./gui":"bk91","../../util/methods":"Z5QB","./events":"d3wo","../managers/menu":"BkU5"}],"m5ow":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inventory = void 0;

var _menu = _interopRequireDefault(require("./modules/menu"));

var _methods = require("./modules/methods");

var _data = require("./modules/data");

var _chat = require("./chat");

var _items_old = require("./items_old");

var _user = require("./user");

var _stock = require("./stock");

var _weapons = require("./weapons");

var _enums = require("./enums");

var _cloth = require("./business/cloth");

var _gui = require("./modules/gui");

var _sharedData = require("../util/sharedData");

var _inventory = require("../util/inventory");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let hidden = true;
setInterval(() => {
  if (!inventory.isHide() && (_menu.default.Menu.IsShowInput() || _user.user.isCuff() || _user.user.isTie() || _user.user.isDead() || _menu.default.Menu.GetCurrentMenu())) inventory.hide();
}, 500);
mp.events.add("inventory:open:data", datas => {
  if (_gui.gui.currentGui != null && _gui.gui.currentGui != "inventory") return;
  let blocks = JSON.parse(datas);
  blocks.forEach(item => {
    inventory.currentAmounts.set(item.owner_type + "_" + item.owner_id, item.weight);
    inventory.maxAmounts.set(item.owner_type + "_" + item.owner_id, item.weight_max);
  });

  _gui.gui.setGui(`inventory`);

  setTimeout(() => {
    mp.events.triggerBrowser("inventory:open", _user.user.get('id'), blocks, inventory.updateEquip(), inventory.updateEquipWeapon(), _user.user.getPlayerFraction());
  }, 100);
});
const inventory = {
  currentAmounts: new Map(),
  maxAmounts: new Map(),
  browser: null,
  currentItem: -1,
  hidden: true,
  currentAmount: (type, id) => {
    if (inventory.currentAmounts.has(type + "_" + id)) return inventory.currentAmounts.get(type + "_" + id);
    return 0;
  },
  maxAmount: (type, id) => {
    if (inventory.maxAmounts.has(type + "_" + id)) return inventory.maxAmounts.get(type + "_" + id);
    return 0;
  },
  open: (ownerType, ownerId) => {
    if (_gui.gui.currentGui != null && _gui.gui.currentGui != "inventory") return;
    mp.events.callSocket("inventory:open");
  },
  show: async () => {},
  hide: () => {
    _gui.gui.setGui(null);

    mp.events.triggerServer('inventory:close');
  },
  isHide: () => {
    return _gui.gui.currentGui != "inventory";
  },
  updateEquip: () => {
    let data = {
      phone: _user.user.get('phone_code') > 0,
      bankcard: _user.user.get('bank_prefix') > 0,
      clock: _user.user.get('item_clock'),
      bracelet: _user.user.get('bracelet') >= 0,
      watch: _user.user.get('watch') >= 0,
      ear: _user.user.get('ear') >= 0,
      glasses: _user.user.get('glasses') >= 0,
      hat: _user.user.get('hat') >= 0,
      accessorie: _user.user.get('accessorie') > 0,
      foot: _user.user.getSex() == 0 ? _user.user.get('foot') != 34 : _user.user.get('foot') != 35,
      leg: _user.user.getSex() == 0 ? _user.user.get('leg') != 61 : _user.user.get('leg') != 15,
      torso: _user.user.get('torso') != 15,
      mask: _user.user.get('mask') != 0,
      tablet: !!_user.user.get('tablet_equip')
    };
    return data;
  },
  updateEquipWeapon: () => {
    let data = [];

    for (let n = 54; n < 138; n++) {
      _weapons.weapons.hashesMap.forEach(item => {
        if (item[0] !== _items_old.items_old.getItemNameHashById(n)) return;
        let hash = item[1] / 2;
        if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) return;
        let ammoItem = inventory.ammoTypeToAmmo(mp.game.invoke(_methods.methods.GET_PED_AMMO_TYPE_FROM_WEAPON, mp.players.local.handle, hash));
        let ammoCount = mp.game.invoke(_methods.methods.GET_AMMO_IN_PED_WEAPON, mp.players.local.handle, hash);
        data.push([0, n, ammoItem, ammoCount, 0, 0, 0]);
      });
    }

    return data;
  },
  addWeaponItem: (label, itemId, ammoItem, ammoCount) => {
    let data = {
      type: 'addWeaponItem',
      label: label,
      itemId: itemId,
      ammoItem: ammoItem,
      ammoCount: ammoCount
    };
    if (inventory.browser) inventory.browser.execute(`eventSend(${JSON.stringify(data)});`);
  },
  updateInfo: (name, age, month) => {
    let data = {
      type: 'updateInfo',
      name: name,
      age: age,
      month: month
    };
    if (inventory.browser) inventory.browser.execute(`eventSend(${JSON.stringify(data)});`);
  },
  updateLabel: (text = 'Инвентарь') => {
    let data = {
      type: 'updateLabel',
      text: text
    };
    if (inventory.browser) inventory.browser.execute(`eventSend(${JSON.stringify(data)});`);
  },
  clearItems: () => {
    let data = {
      type: 'clearItems'
    };
    if (inventory.browser) inventory.browser.execute(`eventSend(${JSON.stringify(data)});`);
  },
  clearWeapons: () => {
    let data = {
      type: 'clearWeapons'
    };
    if (inventory.browser) inventory.browser.execute(`eventSend(${JSON.stringify(data)});`);
  },
  closeItemMenu: id => {
    if (id != inventory.currentItem) return;

    _menu.default.Menu.HideMenu();

    inventory.currentItem = -1;
  },
  equipCloth: (id, itemId, prefix, number, keyId, countItems = 1) => {
    if (prefix != _user.user.getSex()) {
      if (prefix == 1) mp.game.ui.notifications.show('~r~Вы не можете на себя надеть женскую одежду');else mp.game.ui.notifications.show('~r~Вы не можете на себя надеть мужскую одежду');
      return;
    }

    let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

    _cloth.cloth.buy(10, clothList[keyId][1], clothList[keyId][2], number, clothList[keyId][4], clothList[keyId][5], clothList[keyId][6], clothList[keyId][7], 0, true);

    _user.user.updateCharacterCloth();

    inventory.deleteItemServer(id);

    if (countItems > 1) {
      let printList = _enums.enums.get('printList');

      for (let pr = 0; pr < printList.length; pr++) {
        if (_user.user.getSex() == 1 && pr == countItems - 10) {
          _user.user.setData('tprint_o', printList[pr][2]);

          _user.user.setData('tprint_c', printList[pr][0]);
        } else if (_user.user.getSex() == 0 && pr == countItems - 10) {
          _user.user.setData('tprint_o', printList[pr][1]);

          _user.user.setData('tprint_c', printList[pr][0]);
        }
      }

      _user.user.updateTattoo();
    }

    _user.user.updateCache().then();
  },
  equipProp: (id, itemId, prefix, number, keyId) => {
    if (prefix != _user.user.getSex()) {
      if (prefix == 1) mp.game.ui.notifications.show('~r~Вы не можете на себя надеть женскую одежду');else mp.game.ui.notifications.show('~r~Вы не можете на себя надеть мужскую одежду');
      return;
    }

    let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

    _cloth.cloth.buyProp(10, clothList[keyId][1], clothList[keyId][2], number, 0, true);

    _user.user.updateCharacterCloth();

    inventory.deleteItemServer(id);

    _user.user.updateCache().then();
  },
  equipItem: (id, itemId, prefix, number, keyId, countItems) => {
    _methods.methods.debug('Execute: inventory.equipItem');

    mp.events.callSocket('server:inventory:closeItemMenu', id);
    mp.events.callSocket("equipItemCheck", id, itemId, prefix, number, keyId, countItems);
  },
  unEquipItem: async (itemId, countItems = 0, type = 1, toId = 0, isAmoutCheck = true) => {
    let user_id = _user.user.get('id');

    if (isAmoutCheck) {
      let amount = await inventory.getInvAmount(user_id, inventory.types.Player);

      if (_items_old.items_old.getItemAmountById(itemId) + amount > inventory.maxAmount(1, _user.user.get('id'))) {
        mp.game.ui.notifications.show('~r~Инвентарь заполнен');
        inventory.open();
        return;
      }
    }

    if (_user.user.isDead()) return mp.game.ui.notifications.show('~r~Вы в коме'), inventory.hide();

    switch (itemId) {
      case 282:
        mp.events.callSocket('tablet:unequip');
        break;

      case 265:
        let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

        for (let i = 0; i < clothList.length; i++) {
          if (clothList[i][1] != 11) continue;
          if (clothList[i][2] != _user.user.get('body')) continue;

          if (_user.user.get('tprint_o') != '') {
            let userPrint = _user.user.get('tprint_o');

            let printList = _enums.enums.get('printList');

            for (let pr = 0; pr < printList.length; pr++) {
              if (_user.user.getSex() == 1 && printList[pr][2] == userPrint) {
                _user.user.setData('tprint_o', '');

                _user.user.setData('tprint_c', '');

                inventory.addItemServer(265, 1, inventory.types.Player, user_id, pr + 10, _user.user.getSex(), _user.user.get('body_color'), i);
              } else if (_user.user.getSex() == 0 && printList[pr][1] == userPrint) {
                _user.user.setData('tprint_o', '');

                _user.user.setData('tprint_c', '');

                inventory.addItemServer(265, 1, inventory.types.Player, user_id, pr + 10, _user.user.getSex(), _user.user.get('body_color'), i);
              }
            }
          } else {
            inventory.addItemServer(265, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('body_color'), i);
          }

          if (_user.user.getSex() == 0) {
            _user.user.setData('torso', 15);

            _user.user.setData('torso_color', 0);

            _user.user.setData('body', 0);

            _user.user.setData('body_color', 240);

            _user.user.setData('parachute', 0);

            _user.user.setData('parachute_color', 240);

            _user.user.setData('decal', 0);

            _user.user.setData('decal_color', 0);

            _user.user.updateCharacterCloth();
          } else {
            _user.user.setData('torso', 15);

            _user.user.setData('torso_color', 0);

            _user.user.setData('body', 15);

            _user.user.setData('body_color', 0);

            _user.user.setData('parachute', 0);

            _user.user.setData('parachute_color', 240);

            _user.user.setData('decal', 0);

            _user.user.setData('decal_color', 0);

            _user.user.updateCharacterCloth();
          }

          _user.user.updateCache().then();
        }

        break;

      case 266:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 4) continue;
            if (clothList[i][2] != _user.user.get('leg')) continue;
            if (_user.user.getSex() == 0 && _user.user.get('leg') == 61) continue;
            if (_user.user.getSex() == 1 && _user.user.get('leg') == 15) continue;
            inventory.addItemServer(266, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('leg_color'), i);

            if (_user.user.getSex() == 0) {
              _user.user.setData('leg', 61);

              _user.user.setData('leg_color', 13);

              _user.user.updateCharacterCloth();
            } else {
              _user.user.setData('leg', 15);

              _user.user.setData('leg_color', 0);

              _user.user.updateCharacterCloth();
            }

            _user.user.updateCache().then();
          }

          break;
        }

      case 267:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 6) continue;
            if (clothList[i][2] != _user.user.get('foot')) continue;
            inventory.addItemServer(267, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('foot_color'), i);

            if (_user.user.getSex() == 0) {
              _user.user.setData('foot', 34);

              _user.user.setData('foot_color', 0);

              _user.user.updateCharacterCloth();
            } else {
              _user.user.setData('foot', 35);

              _user.user.setData('foot_color', 0);

              _user.user.updateCharacterCloth();
            }

            _user.user.updateCache().then();
          }

          break;
        }

      case 268:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('clothF') : _enums.enums.get('clothM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 7) continue;
            if (clothList[i][2] != _user.user.get('accessorie')) continue;
            inventory.addItemServer(268, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('accessorie_color'), i);

            _user.user.setData('accessorie', 0);

            _user.user.setData('accessorie_color', 0);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 269:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 0) continue;
            if (clothList[i][2] != _user.user.get('hat')) continue;
            inventory.addItemServer(269, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('hat_color'), i);

            _user.user.setData('hat', -1);

            _user.user.setData('hat_color', -1);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 270:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 1) continue;
            if (clothList[i][2] != _user.user.get('glasses')) continue;
            inventory.addItemServer(270, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('glasses_color'), i);

            _user.user.setData('glasses', -1);

            _user.user.setData('glasses_color', -1);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 271:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 2) continue;
            if (clothList[i][2] != _user.user.get('ear')) continue;
            inventory.addItemServer(271, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('ear_color'), i);

            _user.user.setData('ear', -1);

            _user.user.setData('ear_color', -1);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 272:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 6) continue;
            if (clothList[i][2] != _user.user.get('watch')) continue;
            inventory.addItemServer(272, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('watch_color'), i);

            _user.user.setData('watch', -1);

            _user.user.setData('watch_color', -1);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 273:
        {
          let clothList = _user.user.getSex() == 1 ? _enums.enums.get('propF') : _enums.enums.get('propM');

          for (let i = 0; i < clothList.length; i++) {
            if (clothList[i][1] != 7) continue;
            if (clothList[i][2] != _user.user.get('bracelet')) continue;
            inventory.addItemServer(273, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('bracelet_color'), i);

            _user.user.setData('bracelet', -1);

            _user.user.setData('bracelet_color', -1);

            _user.user.updateCharacterCloth();

            _user.user.updateCache().then();
          }

          break;
        }

      case 274:
        {
          inventory.addItemServer(274, 1, inventory.types.Player, user_id, 1, _user.user.getSex(), _user.user.get('mask_color'), _user.user.get('mask'));

          _user.user.setData('mask', 0);

          _user.user.setData('mask_color', 0);

          _user.user.updateCharacterCloth();

          _user.user.updateCache().then();

          break;
        }

      case 7:
        inventory.addItemServer(7, 1, inventory.types.Player, user_id, 1, -1, -1, -1);

        _user.user.setData('item_clock', false);

        _chat.chat.sendMeCommand('снял часы');

        break;

      case 8:
        inventory.addItemServer(8, 1, inventory.types.Player, user_id, 1, _user.user.get('phone_code'), _user.user.get('phone'), -1);

        _user.user.setData('phone', 0);

        _user.user.setData('phone_code', 0);

        mp.game.ui.notifications.show('~g~Вы убрали телефон');
        break;

      case 42:
        inventory.addItemServer(42, 1, inventory.types.Player, user_id, 1, -1, -1, _user.user.get('business_id'));

        _user.user.setData('business_id', 0);

        mp.game.ui.notifications.show('~g~Вы убрали ключи от офиса');
        break;

      case 43:
        inventory.addItemServer(43, 1, inventory.types.Player, user_id, 1, -1, -1, _user.user.get('id_house'));

        _user.user.setData('id_house', 0);

        mp.game.ui.notifications.show('~g~Вы убрали ключи от дома');
        break;

      case 44:
        inventory.addItemServer(44, 1, inventory.types.Player, user_id, 1, -1, -1, _user.user.get('apartment_id'));

        _user.user.setData('apartment_id', 0);

        mp.game.ui.notifications.show('~g~Вы убрали ключи от квартиры');
        break;

      case 50:
        mp.events.callSocket('server:inventory:unEquip', 50);
        break;

      case 138:
        if (_user.user.getMoney() < 1) {
          mp.game.ui.notifications.show('~r~У Вас нет налички');
          return;
        }

        inventory.addItemServer(138, 1, inventory.types.Player, user_id, 1, -1, -1, -1);

        _user.user.removeCashMoney(1);

        mp.game.ui.notifications.show('~g~Вы убрали $1 в инвентарь');
        break;

      case 139:
        if (_user.user.getMoney() < 100) {
          mp.game.ui.notifications.show('~r~У Вас нет налички');
          return;
        }

        inventory.addItemServer(138, 1, inventory.types.Player, user_id, 100, -1, -1, -1);

        _user.user.removeCashMoney(100);

        mp.game.ui.notifications.show('~g~Вы убрали $100 в инвентарь');
        break;

      case 140:
      case 141:
        let money = await _menu.default.Menu.GetUserInput('Кол-во', '', 9);
        money = _methods.methods.parseInt(money);

        if (_user.user.getMoney() < money) {
          mp.game.ui.notifications.show('~r~У Вас нет столько налички');
          return;
        }

        if (money <= 0) {
          mp.game.ui.notifications.show('~r~У Вас нет налички');
          return;
        }

        let moneyFull = money;

        while (moneyFull > 0) {
          if (moneyFull == 1) {
            inventory.addItemServer(138, 1, inventory.types.Player, user_id, moneyFull, -1, -1, -1);
            moneyFull = 0;
          } else if (moneyFull == 100) {
            inventory.addItemServer(139, 1, inventory.types.Player, user_id, moneyFull, -1, -1, -1);
            moneyFull = 0;
          } else if (moneyFull <= 10000) {
            inventory.addItemServer(140, 1, inventory.types.Player, user_id, moneyFull, -1, -1, -1);
            moneyFull = 0;
          } else if (moneyFull <= 30000) {
            inventory.addItemServer(141, 1, inventory.types.Player, user_id, moneyFull, -1, -1, -1);
            moneyFull = 0;
          } else {
            inventory.addItemServer(141, 1, inventory.types.Player, user_id, 30000, -1, -1, -1);
            moneyFull = moneyFull - 30000;
          }
        }

        _user.user.removeCashMoney(money);

        mp.game.ui.notifications.show(`~g~Вы убрали $${_methods.methods.numberFormat(money)} в инвентарь`);
        break;

      case 27:
      case 28:
      case 29:
      case 30:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
        if (type == 9999) {
          let ptFull = countItems;

          while (ptFull > 0) {
            if (ptFull <= inventory.ammoItemIdToMaxCount(itemId)) {
              inventory.addItemServer(itemId, 1, inventory.types.Player, toId, ptFull, -1, -1, -1);
              ptFull = 0;
            } else {
              inventory.addItemServer(itemId, 1, inventory.types.Player, toId, inventory.ammoItemIdToMaxCount(itemId), -1, -1, -1);
              ptFull = ptFull - inventory.ammoItemIdToMaxCount(itemId);
            }
          }

          inventory.removeAllAmmo(itemId);
        } else {
          let ptFull = countItems;

          while (ptFull > 0) {
            if (ptFull <= inventory.ammoItemIdToMaxCount(itemId)) {
              inventory.addItemServer(itemId, 1, inventory.types.Player, user_id, ptFull, -1, -1, -1);
              ptFull = 0;
            } else {
              inventory.addItemServer(itemId, 1, inventory.types.Player, user_id, inventory.ammoItemIdToMaxCount(itemId), -1, -1, -1);
              ptFull = ptFull - inventory.ammoItemIdToMaxCount(itemId);
            }
          }

          inventory.removeAllAmmo(itemId);
          mp.game.ui.notifications.show('~g~Вы убрали патроны в инвентарь');
        }

        break;

      default:
        if (itemId <= 136 && itemId >= 54) {
          if (type == inventory.types.StockFraction) {
            _weapons.weapons.hashesMap.forEach(item => {
              if (item[0] !== _items_old.items_old.getItemNameHashById(itemId)) return;
              let hash = item[1] / 2;
              if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) return;
              mp.game.invoke(_methods.methods.REMOVE_WEAPON_FROM_PED, mp.players.local.handle, hash);

              if (_data.Container.HasLocally(0, hash.toString())) {
                _data.Container.ResetLocally(0, hash.toString());

                _data.Container.Reset(mp.players.local.remoteId, hash.toString());
              }

              inventory.addItemServer(itemId, 1, inventory.types.StockFraction, 2, 1, -1, -1, -1);
            });
          } else if (type == 9999) {
            _weapons.weapons.hashesMap.forEach(item => {
              if (item[0] !== _items_old.items_old.getItemNameHashById(itemId)) return;
              let hash = item[1] / 2;
              if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) return;
              mp.game.invoke(_methods.methods.REMOVE_WEAPON_FROM_PED, mp.players.local.handle, hash);

              if (_data.Container.HasLocally(0, hash.toString())) {
                _data.Container.ResetLocally(0, hash.toString());

                _data.Container.Reset(mp.players.local.remoteId, hash.toString());
              }

              inventory.addItemServer(itemId, 1, inventory.types.Player, toId, 1, -1, -1, -1);
            });
          } else {
            _weapons.weapons.hashesMap.forEach(item => {
              if (item[0] !== _items_old.items_old.getItemNameHashById(itemId)) return;
              inventory.addItemServer(itemId, 1, inventory.types.Player, user_id, 1, -1, -1, -1);
              let hash = item[1] / 2;
              if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) return;
              mp.game.invoke(_methods.methods.REMOVE_WEAPON_FROM_PED, mp.players.local.handle, hash);

              if (_data.Container.HasLocally(0, hash.toString())) {
                _data.Container.ResetLocally(0, hash.toString());

                _data.Container.Reset(mp.players.local.remoteId, hash.toString());
              }

              mp.game.ui.notifications.show('~g~Вы убрали оружие');
            });
          }
        }

    }

    inventory.updateAmount(user_id, inventory.types.Player);
  },
  useItem: (id, itemId) => {
    mp.events.callSocket('server:inventory:useItem', id, itemId);
  },
  dropItem: (id, itemId, pos, rot, model, ownerType, ownerId) => {
    mp.events.callRemote('server:inventory:dropItem', id, itemId, pos.x, pos.y, pos.z, rot.x, rot.y, rot.z, model, ownerType, ownerId);
  },
  deleteItemProp: id => {
    mp.events.callRemote('server:inventory:deleteDropItem', id);
  },
  takeNewItem: async (itemId, count = 1) => {
    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(user_id, inventory.types.Player);
    let amountMax = await inventory.getInvAmountMax(user_id, inventory.types.Player);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~Инвентарь заполнен');
      inventory.open();
      return;
    }

    inventory.addItemServer(itemId, 1, inventory.types.Player, user_id, count, -1, -1, -1);
    inventory.updateAmount(user_id, inventory.types.Player);
    mp.game.ui.notifications.show(`~b~Вы взяли \"${_items_old.items_old.getItemNameById(itemId)}\"`);

    _chat.chat.sendMeCommand(`взял \"${_items_old.items_old.getItemNameById(itemId)}\"`);
  },
  takeItem: async (id, itemId, ownerType, notify = true) => {
    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(user_id, inventory.types.Player);
    let amountMax = await inventory.getInvAmountMax(user_id, inventory.types.Player);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~Инвентарь заполнен');
      inventory.open();
      return;
    }

    mp.events.callRemote('server:inventory:closeItemMenu', id);

    if (ownerType == inventory.types.World) {
      _user.user.playAnimation('pickup_object', 'pickup_low', 8);
    }

    if (ownerType >= 11 && ownerType <= 22) _stock.stock.addLog(_user.user.get('rp_name'), `TAKE: ${_items_old.items_old.getItemNameById(itemId)}`, mp.players.local.dimension - 5100000);
    inventory.updateItemOwnerServer(id, inventory.types.Player, user_id);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (ownerType == inventory.types.World) inventory.deleteItemProp(id);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы взяли \"${_items_old.items_old.getItemNameById(itemId)}\"`);

    _chat.chat.sendMeCommand(`взял \"${_items_old.items_old.getItemNameById(itemId)}\"`);
  },
  giveItem: async (id, itemId, playerId, notify = true) => {
    if (itemId == 50) {
      return mp.game.ui.notifications.show("~r~Банковскую карту нельзя передавать");
    }

    if (itemId >= 138 && itemId <= 141) {
      return mp.game.ui.notifications.show("~r~Пачку денег нельзя передавать");
    }

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(playerId, inventory.types.Player);
    let amountMax = await inventory.getInvAmountMax(playerId, inventory.types.Player);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~Инвентарь заполнен');
      inventory.open();
      return;
    }

    _user.user.playAnimation('mp_common', 'givetake1_a', 8);

    inventory.updateItemOwnerServer(id, inventory.types.Player, playerId);
    inventory.updateAmount(playerId, inventory.types.Player);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы передали \"${_items_old.items_old.getItemNameById(itemId)}\" игроку`);

    _chat.chat.sendMeCommand(`передал \"${_items_old.items_old.getItemNameById(itemId)}\" человеку рядом`);
  },
  dropItemToVehicle: async (id, itemId, number, notify = true) => {
    if (itemId == 50) {
      return mp.game.ui.notifications.show("~r~Банковскую карту нельзя передавать");
    }

    if (itemId >= 138 && itemId <= 141) {
      return mp.game.ui.notifications.show("~r~Пачку денег нельзя передавать");
    }

    let vId = inventory.convertNumberToHash(number);

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(vId, inventory.types.Vehicle);
    let amountMax = await inventory.getInvAmountMax(vId, inventory.types.Vehicle);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~В багажнике нет места');
      return;
    }

    inventory.updateItemOwnerServer(id, inventory.types.Vehicle, number);
    inventory.updateAmount(vId, inventory.types.Vehicle);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы положили \"${_items_old.items_old.getItemNameById(itemId)}\" в багажник`);

    _chat.chat.sendMeCommand(`положил \"${_items_old.items_old.getItemNameById(itemId)}\" в багажник`);
  },
  dropItemToStockFraction: async (id, itemId, ownerId, notify = true) => {
    if (itemId == 50) {
      return mp.game.ui.notifications.show("~r~Банковскую карту нельзя передавать");
    }

    if (itemId >= 138 && itemId <= 141) {
      return mp.game.ui.notifications.show("~r~Пачку денег нельзя передавать");
    }

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(ownerId, inventory.types.StockFraction);
    let amountMax = await inventory.getInvAmountMax(ownerId, inventory.types.StockFraction);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~На складе нет места');
      return;
    }

    inventory.updateItemOwnerServer(id, inventory.types.StockFraction, ownerId);
    inventory.updateAmount(ownerId, inventory.types.StockFraction);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы положили \"${_items_old.items_old.getItemNameById(itemId)}\" на склад`);

    _chat.chat.sendMeCommand(`положил \"${_items_old.items_old.getItemNameById(itemId)}\" на склад`);
  },
  dropItemToFridge: async (id, itemId, ownerId, notify = true) => {
    if (itemId == 50) {
      return mp.game.ui.notifications.show("~r~Банковскую карту нельзя передавать");
    }

    if (itemId >= 138 && itemId <= 141) {
      return mp.game.ui.notifications.show("~r~Пачку денег нельзя передавать");
    }

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(ownerId, inventory.types.Fridge);
    let amountMax = await inventory.getInvAmountMax(ownerId, inventory.types.Fridge);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~В холодильнике нет места');
      return;
    }

    inventory.updateItemOwnerServer(id, inventory.types.Fridge, ownerId);
    inventory.updateAmount(ownerId, inventory.types.Fridge);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы положили \"${_items_old.items_old.getItemNameById(itemId)}\" в холодильник`);

    _chat.chat.sendMeCommand(`положил \"${_items_old.items_old.getItemNameById(itemId)}\" в холодильник`);
  },
  dropItemToUserStock: async (id, itemId, ownerId, notify = true) => {
    if (itemId == 50) {
      return mp.game.ui.notifications.show("~r~Банковскую карту нельзя передавать");
    }

    if (itemId >= 138 && itemId <= 141) {
      return mp.game.ui.notifications.show("~r~Пачку денег нельзя передавать");
    }

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(ownerId, inventory.types.UserStock);
    let amountMax = await inventory.getInvAmountMax(ownerId, inventory.types.UserStock);

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~На складе нет места');
      return;
    }

    let ownId = mp.players.local.dimension - 5100000;

    _stock.stock.addLog(_user.user.get('rp_name'), `DROP: ${_items_old.items_old.getItemNameById(itemId)}`, ownId);

    inventory.updateItemOwnerServer(id, inventory.types.UserStock + ownerId, ownId);
    inventory.updateAmount(ownerId, inventory.types.UserStock);
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы положили \"${_items_old.items_old.getItemNameById(itemId)}\" на склад`);

    _chat.chat.sendMeCommand(`положил \"${_items_old.items_old.getItemNameById(itemId)}\" на склад`);
  },
  takeDrugItem: async (id, itemId, countItems, notify = true, takeCount = 1) => {
    countItems = countItems - takeCount;

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(user_id, inventory.types.Player);
    let amountMax = await inventory.getInvAmountMax(user_id, inventory.types.Player);
    let newItemId = 2;

    switch (itemId) {
      case 142:
      case 144:
      case 154:
      case 156:
        if (takeCount == 1) newItemId = 2;
        if (takeCount == 10) newItemId = 154;
        if (takeCount == 50) newItemId = 156;
        break;

      case 143:
      case 145:
      case 155:
      case 157:
        if (takeCount == 1) newItemId = 3;
        if (takeCount == 10) newItemId = 155;
        if (takeCount == 50) newItemId = 157;
        break;

      case 163:
      case 164:
      case 171:
      case 176:
        if (takeCount == 1) newItemId = 158;
        if (takeCount == 10) newItemId = 171;
        if (takeCount == 50) newItemId = 176;
        break;

      case 165:
      case 166:
      case 172:
      case 177:
        if (takeCount == 1) newItemId = 159;
        if (takeCount == 10) newItemId = 172;
        if (takeCount == 50) newItemId = 177;
        break;

      case 167:
      case 168:
      case 173:
      case 178:
        if (takeCount == 1) newItemId = 160;
        if (takeCount == 10) newItemId = 173;
        if (takeCount == 50) newItemId = 178;
        break;

      case 169:
      case 174:
      case 179:
        if (takeCount == 1) newItemId = 161;
        if (takeCount == 10) newItemId = 174;
        if (takeCount == 50) newItemId = 179;
        break;

      case 170:
      case 175:
      case 180:
        if (takeCount == 1) newItemId = 162;
        if (takeCount == 10) newItemId = 175;
        if (takeCount == 50) newItemId = 180;
        break;
    }

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~Инвентарь заполнен');
      inventory.open();
      return;
    }

    _menu.default.Menu.HideMenu();

    inventory.addItemServer(newItemId, 1, inventory.types.Player, user_id, takeCount, -1, -1, -1);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (countItems <= 0) inventory.deleteItemServer(id);else {
      inventory.updateItemCountServer(id, countItems);
    }
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы взяли \"${_items_old.items_old.getItemNameById(newItemId)}\"`);

    _chat.chat.sendMeCommand(`взял ${takeCount}гр наркотиков`);
  },
  takeCountItem: async (id, itemId, countItems, notify = true, takeCount = 1) => {
    countItems = countItems - takeCount;

    let user_id = _user.user.get('id');

    let amount = await inventory.getInvAmount(user_id, inventory.types.Player);
    let amountMax = await inventory.getInvAmountMax(user_id, inventory.types.Player);
    let newItemId = 2;

    switch (itemId) {
      case 275:
        if (takeCount == 1) newItemId = 4;
        break;

      case 276:
        if (takeCount == 1) newItemId = 263;
        break;
    }

    if (_items_old.items_old.getItemAmountById(itemId) + amount > amountMax) {
      mp.game.ui.notifications.show('~r~Инвентарь заполнен');
      inventory.open();
      return;
    }

    inventory.addItemServer(newItemId, 1, inventory.types.Player, user_id, takeCount, -1, -1, -1);
    inventory.updateAmount(user_id, inventory.types.Player);
    if (countItems <= 0) inventory.deleteItemServer(id);else {
      inventory.updateItemCountServer(id, countItems);
    }
    if (!notify) return;
    mp.game.ui.notifications.show(`~g~Вы взяли \"${_items_old.items_old.getItemNameById(newItemId)}\"`);

    _chat.chat.sendMeCommand(`взял ${takeCount}шт предмета`);
  },
  getInvAmount: async (id, type) => {
    return inventory.currentAmount(type, id);
  },
  setInvAmount: (id, type, data) => {
    _data.Container.Set(id, 'invAmount:' + type, data);

    _data.Container.SetLocally(id, 'invAmount:' + type, data);
  },
  getInvAmountMax: async (id, type) => {
    return inventory.maxAmount(type, id);
  },
  setInvAmountMax: (id, type, data) => {
    _data.Container.Set(id, 'invAmountMax:' + type, data);

    _data.Container.SetLocally(id, 'invAmountMax:' + type, data);
  },
  calculatePlayerInvAmountMax: () => {
    return 45100 + _user.user.get('mp0_strength') * 100;
  },
  startFishing: () => {
    if (!_methods.methods.isPlayerInOcean()) {
      mp.game.ui.notifications.show('~r~Вы должны быть в океане');
      return;
    }

    if (mp.players.local.isSwimming()) {
      mp.game.ui.notifications.show('~r~Вы не должны быть в воде');
      return;
    }

    if (mp.players.local.vehicle) {
      mp.game.ui.notifications.show('~r~Вы не должны быть в транспорте');
      return;
    }

    if (_data.Container.HasLocally(0, 'fish')) {
      mp.game.ui.notifications.show('~r~Вы уже рыбачите');
      return;
    }

    _data.Container.SetLocally(0, 'fish', true);

    _user.user.playScenario('WORLD_HUMAN_STAND_FISHING');

    mp.events.callRemote('server:setTimeout', 30000, 'client:inventory:continueFishing');
  },
  continueFishing: () => {
    if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(-3544, 6135, 0)) < 200 || _methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(4989, 1712, 0)) < 200) {
      if (_methods.methods.getRandomInt(0, 3) == 0) inventory.takeNewItem(241);else if (_methods.methods.getRandomInt(0, 3) == 0) inventory.takeNewItem(243);else if (_methods.methods.getRandomInt(0, 2) == 0) inventory.takeNewItem(244);else inventory.takeNewItem(245);
    } else {
      if (_methods.methods.getRandomInt(0, 2) == 0) {
        if (_methods.methods.getRandomInt(0, 3) == 0) inventory.takeNewItem(243);else if (_methods.methods.getRandomInt(0, 2) == 0) inventory.takeNewItem(244);else inventory.takeNewItem(245);
      } else inventory.takeNewItem(242);
    }

    _data.Container.ResetLocally(0, 'fish');

    _user.user.stopAllAnimation();
  },
  ammoTypeToAmmo: type => {
    switch (type) {
      case 357983224:
        return -1;

      case 1003688881:
        return -1;

      case -435287898:
        return -1;

      case -1356724057:
        return -1;

      case -1686864220:
        return -1;

      case 1359393852:
        return -1;

      case 1411692055:
        return -1;

      case 1446246869:
        return -1;

      case -899475295:
        return -1;

      case -6986138:
        return -1;

      case -2112339603:
        return -1;

      case 1808594799:
        return -1;

      case 1173416293:
        return 147;

      case -1339118112:
        return -1;

      case -1356599793:
        return 148;

      case 1742569970:
        return 149;

      case 2034517757:
        return 150;

      case -1726673363:
        return 152;

      case 1003267566:
        return 151;

      case 1285032059:
        return 146;

      case -1878508229:
        return 28;

      case 218444191:
        return 30;

      case 1950175060:
        return 27;

      case 1820140472:
        return 153;

      case 1788949567:
      case -1614428030:
        return 29;

      default:
        return -1;
    }
  },
  ammoItemIdToMaxCount: _inventory.ammoItemIdToMaxCountUtil,
  addAmmoServer: (name, count) => {
    _weapons.weapons.hashesMap.forEach(item => {
      if (item[0] == name) mp.game.invoke(_methods.methods.ADD_AMMO_TO_PED, mp.players.local.handle, item[1] / 2, count);
      return;
    });
  },
  setWeaponAmmo: (name, count) => {
    _weapons.weapons.hashesMap.forEach(item => {
      if (item[0] == name) mp.game.invoke(_methods.methods.SET_PED_AMMO, mp.players.local.handle, item[1] / 2, count);
      return;
    });
  },
  addAmmo: (type, count) => {
    switch (type) {
      case 147:
        inventory.addAmmoServer('FlareGun', count);
        return;

      case 148:
        inventory.addAmmoServer('Firework', count);
        return;

      case 149:
        inventory.addAmmoServer('RPG', count);
        return;

      case 150:
        inventory.addAmmoServer('Railgun', count);
        return;

      case -152:
        inventory.addAmmoServer('HomingLauncher', count);
        return;

      case 151:
        inventory.addAmmoServer('CompactGrenadeLauncher', count);
        return;

      case 146:
        inventory.addAmmoServer('MarksmanRifle', count);
        return;

      case 28:
        inventory.addAmmoServer('AssaultShotgun', count);
        return;

      case 30:
        inventory.addAmmoServer('AssaultRifle', count);
        return;

      case 27:
        inventory.addAmmoServer('Pistol', count);
        return;

      case 153:
        inventory.addAmmoServer('SMG', count);
        return;

      case 29:
        inventory.addAmmoServer('MG', count);
        return;
    }
  },
  removeAllAmmo: type => {
    switch (type) {
      case 147:
        inventory.setWeaponAmmo('FlareGun', 0);
        return;

      case 148:
        inventory.setWeaponAmmo('Firework', 0);
        return;

      case 149:
        inventory.setWeaponAmmo('RPG', 0);
        return;

      case 150:
        inventory.setWeaponAmmo('Railgun', 0);
        return;

      case -152:
        inventory.setWeaponAmmo('HomingLauncher', 0);
        return;

      case 151:
        inventory.setWeaponAmmo('CompactGrenadeLauncher', 0);
        return;

      case 146:
        inventory.setWeaponAmmo('MarksmanRifle', 0);
        return;

      case 28:
        inventory.setWeaponAmmo('AssaultShotgun', 0);
        return;

      case 30:
        inventory.setWeaponAmmo('AssaultRifle', 0);
        return;

      case 27:
        inventory.setWeaponAmmo('Pistol', 0);
        return;

      case 153:
        inventory.setWeaponAmmo('SMG', 0);
        return;

      case 29:
        inventory.setWeaponAmmo('MG', 0);
        return;
    }
  },
  convertNumberToHash: number => {
    return mp.game.joaat(number.toString().toUpperCase());
  },
  updateAmountMax: (id, type) => {
    if (type == inventory.types.VehicleNpc || type == inventory.types.VehicleOwner || type == inventory.types.VehicleServer || type == inventory.types.Vehicle) {
      let veh = _methods.methods.getNearestVehicleWithCoords(mp.players.local.position, 5.0);

      if (veh) {
        inventory.setInvAmountMax(id, type, _methods.methods.getVehicleInfo(veh.model).stock);
      } else {
        return;
      }
    } else {
      let invAmountMax = inventory.calculatePlayerInvAmountMax();
      if (type == inventory.types.World) invAmountMax = -1;else if (type == inventory.types.Apartment) invAmountMax = _sharedData.stockSize.Apartment;else if (type == inventory.types.House) invAmountMax = _sharedData.stockSize.House;else if (type == inventory.types.Player) invAmountMax = inventory.calculatePlayerInvAmountMax();else if (type == inventory.types.Bag) invAmountMax = _sharedData.stockSize.Bag;else if (type == inventory.types.StockFraction) invAmountMax = _sharedData.stockSize.StockFraction;else if (type == inventory.types.Fridge) invAmountMax = _sharedData.stockSize.Fridge;else if (type == 12 || type == 13) invAmountMax = _sharedData.stockSize.PrivateSafe;else if (type >= 14 && type <= 17) invAmountMax = _sharedData.stockSize.BigWoodBox;else if (type >= 18 && type <= 22 || type == 11) invAmountMax = _sharedData.stockSize.SmallWoodBox;
      inventory.setInvAmountMax(id, type, invAmountMax);
    }
  },
  sendToPlayerItemListUpdateAmountMenu: (data, ownerType, ownerId) => {
    let sum = 0;
    data.forEach(property => {
      sum = sum + _items_old.items_old.getItemAmountById(property[1]);
    });
    inventory.setInvAmount(ownerId, ownerType, sum);
  },
  updateAmount: (id, type) => {
    mp.events.callRemote('server:inventory:updateAmount', id, type);
  },
  addItemServer: (itemId, count, ownerType, ownerId, countItems, prefix, number, keyId) => {
    mp.events.callRemote('server:inventory:addItem', itemId, count, ownerType, ownerId, countItems, prefix, number, keyId);
  },
  updateItemServer: (itemId, count, ownerType, ownerId, countItems, prefix, number, keyI) => {},
  updateItemOwnerServer: (id, ownerType, ownerId) => {
    mp.events.callRemote('server:inventory:updateItemOwner', id, ownerType, ownerId);
  },
  updateItemCountServer: (id, count) => {
    mp.events.callRemote('server:inventory:updateItemCount', id, count);
  },
  deleteItemServer: id => {
    mp.events.callRemote('server:inventory:deleteItem', id);
  },
  getItemList: (ownerType, ownerId) => {
    mp.events.callRemote('inventory:open', ownerType, ownerId);
  },
  getItemListInRadius: pos => {
    mp.events.callRemote('server:inventory:getItemListInRadius', pos.x, pos.y);
  },
  cookFood: ownerId => {
    _chat.chat.sendMeCommand('готовит еду');

    mp.game.ui.notifications.show('~g~Вы приготовили всю еду');
  },
  types: _inventory.inventoryTypesUtil
};
exports.inventory = inventory;
mp.events.add('client:inventory:continueFishing', () => {
  inventory.continueFishing();
});
mp.events.add("server:inventory:equipItem", (id, itemId, prefix, number, keyId, countItems) => {
  switch (itemId) {
    case 265:
      {
        if (_user.user.get('torso') != 15) {
          mp.game.ui.notifications.show('~r~У вас уже экипированы торс');
          return;
        }

        inventory.equipCloth(id, itemId, prefix, number, keyId, countItems);
        break;
      }

    case 266:
      {
        if (_user.user.getSex() == 0) {
          if (_user.user.get('leg') != 61) {
            mp.game.ui.notifications.show('~r~У вас уже экипированы штаны');
            return;
          }
        } else {
          if (_user.user.get('leg') != 15) {
            mp.game.ui.notifications.show('~r~У вас уже экипированы штаны');
            return;
          }
        }

        inventory.equipCloth(id, itemId, prefix, number, keyId);
        break;
      }

    case 267:
      {
        if (_user.user.getSex() == 0) {
          if (_user.user.get('foot') != 34) {
            mp.game.ui.notifications.show('~r~У вас уже экипирована обувь');
            return;
          }
        } else {
          if (_user.user.get('foot') != 35) {
            mp.game.ui.notifications.show('~r~У вас уже экипирована обувь');
            return;
          }
        }

        inventory.equipCloth(id, itemId, prefix, number, keyId);
        break;
      }

    case 268:
      {
        if (_user.user.get('accessorie') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипирован аксессуар');
          return;
        }

        inventory.equipCloth(id, itemId, prefix, number, keyId);
        break;
      }

    case 269:
      {
        if (_user.user.get('hat') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипирована шапка');
          return;
        }

        inventory.equipProp(id, itemId, prefix, number, keyId);
        break;
      }

    case 270:
      {
        if (_user.user.get('glasses') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипированы очки');
          return;
        }

        inventory.equipProp(id, itemId, prefix, number, keyId);
        break;
      }

    case 271:
      {
        if (_user.user.get('ear') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипированы серёжки');
          return;
        }

        inventory.equipProp(id, itemId, prefix, number, keyId);
        break;
      }

    case 272:
      {
        if (_user.user.get('watch') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипированы часы');
          return;
        }

        inventory.equipProp(id, itemId, prefix, number, keyId);
        break;
      }

    case 273:
      {
        if (_user.user.get('bracelet') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипирован браслет');
          return;
        }

        inventory.equipProp(id, itemId, prefix, number, keyId);
        break;
      }

    case 274:
      {
        if (_user.user.get('mask') > 0) {
          mp.game.ui.notifications.show('~r~У вас уже экипирована маска');
          return;
        }

        if (prefix != _user.user.getSex()) {
          if (prefix == 1) mp.game.ui.notifications.show('~r~Вы не можете на себя надеть женскую одежду');else mp.game.ui.notifications.show('~r~Вы не можете на себя надеть мужскую одежду');
          return;
        }

        _cloth.cloth.buyMask(10, keyId, number, 0);

        _user.user.updateCharacterCloth();

        inventory.deleteItemServer(id);

        _user.user.updateCache().then();

        break;
      }

    case 7:
      if (!_user.user.get('item_clock')) {
        _user.user.setData('item_clock', true);

        _chat.chat.sendMeCommand('надел часы');

        inventory.deleteItemServer(id);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипированы одни часы');
      }

      break;

    case 8:
      if (_user.user.get('phone_code') == 0) {
        _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

        _user.user.setData('phone', number);

        _user.user.setData('phone_code', prefix);

        mp.game.ui.notifications.show('~g~Вы экипировали телефон');
        inventory.deleteItemServer(id);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипирован один телефон');
      }

      break;

    case 42:
      if (_user.user.get('business_id') == 0) {
        _user.user.setData('business_id', keyId);

        mp.game.ui.notifications.show('~g~Вы экипировали ключи от офиса');
        inventory.deleteItemServer(id);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипированы одни ключи от офиса');
      }

      break;

    case 43:
      if (_user.user.get('id_house') == 0) {
        _user.user.setData('id_house', keyId);

        mp.game.ui.notifications.show('~g~Вы экипировали ключи от дома');
        inventory.deleteItemServer(id);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипированы одни ключи от дома');
      }

      break;

    case 44:
      if (_user.user.get('apartment_id') == 0) {
        _user.user.setData('apartment_id', keyId);

        mp.game.ui.notifications.show('~g~Вы экипировали ключи от квартиры');
        inventory.deleteItemServer(id);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипированы одни ключи от квартиры');
      }

      break;

    case 50:
      if (_user.user.get('bank_prefix') == 0) {
        _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

        mp.events.callRemote('server:inventory:equipItem', id, itemId, prefix, number, keyId, countItems);
      } else {
        mp.game.ui.notifications.show('~r~У вас уже экипирована одна банковская карта');
      }

      break;

    case 138:
      _user.user.addCashMoney(1);

      mp.game.ui.notifications.show('~g~Вы положили $1 в кошелёк');
      inventory.deleteItemServer(id);

      _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

      break;

    case 139:
      _user.user.addCashMoney(100);

      mp.game.ui.notifications.show('~g~Вы положили $100 в кошелёк');
      inventory.deleteItemServer(id);

      _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

      break;

    case 140:
    case 141:
      mp.events.callRemote('server:inventory:equipItem', id, itemId, prefix, number, keyId, countItems);

      _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

      break;

    case 27:
    case 28:
    case 29:
    case 30:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
      inventory.addAmmo(itemId, countItems);
      mp.game.ui.notifications.show('~g~Вы экипировали патроны');
      inventory.deleteItemServer(id);

      _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

      break;

    default:
      if (itemId <= 136 && itemId >= 54) {
        _weapons.weapons.hashesMap.forEach(item => {
          if (item[0] !== _items_old.items_old.getItemNameHashById(itemId)) return;
          mp.events.callRemote('server:inventory:equipGun', id, item[1] / 2);

          _methods.methods.saveLog('EquipItems', `${_user.user.get('rp_name')} (${_user.user.get('id')}) - ${_items_old.items_old.getItemNameById(itemId)} | ${prefix}-${number} | ${countItems} | ${keyId}`);

          return;
        });
      }

  }
});
},{"./modules/menu":"Aiz7","./modules/methods":"qXSp","./modules/data":"Edcz","./chat":"MuUD","./items_old":"A2KQ","./user":"QE3B","./stock":"MdNj","./weapons":"YeMF","./enums":"ZRYf","./business/cloth":"Lio2","./modules/gui":"bk91","../util/sharedData":"bNis","../util/inventory":"Jhu1"}],"nuVl":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.items = void 0;

var _inventory = require("../util/inventory");

let _items = [];
let currentRequestID = 0;
let pendingRequests = {};

let updateItems = function () {
  return new Promise(resolve => {
    pendingRequests[currentRequestID] = resolve;
    mp.events.callRemote('server:items:getItems', currentRequestID);
    currentRequestID++;
  });
};

const items = {
  get: () => {
    return _items;
  },
  loadItems: () => {
    updateItems().then(returnItems => {
      try {
        _items = returnItems;
      } catch (e) {
        mp.console.logError(e);
        throw e;
      }
    });
  },
  canEquipById: id => {
    try {
      return _items[id][2];
    } catch (_unused) {
      return false;
    }
  },
  getItemNameById: id => {
    try {
      return _items[id][0];
    } catch (_unused2) {
      return 'UNKNOWN';
    }
  },
  getItemNameHashById: _inventory.getItemNameHashById,
  getItemHashById: id => {
    try {
      return _items[id][3];
    } catch (_unused3) {
      return 1108364521;
    }
  },
  getItemWeightById: id => {
    try {
      return _items[id][4];
    } catch (_unused4) {
      return -1;
    }
  },
  getItemWeightKgById: id => {
    try {
      return +(_items[id][4] / 1000.0).toFixed(1);
    } catch (_unused5) {
      return -1;
    }
  },
  getItemAmountById: id => {
    try {
      return _items[id][5];
    } catch (_unused6) {
      return -1;
    }
  }
};
exports.items = items;
mp.events.add('client:items:updateItems', (requestID, returnItems) => {
  try {
    if (pendingRequests[requestID]) {
      pendingRequests[requestID](returnItems);
    }
  } catch (e) {
    mp.console.logError(e);
    throw e;
  }
});
},{"../util/inventory":"Jhu1"}],"fsEp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syncdata = exports.syncData = void 0;

var _savezone = require("../modules/savezone");

var _user = require("../user");

var _weapons = require("../weapons");

var _items = require("../items");

var _inventory = require("../inventory");

var _methods = require("../modules/methods");

let syncdata = {
  insaveZone: false,
  weapons: []
};
exports.syncdata = syncdata;

const syncData = () => {
  if (!_user.user.isLogin()) return;
  let needSync = false;
  let currentInt = mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z);
  if (syncdata.insaveZone != (0, _savezone.inGreenZone)()) needSync = true;
  let data = [];

  for (let n = 54; n < 138; n++) {
    _weapons.weapons.hashesMap.forEach(item => {
      if (item[0] !== _items.items.getItemNameHashById(n)) return;
      let hash = item[1] / 2;
      if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, hash, false)) return;
      let ammo = mp.game.invoke(_methods.methods.GET_AMMO_IN_PED_WEAPON, mp.players.local.handle, hash);

      let ammoType = _inventory.inventory.ammoTypeToAmmo(mp.game.invoke(_methods.methods.GET_PED_AMMO_TYPE_FROM_WEAPON, mp.players.local.handle, hash));

      data.push({
        item: n,
        hash,
        ammo,
        ammoType
      });
    });
  }

  if (JSON.stringify(syncdata.weapons) != JSON.stringify(data)) needSync = true;
  syncdata.weapons = data;
  syncdata.insaveZone = (0, _savezone.inGreenZone)();
  if (needSync) mp.events.callRemote('sync.elements', JSON.stringify(syncdata));
};

exports.syncData = syncData;
setInterval(() => {
  syncData();
}, 3000);
},{"../modules/savezone":"ehdN","../user":"QE3B","../weapons":"YeMF","../items":"nuVl","../inventory":"m5ow","../modules/methods":"qXSp"}],"Zeqt":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recLists = exports.fractionUtil = exports.fractionList = exports.fraction = void 0;
const recLists = [{
  name: "Рецепт на марихуану",
  param: "allow_marg",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 1000
}, {
  name: "Рецепт на антипохмелин",
  param: "allow_antipohmel",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 1000
}, {
  name: "Медицинская страховка",
  param: "med_lic",
  fractions: [16],
  rank: 5,
  give: true,
  cost: 15000
}, {
  name: "Лицензия на адвоката",
  param: "law_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 15000
}, {
  name: "Лицензия на бизнес",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 10000
}, {
  name: "Лицензия на рыбалку",
  param: "fish_lic",
  fractions: [1],
  rank: 7,
  give: true,
  cost: 7000
}, {
  name: "Лицензия на оружие",
  param: "gun_lic",
  fractions: [2, 7, 3],
  rank: 6,
  give: true,
  cost: 15000
}, {
  name: "Медицинская страховка",
  param: "med_lic",
  fractions: [16],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории A",
  param: "a_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории B",
  param: "b_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия категории C",
  param: "c_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия воздушного ТС",
  param: "air_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия водного ТС",
  param: "ship_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на оружие",
  param: "gun_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на рыбалку",
  param: "fish_lic",
  fractions: [2, 3, 7],
  rank: 6,
  remove: true
}, {
  name: "Лицензия на адвоката",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  remove: true
}, {
  name: "Лицензия на бизнес",
  param: "biz_lic",
  fractions: [1],
  rank: 7,
  remove: true
}];
exports.recLists = recLists;
const fractionList = [{
  id: 1,
  name: "Government",
  desc: "Правительство",
  icon: "GOV",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Практикант", "Ассистент", "Младший специалист", "Специалист", "Старший специалист", "Зам. начальника отдела", "Начальник отдела", "Департамент Мэра", "Прокурор", "Судья", "Ген.Прокурор", "Верховный судья", "Вице-Губернатор", "Губернатор"],
  moneybase: 0,
  moneymultipler: 1000
}, {
  id: 2,
  name: "LSPD",
  desc: "Отделение полиции",
  icon: "LSPD",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Cadet PA", "Police Officier I", "Police Officier II", "Police Officier III", "Police Officier III+1", "Sergeant I", "Sergeant II", "Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Commander", "Assistant Chief of Police", "Chief of Police"],
  moneybase: 0,
  moneymultipler: 1100
}, {
  id: 3,
  name: "FIB",
  desc: "Отделение FIB",
  icon: "fib",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Trainee", "Improver", "Junior Specialist", "Specialist", "Senior Specialist", "Junior Agent", "Agent", "Senior Agent", "Special Agent", "Senior Special Agent", "Lead Agent", "Inspector FIB", "Deputy Director of FIB", "Director of FIB"],
  moneybase: 0,
  moneymultipler: 1200
}, {
  id: 4,
  name: "Army",
  desc: "Армия",
  icon: "Army",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Рядовой-рекрут", "Рядовой 1 класса", "Младший капрал", "Капрал", "Сержант", "Первый Сержант", "Уорент-Офицер", "Второй Лейтенант", "Первый Лейтенант", "Капитан", "Майор", "Подполковник", "Полковник", "Генерал"],
  moneybase: 0,
  moneymultipler: 1050
}, {
  id: 7,
  name: "Sheriffs Department",
  desc: "Шериф Департамент",
  icon: "Sheriff",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Deputy Sheriff Trainee", "Deputy Sheriff I", "Corporal I", "Corporal II", "Sergeant I", "Sergeant II", "Lieutenant I", "Lieutenant II", "Captain I", "Captain II", "Major", "Assistant Sheriff", "Undersheriff", "Sheriff"],
  moneybase: 0,
  moneymultipler: 1100
}, {
  id: 8,
  name: "Russian Mafia",
  desc: "Русская Мафия",
  icon: "russia",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Шпана", "Боец", "Браток", "Блатной", "Доверенный", "Бродяга", "Дипломат", "Смотрящий", "Положенец", "Авторитет"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 9,
  name: "LCN",
  desc: "Итальянская Мафия",
  icon: "lcn",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Novizio", "Associate", "Combattente", "Soldato", "Regime", "Sotto Cappo", "Caporegime", "Giovane boss", "Consigliere", "Don"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 10,
  name: "Yakuza",
  desc: "Японская Мафия",
  icon: "japan",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Taiko", "Satei", "Kumi-in", "Fuku-Hombute", "Bengoshi", "Kanbu", "Kyodai", "Kaikei", "Shingiin", "Saiko-Komon", "Kumicho"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 11,
  name: "Ukrainian Mafia",
  desc: "Украинская мафия",
  icon: "ukraine",
  gos: false,
  mafia: true,
  gang: false,
  ranks: ["Казак", "Приказный", "Урядник", "Вахмистр", "Подхорунжий", "Доверенный хлопец", "Хорунжий", "Есаул", "Атаман", "Гетман"],
  moneybase: 0,
  moneymultipler: 0
}, {
  id: 16,
  name: "EMS",
  desc: "Отделение Больницы",
  icon: "EMS",
  gos: true,
  mafia: false,
  gang: false,
  ranks: ["Практикант ", "Интерн", "Ординатор ", "Младший специалист", "Старший специалист ", "Главный специалист", "Фельдшер", "Ассистент врача", "Врач", "Зам.Глава отдела", "Глава отдела", "Глава Департамента", "Зам. Директора", "Директор"],
  moneybase: 0,
  moneymultipler: 1000
}, {
  id: 18,
  name: "Ballas",
  desc: "Ballas",
  icon: "Ballas",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Blade", "Buster", "Сracker", "gunBrogh", "upBrogh", "Gangster", "Federal block", "Foulkes", "Rich Nig", "Big Gangster"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#CD42FF"
}, {
  id: 19,
  name: "Families",
  desc: "Families",
  icon: "Families",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Beginner", "Youngsta", "Killa", "Wang G", "Shooter", "Big Brother", "High", "The King", "Deputy Boss", "Mad Dog"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#41AB5D"
}, {
  id: 20,
  name: "Marabunta Grande",
  desc: "Marabunta Grande",
  icon: "mara",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novato", "Experimentado", "Maton", "El asesino", "Viendo", "Trusted", "Cerrar", "Mano izquierda", "Mano derecha", "Capitulo"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#49A2E6"
}, {
  id: 21,
  name: "Vagos",
  desc: "Vagos",
  icon: "Vagos",
  gos: false,
  mafia: false,
  gang: true,
  ranks: ["Novato", "Guardian", "Verificado", "Local", "Bandito", "Medio", "Assessino", "Sabio", "Mano Derechа", "El Padre"],
  moneybase: 0,
  moneymultipler: 0,
  color: "#FCCD4C"
}];
exports.fractionList = fractionList;
const fraction = {
  list: fractionList,
  getFraction: fractionid => {
    return fractionList.find(item => item.id == fractionid);
  },
  getFractionName: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.name;
  },
  getFractionColor: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return "#fc0317";
    return data.color || "#fc0317";
  },
  getFractionIcon: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.icon;
  },
  getFractionDesc: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.desc;
  },
  getFractionRanks: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return [];
    return data.ranks;
  },
  getLeaderRank: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length;
  },
  getSubLeaderRank: fractionid => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    return data.ranks.length - 1;
  },
  isLeader: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length <= rank;
  },
  isSubLeader: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    return data.ranks.length - 1 <= rank;
  },
  isRankCorrect: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return false;
    if (!data.ranks[rank - 1]) return false;
    return true;
  },
  getRankName: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return null;
    if (!data.ranks[rank - 1]) return null;
    return data.ranks[rank - 1];
  },
  getPayDayMoney: (fractionid, rank) => {
    let data = fraction.getFraction(fractionid);
    if (!data) return 0;
    return data.moneybase + data.moneymultipler * rank;
  }
};
exports.fraction = fraction;
const fractionUtil = fraction;
exports.fractionUtil = fractionUtil;
},{}],"jh2U":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vipStatus = exports.BASE_AFK_TIME = void 0;
const BASE_AFK_TIME = 10;
exports.BASE_AFK_TIME = BASE_AFK_TIME;
const vipStatus = {
  data: [{
    id: "Diamond",
    name: "VIP Diamond",
    cost: 1250,
    moneybonus: 2500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: true,
    changeslots: true,
    sitepay: true,
    givecoin: 1,
    expbonus: 2,
    healmultipler: true,
    afkminutes: 45
  }, {
    id: "Gold",
    name: "VIP Gold",
    cost: 750,
    moneybonus: 1500,
    changeslots: true,
    sitepay: true,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 1,
    healmultipler: true,
    afkminutes: 35
  }, {
    id: "Silver",
    name: "VIP Silver",
    cost: 500,
    moneybonus: 1000,
    changeslots: true,
    skillpersbonus: 20,
    skilljobbonus: 20,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: 25
  }, {
    id: "Bronze",
    name: "VIP Bronze",
    cost: 250,
    moneybonus: 500,
    skillpersbonus: 20,
    skilljobbonus: 0,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: 15
  }, {
    id: "MediaLight",
    media: true,
    name: "Media VIP Light",
    cost: 0,
    moneybonus: 750,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "MediaHard",
    media: true,
    name: "Media VIP Hard",
    cost: 0,
    moneybonus: 1500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "Start",
    name: "VIP Start",
    cost: 0,
    moneybonus: 250,
    skillpersbonus: 10,
    skilljobbonus: 10,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 1,
    healmultipler: true,
    afkminutes: BASE_AFK_TIME
  }, {
    id: "Bonus",
    name: "VIP Bonus",
    cost: 0,
    moneybonus: 2500,
    skillpersbonus: 5,
    skilljobbonus: 5,
    vipuninvite: true,
    givecoin: 0,
    expbonus: 2,
    healmultipler: true,
    afkminutes: 45
  }, {
    id: "Turbo",
    name: "VIP Turbo",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Start", 10]
  }, {
    id: "Light",
    name: "VIP Light",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Silver", 60]
  }, {
    id: "Hard",
    name: "VIP Hard",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["Gold", 90]
  }, {
    id: "YouTube",
    name: "VIP YouTube",
    cost: 0,
    moneybonus: 0,
    skillpersbonus: 0,
    skilljobbonus: 0,
    vipuninvite: false,
    givecoin: 0,
    expbonus: 0,
    healmultipler: false,
    afkminutes: 0,
    switch: ["MediaLight", 999]
  }],
  getVipStatusData: id => {
    return vipStatus.data.find(item => item.id == id);
  }
};
exports.vipStatus = vipStatus;
},{}],"QE3B":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.userDataCh = exports.userData = exports.user = void 0;

var _data = require("./modules/data");

var _methods = require("./modules/methods");

var _ui = require("./modules/ui");

var _coffer = require("./coffer");

var _business = require("./business");

var _weather = require("./managers/weather");

var _weapons = require("./weapons");

var _items_old = require("./items_old");

var _inventory = require("./inventory");

var _gui = require("./modules/gui");

var _jobPoint = require("./managers/jobPoint");

var _sync = require("./managers/sync.elements");

var _fractions = require("../util/fractions");

var _newrage = require("../util/newrage");

var _vip = require("../util/vip");

var _ach = require("./modules/ach");

var _menu = _interopRequireDefault(require("./modules/menu"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let _isLogin = false;
let userData = new Map();
exports.userData = userData;
let userDataCh = new Map();
exports.userDataCh = userDataCh;
let datingList = new Map();
const player = mp.players.local;
mp.events.add('transferMoney', async () => {
  _gui.gui.setGui(null);

  let bankPrefix = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Префикс карты', '', 4));

  let bankNumber = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Номер карты', '', 9));

  let money = _methods.methods.parseInt(await _menu.default.Menu.GetUserInput('Сумма перевода', '', 9));

  mp.events.callRemote('server:bank:transferMoney', bankPrefix, bankNumber, money);
});

const dressSet = (target, data) => {
  for (let param in data) {
    const is_prop = param.includes('p');
    const id = parseInt(param.replace('p', ''));
    const value = data[param];

    if (is_prop) {
      target.setPropIndex(id, value[0], value[1], true);
    } else {
      target.setComponentVariation(id, value[0], value[1], 2);
    }
  }
};

mp.events.add('entityStreamIn', entity => {
  if (entity.type != "player") return;
  const data = entity.getVariable('dressSync');
  if (!data) return;
  dressSet(entity, JSON.parse(data));
});
mp.events.addDataHandler("dressSync", (entity, value) => {
  if (!value) return;
  dressSet(entity, JSON.parse(value));
});
setTimeout(() => {
  mp.events.register('isPlayAnimation', (dict, anim) => {
    return mp.players.local.isPlayingAnim(dict, anim, 3);
  });
  mp.events.register('isPlayTask', () => {
    return mp.players.local.isActiveInScenario();
  });
}, 1000);
setInterval(() => {
  if (!user.isLogin()) return;
  mp.game.stats.statSetInt(mp.game.joaat("SP0_TOTAL_CASH"), user.get('money') + user.get('money_bank'), false);
}, 3000);
mp.events.add('getStreetFromCoord', q => {
  mp.console.logInfo(q);
  if (!q) return;
  let items = JSON.parse(q);
  items.forEach(item => {
    let street = mp.game.ui.getLabelText(mp.game.zone.getNameOfZone(item.posX, item.posY, 0));
    mp.events.triggerBrowser('updateStreet', item.id, street);
  });
});
mp.events.add('drawLocalBlip', (identity, pos, name, blipid, blipcolor, short = true) => {
  let blip = mp.blips.toArray().find(item => item.identity === identity);
  if (blip) blip.destroy();
  let q = mp.blips.new(blipid, pos, {
    color: blipcolor,
    name: name,
    shortRange: short
  });
  q.identity = identity;
  q.setRoute(true);
});
mp.events.add('removeLocalBlip', identity => {
  let blip = mp.blips.toArray().find(item => item.identity === identity);
  if (blip) blip.destroy();
});
mp.events.add('server:login:success:after', () => {
  setTimeout(() => {
    if (user.isLogin() && user.get('jail_time') <= 0) {
      user.updateCharacterFace();
      user.updateCharacterCloth();
    }
  }, 1000);
});
mp.events.add("server:test", () => {
  user.testServer = true;
});
mp.events.add("set:heading", h => {
  mp.players.local.setHeading(h);
});
mp.events.add("checkcomponent", () => {
  user.checkComponent();
});
mp.events.add('user.client.updateChips', chipsBalance => {
  user.chipsBalance = chipsBalance;
  mp.events.triggerBrowser('cef:hud:setChips', chipsBalance);
});
mp.events.add("setLevel", h => {
  user.level = h;
});
mp.events.add("setExp", h => {
  user.exp = h;
});
mp.events.add("played:time", (h, t) => {
  user.online_time = h;
  user.online_today = t;
});
mp.events.add("played:warns", h => {
  user.warns = h;
});
const user = {
  isMale: () => {
    if (player.model == 1885233650) return true;else return false;
  },
  getShowingId: (player = mp.players.local) => {
    if (!mp.players.exists(player)) return -1;
    if (player.getVariable('idLabel')) return player.getVariable('idLabel');
    return player.getVariable('id');
  },
  getShowingIdString: target => {
    if (!mp.players.exists(target)) return "-1";
    if (!target.getVariable('idLabel')) return target.getVariable('id').toString();
    if (target.getVariable('idLabel') == target.getVariable('id')) return target.getVariable('id').toString();
    if (!user.get('admin_level')) return target.getVariable('idLabel').toString();
    return `${user.getShowingId(target)} (RID:${target.getVariable('id')})`;
  },
  warns: 0,
  audioRadioVolume: 1,
  online_time: 0,
  online_today: 0,
  testServer: false,
  showhpap: false,
  adminAdvancedData: false,
  godmode: false,
  isTeleport: false,
  currentId: 0,
  chipsBalance: 0,
  level: 0,
  exp: 0,
  passwords: {},
  hideCurrentWeapon: () => {
    mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);
  },
  passwordCheck: () => {},
  getExp: () => {
    return user.exp;
  },
  getMaxExp: () => {
    return user.getLevel() * 6;
  },
  getLevel: () => {
    return user.level;
  },
  notify: text => {
    _ui.ui.showSubtitle(text);
  },
  getVipData: () => {
    return _vip.vipStatus.getVipStatusData(user.get('vip_status'));
  },
  updateCache: async () => {
    exports.userData = userData = await _data.Container.GetAll(player.remoteId);
  },
  get: item => {
    try {
      if (userData.has(item)) return userData.get(item);
      return undefined;
    } catch (e) {
      _methods.methods.debug('Exception: user.get');

      _methods.methods.debug(e);

      exports.userData = userData = new Map();
      return undefined;
    }
  },
  has: item => {
    return userData.has(item);
  },
  set: (key, value) => {
    userData.set(key, value);
    userDataCh.set(key, value);
  },
  getDating: item => {
    try {
      if (datingList.has(item)) return datingList.get(item);
      return item;
    } catch (e) {
      _methods.methods.debug('Exception: user.getDating');

      _methods.methods.debug(e);

      datingList = new Map();
      return item;
    }
  },
  hasDating: item => {
    return datingList.has(item);
  },
  setDating: (key, value) => {
    datingList.set(key, value);
  },
  getSex: () => {
    if (player.model === mp.game.joaat('mp_f_freemode_01')) return 1;else if (player.model === mp.game.joaat('mp_m_freemode_01')) return 0;else if (user.isLogin()) {
      let skin = JSON.parse(user.get('skin'));
      return skin['SEX'];
    } else return 0;
  },
  getMonth: () => {
    if (user.isLogin()) return _methods.methods.parseInt(user.get('exp_age') / 31);
    return 0;
  },
  setProp: (slot, type, color, check = true) => {
    _methods.methods.debug('user.setProp');

    slot = _methods.methods.parseInt(slot);
    type = _methods.methods.parseInt(type);
    color = _methods.methods.parseInt(color);
    mp.events.callRemote('server:user:setProp', slot, type, color);
  },
  clearAllProp: () => {
    mp.events.callRemote('server:user:clearAllProp');
  },
  kick: reason => {
    mp.events.callRemote('server:player:kick', reason);
  },
  kickAntiCheat: reason => {
    mp.events.callRemote('server:player:kickAntiCheat', reason);
  },
  engineVehicle: () => {
    if (player.vehicle) {
      if (player.vehicle.getVariable('fraction_id') > 0) {
        if (player.vehicle.getVariable('fraction_id') == user.get('fraction_id')) mp.events.callRemote('server:vehicle:engineStatus');else mp.game.ui.notifications.show('~r~У Вас нет ключей от транспорта');
      } else mp.events.callRemote('server:vehicle:engineStatus');
    }
  },
  revive: (hp = 20) => {
    (0, _ach.healProtection)();
    user.isTeleport = true;
    let hospPos = player.position;
    mp.events.callRemote('server:user:respawn', hospPos.x, hospPos.y, hospPos.z);
    player.health = hp;
    player.freezePosition(false);
    setTimeout(function () {
      user.isTeleport = false;
    }, 1500);
  },
  respawn: (x, y, z) => {
    (0, _ach.healProtection)();
    user.isTeleport = true;
    mp.events.callRemote('server:user:respawn', x, y, z);
    setTimeout(function () {
      user.isTeleport = false;
    }, 1500);
  },
  clearChat: () => {
    if (_gui.gui.hudLoaded) {
      _gui.gui.browser.execute(`chatAPI.clear()`);
    }
  },
  hideLoadDisplay: (duration = 500, hud = true) => {
    mp.game.cam.doScreenFadeIn(duration);
    (0, _ach.teleportProtection)(5000);

    if (hud) {
      setTimeout(() => {
        _ui.ui.showHud();
      }, duration);
    }
  },
  showLoadDisplay: (duration = 500, hud = true) => {
    mp.game.cam.doScreenFadeOut(duration);
    (0, _ach.teleportProtection)(5000);

    if (hud) {
      _ui.ui.hideHud();
    }
  },
  addHistory: (type, reason) => {
    mp.events.callRemote('server:user:addHistory', type, reason);
  },
  removeWeapon: hash => {
    if (_data.Container.HasLocally(0, hash.toString())) {
      _data.Container.ResetLocally(0, hash.toString());

      _data.Container.Reset(player.remoteId, hash.toString());
    }

    mp.game.invoke(_methods.methods.REMOVE_WEAPON_FROM_PED, player.handle, hash);
  },
  removeAllWeapons: () => {
    player.removeAllWeapons();

    _weapons.weapons.hashesMap.forEach(item => {
      if (item[0] == 'Unarmed') return;
      let hash = item[1] / 2;
      user.removeWeapon(hash);
    });

    (0, _sync.syncData)();
  },
  giveWeaponByHash: (model, pt, inHand = false) => {
    let modelh = model == "WEAPON_REVOLVER" ? mp.game.joaat(model) << 0 : model;
    mp.game.invoke(_methods.methods.GIVE_WEAPON_TO_PED, player.handle, modelh, pt, true, inHand);

    _data.Container.SetLocally(0, model.toString(), true);

    _data.Container.Set(player.remoteId, model.toString(), pt);
  },
  giveWeapon: (model, pt) => {
    let isGive = false;

    _weapons.weapons.hashesMap.forEach(item => {
      if ('WEAPON_' + item[0].toUpperCase() == model.toUpperCase()) {
        let hash = item[1] / 2;
        mp.game.invoke(_methods.methods.GIVE_WEAPON_TO_PED, player.handle, hash, pt, true, false);

        _data.Container.SetLocally(0, hash.toString(), true);

        _data.Container.Set(player.remoteId, hash.toString(), pt);

        isGive = true;
        return true;
      }
    });

    if (!isGive) _methods.methods.saveLog('CheatEngine', `${user.get('rp_name')} (${user.get('id')}) try give ${model}`);
  },
  teleportv: async (pos, h) => {
    user.isTeleport = true;
    mp.game.streaming.requestCollisionAtCoord(pos.x, pos.y, pos.z);
    user.showLoadDisplay();
    player.freezePosition(true);
    await _methods.methods.sleep(500);
    player.position = pos;

    if (h) {
      mp.players.local.setHeading(h);
      mp.game.cam.setGameplayCamRelativeHeading(0);
    }

    player.freezePosition(false);
    user.hideLoadDisplay();
    await _methods.methods.sleep(500);
    user.isTeleport = false;
  },
  teleportVehV: pos => {
    user.isTeleport = true;
    mp.game.streaming.requestCollisionAtCoord(pos.x, pos.y, pos.z);

    if (mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z)) {
      mp.game.interior.refreshInterior(mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z));
    }

    user.showLoadDisplay();
    setTimeout(function () {
      if (mp.players.local.vehicle) mp.players.local.vehicle.position = new mp.Vector3(pos.x, pos.y, pos.z + 0.5);else mp.players.local.position = pos;
      if (mp.players.local.vehicle) mp.players.local.vehicle.setOnGroundProperly();
      setTimeout(function () {
        user.hideLoadDisplay();
        setTimeout(function () {
          user.isTeleport = false;

          if (mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z)) {
            mp.game.interior.refreshInterior(mp.game.interior.getInteriorAtCoords(pos.x, pos.y, pos.z));
          }
        }, 1000);
      }, 500);
    }, 500);
  },
  teleport: (x, y, z, h) => {
    user.teleportv(new mp.Vector3(x, y, z), h);
  },
  teleportVeh: (x, y, z) => {
    user.teleportVehV(new mp.Vector3(x, y, z));
  },
  tpToWaypoint: () => {
    try {
      let entity = mp.players.local.vehicle && mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle ? mp.players.local.vehicle : mp.players.local;

      let pos = _methods.methods.getWaypointPosition();

      if (pos.x != 0) {
        user.teleport(pos.x, pos.y, pos.z);
        setTimeout(() => {
          const z = mp.game.gameplay.getGroundZFor3dCoord(entity.position.x, entity.position.y, entity.position.z, 0.0, false);
          entity.setCoordsNoOffset(entity.position.x, entity.position.y, z, false, false, false);
          setTimeout(() => {
            const z = mp.game.gameplay.getGroundZFor3dCoord(entity.position.x, entity.position.y, entity.position.z + 1000, 0.0, false);
            entity.setCoordsNoOffset(entity.position.x, entity.position.y, z, false, false, false);
          }, 200);
        }, 600);
      }
    } catch (e) {
      mp.console.logError(e);
    }
  },
  setWaypoint: (x, y) => {
    mp.game.ui.setNewWaypoint(_methods.methods.parseInt(x), _methods.methods.parseInt(y));
    if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, 0, x, y, 0, true) < 1) return;

    _ui.ui.showSubtitle('Метка в ~g~GPS~s~ была установлена');
  },
  setWaypointTarget: (x, y, z) => {
    _jobPoint.jobPoint.create(new mp.Vector3(x, y, z - 2), true, 20, true);

    _ui.ui.showSubtitle('Метка в ~g~GPS~s~ была установлена');
  },
  clearWaypointTarget: () => {
    _jobPoint.jobPoint.delete();
  },
  removeWaypoint: () => {
    user.setWaypoint(player.position.x, player.position.y);
  },
  isLogin: () => {
    return _isLogin;
  },
  isAdmin: (adminLevel = 1) => {
    return user.get('admin_level') >= adminLevel;
  },
  stopAllAnimation: () => {
    if (!player.getVariable('isBlockAnimation')) {
      if (_data.Container.HasLocally(0, 'hasSeat')) {
        let plPos = player.position;
        player.freezePosition(false);
        player.setCollision(true, true);
        player.position = new mp.Vector3(plPos.x, plPos.y, plPos.z + 0.95);

        _data.Container.ResetLocally(0, 'hasSeat');
      }

      mp.events.callRemote('server:stopAllAnimation');
    }
  },
  stopScenario: () => {
    mp.events.callRemote('server:stopScenario');
  },
  playScenario: (name, x, y, z, h, teleport = true) => {
    if (_newrage.RAGE_BETA) return mp.events.call('client:syncScenario', mp.players.local.remoteId, name, x, y, z, h, teleport);
    mp.events.callRemote('server:playScenario', name, x, y, z, h, teleport);
  },
  playNearestScenarioCoord: (x, y, z, r) => {
    mp.events.callRemote('server:playNearestScenarioCoord', x, y, z, r);
  },
  playAnimation: (dict, anim, flag = 49, accessVeh = false) => {
    if (player.getVariable('isBlockAnimation') || player.isInAnyVehicle(false) && !accessVeh || user.isDead()) return;
    if (_newrage.RAGE_BETA) return mp.events.call('client:syncAnimation', mp.players.local.remoteId, dict, anim, _methods.methods.parseInt(flag), accessVeh);
    mp.events.callRemote('server:playAnimation', dict, anim, _methods.methods.parseInt(flag), accessVeh);
  },
  playArrestAnimation: () => {
    if (player.getVariable('isBlockAnimation') || player.isInAnyVehicle(false) || user.isDead() || _methods.methods.isBlockKeys()) return;
    mp.events.callSocket('server:playArrestAnimation');
  },
  playAnimationWithUser: (toId, animType) => {
    if (player.getVariable('isBlockAnimation') || player.isInAnyVehicle(false) || user.isDead()) return;
    mp.events.callSocket('server:playAnimationWithUser', toId, animType);
  },
  playPhoneAnimation: () => {},
  setIsLogin: isLogin => {
    _isLogin = isLogin;

    _gui.gui.updateChatSettings();
  },
  setVariable: (key, value) => {
    mp.events.callSocket('server:user:serVariable', key, value);
  },
  setVirtualWorld: worldId => {
    mp.events.callRemote('server:user:setVirtualWorld', worldId);
  },
  setPlayerModel: model => {
    mp.events.callRemote('server:user:setPlayerModel', model);
  },
  saveAccount: () => {
    mp.events.callRemote('server:user:saveAccount');
  },
  checkComponent: () => {
    if (user.getGrabMoney()) user.setComponentVariation(5, 45, 0, true);else user.setComponentVariation(5, 0, 0, true);
  },
  setComponentVariation: (component, drawableId, textureId, nocheck = false) => {
    component = _methods.methods.parseInt(component);
    drawableId = _methods.methods.parseInt(drawableId);
    textureId = _methods.methods.parseInt(textureId);
    mp.events.callSocket('server:user:setComponentVariation', component, drawableId, textureId, nocheck);
  },
  giveJobMoney: money => {
    if (user.get('skill_' + user.get('job')) >= 500) money = _methods.methods.parseInt(money * 1.5);

    if (user.get('bank_prefix') < 1) {
      user.addCashMoney(money);
      mp.game.ui.notifications.show('Вы заработали ~g~$' + _methods.methods.numberFormat(money));
      mp.game.ui.notifications.show('~y~Оформите банковскую карту');
    } else {
      user.addBankMoney(money);
      user.sendSmsBankOperation(`Зачисление средств: ~g~$${money}`);
    }

    mp.events.callRemote('server:user:addJobMoney', money);

    _coffer.coffer.removeMoney(money);

    switch (user.get('job')) {
      case 'mail':
        _business.business.addMoney(115, _methods.methods.parseInt(money / 2));

        break;

      case 'mail2':
        _business.business.addMoney(119, _methods.methods.parseInt(money / 2));

        break;

      case 'bgstar':
        _business.business.addMoney(116, _methods.methods.parseInt(money / 2));

        break;

      case 'sunb':
        _business.business.addMoney(117, _methods.methods.parseInt(money / 2));

        break;

      case 'three':
        _business.business.addMoney(118, _methods.methods.parseInt(money / 2));

        break;

      case 'photo':
        _business.business.addMoney(92, _methods.methods.parseInt(money / 2));

        break;
    }
  },
  giveJobSkill: () => {
    mp.events.callRemote('server:user:giveJobSkill');
  },
  takeTool: () => {
    if (_data.Container.HasLocally(player.id, 'workerTool')) {
      mp.game.ui.notifications.show('~r~Вы уже взяли инструменты');
      return;
    }

    _data.Container.SetLocally(player.id, 'workerTool', true);

    mp.game.ui.notifications.show('~g~Вы взяли инструменты');
  },
  sendSmsBankOperation: (text, title = 'Операция со счётом') => {
    switch (user.get('bank_prefix')) {
      case 1111:
        mp.game.ui.notifications.showWithPicture(title, '~r~Maze~s~ Bank', text, 'CHAR_BANK_MAZE', 2);
        break;

      case 2222:
        mp.game.ui.notifications.showWithPicture(title, '~g~Fleeca~s~ Bank', text, 'CHAR_BANK_FLEECA', 2);
        break;

      case 3333:
        mp.game.ui.notifications.showWithPicture(title, '~b~Blaine~s~ Bank', text, 'DIA_CUSTOMER', 2);
        break;

      case 4444:
        mp.game.ui.notifications.showWithPicture(title, '~o~Pacific~s~ Bank', text, 'WEB_SIXFIGURETEMPS', 2);
        break;
    }
  },
  unEquipAllWeapons: () => {
    return new Promise(async resolve => {
      for (let n = 54; n < 138; n++) {
        for (let id in _weapons.weapons.hashesMap) {
          let item = _weapons.weapons.hashesMap[id];

          if (item[0] === _items_old.items_old.getItemNameHashById(n)) {
            if (mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, player.handle, mp.game.gameplay.getHashKey('WEAPON_' + item[0].toUpperCase()), false)) {
              let hash = item[1] / 2;

              let ammoItem = _inventory.inventory.ammoTypeToAmmo(mp.game.invoke(_methods.methods.GET_PED_AMMO_TYPE_FROM_WEAPON, player.handle, hash));

              if (ammoItem != -1) {
                _inventory.inventory.unEquipItem(ammoItem, mp.game.invoke(_methods.methods.GET_AMMO_IN_PED_WEAPON, player.handle, hash));

                await _methods.methods.sleep(100);
              }

              _inventory.inventory.unEquipItem(n);
            }
          }
        }
      }

      (0, _sync.syncData)();
      resolve(true);
    });
  },
  cuff: () => {
    mp.events.callRemote('server:user:cuff');
  },
  unCuff: () => {
    mp.events.callRemote('server:user:unCuff');
  },
  isCuff: () => {
    return player.getVariable('isCuff') === true;
  },
  tie: () => {
    mp.events.callRemote('server:user:tie');
  },
  unTie: () => {
    mp.events.callRemote('server:user:unTie');
  },
  isTie: () => {
    return player.getVariable('isCuff') === true;
  },
  setCacheData: data => {
    exports.userData = userData = data;
    user.currentId = data.get('id') + 1000000;
  },
  getCacheData: () => {
    return userData;
  },
  getRegStatusName: () => {
    switch (user.get('reg_status')) {
      case 1:
        return 'временная';

      case 2:
        return 'получение гражданства';

      case 3:
        return 'гражданство США';

      default:
        return '~r~Нет';
    }
  },
  updateCharacterFace: (isLocal = false) => {
    try {
      if (!isLocal) mp.events.callRemote('server:user:updateCharacterFace');else {
        player.setHeadBlendData(user.get('GTAO_SHAPE_THRID_ID'), user.get('GTAO_SHAPE_SECOND_ID'), 0, user.get('GTAO_SKIN_THRID_ID'), user.get('GTAO_SKIN_SECOND_ID'), 0, user.get('GTAO_SHAPE_MIX'), user.get('GTAO_SKIN_MIX'), 0, true);
        let features;

        if (typeof user.get('GTAO_FACE_SPECIFICATIONS') == 'string') {
          features = JSON.parse(user.get('GTAO_FACE_SPECIFICATIONS'));
        } else {
          features = user.get('GTAO_FACE_SPECIFICATIONS');
        }

        if (features) {
          features.forEach((item, id) => {
            player.setFaceFeature(id, item);
          });
        }

        player.setComponentVariation(2, user.get('GTAO_HAIR'), 0, 2);
        player.setHeadOverlay(2, user.get('GTAO_EYEBROWS'), 1.0, user.get('GTAO_EYEBROWS_COLOR'), 0);
        player.setHairColor(user.get('GTAO_HAIR_COLOR'), user.get('GTAO_HAIR_COLOR2'));
        player.setEyeColor(user.get('GTAO_EYE_COLOR'));
        player.setHeadOverlayColor(2, 1, user.get('GTAO_EYEBROWS_COLOR'), 0);
        player.setHeadOverlay(9, user.get('GTAO_OVERLAY9'), 1.0, user.get('GTAO_OVERLAY9_COLOR'), 0);

        if (user.getSex() == 0) {
          if (user.get('GTAO_OVERLAY10') != -1) player.setHeadOverlay(10, user.get('GTAO_OVERLAY10'), 1.0, user.get('GTAO_OVERLAY10_COLOR'), 0);
          player.setHeadOverlay(1, user.get('GTAO_OVERLAY'), 1.0, user.get('GTAO_OVERLAY_COLOR'), 0);
        } else if (user.getSex() == 1) {
          if (user.get('GTAO_OVERLAY4') != -1) player.setHeadOverlay(4, user.get('GTAO_OVERLAY4'), 1.0, user.get('GTAO_OVERLAY4_COLOR'), 0);
          if (user.get('GTAO_OVERLAY5') != -1) player.setHeadOverlay(5, user.get('GTAO_OVERLAY5'), 1.0, user.get('GTAO_OVERLAY5_COLOR'), 0);
          if (user.get('GTAO_OVERLAY8') != -1) player.setHeadOverlay(8, user.get('GTAO_OVERLAY8'), 1.0, user.get('GTAO_OVERLAY8_COLOR'), 0);
        }
      }
    } catch (e) {
      mp.console.logInfo('updateCharacterFace', e);
    }
  },
  updateCharacterCloth: () => {
    mp.events.callRemote('server:user:updateCharacterCloth');
  },
  updateTattoo: () => {
    mp.events.callRemote('server:user:updateTattoo');
  },
  setDecoration: (slot, type) => {
    mp.events.callRemote('server:user:setDecoration', slot, type);
  },
  clearDecorations: () => {
    mp.events.callRemote('server:user:clearDecorations');
  },
  addMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:addMoney', money);
  },
  removeMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:removeMoney', money);
  },
  setMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:setMoney', money);
  },
  getMoney: () => {
    return user.getCashMoney();
  },
  addBankMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:addBankMoney', money);
  },
  removeBankMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:removeBankMoney', money);
  },
  setBankMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:setBankMoney', money);
  },
  getBankMoney: () => {
    return _methods.methods.parseInt(user.get('money_bank'));
  },
  addCashMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:addCashMoney', money);
  },
  removeCashMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:removeCashMoney', money);
  },
  setCashMoney: money => {
    money = _methods.methods.parseInt(money);
    mp.events.callRemote('server:user:setCashMoney', money);
  },
  getCashMoney: () => {
    return _methods.methods.parseInt(user.get('money'));
  },
  addGrabMoney: money => {
    money = _methods.methods.parseInt(money);
    user.setGrabMoney(user.getGrabMoney() + money);
  },
  removeGrabMoney: money => {
    money = _methods.methods.parseInt(money);
    user.setGrabMoney(user.getGrabMoney() - money);
  },
  setGrabMoney: money => {
    money = _methods.methods.parseInt(money);

    _data.Container.SetLocally(0, 'GrabMoney', money);

    if (money > 0) user.setComponentVariation(5, 45, 0);else user.setComponentVariation(5, 0, 0);
  },
  getGrabMoney: () => {
    return _methods.methods.parseInt(_data.Container.GetLocally(0, 'GrabMoney'));
  },
  addDrugLevel: (type, level) => {
    user.setDrugLevel(type, user.getDrugLevel(type) + level);
  },
  removeDrugLevel: (type, level) => {
    user.setDrugLevel(type, user.getDrugLevel(type) - level);
  },
  setDrugLevel: (type, level) => {
    _data.Container.SetLocally(0, 'DrugLevel' + type, level);
  },
  getDrugLevel: type => {
    return _methods.methods.parseInt(_data.Container.GetLocally(0, 'DrugLevel' + String(type)));
  },
  stopAllScreenEffect: () => {
    mp.game.invoke(_methods.methods.STOP_ALL_SCREEN_EFFECTS);
  },
  setHeal: level => {
    mp.events.callRemote('server:user:setHeal', level);
  },
  grabGun: async shopId => {
    if (user.get('fraction_id2') == 0) {
      mp.game.ui.notifications.show('~r~Необходимо состоять в неоф. организации');
      return;
    }

    if (_weather.weather.getHour() < 23 && _weather.weather.getHour() > 4) {
      mp.game.ui.notifications.show('~r~Доступно только с 23 до 4 утра игрового времени');
      return;
    }

    if (await _data.Container.Has(shopId, 'isGrabShop')) {
      mp.game.ui.notifications.show('~r~В данный момент нельзя совершить ограбление');
      return;
    }

    if (_methods.methods.getRandomInt(0, 3) == 1) {
      _inventory.inventory.takeNewItem(71).then();

      _inventory.inventory.takeNewItem(27, 140).then();

      mp.game.ui.notifications.show('~g~Вы нашли P99');
    } else if (_methods.methods.getRandomInt(0, 100) == 1) {
      _inventory.inventory.takeNewItem(103).then();

      _inventory.inventory.takeNewItem(153, 140).then();

      mp.game.ui.notifications.show('~g~Вы нашли MP5A3');
    } else {
      _inventory.inventory.takeNewItem(77).then();

      _inventory.inventory.takeNewItem(27, 140).then();

      mp.game.ui.notifications.show('~g~Вы нашли Taurus PT92');
    }
  },
  grab: async shopId => {
    if (mp.players.local.dimension != 0) return mp.game.ui.notifications.show('~r~Нельзя грабить в виртуальном измерении');
    if (user.isGos()) return user.notify("~r~Вы не можете грабить");
    mp.events.callRemote('server:user:grab', shopId);
  },
  setData: (key, value) => {
    _data.Container.Set(player.remoteId, key, value);

    try {
      userData.set(key, value);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  resetData: key => {
    _data.Container.Reset(player.remoteId, key);

    try {
      userData.set(key, null);
    } catch (e) {
      _methods.methods.debug(e);
    }
  },
  giveWanted: (level, reason) => {
    mp.events.callRemote('server:user:giveMeWanted', level, reason);
  },
  isDead: (target = mp.players.local) => {
    return target.getHealth() <= 0;
  },
  getPlayerFraction: () => {
    return user.get('fraction_id');
  },
  getFractionName: fractionId => {
    return fractionId == 0 ? 'нет' : _fractions.fractionUtil.getFractionName(fractionId);
  },
  getRankName: (fractionId, rank) => _fractions.fractionUtil.getRankName(fractionId, rank),
  isLeader2: () => {
    return user.isLogin() && user.get('rank2') == 11;
  },
  isSubLeader2: () => {
    if (!user.isLogin()) return false;
    return user.get('rank2') >= 9;
  },
  isLeader: () => {
    return user.isLogin() && _fractions.fractionUtil.isLeader(user.get('fraction_id'), user.get('rank'));
  },
  isSubLeader: () => {
    if (!user.isLogin()) return false;
    return _fractions.fractionUtil.isSubLeader(user.get('fraction_id'), user.get('rank'));
  },
  isGos: () => {
    return user.isLogin() && (user.isSapd() || user.isFib() || user.isUsmc() || user.isGov() || user.isEms() || user.isSheriff() || user.isAutoschool() || user.isPrison());
  },
  isGang: () => {
    if (!user.isLogin()) return false;

    let itm = _fractions.fractionUtil.getFraction(user.getPlayerFraction());

    if (!itm) return false;
    return !!_fractions.fractionUtil.getFraction(user.getPlayerFraction()).gang;
  },
  isPolice: () => {
    return user.isLogin() && (user.isSapd() || user.isFib() || user.isUsmc() || user.isSheriff() || user.isPrison());
  },
  isGov: () => {
    return user.isLogin() && user.get('fraction_id') == 1;
  },
  isSapd: () => {
    return user.isLogin() && user.get('fraction_id') == 2;
  },
  isFib: () => {
    return user.isLogin() && user.get('fraction_id') == 3;
  },
  isUsmc: () => {
    return user.isLogin() && user.get('fraction_id') == 4;
  },
  isSheriff: () => {
    return user.isLogin() && user.get('fraction_id') == 7;
  },
  isPrison: () => {
    return user.isLogin() && user.get('fraction_id') == 5;
  },
  isRussianMafia: () => {
    return user.isLogin() && user.get('fraction_id') == 8;
  },
  isCosaNostra: () => {
    return user.isLogin() && user.get('fraction_id') == 9;
  },
  isYakuza: () => {
    return user.isLogin() && user.get('fraction_id') == 10;
  },
  isLaEme: () => {
    return user.isLogin() && user.get('fraction_id') == 11;
  },
  isMafia: () => {
    return user.isLogin() && (user.isRussianMafia() || user.isCosaNostra() || user.isYakuza() || user.isLaEme());
  },
  isEms: () => {
    return user.isLogin() && user.get('fraction_id') == 16;
  },
  isAutoschool: () => {
    return user.isLogin() && user.get('fraction_id') == 17;
  }
};
exports.user = user;
},{"./modules/data":"Edcz","./modules/methods":"qXSp","./modules/ui":"zOnK","./coffer":"sKID","./business":"y5vZ","./managers/weather":"uehX","./weapons":"YeMF","./items_old":"A2KQ","./inventory":"m5ow","./modules/gui":"bk91","./managers/jobPoint":"AmGY","./managers/sync.elements":"fsEp","../util/fractions":"Zeqt","../util/newrage":"mgLX","../util/vip":"jh2U","./modules/ach":"ygeq","./modules/menu":"Aiz7"}],"zK0g":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.builder = void 0;

var _methods = require("../modules/methods");

var _user = require("../user");

var _coffer = require("../coffer");

var _menuList = require("../menuList");

var _jobPoint = require("../managers/jobPoint");

var _minigame = require("../modules/minigame");

var _gui = require("../modules/gui");

let isStart = false;
let isProcess = false;
let count = 0;

let _checkpointId = -1;

let builder = {
  isStart: false,
  markers: [[-172.2479, -991.1088, 253.1315, 79.50198, 0], [-172.7199, -992.7151, 253.1314, 79.54372, 0], [-173.3227, -995.3729, 253.1315, 76.74725, 0], [-174.2205, -998.3889, 253.1315, 79.56352, 0], [-170.3128, -1004.923, 253.1315, 163.8139, 0], [-167.2567, -1005.97, 253.1315, 159.6735, 0], [-164.6741, -1006.969, 253.1314, 160.206, 0], [-152.5995, -983.616, 268.2276, 162.2194, 1], [-163.3634, -955.0497, 268.2273, 69.25684, 1], [-135.2024, -981.0098, 253.3519, 252.521, 1], [-183.3535, -1017.348, 253.3521, 161.8717, 1], [-177.6228, -968.9905, 253.3519, 69.92053, 1], [-166.073, -962.3404, 268.2276, 74.31129, 1], [-192.6118, -1010.344, 253.3521, 66.1328, 1], [-177.2914, -1019.575, 253.3519, 165.48, 1], [-192.6118, -1010.344, 253.3521, 66.1328, 1]],
  startOrEnd: function () {
    try {
      _methods.methods.debug('Execute: builder.startOrEnd');

      if (_user.user.get('job') == 'gr6') {
        mp.game.ui.notifications.show('~b~Вы не можете работать на этой работе сейчас');
        return;
      }

      if (isStart) {
        _jobPoint.jobPoint.delete();

        _user.user.updateCharacterCloth();

        mp.game.ui.notifications.show('~b~Вы закончили рабочий день');
        isStart = false;
        isProcess = false;
        _checkpointId = -1;
      } else {
        mp.game.ui.notifications.show('~b~Вы начали рабочий день');
        mp.game.ui.notifications.show('~b~Поднимитесь в башню, чтобы начать работать');

        if (_user.user.getSex() == 1) {
          _user.user.setComponentVariation(3, 55, 0);

          _user.user.setComponentVariation(8, 36, 0);

          _user.user.setComponentVariation(11, 0, 0);
        } else {
          _user.user.setComponentVariation(3, 30, 0);

          _user.user.setComponentVariation(8, 59, _methods.methods.getRandomInt(0, 2));

          _user.user.setComponentVariation(11, 0, 0);
        }

        isStart = true;
        builder.findRandomPickup();
      }

      builder.isStart = isStart;
    } catch (e) {
      _methods.methods.debug('Exception: builder.startOrEnd');

      _methods.methods.debug(e);
    }
  },
  findRandomPickup: function () {
    try {
      _methods.methods.debug('Execute: builder.findRandomPickup');

      if (isProcess || !isStart) return;

      let pickupId = _methods.methods.getRandomInt(0, 15);

      _checkpointId = _jobPoint.jobPoint.create(new mp.Vector3(builder.markers[pickupId][0], builder.markers[pickupId][1], builder.markers[pickupId][2]));
    } catch (e) {
      _methods.methods.debug('Exception: builder.findRandomPickup');

      _methods.methods.debug(e);
    }
  },
  workProcess: function () {
    try {
      _methods.methods.debug('Execute: builder.findRandomPickup');

      if (isProcess || !isStart) return;
      let pos = mp.players.local.position;
      builder.markers.forEach(function (item) {
        let pPos = new mp.Vector3(item[0], item[1], item[2]);

        if (_methods.methods.distanceToPos(pPos, pos) < 2) {
          mp.players.local.position = pPos;
          mp.players.local.setHeading(item[3]);

          _jobPoint.jobPoint.delete();

          _checkpointId = -1;
          isProcess = true;

          _methods.methods.disableAllControls(true);

          _user.user.playScenario(Math.floor(item[4]) == 0 ? "WORLD_HUMAN_WELDING" : "WORLD_HUMAN_HAMMERING");

          (0, _minigame.playMinigame)("hammer").then(status => {
            isProcess = false;

            _methods.methods.disableAllControls(false);

            _user.user.stopScenario();

            if (!status) {
              mp.game.ui.notifications.show('~r~Вы ничего не заработали');
            } else {
              count++;
              builder.takeMoney();

              _user.user.setData('skill_builder', _user.user.get('skill_builder') + 1);
            }

            builder.findRandomPickup();
          });
        }
      });
    } catch (e) {
      _methods.methods.debug('Exception: builder.findRandomPickup');

      _methods.methods.debug(e);
    }
  },
  takeMoney: function () {
    try {
      _methods.methods.debug('Execute: builder.takeMoney');

      if (count > 0) {
        let money = count * 5;
        if (_user.user.get('skill_builder') >= 2 && _user.user.get('skill_builder') < 4) money = money * 2;else if (_user.user.get('skill_builder') >= 4 && _user.user.get('skill_builder') < 6) money = money * 3;else if (_user.user.get('skill_builder') >= 6 && _user.user.get('skill_builder') < 8) money = money * 4;else if (_user.user.get('skill_builder') >= 8 && _user.user.get('skill_builder') < 10) money = money * 5;else if (_user.user.get('skill_builder') >= 10) money = money * 6;

        _user.user.giveJobMoney(money);

        _coffer.coffer.removeMoney(money);

        mp.game.ui.notifications.show('Вы заработали ~g~$' + _methods.methods.numberFormat(money));
        count = 0;
        return;
      }

      mp.game.ui.notifications.show('~r~Вы ничего не заработали');
    } catch (e) {
      _methods.methods.debug('Exception: builder.takeMoney');

      _methods.methods.debug(e);
    }
  },
  checkPressE: function () {
    let distanceCheck = 2;
    if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(-142.2255, -936.2115, 28.29189)) < distanceCheck) _menuList.menuList.showJobBuilderMenu();
  }
};
exports.builder = builder;
mp.events.add("playerEnterCheckpoint", checkpoint => {
  if (_gui.gui.isActionGui()) return;
  if (_checkpointId == -1 || _checkpointId == undefined) return;
  if (checkpoint.id == _checkpointId) builder.workProcess();
});
},{"../modules/methods":"qXSp","../user":"QE3B","../coffer":"sKID","../menuList":"U1Al","../managers/jobPoint":"AmGY","../modules/minigame":"KnNo","../modules/gui":"bk91"}],"iryQ":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCompanyName = void 0;

const getCompanyName = company => {
  switch (company) {
    case 'swater':
    case 'sground':
      return 'Humane Labs';

    case 'water':
      return 'Water & Power';

    case 'sunb':
      return 'Sunset Bleach';

    case 'bgstar':
      return 'Bugstars';

    case 'lawyer1':
      return 'Slaughter, Slaughter & Slaughter';

    case 'lawyer2':
      return 'Bullhead';

    case 'lawyer3':
      return 'Pearson Specter';

    case 'mail':
      return 'PostOp';

    case 'mail2':
      return 'GoPostal';

    case 'gr6':
      return 'Gruppe6';

    case 'three':
      return 'OConnor';

    case 'photo':
      return 'Life Invader';

    case 'taxi1':
      return 'Downtown Cab Co.';

    case 'taxi2':
      return 'Express Car Service';

    default:
      return 'Государство';
  }
};

exports.getCompanyName = getCompanyName;
},{}],"qXSp":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.methods = void 0;

var _data = require("./data");

var _enums = require("../enums");

var _builder = require("../jobs/builder");

var _cleaner = require("../jobs/cleaner");

var _timer = require("./timer");

var _menuList = require("../menuList");

var _menu = _interopRequireDefault(require("./menu"));

var _user = require("../user");

var _roadWorker = require("../jobs/roadWorker");

var _mainer = require("../jobs/mainer");

var _inventory = require("../inventory");

var _gui = require("./gui");

var _level = require("../../util/level");

var _fractions = require("../../util/fractions");

var _company = require("../../util/company.names");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let testServer = false;
mp.events.add("server:test", () => {
  testServer = true;
});
const streamedPlayers = new Set();
mp.events.add({
  entityStreamIn: entity => {
    if (entity.type === 'player') {
      streamedPlayers.add(entity);
    }
  },
  entityStreamOut: entity => {
    if (entity.type === 'player') {
      streamedPlayers.delete(entity);
    }
  }
});
const meriaDoorsPos = new mp.Vector3(-544.89, -204.41, 38.21);
let checkedDoors = false;
setInterval(() => {
  if (checkedDoors) return;
  const dist = methods.distanceToPos(mp.players.local.position, meriaDoorsPos) < 6;

  if (dist) {
    checkedDoors = true;

    if (!mp.game.object.getClosestObjectOfType(meriaDoorsPos.x, meriaDoorsPos.y, meriaDoorsPos.z, 10, mp.game.joaat('maindoor'), false, false, false)) {
      _user.user.notify('~r~У вас не загружен интерьер здания мерии. Вам необходимо полностью перезайти в игру');
    }
  }
}, 3000);
let gangZoneList = [];
let methods = {
  getTimeStamp: function () {
    return Date.now() / 1000 | 0;
  },
  getTimeStampMS: function () {
    return Date.now() | 0;
  },
  unixTimeStampToDateTime: function (timestamp) {
    let dateTime = new Date(timestamp * 1000);
    return `${methods.digitFormat(dateTime.getDate())}/${methods.digitFormat(dateTime.getMonth() + 1)}/${dateTime.getFullYear()} ${methods.digitFormat(dateTime.getHours())}:${methods.digitFormat(dateTime.getMinutes())}`;
  },
  pointInBox: (point, vs) => {
    let min1 = 99999999999999;
    let max1 = -1111111111111;
    let min2 = 99999999999999;
    let max2 = -1111111111111;

    for (let id in vs) {
      let item = vs[id];
      let item1 = item[0];
      let item2 = item[1];
      if (item1 < min1) min1 = item1;
      if (item2 < min2) min2 = item2;
      if (item1 > max1) max1 = item1;
      if (item2 > max2) max2 = item2;
    }

    let point1 = point[0];
    let point2 = point[1];
    if (point1 < min1) return false;
    if (point2 < min2) return false;
    if (point1 > max1) return false;
    if (point2 > max2) return false;
    return true;
  },
  GIVE_WEAPON_TO_PED: '0xBF0FD6E56C964FCB',
  REMOVE_WEAPON_FROM_PED: '0x4899CB088EDF59B8',
  HAS_PED_GOT_WEAPON: '0x8DECB02F88F428BC',
  GET_AMMO_IN_PED_WEAPON: '0x015A522136D7F951',
  GET_PED_AMMO_TYPE_FROM_WEAPON: '0x7FEAD38B326B9F74',
  ADD_AMMO_TO_PED: '0x78F0424C34306220',
  SET_PED_AMMO: '0x14E56BC5B5DB6A19',
  IS_WAYPOINT_ACTIVE: '0x1DD1F58F493F1DA5',
  SET_ENABLE_HANDCUFFS: '0xDF1AF8B5D56542FA',
  TASK_GO_TO_ENTITY: '0x6A071245EB0D1882',
  SET_PED_KEEP_TASK: '0x971D38760FBC02EF',
  TASK_ENTER_VEHICLE: '0xC20E50AA46D09CA8',
  FREEZE_ENTITY_POSITION: '0x428CA6DBD1094446',
  SET_INTERIOR_PROP_COLOR: '0xC1F1920BAF281317',
  DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION: '0xD8050E0EB60CF274',
  SET_RADIO_TO_STATION_INDEX: '0xA619B168B8A8570F',
  SET_FRONTEND_RADIO_ACTIVE: '0xF7F26C6E9CC9EBB8',
  GET_PLAYER_RADIO_STATION_INDEX: '0xE8AF77C4C06ADC93',
  PLAY_SOUND_FROM_ENTITY: '0xE65F427EB70AB1ED',
  GET_SOUND_ID: '0x430386FE9BF80B45',
  STOP_ALL_SCREEN_EFFECTS: '0xB4EDDC19532BFB85',
  SET_ENTITY_COORDS_NO_OFFSET: '0x239A3351AC1DA385',
  SET_PED_CAN_BE_TARGETTED: '0x63F58F7C80513AAD',
  SET_PED_CAN_BE_TARGETTED_BY_PLAYER: '0x66B57B72E0836A76',
  SET_BLOCKING_OF_NON_TEMPORARY_EVENTS: '0x9F8AA94D6D97DBF4',
  TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS: '0x90D2156198831D69',
  SET_ENTITY_INVINCIBLE: '0x3882114BDE571AD4',
  SET_PED_CAN_RAGDOLL: '0xB128377056A54E2A',
  SET_PED_CAN_EVASIVE_DIVE: '0x6B7A646C242A7059',
  SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE: '0xBC0ED94165A48BC2',
  SET_PED_AS_ENEMY: '0x02A0C9720B854BFA',
  SET_CAN_ATTACK_FRIENDLY: '0xB3B1CB349FF9C75D',
  SET_PED_DEFAULT_COMPONENT_VARIATION: '0x45EEE61580806D63',
  TASK_START_SCENARIO_IN_PLACE: '0x142A02425FF02BD9',
  TASK_PLAY_ANIM: '0xEA47FE3719165B94',
  DELETE_ENTITY: '0xAE3CBE5BF394C9C9',
  DELETE_PED: '0x9614299DCB53E54B',
  PLAY_AMBIENT_SPEECH1: '0x8E04FEDD28D42462',
  SET_ENTITY_AS_NO_LONGER_NEEDED: '0xB736A491E64A32CF',
  SET_PED_AS_NO_LONGER_NEEDED: '0xB736A491E64A32CF',
  SET_MODEL_AS_NO_LONGER_NEEDED: '0xE532F5D78798DAAB',
  SET_ENTITY_AS_MISSION_ENTITY: '0xAD738C3085FE7E11',
  SET_VEHICLE_MOD: '0x6AF0636DDEDCB6DD',
  SET_VEHICLE_UNDRIVEABLE: '0x8ABA6AF54B942B95',
  GET_SELECTED_PED_WEAPON: '0x0A6DB4965674D243',
  filter: str => {
    if (!str) return str;
    if (typeof str !== "string") return str;
    return str.replace(/[^-0-9A-Zа-я-[\]() ]/gim, '');
  },
  createBlip: (pos, sprite, color, scale, name, dimension) => {
    if (scale == undefined) scale = 0.8;
    if (dimension == undefined) dimension = -1;
    return mp.blips.new(sprite, pos, {
      name,
      color,
      scale,
      shortRange: true,
      dimension
    });
  },
  isTestServer: () => testServer,
  debug: (text, ...args) => {
    if (!testServer) return;
    let dateTime = new Date();
    let dateResult = methods.digitFormat(dateTime.getHours()) + ':' + methods.digitFormat(dateTime.getMinutes()) + ':' + methods.digitFormat(dateTime.getSeconds());
    mp.console.logInfo(`[DEBUG | ${dateResult}] ${text}`, ...args);
  },
  parseInt: str => {
    if (typeof str == "string") str = parseInt(str);else str = Math.floor(str);
    if (isNaN(str)) str = 0;
    return str;
  },
  parseFloat: str => {
    if (typeof str == "string") str = parseFloat(str);else str = parseFloat(str.toFixed(2));
    if (isNaN(str)) str = 0;
    return str;
  },
  saveLog: (name, log) => {
    mp.events.callRemote('server:methods:saveLog', name, log);
  },
  getWaypointPosition: () => {
    let pos = new mp.Vector3(0, 0, 0);

    if (mp.game.invoke('0x1DD1F58F493F1DA5')) {
      let blipInfoIdIterator = mp.game.invoke('0x186E5D252FA50E7D');

      for (let index = mp.game.invoke('0x1BEDE233E6CD2A1F', blipInfoIdIterator); mp.game.invoke('0xA6DB27D19ECBB7DA', index); index = mp.game.invoke('0x14F96AA50D6FBEA7', blipInfoIdIterator)) if (mp.game.invoke('0xBE9B0959FFD0779B', index) == 4) pos = mp.game.ui.getBlipInfoIdCoord(index);

      pos.z += 1550;
    }

    return pos;
  },
  isBlockKeys: () => {
    return _menu.default.Menu.IsShowInput() || _user.user.isCuff() || _user.user.isTie() || _user.user.isDead() || !_inventory.inventory.isHide() || _gui.gui.currentGui === 'casino' || _gui.gui.currentGui === 'inventory' || _gui.gui.currentGui === 'tablet' || _gui.gui.currentGui === 'atm';
  },
  isShowInput: () => {
    return _menu.default.Menu.IsShowInput();
  },
  sleep: (ms = 500) => {
    return new Promise(res => setTimeout(res, ms));
  },
  wait: ms => {
    mp.game.wait(ms);
  },
  randomStr: (len, arr = '1234567890abcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXY') => {
    var ans = '';

    for (var i = len; i > 0; i--) {
      ans += arr[Math.floor(Math.random() * arr.length)];
    }

    return ans;
  },
  getRandomInt: (min, max) => {
    return Math.floor(Math.random() * (max - min)) + min;
  },
  distanceToPos: (v1, v2) => {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2) + Math.pow(v2.z - v1.z, 2)));
  },
  distanceToPos2D: (v1, v2) => {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2)));
  },
  updateGangZoneList: data => {
    try {
      methods.debug('Execute: checkpoint.updateGangZoneList');
      gangZoneList = gangZoneList.concat(data);
    } catch (e) {
      methods.debug('Exception: checkpoint.updateGangZoneList');
      methods.debug(e);
    }
  },
  getGangZoneList: () => {
    return gangZoneList;
  },
  getStreamPlayerList: () => {
    return streamedPlayers;
  },
  storage: {
    set: function (key, value) {
      mp.storage.data[key] = value;
      this.flush();
    },
    get: function (key) {
      if (mp.storage.data[key] != undefined) return mp.storage.data[key];
      return '';
    },
    flush: function () {
      mp.storage.flush();
    }
  },
  disableAllControls: disable => {
    mp.events.call('modules:client:player:DisableAllControls', disable);
  },
  disableDefaultControls: disable => {
    mp.events.call('modules:client:player:DisableDefaultControls', disable);
  },
  pressEToPayRespect: () => {
    if (_timer.timer.isFleecaAtm() || _timer.timer.isOtherAtm()) _menuList.menuList.showAtmMenu();

    _builder.builder.checkPressE();

    _cleaner.cleaner.checkPressE();

    _roadWorker.roadWorker.checkPressE();

    _mainer.mainer.checkPressE();
  },
  startLoadingMessage: (text, timeout) => {
    mp.game.ui.setLoadingPromptTextEntry('STRING');
    mp.game.ui.addTextComponentSubstringPlayerName(text);
    mp.game.ui.showLoadingPrompt(4);
    setTimeout(() => {
      mp.game.invoke('0x10D373323E5B9C0D');
    }, timeout);
  },
  createStaticCheckpoint: (x, y, z, message, scale, dimension) => {
    if (scale == undefined) scale = 1;
    if (dimension == undefined) dimension = 0;
    let pos = new mp.Vector3(x, y, z);
    mp.markers.new(1, pos, scale, {
      color: [33, 150, 243, 100],
      dimension: 0
    });
    let checkpoint = mp.checkpoints.new(1, pos, scale, {
      direction: new mp.Vector3(0, 0, 1.5),
      color: [33, 150, 243, 0],
      visible: true,
      dimension: 0
    });
    if (message != undefined) _data.Container.Set(999999, 'checkpointLabel' + checkpoint.id, message);
    return checkpoint;
  },
  arrayRemove: (arr, value) => {
    return arr.filter(function (ele) {
      return ele != value;
    });
  },
  notifyWithPictureToAll: (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => {
    mp.events.callRemote('server:players:notifyWithPictureToAll', title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor);
  },
  notifyWithPictureToFraction: (title, sender, message, notifPic, fractionId = 0, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => {
    mp.events.callRemote('server:players:notifyWithPictureToFraction', title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor);
  },
  notifyWithPictureToFraction2: (title, sender, message, notifPic, fractionId = 0, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => {
    mp.events.callRemote('server:players:notifyWithPictureToFraction2', title, sender, message, notifPic, fractionId, icon, flashing, textColor, bgColor, flashColor);
  },
  notifyToFraction: (message, fractionId = 0) => {
    mp.events.callRemote('server:players:notifyToFraction', message, fractionId);
  },
  notifyToAll: message => {
    mp.events.callRemote('server:players:notifyToAll', message);
  },
  numerToK: num => {
    return Math.abs(num) > 999 ? Math.sign(num) * (Math.abs(num) / 1000) + 'k' : Math.sign(num) * Math.abs(num);
  },
  getCurrentSpeed: (target = mp.players.local) => {
    let speed = 0;

    if (target.isSittingInAnyVehicle()) {
      let velocity = target.vehicle.getVelocity();
      speed = Math.sqrt(velocity.x * velocity.x + velocity.y * velocity.y + velocity.z * velocity.z);
      speed = Math.round(speed * 3.6);
    }

    return speed;
  },
  getVehicleInfo: model => {
    let vehInfo = _enums.enums.get('vehicleInfo');

    for (let item in vehInfo) {
      let vItem = vehInfo[item];
      if (vItem.hash == model || vItem.display_name == model || mp.game.joaat(vItem.display_name.toString().toLowerCase()) == model) return vItem;
    }

    if (vehInfo.length < 100) {
      _enums.enums.resetVehicleInfo();

      mp.events.callRemote('server:updateVehicleInfo');
    }

    return {
      id: 0,
      hash: model,
      display_name: 'Unknown',
      class_name: 'Unknown',
      stock: 378000,
      fuel_full: 75,
      fuel_min: 8
    };
  },
  getFractionName: _fractions.fractionUtil.getFractionName,
  getMafiaName: _fractions.fractionUtil.getFractionName,
  getJobName: job => {
    switch (job) {
      case 'swater':
      case 'sground':
        return 'Учёный';

      case 'water':
        return 'Мехатроник';

      case 'sunb':
        return 'Уборщик квартир';

      case 'bgstar':
        return 'Дезинсектор';

      case 'lawyer1':
      case 'lawyer2':
      case 'lawyer3':
        return 'Адвокат';

      case 'mail':
      case 'mail2':
        return 'Почтальон';

      case 'gr6':
        return 'Инкассатор';

      case 'three':
        return 'Садовник';

      case 'photo':
        return 'Фотограф';

      case 'taxi1':
      case 'taxi2':
        return 'Таксист';

      case 'trucker1':
      case 'trucker2':
      case 'trucker3':
        return 'Дальнобойщик';
    }

    return '~r~Нет';
  },
  getCompanyName: _company.getCompanyName,
  loadAllPeds: () => {},
  createPed: (model, position, heading, isDefault = false, scenario = '', animation1 = '', animation2 = '', flag = 9) => {
    mp.peds.new(model, position, heading);
  },
  deleteObjectGlobal: (x, y, z, hash) => {
    mp.events.callRemote('server:deleteObject', x, y, z, hash);
  },
  showHelpNotify: () => {
    if (_user.user.isLogin() && _user.user.getLevel() === 1) {
      if (_user.user.getLevel() <= _level.levelAccess.freeTaxi) {
        mp.game.ui.notifications.show('~g~Для новичков, такси - бесплатное\n' + (_user.user.get('phone_code') === 0 ? '~g~Купите для начала телефон' : '~g~1 - Телефон - TAXI'));
      }

      if (_user.user.get('reg_status') === 0) {
        mp.game.ui.notifications.show('~y~Получи регистрацию в здании правительства\n~y~M - GPS - Важные места - Правительство');
      } else if (_user.user.getMoney() < 300 && _user.user.get('b_lic') === false) {
        mp.game.ui.notifications.show('~y~Заработай первые деньги\n~y~M - GPS - Работы - Мойщик окон');
      } else if (_user.user.get('b_lic') === false) {
        mp.game.ui.notifications.show('~y~У тебя нет прав категории B\n~y~M - GPS - Важные места - Здание правительства');
      } else if (_user.user.get('job') === '') {
        mp.game.ui.notifications.show('~y~Устройся на работу\n~y~M - GPS - Важные места - Правительство - Трудовая биржа');
      } else if (_user.user.get('phone_code') === 0) {
        mp.game.ui.notifications.show('~y~Купи телефон\n~y~M - GPS - Магазины и прочее - Магазин электронной техники');
      }
    }
  },
  getOrbitPosition: (x, y, z, rot, range) => {
    let newPos = new mp.Vector3(range * Math.sin(rot) + x, range * Math.cos(rot) + y, z);
    return newPos;
  },
  saveFractionLog: (name, doName, fractionId = 0) => {
    methods.saveLog('FractionLog', `[FractionID: ${fractionId}] ${name} - ${doName}`);
    mp.events.callRemote('server:addFractionLog', name, doName, fractionId);
  },
  createGlobalPedInVehicle: (model, vehicleId) => {
    mp.events.callRemote('server:methods:createGlobalPedInVehicle', model, vehicleId);
  },
  deleteGlobalPed: id => {
    mp.events.callRemote('server:methods:deleteGlobalPed', id);
  },
  getNearestHousePos: (pos, r) => {
    let nearest, dist;
    let min = r;
    mp.blips.forEach(b => {
      if (b.getSprite() !== 40) return;
      dist = methods.distanceToPos(pos, b.getCoords());

      if (dist < min) {
        nearest = b.getCoords();
        min = dist;
      }
    });
    return nearest || new mp.Vector3(0, 0, 0);
  },
  getNearestPlayerWithCoords: (pos, r) => {
    let nearest, dist;
    let min = r;
    let players = methods.getListOfPlayersInStream();
    players.forEach(player => {
      dist = methods.distanceToPos(pos, player.position);

      if (dist < min) {
        nearest = player;
        min = dist;
      }
    });
    return nearest;
  },
  getListOfPlayersInStream: () => {
    let returnPlayers = [];
    mp.players.forEachInStreamRange(player => {
      if (mp.players.local !== player) {
        returnPlayers.push(player);
      }
    });
    return returnPlayers;
  },
  getNearestVehicleWithCoords: (pos, r) => {
    let nearest = undefined,
        dist;
    let min = r;
    methods.getListOfVehicleInStream().forEach(vehicle => {
      dist = methods.distanceToPos(pos, vehicle.position);

      if (dist < min) {
        nearest = vehicle;
        min = dist;
      }
    });
    return nearest;
  },
  getListOfVehicleInStream: () => {
    let returnVehicles = [];
    mp.vehicles.forEachInStreamRange(vehicle => {
      returnVehicles.push(vehicle);
    });
    return returnVehicles;
  },
  digitFormat: number => {
    return ('0' + number).slice(-2);
  },
  numberFormat: currentMoney => {
    return currentMoney.toString().replace(/.+?(?=\D|$)/, function (f) {
      return f.replace(/(\d)(?=(?:\d\d\d)+$)/g, '$1,');
    });
  },
  setIplPropState: (interiorId, prop, state = true) => {
    if (state) mp.game.interior.enableInteriorProp(interiorId, prop);else mp.game.interior.disableInteriorProp(interiorId, prop);
  },
  iplMichaelDefault: () => {
    let interiorId = 166657;
    let garageId = 166401;
    methods.setIplPropState(interiorId, 'V_Michael_bed_tidy');
    methods.setIplPropState(interiorId, 'V_Michael_bed_Messy');
    methods.setIplPropState(interiorId, 'Michael_premier', false);
    methods.setIplPropState(interiorId, 'V_Michael_FameShame', false);
    methods.setIplPropState(interiorId, 'V_Michael_plane_ticket', false);
    methods.setIplPropState(interiorId, 'V_Michael_JewelHeist', false);
    methods.setIplPropState(interiorId, 'burgershot_yoga', false);
    mp.game.interior.refreshInterior(interiorId);
    methods.setIplPropState(garageId, 'V_Michael_Scuba', false);
    mp.game.interior.refreshInterior(garageId);
  },
  iplSimonDefault: () => {
    let interiorId = 7170;
    mp.game.streaming.requestIpl('shr_int');
    methods.setIplPropState(interiorId, 'csr_beforeMission');
    methods.setIplPropState(interiorId, 'shutter_open');
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFranklinAuntDefault: () => {
    let interiorId = 197889;
    methods.setIplPropState(interiorId, '');
    methods.setIplPropState(interiorId, 'V_57_GangBandana', false);
    methods.setIplPropState(interiorId, 'V_57_Safari', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFranklinDefault: () => {
    let interiorId = 206849;
    methods.setIplPropState(interiorId, '');
    methods.setIplPropState(interiorId, 'unlocked');
    methods.setIplPropState(interiorId, 'progress_flyer', false);
    methods.setIplPropState(interiorId, 'progress_tux', false);
    methods.setIplPropState(interiorId, 'progress_tshirt', false);
    methods.setIplPropState(interiorId, 'bong_and_wine', true);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplFloydDefault: () => {
    let interiorId = 171777;
    methods.setIplPropState(interiorId, 'swap_clean_apt');
    methods.setIplPropState(interiorId, 'swap_mrJam_A');
    mp.game.interior.refreshInterior(interiorId);
  },
  iplTrevorDefault: () => {
    let interiorId = 2562;
    mp.game.streaming.requestIpl('trevorstrailertidy');
    methods.setIplPropState(interiorId, 'V_26_Trevor_Helmet3', false);
    methods.setIplPropState(interiorId, 'V_24_Trevor_Briefcase3', false);
    methods.setIplPropState(interiorId, 'V_26_Michael_Stay3', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplAmmoDefault: () => {
    let ammunationsId = [140289, 153857, 168193, 164609, 176385, 175617, 200961, 180481, 178689];
    let gunclubsId = [137729, 248065];
    ammunationsId.forEach(interiorId => {
      methods.setIplPropState(interiorId, 'GunStoreHooks');
      methods.setIplPropState(interiorId, 'GunClubWallHooks');
      mp.game.interior.refreshInterior(interiorId);
    });
    gunclubsId.forEach(interiorId => {
      methods.setIplPropState(interiorId, 'GunStoreHooks');
      methods.setIplPropState(interiorId, 'GunClubWallHooks');
      mp.game.interior.refreshInterior(interiorId);
    });
  },
  iplLesterFactoryDefault: () => {
    let interiorId = 92674;
    methods.setIplPropState(interiorId, 'V_53_Agency_Blueprint', false);
    methods.setIplPropState(interiorId, 'V_35_KitBag', false);
    methods.setIplPropState(interiorId, 'V_35_Fireman', false);
    methods.setIplPropState(interiorId, 'V_35_Body_Armour', false);
    methods.setIplPropState(interiorId, 'Jewel_Gasmasks', false);
    methods.setIplPropState(interiorId, 'v_53_agency_overalls', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  iplStripClubDefault: () => {
    let interiorId = 197121;
    methods.setIplPropState(interiorId, 'V_19_Trevor_Mess', false);
    mp.game.interior.refreshInterior(interiorId);
  },
  requestIpls: () => {
    methods.iplMichaelDefault();
    methods.iplSimonDefault();
    methods.iplFranklinAuntDefault();
    methods.iplFranklinDefault();
    methods.iplFloydDefault();
    methods.iplTrevorDefault();
    methods.iplAmmoDefault();
    methods.iplLesterFactoryDefault();
    methods.iplStripClubDefault();
    mp.game.streaming.requestIpl('vw_casino_main');
    let cIntID = mp.game.interior.getInteriorAtCoords(1100.0, 220.0, -50.0);
    mp.game.interior.enableInteriorProp(cIntID, 'casino_manager_﻿default﻿﻿﻿');
    mp.game.invoke(methods.SET_INTERIOR_PROP_COLOR, cIntID, 'casino_manager_﻿default﻿﻿﻿', 1);
    mp.game.interior.refreshInterior(cIntID);
    mp.game.streaming.requestIpl('hei_dlc_windows_casino');
    mp.game.streaming.requestIpl('hei_dlc_casino_aircon');
    mp.game.streaming.requestIpl('vw_dlc_casino_door');
    mp.game.streaming.requestIpl('hei_dlc_casino_door');
    mp.game.streaming.requestIpl('hei_dlc_windows_casino﻿');
    mp.game.streaming.requestIpl('vw_casino_penthouse');
    mp.game.streaming.requestIpl('vw_casino_garage');
    let phIntID = mp.game.interior.getInteriorAtCoords(976.636, 70.295, 115.164);
    let phPropList = ['Set_Pent_Tint_Shell', 'Set_Pent_Pattern_01', 'Set_Pent_Spa_Bar_Open', 'Set_Pent_Media_Bar_Open', 'Set_Pent_Dealer', 'Set_Pent_Arcade_Retro', 'Set_Pent_Bar_Clutter', 'Set_Pent_Clutter_01', 'set_pent_bar_light_01', 'set_pent_bar_party_0'];

    for (const propName of phPropList) {
      mp.game.interior.enableInteriorProp(phIntID, propName);
      mp.game.invoke(methods.SET_INTERIOR_PROP_COLOR, phIntID, propName, 1);
    }

    mp.game.interior.refreshInterior(phIntID);
    mp.game.streaming.requestIpl('imp_dt1_02_modgarage');
    mp.game.streaming.requestIpl('post_hiest_unload');
    mp.game.streaming.requestIpl('refit_unload');
    mp.game.streaming.requestIpl('FINBANK');
    mp.game.streaming.requestIpl('Coroner_Int_on');
    mp.game.streaming.requestIpl('ch3_rd2_bishopschickengraffiti');
    mp.game.streaming.requestIpl('cs5_04_mazebillboardgraffiti');
    mp.game.streaming.requestIpl('cs5_roads_ronoilgraffiti');
    mp.game.streaming.requestIpl('CS1_02_cf_onmission1');
    mp.game.streaming.requestIpl('CS1_02_cf_onmission2');
    mp.game.streaming.requestIpl('CS1_02_cf_onmission3');
    mp.game.streaming.requestIpl('CS1_02_cf_onmission4');
    mp.game.streaming.requestIpl('farm');
    mp.game.streaming.requestIpl('farmint');
    mp.game.streaming.requestIpl('farm_lod');
    mp.game.streaming.requestIpl('farm_props');
    mp.game.streaming.requestIpl('des_farmhouse');
    mp.game.streaming.requestIpl('FIBlobby');
    mp.game.streaming.requestIpl('dt1_05_fib2_normal');
    mp.game.streaming.removeIpl('hei_bi_hw1_13_door');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_comedy_milo_');
    mp.game.streaming.requestIpl('apa_ss1_11_interior_v_rockclub_milo_');
    mp.game.streaming.requestIpl('ferris_finale_Anim');
    mp.game.streaming.requestIpl('gr_case6_bunkerclosed');
    mp.game.streaming.requestIpl('FruitBB');
    mp.game.streaming.requestIpl('sc1_01_newbill');
    mp.game.streaming.requestIpl('hw1_02_newbill');
    mp.game.streaming.requestIpl('hw1_emissive_newbill');
    mp.game.streaming.requestIpl('sc1_14_newbill');
    mp.game.streaming.requestIpl('dt1_17_newbill');
    mp.game.streaming.requestIpl('id2_14_during_door');
    mp.game.streaming.requestIpl('id2_14_during1');
    mp.game.streaming.requestIpl('facelobby');
    mp.game.streaming.requestIpl('hei_carrier');
    mp.game.streaming.requestIpl('hei_carrier_distantlights');
    mp.game.streaming.requestIpl('hei_carrier_int1');
    mp.game.streaming.requestIpl('hei_carrier_int1_lod');
    mp.game.streaming.requestIpl('hei_carrier_int2');
    mp.game.streaming.requestIpl('hei_carrier_int2_lod');
    mp.game.streaming.requestIpl('hei_carrier_int3');
    mp.game.streaming.requestIpl('hei_carrier_int3_lod');
    mp.game.streaming.requestIpl('hei_carrier_int4');
    mp.game.streaming.requestIpl('hei_carrier_int4_lod');
    mp.game.streaming.requestIpl('hei_carrier_int5');
    mp.game.streaming.requestIpl('hei_carrier_int5_lod');
    mp.game.streaming.requestIpl('hei_carrier_int6');
    mp.game.streaming.requestIpl('hei_carrier_lod');
    mp.game.streaming.requestIpl('hei_carrier_lodlights');
    mp.game.streaming.requestIpl('hei_carrier_slod');
    mp.game.streaming.requestIpl('hei_yacht_heist');
    mp.game.streaming.requestIpl('hei_yacht_heist_enginrm');
    mp.game.streaming.requestIpl('hei_yacht_heist_Lounge');
    mp.game.streaming.requestIpl('hei_yacht_heist_Bridge');
    mp.game.streaming.requestIpl('hei_yacht_heist_Bar');
    mp.game.streaming.requestIpl('hei_yacht_heist_Bedrm');
    mp.game.streaming.requestIpl('hei_yacht_heist_DistantLights');
    mp.game.streaming.requestIpl('hei_yacht_heist_LODLights');
    mp.game.streaming.requestIpl('gr_heist_yacht2');
    mp.game.streaming.requestIpl('gr_heist_yacht2_bar');
    mp.game.streaming.requestIpl('gr_heist_yacht2_bedrm');
    mp.game.streaming.requestIpl('gr_heist_yacht2_bridge');
    mp.game.streaming.requestIpl('gr_heist_yacht2_enginrm');
    mp.game.streaming.requestIpl('gr_heist_yacht2_lounge');
    mp.game.streaming.requestIpl('gr_grdlc_interior_placement_interior_0_grdlc_int_01_milo_');
    mp.game.streaming.requestIpl('v_tunnel_hole');
    mp.game.streaming.requestIpl('Carwash_with_spinners');
    mp.game.streaming.requestIpl('sp1_10_real_interior');
    mp.game.streaming.requestIpl('sp1_10_real_interior_lod');
    mp.game.streaming.requestIpl('ch1_02_open');
    mp.game.streaming.requestIpl('bkr_bi_id1_23_door');
    mp.game.streaming.requestIpl('lr_cs6_08_grave_closed');
    mp.game.streaming.requestIpl('methtrailer_grp1');
    mp.game.streaming.requestIpl('bkr_bi_hw1_13_int');
    mp.game.streaming.requestIpl('CanyonRvrShallow');
    mp.game.streaming.requestIpl('rc12b_default');
    mp.game.streaming.requestIpl('bh1_47_joshhse_unburnt');
    mp.game.streaming.requestIpl('bh1_47_joshhse_unburnt_lod');
    mp.game.streaming.removeIpl('sunkcargoship');
    mp.game.streaming.requestIpl('cargoship');
    mp.game.streaming.requestIpl('ex_sm_13_office_02b');
    mp.game.streaming.requestIpl('ex_dt1_02_office_02b');
    mp.game.streaming.requestIpl('ex_sm_15_office_01a');
    mp.game.streaming.requestIpl('ex_dt1_11_office_01b');
    mp.game.streaming.requestIpl('hei_sm_16_interior_v_bahama_milo_');
    mp.game.streaming.requestIpl('apa_v_mp_h_01_a');
    mp.game.streaming.requestIpl('apa_v_mp_h_02_b');
    mp.game.streaming.requestIpl('apa_v_mp_h_08_c');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_studio_lo_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_v_apart_midspaz_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_32_dlc_apart_high2_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_10_dlc_apart_high_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_28_dlc_apart_high2_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_27_dlc_apart_high_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_29_dlc_apart_high2_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_30_dlc_apart_high2_new_milo_');
    mp.game.streaming.requestIpl('hei_hw1_blimp_interior_31_dlc_apart_high2_new_milo_');
    mp.game.streaming.requestIpl('apa_ch2_05e_interior_0_v_mp_stilts_b_milo_');
    mp.game.streaming.requestIpl('apa_ch2_04_interior_0_v_mp_stilts_b_milo_');
    mp.game.streaming.requestIpl('apa_ch2_04_interior_1_v_mp_stilts_a_milo_');
    mp.game.streaming.requestIpl('apa_ch2_09c_interior_2_v_mp_stilts_b_milo_');
    mp.game.streaming.requestIpl('apa_ch2_09b_interior_1_v_mp_stilts_b_milo_');
    mp.game.streaming.requestIpl('apa_ch2_09b_interior_0_v_mp_stilts_a_milo_');
    mp.game.streaming.requestIpl('apa_ch2_05c_interior_1_v_mp_stilts_a_milo_');
    mp.game.streaming.requestIpl('apa_ch2_12b_interior_0_v_mp_stilts_a_milo_');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_clubname_01');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_Style02');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_style02_podium');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_equipment_setup');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_equipment_upgrade');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_security_upgrade');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_dj01');
    mp.game.interior.enableInteriorProp(271617, 'DJ_03_Lights_02');
    mp.game.interior.enableInteriorProp(271617, 'DJ_04_Lights_01');
    mp.game.interior.enableInteriorProp(271617, 'DJ_03_Lights_03');
    mp.game.interior.enableInteriorProp(271617, 'DJ_04_Lights_04');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_bar_content');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_booze_01');
    mp.game.interior.enableInteriorProp(271617, 'Int01_ba_dry_ice');
    mp.game.interior.refreshInterior(271617);
  },
  isPlayerInOcean: () => {
    let pos = mp.players.local.position;
    return mp.game.zone.getNameOfZone(pos.x, pos.y, pos.z) === 'OCEANA';
  },
  getRandomArbitrary: (min, max) => {
    return Math.random() * (max - min) + min;
  },
  getKeyFromTwoDimensionalArray: (array, value) => {
    array.forEach((val, key) => {
      if (val === value) {
        return key;
      }
    });
    return null;
  },
  getValueForIndexFromTwoDimensionalArray: (array, checkval, icheck, iselect) => {
    let returnVal = null;
    array.forEach(val => {
      if (val[icheck] === checkval) {
        returnVal = val[iselect];
      }
    });
    return returnVal;
  },
  removeQuotes: text => {
    return text.replace("'", '');
  },
  removeQuotes2: text => {
    return text.replace('"', '');
  }
};
exports.methods = methods;
},{"./data":"Edcz","../enums":"ZRYf","../jobs/builder":"zK0g","../jobs/cleaner":"lN65","./timer":"BpKR","../menuList":"U1Al","./menu":"Aiz7","../user":"QE3B","../jobs/roadWorker":"iDVm","../jobs/mainer":"BSgz","../inventory":"m5ow","./gui":"bk91","../../util/level":"MpJF","../../util/fractions":"Zeqt","../../util/company.names":"iryQ"}],"ARQI":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClientEventClass = exports.ClientEvent = void 0;

var _event = require("../util/event");

var _methods = require("../util/methods");

var _methods2 = require("./modules/methods");

const formatArgs = args => {
  return args.map(arg => {
    if (typeof arg == 'string') {
      if ((0, _methods.testJSON)(arg)) {
        return JSON.parse(arg);
      }
    }

    return arg;
  });
};

class ClientEventClass extends _event.MainEvent {
  constructor() {
    super();
  }

  async get(name, ...args) {
    try {
      let fncs = [];
      this.container.forEach(itm => {
        if (itm.name == name) fncs.push(itm.func);
      });
      const values = [];

      for (let q in fncs) {
        let func = fncs[q];
        values.push(await func.bind(func.prototype)(...args));
      }

      if (!values.length) {
        return Promise.reject(new Error(`Remote Client Event \`${name}\` not found`));
      } else if (values.length == 1) {
        return values[0];
      } else {
        return values;
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }

  register(name, func) {
    _methods2.methods.debug(`REGISTER Remote Client Event \`${name}\``);

    const id = this.eventID;
    const self = {
      destroy: () => {
        this.container.delete(id);
      },
      eventId: id,
      eventName: name,
      env: 'client'
    };
    Object.defineProperties(self, {
      eventName: {
        writable: false
      },
      eventId: {
        writable: false
      },
      destroy: {
        writable: false
      },
      env: {
        writable: false
      }
    });
    this.container.set(id, {
      id,
      name,
      func: func.bind(self)
    });
    this.eventID++;
    return {
      id,
      destroy: self.destroy,
      name
    };
  }

  triggerServer(name, ...args) {
    mp.events.callRemote('__customTriggerServer__', "client", name, ...args);
  }

  triggerBrowser(name, ...args) {
    if (!mp.browsers.length) return mp.console.logInfo(`Do not have any browsers`);
    mp.browsers.forEach(browser => {
      browser.execute(`
        if (window.__customTriggerCef__) {
          window.__customTriggerCef__('${name}', '${JSON.stringify(args)}');
        }
      `);
    });
  }

  callServer(name, ...args) {
    const id = this.eventRemoteRequestId++;
    return new Promise((resolve, reject) => {
      mp.events.callRemote('__customCallServer__', "client", name, id, ...args);
      this.eventRemoteRequestData.set(id, resolve);
    });
  }

  callBrowser(name, ...args) {
    const id = this.eventRemoteRequestId++;
    return new Promise((resolve, reject) => {
      if (!mp.browsers.length) return mp.console.logInfo(`Do not have any browsers`);
      mp.browsers.forEach(browser => {
        browser.execute(`
          if (window.__customCallCef__) {
            window.__customCallCef__('client', '${name}', ${id}, '${JSON.stringify(args)}');
          }
        `);
      });
      this.eventRemoteRequestData.set(id, resolve);
    });
  }

}

exports.ClientEventClass = ClientEventClass;
let ClientEvent = new ClientEventClass();
exports.ClientEvent = ClientEvent;
mp.events.add('__customCallClient__', async (name, id, ...args) => {
  let result = await ClientEvent.get(name, ...args);

  if (typeof result == 'object') {
    result = JSON.stringify(result);
  }

  mp.events.callRemote('__customRemoteAnswer__', id, result);
});
mp.events.add('__customTriggerClient__', async (name, ...args) => {
  await ClientEvent.get(name, ...args);
});
mp.events.add('__customRemoteAnswer__', (id, result) => {
  let f = ClientEvent.eventRemoteRequestData.get(id);
  f(result);
  ClientEvent.eventRemoteRequestData.delete(id);
});
mp.events.add('__customTriggerCef__', async (name, args) => {
  if (!mp.browsers.length) return mp.console.logInfo(`Do not have any browsers`);
  mp.browsers.forEach(browser => {
    browser.execute(`
      if (window.__customTriggerCef__) {
        window.__customTriggerCef__('${name}', '${JSON.stringify(args)}');
      }
    `);
  });
});
mp.events.add('__customTriggerClientFromCef__', (name, ...args) => {
  args = formatArgs(args);
  ClientEvent.get(name, ...args);
});
mp.events.add('cefconsole', (name, ...args) => {
  _methods2.methods.debug(name, ...args);
});
mp.events.add('__customTriggerServerFromCef__', (name, ...args) => {
  mp.events.callRemote('__customTriggerServer__', "CEF", name, ...args);
});
mp.events.add('__customCallClientFromCef__', async (name, id, ...args) => {
  let result = await ClientEvent.get(name, ...args);
  if (typeof result == 'object') result = JSON.stringify(result);
  mp.browsers.forEach(browser => {
    browser.execute(`
        if (window.__customResponseCef__) {
          window.__customResponseCef__(${id}, '${result}');
        }
      `);
  });
});
mp.events.add('__customCallServerFromCef__', (name, id, ...args) => {
  args = formatArgs(args);
  mp.events.callRemote('__customCallServerFromClientToCef__', name, id, ...args);
});
mp.events.add('__customResponseServerToCef__', (id, result) => {
  if (typeof result == 'object') result = JSON.stringify(result);
  mp.browsers.forEach(browser => {
    browser.execute(`
      if (window.__customResponseCef__) {
        window.__customResponseCef__(${id}, '${result}');
      }
    `);
  });
});
mp.events.add('__customRemoteAnswerToCef__', (id, result) => {
  if (typeof result == 'object') result = JSON.stringify(result);
  mp.browsers.forEach(browser => {
    browser.execute(`
      if (window.__customResponseCef__) {
        window.__customResponseCef__(${id}, '${result}');
      }
    `);
  });
});
mp.events.add('__customClientAnswerFromCef__', (id, result, env) => {
  if (env == 'client') {
    let f = ClientEvent.eventRemoteRequestData.get(id);

    if ((0, _methods.testJSON)(result)) {
      result = JSON.parse(result);
    }

    f(result);
    ClientEvent.eventRemoteRequestData.delete(id);
  } else if (env == 'server') {
    mp.events.callRemote('__customRemoteAnswer__', id, result);
  }
});
mp.events.add('__customCallCefFromServer__', (name, id, ...args) => {
  if (!mp.browsers.length) return mp.console.logInfo(`Do not have any browsers`);
  mp.browsers.forEach(browser => {
    browser.execute(`
      if (window.__customCallCef__) {
        window.__customCallCef__('server', '${name}', ${id}, '${JSON.stringify(args)}');
      }
    `);
  });
});
},{"../util/event":"Z8LL","../util/methods":"Z5QB","./modules/methods":"qXSp"}],"X2Af":[function(require,module,exports) {
"use strict";

var _methods = require("./methods");

var _vip = require("../../util/vip");

var _user = require("../user");

let afktime = 0;
let voiceCount = 0;
let positionCount = 0;
let headingCount = 0;
let headingCamCount = 0;
let forvardCount = 0;
let keyPressCount = 0;
let cameraMoveCount = 0;
let lastKeyPressed = [];
let lastPosition = new mp.Vector3(0, 0, 0);
let lastForvard = new mp.Vector3(0, 0, 0);
let lastCamera = new mp.Vector3(0, 0, 0);
let lastHeading = 0;
let lastHeadingCam = 0;
const pointForAfk = 100;
const player = mp.players.local;
const gameplayCam = mp.cameras.new('gameplay');

function unique(arr) {
  let result = [];

  for (let str of arr) {
    if (!result.includes(str)) {
      result.push(str);
    }
  }

  return result;
}

setInterval(() => {
  if (!_user.user.isLogin()) return;
  let currentPosition = player.position;
  let currentForvard = player.getForwardVector();
  currentForvard.x = _methods.methods.parseInt(currentForvard.x);
  currentForvard.y = _methods.methods.parseInt(currentForvard.y);
  currentForvard.z = _methods.methods.parseInt(currentForvard.z);
  let currentCamera = gameplayCam.getRot(2);
  currentCamera.x = _methods.methods.parseInt(currentCamera.x);
  currentCamera.y = _methods.methods.parseInt(currentCamera.y);
  currentCamera.z = _methods.methods.parseInt(currentCamera.z);
  let currentHeading = player.getHeading();
  if (mp.game.cam.getGameplayCamRelativeHeading() - lastHeadingCam > -2 && mp.game.cam.getGameplayCamRelativeHeading() - lastHeadingCam < 2) headingCamCount++;else {
    lastHeadingCam = mp.game.cam.getGameplayCamRelativeHeading();
    headingCamCount = 0;
  }
  if (_methods.methods.distanceToPos(lastPosition, currentPosition) < 1) positionCount++;else {
    lastPosition = currentPosition;
    positionCount = 0;
  }
  if (currentHeading < lastHeading + 1 && currentHeading > lastHeading - 1) headingCount++;else {
    lastHeading = currentHeading;
    headingCount = 0;
  }
  if (JSON.stringify(currentForvard) == JSON.stringify(lastForvard)) forvardCount++;else {
    lastForvard = currentForvard;
    forvardCount = 0;
  }
  if (JSON.stringify(currentCamera) == JSON.stringify(lastCamera)) cameraMoveCount++;else {
    lastCamera = currentCamera;
    cameraMoveCount = 0;
  }
  if (mp.voiceChat.muted) voiceCount++;else voiceCount = 0;
  if (chanceIsAfk() < pointForAfk) afktime = 0;
}, 1000);
setInterval(() => {
  if (chanceIsAfk() >= pointForAfk) afktime++;
}, 60000);
setInterval(() => {
  if (!_user.user.isLogin()) return;
  let canBeAfk = _vip.BASE_AFK_TIME;

  let vipConf = _vip.vipStatus.getVipStatusData(_user.user.get('vip_status'));

  if (vipConf) canBeAfk = vipConf.afkminutes > 10 ? vipConf.afkminutes : 10;

  if (afktime > canBeAfk) {
    if (!mp.players.local.getVariable('isAfk')) _user.user.setVariable('isAfk', true);
  } else {
    if (mp.players.local.getVariable('isAfk')) _user.user.setVariable('isAfk', false);
  }
}, 1000);

function unicKeys() {
  return unique(lastKeyPressed).length;
}

function chanceIsAfk() {
  if (mp.game.ui.isPauseMenuActive()) return 100;
  let chance = 0;
  let voiceChance = voiceCount / 100;
  if (voiceChance > 30) voiceChance = 30;
  chance += voiceChance;
  chance += positionCount / 50;
  chance += headingCount / 50;
  chance += forvardCount / 50;
  chance += cameraMoveCount;
  let keychance = 100 - unicKeys() * 20;
  if (keychance < 0) keychance = 0;
  chance += keychance;
  if (chance > 100) chance = 100;
  return chance;
}

for (let id = 1; id < 120; id++) {
  mp.keys.bind(id, true, function () {
    if (lastKeyPressed.length >= 100) lastKeyPressed.splice(0, 1);
    lastKeyPressed.push(id);
  });
}

setInterval(() => {
  if (!_user.user.isLogin()) return;
  lastKeyPressed = [];
}, 60000);
},{"./methods":"qXSp","../../util/vip":"jh2U","../user":"QE3B"}],"xTdX":[function(require,module,exports) {
"use strict";

var _methods = require("./methods");

let pickups = {
  BshotKeyPos: new mp.Vector3(-1178.1021, -891.6275, 12.7608),
  WapKeyPos: new mp.Vector3(598.5981, 90.37159, 91.82394),
  ScrapKeyPos: new mp.Vector3(-429.1001, -1728, 18.78384),
  PhotoKeyPos: new mp.Vector3(-1041.409, -241.3437, 36.84774),
  Trucker23KeyPos1: new mp.Vector3(858.682, -3203.116, 4.994998),
  Trucker23KeyPos2: new mp.Vector3(114.1641, -2569.154, 5.004592),
  Trucker23KeyPos3: new mp.Vector3(671.4843, -2667.671, 5.081176),
  Mail1KeyPos: new mp.Vector3(-409.8598, -2803.78, 5.000382),
  Mail2KeyPos: new mp.Vector3(78.81596, 112.1012, 80.16817),
  Gr6KeyPos: new mp.Vector3(484.3769, -1094.1658, 28.3966),
  Ems1KeyPos: new mp.Vector3(293.5118, -1447.379, 28.96659),
  Usmc1KeyPos: new mp.Vector3(-2270.5, 3183.46, 31.81),
  Usmc2KeyPos: new mp.Vector3(3080.830810546875, -4693.53515625, 14.262321472167969),
  TrashKeyPos: new mp.Vector3(1569.828, -2130.211, 77.33018),
  BusKeyPos: new mp.Vector3(-675.2166, -2166.933, 4.992994),
  Taxi1KeyPos: new mp.Vector3(895.4368, -179.3315, 73.70035),
  Taxi2KeyPos: new mp.Vector3(896.4077, -1035.7718, 34.109),
  SunbKeyPos: new mp.Vector3(-1185.243, -1508.272, 3.379671),
  LabKeyPos: new mp.Vector3(3605.323, 3733.005, 28.6894),
  ConnorKeyPos: new mp.Vector3(-1158.08, -742.0112, 18.66016),
  BgstarKeyPos: new mp.Vector3(152.6678, -3077.842, 4.896314)
};

_methods.methods.createBlip(pickups.BshotKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.WapKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.PhotoKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos1, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos2, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos3, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Mail1KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Mail2KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.WapKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.WapKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.PhotoKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos1, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos2, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Trucker23KeyPos3, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Mail1KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Mail2KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.TrashKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.BusKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Taxi1KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.Taxi2KeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.SunbKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.LabKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.ConnorKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

_methods.methods.createBlip(pickups.BgstarKeyPos, 50, 59, 0.4, 'Гараж рабочего транспорта');

mp.game.ui.setNewWaypoint(mp.players.local.position.x, mp.players.local.position.y);
},{"./methods":"qXSp"}],"ce6v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FPS = void 0;

var _methods = require("../../util/methods");

var _methods2 = require("./methods");

const player = mp.players.local;
const TEST_VEHICLES = ["xa21", "asea", "krieger", "neon", "revolter", "chino", "nero", "pfister811", "t20", "f620", "felon", "packer", "issi2", "picador", "panto", "windsor", "zion2", "blade"];
const TEST_VEHICLES_POSITION = new mp.Vector3(-993.02, -3341.62, 10.94);
const TEST_LABEL_POSITION = new mp.Vector3(-993.02, -3341.62, 13.94);
const TEST_LABEL_COUNT = 50;
const TEST_LABEL_TIME = 30;
const TEST_VEHICLES_TIME = 30;

class FPSCalculator {
  constructor() {
    this.fps = 0;
    let lastFrameCount = this.getFrameCount();
    setInterval(() => {
      this.fps = this.getFrameCount() - lastFrameCount;
      lastFrameCount = this.getFrameCount();
    }, 1000);
  }

  get() {
    return this.fps;
  }

  getFrameCount() {
    return mp.game.invoke('0xFC8202EFC642E6F2');
  }

}

const FPS = new FPSCalculator();
exports.FPS = FPS;
let enabledTestMod = false;
mp.events.add("server:test", (beta = false) => {
  if (enabledTestMod) return;
  enabledTestMod = true;
  if (!beta) require('_rage-console');
});
mp.events.add('playerCommand', command => {
  if (!enabledTestMod) return;
  if (command != "testfps") return;
  stressTest();
});
let startTest = false;
mp.events.add('render', () => {
  if (!startTest) return;
  mp.game.controls.disableAllControlActions(0);
  mp.game.controls.disableAllControlActions(1);
});
setInterval(() => {
  if (!startTest) return;
  counedFPS.push(FPS.get());
}, 100);
let testLabels = [];
let testVehicles = [];
let counedFPS = [];

async function stressTest() {
  counedFPS = [];
  startTest = true;
  mp.gui.chat.push('Запускаем проверку FPS');
  await (0, _methods.sleep)(500);
  mp.game.cam.doScreenFadeOut(1000);
  await (0, _methods.sleep)(1000);
  player.position = new mp.Vector3(-940.45, -3372.32, 13.94);
  player.setHeading(53.87);
  mp.game.cam.setGameplayCamRelativeHeading(0);
  mp.game.cam.doScreenFadeIn(1000);
  await (0, _methods.sleep)(1000);
  setTimeout(async () => {
    let sssss = true;
    let c = 1;

    for (let id = 0; id < TEST_LABEL_COUNT; id++) {
      testLabels.push(mp.labels.new('1', new mp.Vector3(TEST_LABEL_POSITION.x, TEST_LABEL_POSITION.y, TEST_LABEL_POSITION.z + id / 100)));
      await (0, _methods.sleep)(200);
    }

    setTimeout(() => {
      sssss = false;
    }, TEST_LABEL_TIME * 1000);

    while (sssss) {
      testLabels.map(item => {
        item.text = c.toString();
      });
      c++;
      await (0, _methods.sleep)(100);
    }

    testLabels.map(item => {
      item.destroy();
    });
  }, 100);

  for (let id = 0; id < TEST_VEHICLES.length; id++) {
    testVehicles.push(mp.vehicles.new(mp.game.joaat(TEST_VEHICLES[id]), TEST_VEHICLES_POSITION));
    await (0, _methods.sleep)(100);
  }

  setTimeout(async () => {
    let sssss = true;
    setTimeout(() => {
      sssss = false;
    }, TEST_LABEL_TIME * 1000);

    while (sssss) {
      testVehicles.map(veh => {
        veh.setEngineOn(veh.getIsEngineRunning(), true, true);
        veh.setCoords(TEST_VEHICLES_POSITION.x, TEST_VEHICLES_POSITION.y, TEST_VEHICLES_POSITION.z, false, true, true, false);
      });
      await (0, _methods.sleep)(100);
    }

    testVehicles.map(item => {
      item.destroy();
    });
  }, 100);
  await (0, _methods.sleep)(TEST_VEHICLES_TIME * 1000 * 2 + 5000);
  mp.gui.chat.push('Тест окончен.');
  let resultBall = Math.floor(counedFPS.reduce(function (sum, current) {
    return sum + current;
  }, 0));
  let averageFPS = Math.floor(resultBall / counedFPS.length);
  let minFPS = Math.floor(counedFPS.reduce(function (min, current) {
    if (min == 0) return current;else if (min < current) return min;else return current;
  }, 0));
  let maxFPS = Math.floor(counedFPS.reduce(function (max, current) {
    if (max > current) return max;else return current;
  }, 0));
  mp.gui.chat.push(`Минимальный FPS: ${minFPS}, Максимальный FPS: ${maxFPS}, Средний FPS: ${averageFPS}, Бал оценки: ${resultBall}`);
  startTest = false;
}

let models = ['u_m_y_abner', 'csb_abigail', 'ig_abigail', 'a_m_m_acult_01', 'a_m_o_acult_01', 'a_m_y_acult_01', 'a_m_y_acult_01', 'a_m_y_acult_02', 'a_m_m_afriamer_01',, 'ig_mp_agent14', 'csb_mp_agent14', 'csb_agent', 's_f_y_airhostess_01', 's_m_y_airworker', 'u_m_m_aldinapoli', 'ig_amandatownley', 'cs_amandatownley', 's_m_y_ammucity_01', 's_m_m_ammucountry', 'ig_andreas', 'cs_andreas', 'csb_anita', 'u_m_y_antonb', 'csb_anton', 'g_m_m_armboss_01', 'g_m_m_armgoon_01', 'g_m_y_armgoon_02', 'g_m_m_armlieut_01', 'mp_s_m_armoured_01', 's_m_m_armoured_01'];
setTimeout(() => {
  mp.events.register('ping:test', () => {
    return true;
  });
  mp.events.register('pc:test', () => {
    return new Promise(async resolve => {
      counedFPS = [];
      startTest = true;
      let resData = {
        forMany: 0,
        loadModels: 0,
        spawnPeds: 0,
        npcJob: 0,
        resultBall: 0,
        averageFPS: 0,
        minFPS: 0,
        maxFPS: 0
      };

      _methods2.methods.debug('Start TEST');

      _methods2.methods.debug('For timer');

      let start = new Date().getTime();
      let q = 0;

      for (let id = 0; id < 500000000; id++) q += id;

      let end = new Date().getTime();
      resData.forMany = end - start;

      _methods2.methods.debug(resData.forMany);

      _methods2.methods.debug('Request model timer');

      let steps = 3;

      try {
        start = new Date().getTime();

        for (let step = 0; step < steps; step++) {
          mp.gui.chat.push('Step ' + step);

          for (let id in models) {
            let model = mp.game.gameplay.getHashKey(models[id]);

            if (mp.game.streaming.isModelValid(model)) {
              let cnt = 0;

              while (!mp.game.streaming.hasModelLoaded(model) && cnt < 300) {
                mp.game.streaming.requestModel(model);
                cnt++;
                await (0, _methods.wait)(1);
              }

              if (cnt < 3000) {
                mp.gui.chat.push('Model ' + models[id] + 'not valid');
              }
            } else {
              mp.gui.chat.push('Model ' + models[id] + ' not valids');
            }
          }
        }

        for (let step = 0; step < steps; step++) {
          for (let id in models) {
            let model = mp.game.gameplay.getHashKey(models[id]);
            mp.game.streaming.setModelAsNoLongerNeeded(model);
          }
        }

        end = new Date().getTime();
        resData.loadModels = end - start;
      } catch (error) {
        mp.gui.chat.push(error);
      }

      _methods2.methods.debug(resData.loadModels);

      _methods2.methods.debug("Spawn NPC's");

      let pedsTest = [];
      start = new Date().getTime();

      for (let id = 0; id < 50; id++) {
        try {
          let model = mp.game.gameplay.getHashKey((0, _methods.randomArrayEl)(models));
          let cnt = 0;

          while (!mp.game.streaming.hasModelLoaded(model) && cnt < 300) {
            mp.game.streaming.requestModel(model);
            cnt++;
            await (0, _methods.wait)(1);
          }

          if (cnt < 300) {
            let ped = mp.peds.new(model, new mp.Vector3(mp.players.local.position.x + (0, _methods.getRandomInt)(-10, 10), mp.players.local.position.y + (0, _methods.getRandomInt)(-10, 10), mp.players.local.position.z + 5), mp.players.local.heading, mp.players.local.dimension);
            mp.game.streaming.setModelAsNoLongerNeeded(model);
            await (0, _methods.wait)(50);
            ped.freezePosition(false);
            ped.setVisible(true, true);
            ped.setAlpha(255);
            mp.game.invoke(_methods2.methods.TASK_GO_TO_ENTITY, ped.handle, mp.players.local.handle, -1, 10.0, 1073741824.0, 0);
            mp.game.invoke(_methods2.methods.SET_PED_KEEP_TASK, ped.handle, true);
            pedsTest.push(ped);
            await (0, _methods.wait)(50);
          }
        } catch (error) {
          mp.gui.chat.push(error);
        }
      }

      await (0, _methods.wait)(10000);
      end = new Date().getTime();
      resData.npcJob = end - start - 10000;

      _methods2.methods.debug(resData.npcJob);

      pedsTest.forEach(ped => {
        ped.destroy();
      });
      resData.resultBall = Math.floor(counedFPS.reduce(function (sum, current) {
        return sum + current;
      }, 0));
      resData.averageFPS = Math.floor(resData.resultBall / counedFPS.length);
      resData.minFPS = Math.floor(counedFPS.reduce(function (min, current) {
        if (min == 0) return current;else if (min < current) return min;else return current;
      }, 0));
      resData.maxFPS = Math.floor(counedFPS.reduce(function (max, current) {
        if (max > current) return max;else return current;
      }, 0));
      resolve(resData);
      startTest = false;
    });
  });
}, 100);
},{"../../util/methods":"Z5QB","./methods":"qXSp"}],"ia7M":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

setInterval(() => {
  if (!mp.game.invoke(_methods.methods.HAS_PED_GOT_WEAPON, mp.players.local.handle, mp.game.joaat('WEAPON_UNARMED'), false)) {
    mp.game.invoke(_methods.methods.GIVE_WEAPON_TO_PED, mp.players.local.handle, mp.game.joaat('WEAPON_UNARMED'), 0, false, true);
  }
}, 1000);
mp.events.add('client:syncDeathRagdoll', async function (pId) {
  try {
    let remotePlayer = mp.players.atRemoteId(pId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer === mp.players.local) return;
      remotePlayer.setCanRagdoll(true);
      remotePlayer.setToRagdoll(30000, 30000, 0, false, false, false);
      remotePlayer.freezePosition(true);
      setTimeout(function () {
        if (mp.players.exists(remotePlayer)) remotePlayer.freezePosition(false);
      }, 30000);
    }
  } catch (e) {}
});
mp.events.add('client:syncAnimation', async (playerId, dict, anim, flag, accessVeh = false) => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer.vehicle) return;
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;else {
        remotePlayer.setAsMission(false, true);
        if (flag == 8 || flag == 9) flag = 32;
        if (dict == 'dead') flag = 9;
      }

      _methods.methods.debug('Execute: events:client:syncAnimation:' + flag);

      remotePlayer.clearTasks();
      mp.game.streaming.requestAnimDict(dict);
      let cnt = 0;

      while (!mp.game.streaming.hasAnimDictLoaded(dict) && cnt < 100) {
        cnt++;
        await _methods.methods.sleep(100);
      }

      try {
        remotePlayer.taskPlayAnim(dict, anim, 8.0, -8, -1, flag, 0, false, false, false);
      } catch (e) {
        _methods.methods.debug(e);
      }
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncAnimation');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncArrestAnimation', async playerId => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer.vehicle) return;
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;else remotePlayer.setAsMission(false, true);

      _methods.methods.debug('Execute: events:client:syncArrestAnimation');

      remotePlayer.clearTasks();
      mp.game.streaming.requestAnimDict('random@arrests');
      mp.game.streaming.requestAnimDict('random@arrests@busted');
      if (!mp.game.streaming.hasAnimDictLoaded('random@arrests')) await _methods.methods.sleep(100);
      if (!mp.game.streaming.hasAnimDictLoaded('random@arrests@busted')) await _methods.methods.sleep(100);

      if (remotePlayer.isPlayingAnim('random@arrests@busted', 'idle_a', 3) === true) {
        remotePlayer.taskPlayAnim('random@arrests@busted', 'exit', 8.0, -8, -1, 2, 0, false, false, false);
        await _methods.methods.sleep(3000);
        remotePlayer.taskPlayAnim('random@arrests', 'kneeling_arrest_get_up', 8.0, -8, -1, 128, 0, false, false, false);
      } else {
        remotePlayer.taskPlayAnim('random@arrests', 'idle_2_hands_up', 8.0, -8, -1, 2, 0, false, false, false);
        await _methods.methods.sleep(4000);
        remotePlayer.taskPlayAnim('random@arrests', 'kneeling_arrest_idle', 8.0, -8, -1, 2, 0, false, false, false);
        await _methods.methods.sleep(500);
        remotePlayer.taskPlayAnim('random@arrests@busted', 'enter', 8.0, -8, -1, 2, 0, false, false, false);
        await _methods.methods.sleep(1000);
        remotePlayer.taskPlayAnim('random@arrests@busted', 'idle_a', 8.0, -8, -1, 9, 0, false, false, false);
      }
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncAnimation');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncHeadingToCoord', (playerId, x, y, z) => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer.vehicle) return;
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;

      _methods.methods.debug('Execute: events:client:syncHeadingToCoord');

      remotePlayer.clearTasks();
      remotePlayer.taskTurnToFaceCoord(x, y, z, -1);
      setTimeout(function () {
        remotePlayer.clearTasks();
      }, 2000);
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncAnimation');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncHeadingToTarget', (playerId, targetId) => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);
    let targetPlayer = mp.players.atRemoteId(targetId);

    if (remotePlayer && mp.players.exists(remotePlayer) && targetPlayer && mp.players.exists(targetPlayer)) {
      if (remotePlayer.vehicle) return;
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;

      _methods.methods.debug('Execute: events:client:syncHeadingToTarget');

      remotePlayer.clearTasks();
      remotePlayer.taskTurnToFace(targetPlayer.handle, -1);
      setTimeout(function () {
        remotePlayer.clearTasks();
      }, 2000);
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncAnimation');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncStopAnimation', playerId => {
  try {
    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      remotePlayer.clearTasks();
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncAnimation');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncScenario', (playerId, name, x, y, z, h, tp) => {
  try {
    _methods.methods.debug('Execute: events:client:syncScenario');

    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;else remotePlayer.setAsMission(false, true);

      if (name && x && y && z && h) {
        remotePlayer.clearTasksImmediately();
        remotePlayer.taskStartScenarioAtPosition(name, x, y, z, h, -1, !!!tp && name == "PROP_HUMAN_SEAT_BENCH", !!tp);
      } else if (name == 'PROP_HUMAN_SEAT_BENCH') {
        remotePlayer.clearTasks();
        let pos = remotePlayer.getOffsetFromInWorldCoords(0, -0.5, -0.5);
        let heading = remotePlayer.getRotation(0).z;
        remotePlayer.taskStartScenarioAtPosition(name, pos.x, pos.y, pos.z, heading, -1, true, false);
      } else {
        remotePlayer.clearTasks();
        remotePlayer.taskStartScenarioInPlace(name, 0, true);
      }
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncScenario');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncStopScenario', (playerId, quick = false) => {
  try {
    _methods.methods.debug('Execute: client:syncStopScenario');

    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (quick) {
        remotePlayer.clearTasksImmediately();
      } else {
        remotePlayer.clearTasks();
      }
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncScenario');

    _methods.methods.debug(e);
  }
});
mp.events.add('client:syncScenarioCoord', (playerId, x, y, z, r) => {
  try {
    _methods.methods.debug('Execute: events:client:syncScenario');

    let remotePlayer = mp.players.atRemoteId(playerId);

    if (remotePlayer && mp.players.exists(remotePlayer)) {
      if (remotePlayer === mp.players.local) remotePlayer = mp.players.local;else remotePlayer.setAsMission(false, true);
      remotePlayer.clearTasks();
      remotePlayer.taskUseNearestScenarioToCoordWarp(x, y, z, r, 2.0);
    }
  } catch (e) {
    _methods.methods.debug('Exception: events:client:syncScenario');

    _methods.methods.debug(e);
  }
});
},{"../modules/methods":"qXSp"}],"Pv0L":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shootingProps = exports.shootTargets = void 0;
const shootTargets = ['gr_prop_gr_target_05b', 'gr_prop_gr_target_02b'];
exports.shootTargets = shootTargets;
const shootingProps = [{
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1737.73400000",
    "y": "2939.25100000",
    "z": "31.73810000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-65.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1729.13000000",
    "y": "2939.29200000",
    "z": "31.71416000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-100.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1735.59400000",
    "y": "2942.31200000",
    "z": "31.73190000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "160.000"
  }
}, {
  "model": "gr_prop_gr_target_02b",
  "position": {
    "x": "-1744.80200000",
    "y": "2944.08900000",
    "z": "32.64614000"
  },
  "rotation": {
    "x": "-1.051",
    "y": "-2.639",
    "z": "-55.000"
  }
}, {
  "model": "gr_prop_gr_target_02b",
  "position": {
    "x": "-1739.57900000",
    "y": "2937.27400000",
    "z": "32.25810000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1740.63900000",
    "y": "2944.84700000",
    "z": "31.72072000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1737.35000000",
    "y": "2942.70100000",
    "z": "31.72564000"
  },
  "rotation": {
    "x": "-0.000",
    "y": "-0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1739.49000000",
    "y": "2947.37800000",
    "z": "31.62812000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "120.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1738.63300000",
    "y": "2948.83500000",
    "z": "31.61409000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "120.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1731.34800000",
    "y": "2947.88300000",
    "z": "31.73235000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1735.16300000",
    "y": "2943.44300000",
    "z": "31.71302000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1732.66700000",
    "y": "2942.21000000",
    "z": "31.71442000"
  },
  "rotation": {
    "x": "-0.500",
    "y": "0.000",
    "z": "-149.982"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1725.34400000",
    "y": "2931.28000000",
    "z": "31.68057000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-155.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1716.33500000",
    "y": "2938.02600000",
    "z": "31.69757000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1716.29800000",
    "y": "2924.19900000",
    "z": "31.71649000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "115.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1708.07400000",
    "y": "2924.84400000",
    "z": "31.72356000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "165.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1707.41100000",
    "y": "2929.41400000",
    "z": "31.71502000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-5.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1748.66900000",
    "y": "2932.20100000",
    "z": "31.75333000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1735.92800000",
    "y": "2933.58300000",
    "z": "31.85718000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1745.86500000",
    "y": "2936.73600000",
    "z": "31.71171000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1737.83900000",
    "y": "2929.38800000",
    "z": "31.64512000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1705.78300000",
    "y": "2899.26600000",
    "z": "31.73372000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "25.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1708.81600000",
    "y": "2889.61100000",
    "z": "31.69457000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1715.60100000",
    "y": "2882.57700000",
    "z": "31.74138000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "25.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1719.76400000",
    "y": "2871.27800000",
    "z": "31.73417000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1712.99300000",
    "y": "2889.61100000",
    "z": "31.71197000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "40.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1717.89400000",
    "y": "2887.48500000",
    "z": "31.73644000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "90.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1726.26600000",
    "y": "2868.33900000",
    "z": "31.65401000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1727.38100000",
    "y": "2872.96200000",
    "z": "31.69425000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1731.56200000",
    "y": "2870.78800000",
    "z": "31.71608000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1736.74800000",
    "y": "2872.90300000",
    "z": "31.72786000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "85.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1738.13600000",
    "y": "2869.94900000",
    "z": "31.73296000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "160.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1741.12300000",
    "y": "2923.77700000",
    "z": "31.68410000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1742.86700000",
    "y": "2921.07500000",
    "z": "31.74139000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1745.07000000",
    "y": "2917.09000000",
    "z": "31.70095000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1708.18700000",
    "y": "2903.32700000",
    "z": "31.79096000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-105.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1715.78000000",
    "y": "2898.99100000",
    "z": "31.48486000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-110.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1712.44700000",
    "y": "2895.87100000",
    "z": "31.72089000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1716.45300000",
    "y": "2892.27600000",
    "z": "31.69579000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1735.15700000",
    "y": "2892.21400000",
    "z": "31.70109000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1726.98500000",
    "y": "2896.74500000",
    "z": "31.71740000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1726.87300000",
    "y": "2892.49600000",
    "z": "31.72764000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1732.24900000",
    "y": "2900.08400000",
    "z": "31.54546000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-120.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1737.32200000",
    "y": "2891.87700000",
    "z": "31.59193000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-5.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1738.89500000",
    "y": "2903.95500000",
    "z": "31.75171000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1740.48200000",
    "y": "2900.97100000",
    "z": "31.75282000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1749.80300000",
    "y": "2904.19900000",
    "z": "31.94684000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1743.46900000",
    "y": "2895.11900000",
    "z": "31.70387000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "125.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1750.27000000",
    "y": "2906.05300000",
    "z": "31.62413000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1754.70000000",
    "y": "2909.58700000",
    "z": "31.71075000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1758.78400000",
    "y": "2911.00000000",
    "z": "31.70669000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "30.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1757.64200000",
    "y": "2908.82300000",
    "z": "31.85942000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-150.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1736.70900000",
    "y": "2906.34600000",
    "z": "31.74233000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1737.53300000",
    "y": "2904.59500000",
    "z": "31.74472000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "-60.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1725.13000000",
    "y": "2866.65500000",
    "z": "31.73284000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "25.000"
  }
}, {
  "model": "gr_prop_gr_target_05b",
  "position": {
    "x": "-1725.13000000",
    "y": "2866.65500000",
    "z": "31.73284000"
  },
  "rotation": {
    "x": "0.000",
    "y": "0.000",
    "z": "25.000"
  }
}];
exports.shootingProps = shootingProps;
},{}],"BDJ2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pointingAt = pointingAt;

function pointingAt(distance = 5) {
  const camera = mp.cameras.new("gameplay");
  let position = camera.getCoord();
  let direction = camera.getDirection();
  let farAway = new mp.Vector3(direction.x * distance + position.x, direction.y * distance + position.y, direction.z * distance + position.z);
  let result = mp.raycasting.testPointToPoint(position, farAway, [1, 16]);
  return result;
}
},{}],"VHum":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scaleFormText = exports.ScaleForm = void 0;

var _methods = require("../modules/methods");

class ScaleForm {
  constructor(scaleformStr) {
    this._handle = mp.game.graphics.requestScaleformMovie(scaleformStr);
    this.enable = true;
    this.queueCallFunction = new Map();
  }

  setText(text) {
    this.callFunction('SET_PLAYER_NAME', text);
  }

  destroy() {
    if (typeof this._handle == "number") mp.game.graphics.setScaleformMovieAsNoLongerNeeded(this._handle);
    this.enable = false;
  }

  get isLoaded() {
    return !!mp.game.graphics.hasScaleformMovieLoaded(this._handle);
  }

  get isValid() {
    return this._handle !== 0;
  }

  get handle() {
    return this._handle;
  }

  callFunction(strFunction, ...args) {
    if (this.isLoaded && this.isValid) {
      const graphics = mp.game.graphics;
      graphics.pushScaleformMovieFunction(this._handle, strFunction);
      args.forEach(arg => {
        switch (typeof arg) {
          case 'string':
            {
              graphics.pushScaleformMovieFunctionParameterString(arg);
              break;
            }

          case 'boolean':
            {
              graphics.pushScaleformMovieFunctionParameterBool(arg);
              break;
            }

          case 'number':
            {
              if (Number(arg) === arg && arg % 1 !== 0) {
                graphics.pushScaleformMovieFunctionParameterFloat(arg);
              } else {
                graphics.pushScaleformMovieFunctionParameterInt(arg);
              }
            }
        }
      });
      graphics.popScaleformMovieFunctionVoid();
    } else {
      this.queueCallFunction.set(strFunction, args);
    }
  }

  onUpdate() {
    if (this.isLoaded && this.isValid) {
      this.queueCallFunction.forEach((args, strFunction) => {
        this.callFunction(strFunction, ...args);
        this.queueCallFunction.delete(strFunction);
      });
    }
  }

  render2D(x, y, width, height) {
    this.onUpdate();

    if (this.isLoaded && this.isValid) {
      const graphics = mp.game.graphics;

      if (typeof x !== 'undefined' && typeof y !== 'undefined' && typeof width !== 'undefined' && typeof height !== 'undefined') {
        const activeResolution = graphics.getScreenActiveResolution(0, 0);
        graphics.drawScaleformMovie(this._handle, x, y, width, height, 255, 255, 255, 255, 0);
      } else {
        graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
      }
    }
  }

  render3D(position, rotation, scale) {
    this.onUpdate();

    if (this.isLoaded && this.isValid) {
      mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
    }
  }

  render3DAdditive(position, rotation, scale) {
    this.onUpdate();

    if (this.isLoaded && this.isValid) {
      mp.game.graphics.drawScaleformMovie3d(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
    }
  }

}

exports.ScaleForm = ScaleForm;
let ids = 0;
let scaleFormTextList = [];

const scaleFormText = (text, position, rotation, distance = 30, scale) => {
  ids++;
  let myScaleForm = new ScaleForm('player_name_0' + ids);
  myScaleForm.callFunction('SET_PLAYER_NAME', text);
  scaleFormTextList.push([myScaleForm, position, rotation, distance, scale]);
  return myScaleForm;
};

exports.scaleFormText = scaleFormText;
mp.events.add('render', () => {
  scaleFormTextList.map(item => {
    if (item[0].enable) {
      if (_methods.methods.distanceToPos(mp.players.local.position, item[1]) <= item[3]) item[0].render3D(item[1], item[2], item[4]);
    }
  });
});
mp.events.add('createScaleform', () => {});
},{"../modules/methods":"qXSp"}],"R6P3":[function(require,module,exports) {
"use strict";

var _shootingRange = require("../../util/shootingRange");

var _raycast = require("./raycast");

var _scaleForm = require("./scaleForm");

var _ui = require("../modules/ui");

let objects = [];
let blips = [];
let start = false;
let res = null;
let raycastRes;
(0, _scaleForm.scaleFormText)(`Начало\nиспытания`, new mp.Vector3(-1747.086, 2940.278, 35.40466), new mp.Vector3(0, 0, 120), 100, new mp.Vector3(6, 3, 1));
let top3scale;
mp.events.add('updateshoottop3', list => {
  if (!top3scale) top3scale = (0, _scaleForm.scaleFormText)(`Топ-5\n${list.join('\n')}`, new mp.Vector3(-1745.536, 2921.145, 33.87434), new mp.Vector3(0, 0, 120), 100, new mp.Vector3(3, 1.6, 0.7));else top3scale.setText(`Топ-5\n${list.join('\n')}`);
});
mp.events.add('playerDeath', function () {
  if (!res) return;
  start = false;
  res(false);
  objects.map(item => {
    item.destroy();
  });
  blips.map(item => {
    item.destroy();
  });
  objects = [];
  blips = [];
});
mp.events.add('shootingRangeClose', function () {
  if (!res) return;
  start = false;
  res(false);
  objects.map(item => {
    item.destroy();
  });
  blips.map(item => {
    item.destroy();
  });
  objects = [];
  blips = [];
});
mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
  if (!start) return;
  start = false;
  raycastRes = (0, _raycast.pointingAt)(200);
  if (!raycastRes) return;
  let index = objects.findIndex(item => item == raycastRes.entity);

  if (index > -1) {
    objects[index].destroy();
    blips[index].destroy();
    objects.splice(index, 1);
    blips.splice(index, 1);

    _ui.ui.soundHit();
  }

  if (objects.length == 0) {
    start = false;
    res(true);
    res = null;
  } else {
    start = true;
  }
});
setTimeout(() => {
  mp.events.register('shootingRangeWait', () => {
    return new Promise(resolve => {
      objects = [];
      blips = [];

      _ui.ui.soundPlay2();

      _shootingRange.shootingProps.map(item => {
        let model = item.model.toLowerCase();

        if (_shootingRange.shootTargets.includes(model)) {
          objects.push(mp.objects.new(mp.game.joaat(model), new mp.Vector3(parseFloat(item.position.x), parseFloat(item.position.y), parseFloat(item.position.z)), {
            rotation: new mp.Vector3(parseFloat(item.rotation.x) * -1, parseFloat(item.rotation.y) * -1, parseFloat(item.rotation.z) * -1),
            dimension: mp.players.local.dimension
          }));
          blips.push(mp.blips.new(119, new mp.Vector3(parseFloat(item.position.x), parseFloat(item.position.y), parseFloat(item.position.z)), {
            color: 1,
            dimension: mp.players.local.dimension,
            shortRange: false
          }));
        }
      });

      res = resolve;
      start = true;
    });
  });
}, 2000);
},{"../../util/shootingRange":"Pv0L","./raycast":"BDJ2","./scaleForm":"VHum","../modules/ui":"zOnK"}],"Klt7":[function(require,module,exports) {
let timeRender = 1;
let timeRenderOld = 0;
let timeRenderCountWarning = 0;
},{}],"uwcG":[function(require,module,exports) {
"use strict";

var _weapons = require("../weapons");

var _user = require("../user");

var _gui = require("../modules/gui");

var _phone = require("../phone");

mp.events.add('entityStreamOut', entity => {
  if (entity.type != "player") return;
  if (!entity.__attachmentObjects) return;

  for (let id in entity.__attachmentObjects) {
    entity.__attachmentObjects[id].destroy();

    delete entity.__attachmentObjects[id];
  }
});
const attachmentMngr = {
  attachments: {},
  addFor: function (entity, id) {
    if (attachmentMngr.attachments.hasOwnProperty(id)) {
      if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

      if (!entity.__attachmentObjects.hasOwnProperty(id)) {
        let attInfo = attachmentMngr.attachments[id];
        let object = mp.objects.new(attInfo.model, entity.position);
        object.attachTo(entity.handle, typeof attInfo.boneName === 'string' ? entity.getBoneIndexByName(attInfo.boneName) : entity.getBoneIndex(attInfo.boneName), attInfo.offset.x, attInfo.offset.y, attInfo.offset.z, attInfo.rotation.x, attInfo.rotation.y, attInfo.rotation.z, false, false, false, false, 2, true);
        entity.__attachmentObjects[id] = object;
      }
    }
  },
  removeFor: function (entity, id) {
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    if (entity.__attachmentObjects.hasOwnProperty(id)) {
      let obj = entity.__attachmentObjects[id];
      delete entity.__attachmentObjects[id];

      if (mp.objects.exists(obj)) {
        obj.destroy();
      }
    }
  },
  initFor: function (entity) {
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    for (let attachment of entity.__attachments) {
      attachmentMngr.addFor(entity, attachment);
    }
  },
  shutdownFor: function (entity) {
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    for (let attachment in entity.__attachmentObjects) {
      let id = attachment;
      attachmentMngr.removeFor(entity, id);
    }
  },
  register: function (id, model, boneName, offset, rotation) {
    if (typeof id === 'string') {
      id = mp.game.joaat(id);
    }

    if (typeof model === 'string') {
      model = mp.game.joaat(model);
    }

    if (!attachmentMngr.attachments.hasOwnProperty(id)) {
      if (mp.game.streaming.isModelInCdimage(model)) {
        attachmentMngr.attachments[id] = {
          id: id,
          model: model,
          offset: offset,
          rotation: rotation,
          boneName: boneName
        };
      }
    }
  },
  unregister: function (id) {
    if (typeof id === 'string') {
      id = mp.game.joaat(id);
    }

    if (attachmentMngr.attachments.hasOwnProperty(id)) {
      attachmentMngr.attachments[id] = undefined;
    }
  },
  addLocal: function (attachmentName) {
    if (typeof attachmentName == 'string') attachmentName = mp.game.joaat(attachmentName);
    let entity = mp.players.local;
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    if (!entity.__attachments || entity.__attachments.indexOf(attachmentName) === -1) {
      mp.events.callRemote("staticAttachments.Add", attachmentName.toString(36));
    }
  },
  removeLocal: function (attachmentName) {
    if (typeof attachmentName === 'string') {
      attachmentName = mp.game.joaat(attachmentName);
    }

    let entity = mp.players.local;
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    if (entity.__attachments && entity.__attachments.indexOf(attachmentName) !== -1) {
      mp.events.callRemote("staticAttachments.Remove", attachmentName.toString(36));
    }
  },
  removeLocalAll: function () {
    let entity = mp.players.local;
    if (!entity.__attachmentObjects) entity.__attachmentObjects = {};

    if (entity.__attachments) {
      entity.__attachments.map(id => {
        mp.events.callRemote("staticAttachments.Remove", id.toString(36));
      });
    }
  },
  getAttachments: function () {
    return Object.assign({}, attachmentMngr.attachments);
  }
};
mp.events.add("entityStreamIn", entity => {
  if (entity.__attachments) {
    attachmentMngr.initFor(entity);
  }
});
mp.events.add("entityStreamOut", entity => {
  if (entity.__attachmentObjects) {
    attachmentMngr.shutdownFor(entity);
  }
});
mp.events.addDataHandler("attachmentsData", (entity, data) => {
  let newAttachments = data.length > 0 ? data.split('|').map(att => parseInt(att, 36)) : [];

  if (entity.handle !== 0) {
    let oldAttachments = entity.__attachments;

    if (!oldAttachments) {
      oldAttachments = [];
      entity.__attachmentObjects = {};
    }

    for (let attachment of oldAttachments) {
      if (newAttachments.indexOf(attachment) === -1) {
        attachmentMngr.removeFor(entity, attachment);
      }
    }

    for (let attachment of newAttachments) {
      if (oldAttachments.indexOf(attachment) === -1) {
        attachmentMngr.addFor(entity, attachment);
      }
    }
  }

  entity.__attachments = newAttachments;
});

function InitAttachmentsOnJoin() {
  mp.players.forEach(_player => {
    let data = _player.getVariable("attachmentsData");

    if (data && data.length > 0) {
      let atts = data.split('|').map(att => parseInt(att, 36));
      _player.__attachments = atts;
      _player.__attachmentObjects = {};
    }
  });
}

InitAttachmentsOnJoin();

function addMisc() {
  attachmentMngr.register("mining", "prop_tool_jackham", 60309, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("drinking_1", "prop_ld_can_01", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("drinking_2", "prop_ecola_can", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("drinking_3", "prop_ld_flow_bottle", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("char_creator_1", "prop_beggers_sign_04", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("handcuff", "p_cs_cuffs_02_s", 28422, new mp.Vector3(-0.01, 0.06, -0.02), new mp.Vector3(62.0, -6.0, 66.0));
  attachmentMngr.register("phone", "prop_npc_phone_02", 28422, new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0));
  attachmentMngr.register("tablet", "hei_prop_dlc_tablet", 28422, new mp.Vector3(-0.09, -0.025, 0), new mp.Vector3(0, 90, 15));
}

function addWeapons() {
  let weapons = [["Pistol", 1467525553, 0], ["VintagePistol", -1124046276, 0], ["APPistol", 905830540, 0], ["CombatPistol", 403140669, 0], ["Revolver", 914615883, 0], ["SNSPistol", 339962010, 0], ["HeavyPistol", 1927398017, 0], ["Pistol50", -178484015, 0], ["CombatPDW", -1393014804, 1], ["MicroSMG", -1056713654, 1], ["SMG", -500057996, 1], ["MiniSMG", -972823051, 1], ["MachinePistol", -331545829, 1], ["AssaultSMG", -473574177, 1], ["HeavyShotgun", -1209868881, 2], ["AssaultShotgun", 1255410010, 2], ["BullpupShotgun", -1598212834, 2], ["CarbineRifle", 1026431720, 3], ["AssaultRifle", 273925117, 3], ["SpecialCarbine", -1745643757, 3], ["CompactRifle", "w_ar_assaultrifle_smg", 1]];
  let offset = new mp.Vector3(0.0, 0.0, 0.0);
  let rotation = new mp.Vector3(0.0, 0.0, 0.0);

  for (let weap of weapons) {
    let bone = 0;

    switch (weap[2]) {
      case 0:
        bone = 51826;
        offset = new mp.Vector3(0.02, 0.06, 0.1);
        rotation = new mp.Vector3(-100.0, 0.0, 0.0);
        break;

      case 1:
        bone = 58271;
        offset = new mp.Vector3(0.08, 0.03, -0.1);
        rotation = new mp.Vector3(-80.77, 0.0, 0.0);
        break;

      case 2:
        bone = 24818;
        offset = new mp.Vector3(-0.1, -0.15, 0.11);
        rotation = new mp.Vector3(-180.0, 0.0, 0.0);
        break;

      case 3:
        bone = 24818;
        offset = new mp.Vector3(-0.1, -0.15, -0.13);
        rotation = new mp.Vector3(0.0, 0.0, 3.5);
        break;
    }

    let model = weap[0];
    attachmentMngr.register(model.toUpperCase(), weap[1], bone, offset, rotation);
  }

  attachmentMngr.register("HAMMER".toUpperCase(), "prop_tool_hammer", 58271, new mp.Vector3(-0.0, -0.1, -0.1), new mp.Vector3(-120.0, -90.10, 0.0));
  attachmentMngr.register("BAT".toUpperCase(), "w_me_bat", 24818, new mp.Vector3(0.25, -0.15, -0.15), new mp.Vector3(0.0, 270.0, 0.0));
  attachmentMngr.register("CROWBAR".toUpperCase(), "w_me_crowbar", 58271, new mp.Vector3(-0.05, 0.0, -0.1), new mp.Vector3(-80.0, 90.10, 0.0));
  attachmentMngr.register("BATTLEAXE".toUpperCase(), "prop_tool_fireaxe", 24818, new mp.Vector3(0.25, -0.15, -0.05), new mp.Vector3(0.0, 270.0, 0.0));
  attachmentMngr.register("WRENCH".toUpperCase(), "w_me_hammer", 58271, new mp.Vector3(-0.01, 0.1, -0.1), new mp.Vector3(-80.0, 90.10, 0.0));
  attachmentMngr.register("PUMPSHOTGUN".toUpperCase(), "w_sg_pumpshotgun", 24818, new mp.Vector3(0.1, -0.15, 0.025), new mp.Vector3(0.0, 180.0, 0.0));
  attachmentMngr.register("SAWNOFFSHOTGUN".toUpperCase(), "w_sg_sawnoff", 24818, new mp.Vector3(0.0, -0.15, 0.1), new mp.Vector3(0.0, 180.0, 0.0));
  attachmentMngr.register("BULLPUPSHOTGUN".toUpperCase(), "w_sg_bullpupshotgun", 24818, new mp.Vector3(0.1, -0.2, 0.025), new mp.Vector3(0.0, 180.0, 0.0));
  attachmentMngr.register("MUSKET".toUpperCase(), "w_ar_musket", 11816, new mp.Vector3(0.2, 0.0, -0.25), new mp.Vector3(50.0, 210.0, 0.0));
  attachmentMngr.register("SNIPERRIFLE".toUpperCase(), "w_sr_sniperrifle", 24818, new mp.Vector3(-0.1, -0.2, 0.025), new mp.Vector3(0.0, 0.0, 0.0));
  attachmentMngr.register("MARKSMANRIFLE".toUpperCase(), "w_sr_marksmanrifle", 11816, new mp.Vector3(0.2, 0.0, -0.3), new mp.Vector3(50.0, 210.0, 0.0));
}

addWeapons();
addMisc();
let lastDimension = 0;
let block = false;
setInterval(() => {
  if (!_user.user.isLogin()) return;
  if (block) return;
  const player = mp.players.local;

  if (lastDimension != player.dimension) {
    attachmentMngr.removeLocalAll();
    block = true;
    setTimeout(() => {
      block = true;
    }, 1000);
  }

  lastDimension = player.dimension;

  _weapons.weapons.hashesMap.forEach(item => {
    let hash = item[1] / 2;
    let have = mp.game.invoke("0x8DECB02F88F428BC", player.handle, hash, false) && !(mp.game.invoke("0x0A6DB4965674D243", player.handle) == hash);
    if (have) attachmentMngr.addLocal(item[0].toUpperCase());else attachmentMngr.removeLocal(item[0].toUpperCase());
  });

  if (_gui.gui.currentGui == 'tablet' && !mp.players.local.vehicle) attachmentMngr.addLocal('tablet'), mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);else attachmentMngr.removeLocal('tablet');
  if (_phone.phone.isPhoneOpen() || mp.players.local.getVariable('call')) attachmentMngr.addLocal('phone'), mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);else attachmentMngr.removeLocal('phone');
  if (_user.user.isCuff()) attachmentMngr.addLocal('handcuff');else attachmentMngr.removeLocal('handcuff');
}, 100);
},{"../weapons":"YeMF","../user":"QE3B","../modules/gui":"bk91","../phone":"Gt5n"}],"ufbL":[function(require,module,exports) {
"use strict";

var _gui = require("../modules/gui");

var _user = require("../user");

var _phone = require("../phone");

let spamBlock = false;

function spbl() {
  spamBlock = true;
  setTimeout(() => {
    spamBlock = false;
  }, 2000);
}

setInterval(() => {
  if (spamBlock) return;
  if (_user.user.isDead()) return;
  const player = mp.players.local;
  let dictphone = "cellphone@";
  if (mp.players.local.vehicle) dictphone += "in_car@ds";
  const playphoneanim = player.isPlayingAnim(dictphone, 'cellphone_text_read_base', 3);

  if (_gui.gui.currentGui == 'tablet') {
    if (!playphoneanim) {
      _user.user.playAnimation(dictphone, 'cellphone_text_read_base', 49, true);

      spbl();
    }
  } else if (_phone.phone.isPhoneOpen()) {
    if (!playphoneanim) {
      _user.user.playAnimation(dictphone, 'cellphone_text_read_base', 49, true);

      spbl();
    }
  } else if (playphoneanim) {
    _user.user.stopAllAnimation();

    spbl();
  }
}, 100);
},{"../modules/gui":"bk91","../user":"QE3B","../phone":"Gt5n"}],"pqyY":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npc = void 0;

var _methods = require("../modules/methods");

mp.events.add('seatPedIntoVehicle', (pedid, vehid, seat, timeout, speed, flag) => {
  let ped = mp.peds.atRemoteId(pedid);
  if (!ped) return;
  let veh = mp.vehicles.atRemoteId(vehid);
  if (!veh) return;
  mp.game.invoke(_methods.methods.TASK_ENTER_VEHICLE, ped.handle, veh.handle, timeout, seat, speed, flag);
});
mp.events.add('pedDriveWaypoint', (pedid, x, y, z, speed, driveMode, stopRange) => {
  let ped = mp.peds.atRemoteId(pedid);
  if (!ped) return;
  mp.game.invoke("0x158BB33F920D360C", ped.handle, mp.game.invoke('0x9A9112A0FE9A4713', ped.handle, true), x, y, z, speed, driveMode, stopRange);
});
mp.events.add('clearPedTask', (pedid, immediately = false) => {
  let ped = mp.peds.atRemoteId(pedid);
  if (!ped) return;
  if (immediately) mp.game.invoke("0xE1EF3C1216AFF2CD", ped.handle);else mp.game.invoke("0xAAA34F8A7CB32098", ped.handle);
});
let _npcList = [];
let _loadDist = 100;
let npc = {
  loadAll: () => {
    npc.create('s_m_m_highsec_01', new mp.Vector3(-137.6827, 974.5458, 235.75), -99.98929, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create('s_m_m_highsec_02', new mp.Vector3(-132.2644, 972.4172, 235.7416), 64.99982, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create('a_f_y_soucent_02', new mp.Vector3(-106.3265, 961.6937, 233.3073), 116.0001, true, 'WORLD_HUMAN_GARDENER_PLANT');
    npc.create('s_m_m_gardener_01', new mp.Vector3(-62.68492, 940.9781, 232.4227), 70.99993, true, 'WORLD_HUMAN_GARDENER_LEAF_BLOWER');
    npc.create('s_m_y_devinsec_01', new mp.Vector3(-110.9386, 999.0899, 240.8519), 28.40079, true, 'CODE_HUMAN_CROSS_ROAD_WAIT');
    npc.create('u_m_m_jewelsec_01', new mp.Vector3(-93.59818, 987.443, 240.9464), -152.9994, true, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create('s_m_m_highsec_01', new mp.Vector3(-61.13178, 978.3408, 232.8693), -153.9992, true, 'WORLD_HUMAN_STAND_IMPATIENT_UPRIGHT');
    npc.create('s_m_m_highsec_02', new mp.Vector3(-82.46698, 942.5785, 233.0286), 0.09982711, true, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create('s_m_y_devinsec_01', new mp.Vector3(-113.0847, 983.8484, 235.7563), 119.1996, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create('u_m_m_jewelsec_01', new mp.Vector3(-48.72831, 951.6181, 232.1743), -173.2996, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create('s_m_m_highsec_01', new mp.Vector3(-68.40871, 1007.543, 234.3994), -34.9999, true, 'WORLD_HUMAN_STAND_IMPATIENT_UPRIGHT');
    npc.create('a_f_m_eastsa_02', new mp.Vector3(-80.19171, 980.4577, 234.1708), -134.9996, true, 'WORLD_HUMAN_GARDENER_PLANT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(1728.476, 6416.668, 35.03724), -109.9557, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(1698.477, 4922.482, 42.06366), -32.02934, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(1959.179, 3741.332, 32.34376), -51.81022, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(549.306, 2669.898, 42.15651), 102.036, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(1165.198, 2710.855, 38.15769), -169.9903, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(2676.561, 3280.001, 55.24115), -20.5138, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(-3243.886, 999.9983, 12.83071), -0.1504957, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(-3040.344, 584.0048, 7.908932), 25.86866, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(-2966.275, 391.6495, 15.04331), 90.95544, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(-1820.364, 794.7905, 138.0867), 136.5701, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(372.8323, 327.9543, 103.5664), -93.31544, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(-1486.615, -377.3467, 40.16341), 135.9596, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(-1221.311, -907.9825, 12.32635), 44.03139, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(-706.0112, -912.8375, 19.2156), 93.35769, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(1164.863, -322.054, 69.2051), 109.3829, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(1134.109, -983.1777, 46.41582), -74.49993, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(24.17295, -1345.768, 29.49703), -79.8604, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_sweatshop_01'), new mp.Vector3(-46.25561, -1757.611, 29.42101), 55.09486, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('mp_m_shopkeep_01'), new mp.Vector3(2555.677, 380.6046, 108.623), 1.572431, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('g_m_y_korean_01'), new mp.Vector3(-656.9416, -858.7859, 24.49001), 2.746706, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_01'), new mp.Vector3(1132.687, -474.5676, 66.7187), 345.9362, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_m_business_01'), new mp.Vector3(317.9639, -1078.319, 28.47855), 359.3141, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_business_01'), new mp.Vector3(92.31831, -231.1054, 54.66363), 327.2379, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_m_business_01'), new mp.Vector3(299.7478, -733.0994, 29.3525), 255.0316, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_business_01'), new mp.Vector3(-177.5367, 6384.567, 31.49536), 224.1046, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(2567.45, 292.3297, 108.7349), 0.9863386, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(-3173.501, 1088.957, 20.83874), -106.5671, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(-1118.609, 2700.271, 18.55414), -135.1759, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(1692.413, 3761.51, 34.70534), -126.9435, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(-331.3555, 6085.712, 31.45477), -133.1493, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(23.1827, -1105.512, 29.79702), 158.1179, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(253.8001, -51.07007, 69.9411), 71.83827, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(841.848, -1035.449, 28.19485), -1.228782, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(-661.7558, -933.2841, 21.82923), -178.1721, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(-1303.956, -395.2117, 36.69579), 75.62228, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_ammucity_01'), new mp.Vector3(809.6276, -2159.31, 29.61901), -2.014809, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(319.8327, 181.0894, 103.5865), -106.512, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(1862.807, 3748.279, 33.03187), 40.61253, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(-292.3047, 6199.946, 31.48711), -117.6071, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(-1151.971, -1423.695, 4.954463), 136.3183, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(1324.483, -1650.021, 52.27503), 144.9793, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_y_tattoo_01'), new mp.Vector3(-3170.404, 1072.786, 20.82917), -6.981083, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(134.8694, -1708.296, 29.29161), 151.6018, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(1211.27, -471.0499, 66.20805), 82.84951, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(-278.3121, 6230.216, 31.69552), 60.1603, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(-1284.274, -1115.853, 6.99013), 99.18153, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(1931.232, 3728.298, 32.84444), -144.9153, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(-31.19347, -151.4883, 57.07652), -7.542643, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_m_fembarber'), new mp.Vector3(-822.4669, -183.7317, 37.56892), -139.7869, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_hipster_02'), new mp.Vector3(-823.3749, -1072.378, 11.32811), -108.4307, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_02'), new mp.Vector3(427.0797, -806.0226, 29.49113), 130.6033, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_hipster_02'), new mp.Vector3(6.133633, 6511.472, 31.87784), 82.75452, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_02'), new mp.Vector3(1695.472, 4823.236, 42.0631), 125.9657, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_hipster_02'), new mp.Vector3(1196.317, 2711.907, 38.22262), -145.9363, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_02'), new mp.Vector3(-1102.664, 2711.66, 19.10786), -103.8504, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_hipster_02'), new mp.Vector3(73.73582, -1392.895, 29.37614), -68.70364, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_shop_mid'), new mp.Vector3(612.8171, 2761.852, 42.08812), -63.55088, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_01'), new mp.Vector3(-1194.562, -767.3227, 17.31602), -120.527, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_f_y_shop_mid'), new mp.Vector3(-3168.905, 1043.997, 20.86322), 80.39653, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_hipster_01'), new mp.Vector3(127.306, -223.5369, 54.55785), 101.7699, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_business_01'), new mp.Vector3(-164.6587, -302.2024, 39.7333), -90.87177, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_m_y_business_01'), new mp.Vector3(-708.5155, -152.5676, 37.41148), 133.2013, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('a_f_y_business_01'), new mp.Vector3(-1449.5, -238.6422, 49.81335), 60.38498, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_f_y_jewelass_01'), new mp.Vector3(-623.1789, -229.2665, 38.05703), 48.75668, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('ig_jewelass'), new mp.Vector3(-620.9707, -232.295, 38.05703), -134.2347, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('u_m_m_jewelsec_01'), new mp.Vector3(-628.8972, -238.8752, 38.05712), -49.34913, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_shop_mask'), new mp.Vector3(-1334.673, -1276.343, 4.963552), 142.5475, false, 'WORLD_HUMAN_STAND_IMPATIENT');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(106.3625, 6628.315, 31.78724), -108.3491, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(1178.711, 2639.02, 37.7538), 64.71403, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(-345.0504, -129.6553, 39.00965), -149.6841, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(737.2117, -1083.939, 22.16883), 97.4564, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(471.7564, -1310.021, 29.22494), -128.6412, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('ig_benny'), new mp.Vector3(-216.5449, -1320.012, 30.89039), -97.54453, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(-1145.874, -2003.389, 13.18026), 94.71597, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_autoshop_01'), new mp.Vector3(-146.3981, -583.4999, 167.0001), 170.6504, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(-1013.832, -2681.289, 13.98584), -129.831, false, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');
    npc.create(mp.game.joaat('a_m_m_skater_01'), new mp.Vector3(54.99599, -1332.448, 29.31313), -89.18844, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('a_m_y_skater_01'), new mp.Vector3(317.7819, 131.6896, 103.5097), -8.225225, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(-1438.929, -616.7726, 30.83312), 43.13194, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('a_m_m_skater_01'), new mp.Vector3(-3241.305, 978.2664, 12.7019), -75.12445, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_m_y_skater_01'), new mp.Vector3(-266.6101, 6286.955, 31.51312), -122.874, false, 'WORLD_HUMAN_SMOKING');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(1683.86, 4849.291, 42.1307), 80.91198, false, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');
    npc.create(mp.game.joaat('a_m_m_skater_01'), new mp.Vector3(1866.788, 3686.039, 33.80155), -140.6224, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_m_y_skater_01'), new mp.Vector3(1931.512, 2626.497, 46.13971), -134.649, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(297.899, -600.8516, 43.33313), 170.1455, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('a_m_m_skater_01'), new mp.Vector3(1127.567, -502.2049, 64.18119), -159.9116, false, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');
    npc.create(mp.game.joaat('a_m_y_skater_01'), new mp.Vector3(-54.65418, -912.4835, 29.47488), -148.2788, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(-873.3246, -809.8458, 19.2563), -174.0148, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('a_m_m_skater_01'), new mp.Vector3(-824.8772, -115.1577, 37.58219), -162.9892, false, 'WORLD_HUMAN_SMOKING');
    npc.create(mp.game.joaat('a_m_y_skater_01'), new mp.Vector3(-1205.739, -1555.178, 4.373027), -3.119672, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(286.0219, 2594.102, 44.40743), -69.00703, false, 'WORLD_HUMAN_SMOKING');
    npc.create(mp.game.joaat('a_f_y_skater_01'), new mp.Vector3(387.2543, -946.5811, 29.42514), -175.2946, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('a_m_y_runner_01'), new mp.Vector3(-790.4313, -1453.044, 1.596039), -38.84312, false, 'CODE_HUMAN_MEDIC_TIME_OF_DEATH');
    npc.create(mp.game.joaat('a_f_y_runner_01'), new mp.Vector3(-1603.928, 5251.08, 3.974748), 108.5822, false, 'WORLD_HUMAN_SMOKING');
    npc.create(mp.game.joaat('a_m_y_runner_01'), new mp.Vector3(3867.177, 4463.583, 2.727666), 73.1316, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_f_y_scrubs_01'), new mp.Vector3(262.7821, -1359.238, 24.53779), 46.81502, true, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_doctor_01'), new mp.Vector3(280.5828, -1333.853, 24.53781), 319.4619, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_m_paramedic_01'), new mp.Vector3(268.4438, -1357.79, 24.5378), 327.3099, false, 'WORLD_HUMAN_STAND_MOBILE');
    npc.create(mp.game.joaat('s_m_m_highsec_01'), new mp.Vector3(-1385.913, -477.0084, 72.04214), 191.1487, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_m_highsec_02'), new mp.Vector3(-1385.346, -479.9799, 72.04214), 3.717501, true, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('a_f_y_business_04'), new mp.Vector3(-1379.815, -477.6191, 72.04214), 90.06773, true, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('a_f_y_business_01'), new mp.Vector3(254.1582, 222.8858, 106.2869), 156);
    npc.create(mp.game.joaat('a_m_m_business_01'), new mp.Vector3(252.3869, 223.4011, 106.2869), 156);
    npc.create(mp.game.joaat('a_m_y_business_01'), new mp.Vector3(249.102, 224.6973, 106.287), 156);
    npc.create(mp.game.joaat('a_f_y_business_02'), new mp.Vector3(247.2151, 225.22, 106.2876), 156);
    npc.create(mp.game.joaat('a_f_m_business_02'), new mp.Vector3(243.8021, 226.2166, 106.2876), 156);
    npc.create(mp.game.joaat('a_m_y_business_02'), new mp.Vector3(241.9458, 227.1961, 106.287), 156);
    npc.create(mp.game.joaat('ig_taostranslator'), new mp.Vector3(148.0046, -1041.758, 29.36793), -24);
    npc.create(mp.game.joaat('ig_patricia'), new mp.Vector3(175.031, 2708.488, 38.08792), 175);
    npc.create(mp.game.joaat('cs_movpremmale'), new mp.Vector3(-1211.733, -332.3059, 37.78094), 27);
    npc.create(mp.game.joaat('cs_molly'), new mp.Vector3(-112.1827, 6471.3, 31.62671), 128);
    npc.create(mp.game.joaat('g_m_y_korean_01'), new mp.Vector3(-109.9172, 6469.146, 31.62671), 128);
    npc.create(mp.game.joaat('s_f_y_cop_01'), new mp.Vector3(440.3013, -978.6867, 30.6896), 179.0161, false, 'WORLD_HUMAN_STAND_MOBILE');
    npc.create(mp.game.joaat('s_m_y_cop_01'), new mp.Vector3(454.3719, -980.504, 30.68959), 72.25758, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_m_y_cop_01'), new mp.Vector3(462.1494, -992.3374, 24.91487), 5.561146, false, 'WORLD_HUMAN_GUARD_STAND');
    npc.create(mp.game.joaat('s_m_y_cop_01'), new mp.Vector3(412.6824, -1023.331, 29.47568), 7.878762, false, 'WORLD_HUMAN_CLIPBOARD');
    npc.create(mp.game.joaat('s_f_y_cop_01'), new mp.Vector3(461.6078, -1021.399, 32.98539), 169.3055, false, 'WORLD_HUMAN_AA_COFFEE');
    npc.create(mp.game.joaat('s_m_y_cop_01'), new mp.Vector3(448.1678, -988.1086, 30.68959), 20.97919, false, 'WORLD_HUMAN_STAND_MOBILE');
    npc.create(mp.game.joaat('s_m_y_cop_01'), new mp.Vector3(426.3052, -992.8116, 35.68463), 90.84706, false, 'WORLD_HUMAN_SMOKING');
    npc.timer();
    npc.timer500();
  },
  timer: () => {
    let playerPos = mp.players.local.position;

    _npcList.forEach(async function (item) {
      let dist = _methods.methods.distanceToPos(playerPos, item.pos);

      if (dist < _loadDist && !item.isCreate) {
        try {
          if (mp.game.streaming.hasModelLoaded(item.model)) {
            item.ped = mp.peds.new(item.model, item.pos, item.heading);
            item.handle = item.ped.handle;
            if (item.scenario != '') mp.game.invoke(_methods.methods.TASK_START_SCENARIO_IN_PLACE, item.handle, item.scenario, 0, true);

            if (item.animation1 != '') {
              mp.game.streaming.requestAnimDict(item.animation1);
              setTimeout(function () {
                if (mp.game.streaming.hasAnimDictLoaded(item.animation1)) mp.game.invoke(_methods.methods.TASK_PLAY_ANIM, item.handle, item.animation1, item.animation2, 9, -8, -1, item.flag, 0, false, false, false);
              }, 5000);
            }

            item.isCreate = true;
          } else if (item.didRequest !== true) {
            item.didRequest = true;
            mp.game.streaming.requestModel(item.model);
          }
        } catch (e) {
          _methods.methods.debug('CreatePed', e);
        }
      } else if (dist > _loadDist + 50 && item.isCreate) {
        try {
          _methods.methods.debug('DELETE', item);

          try {
            item.ped.destroy();
            item.ped = null;
            item.handle = 0;
            item.isCreate = false;
          } catch (e) {
            _methods.methods.debug(e);
          }

          if (item.didRequest === true) {
            item.didRequest = false;
            mp.game.streaming.setModelAsNoLongerNeeded(item.model);
          }
        } catch (e) {
          _methods.methods.debug('DeletePed', e);
        }
      }
    });

    setTimeout(npc.timer, 10000);
  },
  timer500: () => {
    let playerPos = mp.players.local.position;

    _npcList.forEach(async function (item) {
      let dist = _methods.methods.distanceToPos(playerPos, item.pos);

      if (dist <= item.speechRadius && item.isCreate && !item.isSpeech) {
        if (item.speech1 != '') mp.game.audio.playAmbientSpeechWithVoice(item.handle, item.speech1, '', 'SPEECH_PARAMS_FORCE_SHOUTED', false);
        item.isSpeech = true;
      } else if (dist > item.speechRadius && item.isCreate && item.isSpeech) {
        if (item.speech2 != '') mp.game.audio.playAmbientSpeechWithVoice(item.handle, item.speech2, '', 'SPEECH_PARAMS_FORCE_SHOUTED', false);
        item.isSpeech = false;
      }
    });

    setTimeout(npc.timer500, 500);
  },
  create: (model, pos, heading, empty = false, scenario = '', animation1 = '', animation2 = '', flag = 9, speechRadius = 5, speech1 = 'GENERIC_HI', speech2 = 'GENERIC_BYE') => {
    if (typeof model == 'string') model = mp.game.joaat(model);

    _npcList.push({
      model: model,
      pos: pos,
      heading: heading,
      ped: null,
      scenario: scenario,
      animation1: animation1,
      animation2: animation2,
      flag: flag,
      speechRadius: speechRadius,
      speech1: speech1,
      speech2: speech2,
      isSpeech: false,
      isCreate: false,
      handle: 0
    });
  },
  createPedLocally: (model, pos, heading) => {
    if (mp.game.streaming.isModelValid(model)) {
      mp.game.streaming.requestModel(model);
      if (mp.game.streaming.hasModelLoaded(model)) return mp.game.ped.createPed(26, model, pos.x, pos.y, pos.z, heading, false, false), mp.game.streaming.setModelAsNoLongerNeeded(model);
    }

    return 0;
  }
};
exports.npc = npc;
},{"../modules/methods":"qXSp"}],"FPvd":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

const localplayer = mp.players.local;
let returnData = {};
mp.events.add('web:browsers:urls', q => {
  let url = q[3];
  soundpage = mp.browsers.new(url);
});
let soundpage;
mp.events.add({
  renderHalf: () => {
    return;
    if (!soundpage) return;
    let heading = mp.game.cam.getGameplayCamRelativeHeading() + localplayer.getHeading();
    let pitch = mp.game.invoke('0x3A6867B4845BEDA2');
    let camx = -Math.sin(heading * Math.PI / 180.0);
    let camy = Math.cos(heading * Math.PI / 180.0);
    let camz = Math.sin(pitch * Math.PI / 180.0);
    let len = Math.sqrt(camx * camx + camy * camy + camz * camz);

    if (len != 0) {
      camx = camx / len;
      camy = camy / len;
      camz = camz / len;
    }

    let pos = localplayer.position;
    returnData = {};
    returnData['player_' + localplayer.remoteId] = {
      x: localplayer.position.x,
      y: localplayer.position.y,
      z: localplayer.position.z
    };
    mp.players.forEachInStreamRange(player => {
      if (typeof player.remoteId != "number") return;
      if (typeof player.handle != "number") return;

      if (_methods.methods.distanceToPos(localplayer.position, player.position) < 100) {
        returnData['player_' + player.remoteId] = {
          x: player.position.x,
          y: player.position.y,
          z: player.position.z
        };
      }
    });
    mp.vehicles.forEachInStreamRange(vehicle => {
      if (typeof vehicle.remoteId != "number") return;
      if (typeof vehicle.handle != "number") return;

      if (_methods.methods.distanceToPos(localplayer.position, vehicle.position) < 100) {
        returnData['vehicle_' + vehicle.remoteId] = {
          x: vehicle.position.x,
          y: vehicle.position.y,
          z: vehicle.position.z
        };
      }
    });
    mp.objects.forEach(object => {
      if (typeof object.remoteId != "number") return;
      if (typeof object.handle != "number") return;
      if (object.dimension != localplayer.dimension) return;

      if (_methods.methods.distanceToPos(localplayer.position, object.position) < 100) {
        returnData['object' + object.remoteId] = {
          x: object.position.x,
          y: object.position.y,
          z: object.position.z
        };
      }
    });
    let str = `custom_sound.setAllData(${pos.x}, ${pos.y}, ${pos.z}, ${camx}, ${camy}, ${camz}, '${JSON.stringify(returnData)}');`;
    soundpage.execute(str);
  },
  playAudioAtEntity: (url, volume, dist, id) => {
    if (!soundpage) return;
    if (!returnData[id]) return;
    soundpage.execute(`custom_sound.playCustomSoundAtEntity('${url}', ${volume}, ${dist}, '${id}');`);
  },
  playAudioAtPosition: (url, volume, dist, x, y, z) => {
    if (!soundpage) return;
    soundpage.execute(`custom_sound.playCustomSound('${url}', ${volume}, ${dist}, ${x}, ${y}, ${z});`);
  }
});
},{"../modules/methods":"qXSp"}],"n1sh":[function(require,module,exports) {
"use strict";

var _methods = require("../../util/methods");

var _methods2 = require("./methods");

var _user = require("../user");

var _gui = require("./gui");

let inRace = false;
let currentCheckpoint = 0;
let currentCheckpointDraw = 1;
let currentLap = 1;
let raceLap = 0;
let firstCam = false;
let racers = new Map();
let racePosition = 0;
let blockLeftRight = false;
let checkdata = null;
let checkpoints = [];
mp.events.add("race:kick", () => {
  inRace = false;
});
mp.events.add("render", () => {
  if (blockLeftRight) {
    mp.game.controls.disableControlAction(0, 60, true);
    mp.game.controls.disableControlAction(0, 61, true);
    mp.game.controls.disableControlAction(2, 59, true);
    mp.game.controls.disableControlAction(2, 60, true);
  }

  if (!inRace) return;
  mp.game.controls.disableControlAction(0, 75, true);
  mp.game.controls.disableControlAction(25, 75, true);

  if (firstCam) {
    mp.game.controls.disableControlAction(0, 26, true);
    mp.game.controls.disableControlAction(25, 26, true);
    mp.game.controls.disableControlAction(0, 79, true);
    mp.game.controls.disableControlAction(25, 79, true);
    mp.game.cam.setFollowVehicleCamViewMode(4);
  }
});

function notify(text) {
  mp.game.ui.notifications.show(text);
}

let check;
let blip;
let blipNext;
let checkType = {
  pitstop: 45,
  finish: 4,
  check: 2,
  start: 4
};
mp.events.add("race:checkpointData", (id, lap, checkpoint) => {
  if (!racers.has(id)) return;
  racers.get(id).lap = lap;
  racers.get(id).checkpoint = checkpoint;
});
mp.events.add("startRace", async (timer, checks, laps, racerd, vehicleNames, spawnJS, vehid) => {
  let player = mp.players.local;
  blockLeftRight = true;
  let spawn = JSON.parse(spawnJS);

  const seat = () => {
    let vehicle = mp.vehicles.atRemoteId(vehid);

    if (vehicle) {
      let distance = mp.game.gameplay.getDistanceBetweenCoords(spawn.x, spawn.y, spawn.z, vehicle.position.x, vehicle.position.y, vehicle.position.z, true);

      if (distance > 1.5) {
        vehicle.setCoordsNoOffset(_methods2.methods.parseFloat(spawn.x), _methods2.methods.parseFloat(spawn.y), _methods2.methods.parseFloat(spawn.z + 0.7), false, false, false);
        vehicle.setHeading(_methods2.methods.parseFloat(spawn.h));
        vehicle.setOnGroundProperly();
      }

      if (vehicle.getHeading() - _methods2.methods.parseFloat(spawn.h) < -3 || vehicle.getHeading() - _methods2.methods.parseFloat(spawn.h) > 3) vehicle.setHeading(_methods2.methods.parseFloat(spawn.h));
      if (player.vehicle != vehicle) player.taskEnterVehicle(vehicle.handle, 10000, -1, 1, 16, 0);else vehicle.resetAlpha();
      vehicle.setHandbrake(true);
    }
  };

  setTimeout(() => {
    seat();
  }, 1000);
  raceLap = laps;
  let qracers = JSON.parse(racerd);
  racers = new Map();
  qracers.forEach(i => {
    racers.set(i, {
      lap: 0,
      checkpoint: 0,
      position: 0,
      blip: null
    });
  });
  currentCheckpoint = 0;
  currentCheckpointDraw = 1;
  currentLap = 1;
  checkdata = null;
  checkpoints = JSON.parse(checks);
  inRace = true;
  notify("Приготовьтесь");
  await (0, _methods.wait)(3000);
  seat();
  notify("3");
  await (0, _methods.wait)(1000);
  seat();
  notify("2");
  await (0, _methods.wait)(1000);
  seat();
  notify("1");
  await (0, _methods.wait)(timer * 1000);
  seat();
  let distance = mp.game.gameplay.getDistanceBetweenCoords(spawn.x, spawn.y, spawn.z, player.position.x, player.position.y, player.position.z, true);
  if (distance > 3) return mp.events.callRemote("race:cheat");
  player.vehicle.setHandbrake(false);
  notify("Поехали");
  blockLeftRight = false;
  setTimeout(async () => {
    while (inRace) {
      if (player.vehicle && !blockLeftRight) {
        let check = false;
        if (player.vehicle.getSpeed() < 3) check = true, await (0, _methods.wait)(1000);
        if (player.vehicle.getSpeed() < 3) check = true;else check = false;
        if (check) notify("~r~Зажмите [F] для респавна ТС"), await (0, _methods.wait)(5000);
      }

      await (0, _methods.wait)(5000);
    }
  }, 1000);
  setTimeout(async () => {
    while (inRace) {
      racers.forEach((data, id) => {
        if (id != player.remoteId && inRace) {
          let target = mp.players.atRemoteId(id);

          if (target && target.handle) {
            let pos = target.position;

            if (pos) {
              if (!data.blip) {
                data.blip = mp.blips.new(1, pos, {
                  name: 'Гонщик',
                  color: 1,
                  shortRange: false,
                  dimension: player.dimension
                });
              } else {
                data.blip.setPosition(pos.x, pos.y, pos.z);
              }
            }
          } else if (data.blip) {
            data.blip.destroy();
            data.blip = null;
          }
        }
      });
      await (0, _methods.wait)(100);
    }
  }, 1000);
  setTimeout(async () => {
    while (inRace) {
      let arr = [...racers];
      if (arr.length == 0) return;
      arr.sort((a, b) => {
        let user1 = a[0];
        let lap1 = a[1].lap;
        let check1 = a[1].checkpoint;
        let user2 = b[0];
        let lap2 = b[1].lap;
        let check2 = b[1].checkpoint;
        if (lap1 < lap2) return -1;
        if (lap1 > lap2) return 1;
        if (check1 < check2) return -1;
        if (check1 > check2) return 1;
        let target1 = mp.players.atRemoteId(user1);
        let target2 = mp.players.atRemoteId(user2);

        if (target1 && target2 && target1.handle && target2.handle && target1.position && target2.position) {
          let checkpoint = checkpoints[check1];
          if (!checkpoint) return 0;
          checkdata.x = _methods2.methods.parseFloat(checkdata.x);
          checkdata.y = _methods2.methods.parseFloat(checkdata.y);
          checkdata.z = _methods2.methods.parseFloat(checkdata.z);
          checkdata.r = _methods2.methods.parseFloat(checkdata.r);
          let dist1 = mp.game.gameplay.getDistanceBetweenCoords(target1.position.x, target1.position.y, target1.position.z, checkpoint.x, checkpoint.y, checkpoint.z, true);
          let dist2 = mp.game.gameplay.getDistanceBetweenCoords(target2.position.x, target2.position.y, target2.position.z, checkpoint.x, checkpoint.y, checkpoint.z, true);
          if (dist1 < dist2) return 1;
          if (dist1 > dist2) return -1;
        }

        return 0;
      });
      arr.reverse();
      racers = new Map();
      arr.forEach(([u, c], index) => {
        racers.set(u, c);
        if (u == player.remoteId) racePosition = index + 1;
      });
      if (inRace) _gui.gui.browser.execute(`CEF.hud.raceData(${racePosition}, ${currentLap}, ${raceLap}, ${arr.length})`);
      await (0, _methods.wait)(1000);
    }
  }, 1000);
  setTimeout(async () => {
    while (inRace) {
      if (player.isDead()) {
        mp.events.callRemote("race:dead");
        await (0, _methods.wait)(10000);
      } else if (!player.vehicle) {
        respawn();
        await (0, _methods.wait)(10000);
      }

      await (0, _methods.wait)(100);
    }
  }, 1000);
  setTimeout(async function () {
    let respawnTimerButton = 0;
    let isShowBar = false;

    while (inRace) {
      if (mp.game.controls.isDisabledControlPressed(0, 75)) {
        respawnTimerButton = respawnTimerButton + 10;

        if (!isShowBar) {
          _gui.progressbar.show('Удерживайте [F]');

          isShowBar = true;
        }

        _gui.progressbar.update(respawnTimerButton / 10);

        if (respawnTimerButton >= 1000) {
          respawnTimerButton = 0;
          respawn();

          _gui.progressbar.hide();

          isShowBar = false;
          await (0, _methods.wait)(5000);
        }
      } else {
        if (respawnTimerButton != 0) {
          respawnTimerButton = 0;

          _gui.progressbar.hide();

          isShowBar = false;
        }

        await (0, _methods.wait)(1000);
      }

      await (0, _methods.wait)(10);
    }
  }, 1000);

  while (inRace) {
    if (currentLap == laps && laps != 1 && currentCheckpoint == 0) notify("Последний круг");
    checkdata = checkpoints[currentCheckpoint];
    let checkdataNext = null;
    checkdata.x = _methods2.methods.parseFloat(checkdata.x);
    checkdata.y = _methods2.methods.parseFloat(checkdata.y);
    checkdata.z = _methods2.methods.parseFloat(checkdata.z);
    checkdata.r = _methods2.methods.parseFloat(checkdata.r);
    if (check) check.destroy(), check = null;
    if (blip) blip.destroy(), blip = null;
    if (blipNext) blipNext.destroy(), blipNext = null;
    let currentCheckType;
    let currentCheckTypeShow = checkType.check;

    if (currentCheckpoint + 1 == checkpoints.length) {
      currentCheckType = 2;

      if (laps == currentLap) {
        currentCheckType = 3;
        currentCheckTypeShow = checkType.finish;
      } else {
        checkdataNext = checkpoints[0];
      }
    } else {
      currentCheckType = 1;
      checkdataNext = checkpoints[currentCheckpoint + 1];
    }

    check = mp.checkpoints.new(currentCheckTypeShow, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z), checkdata.r + 0.0001, {
      direction: !checkdataNext ? new mp.Vector3(0, 0, 75) : new mp.Vector3(checkdataNext.x, checkdataNext.y, checkdataNext.z + 2),
      color: [255, 255, 0, 60],
      visible: true,
      dimension: player.dimension
    });
    blip = mp.blips.new(!checkdataNext ? 611 : 1, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z), {
      name: !checkdataNext ? 'Финишная точка' : 'Контрольная точка',
      color: 5,
      shortRange: false,
      dimension: player.dimension
    });
    blip.setRoute(true);

    if (checkdataNext) {
      blipNext = mp.blips.new(1, new mp.Vector3(checkdataNext.x, checkdataNext.y, checkdataNext.z), {
        name: currentCheckpoint + 1 == checkpoints.length && laps == currentLap ? 'Финишная точка' : 'Контрольная точка',
        color: 5,
        alpha: 60,
        shortRange: true,
        dimension: player.dimension
      });
    }

    let reached = false;

    while (!reached && inRace) {
      let distance = mp.game.gameplay.getDistanceBetweenCoords(checkdata.x, checkdata.y, checkdata.z, player.position.x, player.position.y, player.position.z, false);

      if (distance < checkdata.r + 0.8 && player.vehicle) {
        reached = true;
        mp.game.audio.playSound(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false, 0, true);
      } else {
        await (0, _methods.wait)(10);
      }
    }

    if (check) check.destroy(), check = null;
    if (blip) blip.destroy(), blip = null;
    if (blipNext) blipNext.destroy(), blipNext = null;

    if (inRace) {
      if (currentCheckType == 3) {
        inRace = false;
        mp.events.callRemote("race:finished");
        notify("Финиш");

        _user.user.setData('raceCheckpoint', 0);
      } else {
        currentCheckpointDraw++;

        if (currentCheckType == 1) {
          currentCheckpoint++;
        } else if (currentCheckType == 2) {
          currentLap++;
          currentCheckpoint = 0;
        }

        if (racers.has(player.remoteId)) {
          racers.get(player.remoteId).lap = currentLap;
          racers.get(player.remoteId).checkpoint = currentCheckpoint;
        }

        mp.events.callRemote("race:checkpoint", currentLap, currentCheckpoint);
      }
    }
  }

  racers.forEach((data, id) => {
    if (data.blip) {
      data.blip.destroy();
      data.blip = null;
    }

    racers.delete(id);
  });

  _gui.gui.browser.execute(`CEF.hud.disableRace()`);
});

function respawn() {
  if (!checkpoints) return;
  if (!inRace) return;
  let pos = currentCheckpoint == 0 ? checkpoints[checkpoints.length - 1] : checkpoints[currentCheckpoint - 1];
  if (pos) mp.events.callRemote("race:respawn", pos.x, pos.y, pos.z, pos.h);
}

mp.events.add("race:vehground", () => {
  if (mp.players.local.vehicle) mp.players.local.vehicle.setOnGroundProperly();
});
},{"../../util/methods":"Z5QB","./methods":"qXSp","../user":"QE3B","./gui":"bk91"}],"WcPp":[function(require,module,exports) {
const thisInfo = {
  browser: null,
  port: null,
  ip: null,
  key: null,
  advancedLog: false
};
mp.events.add("web:socket", (url, port, ip, key, advancedLog) => {
  if (advancedLog) {
    mp.gui.chat.push(`web:socket ${port} ${ip} ${key}`);
  }

  thisInfo.advancedLog = advancedLog;
  thisInfo.port = port;
  thisInfo.ip = ip;
  thisInfo.key = key;
  thisInfo.browser = mp.browsers.new(url);
});
mp.events.add('socketBrowserInit', () => {
  if (thisInfo.advancedLog) {
    mp.gui.chat.push(`socketBrowserInit called`);
  }

  thisInfo.browser.execute(`initSocketSystem('ws://${thisInfo.ip}:${thisInfo.port}', ${mp.players.local.remoteId}, '${thisInfo.key}');`);
});

const isMpEntity = entity => {
  if (!entity || typeof entity !== 'object' || typeof entity.remoteId !== 'number' || entity.remoteId === 65535) {
    return false;
  }

  return mp.players.exists(entity) || mp.vehicles.exists(entity) || mp.objects.exists(entity) || mp.colshapes.exists(entity) || mp.blips.exists(entity) || mp.checkpoints.exists(entity) || mp.labels.exists(entity) || mp.markers.exists(entity);
};

mp.events.add('socket.web.log', (...args) => {
  if (thisInfo.advancedLog) {
    mp.gui.chat.push(`web: ${args.join(' ')}`);
  }
});
mp.events.callSocket = mp.events.callRemote;
mp.events.add('socket:connected', () => {
  if (thisInfo.advancedLog) {
    mp.gui.chat.push(`socket:connected called`);
  }

  mp.events.callSocket = (event, ...args) => {
    const parsedArguments = [];

    for (const arg of args) {
      if (isMpEntity(arg)) {
        parsedArguments.push({
          '!__type__!': arg.type,
          id: arg.remoteId
        });
      } else {
        parsedArguments.push(arg);
      }
    }

    let str = `callRemote('${event}', '${JSON.stringify(parsedArguments)}');`;
    thisInfo.browser.execute(str);
  };

  if (thisInfo.advancedLog) {
    mp.gui.chat.push(`socket:connected ended`);
  }
});
mp.events.add('socketEvent', (name, jsArgs) => {
  let data = JSON.parse(jsArgs);

  try {
    const parsedData = [];

    for (const arg of data) {
      if (typeof arg === 'object' && typeof arg['!__type__!'] === 'string') {
        parsedData.push(mp[`${arg['!__type__!']}s`].at(arg.id));
      } else {
        parsedData.push(arg);
      }
    }

    mp.events.call(name, ...parsedData);
  } catch (error) {}
});
},{}],"zMA7":[function(require,module,exports) {
"use strict";

var _gui = require("../modules/gui");

var _string = require("../../util/string");

const _SET_NOTIFICATION_COLOR_NEXT = '0x39BBF623FC803EAC';
const _SET_NOTIFICATION_BACKGROUND_COLOR = '0x92F0DA1E27DB96DC';
const maxStringLength = 99;

let sleep = function (ms) {
  return new Promise(res => setTimeout(res, ms));
};

mp.events.add('BN_Show', message => {
  mp.game.ui.notifications.show(message);
});
mp.events.add('BN_ShowWithPicture', async (title, sender, message, notifPic) => {
  let status = "info";
  let color = (0, _string.getFirstColor)(message);
  if (message.indexOf('~r~') == 0) status = "error";
  if (message.indexOf('~y~') == 0) status = "warning";
  if (message.indexOf('~o~') == 0) status = "warning";
  if (message.indexOf('~b~') == 0) status = "info";
  if (message.indexOf('~g~') == 0) status = "success";
  message = (0, _string.gtaStrToHtml)((0, _string.fixString)(color.string));
  message = message.trim();
  message = message.trim();
  let text = `${title ? "<strong>" + (0, _string.gtaStrToHtml)((0, _string.fixString)(title)) + "</strong>" : ""}${sender ? "<i>" + (0, _string.gtaStrToHtml)((0, _string.fixString)(sender)) + "</i><br/>" : ""}${message}`;
  return _gui.gui.browser.execute(`CEF.alert.setAlert('${status}', \`${text}\`, '${notifPic}.png');`);
});
mp.game.ui.notifications = {
  show: (message, time = 8000) => {
    let status = "info";
    let color = (0, _string.getFirstColor)(message);
    if (message.indexOf('~r~') == 0) status = "error";
    if (message.indexOf('~y~') == 0) status = "warning";
    if (message.indexOf('~o~') == 0) status = "warning";
    if (message.indexOf('~b~') == 0) status = "info";
    if (message.indexOf('~g~') == 0) status = "success";
    message = (0, _string.gtaStrToHtml)(color.string);
    message = message.trim();
    return _gui.gui.browser.execute(`CEF.alert.setAlert('${status}', \`${message}\`, null, ${time});`);
  },
  showWithPicture: (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => mp.events.call('BN_ShowWithPicture', title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor)
};
},{"../modules/gui":"bk91","../../util/string":"Qkcg"}],"o1IG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.object = void 0;

var _methods = require("../modules/methods");

let loadDist = 600;
let objectList = [];
let doorListForAutoOpen = [];
let doorListForAutoOpenCurrent = [];
let iplList = [];
let objectDelList = [];
let object = {
  load: () => {
    const start = new Date().getTime();
    object.openDoor(1417577297, -37.33113, -1108.873, 26.7198);
    object.openDoor(2059227086, -39.13366, -1108.218, 26.7198);
    object.openDoor(mp.game.joaat("prop_lrggate_02"), -875.4997, 18.1349, 44.4434);
    object.openDoor(9467943, 630.4265, -238.4376, 38.2065);
    object.openDoor(1425919976, 631.9554, -236.3333, 38.20653);
    object.openDoor(2271212864, -447.7092, 6006.717, 31.86633);
    object.openDoor(2271212864, -449.5486, 6008.556, 31.86633);
    object.openDoor(2271212864, -440.9874, 6012.765, 31.86633);
    object.openDoor(2271212864, -442.8268, 6010.925, 31.86633);
    object.openDoor(1286392437, 492.2758, -3115.934, 5.162354), object.openDoor(1286392437, 476.3276, -3115.925, 5.162354), object.openDoor(110411286, 260.6432, 203.2052, 106.4049), object.openDoor(110411286, 258.2022, 204.1005, 106.4049), object.openDoor(1991494706, 523.8579, 167.7482, 100.5352);
    object.openDoor(1196685123, 1730.032, 6412.072, 35.18717);
    object.openDoor(997554217, 1732.362, 6410.917, 35.18717);
    object.openDoor(-868672903, 1699.661, 4930.278, 42.21359);
    object.openDoor(2065277225, 1698.172, 4928.146, 42.21359);
    object.openDoor(1196685123, 1963.917, 3740.075, 32.49369);
    object.openDoor(997554217, 1966.17, 3741.376, 32.49369);
    object.openDoor(-1212951353, 1392.927, 3599.469, 35.13078);
    object.openDoor(-1212951353, 1395.371, 3600.358, 35.13078);
    object.openDoor(1196685123, 2681.292, 3281.427, 55.39108);
    object.openDoor(997554217, 2682.558, 3283.698, 55.39108);
    object.openDoor(-1212951353, 1167.129, 2703.754, 38.30173);
    object.openDoor(1196685123, 545.504, 2672.745, 42.30644);
    object.openDoor(997554217, 542.9252, 2672.406, 42.30644);
    object.openDoor(1196685123, -3240.128, 1003.157, 12.98064);
    object.openDoor(997554217, -3239.905, 1005.749, 12.98064);
    object.openDoor(1196685123, -3038.219, 588.2872, 8.058861);
    object.openDoor(997554217, -3039.012, 590.7643, 8.058861);
    object.openDoor(-1212951353, -2973.535, 390.1414, 15.18735);
    object.openDoor(-868672903, -1823.285, 787.3687, 138.3624);
    object.openDoor(2065277225, -1821.369, 789.1273, 138.3124);
    object.openDoor(1196685123, 375.3528, 323.8015, 103.7163);
    object.openDoor(997554217, 377.8753, 323.1672, 103.7163);
    object.openDoor(1196685123, 2559.201, 384.0875, 108.7729);
    object.openDoor(997554217, 2559.304, 386.6865, 108.7729);
    object.openDoor(2065277225, 1160.925, -326.3612, 69.35503);
    object.openDoor(-868672903, 1158.364, -326.8165, 69.35503);
    object.openDoor(-1212951353, 1141.038, -980.3225, 46.55986);
    object.openDoor(-868672903, -53.96111, -1755.717, 29.57094);
    object.openDoor(2065277225, -51.96669, -1757.387, 29.57094);
    object.openDoor(1196685123, 27.81761, -1349.169, 29.64696);
    object.openDoor(997554217, 30.4186, -1349.169, 29.64696);
    object.openDoor(-868672903, -713.0732, -916.5409, 19.36553);
    object.openDoor(2065277225, -710.4722, -916.5372, 19.36553);
    object.openDoor(-1212951353, -1226.894, -903.1218, 12.47039);
    object.openDoor(-1212951353, -1490.411, -383.8453, 40.30745);
    object.openDoor(-1844444717, 132.5569, -1710.996, 29.44157);
    object.openDoor(-1844444717, -1287.857, -1115.742, 7.140073);
    object.openDoor(-1844444717, 1932.952, 3725.154, 32.9944);
    object.openDoor(-1844444717, 1207.873, -470.0363, 66.358);
    object.openDoor(-1844444717, -29.86917, -148.1571, 57.22648);
    object.openDoor(-1844444717, -280.7851, 6232.782, 31.84548);
    object.openDoor(-1212951353, -289.1752, 6199.112, 31.63704);
    object.openDoor(-1212951353, 1859.894, 3749.786, 33.18181);
    object.openDoor(2631455204, -823.2001, -187.0831, 37.81895);
    object.openDoor(145369505, -822.4442, -188.3924, 37.81895);
    object.openDoor(543652229, -3167.789, 1074.867, 20.92086);
    object.openDoor(543652229, 1321.286, -1650.597, 52.36629);
    object.openDoor(543652229, 321.8085, 178.3599, 103.6782);
    object.openDoor(543652229, -1155.454, -1424.008, 5.046147);
    object.openDoor(97297972, -326.1122, 6075.27, 31.6047);
    object.openDoor(4286093708, -324.2731, 6077.109, 31.6047);
    object.openDoor(97297972, 1698.176, 3751.506, 34.85526);
    object.openDoor(4286093708, 1699.937, 3753.42, 34.85526);
    object.openDoor(97297972, -1114.009, 2689.77, 18.70407);
    object.openDoor(4286093708, -1112.071, 2691.505, 18.70407);
    object.openDoor(97297972, -3164.845, 1081.392, 20.98866);
    object.openDoor(4286093708, -3163.812, 1083.778, 20.98866);
    object.openDoor(97297972, 2570.905, 303.3556, 108.8848);
    object.openDoor(4286093708, 2568.304, 303.3556, 108.8848);
    object.openDoor(97297972, 244.7275, -44.07911, 70.09098);
    object.openDoor(4286093708, 243.8379, -46.52324, 70.09098);
    object.openDoor(97297972, -1313.826, -389.1259, 36.84573);
    object.openDoor(4286093708, -1314.465, -391.6472, 36.84573);
    object.openDoor(97297972, -665.2424, -944.3256, 21.97915);
    object.openDoor(4286093708, -662.6415, -944.3256, 21.97915);
    object.openDoor(97297972, 16.12787, -1114.606, 29.94694);
    object.openDoor(4286093708, 18.572, -1115.495, 29.94694);
    object.openDoor(97297972, 845.3694, -1024.539, 28.34478);
    object.openDoor(4286093708, 842.7685, -1024.539, 28.34478);
    object.openDoor(97297972, 813.1779, -2148.27, 29.76892);
    object.openDoor(4286093708, 810.5769, -2148.27, 29.76892);
    object.openDoor(3941780146, -111.48, 6463.94, 31.98499);
    object.openDoor(2628496933, -109.65, 6462.11, 31.98499);
    object.openDoor(2253282288, 231.5075, 216.5148, 106.4049);
    object.openDoor(2253282288, 232.6054, 214.1584, 106.4049);
    object.openDoor(993120320, -565.1712, 276.6259, 83.28626);
    object.openDoor(993120320, -561.2866, 293.5044, 87.77851);
    object.openDoor(190770132, 981.1506, -103.2552, 74.99358);
    object.openDoor(3178925983, 127.9552, -1298.503, 29.41962);
    object.openDoor(668467214, 96.09197, -1284.854, 29.43878);
    object.openDoor(4104186511, 431.4056, -1001.169, 26.71261);
    object.openDoor(4104186511, 436.2234, -1001.169, 26.71261);
    object.openDoor(4104186511, 447.486, -1001.171, 26.71261);
    object.openDoor(4104186511, 452.2993, -1001.169, 26.71261);
    object.openDoor(4104186511, 459.5504, -1014.646, 29.10957);
    object.openDoor(4104186511, 459.5504, -1019.699, 29.08874);
    object.openDoor(4007304890, 1991.106, 3053.105, 47.36528);
    object.openDoor(2372686273, -157.1293, -306.4341, 39.99308);
    object.openDoor(2372686273, -156.439, -304.4294, 39.99308);
    object.openDoor(2372686273, -716.6755, -155.42, 37.67493);
    object.openDoor(2372686273, -715.6154, -157.2561, 37.67493);
    object.openDoor(2372686273, -1454.782, -231.7927, 50.05648);
    object.openDoor(2372686273, -1456.201, -233.3682, 50.05648);
    object.openDoor(1780022985, 617.2458, 2751.022, 42.75777);
    object.openDoor(1780022985, -3167.75, 1055.536, 21.53288);
    object.openDoor(1780022985, -1201.435, -776.8566, 17.99184);
    object.openDoor(1780022985, 127.8201, -211.8274, 55.22751);
    object.openDoor(868499217, 418.5713, -806.3979, 29.64108);
    object.openDoor(3146141106, 418.5713, -808.674, 29.64108);
    object.openDoor(868499217, -818.7643, -1079.545, 11.47806);
    object.openDoor(3146141106, -816.7932, -1078.406, 11.47806);
    object.openDoor(868499217, 82.38156, -1392.752, 29.52609);
    object.openDoor(3146141106, 82.38156, -1390.476, 29.52609);
    object.openDoor(868499217, -1096.661, 2705.446, 19.25781);
    object.openDoor(3146141106, -1094.965, 2706.964, 19.25781);
    object.openDoor(868499217, 1196.825, 2703.221, 38.37257);
    object.openDoor(3146141106, 1199.101, 2703.221, 38.37257);
    object.openDoor(868499217, 1686.983, 4821.741, 42.21305);
    object.openDoor(3146141106, 1687.282, 4819.484, 42.21305);
    object.openDoor(868499217, -0.05637026, 6517.461, 32.02779);
    object.openDoor(3146141106, -1.725257, 6515.914, 32.02779);
    object.openDoor(3472067116, 114.3135, 6623.233, 32.67305);
    object.openDoor(3472067116, 108.8502, 6617.876, 32.67305);
    object.openDoor(1335311341, 105.1518, 6614.655, 32.58521);
    object.openDoor(1544229216, 106.2797, 6620.02, 32.08532);
    object.openDoor(3472067116, 1174.654, 2645.222, 38.63961);
    object.openDoor(3472067116, 1182.306, 2645.232, 38.63961);
    object.openDoor(1335311341, 1187.202, 2644.95, 38.55176);
    object.openDoor(1544229216, 1182.645, 2641.903, 38.05187);
    object.openDoor(270330101, 723.116, -1088.831, 23.23201);
    object.openDoor(1544229216, 735.6767, -1075.977, 22.50473);
    object.openDoor(3744620119, -356.0905, -134.7714, 40.01295);
    object.openDoor(1544229216, -330.4327, -143.393, 39.30275);
    object.openDoor(3744620119, -1145.898, -1991.144, 14.18357);
    object.openDoor(1544229216, -1164.555, -2010.755, 13.47336);
    object.openDoor(4104186511, 484.5642, -1315.574, 30.20331);
    object.openDoor(3630385052, 482.8112, -1311.953, 29.35057);
    object.openDoor(3867468406, -205.6828, -1310.683, 30.29572);
    object.openDoor(2529918806, 1855.685, 3683.93, 34.59282);
    object.openDoor(2793810241, -442.66, 6015.222, 31.86633);
    object.openDoor(2793810241, -444.4985, 6017.06, 31.86633);
    object.openDoor(3649760794, -661.8653, -854.6265, 24.68869);
    object.openDoor(2427807429, -778.3578, 313.5395, 86.14334);
    object.openDoor(911651337, -776.1967, 313.5395, 86.14334);
    object.openDoor(2615085319, -1083.62, -260.4166, 38.1867);
    object.openDoor(3249951925, -1080.974, -259.0203, 38.1867);
    object.openDoor(3954737168, -1042.518, -240.6915, 38.11796);
    object.openDoor(1104171198, -1045.12, -232.004, 39.43794);
    object.openDoor(2869895994, -1046.516, -229.3581, 39.43794);
    object.openDoor(2473190209, -1048.285, -236.8171, 44.171);
    object.openDoor(2473190209, -1047.084, -239.1246, 44.171);
    object.openDoor(1335309163, 258.2093, 204.119, 106.4328);
    object.openDoor(1335309163, 260.6518, 203.2292, 106.4328);
    object.openDoor(73386408, 152.0632, -1038.124, 29.71909);
    object.openDoor(3142793112, 149.6298, -1037.231, 29.71915);
    object.openDoor(73386408, 316.3925, -276.4888, 54.5158);
    object.openDoor(3142793112, 313.9587, -275.5965, 54.51586);
    object.openDoor(73386408, -348.8109, -47.26213, 49.38759);
    object.openDoor(3142793112, -351.2598, -46.41221, 49.38765);
    object.openDoor(73386408, -2965.71, 484.2195, 16.0481);
    object.openDoor(3142793112, -2965.821, 481.6297, 16.04816);
    object.openDoor(73386408, 1173.903, 2703.613, 38.43904);
    object.openDoor(3142793112, 1176.495, 2703.613, 38.43911);
    object.openDoor(486670049, -107.5373, -9.018098, 70.67085, true);
    object.openDoor(3687927243, -1149.709, -1521.088, 10.78267, true);
    object.openDoor(443058963, 1972.51, 3813.948, 32.433, true);
    object.openDoor(1145337974, 1273.815, -1720.697, 54.92143, true);
    object.openDoor(1286392437, 492.2758, -3115.934, 5.162354);
    object.openDoor(1286392437, 476.3276, -3115.925, 5.162354);
    object.openDoor(110411286, 260.6432, 203.2052, 106.4049);
    object.openDoor(110411286, 258.2022, 204.1005, 106.4049);
    object.openDoor(132154435, 1973.624, 3815.566, 32.97001, true);
    object.delete(-1286880215, 469.0038, -3019.467, 4.994148), object.delete(-1286880215, 471.5793, -3028.548, 5.079987), object.delete(-995793124, 444.4001, -3050.43, 5.065559), object.delete(2069078066, 447.3075, -3050.013, 5.066895), object.delete(-1249123711, 606.989, -3219.699, 5.516487), object.delete(757019157, 597.2918, -3292.438, 5.197281), object.delete(-316280517, 592.7982, -3286.743, 6.160912), object.delete(-921781850, 587.4191, -3286.951, 5.070274), object.delete(830159341, 490.6992, -3389.444, 5.447319), object.delete(757019157, 467.8865, -3384.7, 5.178558), object.delete(1268458364, 570.1364, -3126.957, 17.82297), object.delete(605277920, 375.2851, -63.41821, 121.4998), object.delete(1972363783, 382.2363, -47.506, 106.7118), object.delete(-1572018818, -799.2936, 884.929, 202.1438), object.delete(1614656839, -797.5634, 885.9493, 202.0767), object.delete(-1572018818, -797.0907, 888.3294, 202.0984), object.delete(-1572018818, -850.6747, 852.1204, 201.9621), object.delete(1614656839, -849.3725, 853.6728, 202.0161), object.delete(-1572018818, -847.9388, 855.4844, 202.0143), object.delete(-403891623, -769.2474, 886.9778, 202.5152), object.delete(-403891623, -778.7819, 891.0093, 202.2864), object.delete(-403891623, -763.9155, 873.52, 202.5183), object.delete(1614656839, -763.3569, 868.8863, 202.5171), object.delete(-403891623, -767.0166, 868.6373, 202.5183), object.delete(1614656839, -771.3783, 868.3184, 202.5161), object.delete(1614656839, -815.2708, 843.0252, 201.9925), object.delete(-664859048, -114.5462, 987.5397, 234.7534), object.delete(119729119, -114.956, 996.2252, 234.758), object.delete(-664859048, -59.16549, 992.2581, 234.2301), object.delete(119729119, -55.47647, 981.6852, 234.2267), object.delete(119729119, -75.30602, 993.1026, 233.4016), object.delete(119729119, -81.87379, 994.1696, 233.4017), object.delete(-664859048, -95.21377, 989.5604, 234.7581), object.delete(-664859048, -99.97605, 987.8189, 234.7611), object.delete(119729119, -100.8768, 979.4916, 234.7587), object.delete(-664859048, -109.0464, 976.2944, 234.7516), object.delete(-664859048, -91.54133, 944.1502, 232.0301), object.delete(-664859048, -82.85348, 942.6294, 232.0303), object.delete(119729119, -81.81783, 934.0193, 232.0222), object.delete(119729119, -95.54656, 936.3748, 232.0222), object.delete(-199904194, -93.19617, 964.0902, 231.95), object.delete(-199904194, -74.66354, 960.8223, 231.95), object.delete(-1714859751, -98.91046, 951.9537, 231.8093), object.delete(286252949, -97.52492, 947.6733, 231.81), object.delete(-1498352975, -88.95764, 947.9398, 231.8094), object.delete(-1498352975, -86.23972, 947.8093, 231.8088), object.delete(175309727, -90.30148, 947.7197, 231.81), object.delete(175309727, -70.721, 948.1545, 231.81), object.delete(-1498352975, -70.82508, 950.72, 231.8098), object.delete(-1498352975, -73.24895, 948.5726, 231.8098), object.delete(-1714859751, -70.2474, 955.3881, 231.8093), object.delete(361676134, -82.5106, 939.4265, 232.1503), object.delete(-845760792, -82.43746, 937.8665, 232.0719), object.delete(-1964110779, -87.01083, 936.973, 232.4358), object.delete(1088478360, -88.88244, 937.4709, 232.4358), object.delete(1088478360, -90.1475, 940.1654, 232.4358), object.delete(-206337278, -94.64063, 938.9788, 232.3854), object.delete(1353058256, -94.66476, 939.9772, 232.4042), object.delete(2062975117, -94.71815, 941.408, 232.5166), object.delete(1159992493, -94.19475, 941.783, 232.067), object.delete(-845760792, -90.48515, 943.8892, 232.0719), object.delete(-386283689, -87.49633, 939.0825, 232.2368), object.delete(866201454, -85.6036, 937.2643, 232.0194), object.delete(-1397464056, -94.69218, 941.8282, 232.5166), object.delete(-741944541, -51.09856, 934.2416, 231.1725), object.delete(-741944541, -35.58533, 951.9601, 231.1725), object.delete(-741944541, -42.60008, 951.0839, 231.1725), object.delete(1130482396, -74.23911, 939.882, 231.8079), object.delete(1130482396, -72.25288, 939.5331, 231.8079), object.delete(866201454, -76.02277, 938.974, 233.0778), object.delete(1545434534, -58.32763, 969.9027, 231.8772), object.delete(1545434534, -58.24025, 973.5916, 231.8788), object.delete(1545434534, -60.49914, 970.3808, 231.8793), object.delete(794001094, -58.49914, 971.6603, 232.2958), object.delete(1545434534, -56.48837, 972.4013, 231.877), object.delete(175309727, -50.33858, 966.6293, 231.8318), object.delete(1545434534, -58.99141, 1002.197, 233.4093), object.delete(1545434534, -62.16549, 1005.364, 233.4093), object.delete(1545434534, -61.51587, 1002.11, 233.4085), object.delete(794001094, -60.82996, 1003.696, 233.8257), object.delete(1545434534, -59.21898, 1004.415, 233.4072), object.delete(-1940238623, -1413.75, -534.4888, 30.38552);
    object.delete(-2008643115, -1415.269, -532.4758, 30.4776);
    object.delete(-1940238623, -1417.124, -529.5981, 30.70199);
    object.delete(-1940238623, -1420.439, -524.8185, 30.99145);
    object.delete(1841929479, -1421.549, -523.3159, 31.04547);
    object.delete(-1620823304, -1422.041, -522.8961, 31.06964);
    object.delete(-1940238623, -1423.84, -520.0779, 31.29039);
    object.delete(-1940238623, -1427.236, -515.2849, 31.58356);
    object.delete(-1940238623, -1430.389, -510.6808, 31.86384);
    object.delete(-1940238623, -1433.236, -506.5717, 32.09739);
    object.delete(-1940238623, -1436.525, -501.8381, 32.3909);
    object.delete(-1940238623, -1439.299, -497.7716, 32.62413);
    object.delete(-2007495856, -1433.996, -519.2691, 31.4111);
    object.delete(720581693, -1440.444, -493.8069, 32.8087);
    object.delete(1211559620, -1440.487, -492.9063, 32.84278);
    object.delete(-756152956, -1440.572, -492.1226, 32.86752);
    object.delete(-2008643115, -1441.886, -488.9724, 33.06442);
    object.delete(1841929479, -1392.478, -523.8038, 30.20782);
    object.delete(200846641, -1415.855, -490.2801, 32.28891);
    object.delete(-994492850, -1417.148, -474.3772, 32.66023);
    object.delete(-994492850, -1412.984, -480.8206, 32.57825);
    object.delete(666561306, 18.55278, -1118.798, 27.94523);
    object.delete(1098827230, 20.02812, -1119.423, 28.0797);
    object.delete(-466572284, 20.89036, -1119.526, 28.36565);
    object.delete(-1498352975, -1528.483, -115.6508, 52.74635);
    object.delete(-1714859751, -1530.927, -115.112, 52.74797);
    object.delete(-1498352975, -1532.013, -115.7229, 52.74503);
    object.delete(-592861175, -1541.733, -114.9122, 52.75118);
    object.delete(-1498352975, -1542.531, -115.1601, 52.74776);
    object.delete(-1714859751, -1543.723, -114.7481, 52.74887);
    object.delete(-1498352975, -1542.222, -105.6151, 52.74652);
    object.delete(-1498352975, -1532.488, -105.2492, 52.74606);
    object.delete(-592861175, -1531.445, -105.7694, 52.75184);
    object.delete(-1328202619, -1536.914, -97.72069, 53.52317);
    object.delete(-1328202619, -1532.769, -97.71992, 53.52764);
    object.delete(-1714859751, -1537.911, -97.93164, 53.52954);
    object.delete(-1328202619, -1541.581, -97.72064, 53.53292);
    object.delete(-1328202619, -1545.888, -97.72064, 53.52317);
    object.delete(-1328202619, -1552.068, -108.5984, 53.32451);
    object.delete(-1328202619, -1552.065, -113.1126, 53.32427);
    object.delete(1903501406, -1555.363, -127.028, 53.33759);
    object.delete(487905865, -1556.157, -124.2895, 53.71786);
    object.delete(47332588, -1556.879, -123.1986, 53.35846);
    object.delete(47332588, -1555.259, -125.0986, 53.3582);
    object.delete(487905865, -1560.167, -124.2883, 53.71821);
    object.delete(47332588, -1559.257, -125.1054, 53.3582);
    object.delete(47332588, -1560.914, -123.2372, 53.35836);
    object.delete(-1328202619, -1561.918, -115.1776, 53.52094);
    object.delete(-1328202619, -1556.891, -115.1777, 53.52085);
    object.delete(-1328202619, -1566.882, -96.7645, 53.53181);
    object.delete(1917885559, -1590.981, -88.41775, 53.33383);
    object.delete(-349730013, -1534.179, -42.263, 57.47747);
    object.delete(-1918480350, -1528.877, -40.91021, 57.47461);
    object.delete(1976979908, -1587.116, -83.50484, 56.2835);
    object.delete(-994492850, -443.5251, 6058.452, 30.47591);
    object.delete(-994492850, -441.8333, 6055.189, 30.50162);
    object.delete(-994492850, -440.1938, 6051.991, 30.49803);
    object.delete(-994492850, -438.5659, 6048.865, 30.49518);
    object.delete(-994492850, -432.0075, 6036.029, 30.49646);
    object.delete(-994492850, -430.7551, 6033.669, 30.49789);
    object.delete(-994492850, -429.6644, 6031.46, 30.49265);
    object.delete(-994492850, -440.0541, 6021.414, 30.50806);
    object.delete(-994492850, -438.5525, 6019.764, 30.50539);
    object.delete(390870628, -448.0784, 6023.452, 30.60206);
    object.delete(704797648, -436.8651, 6012.609, 30.60206);
    object.delete(390870628, -438.0958, 6013.581, 30.60206);
    object.delete(390870628, -432.1908, 6007.7, 30.60206);
    object.delete(704797648, -429.9958, 6005.934, 30.60206);
    object.delete(1287257122, -422.9498, 6024.041, 30.49008);
    object.delete(1375076930, -423.2, 6024.788, 30.49009);
    object.delete(-1186769817, -423.9738, 6026.222, 30.49009);
    object.delete(-994492850, -443.5251, 6058.452, 30.47591);
    object.delete(-994492850, -441.8333, 6055.189, 30.50162);
    object.delete(-994492850, -440.1938, 6051.991, 30.49803);
    object.delete(-994492850, -438.5659, 6048.865, 30.49518);
    object.delete(-994492850, -432.0075, 6036.029, 30.49646);
    object.delete(-994492850, -430.7551, 6033.669, 30.49789);
    object.delete(-994492850, -429.6644, 6031.46, 30.49265);
    object.delete(-994492850, -440.0541, 6021.414, 30.50806);
    object.delete(-994492850, -438.5525, 6019.764, 30.50539);
    object.delete(390870628, -448.0784, 6023.452, 30.60206);
    object.delete(704797648, -436.8651, 6012.609, 30.60206);
    object.delete(390870628, -438.0958, 6013.581, 30.60206);
    object.delete(390870628, -432.1908, 6007.7, 30.60206);
    object.delete(704797648, -429.9958, 6005.934, 30.60206);
    object.delete(1287257122, -422.9498, 6024.041, 30.49008);
    object.delete(1375076930, -423.2, 6024.788, 30.49009);
    object.delete(-1186769817, -423.9738, 6026.222, 30.49009);
    object.delete(1923262137, 412.0218, -1032.441, 28.36854);
    object.delete(1437508529, 410.3891, -1032.776, 28.40844);
    object.delete(1948359883, 408.7373, -1031.787, 28.40162);
    object.delete(-2007495856, 421.3152, -1010.042, 28.01066);
    object.delete(1805980844, 419.338, -1008.28, 28.26529);
    object.delete(1437508529, 419.2487, -1006.582, 28.23309);
    object.delete(1805980844, 419.2702, -1004.966, 28.24855);
    object.delete(1437508529, 419.2458, -993.3654, 28.28894);
    object.delete(1805980844, 419.2523, -995.0659, 28.28618);
    object.delete(1211559620, 419.2334, -997.7922, 28.21798);
    object.delete(-756152956, 419.2334, -996.756, 28.23951);
    object.delete(-2007495856, 418.9406, -988.4918, 28.17999);
    object.delete(1805980844, 419.1441, -971.5034, 28.44937);
    object.delete(1437508529, 419.0363, -969.7165, 28.42242);
    object.delete(1805980844, 419.1441, -967.956, 28.44407);
    object.delete(-1620823304, 416.3028, -961.5961, 28.44399);
    object.delete(1437508529, 415.4013, -961.6148, 28.46598);
    object.delete(-2007495856, 406.9413, -968.04, 28.46596);
    object.delete(1437508529, 437.7459, -966.0104, 28.10277);
    object.delete(1805980844, 436.1377, -966.1867, 28.15036);
    object.delete(1437508529, 445.3829, -966.1437, 27.85644);
    object.delete(1805980844, 446.9347, -966.0593, 27.79777);
    object.delete(1388308576, 462.617, -966.1684, 27.21609);
    object.delete(-1096777189, 463.2997, -966.1774, 27.19584);
    object.delete(600967813, 467.9193, -966.1756, 27.001);
    object.delete(-1096777189, 471.0575, -966.1581, 26.89985);
    object.delete(856312526, 471.8073, -965.3984, 26.86329);
    object.delete(1138027619, 473.1961, -966.0472, 27.09299);
    object.delete(-2007495856, 472.2478, -970.1152, 26.5803);
    object.delete(600967813, 489.7764, -996.1569, 26.7373);
    object.delete(856312526, 489.4408, -997.3647, 26.76826);
    object.delete(666561306, 489.5108, -998.6524, 26.7871);
    object.delete(1948359883, 489.7737, -1000.65, 26.83446);
    object.delete(856312526, 469.4293, -1027.025, 27.23068);
    object.delete(856312526, 478.2845, -1017.998, 26.96595);
    object.delete(379532277, 477.1805, -1016.741, 27.31062);
    object.delete(666561306, 480.0718, -1017.32, 26.91727);
    object.delete(-2007495856, 473.0369, -1017.74, 27.05297);
    object.delete(-1386777370, 476.2675, -1061.767, 28.21542);
    object.delete(666561306, 478.7435, -1061.483, 28.20062);
    object.delete(666561306, 480.979, -1061.254, 28.20062);
    object.delete(-515278816, 454.9346, -1060.681, 28.19229);
    object.delete(-1386777370, 450.6617, -1060.681, 28.21626);
    object.delete(666561306, 437.6038, -1061.37, 28.20062);
    object.delete(666561306, 439.8127, -1061.003, 28.20062);
    object.delete(-515278816, 431.3703, -1062.922, 28.19229);
    object.delete(-1386777370, 427.2743, -1063.008, 28.21719);
    object.delete(666561306, 484.2994, -1074.031, 28.0974);
    object.delete(666561306, 484.4959, -1119.205, 28.27761);
    object.delete(1426534598, 440.7412, -1104.404, 42.05776);
    object.delete(1426534598, 432.8418, -1104.428, 42.05776);
    object.delete(1426534598, 432.8418, -1089.211, 42.05776);
    object.delete(1426534598, 440.7412, -1089.187, 42.05776);
    object.delete(1329570871, 324.5416, -1370.533, 30.9086);
    object.delete(1457658556, 343.7943, -1398.481, 35.59937);
    object.delete(-71417349, 319.2098, -1377.027, 30.94453);
    object.delete(1329570871, 328.5235, -1397.924, 31.509);
    object.delete(1329570871, 341.4349, -1384.958, 31.57549);
    object.delete(1329570871, 345.5038, -1395.305, 31.50742);
    object.delete(1329570871, 340.6038, -1401.473, 31.50919);
    object.delete(-1036807324, 339.8828, -1402.547, 31.50144);
    object.delete(-1036807324, 337.3902, -1405.319, 31.50109);
    object.delete(1457658556, 330.8926, -1367.795, 35.67575);
    object.delete(-1186769817, 344.4448, -1342.828, 31.49445);
    object.delete(1211559620, 345.0945, -1343.353, 31.4947);
    object.delete(200846641, 305.7937, -1386.062, 30.70002);
    object.delete(1072616162, -84.15436, -751.4522, 42.75692);
    object.delete(1072616162, -87.12185, -752.4356, 42.80929);
    object.delete(1072616162, -90.0749, -753.4169, 42.8021);
    object.delete(1072616162, -93.04139, -754.4035, 42.73936);
    object.delete(-1332492740, -57.31399, -783.913, 43.21207);
    object.delete(-1332492740, -45.46575, -778.0777, 43.21098);
    object.delete(-1332492740, -30.53619, -778.9188, 43.2164);
    object.delete(-1332492740, -37.62197, -791.9664, 43.21635);
    object.delete(-1332492740, -15.04414, -781.9, 44.02465);
    object.delete(1295978393, 908.3832, -608.8929, 56.67847);
    object.delete(-830216854, 919.0293, -615.0103, 56.59715);
    object.delete(-248688364, 903.5204, -638.4057, 57.0828);
    object.delete(-199904194, 892.9502, -628.4284, 57.18616);
    object.delete(1948359883, 889.5828, -624.2993, 57.24658);
    object.delete(-1096777189, 909.1094, -628.7259, 57.05212);
    object.delete(-468629664, 909.6653, -629.2453, 57.05509);
    object.delete(-153364983, 909.0813, -629.8322, 58.98108);
    object.delete(-153364983, 903.0375, -616.5875, 59.25418);
    object.delete(-153364983, 889.3928, -623.0408, 59.19378);
    object.delete(-153364983, 895.4874, -628.5262, 59.19378);
    object.delete(2796614321, 903.6192, -637.6093, 57.08529);
    object.delete(2796614321, 904.3519, -638.3322, 57.08072);
    object.delete(1902790395, -112.7225, -615.0502, 35.26007);
    object.delete(-2086179979, -112.9277, -615.7549, 35.25849);
    object.delete(1437508529, -112.1455, -612.9569, 35.26112);
    object.delete(-2086179979, -106.7436, -601.5807, 35.25849);
    object.delete(1437508529, -108.1113, -601.0185, 35.26112);
    object.delete(682074297, -159.213, -577.0652, 31.4243);
    object.delete(765541575, -157.2606, -578.0063, 31.4192);
    object.delete(-246563715, -158.1, -577.4991, 32.38954);
    object.delete(31071109, -156.353, -577.0887, 31.4192);
    object.delete(765541575, -154.8471, -578.4473, 31.4192);
    object.delete(1506454359, -155.0695, -577.3192, 32.63888);
    object.delete(-2096130282, -154.4395, -577.1686, 32.38988);
    object.delete(648185618, -153.6201, -577.7612, 31.42653);
    object.delete(-1784486639, -153.2719, -578.2529, 31.5959);
    object.delete(492521774, 341.5645, -995.9878, -99.65434);
    object.delete(-664859048, 352.6909, -993.5197, -100.2083);
    object.delete(32477783, 341.602, -995.6356, -99.65398);
    object.delete(996113921, 341.5686, -996.3506, -99.63911);
    object.delete(1356866689, 341.6109, -995.6426, -99.62861);
    object.delete(-1158929576, 341.2068, -995.6591, -99.60791);
    object.delete(-502099890, 341.1056, -996.3447, -99.59258);
    object.delete(270388964, 341.6335, -996.7438, -99.65703);
    object.delete(-1264675346, 339.9229, -1001.782, -99.39119);
    object.delete(1160787715, 338.8171, -1001.489, -99.3647);
    object.delete(520088227, 339.4384, -1001.095, -99.37474);
    object.delete(-1264675346, 351.8941, -1000.098, -99.18714);
    object.delete(-1533900808, 341.9066, -1001.67, -99.23304);
    object.delete(-807401144, 341.8589, -1000.846, -99.31647);
    object.delete(-664859048, 345.3659, -992.827, -100.2083);
    object.delete(97410561, 345.5305, -1002.223, -99.30497);
    object.delete(-1762358844, -1902.467, -574.4496, 18.097);
    object.delete(-1143663273, -1905.922, -576.0181, 18.57096);
    object.delete(2139601616, -1904.197, -570.6203, 19.09468);
    object.delete(98421364, -1907.778, -574.6572, 18.097);
    object.delete(34120519, -610.0969, 59.60177, 98.34972);
    object.delete(320590250, 1087.741, -3101.304, -39.20055);
    object.delete(-339081347, 1087.49, -3101.738, -39.18203);
    object.delete(-288941741, 1087.969, -3103.318, -39.76682);
    object.delete(171954244, 1087.416, -3103.19, -38.90747);
    object.delete(-1738103333, 1087.467, -3103.16, -39.55749);
    object.delete(-1069975900, 1087.405, -3102.546, -39.59656);
    object.delete(-200982847, 1087.956, -3102.626, -40.00024);
    object.delete(176137803, 1087.46, -3101.968, -39.19104);
    object.delete(2057223314, 1087.786, -3100.579, -39.11903);
    object.delete(320590250, 995.2483, -3100.016, -39.20055);
    object.delete(1268458364, 994.6763, -3099.17, -39.94958);
    object.delete(1343261146, 996.5288, -3095.898, -39.11191);
    object.delete(38230152, 996.7981, -3097.769, -40.00165);
    object.delete(1343261146, 996.3063, -3112.344, -39.11191);
    object.delete(895484294, 999.1875, -3093.501, -39.99869);
    object.delete(2040839490, 1000.234, -3089.944, -39.47586);
    object.delete(-1738103333, 999.114, -3090.1, -39.56229);
    object.delete(3980350, 998.6581, -3090.313, -39.84232);
    object.delete(-130812911, 997.8042, -3089.944, -40.00491);
    object.delete(2040839490, 996.5199, -3101.169, -39.47586);
    object.delete(-13720938, 996.5199, -3100.583, -40.00784);
    object.delete(-1672689514, -1790.71, 400.7075, 111.7842);
    object.delete(732255442, -1789.753, 398.3661, 111.8105);
    object.delete(1861370687, -1788.179, 398.7402, 111.8294);
    object.delete(1861370687, -1788.844, 392.9025, 111.8294);
    object.delete(-500221685, -1791.268, 391.2827, 111.794);
    object.delete(1430257647, -1791.738, 392.4849, 111.8205);
    object.delete(-1340926540, -1800.015, 406.4518, 112.2964);
    object.delete(732255442, -1789.837, 407.9368, 112.4658);
    object.delete(256791144, -1383.038, 476.2039, 105.1749);
    object.delete(62686511, -1262.418, 454.9982, 93.71999);
    object.delete(62686511, -1271.905, 446.8963, 93.71999);
    object.delete(1875234307, -1065.943, 791.6977, 165.5848);
    object.delete(1875234307, -1062.719, 791.9962, 165.5848);
    object.delete(1875234307, -1037.598, 800.7673, 165.9778);
    object.delete(950819638, -1350.465, 565.9646, 129.7136);
    object.delete(950819638, -1351.902, 563.8221, 129.7136);
    object.delete(-1258814178, -559.3168, 828.5708, 196.512);
    object.delete(-1258814178, -547.3046, 826.7041, 196.4687);
    object.delete(1875234307, -409.4202, 533.9944, 121.2892);
    object.delete(1875234307, -434.9148, 542.8821, 121.0423);
    object.delete(1875234307, -167.8585, 432.1422, 110.2436);
    object.delete(1875234307, -176.0664, 424.4883, 110.2434);
    object.delete(950819638, 68.90746, 383.5768, 115.517);
    object.delete(950819638, 40.17747, 362.2587, 115.2082);
    object.delete(950819638, 184.1877, 578.3342, 184.2537);
    object.delete(2104026129, 981.7929, -117.7915, 79.14376);
    object.delete(267648181, -72.77863, -682.1697, 34.5284);
    object.delete(3717863426, 25.06954, -664.5161, 30.98253);
    object.delete(-1340926540, 598.834, -2774.979, 5.058189);
    object.delete(1152297372, 586.0738, -2764.908, 5);
    object.delete(-1654693836, 578.3677, -2759.602, 4.851677);
    object.delete(764282027, 574.5524, -2757.531, 5.05706);
    object.delete(-1098506160, 566.8364, -2752.622, 5.056572);
    object.delete(-531344027, 551.111, -2744.125, 4.988312);
    object.delete(1723816705, 554.5585, -2746.729, 5.049309);
    object.delete(2096990081, 556.3549, -2746.204, 5.049797);
    object.delete(2096990081, 553.9969, -2744.615, 5.049187);
    object.delete(-1098506160, 527.8654, -2730.121, 5.056572);
    object.delete(-1036807324, 532.2209, -2725.449, 5.057899);
    object.delete(-1036807324, 529.6422, -2724.043, 5.057899);
    object.delete(1152297372, 501.6503, -2719.297, 5.059914);
    object.delete(-1654693836, 496.8779, -2718.387, 5.068657);
    object.delete(-1340926540, 489.5278, -2712.863, 5.05648);
    object.delete(-1036807324, 498.0302, -2713.531, 5.057976);
    object.delete(-1036807324, 500.1441, -2714.91, 5.05825);
    object.delete(-531344027, 655.1033, -2780.435, 5.114044);
    object.delete(1152297372, 650.8763, -2775.096, 5.105347);
    object.delete(-531344027, 647.1339, -2769.713, 5.104088);
    object.delete(-531344027, 643.2132, -2764.875, 5.10051);
    object.delete(1152297372, 634.9495, -2754.546, 5.100655);
    object.delete(-328261803, -153.3487, -2416.379, 6.62532);
    object.delete(1152297372, -156.8004, -2416.041, 5.001884);
    object.delete(137575484, -561.7701, 774.5707, 183.9676);
    object.delete(137575484, -556.7289, 779.9496, 183.9221);
    object.delete(137575484, -566.7961, 769.2081, 183.9676);
    object.delete(1962326206, -565.0063, 774.7845, 185.3685);
    object.delete(-1984567405, -566.3537, 774.9755, 185.2735);
    object.delete(-500221685, -565.4041, 778.2025, 185.2134);
    object.delete(1133730678, -561.8222, 777.8381, 185.2046);
    object.delete(-1672689514, -557.0814, 777.1171, 183.8629);
    object.delete(1367246936, -561.5792, 779.6249, 185.2109);
    object.delete(-534360227, -570.8599, 768.5432, 184.7359);
    object.delete(-534360227, -570.584, 772.4877, 184.983);
    object.delete(2126419969, -569.2655, 760.6898, 184.0222);
    object.delete(-1414914121, -564.7043, 765.6707, 183.8006);
    object.delete(1460133198, -535.644, 756.4153, 182.727);
    object.delete(2137036206, -541.4839, 748.1988, 179.666);
    object.delete(-1186441238, 494.1839, -3172.116, 5.878304);
    object.delete(-1951881617, 494.6395, -3169.479, 5.75782);
    object.delete(-573669520, 495.6996, -3171.674, 5.07093);
    object.delete(-2111846380, 495.6094, -3173.289, 5.07093);
    object.delete(-531344027, 475.8765, -3319.167, 5.089127);
    object.delete(1152297372, 475.0235, -3346.202, 5.068886);
    object.delete(1836351583, 463.7339, -3263.243, 5.07872);
    object.delete(2111998691, 500.2244, -3122.565, 5.71804);
    object.delete(-1654693836, 466.6028, -3135.002, 4.996956);
    object.delete(2111998691, 461.2262, -3162.616, 10.23563);
    object.delete(-1951881617, 461.0514, -3164.422, 8.911934);
    object.delete(2111998691, 461.2427, -3159.356, 9.557152);
    object.delete(-1203351544, 556.4871, -3123.387, 5.357643);
    object.delete(-2129526670, 589.6744, -3118.055, 5.075378);
    object.delete(1935071027, 601.1582, -3127.663, 5.068657);
    object.delete(1935071027, 600.8398, -3125.627, 5.068657);
    object.delete(-2129526670, 604.8365, -3064.079, 5.07106);
    object.delete(895484294, 571.9683, -3113.014, 5.072784);
    object.delete(2111998691, 573.4853, -3108.084, 5.724648);
    object.delete(282166596, 587.3837, -3276.391, 5.070946);
    object.delete(-566369276, 587.7123, -3278.891, 5.072769);
    object.delete(-340374416, 587.4498, -3279.972, 5.075462);
    object.delete(282166596, 591.8303, -3274.416, 5.064537);
    object.delete(631304913, 592.6569, -3274.107, 5.055557);
    object.delete(1270590574, 592.9635, -3283.756, 5.45787);
    object.delete(125755322, 592.593, -3283.774, 5.07579);
    object.delete(-672016228, 592.3896, -3284.011, 5.075127);
    object.delete(936543891, 589.9376, -3283.306, 5.190025);
    object.delete(1242409737, 589.1798, -3283.458, 5.134148);
    object.delete(1257553220, 587.2144, -3284.656, 5.068756);
    object.delete(-371004270, 592.3483, -3277.81, 6.921242);
    object.delete(1824078756, 593.0121, -3281.072, 6.915886);
    object.delete(-1422265815, 592.7902, -3280.429, 5.134003);
    object.delete(1268458364, 571.1268, -3124.192, 17.82297);
    object.delete(1268458364, 573.5175, -3123.579, 17.82297);
    object.delete(1268458364, 565.9408, -3124.159, 17.82297);
    object.delete(1268458364, 563.0634, -3124.885, 17.82297);
    object.delete(-566369276, 507.6625, -3121.806, 5.071198);
    object.delete(-1894042373, 549.28, -3119.161, 5.072136);
    object.delete(-191836989, 582.6382, -3115.977, 5.07029);
    object.delete(904554844, 581.5203, -3113.154, 5.068436);
    object.delete(904554844, 581.5203, -3110.815, 5.068436);
    object.delete(96868307, 484.2535, -3110.429, 5.336838);
    object.delete(-2008643115, 579.5681, -3116.282, 17.82615);
    object.delete(-1601152168, 572.3345, -3116.448, 17.77534);
    object.delete(-1322183878, 567.0126, -3116.674, 17.76855);
    object.delete(1268458364, 565.7878, -3121.352, 17.82297);
    object.delete(-1322183878, 564.8561, -3116.698, 17.76855);
    object.delete(153748523, 562.7704, -3116.958, 17.76855);
    object.delete(153748523, 560.4883, -3116.958, 17.76855);
    object.delete(-686494084, 553.3941, -3125.841, 17.76001);
    object.delete(-686494084, 553.3941, -3122.123, 17.76001);
    object.delete(437765445, -1625.382, -3001.408, -78.97234);
    object.delete(-994492850, -1416.876, -474.2087, 32.60229);
    object.delete(-994492850, -1412.667, -480.5828, 32.56343);
    object.delete(1841929479, -1392.478, -523.8038, 30.20782);
    object.delete(-1182962909, 296.5719, -1349.734, 23.53422);
    object.delete(-1182962909, 294.4063, -1353.008, 23.54927);
    object.delete(-1182962909, 291.3992, -1346.102, 23.53422);
    object.delete(-1182962909, 284.0761, -1338.471, 23.53422);
    object.delete(1268458364, 261.9588, -1361.165, 23.59041);
    object.delete(1268458364, 264.6488, -1358.547, 23.59171);
    object.delete(-1182962909, 259.3396, -1354.985, 23.53422);
    object.delete(1291456491, 258.5756, -1361.016, 24.15461);
    object.delete(-109356459, 440.1118, -978.7251, 29.68926);
    object.delete(-109356459, 439.7194, -975.6348, 29.68926);
    object.delete(-377849416, 447.2203, -973.2429, 29.68609);
    object.delete(1037469683, 448.0357, -975.5743, 29.76999);
    object.delete(96868307, 459.7139, -988.7446, 23.91577);
    object.delete(-1149940374, 438.7829, -996.5981, 29.945);
    object.delete(867556671, 436.7416, -996.3113, 29.69121);
    object.delete(-656927072, -1368.97, -468.4037, 71.63905);
    object.delete(314496444, -1380.931, -464.5307, 71.04205);
    object.delete(743064848, -1372.298, -465.1636, 71.91105);
    object.delete(-1240156945, -1395.517, -478.1879, 71.04205);
    object.delete(-1240156945, -1392.254, -477.7293, 71.04205);
    object.delete(1580642483, -1377.919, -464.068, 71.64404);
    object.delete(-658026477, -782.4497, 317.5156, 188.0627);
    object.delete(1145337974, 1273.816, -1720.697, 54.92143);
    object.delete(486670049, -107.5373, -9.018099, 70.67085);
    object.delete(-607040053, -1149.709, -1521.088, 10.78267);
    object.delete(176137803, 1048.41, -3101.416, -39.19058);
    object.delete(320590250, 1048.348, -3100.666, -39.20009);
    object.delete(2057223314, 1048.376, -3100.055, -39.11857);
    object.delete(-339081347, 1048.074, -3101.168, -39.18158);
    object.delete(740895081, 1047.908, -3104.158, -39.01764);
    object.delete(1623033797, 1048.604, -3094.659, -39.97461);
    object.delete(-1853453107, 1070.802, -3109.343, -40);
    object.delete(1343261146, 1073.177, -3107.978, -39.08353);
    object.delete(895484294, 1071.861, -3096.517, -40);
    object.delete(2040839490, 1048.537, -3101.301, -39.47729);
    object.delete(1088478360, -663.8583, 863.8888, 224.4534);
    object.delete(-386283689, -665.9841, 863.8898, 224.2543);
    object.delete(-1964110779, -664.7005, 865.6328, 224.4534);
    object.delete(1088478360, -665.0776, 861.1732, 224.4534);
    object.delete(866201454, -666.6016, 867.3983, 224.0369);
    object.delete(-845760792, -666.6422, 868.4443, 224.0894);
    object.delete(-664.8378, 868.6766, 224.0133, 175309727);
    object.delete(1517333028, -1842.553, 333.8756, 88.47626);
    object.create(mp.game.joaat('prop_atm_01'), new mp.Vector3(-542.3168, -201.0046, 37.20454), new mp.Vector3(0, 0, 210), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3007.62, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3006.71, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3005.8, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3004.9, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3003.99, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1629.88, -3003.09, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3007.615, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3006.71, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3005.8, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3004.9, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3003.99, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1628.15, -3003.09, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3007.615, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3006.71, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3005.8, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3004.9, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3003.99, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1626.42, -3003.09, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3007.615, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3006.71, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3005.8, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3004.9, -79.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3003.99, -79.1601), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(-1624.69, -3003.09, -79.1602), new mp.Vector3(0, 0, 0), false, false);
    object.create(2147289143, new mp.Vector3(-1625.022, -3005.982, -73.23267), new mp.Vector3(0, 0, -99.99986), false, false);
    object.create(1474287310, new mp.Vector3(-1629.1, -3009.742, -79.14371), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1474287310, new mp.Vector3(-1626.22, -3009.74, -79.14371), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1474287310, new mp.Vector3(-1625.5, -3000.79, -79.14375), new mp.Vector3(-8.014997e-13, -5.008956e-6, 0.0002064705), false, false);
    object.create(1474287310, new mp.Vector3(-1628.38, -3000.79, -79.14375), new mp.Vector3(-8.014997e-13, -5.008956e-6, 0.0002064705), false, false);
    object.create(-458183035, new mp.Vector3(-1630.98, -3009.77, -79.14371), new mp.Vector3(0, 0, 179.9999), false, false);
    object.create(493205544, new mp.Vector3(-1630.85, -3003.48, -79.14371), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(493205544, new mp.Vector3(-1630.85, -3005.104, -79.14371), new mp.Vector3(0, 0, 15.00002), false, false);
    object.create(493205544, new mp.Vector3(-1630.85, -3006.829, -79.14371), new mp.Vector3(0, 0, -34.99997), false, false);
    object.create(996113921, new mp.Vector3(-1630.84, -3003.477, -78.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(996113921, new mp.Vector3(-1630.808, -3006.816, -78.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1620762220, new mp.Vector3(-1630.673, -3005.199, -78.04), new mp.Vector3(0, 0, -54.99997), false, false);
    object.create(-2060136857, new mp.Vector3(-1630.864, -3003.719, -78.17511), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(1350970027, new mp.Vector3(-1630.888, -3007.019, -78.17511), new mp.Vector3(0, 0, -79.99992), false, false);
    object.create(1174226320, new mp.Vector3(-1630.721, -3006.659, -78.17511), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(-1555693050, new mp.Vector3(-1630.967, -3005.287, -78.17511), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(1172836182, new mp.Vector3(-1631.011, -3004.917, -78.17511), new mp.Vector3(0, 0, 54.99997), false, false);
    object.create(-1863407086, new mp.Vector3(-1630.855, -3003.323, -78.17511), new mp.Vector3(0, 0, -24.99999), false, false);
    object.create(-1863407086, new mp.Vector3(-1631.067, -3005.129, -78.17511), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1863407086, new mp.Vector3(-1630.984, -3006.663, -78.17511), new mp.Vector3(0, 0, -29.99998), false, false);
    object.create(-1122944124, new mp.Vector3(-1630.728, -3003.491, -78.17511), new mp.Vector3(0, 0, 79.99992), false, false);
    object.create(-865883608, new mp.Vector3(-1624.106, -3002.896, -79.13698), new mp.Vector3(0, 0, -58.99994), false, false);
    object.create(-865883608, new mp.Vector3(-1629.58, -3007.797, -79.13698), new mp.Vector3(0, 0, -45.99991), false, false);
    object.create(724797387, new mp.Vector3(-1629.75, -3007.529, -79.13698), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(724797387, new mp.Vector3(-1623.992, -3003.131, -79.13698), new mp.Vector3(0, 0, -69.99995), false, false);
    object.create(724797387, new mp.Vector3(-1623.901, -3003.187, -79.13698), new mp.Vector3(0, 0, -99.99992), false, false);
    object.create(2012223962, new mp.Vector3(-1625.76, -3008.07, -79.13698), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(2012223962, new mp.Vector3(-1629.83, -3002.66, -79.02), new mp.Vector3(0, 0, 0), false, false);
    object.create(2012223962, new mp.Vector3(-1623.84, -3002.66, -79.02), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(2012223962, new mp.Vector3(-1629.86, -3002.68, -79.02), new mp.Vector3(5.008957e-6, 2.231179e-5, -89.99999), false, false);
    object.create(2012223962, new mp.Vector3(-1629.86, -3008.04, -79.02), new mp.Vector3(-4.46236e-5, 2.231179e-5, 89.99999), false, false);
    object.create(1555579420, new mp.Vector3(561.39, -3121.62, 17.76858), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(-1673752417, new mp.Vector3(560.41, -3120.65, 17.76858), new mp.Vector3(0, -5.008956e-6, -5.008956e-6), false, false);
    object.create(262175156, new mp.Vector3(553.9, -3120.64, 17.76858), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1555579420, new mp.Vector3(552.92, -3121.61, 17.76858), new mp.Vector3(5.008952e-6, -5.008955e-6, 89.99999), false, false);
    object.create(-1673752417, new mp.Vector3(560.41, -3122.59, 17.76858), new mp.Vector3(0, -5.008956e-6, -5.008956e-6), false, false);
    object.create(1555579420, new mp.Vector3(561.39, -3123.56, 17.76858), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(-1673752417, new mp.Vector3(560.41, -3124.53, 17.76858), new mp.Vector3(0, -5.008956e-6, -5.008956e-6), false, false);
    object.create(1555579420, new mp.Vector3(561.39, -3125.5, 17.76858), new mp.Vector3(-2.564906e-12, -5.008952e-6, -89.99995), false, false);
    object.create(-1673752417, new mp.Vector3(560.41, -3126.47, 17.76858), new mp.Vector3(0, -5.008956e-6, -5.008956e-6), false, false);
    object.create(1555579420, new mp.Vector3(561.39, -3127.44, 17.76858), new mp.Vector3(-3.732026e-12, -5.008951e-6, -89.99993), false, false);
    object.create(262175156, new mp.Vector3(553.9, -3122.58, 17.76858), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1555579420, new mp.Vector3(552.92, -3123.55, 17.76858), new mp.Vector3(5.008952e-6, -5.008953e-6, 89.99998), false, false);
    object.create(262175156, new mp.Vector3(553.9, -3124.51, 17.76858), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1555579420, new mp.Vector3(552.92, -3125.48, 17.76858), new mp.Vector3(5.008952e-6, -5.00895e-6, 89.99995), false, false);
    object.create(262175156, new mp.Vector3(553.9, -3126.45, 17.76858), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1555579420, new mp.Vector3(552.92, -3127.43, 17.76858), new mp.Vector3(5.008952e-6, -5.008947e-6, 89.99993), false, false);
    object.create(-1713129017, new mp.Vector3(583.8177, -3127.751, 19.1186), new mp.Vector3(0, 0, 178.5003), false, false);
    object.create(-1713871928, new mp.Vector3(584.27, -3123.21, 18.24), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1713871928, new mp.Vector3(578.61, -3123.21, 18.21861), new mp.Vector3(0, 0, 0), false, false);
    object.create(992069095, new mp.Vector3(564.18, -3116.52, 18.72), new mp.Vector3(0, 0, 0), false, false);
    object.create(1114264700, new mp.Vector3(563.19, -3116.53, 18.72), new mp.Vector3(0, 0, 0), false, false);
    object.create(-654402915, new mp.Vector3(562.19, -3116.56, 18.68), new mp.Vector3(0, 0, 0), false, false);
    object.create(690372739, new mp.Vector3(561.3163, -3116.458, 17.76), new mp.Vector3(0, 0, 0), false, false);
    object.create(73774428, new mp.Vector3(558.6879, -3116.079, 19.2007), new mp.Vector3(0, 0, 0), false, false);
    object.create(1442760350, new mp.Vector3(572.9116, -3119.277, 18.36), new mp.Vector3(0, 0, 179.9997), false, false);
    object.create(1442760350, new mp.Vector3(565.43, -3119.331, 18.36), new mp.Vector3(0, 0, 179.9997), false, false);
    object.create(1442760350, new mp.Vector3(557.1255, -3127.854, 18.37), new mp.Vector3(0, 0, 179.9997), false, false);
    object.create(1175177969, new mp.Vector3(552.94, -3121.499, 18.57), new mp.Vector3(0, 0, 49.99998), false, false);
    object.create(553121952, new mp.Vector3(552.8323, -3127.289, 18.57), new mp.Vector3(0, 0, 157.9995), false, false);
    object.create(-1122944124, new mp.Vector3(561.601, -3127.241, 18.55032), new mp.Vector3(0, 0, -88.99989), false, false);
    object.create(-1519432258, new mp.Vector3(552.9919, -3121.732, 18.55032), new mp.Vector3(0, 0, 146.9997), false, false);
    object.create(144995201, new mp.Vector3(552.7374, -3123.336, 18.55032), new mp.Vector3(0, 0, -50.99998), false, false);
    object.create(144995201, new mp.Vector3(552.8483, -3123.356, 18.55032), new mp.Vector3(0, 0, 44.00001), false, false);
    object.create(144995201, new mp.Vector3(561.1903, -3123.369, 18.55032), new mp.Vector3(0, 0, 21), false, false);
    object.create(-1321253704, new mp.Vector3(561.429, -3125.691, 18.55032), new mp.Vector3(0, 0, -35.99998), false, false);
    object.create(-1321253704, new mp.Vector3(561.2785, -3125.707, 18.55032), new mp.Vector3(0, 0, 9.000024), false, false);
    object.create(-364924791, new mp.Vector3(561.5486, -3121.48, 18.69), new mp.Vector3(0, 0, -81.99992), false, false);
    object.create(2000514109, new mp.Vector3(581.4695, -3126.904, 17.76858), new mp.Vector3(0, 0, 0), false, false);
    object.create(-95585677, new mp.Vector3(577.3924, -3126.911, 18.13), new mp.Vector3(0, 0, 0), false, false);
    object.create(2109346928, new mp.Vector3(577.0804, -3126.881, 18.48), new mp.Vector3(0, 0, 19.99998), false, false);
    object.create(854521792, new mp.Vector3(576.7056, -3126.963, 18.57), new mp.Vector3(0, 0, 1.999927), false, false);
    object.create(1465830963, new mp.Vector3(576.8858, -3126.315, 18.01), new mp.Vector3(0, 0, 80.99985), false, false);
    object.create(-1524553731, new mp.Vector3(577.9, -3126.777, 18.67), new mp.Vector3(0, 0, -178.7007), false, false);
    object.create(-2137905671, new mp.Vector3(578.0801, -3126.765, 18.49104), new mp.Vector3(0, 0, -0.0001893043), true, false);
    object.create(-1626066319, new mp.Vector3(576.9577, -3127.822, 18.35), new mp.Vector3(0, 0, 117.9997), false, false);
    object.create(771604073, new mp.Vector3(581.2, -3124.22, 22.11), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(771604073, new mp.Vector3(556.64, -3124.23, 22.11), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(1873958683, new mp.Vector3(5.12, 221.3692, 111.1681), new mp.Vector3(1.00179e-5, -5.008956e-6, 69.94978), false, false);
    object.create(-62459927, new mp.Vector3(3.640865, 218.7829, 106.7872), new mp.Vector3(0, 0, 65.09992), false, false);
    object.create(-62459927, new mp.Vector3(3.344031, 217.5904, 106.7872), new mp.Vector3(0, 0, -105.9), false, false);
    object.create(-62459927, new mp.Vector3(2.891121, 216.7459, 106.7872), new mp.Vector3(0, 0, 71.10005), false, false);
    object.create(-62459927, new mp.Vector3(2.662874, 215.7804, 106.7872), new mp.Vector3(0, 0, -108.8998), false, false);
    object.create(-62459927, new mp.Vector3(0.7765616, 210.9651, 106.116), new mp.Vector3(0, 0, 71.10004), false, false);
    object.create(-62459927, new mp.Vector3(1.297037, 212.0501, 106.116), new mp.Vector3(0, 0, -108.8998), false, false);
    object.create(-62459927, new mp.Vector3(1.594715, 213.2014, 106.116), new mp.Vector3(0, 0, 71.10004), false, false);
    object.create(-62459927, new mp.Vector3(2.124307, 214.2887, 106.116), new mp.Vector3(0, 0, -108.8998), false, false);
    object.create(995767216, new mp.Vector3(404.63, -997.86, -98.86), new mp.Vector3(1.001789e-5, -5.008956e-6, -89.99954), false, false);
    object.create(995767216, new mp.Vector3(401.1, -996.57, -98.86), new mp.Vector3(1.001787e-5, -5.008956e-6, 70.12512), false, false);
    object.create(96868307, new mp.Vector3(401.1658, -1002.111, -100.0041), new mp.Vector3(0, 0, 106.0001), false, false);
    object.create(-171943901, new mp.Vector3(399.9799, -1004.958, -99.47), new mp.Vector3(1.00179e-5, -5.008955e-6, -93.74994), false, false);
    object.create(-380698483, new mp.Vector3(398.53, -1004.88, -99.61), new mp.Vector3(0, 0, 0), false, false);
    object.create(-171943901, new mp.Vector3(397.15, -1005.16, -99.49), new mp.Vector3(1.00179e-5, 5.008956e-6, 90.99986), false, false);
    object.create(-1609037443, new mp.Vector3(398.7716, -1003.399, -98.50414), new mp.Vector3(0, 0, 0), false, false);
    object.create(-171943901, new mp.Vector3(397.14, -1004.47, -99.49), new mp.Vector3(1.00179e-5, 5.008956e-6, 90.99986), false, false);
    object.create(-598185919, new mp.Vector3(398.8338, -1005.316, -99.15), new mp.Vector3(0, 0, 0), false, false);
    object.create(-598185919, new mp.Vector3(398.3087, -1004.545, -99.15), new mp.Vector3(0, 0, 0), false, false);
    object.create(-870868698, new mp.Vector3(436.36, -988.04, 29.68959), new mp.Vector3(0, 0, 179.8003), false, false);
    object.create(713133406, new mp.Vector3(-1400.05, -602.6, 29.75), new mp.Vector3(0, 5.008956e-6, 47.39957), false, false);
    object.create(713133406, new mp.Vector3(-1399.969, -604.2127, 29.75), new mp.Vector3(1.00179e-5, -5.008955e-6, -3.8505), false, false);
    object.create(713133406, new mp.Vector3(-1401.312, -601.5624, 29.75), new mp.Vector3(1.001789e-5, -5.008945e-6, 68.94926), false, false);
    object.create(713133406, new mp.Vector3(-1403.961, -603.19, 29.75), new mp.Vector3(1.001789e-5, -5.008935e-6, 34.349), false, false);
    object.create(713133406, new mp.Vector3(-1403.08, -604.35, 29.75), new mp.Vector3(1.001789e-5, -5.008932e-6, 37.94894), false, false);
    object.create(713133406, new mp.Vector3(-1399.917, -610.4652, 29.75), new mp.Vector3(1.001788e-5, -5.008925e-6, -33.05106), false, false);
    object.create(713133406, new mp.Vector3(-1397.61, -609.29, 29.75), new mp.Vector3(1.001787e-5, -5.008914e-6, -110.7505), false, false);
    object.create(713133406, new mp.Vector3(-1396.49, -610.26, 29.75), new mp.Vector3(1.001786e-5, -5.008905e-6, -146.1499), false, false);
    object.create(713133406, new mp.Vector3(-1396.21, -611.88, 29.75), new mp.Vector3(1.001785e-5, -5.008896e-6, 163.45), false, false);
    object.create(713133406, new mp.Vector3(-1397.6, -612.86, 29.75), new mp.Vector3(1.001784e-5, -5.008884e-6, 94.74924), false, false);
    object.create(713133406, new mp.Vector3(-1396.47, -615.38, 29.75), new mp.Vector3(1.001783e-5, -5.008878e-6, 139.3488), false, false);
    object.create(713133406, new mp.Vector3(-1399.59, -600.37, 29.75), new mp.Vector3(1.001782e-5, -5.008862e-6, -151.9512), false, false);
    object.create(713133406, new mp.Vector3(-1397.3, -598.62, 29.75), new mp.Vector3(1.001783e-5, -5.008852e-6, -106.6506), false, false);
    object.create(713133406, new mp.Vector3(-1397.4, -600.46, 29.75), new mp.Vector3(1.001782e-5, -5.008846e-6, -46.75024), false, false);
    object.create(-655507950, new mp.Vector3(-1378.11, -627.63, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1379.48, -628.51, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1376.76, -626.73, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1375.44, -625.89, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1374.19, -625.07, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1380.73, -629.33, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1381.91, -630.09, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1381.926, -631.304, 30.55), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1390.11, -610.03, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1391.16, -609.22, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1392.09, -608.29, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1392.96, -607.06, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1393.64, -605.8616, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1394.027, -604.6962, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1394.36, -603.37, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1394.46, -601.93, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1393.05, -599.35, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(-655507950, new mp.Vector3(-1391.76, -598.52, 30.04), new mp.Vector3(0, 0, 0), false, false);
    object.create(812467272, new mp.Vector3(-1386.54, -627.64, 31.00277), new mp.Vector3(0, 0, -57.39986), false, false);
    object.create(812467272, new mp.Vector3(-1392.06, -639.88, 28.83), new mp.Vector3(0, 0, -57.39986), false, false);
    object.create(362975687, new mp.Vector3(-431.83, 288.36, 86.22), new mp.Vector3(1.00179e-5, -5.008952e-6, 85.1245), false, false);
    object.create(362975687, new mp.Vector3(-447.14, 279.57, 78.67), new mp.Vector3(1.00179e-5, -5.008949e-6, 85.12448), false, false);
    object.create(1051204975, new mp.Vector3(-450.39, 277.53, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-450.5003, 275.5157, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-452.5082, 276.3691, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-454.51, 276.66, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-456.3235, 276.075, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-456.9093, 277.8188, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-454.86, 278.6, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-452.6371, 278.4112, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-453.491, 286.1197, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(1051204975, new mp.Vector3(-456.2945, 285.9832, 77.44), new mp.Vector3(0, 0, 0), false, false);
    object.create(10928689, new mp.Vector3(-451.83, 283.8, 78.27), new mp.Vector3(179.6491, 0.006879828, -140.5301), false, false);
    object.create(10928689, new mp.Vector3(-452.0189, 282.68, 78.27), new mp.Vector3(179.6491, 0.006879828, -140.5301), false, false);
    object.create(10928689, new mp.Vector3(-451.75, 284.79, 78.27), new mp.Vector3(179.6491, 0.006879828, -140.5301), false, false);
    object.create(10928689, new mp.Vector3(-451.85, 286.01, 78.27), new mp.Vector3(179.6491, 0.006879828, -140.5301), false, false);
    object.create(1261306399, new mp.Vector3(-453.94, 287.41, 77.52), new mp.Vector3(-89.75012, -5.326079e-6, -4.799992), false, false);
    object.create(670120870, new mp.Vector3(-446.72, 286.79, 77.52), new mp.Vector3(89.99966, 4.889435e-6, -4.799992), false, false);
    object.create(1261306399, new mp.Vector3(-458.28, 276.94, 77.52151), new mp.Vector3(-89.75005, 0.0001235037, -94.79997), false, false);
    object.create(1261306399, new mp.Vector3(-452.96, 273.03, 77.52), new mp.Vector3(-89.75006, 5.347758e-6, -4.799992), false, false);
    object.create(1261306399, new mp.Vector3(-448.73, 274.02, 77.51469), new mp.Vector3(-89.75005, 0.0001235037, -94.79997), false, false);
    object.create(1261306399, new mp.Vector3(-447.65, 286.65, 77.52), new mp.Vector3(-89.75005, 0.0001235037, -94.79997), false, false);
    object.create(670120870, new mp.Vector3(-459.45, 282.33, 77.52151), new mp.Vector3(89.99963, 4.876389e-6, -4.799992), false, false);
    object.create(1568508953, new mp.Vector3(-459.75, 282.91, 74.37), new mp.Vector3(89.99956, 4.581106e-5, -94.79998), false, false);
    object.create(670120870, new mp.Vector3(-459.49, 288.1418, 77.52151), new mp.Vector3(89.99963, 5.733242e-5, -94.79999), false, false);
    object.create(670120870, new mp.Vector3(-446.61, 279.11, 77.52151), new mp.Vector3(89.99962, 5.288733e-6, -4.799992), false, false);
    object.create(670120870, new mp.Vector3(-446.48, 281.26, 77.52151), new mp.Vector3(89.9996, 5.062995e-6, -4.799992), false, false);
    object.create(670120870, new mp.Vector3(-446.91, 280.27, 77.52151), new mp.Vector3(89.99963, 5.733242e-5, -94.79999), false, false);
    object.create(10928689, new mp.Vector3(-452.59, 273.48, 78.55), new mp.Vector3(179.6491, 0.006879828, -140.5301), false, false);
    object.create(1261306399, new mp.Vector3(-454.22, 283.85, 81.08), new mp.Vector3(-0.0001265859, -5.008956e-6, -4.804992), false, false);
    object.create(670120870, new mp.Vector3(-447.03, 283.3438, 81.08), new mp.Vector3(179.9987, -5.008951e-6, -4.799991), false, false);
    object.create(1261306399, new mp.Vector3(-453.7983, 276.72, 82.18), new mp.Vector3(-0.0001265859, -5.008956e-6, -4.804992), false, false);
    object.create(622445601, new mp.Vector3(-451.27, 281.62, 81.44), new mp.Vector3(89.99989, -4.884134e-6, -4.799992), false, false);
    object.create(622445601, new mp.Vector3(-450.9, 285.99, 81.44), new mp.Vector3(89.9999, -4.73799e-6, -4.799993), false, false);
    object.create(622445601, new mp.Vector3(-448.85, 282.23, 81.44), new mp.Vector3(89.99988, 9.280606e-5, 85.2), false, false);
    object.create(622445601, new mp.Vector3(-449.07, 279.405, 81.44), new mp.Vector3(89.99988, 9.975518e-5, 85.19999), false, false);
    object.create(-629735826, new mp.Vector3(-445.3091, 280.6197, 80.21), new mp.Vector3(1.00179e-5, 5.008956e-6, -94.79997), false, false);
    object.create(622445601, new mp.Vector3(-450.8738, 284.7859, 81.44), new mp.Vector3(89.9999, -4.73799e-6, -4.799993), false, false);
    object.create(670120870, new mp.Vector3(-453.4218, 278.95, 81.64), new mp.Vector3(179.9986, 3.597224e-5, -94.79998), false, false);
    object.create(670120870, new mp.Vector3(-458.14, 275.89, 81.64), new mp.Vector3(179.9986, 3.597217e-5, -4.799992), false, false);
    object.create(670120870, new mp.Vector3(-448.95, 275.59, 81.64), new mp.Vector3(179.9986, 3.597217e-5, -4.799991), false, false);
    object.create(432085890, new mp.Vector3(-449.58, 281.76, 78.57184), new mp.Vector3(1.001791e-5, 5.008955e-6, -94.79997), false, false);
    object.create(432085890, new mp.Vector3(-449.5, 281.76, 78.57185), new mp.Vector3(1.001791e-5, 5.008955e-6, -94.79997), false, false);
    object.create(432085890, new mp.Vector3(-449.57, 281.87, 78.57184), new mp.Vector3(1.001791e-5, 2.23118e-5, 85.2), false, false);
    object.create(432085890, new mp.Vector3(-449.49, 281.87, 78.57185), new mp.Vector3(1.001791e-5, 2.23118e-5, 85.2), false, false);
    object.create(-1126237515, new mp.Vector3(-1374.14, -499.31, 32.15741), new mp.Vector3(0, 5.008956e-6, 8.749986), false, false);
    object.create(2117668672, new mp.Vector3(297.3958, -1350.263, 24.1), new mp.Vector3(0, 0, -40.19975), false, false);
    object.create(1741063045, new mp.Vector3(290.5446, -1342.799, 24.82151), new mp.Vector3(89.9996, -1.532509e-5, -39.99996), false, false);
    object.create(1741063045, new mp.Vector3(293.1907, -1345.019, 24.84393), new mp.Vector3(89.99956, -3.12027e-5, -39.99994), false, false);
    object.create(1741063045, new mp.Vector3(295.8304, -1347.234, 24.82015), new mp.Vector3(89.9995, -5.413189e-5, -39.99992), false, false);
    object.create(1741063045, new mp.Vector3(298.4105, -1349.399, 24.97428), new mp.Vector3(89.99942, -8.588703e-5, -39.9999), false, false);
    object.create(1741063045, new mp.Vector3(293.3325, -1354.494, 24.87017), new mp.Vector3(-89.97173, 0.2769054, -39.99992), false, false);
    object.create(1741063045, new mp.Vector3(290.6793, -1352.276, 24.87017), new mp.Vector3(-89.97161, 0.2769557, -39.99988), false, false);
    object.create(1741063045, new mp.Vector3(288.12, -1350.13, 24.87017), new mp.Vector3(-89.97145, 0.2770211, -39.99983), false, false);
    object.create(1741063045, new mp.Vector3(286.36, -1348.66, 24.87017), new mp.Vector3(-89.97124, 0.2771027, -39.99976), false, false);
    object.create(-49478617, new mp.Vector3(299.2299, -1350.254, 25.66142), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(1741063045, new mp.Vector3(298.33, -1351.61, 25.03939), new mp.Vector3(-89.97199, 6.659184e-5, 49.99999), false, false);
    object.create(1741063045, new mp.Vector3(296.17, -1354.18, 25.04), new mp.Vector3(-89.97199, 6.659184e-5, 49.99999), false, false);
    object.create(-49478617, new mp.Vector3(296.5766, -1348.024, 25.66), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(-49478617, new mp.Vector3(294.7996, -1355.53, 25.66), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(-49478617, new mp.Vector3(291.9387, -1344.132, 25.66), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(-49478617, new mp.Vector3(291.966, -1353.309, 25.66), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(-49478617, new mp.Vector3(287.1125, -1349.237, 25.6622), new mp.Vector3(0, 0, -38.6999), false, false);
    object.create(-1594158571, new mp.Vector3(293.09, -1354.05, 24.87316), new mp.Vector3(1.001791e-5, 5.008955e-6, 139.9996), false, false);
    object.create(2117668672, new mp.Vector3(293.8004, -1353.152, 24.1), new mp.Vector3(0, 0, 139.2994), false, false);
    object.create(-1594158571, new mp.Vector3(298.0873, -1349.364, 24.87), new mp.Vector3(1.001791e-5, 2.231179e-5, -39.99998), false, false);
    object.create(2117668672, new mp.Vector3(289.1091, -1349.138, 24.1), new mp.Vector3(0, 0, 139.2994), false, false);
    object.create(-1594158571, new mp.Vector3(295.38, -1347.07, 24.87), new mp.Vector3(1.001791e-5, 2.231179e-5, -39.99998), false, false);
    object.create(2117668672, new mp.Vector3(294.6709, -1348.047, 24.1), new mp.Vector3(0, 0, -40.19975), false, false);
    object.create(-1594158571, new mp.Vector3(290.38, -1351.81, 24.87316), new mp.Vector3(1.001791e-5, 5.008955e-6, 139.9996), false, false);
    object.create(-1594158571, new mp.Vector3(288.35, -1350.11, 24.87316), new mp.Vector3(1.001791e-5, 5.008955e-6, 139.9996), false, false);
    object.create(2117668672, new mp.Vector3(291.1667, -1350.895, 24.1), new mp.Vector3(0, 0, 139.2994), false, false);
    object.create(-1594158571, new mp.Vector3(293.43, -1345.44, 24.87), new mp.Vector3(1.001791e-5, 2.231179e-5, -39.99998), false, false);
    object.create(-1594158571, new mp.Vector3(290.69, -1343.14, 24.87), new mp.Vector3(1.001791e-5, 2.231179e-5, -39.99998), false, false);
    object.create(2117668672, new mp.Vector3(290.0099, -1344.083, 24.1), new mp.Vector3(0, 0, -40.19975), false, false);
    object.create(-232023078, new mp.Vector3(294.8448, -1353.798, 23.5378), new mp.Vector3(0, 0, -129.9998), false, false);
    object.create(-232023078, new mp.Vector3(296.4086, -1349.734, 23.5378), new mp.Vector3(0, 0, -129.9998), false, false);
    object.create(-232023078, new mp.Vector3(293.6413, -1347.43, 23.5378), new mp.Vector3(0, 0, -129.9998), false, false);
    object.create(-232023078, new mp.Vector3(288.9342, -1343.544, 23.5378), new mp.Vector3(0, 0, -133.9997), false, false);
    object.create(-232023078, new mp.Vector3(290.1003, -1349.784, 23.5378), new mp.Vector3(0, 0, -128.0996), false, false);
    object.create(-232023078, new mp.Vector3(292.1297, -1351.532, 23.5378), new mp.Vector3(0, 0, -131.9996), false, false);
    object.create(2057317573, new mp.Vector3(286.8773, -1345.425, 23.5378), new mp.Vector3(0, 0, 49.9999), false, false);
    object.create(579266365, new mp.Vector3(298.6403, -1350.761, 23.5378), new mp.Vector3(0, 0, 50.59992), false, false);
    object.create(579266365, new mp.Vector3(295.1373, -1354.871, 23.5378), new mp.Vector3(0, 0, -41.40002), false, false);
    object.create(579266365, new mp.Vector3(289.1705, -1342.294, 23.5378), new mp.Vector3(0, 0, -39.49965), false, false);
    object.create(579266365, new mp.Vector3(285.3955, -1346.812, 23.5378), new mp.Vector3(0, 0, 48.9002), false, false);
    object.create(-1963803813, new mp.Vector3(285.6692, -1347.363, 23.99), new mp.Vector3(0, 0, 51.69948), false, false);
    object.create(-742198632, new mp.Vector3(276.3308, -1346.683, 23.5378), new mp.Vector3(0, 0, 139.6528), true, false);
    object.create(1114264700, new mp.Vector3(286.4332, -1338.599, 24.49), new mp.Vector3(0, 0, 49.89991), false, false);
    object.create(-1034034125, new mp.Vector3(287.0995, -1337.831, 24.45), new mp.Vector3(0, 0, 50.09992), false, false);
    object.create(-1969563019, new mp.Vector3(289.3766, -1340.82, 23.5378), new mp.Vector3(0, 0, -129.8997), false, false);
    object.create(-1740687742, new mp.Vector3(297.15, -1352.95, 25.11281), new mp.Vector3(0, -5.008956e-6, 50), false, false);
    object.create(-1113453233, new mp.Vector3(296.94, -1353.267, 24.19), new mp.Vector3(6.106665e-13, 5.008957e-6, -129.9996), false, false);
    object.create(-1113453233, new mp.Vector3(296.94, -1353.267, 25.09), new mp.Vector3(6.106665e-13, 5.008957e-6, -129.9996), false, false);
    object.create(-1113453233, new mp.Vector3(297.43, -1352.69, 25.09), new mp.Vector3(6.106665e-13, 5.008957e-6, -129.9996), false, false);
    object.create(-1113453233, new mp.Vector3(297.43, -1352.69, 24.19), new mp.Vector3(6.106665e-13, 5.008957e-6, -129.9996), false, false);
    object.create(1088184978, new mp.Vector3(287.3643, -1348.924, 25.22), new mp.Vector3(4.07111e-13, -5.008956e-6, 140), false, false);
    object.create(1088184978, new mp.Vector3(292.2503, -1353.009, 25.22186), new mp.Vector3(4.07111e-13, -5.008956e-6, 140), false, false);
    object.create(1088184978, new mp.Vector3(296.3097, -1348.323, 25.22187), new mp.Vector3(5.008952e-6, -5.008955e-6, -39.99998), false, false);
    object.create(1088184978, new mp.Vector3(291.6817, -1344.44, 25.22), new mp.Vector3(5.008952e-6, -5.008955e-6, -39.99998), false, false);
    object.create(1107796358, new mp.Vector3(289.7623, -1342.604, 23.5378), new mp.Vector3(-1.017777e-12, -5.008954e-6, -39.99998), false, false);
    object.create(1107796358, new mp.Vector3(292.4688, -1344.903, 23.5378), new mp.Vector3(-1.017777e-12, -5.008954e-6, -39.99998), false, false);
    object.create(-232023078, new mp.Vector3(291.6853, -1345.868, 23.5378), new mp.Vector3(0, 0, -126.9997), false, false);
    object.create(1107796358, new mp.Vector3(294.4409, -1346.489, 23.5378), new mp.Vector3(-1.017777e-12, -5.008954e-6, -39.99998), false, false);
    object.create(1107796358, new mp.Vector3(297.1339, -1348.768, 23.5378), new mp.Vector3(-1.017777e-12, -5.008954e-6, -39.99998), false, false);
    object.create(1107796358, new mp.Vector3(294.304, -1354.854, 23.5378), new mp.Vector3(5.008954e-6, -5.008955e-6, 140), false, false);
    object.create(1107796358, new mp.Vector3(291.4247, -1352.473, 23.5378), new mp.Vector3(5.008954e-6, -5.008955e-6, 140), false, false);
    object.create(1107796358, new mp.Vector3(289.3833, -1350.734, 23.5378), new mp.Vector3(5.008954e-6, -5.008955e-6, 140), false, false);
    object.create(99079546, new mp.Vector3(289.9653, -1342.648, 24.31794), new mp.Vector3(0, 0, -8.999993), false, false);
    object.create(99079546, new mp.Vector3(289.1621, -1350.683, 24.31794), new mp.Vector3(0, 0, 150.9998), false, false);
    object.create(99079546, new mp.Vector3(294.1111, -1354.771, 24.31794), new mp.Vector3(0, 0, 137.9996), false, false);
    object.create(498625049, new mp.Vector3(289.3821, -1350.531, 24.31794), new mp.Vector3(0, 0, -26.99997), false, false);
    object.create(498625049, new mp.Vector3(296.9583, -1348.63, 24.31794), new mp.Vector3(0, 0, -136.9999), false, false);
    object.create(2120480918, new mp.Vector3(294.7352, -1346.534, 24.31794), new mp.Vector3(0, 0, -34.99997), false, false);
    object.create(275099168, new mp.Vector3(294.3364, -1346.46, 24.31794), new mp.Vector3(0, 0, 0), false, false);
    object.create(32477783, new mp.Vector3(291.3569, -1352.272, 24.31794), new mp.Vector3(0, 0, -149.9998), false, false);
    object.create(1787587532, new mp.Vector3(291.1722, -1352.44, 24.34), new mp.Vector3(0, 0, 34.99997), false, false);
    object.create(-2025086469, new mp.Vector3(294.3163, -1354.586, 24.38), new mp.Vector3(0, 0, -44.99998), false, false);
    object.create(-2037843699, new mp.Vector3(297.2116, -1349.009, 24.38), new mp.Vector3(0, 0, 34.99997), false, false);
    object.create(-85890288, new mp.Vector3(289.6111, -1342.592, 24.37), new mp.Vector3(0, 0, 172.9998), false, false);
    object.create(714696561, new mp.Vector3(289.8299, -1342.592, 24.33), new mp.Vector3(0, 0, 0), false, false);
    object.create(1241647493, new mp.Vector3(291.4225, -1352.717, 24.49), new mp.Vector3(0, 0, -20.99998), false, false);
    object.create(-1826381033, new mp.Vector3(289.4402, -1350.885, 24.39), new mp.Vector3(0, 0, 0), false, false);
    object.create(532565818, new mp.Vector3(297.3058, -1348.807, 24.33), new mp.Vector3(0, 0, -99.99979), false, false);
    object.create(2079380440, new mp.Vector3(294.3082, -1355.08, 24.31794), new mp.Vector3(0, 0, 149.0001), false, false);
    object.create(-847333257, new mp.Vector3(286.55, -1341.302, 26.99), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(-847333257, new mp.Vector3(287.2, -1340.527, 26.991), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(-847333257, new mp.Vector3(284.01, -1344.32, 26.99), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(-847333257, new mp.Vector3(283.38, -1345.07, 26.993), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(696447118, new mp.Vector3(269.8325, -1360.311, 23.5378), new mp.Vector3(0, 0, -60.99975), false, false);
    object.create(696447118, new mp.Vector3(268.9707, -1362.274, 23.5378), new mp.Vector3(0, 0, -171.9996), false, false);
    object.create(696447118, new mp.Vector3(267.2913, -1361.416, 23.5378), new mp.Vector3(0, 0, 49.80005), false, false);
    object.create(-177104014, new mp.Vector3(281.1638, -1350.08, 23.5378), new mp.Vector3(0, 0, -52.03386), false, false);
    object.create(-470815620, new mp.Vector3(262.3567, -1360.348, 24.12), new mp.Vector3(0, 0, -139.9998), false, false);
    object.create(-470815620, new mp.Vector3(264.2148, -1358.397, 24.13), new mp.Vector3(0, 0, -145.9997), false, false);
    object.create(-470815620, new mp.Vector3(265.5582, -1358.5, 24.13), new mp.Vector3(0, 0, 167.0003), false, false);
    object.create(-1969563019, new mp.Vector3(268.6227, -1349.301, 23.5378), new mp.Vector3(0, 0, -129.8997), false, false);
    object.create(-1969563019, new mp.Vector3(271.3222, -1346.072, 23.5378), new mp.Vector3(0, 0, -129.8997), false, false);
    object.create(-1969563019, new mp.Vector3(258.05, -1361.86, 23.5378), new mp.Vector3(0, 0, -129.8997), false, false);
    object.create(-742198632, new mp.Vector3(269.9632, -1347.678, 23.5378), new mp.Vector3(0, 0, -130.1468), false, false);
    object.create(-1004588353, new mp.Vector3(292.2333, -1353.009, 26.0452), new mp.Vector3(0, 0, 140), true, false);
    object.create(-1004588353, new mp.Vector3(287.3695, -1348.929, 26.04), new mp.Vector3(0, 0, 140), true, false);
    object.create(-870868698, new mp.Vector3(260.5088, -1352.926, 23.5378), new mp.Vector3(0, 0, 49.79988), false, false);
    object.create(-133590469, new mp.Vector3(288.2, -1351.048, 24.02), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-133590469, new mp.Vector3(288.2, -1351.048, 25.01), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-133590469, new mp.Vector3(288.2, -1351.048, 25.99), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-251167274, new mp.Vector3(286.15, -1348.57, 24.76), new mp.Vector3(-4.07111e-13, -5.008956e-6, -39.99999), false, false);
    object.create(-251167274, new mp.Vector3(286.12, -1349.266, 24.71), new mp.Vector3(-4.07111e-13, -5.008955e-6, -39.99999), false, false);
    object.create(-133590469, new mp.Vector3(283.4458, -1351.058, 24.02), new mp.Vector3(5.008957e-6, 2.23118e-5, -39.99999), false, false);
    object.create(-133590469, new mp.Vector3(283.4458, -1351.058, 25.01), new mp.Vector3(5.008956e-6, 2.231179e-5, -39.99999), false, false);
    object.create(-133590469, new mp.Vector3(283.4458, -1351.058, 25.99), new mp.Vector3(5.008959e-6, 2.231179e-5, -39.99998), false, false);
    object.create(-133590469, new mp.Vector3(285.98, -1353.74, 24.02), new mp.Vector3(5.008959e-6, 2.231179e-5, -39.99998), false, false);
    object.create(-133590469, new mp.Vector3(285.98, -1353.74, 25.01), new mp.Vector3(5.008958e-6, 2.231179e-5, -39.99998), false, false);
    object.create(-133590469, new mp.Vector3(285.98, -1353.74, 25.99), new mp.Vector3(5.008957e-6, 2.231179e-5, -39.99998), false, false);
    object.create(-133590469, new mp.Vector3(286.2856, -1353.483, 24.02), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-133590469, new mp.Vector3(286.2856, -1353.483, 25.01), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-133590469, new mp.Vector3(286.2856, -1353.483, 25.99), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(995767216, new mp.Vector3(286.71, -1348.91, 24.71), new mp.Vector3(-4.07111e-13, -5.008956e-6, -39.99999), false, false);
    object.create(995767216, new mp.Vector3(286.56, -1349.76, 24.67), new mp.Vector3(-4.07111e-13, -5.008955e-6, -39.99999), false, false);
    object.create(771604073, new mp.Vector3(285.5999, -1350.925, 26.32), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-1468640009, new mp.Vector3(286.2659, -1351.731, 23.5), new mp.Vector3(5.008955e-6, -5.008956e-6, -130), false, false);
    object.create(-1659828682, new mp.Vector3(285.59, -1347.94, 24.86676), new mp.Vector3(5.008956e-6, -5.008956e-6, 140), false, false);
    object.create(2139919312, new mp.Vector3(424.2702, -1030.68616, 27.54), new mp.Vector3(0, 0, 5.999994), false, false);
    object.create(2139919312, new mp.Vector3(421.4569, -1030.90344, 27.54), new mp.Vector3(0, 0, 1.99999452), false, false);
    object.create(2139919312, new mp.Vector3(418.6943, -1031.074, 27.5386486), new mp.Vector3(1.00179022e-5, 5.00895567e-6, 4.499983), false, false);
    object.create(2139919312, new mp.Vector3(415.853149, -1031.2085, 27.61), new mp.Vector3(0, 0, 1.999992), false, false);
    object.create(2139919312, new mp.Vector3(413.2215, -1031.38745, 27.71), new mp.Vector3(0, 0, 1.999992), false, false);
    object.create(2139919312, new mp.Vector3(449.307251, -1028.16919, 27.0758915), new mp.Vector3(0, 0, 6.99999332), false, false);
    object.create(2139919312, new mp.Vector3(452.28894, -1027.63147, 26.9461555), new mp.Vector3(0, 0, 1.99999261), false, false);
    object.create(2139919312, new mp.Vector3(454.891785, -1027.33057, 26.97366), new mp.Vector3(0, 0, 6.99999332), false, false);
    object.create(-630768823, new mp.Vector3(447.334, -976.1474, 29.68959), new mp.Vector3(0, 0, 89.49982), false, false);
    object.create(49088219, new mp.Vector3(446.2045, -976.733, 29.72995), new mp.Vector3(0, 0, 145.5997), false, false);
    object.create(49088219, new mp.Vector3(448.4469, -976.7693, 29.72995), new mp.Vector3(0, 0, -146.7001), false, false);
    object.create(-1198343923, new mp.Vector3(440.2447, -978.0771, 29.68959), new mp.Vector3(0, 0, 14.99998), false, false);
    object.create(-1198343923, new mp.Vector3(442.2718, -978.0153, 29.68959), new mp.Vector3(0, 0, -18.99999), false, false);
    object.create(-1198343923, new mp.Vector3(439.6381, -976.0303, 29.68959), new mp.Vector3(0, 0, 109.9998), false, false);
    object.create(475561894, new mp.Vector3(459.5266, -988.2569, 23.91486), new mp.Vector3(0, 0, 13.99998), false, false);
    object.create(-1173315865, new mp.Vector3(447.1587, -972.6215, 29.68959), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1198343923, new mp.Vector3(436.5258, -996.4224, 29.68959), new mp.Vector3(0, 0, 95.39981), false, false);
    object.create(1335593994, new mp.Vector3(451.2586, -977.8861, 31.55897), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(-1198343923, new mp.Vector3(-1366.579, -484.5299, 71.04961), new mp.Vector3(0, 0, -81.59996), false, false);
    object.create(-1633198649, new mp.Vector3(-1372.694, -463.4513, 71.04904), new mp.Vector3(1.001789e-5, 5.008956e-6, 7.800015), false, false);
    object.create(-109356459, new mp.Vector3(-1368.213, -486.8757, 71.04961), new mp.Vector3(0, 0, 170.9995), false, false);
    object.create(-109356459, new mp.Vector3(-1369.6, -487.0586, 71.04961), new mp.Vector3(0, 0, 172.9994), false, false);
    object.create(-109356459, new mp.Vector3(-1371.036, -487.2733, 71.04961), new mp.Vector3(0, 0, 170.9995), false, false);
    object.create(-109356459, new mp.Vector3(-1372.953, -485.5236, 71.04961), new mp.Vector3(0, 0, 98.99931), false, false);
    object.create(-109356459, new mp.Vector3(-1378.948, -477.5486, 71.04214), new mp.Vector3(0, 0, -81.99999), false, false);
    object.create(-109356459, new mp.Vector3(-1378.467, -485.0299, 71.04214), new mp.Vector3(0, 0, 176.7003), false, false);
    object.create(-109356459, new mp.Vector3(-1376.522, -484.7803, 71.04214), new mp.Vector3(0, 0, -162.2995), false, false);
    object.create(-109356459, new mp.Vector3(-1375.264, -484.6066, 71.04214), new mp.Vector3(0, 0, -172.2994), false, false);
    object.create(-1883980157, new mp.Vector3(-1367.835, -485.2901, 71.96), new mp.Vector3(0, 0, 28.8998), true, false);
    object.create(-1095443412, new mp.Vector3(-1367.96, -484.1914, 71.87), new mp.Vector3(0, 0, -14.00007), true, false);
    object.create(-1969563019, new mp.Vector3(-1380.9, -463.96, 71.0787), new mp.Vector3(1.001791e-5, 5.008956e-6, 7.849973), false, false);
    object.create(-109356459, new mp.Vector3(-1371.632, -483.3122, 71.04961), new mp.Vector3(0, 0, 24.59919), false, false);
    object.create(-109356459, new mp.Vector3(-1370.192, -483.1119, 71.04961), new mp.Vector3(0, 0, 23.39919), false, false);
    object.create(-109356459, new mp.Vector3(-1368.779, -482.9375, 71.04961), new mp.Vector3(0, 0, 23.39919), false, false);
    object.create(1385417869, new mp.Vector3(-1372.094, -464.948, 71.84219), new mp.Vector3(1.001791e-5, -5.008956e-6, -146.05), false, false);
    object.create(1598361869, new mp.Vector3(-1380.877, -464.9449, 71.04211), new mp.Vector3(0, 0, 98.00006), false, false);
    object.create(-509973344, new mp.Vector3(-1384.735, -468.01, 72.31705), new mp.Vector3(1.001791e-5, -5.008956e-6, -171.8492), false, false);
    object.create(289451089, new mp.Vector3(-1376.126, -462.3827, 74.3), new mp.Vector3(0, 0, 36.29981), false, false);
    object.create(289451089, new mp.Vector3(-1365.66, -487.7241, 74.13), new mp.Vector3(0, 0, -126), false, false);
    object.create(289451089, new mp.Vector3(-1384.124, -489.5361, 74.3), new mp.Vector3(0, 0, 123.9998), false, false);
    object.create(289451089, new mp.Vector3(-1385.064, -473.1473, 74.3), new mp.Vector3(0, 0, 49.59971), false, false);
    object.create(289451089, new mp.Vector3(-1383.707, -464.0908, 73.8), new mp.Vector3(0, 0, 61.59965), false, false);
    object.create(289451089, new mp.Vector3(-1383.633, -472.4549, 73.8), new mp.Vector3(0, 0, 131.5995), false, false);
    object.create(289451089, new mp.Vector3(-1400.78, -480.5846, 74), new mp.Vector3(0, 0, 97.79929), false, false);
    object.create(1385417869, new mp.Vector3(-1376.759, -464.8488, 71.80749), new mp.Vector3(1.001791e-5, -5.008955e-6, -106.05), false, false);
    object.create(-1202648266, new mp.Vector3(-1378.408, -464.568, 71.57), new mp.Vector3(1.001791e-5, 5.008958e-6, 92.99983), false, false);
    object.create(-2117361680, new mp.Vector3(1975.85, 3822.81, 34.163868), new mp.Vector3(0, -0, 120.999817), false, false);
    object.create(-2117361680, new mp.Vector3(1978.15, 3818.51, 34.1776466), new mp.Vector3(0, 0, -59.9997), false, false);
    object.create(-2117361680, new mp.Vector3(1978.3, 3821.92, 34.01), new mp.Vector3(0, 20.0000057, 27.99997), false, false);
    object.create(-2117361680, new mp.Vector3(1978.92, 3820.96, 34.26), new mp.Vector3(-9.08566847e-7, 20.0000038, 29.9999657), false, false);
    object.create(-2117361680, new mp.Vector3(1978.09, 3822.28, 33.85), new mp.Vector3(-1.81713369e-6, 20.0000019, 29.9999275), false, false);
    object.create(-1926582578, new mp.Vector3(1975.12, 3816.75, 34.51986), new mp.Vector3(0, 0, 32.2999039), false, false);
    object.create(-1865248041, new mp.Vector3(1390.8, 1129.47949, 115.049431), new mp.Vector3(0, 0, 86.99711), false, false);
    object.create(-1865248041, new mp.Vector3(1390.81628, 1130.16235, 115.05), new mp.Vector3(0, 0, 86.9971), false, false);
    object.create(54588191, new mp.Vector3(1392.05, 1128.32, 115.17), new mp.Vector3(0, -0, 179.99913), false, false);
    object.create(54588191, new mp.Vector3(1394.95618, 1128.32, 115.17), new mp.Vector3(0, -0, 0), false, false);
    object.create(54588191, new mp.Vector3(1395.20422, 1128.32, 114.607361), new mp.Vector3(0, -0, 0), false, false);
    object.create(54588191, new mp.Vector3(1390.58, 1134.52, 115.215919), new mp.Vector3(0, 0, 89.99951), false, false);
    object.create(54588191, new mp.Vector3(1390.58, 1134.54871, 114.617538), new mp.Vector3(1.38423116e-12, -5.00895476e-6, 89.99998), false, false);
    object.create(54588191, new mp.Vector3(1391.62512, 1136.055, 114.926193), new mp.Vector3(0, -0, 0), false, false);
    object.create(54588191, new mp.Vector3(1393.06567, 1136.06, 114.926193), new mp.Vector3(0, -0, 0), false, false);
    object.create(-1693574816, new mp.Vector3(1398.56, 1128.36, 114.416557), new mp.Vector3(0, -5.00895567e-6, 180), false, false);
    object.create(-1693574816, new mp.Vector3(1399.932, 1128.36, 114.493813), new mp.Vector3(0, -5.00895567e-6, 180), false, false);
    object.create(-1693574816, new mp.Vector3(1401.29822, 1128.36, 114.393867), new mp.Vector3(0, -0, -179.998749), false, false);
    object.create(-1693574816, new mp.Vector3(1401.85, 1128.36, 114.35), new mp.Vector3(0, -0, -179.998749), false, false);
    object.create(339283616, new mp.Vector3(1409.15, 1147.51, 115.93), new mp.Vector3(0, -0, -179.9989), false, false);
    object.create(339283616, new mp.Vector3(1409.15, 1146.19, 115.003525), new mp.Vector3(1.00179113e-5, -5.00895567e-6, -180), false, false);
    object.create(339283616, new mp.Vector3(1409.15, 1146.11, 114.06), new mp.Vector3(0, -5.00895567e-6, 180), false, false);
    object.create(339283616, new mp.Vector3(1409.16077, 1147.695, 113.333611), new mp.Vector3(0, -0, -179.999008), false, false);
    object.create(1181479993, new mp.Vector3(1408.41589, 1147.55017, 113.333611), new mp.Vector3(0, 0, -89.99756), false, false);
    object.create(-697269431, new mp.Vector3(1409.02, 1147.54, 115.51), new mp.Vector3(0, 0, -89.99956), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1132.16956, 115.015053), new mp.Vector3(0, 0, -89.9995346), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1132.14038, 114.02), new mp.Vector3(0, 0, -89.99968), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1132.129, 113.463974), new mp.Vector3(0, 0, -89.9995651), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1132.129, 113.463974), new mp.Vector3(0, 0, -89.99955), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1133.27966, 115.006187), new mp.Vector3(0, 0, -89.9997), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1133.28027, 114.027222), new mp.Vector3(0, 0, -89.99968), false, false);
    object.create(-1474383439, new mp.Vector3(1390.67, 1133.28027, 113.487007), new mp.Vector3(0, 0, -89.9996643), false, false);
    object.create(174080689, new mp.Vector3(1409.02087, 1144.20044, 114.91526), new mp.Vector3(0, 0, -88.99979), false, false);
    object.create(-468144679, new mp.Vector3(1408.6709, 1149.98352, 113.76), new mp.Vector3(0, -0, -90.09866), false, false);
    object.create(-1562831388, new mp.Vector3(1390.7, 1132.78857, 114.483826), new mp.Vector3(0, 0, -89.9996262), false, false);
    object.create(-1562831388, new mp.Vector3(1390.7, 1131.648, 114.49369), new mp.Vector3(0, 0, 89.9995), false, false);
    object.create(-879871564, new mp.Vector3(1394.98694, 1128.45056, 114.390709), new mp.Vector3(0, 0, -3.99351075e-6), false, false);
    object.create(597596136, new mp.Vector3(1390.77, 1134.23, 114.41), new mp.Vector3(1.00179095e-5, 5.008958e-6, 92.29997), false, false);
    object.create(-1619952456, new mp.Vector3(1408.18433, 1144.83362, 113.62), new mp.Vector3(0, 0, 57.1988945), false, false);
    object.create(-1713129017, new mp.Vector3(1400.23, 1128.78, 114.59), new mp.Vector3(0, -0, 179.299088), false, false);
    object.create(-292927992, new mp.Vector3(1400.85, 1128.78882, 114.94), new mp.Vector3(0, -0, 176.999), false, false);
    object.create(239492112, new mp.Vector3(1395.97412, 1152.36169, 113.26), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1396.91, 1154.05, 113.25), new mp.Vector3(0, 0, -62.9998436), false, false);
    object.create(239492112, new mp.Vector3(1394.09, 1150.3, 113.26), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1393.15869, 1150.28809, 113.26), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1395.68, 1151.92, 113.33), new mp.Vector3(0, 0, 87.9997253), false, false);
    object.create(239492112, new mp.Vector3(1391.58484, 1149.01355, 113.26), new mp.Vector3(-4.46236045e-5, 2.23118041e-5, 89.92), false, false);
    object.create(239492112, new mp.Vector3(1392.96, 1144.33, 113.26), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1394.42786, 1144.266, 113.26), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1395.86926, 1145.44153, 113.26), new mp.Vector3(-4.46236045e-5, 2.23118041e-5, 89.92), false, false);
    object.create(239492112, new mp.Vector3(1396.61609, 1145.49341, 113.26), new mp.Vector3(-4.46236045e-5, 2.23118041e-5, 89.92), false, false);
    object.create(239492112, new mp.Vector3(1391.56433, 1146.01855, 113.26), new mp.Vector3(-4.46236045e-5, 2.23118041e-5, 89.92), false, false);
    object.create(502827120, new mp.Vector3(1393.68, 1146.24, 114.08), new mp.Vector3(0, 0, 0), false, false);
    object.create(502827120, new mp.Vector3(1393.68, 1148.68, 114.08), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1402.24451, 1146.65759, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1402.55383, 1148.72217, 113.25), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1404.95813, 1146.74561, 113.25), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1404.79907, 1148.70508, 113.25), new mp.Vector3(0, -0, 0), false, false);
    object.create(239492112, new mp.Vector3(1402.23218, 1147.68079, 113.25), new mp.Vector3(0, 0, -38.9997635), false, false);
    object.create(239492112, new mp.Vector3(1405.21179, 1147.77429, 113.25), new mp.Vector3(0, -0, 142.800629), false, false);
    object.create(239492112, new mp.Vector3(1405.07007, 1147.7948, 113.25), new mp.Vector3(0, 0, 32.9999428), false, false);
    object.create(239492112, new mp.Vector3(1405.148, 1147.63123, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1404.2876, 1150.41125, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1400.89587, 1141.84949, 113.25), new mp.Vector3(0, 0, -54.9999733), false, false);
    object.create(239492112, new mp.Vector3(1401.81677, 1143.376, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1400.058, 1137.56, 113.25), new mp.Vector3(0, -0, 91.9997), false, false);
    object.create(239492112, new mp.Vector3(1402.39954, 1131.93127, 113.25), new mp.Vector3(0, 0, 83.89974), false, false);
    object.create(239492112, new mp.Vector3(1402.81555, 1129.58252, 113.25), new mp.Vector3(0, 0, -38.9998932), false, false);
    object.create(239492112, new mp.Vector3(1399.38367, 1132.157, 113.25), new mp.Vector3(0, 0, 89.99963), false, false);
    object.create(239492112, new mp.Vector3(1396.42883, 1129.04187, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1395.18542, 1130.0033, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1395.24231, 1130.977, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1393.10291, 1132.22668, 113.25), new mp.Vector3(0, 0, -57.9998741), false, false);
    object.create(239492112, new mp.Vector3(1394.00452, 1132.90735, 113.25), new mp.Vector3(0, 0, -35.9997559), false, false);
    object.create(239492112, new mp.Vector3(1394.6095, 1131.30334, 113.25), new mp.Vector3(0, 0, 51.99954), false, false);
    object.create(239492112, new mp.Vector3(1393.71338, 1129.103, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1400.51428, 1137.14954, 113.25), new mp.Vector3(0, 0, -81.99976), false, false);
    object.create(239492112, new mp.Vector3(1393.62048, 1135.32678, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1396.62244, 1131.49353, 113.25), new mp.Vector3(0, 0, -88.99961), false, false);
    object.create(239492112, new mp.Vector3(1394.95667, 1132.94641, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(239492112, new mp.Vector3(1394.73621, 1135.834, 113.25), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1113453233, new mp.Vector3(-1152.59, -1523.245, 10.95272), new mp.Vector3(1.017777e-12, -5.008956e-6, -145.0245), false, false);
    object.create(-856584171, new mp.Vector3(-1148.74, -1513.23, 9.682452), new mp.Vector3(1.001789e-5, 5.008956e-6, -10.00001), false, false);
    object.create(-1350614541, new mp.Vector3(-1156.203, -1525.353, 9.631849), new mp.Vector3(0, 0, -124.0001), false, false);
    object.create(-1113453233, new mp.Vector3(-1161.52, -1521.869, 9.8), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1161.52, -1521.869, 10.99), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1161.79, -1521.49, 12), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1161.79, -1521.49, 9.63), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1161.79, -1521.49, 10.81), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1158.99, -1525.48, 9.81), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1158.99, -1525.48, 11), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1160.16, -1523.807, 9.81), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1160.16, -1523.807, 11), new mp.Vector3(1.001791e-5, 5.008956e-6, 124.98), false, false);
    object.create(-1113453233, new mp.Vector3(-1157.07, -1516.08, 10.37), new mp.Vector3(5.008956e-6, -5.008955e-6, 34.97549), false, false);
    object.create(-1113453233, new mp.Vector3(-1157.07, -1516.08, 11.56), new mp.Vector3(5.008956e-6, -5.008956e-6, 34.97549), false, false);
    object.create(-1113453233, new mp.Vector3(-1146.44, -1511.069, 9.8), new mp.Vector3(2.035555e-13, -5.008955e-6, -55.02429), false, false);
    object.create(-1113453233, new mp.Vector3(-1146.44, -1511.069, 10.99), new mp.Vector3(2.035555e-13, -5.008955e-6, -55.02429), false, false);
    object.create(-1113453233, new mp.Vector3(-1145.31, -1512.73, 9.8), new mp.Vector3(2.035555e-13, -5.008955e-6, -55.02429), false, false);
    object.create(-1113453233, new mp.Vector3(-1145.31, -1512.73, 10.99), new mp.Vector3(2.035555e-13, -5.008955e-6, -55.02429), false, false);
    object.create(-936729545, new mp.Vector3(-1161.6, -1521.76, 10.57), new mp.Vector3(1.001791e-5, -5.008957e-6, -55.02489), false, false);
    object.create(-936729545, new mp.Vector3(-1161.605, -1521.76, 11.05), new mp.Vector3(1.001791e-5, -5.008957e-6, -55.02488), false, false);
    object.create(-936729545, new mp.Vector3(-1159.13, -1525.29, 10.58), new mp.Vector3(1.00179e-5, -5.008956e-6, -55.07461), false, false);
    object.create(-936729545, new mp.Vector3(-1159.13, -1525.29, 11.05), new mp.Vector3(1.00179e-5, -5.008956e-6, -55.07461), false, false);
    object.create(-936729545, new mp.Vector3(-1146.403, -1511.13, 10.56), new mp.Vector3(1.001791e-5, -5.008945e-6, 124.8749), false, false);
    object.create(-936729545, new mp.Vector3(-1146.405, -1511.13, 11.04), new mp.Vector3(1.001791e-5, -5.008945e-6, 124.8749), false, false);
    object.create(-936729545, new mp.Vector3(-1156.95, -1516.02, 11.16), new mp.Vector3(1.001791e-5, -5.008937e-6, -144.925), false, false);
    object.create(-936729545, new mp.Vector3(-1152.6, -1523.22, 11.23657), new mp.Vector3(1.001789e-5, 5.008956e-6, 35.10036), false, false);
    object.create(1055533654, new mp.Vector3(-1151.98, -1521.43, 10.53337), new mp.Vector3(0, 0, 130), false, false);
    object.create(1978613345, new mp.Vector3(351.479, -996.0478, -100.1962), new mp.Vector3(0, 0, 0), false, false);
    object.create(1978613345, new mp.Vector3(350.53, -996.05, -100.1961), new mp.Vector3(0, 0, 0), false, false);
    object.create(951345131, new mp.Vector3(350.8078, -994.3985, -100.08), new mp.Vector3(1.001785e-5, 5.008955e-6, -132.5001), false, false);
    object.create(2057223314, new mp.Vector3(352.1311, -993.4043, -100.12), new mp.Vector3(0, 0, -36.99996), false, false);
    object.create(-978849650, new mp.Vector3(337.51, -996.68, -99.55), new mp.Vector3(0, 0, -90.00005), false, false);
    object.create(1881864012, new mp.Vector3(341.6673, -996.1204, -99.65), new mp.Vector3(0, 0, -62.99994), false, false);
    object.create(-807401144, new mp.Vector3(341.3907, -996.1807, -99.65697), new mp.Vector3(0, 0, 69.99995), false, false);
    object.create(470212711, new mp.Vector3(341.99, -1004.06, -99.21622), new mp.Vector3(0, 0, 54.99997), false, false);
    object.create(-331509782, new mp.Vector3(342.3735, -1004.137, -99.16), new mp.Vector3(0, 0, 29.99999), false, false);
    object.create(1319392426, new mp.Vector3(342.251, -1004.089, -99.16), new mp.Vector3(0, 0, 104.9999), false, false);
    object.create(-2037843699, new mp.Vector3(341.6503, -1003.813, -99.16), new mp.Vector3(0, 0, 104.9999), false, false);
    object.create(477649989, new mp.Vector3(342.39, -1003.78, -99.21622), new mp.Vector3(1.001788e-5, -5.008956e-6, -179.4498), false, false);
    object.create(-1798470109, new mp.Vector3(348.42, -1008.1, -100.1962), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(-1798470109, new mp.Vector3(348.4201, -1008.94, -100.1962), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(272198484, new mp.Vector3(345.46, -1005.144, -99.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(771604073, new mp.Vector3(346.93, -1005.52, -97.15), new mp.Vector3(0, 0, 0), false, false);
    object.create(771604073, new mp.Vector3(346.93, -1009.744, -97.15), new mp.Vector3(0, 0, 0), false, false);
    object.create(-177480482, new mp.Vector3(347.3902, -1013.303, -98.77215), new mp.Vector3(5.97114e-13, -5.008956e-6, 89.99999), false, false);
    object.create(1088184978, new mp.Vector3(345.3377, -1012.622, -98.65386), new mp.Vector3(5.008955e-6, -5.008955e-6, 89.99999), false, false);
    object.create(-1071622219, new mp.Vector3(345.34, -1007.8, -98.65282), new mp.Vector3(5.97114e-13, -5.008956e-6, 89.99999), false, false);
    object.create(-832900054, new mp.Vector3(345.34, -1011, -98.65), new mp.Vector3(5.97114e-13, -5.008956e-6, 89.99999), false, false);
    object.create(-1652016145, new mp.Vector3(348.43, -1011.06, -98.63), new mp.Vector3(0, 0, -90.09969), false, false);
    object.create(630784631, new mp.Vector3(348.43, -1004.65, -98.59199), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(2057317573, new mp.Vector3(347.9342, -1011.429, -100.22), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(-1168018231, new mp.Vector3(347.8788, -1012.827, -100.1962), new mp.Vector3(0, 0, -154.8995), false, false);
    object.create(1430014549, new mp.Vector3(348.04, -1003.55, -100.21), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(-1246711311, new mp.Vector3(352.7462, -992.9322, -100.1962), new mp.Vector3(0, 0, -79.99947), false, false);
    object.create(-2044627725, new mp.Vector3(343.22, -994, -99.71), new mp.Vector3(0, 0, 74.99995), false, false);
    object.create(-1328202619, new mp.Vector3(348.0154, -1002.648, -100.1962), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1769322543, new mp.Vector3(348.7386, -995.0312, -99.43916), new mp.Vector3(0, 0, 21.89992), false, false);
    object.create(-132789682, new mp.Vector3(345.34, -1004.952, -99.14), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1128082619, new mp.Vector3(345.34, -1005.14, -100.1608), new mp.Vector3(5.97114e-13, -5.008956e-6, 89.99999), false, false);
    object.create(-1246711311, new mp.Vector3(345.5981, -1003.534, -100.1962), new mp.Vector3(0, 0, 64.99996), false, false);
    object.create(148141454, new mp.Vector3(345.5916, -1005.927, -99.18), new mp.Vector3(0, 0, 91.99981), false, false);
    object.create(-2042781782, new mp.Vector3(345.579, -1005.319, -99.21079), new mp.Vector3(0, 0, 124.9998), false, false);
    object.create(2065988552, new mp.Vector3(348.2234, -1011.858, -100.12), new mp.Vector3(1.00179e-5, -5.008957e-6, -71.74982), false, false);
    object.create(-1309218480, new mp.Vector3(348.2051, -1011.67, -100.11), new mp.Vector3(0, 0, -87.99986), false, false);
    object.create(210172640, new mp.Vector3(345.4342, -1012.471, -98.74), new mp.Vector3(89.99975, 9.806018e-5, 94.99948), false, false);
    object.create(-1884999004, new mp.Vector3(343.0679, -998.2321, -99.97), new mp.Vector3(0, 0, 0), false, false);
    object.create(-72000249, new mp.Vector3(348.6631, -1008.486, -97.68), new mp.Vector3(0, 0, -64.99994), false, false);
    object.create(-1448658708, new mp.Vector3(348.6542, -1007.966, -97.68), new mp.Vector3(0, 0, -91.99983), false, false);
    object.create(101151147, new mp.Vector3(348.6319, -1008.19, -97.51), new mp.Vector3(0, 0, -92.99992), false, false);
    object.create(-1394619048, new mp.Vector3(348.2381, -1011.303, -100.14), new mp.Vector3(0, 0, -101.9999), false, false);
    object.create(1033236166, new mp.Vector3(348.224, -1011.469, -100.14), new mp.Vector3(0, 0, -87.99986), false, false);
    object.create(-1989035681, new mp.Vector3(350.644, -999.722, -99.2), new mp.Vector3(0, 0, -166.0001), false, false);
    object.create(-364924791, new mp.Vector3(339.4279, -1003.846, -99.27671), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1209872975, new mp.Vector3(348.7676, -1007.454, -97.58), new mp.Vector3(0, 0, -15.99999), false, false);
    object.create(588223318, new mp.Vector3(345.6012, -1006.374, -100.1962), new mp.Vector3(0, 0, 173.0002), false, false);
    object.create(-331509782, new mp.Vector3(339.3438, -995.3307, -99.65813), new mp.Vector3(0, 0, 14.99998), false, false);
    object.create(-331509782, new mp.Vector3(339.5025, -995.2882, -99.65813), new mp.Vector3(0, 0, 144.9998), false, false);
    object.create(363356512, new mp.Vector3(345.4516, -1005.629, -99.21079), new mp.Vector3(0, 0, 109.9999), false, false);
    object.create(-461858403, new mp.Vector3(345.5121, -1004.562, -99.21079), new mp.Vector3(0, 0, -91.99986), false, false);
    object.create(1801244118, new mp.Vector3(348.7578, -1006.694, -97.76593), new mp.Vector3(0, 0, -70.99992), false, false);
    object.create(-1540767983, new mp.Vector3(351.9503, -999.8756, -99.25986), new mp.Vector3(0, 0, 2.599953), false, false);
    object.create(495599970, new mp.Vector3(-112.536461, -6.41405773, 70.51991), new mp.Vector3(0, -0, -109.999557), false, false);
    object.create(495599970, new mp.Vector3(-111.02121, -5.462713, 70.4168243), new mp.Vector3(0, -0, 159.999084), false, false);
    object.create(-1589780889, new mp.Vector3(-114.202827, -9.549278, 70.43908), new mp.Vector3(0, -0, -108.999413), false, false);
    object.create(338622326, new mp.Vector3(-114.405304, -10.6171732, 71.15), new mp.Vector3(0, -0, -109.999588), false, false);
    object.create(-1574447115, new mp.Vector3(-112.947479, -11.0511112, 69.9435959), new mp.Vector3(0, 0, 0), false, false);
    object.create(-832246005, new mp.Vector3(-112.73793, -10.3344507, 69.51959), new mp.Vector3(0, 0, 63.9997444), false, false);
    object.create(-116675177, new mp.Vector3(-113.98, -10.9, 69.51959), new mp.Vector3(-20.0100155, -0.0199945234, 74.99979), false, false);
    object.create(-1354005816, new mp.Vector3(-114.1377, -12.6270189, 70.87407), new mp.Vector3(0, -0, 120.999268), false, false);
    object.create(305134324, new mp.Vector3(-1907.8, -578.276, 21.39), new mp.Vector3(1.001791e-5, 5.008955e-6, 139.9997), false, false);
    object.create(305134324, new mp.Vector3(-1909.37, -576.962, 21.39), new mp.Vector3(1.001791e-5, 5.008955e-6, 139.9997), false, false);
    object.create(305134324, new mp.Vector3(-1907.65, -578.4019, 18.11), new mp.Vector3(-179.9992, 6.329298e-5, -40.00055), false, false);
    object.create(305134324, new mp.Vector3(-1909.334, -576.9925, 18.11), new mp.Vector3(-179.9992, 6.329298e-5, -40.00055), false, false);
    object.create(995767216, new mp.Vector3(-1908.77, -571.72, 19.36278), new mp.Vector3(5.008957e-6, 2.23118e-5, 50.05069), false, false);
    object.create(-818999775, new mp.Vector3(-1904.02, -576.59, 18.16), new mp.Vector3(1.001791e-5, 5.008957e-6, 49.34977), false, false);
    object.create(-818999775, new mp.Vector3(-1913.315, -573.4702, 18.16), new mp.Vector3(1.001788e-5, 5.008955e-6, -39.98), false, false);
    object.create(-818999775, new mp.Vector3(-1909.251, -572.0416, 18.16), new mp.Vector3(1.00179e-5, -5.008956e-6, 50.02476), false, false);
    object.create(-818999775, new mp.Vector3(-1913.315, -573.4702, 19.15), new mp.Vector3(1.001788e-5, 5.008953e-6, -39.98), false, false);
    object.create(-818999775, new mp.Vector3(-1913.315, -573.4702, 20.11), new mp.Vector3(1.001766e-5, -5.008956e-6, -39.97998), false, false);
    object.create(-818999775, new mp.Vector3(-1913.315, -573.4702, 21.07), new mp.Vector3(1.001788e-5, 5.008951e-6, -39.97998), false, false);
    object.create(-818999775, new mp.Vector3(-1909.447, -571.8397, 18.03), new mp.Vector3(89.99982, 8.3681e-5, 50.02473), false, false);
    object.create(-1272174018, new mp.Vector3(-1905.48, -571.6273, 18.09), new mp.Vector3(0, 0, 49.99987), false, false);
    object.create(-457079481, new mp.Vector3(-1900.15, -572.05, 18.64), new mp.Vector3(1.001791e-5, -5.008956e-6, -130.1745), false, false);
    object.create(1821439213, new mp.Vector3(-1909.87, -573.74, 18.09722), new mp.Vector3(0, 0, 50.19994), false, false);
    object.create(-818999775, new mp.Vector3(-1909.4, -572.2203, 19.15), new mp.Vector3(1.00179e-5, -5.008956e-6, 50.02476), false, false);
    object.create(-818999775, new mp.Vector3(-1909.4, -572.2203, 20.11), new mp.Vector3(1.00179e-5, -5.008956e-6, 50.02476), false, false);
    object.create(-818999775, new mp.Vector3(-1909.4, -572.2203, 21.07), new mp.Vector3(1.00179e-5, -5.008956e-6, 50.02476), false, false);
    object.create(844145437, new mp.Vector3(-1910.7, -574.58, 18.09), new mp.Vector3(1.001789e-5, -5.008955e-6, 50.04988), false, false);
    object.create(1280564504, new mp.Vector3(-1908.84, -572.5419, 18.09722), new mp.Vector3(0, 0, -40.59982), false, false);
    object.create(337341755, new mp.Vector3(-1910.6, -575.5513, 19.1287), new mp.Vector3(1.001791e-5, 5.008956e-6, 139.4494), false, false);
    object.create(1653123003, new mp.Vector3(-1910.99, -574.5499, 19.1), new mp.Vector3(1.001788e-5, -5.008955e-6, 35.25011), false, false);
    object.create(1306960905, new mp.Vector3(-1909.986, -573.741, 20.02614), new mp.Vector3(0, 0, 43.29955), false, false);
    object.create(-1599176945, new mp.Vector3(-1911.207, -574.8524, 19.14723), new mp.Vector3(3.358666e-12, 5.008956e-6, 100.1998), false, false);
    object.create(-729631922, new mp.Vector3(-1910.933, -575.1719, 19.05), new mp.Vector3(1.00179e-5, -5.008956e-6, 50.24991), false, false);
    object.create(-1798470109, new mp.Vector3(-1903.247, -574.6788, 18.07), new mp.Vector3(1.00179e-5, -5.008956e-6, -129.8744), false, false);
    object.create(1065897083, new mp.Vector3(-1902.058, -573.7245, 20.72), new mp.Vector3(1.001791e-5, 5.008954e-6, -123.3742), false, false);
    object.create(743808545, new mp.Vector3(-1901.408, -573.1047, 18.09722), new mp.Vector3(0, 0, 0), false, false);
    object.create(-818999775, new mp.Vector3(-1904.02, -576.59, 19.11), new mp.Vector3(1.001791e-5, 5.008956e-6, 49.34977), false, false);
    object.create(-818999775, new mp.Vector3(-1904.02, -576.59, 20.11), new mp.Vector3(1.001791e-5, 5.008956e-6, 49.34976), false, false);
    object.create(-818999775, new mp.Vector3(-1904.02, -576.59, 21.05), new mp.Vector3(1.001791e-5, 5.008956e-6, 49.34976), false, false);
    object.create(-930879665, new mp.Vector3(-1903.394, -569.7363, 18.09722), new mp.Vector3(1.001791e-5, -5.008957e-6, 49.74997), false, false);
    object.create(149803107, new mp.Vector3(-1903.768, -570.2811, 18.94634), new mp.Vector3(0, 0, 138.7995), false, false);
    object.create(-525238304, new mp.Vector3(-1900.654, -570.3257, 18.835), new mp.Vector3(1.001789e-5, 5.008955e-6, -40.47509), false, false);
    object.create(-776790914, new mp.Vector3(-1902.256, -569.5278, 18.09722), new mp.Vector3(-2.035555e-13, -5.008956e-6, 50.04987), false, false);
    object.create(-1769322543, new mp.Vector3(-1904.104, -570.5959, 19.09), new mp.Vector3(0, 0, -69.99995), false, false);
    object.create(-1573870288, new mp.Vector3(-1904.73, -577.15, 19.98561), new mp.Vector3(0, 0, -130.6996), false, false);
    object.create(305134324, new mp.Vector3(-1903.04, -568.8363, 21.41), new mp.Vector3(1.001791e-5, 5.008956e-6, 49.89978), false, false);
    object.create(305134324, new mp.Vector3(-1903.074, -568.8759, 18.07), new mp.Vector3(179.9987, 7.695339e-5, -130.0999), false, false);
    object.create(-1153697806, new mp.Vector3(-1900.709, -572.3538, 19.5), new mp.Vector3(0, 0, -29.99992), false, false);
    object.create(38324630, new mp.Vector3(-1901.62, -569.4929, 19.14865), new mp.Vector3(0, 0, -40.49989), false, false);
    object.create(-1982055048, new mp.Vector3(-1900.037, -571.503, 19.36), new mp.Vector3(0, 0, -127.9999), false, false);
    object.create(1802385057, new mp.Vector3(-1903.01, -570.8636, 19.91444), new mp.Vector3(1.00179e-5, -5.008956e-6, 140.0244), false, false);
    object.create(1877774432, new mp.Vector3(-1906.359, -575.8076, 18.5), new mp.Vector3(1.00179e-5, -5.008955e-6, -26.75), false, false);
    object.create(130107121, new mp.Vector3(-1910.647, -574.7061, 19.11), new mp.Vector3(0.09796228, -1.724208, -98.21802), false, false);
    object.create(-251167274, new mp.Vector3(-1909.26, -572.16, 19.4), new mp.Vector3(1.001791e-5, -5.008955e-6, 50.07491), false, false);
    object.create(736919402, new mp.Vector3(-1907.792, -574.6634, 18.09722), new mp.Vector3(0, 0, 0), false, false);
    object.create(-752703361, new mp.Vector3(-855.07, 670.5842, 151.951309), new mp.Vector3(0, -0, -174.0009), false, false);
    object.create(-752703361, new mp.Vector3(-855, 670.48, 148.34), new mp.Vector3(0, -0, -176.999), false, false);
    object.create(-1865248041, new mp.Vector3(-849.8783, 672.206, 149.809677), new mp.Vector3(0, 0, -86.99977), false, false);
    object.create(-1865248041, new mp.Vector3(-849.9297, 672.9676, 149.807266), new mp.Vector3(0, 0, -86.99977), false, false);
    object.create(-1568983512, new mp.Vector3(-850.66, 681.82, 153.33), new mp.Vector3(0, 0, -89.9996948), false, false);
    object.create(-1568983512, new mp.Vector3(-850.55, 679.77, 153.309357), new mp.Vector3(0, 0, -89.9996948), false, false);
    object.create(-1865248041, new mp.Vector3(-850.63, 681.123047, 153.331177), new mp.Vector3(0, 0, -88.99972), false, false);
    object.create(-1865248041, new mp.Vector3(-850.6, 680.4132, 153.3073), new mp.Vector3(0, 0, -88.9997253), false, false);
    object.create(1336644224, new mp.Vector3(-855.0001, 670.64856, 153.000824), new mp.Vector3(0, -0, -172.998779), false, false);
    object.create(-409840349, new mp.Vector3(-851.14, 688.65, 153.31), new mp.Vector3(0, 0, -85.99974), false, false);
    object.create(-1713129017, new mp.Vector3(-854.64624, 670.848267, 149.380508), new mp.Vector3(0, -0, -175.99881), false, false);
    object.create(-984871726, new mp.Vector3(-899.068542, -423.418823, 94.77063), new mp.Vector3(0, -0, -153.100479), false, false);
    object.create(-752703361, new mp.Vector3(-907.43, -427.27, 95.35), new mp.Vector3(-4.46236045e-5, 2.23117986e-5, 27.0000019), false, false);
    object.create(-752703361, new mp.Vector3(-888.62, -429.63, 93.57), new mp.Vector3(0, -0, 116.999466), false, false);
    object.create(495599970, new mp.Vector3(-886.114441, -435.292725, 94.31395), new mp.Vector3(0, -0, 115.299423), false, false);
    object.create(-752703361, new mp.Vector3(-889.03, -429.51, 90.33), new mp.Vector3(0, -0, 115.999474), false, false);
    object.create(495599970, new mp.Vector3(-885.97, -435.46, 89.85213), new mp.Vector3(0, -0, 119.999519), false, false);
    object.create(1336644224, new mp.Vector3(-897.721863, -422.970428, 94.92642), new mp.Vector3(0, 0, 26.0000153), false, false);
    object.create(-1865248041, new mp.Vector3(-885.72, -435.26, 94.65), new mp.Vector3(0, 0, -63.99985), false, false);
    object.create(-1568983512, new mp.Vector3(-885.76, -435.28, 89.87), new mp.Vector3(0, 0, -64.99983), false, false);
    object.create(-1867871609, new mp.Vector3(-886.26355, -435.5256, 93.0584946), new mp.Vector3(0, -0, 116.9193), false, false);
    object.create(1036195894, new mp.Vector3(-907.88385, -427.714233, 94.7611847), new mp.Vector3(0, 0, 27.9999485), false, false);
    object.create(-1964110779, new mp.Vector3(-906.17, -430.86, 93.44), new mp.Vector3(5.008955e-6, -5.00895567e-6, -154.999985), false, false);
    object.create(1036195894, new mp.Vector3(-888.88, -430.45, 90.11), new mp.Vector3(0, 0, -65.99977), false, false);
    object.create(924295337, new mp.Vector3(-889.01, -452.093628, 95.62), new mp.Vector3(0, 0, 25.8999424), false, false);
    object.create(924295337, new mp.Vector3(-889.12, -451.87, 95.62), new mp.Vector3(0, 0, 25.89994), false, false);
    object.create(-2030220382, new mp.Vector3(-888.67, -452.45, 95.56), new mp.Vector3(0, 0, -63.00005), false, false);
    object.create(174080689, new mp.Vector3(-884.864136, -451.7684, 96.30629), new mp.Vector3(0, -0, -150.000473), false, false);
    object.create(495599970, new mp.Vector3(-880.22, -446.97, 95.38), new mp.Vector3(0, -0, 116.99958), false, false);
    object.create(-1568983512, new mp.Vector3(-879.91, -446.81, 96.05149), new mp.Vector3(0, 0, -64.99988), false, false);
    object.create(2079702193, new mp.Vector3(-618.81, 38.49, 97.23), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-618.81, 38.49, 98.34), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-618.81, 38.49, 99.45), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-616.83, 38.49, 97.23), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-616.83, 38.49, 98.34), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-616.83, 38.49, 99.44), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-614.85, 38.49, 97.23), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-614.85, 38.49, 98.34), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-614.85, 38.49, 99.4), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-612.82, 38.49, 97.23), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-612.82, 38.49, 98.34), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-612.82, 38.49, 99.44), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-610.84, 38.49, 97.23), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-610.84, 38.49, 98.34), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-610.84, 38.49, 99.45), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-601.64, 40.12, 97.05), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-601.64, 40.12, 98.16), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-601.64, 40.12, 99.26), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-601.64, 40.12, 100.36), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-603.62, 40.12, 97.05), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-603.62, 40.12, 98.16), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-603.62, 40.12, 99.27), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-603.62, 40.12, 100.38), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-594.39, 46.37, 96.66), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-594.39, 46.37, 97.76), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-596.38, 46.37, 96.66), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-596.38, 46.37, 97.76), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-598.36, 46.37, 97.76), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(2079702193, new mp.Vector3(-598.36, 46.37, 96.66), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(995767216, new mp.Vector3(-610.11, 59.60147, 98.35), new mp.Vector3(5.97114e-13, -5.008956e-6, 89.99999), false, false);
    object.create(2079702193, new mp.Vector3(-789.22, 343.96, 186.7524), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-789.22, 343.96, 187.86), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-789.22, 343.96, 188.96), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-789.22, 343.96, 190.06), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-787.23, 343.96, 186.7524), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-787.23, 343.96, 187.86), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-787.23, 343.96, 188.96), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-787.23, 343.96, 190.07), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-785.25, 343.96, 186.7524), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-785.25, 343.96, 187.86), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-785.25, 343.96, 188.96), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-785.25, 343.96, 190.06), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-783.27, 343.96, 186.7524), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-783.27, 343.96, 187.86), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-783.27, 343.96, 188.96), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-783.27, 343.96, 190.06), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-781.29, 343.96, 186.7524), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-781.29, 343.96, 187.86), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-781.29, 343.96, 188.96), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-781.29, 343.96, 190.06), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-796.36, 340.38, 190.3449), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-796.36, 340.38, 191.45), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-798.34, 340.38, 190.3449), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-798.34, 340.38, 191.45), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-800.32, 340.38, 190.3449), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-800.32, 340.38, 191.43), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-800.32, 340.38, 192.2198), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-798.34, 340.38, 192.2), new mp.Vector3(0, 0, 0), false, false);
    object.create(2079702193, new mp.Vector3(-796.36, 340.38, 192.1448), new mp.Vector3(0, 0, 0), false, false);
    object.create(995767216, new mp.Vector3(-782.4499, 317.5269, 188.07), new mp.Vector3(0, 0, -179.9997), false, false);
    object.create(924295337, new mp.Vector3(236.02, -1357.44, 40.6), new mp.Vector3(5.008955e-6, 2.23117986e-5, -39.9999924), false, false);
    object.create(-573669520, new mp.Vector3(-489.0144, -1672.17908, 18.52), new mp.Vector3(0, 0, -45.99988), false, false);
    object.create(305924745, new mp.Vector3(-489.371277, -1676.3512, 21.87), new mp.Vector3(1.001791e-5, 5.00895567e-6, 40.00012), false, false);
    object.create(995767216, new mp.Vector3(-107.5804, -9.001458, 70.69231), new mp.Vector3(0, 0, -110.3997), false, false);
    object.create(995767216, new mp.Vector3(-107.52, -9.015, 70.67658), new mp.Vector3(0, 0, -110.3997), false, false);
    object.create(995767216, new mp.Vector3(1273.84, -1720.75, 54.91), new mp.Vector3(-2.035555e-13, 5.008956e-6, -155.0993), false, false);
    object.create(995767216, new mp.Vector3(1273.78, -1720.6, 54.93), new mp.Vector3(-2.035555e-13, 5.008956e-6, -155.0993), false, false);
    object.create(995767216, new mp.Vector3(-1149.707, -1521.093, 10.79995), new mp.Vector3(0, 0, 34.69987), false, false);
    object.create(995767216, new mp.Vector3(-1149.653, -1521.17, 10.79), new mp.Vector3(1.001791e-5, -5.008956e-6, 34.92488), false, false);
    object.create(-1527269738, new mp.Vector3(1089.24, -3103.26, -39.99993), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(-1339628889, new mp.Vector3(1087.18, -3100.59, -38.52549), new mp.Vector3(1.00179e-5, 5.008961e-6, 89.99973), false, false);
    object.create(307713837, new mp.Vector3(1088.7, -3096.809, -37.69), new mp.Vector3(1.001791e-5, 5.008955e-6, -8.000002), false, false);
    object.create(307713837, new mp.Vector3(1097.579, -3096.691, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(307713837, new mp.Vector3(1101.3, -3096.809, -37.79142), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1322183878, new mp.Vector3(1091.349, -3096.885, -39.99993), new mp.Vector3(0, -5.008956e-6, -5.008956e-6), false, false);
    object.create(307713837, new mp.Vector3(1091.325, -3096.676, -37.72), new mp.Vector3(1.00179e-5, 5.008958e-6, 89.99984), false, false);
    object.create(1366469466, new mp.Vector3(1088.743, -3096.747, -39.99993), new mp.Vector3(2.564906e-12, -5.008952e-6, 89.99995), false, false);
    object.create(1366469466, new mp.Vector3(1101.301, -3096.852, -39.99993), new mp.Vector3(3.732026e-12, -5.008951e-6, 89.99993), false, false);
    object.create(307713837, new mp.Vector3(1097.602, -3096.486, -37.73), new mp.Vector3(1.001789e-5, 5.008957e-6, 89.9998), false, false);
    object.create(-1322183878, new mp.Vector3(1095.075, -3096.443, -37.79142), new mp.Vector3(4.751427e-13, -5.008956e-6, 89.99993), false, false);
    object.create(-1659828682, new mp.Vector3(1088.72, -3097.63, -39.28), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1659828682, new mp.Vector3(1101.31, -3097.73, -39.28), new mp.Vector3(0, 0, 0), false, false);
    object.create(307713837, new mp.Vector3(1095.115, -3096.592, -39.99993), new mp.Vector3(0, 0, 79.99992), false, false);
    object.create(-1322183878, new mp.Vector3(1103.723, -3096.503, -39.99993), new mp.Vector3(6.615553e-13, -5.008956e-6, 97.89964), false, false);
    object.create(-1322183878, new mp.Vector3(1103.894, -3096.706, -37.79142), new mp.Vector3(5.088887e-14, -5.008956e-6, 175.9997), false, false);
    object.create(904554844, new mp.Vector3(1097.508, -3103.016, -39.99993), new mp.Vector3(2.564906e-12, -5.008952e-6, 89.99995), false, false);
    object.create(-866263921, new mp.Vector3(1094.271, -3103.129, -40), new mp.Vector3(0, 0, 164.9995), false, false);
    object.create(2057223314, new mp.Vector3(1094.211, -3103.156, -39.05), new mp.Vector3(0, 0, 145), false, false);
    object.create(-173206916, new mp.Vector3(1087.654, -3102.598, -36.13), new mp.Vector3(0, 0, 114.0003), false, false);
    object.create(-1567349688, new mp.Vector3(1087.679, -3100.922, -39.19), new mp.Vector3(0, 0, 119.9999), false, false);
    object.create(-1603796423, new mp.Vector3(1087.797, -3100.55, -39.19), new mp.Vector3(0, 0, 84.99994), false, false);
    object.create(-368490772, new mp.Vector3(1101.201, -3103.045, -39.91068), new mp.Vector3(0, 0, 0), false, false);
    object.create(-368490772, new mp.Vector3(1103.946, -3103.076, -39.25754), new mp.Vector3(0, 0, 0), false, false);
    object.create(1138027619, new mp.Vector3(1101.167, -3103.151, -37.85), new mp.Vector3(0, 0, -3.999999), false, false);
    object.create(258835349, new mp.Vector3(1104.454, -3103.034, -37.95), new mp.Vector3(0, 0, -0.5999998), false, false);
    object.create(-475360078, new mp.Vector3(1100.252, -3103.072, -39.25754), new mp.Vector3(0, 0, -13.99999), false, false);
    object.create(-1515940233, new mp.Vector3(1100.287, -3103.066, -38.13803), new mp.Vector3(0, 0, -89.99993), false, false);
    object.create(1778631864, new mp.Vector3(1103.198, -3103.055, -38.68057), new mp.Vector3(0, 0, -64.99992), false, false);
    object.create(1778631864, new mp.Vector3(1103.93, -3103.098, -38.68057), new mp.Vector3(0, 0, -129.9996), false, false);
    object.create(1903701366, new mp.Vector3(1102.026, -3103.042, -38.68057), new mp.Vector3(0, 0, 14.99991), false, false);
    object.create(-2031321722, new mp.Vector3(1100.154, -3103, -38.68057), new mp.Vector3(0, 0, -34.99998), false, false);
    object.create(-2031321722, new mp.Vector3(1100.634, -3102.981, -38.68057), new mp.Vector3(0, 0, -4.999988), false, false);
    object.create(-1982036471, new mp.Vector3(1087.639, -3101.977, -39.11), new mp.Vector3(0, 0, 0), false, false);
    object.create(322272667, new mp.Vector3(1103.721, -3103.006, -39.67), new mp.Vector3(0, 0, 24.99999), false, false);
    object.create(-597454856, new mp.Vector3(1102.884, -3102.815, -39.76), new mp.Vector3(0, 0, 0), false, false);
    object.create(1032540746, new mp.Vector3(1103.057, -3103.185, -39.75), new mp.Vector3(0, 0, 0), false, false);
    object.create(-405100826, new mp.Vector3(1103.246, -3102.896, -39.81), new mp.Vector3(0, 0, 0), false, false);
    object.create(1749718958, new mp.Vector3(1103.372, -3103.039, -39.85), new mp.Vector3(0, 0, 0), false, false);
    object.create(214384272, new mp.Vector3(1093.088, -3096.386, -39.99993), new mp.Vector3(0, 0, -164.9998), false, false);
    object.create(1316995584, new mp.Vector3(1099.519, -3096.51, -39.99993), new mp.Vector3(0, 0, -18.99998), false, false);
    object.create(1792999139, new mp.Vector3(1099.292, -3102.844, -39.99993), new mp.Vector3(0, 0, 12.00007), false, false);
    object.create(1088184978, new mp.Vector3(1093.27, -3103.14, -38.19991), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(-1673752417, new mp.Vector3(1091.48, -3102.969, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1538231930, new mp.Vector3(1088.19, -3103.28, -39.99993), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(-347947133, new mp.Vector3(1088.53, -3103.07, -38.48), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1306960905, new mp.Vector3(1088.223, -3103.346, -38.14449), new mp.Vector3(0, 0, 163.699), false, false);
    object.create(1862110545, new mp.Vector3(1089.536, -3103.299, -39.69), new mp.Vector3(0, 0, 42.9999), false, false);
    object.create(2094167240, new mp.Vector3(1088.948, -3103.305, -39.45), new mp.Vector3(0, 0, 0), false, false);
    object.create(1120955680, new mp.Vector3(1089.7, -3103.09, -39.13), new mp.Vector3(0, 0, -31.99993), false, false);
    object.create(-835359795, new mp.Vector3(1088.912, -3103.224, -39.84826), new mp.Vector3(0, 0, 165.5995), false, false);
    object.create(-341442425, new mp.Vector3(1087.563, -3103.167, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(2109346928, new mp.Vector3(1087.674, -3101.448, -39.20049), new mp.Vector3(0, 0, 99.99968), false, false);
    object.create(2057317573, new mp.Vector3(1091.448, -3101.881, -39.99993), new mp.Vector3(0, 0, 5.699979), false, false);
    object.create(-1515940233, new mp.Vector3(1095.211, -3103.076, -39.99993), new mp.Vector3(0, 0, -120.9998), false, false);
    object.create(1903701366, new mp.Vector3(1096.04, -3103.255, -39.99993), new mp.Vector3(0, 0, 34.9999), false, false);
    object.create(-1780563953, new mp.Vector3(1089.173, -3101.002, -39.4), new mp.Vector3(0, 0, -71.99994), false, false);
    object.create(-1659828682, new mp.Vector3(1105.48, -3101.39, -38.85227), new mp.Vector3(-5.97114e-13, -5.008956e-6, -89.99999), false, false);
    object.create(1243328051, new mp.Vector3(1062.687, -3109.857, -39.99993), new mp.Vector3(0, 0, -168.9998), false, false);
    object.create(307713837, new mp.Vector3(1065.095, -3109.862, -39.99993), new mp.Vector3(0, 0, 162.0004), false, false);
    object.create(1243328051, new mp.Vector3(1062.579, -3109.81, -37.79138), new mp.Vector3(1.001791e-5, -5.008956e-6, 159.7501), false, false);
    object.create(307713837, new mp.Vector3(1060.308, -3110.133, -39.99993), new mp.Vector3(0, 0, -173.9994), false, false);
    object.create(307713837, new mp.Vector3(1057.907, -3110.099, -39.99993), new mp.Vector3(0, 0, 84.00008), false, false);
    object.create(307713837, new mp.Vector3(1055.393, -3110.046, -39.99993), new mp.Vector3(0, 0, -103.9993), false, false);
    object.create(307713837, new mp.Vector3(1052.943, -3109.965, -39.99993), new mp.Vector3(0, 0, 173.0005), false, false);
    object.create(307713837, new mp.Vector3(1052.958, -3109.616, -37.7), new mp.Vector3(0, 0, 173.0005), false, false);
    object.create(1243328051, new mp.Vector3(1055.52, -3109.709, -37.79138), new mp.Vector3(1.00179e-5, -5.008955e-6, 178.7502), false, false);
    object.create(307713837, new mp.Vector3(1057.92, -3109.685, -37.72), new mp.Vector3(0, 0, -87.9998), false, false);
    object.create(1243328051, new mp.Vector3(1060.399, -3109.63, -37.79138), new mp.Vector3(1.00179e-5, -5.008955e-6, -174.2498), false, false);
    object.create(307713837, new mp.Vector3(1065.141, -3109.631, -37.7), new mp.Vector3(0, 0, 177.6004), false, false);
    object.create(1243328051, new mp.Vector3(1067.593, -3109.749, -37.79138), new mp.Vector3(1.00179e-5, -5.008955e-6, -178.2499), false, false);
    object.create(307713837, new mp.Vector3(1067.663, -3102.706, -39.99993), new mp.Vector3(0, 0, 100.0002), false, false);
    object.create(307713837, new mp.Vector3(1065.173, -3102.654, -39.99993), new mp.Vector3(0, 0, 70.00019), false, false);
    object.create(307713837, new mp.Vector3(1065.245, -3102.631, -37.7), new mp.Vector3(0, 0, 178.9995), false, false);
    object.create(1243328051, new mp.Vector3(1067.451, -3102.386, -37.79138), new mp.Vector3(1.00179e-5, -5.008956e-6, 151.75), false, false);
    object.create(1243328051, new mp.Vector3(1062.704, -3102.531, -39.99993), new mp.Vector3(1.00179e-5, -5.008952e-6, -172.25), false, false);
    object.create(1243328051, new mp.Vector3(1060.31, -3102.64, -39.99993), new mp.Vector3(1.00179e-5, -5.008944e-6, -11.25009), false, false);
    object.create(1243328051, new mp.Vector3(1057.864, -3102.548, -39.99993), new mp.Vector3(1.001789e-5, -5.008944e-6, 8.749881), false, false);
    object.create(307713837, new mp.Vector3(1062.728, -3102.53, -37.72), new mp.Vector3(0, 0, -90.8003), false, false);
    object.create(307713837, new mp.Vector3(1060.294, -3102.505, -37.7), new mp.Vector3(0, 0, -175.8), false, false);
    object.create(307713837, new mp.Vector3(1057.911, -3102.406, -37.71), new mp.Vector3(1.00179e-5, 5.008956e-6, 171.6998), false, false);
    object.create(1243328051, new mp.Vector3(1055.525, -3102.343, -37.79138), new mp.Vector3(1.001788e-5, -5.008944e-6, -179.2502), false, false);
    object.create(307713837, new mp.Vector3(1053.119, -3102.71, -39.99993), new mp.Vector3(1.00179e-5, 5.008954e-6, 94.69971), false, false);
    object.create(307713837, new mp.Vector3(1055.395, -3102.677, -39.99993), new mp.Vector3(1.00179e-5, 5.008951e-6, 68.69967), false, false);
    object.create(307713837, new mp.Vector3(1053.132, -3102.513, -37.7), new mp.Vector3(1.001791e-5, 5.008952e-6, 0.6996304), false, false);
    object.create(307713837, new mp.Vector3(1053.169, -3095.453, -37.71), new mp.Vector3(1.00179e-5, 5.008951e-6, -2.300359), false, false);
    object.create(1243328051, new mp.Vector3(1053.228, -3095.548, -39.99993), new mp.Vector3(1.001789e-5, -5.008943e-6, -11.25011), false, false);
    object.create(1243328051, new mp.Vector3(1055.521, -3095.527, -39.99993), new mp.Vector3(1.001789e-5, -5.008939e-6, 1.749851), false, false);
    object.create(1243328051, new mp.Vector3(1062.834, -3095.502, -39.99993), new mp.Vector3(1.001789e-5, -5.008933e-6, -15.25014), false, false);
    object.create(1243328051, new mp.Vector3(1062.8, -3095.544, -37.79138), new mp.Vector3(1.001789e-5, -5.008932e-6, -7.250135), false, false);
    object.create(1243328051, new mp.Vector3(1060.277, -3095.574, -37.79138), new mp.Vector3(1.001789e-5, -5.008931e-6, 2.749866), false, false);
    object.create(307713837, new mp.Vector3(1055.519, -3095.532, -37.71), new mp.Vector3(1.00179e-5, 5.008956e-6, 12.69965), false, false);
    object.create(307713837, new mp.Vector3(1057.984, -3095.433, -37.71), new mp.Vector3(1.001789e-5, -5.008955e-6, -3.550354), false, false);
    object.create(307713837, new mp.Vector3(1065.162, -3095.476, -37.73), new mp.Vector3(1.001786e-5, 5.008952e-6, -89.80033), false, false);
    object.create(307713837, new mp.Vector3(1067.655, -3095.549, -37.7), new mp.Vector3(1.001783e-5, -5.008956e-6, 3.949702), false, false);
    object.create(307713837, new mp.Vector3(1065.272, -3095.522, -39.99993), new mp.Vector3(1.001786e-5, 5.008947e-6, -72.80013), false, false);
    object.create(307713837, new mp.Vector3(1060.416, -3095.325, -39.99993), new mp.Vector3(1.001786e-5, 5.008946e-6, -100.8), false, false);
    object.create(307713837, new mp.Vector3(1057.999, -3095.465, -39.99993), new mp.Vector3(1.001786e-5, 5.008941e-6, -81.7999), false, false);
    object.create(-968395721, new mp.Vector3(1072.323, -3110.068, -39.99993), new mp.Vector3(0, 0, -89.39967), false, false);
    object.create(1618060855, new mp.Vector3(1071.057, -3108.607, -39.99993), new mp.Vector3(0, 0, -88.99973), false, false);
    object.create(-1818341338, new mp.Vector3(1070.29, -3095.072, -39.47493), new mp.Vector3(0, 0, -90.29973), false, false);
    object.create(-573669520, new mp.Vector3(1048.454, -3110.125, -39.99993), new mp.Vector3(0, 0, 96.9997), false, false);
    object.create(904554844, new mp.Vector3(1048.262, -3103.496, -39.99993), new mp.Vector3(0, 0, 179.6997), false, false);
    object.create(386283738, new mp.Vector3(1070.964, -3108.422, -39.54991), new mp.Vector3(0, 0, 25.99999), false, false);
    object.create(-1122944124, new mp.Vector3(1071.038, -3108.58, -39.54991), new mp.Vector3(0, 0, 25.99998), false, false);
    object.create(-1321253704, new mp.Vector3(1070.892, -3108.995, -39.54991), new mp.Vector3(0, 0, -64.99995), false, false);
    object.create(-1321253704, new mp.Vector3(1070.825, -3108.893, -39.54991), new mp.Vector3(0, 0, 30.00007), false, false);
    object.create(996113921, new mp.Vector3(1071.013, -3108.863, -39.53), new mp.Vector3(0, 0, 0), false, false);
    object.create(2057223314, new mp.Vector3(1070.795, -3108.14, -39.47), new mp.Vector3(0, 0, 63.99995), false, false);
    object.create(-1769322543, new mp.Vector3(1048.347, -3100.874, -39.19999), new mp.Vector3(0, 0, 96.99965), false, false);
    object.create(-286280212, new mp.Vector3(1048.504, -3100.528, -39.19999), new mp.Vector3(0, 0, 78.99998), false, false);
    object.create(144995201, new mp.Vector3(1048.347, -3101.534, -39.19999), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(144995201, new mp.Vector3(1048.487, -3101.461, -39.19999), new mp.Vector3(0, 0, 25.00002), false, false);
    object.create(144995201, new mp.Vector3(1048.462, -3101.58, -39.19999), new mp.Vector3(0, 0, -14.99998), false, false);
    object.create(1792999139, new mp.Vector3(1048.199, -3102.213, -39.99993), new mp.Vector3(0, 0, 0.6000003), false, false);
    object.create(637672069, new mp.Vector3(1049.714, -3100.934, -39.41), new mp.Vector3(0, 0, -92.99973), false, false);
    object.create(1610244484, new mp.Vector3(1051.285, -3094.238, -39.02), new mp.Vector3(0, 0, 0), false, false);
    object.create(1684327795, new mp.Vector3(1051.76, -3094.54, -38.52794), new mp.Vector3(1.045535e-5, 7.695331e-5, 0.5248131), false, false);
    object.create(-1527269738, new mp.Vector3(1048.47, -3094.09, -40.01), new mp.Vector3(0, 0, 0), false, false);
    object.create(-483631019, new mp.Vector3(1049.964, -3094.106, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(1796594030, new mp.Vector3(1050.498, -3094.031, -38.95), new mp.Vector3(0, 0, -17.99998), false, false);
    object.create(477649989, new mp.Vector3(1049.735, -3094.2, -39.08774), new mp.Vector3(0, 0, 13.99999), false, false);
    object.create(1763868376, new mp.Vector3(1049.232, -3093.957, -39.08774), new mp.Vector3(0, 0, 15.99999), false, false);
    object.create(1453189379, new mp.Vector3(1050.145, -3093.87, -39.08774), new mp.Vector3(0, 0, -30.99998), false, false);
    object.create(1777646892, new mp.Vector3(1050.035, -3093.824, -39.08774), new mp.Vector3(0, 0, 34.99998), false, false);
    object.create(-22826474, new mp.Vector3(1050.05, -3093.95, -39.08774), new mp.Vector3(0, 0, 0), false, false);
    object.create(-1798470109, new mp.Vector3(1072.79, -3096.11, -40.06), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(-1211954574, new mp.Vector3(1072.993, -3097.433, -39.31), new mp.Vector3(0, 0, -109.9997), false, false);
    object.create(900603612, new mp.Vector3(1048.739, -3095.263, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(-475360078, new mp.Vector3(1073.119, -3097.461, -39.99993), new mp.Vector3(0, 0, 0), false, false);
    object.create(900603612, new mp.Vector3(1072.104, -3096.013, -39.99993), new mp.Vector3(0, 0, 87.99983), false, false);
    object.create(1366469466, new mp.Vector3(1067.606, -3095.134, -39.99993), new mp.Vector3(1.384231e-12, -5.008955e-6, 89.99998), false, false);
    object.create(1366469466, new mp.Vector3(1067.547, -3110.228, -39.99993), new mp.Vector3(5.00895e-6, -5.008956e-6, -89.99998), false, false);
    object.create(1321190118, new mp.Vector3(1067.56, -3109.37, -39.21111), new mp.Vector3(0, -5.008956e-6, 180), false, false);
    object.create(1321190118, new mp.Vector3(1067.598, -3095.992, -39.21), new mp.Vector3(5.008955e-6, -5.008956e-6, -5.008956e-6), false, false);
    object.create(623406777, new mp.Vector3(1073.42, -3099.69, -38.3959), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(-354221800, new mp.Vector3(1047.72, -3095.869, -35.81), new mp.Vector3(1.384231e-12, -5.008955e-6, 89.99998), false, false);
    object.create(-354221800, new mp.Vector3(1073.531, -3108.876, -35.81), new mp.Vector3(5.008953e-6, -5.008956e-6, -89.99998), false, false);
    object.create(548760764, new mp.Vector3(1073.531, -3096.022, -35.80864), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(548760764, new mp.Vector3(1047.719, -3108.683, -35.81166), new mp.Vector3(5.008955e-6, -5.008954e-6, 89.99998), false, false);
    object.create(548760764, new mp.Vector3(1067.08, -3106.36, -36.0832), new mp.Vector3(0, 0, 90.19985), false, false);
    object.create(1243328051, new mp.Vector3(1008.461, -3091.676, -39.99989), new mp.Vector3(0, 0, -14.99999), false, false);
    object.create(307713837, new mp.Vector3(1006.12, -3091.628, -39.99989), new mp.Vector3(0, 0, -82.99985), false, false);
    object.create(307713837, new mp.Vector3(1011.093, -3091.548, -39.99989), new mp.Vector3(0, 0, -82.99982), false, false);
    object.create(307713837, new mp.Vector3(1013.502, -3091.749, -39.99989), new mp.Vector3(0, 0, -104.9998), false, false);
    object.create(307713837, new mp.Vector3(1015.81, -3091.707, -39.99989), new mp.Vector3(0, 0, -89.49951), false, false);
    object.create(307713837, new mp.Vector3(1018.198, -3091.804, -37.7), new mp.Vector3(0, 0, -95.49947), false, false);
    object.create(307713837, new mp.Vector3(1015.603, -3091.71, -37.7), new mp.Vector3(0, 0, -82.49937), false, false);
    object.create(1243328051, new mp.Vector3(1013.233, -3092.015, -37.79123), new mp.Vector3(0, 0, 6.000017), false, false);
    object.create(1243328051, new mp.Vector3(1010.944, -3091.871, -37.79123), new mp.Vector3(0, 0, 1.000016), false, false);
    object.create(1243328051, new mp.Vector3(1013.353, -3091.991, -35.76), new mp.Vector3(0, 0, 1.000016), false, false);
    object.create(1243328051, new mp.Vector3(1008.456, -3091.949, -35.75834), new mp.Vector3(0, 0, 1.000016), false, false);
    object.create(1243328051, new mp.Vector3(1006.075, -3091.862, -35.75834), new mp.Vector3(0, 0, 1.000016), false, false);
    object.create(1243328051, new mp.Vector3(1018.115, -3091.753, -39.99989), new mp.Vector3(0, 0, -11.99998), false, false);
    object.create(307713837, new mp.Vector3(1008.502, -3091.698, -37.7), new mp.Vector3(0, 0, -93.99959), false, false);
    object.create(307713837, new mp.Vector3(1005.944, -3091.818, -37.7), new mp.Vector3(0, 0, -82.99951), false, false);
    object.create(307713837, new mp.Vector3(1003.794, -3091.744, -37.7), new mp.Vector3(0, 0, -106.9994), false, false);
    object.create(307713837, new mp.Vector3(1003.721, -3091.739, -35.67), new mp.Vector3(0, 0, -94.99944), false, false);
    object.create(307713837, new mp.Vector3(1010.887, -3091.783, -35.67), new mp.Vector3(0, 0, -89.9994), false, false);
    object.create(307713837, new mp.Vector3(1015.664, -3091.761, -35.67), new mp.Vector3(0, 0, -85.99938), false, false);
    object.create(307713837, new mp.Vector3(1018.063, -3091.848, -35.67), new mp.Vector3(0, 0, 2.000695), false, false);
    object.create(307713837, new mp.Vector3(1003.675, -3096.881, -39.99989), new mp.Vector3(0, 0, -179.9995), false, false);
    object.create(307713837, new mp.Vector3(1008.47, -3096.928, -39.99989), new mp.Vector3(0, 0, 159.0005), false, false);
    object.create(307713837, new mp.Vector3(1013.346, -3096.789, -39.99989), new mp.Vector3(0, 0, -172.9994), false, false);
    object.create(307713837, new mp.Vector3(1010.742, -3096.9, -39.99989), new mp.Vector3(0, 0, -101.9993), false, false);
    object.create(307713837, new mp.Vector3(1015.813, -3096.806, -37.7), new mp.Vector3(0, 0, -166.9992), false, false);
    object.create(307713837, new mp.Vector3(1018.112, -3096.824, -37.7), new mp.Vector3(0, 0, -93.99899), false, false);
    object.create(307713837, new mp.Vector3(1010.853, -3096.697, -37.7), new mp.Vector3(0, 0, -93.99899), false, false);
    object.create(307713837, new mp.Vector3(1008.564, -3096.79, -37.7), new mp.Vector3(0, 0, -71.99897), false, false);
    object.create(307713837, new mp.Vector3(1003.712, -3097.002, -35.67), new mp.Vector3(0, 0, -98.99887), false, false);
    object.create(307713837, new mp.Vector3(1006.06, -3097.098, -35.67), new mp.Vector3(0, 0, -90.99881), false, false);
    object.create(307713837, new mp.Vector3(1008.44, -3096.96, -35.67), new mp.Vector3(0, 0, -82.99876), false, false);
    object.create(307713837, new mp.Vector3(1010.91, -3096.906, -35.67), new mp.Vector3(0, 0, -91.99872), false, false);
    object.create(307713837, new mp.Vector3(1018.003, -3102.927, -39.99989), new mp.Vector3(0, 0, -98.9986), false, false);
    object.create(307713837, new mp.Vector3(1013.305, -3102.702, -39.99989), new mp.Vector3(0, 0, -90.99854), false, false);
    object.create(307713837, new mp.Vector3(1010.846, -3102.682, -39.99989), new mp.Vector3(0, 0, -167.9982), false, false);
    object.create(307713837, new mp.Vector3(1008.438, -3102.679, -39.99989), new mp.Vector3(0, 0, -96.99812), false, false);
    object.create(307713837, new mp.Vector3(1006.108, -3102.781, -39.99989), new mp.Vector3(0, 0, -74.99802), false, false);
    object.create(307713837, new mp.Vector3(1003.669, -3102.814, -39.99989), new mp.Vector3(0, 0, -102.9979), false, false);
    object.create(307713837, new mp.Vector3(1003.677, -3102.597, -37.7), new mp.Vector3(0, 0, -175.9978), false, false);
    object.create(307713837, new mp.Vector3(1003.678, -3102.723, -35.67), new mp.Vector3(0, 0, 177.0023), false, false);
    object.create(307713837, new mp.Vector3(1006.032, -3102.763, -35.67), new mp.Vector3(0, 0, 92.00207), false, false);
    object.create(307713837, new mp.Vector3(1008.413, -3102.823, -35.67), new mp.Vector3(0, 0, 92.00207), false, false);
    object.create(307713837, new mp.Vector3(1013.312, -3102.757, -35.67), new mp.Vector3(0, 0, 92.00207), false, false);
    object.create(307713837, new mp.Vector3(1015.728, -3102.831, -35.67), new mp.Vector3(0, 0, 93.00201), false, false);
    object.create(307713837, new mp.Vector3(1018.112, -3102.683, -37.7), new mp.Vector3(0, 0, 173.0018), false, false);
    object.create(307713837, new mp.Vector3(1010.901, -3102.628, -37.7), new mp.Vector3(0, 0, 179.002), false, false);
    object.create(307713837, new mp.Vector3(1008.488, -3102.646, -37.7), new mp.Vector3(0, 0, 175.002), false, false);
    object.create(307713837, new mp.Vector3(1018.126, -3108.385, -39.99989), new mp.Vector3(0, 0, 100.0019), false, false);
    object.create(307713837, new mp.Vector3(1013.217, -3108.551, -39.99989), new mp.Vector3(0, 0, 80.00176), false, false);
    object.create(307713837, new mp.Vector3(1008.509, -3108.473, -39.99989), new mp.Vector3(0, 0, 96.00169), false, false);
    object.create(307713837, new mp.Vector3(1006.066, -3108.34, -39.99989), new mp.Vector3(0, 0, 78.00158), false, false);
    object.create(307713837, new mp.Vector3(1003.493, -3108.454, -39.99989), new mp.Vector3(0, 0, -172.9987), false, false);
    object.create(307713837, new mp.Vector3(1006.113, -3108.312, -37.7), new mp.Vector3(0, 0, 175.001), false, false);
    object.create(307713837, new mp.Vector3(1010.881, -3108.359, -37.7), new mp.Vector3(0, 0, -179.9991), false, false);
    object.create(307713837, new mp.Vector3(1015.731, -3108.339, -37.7), new mp.Vector3(0, 0, 91.00075), false, false);
    object.create(307713837, new mp.Vector3(1015.696, -3108.477, -35.67), new mp.Vector3(0, 0, 91.00074), false, false);
    object.create(307713837, new mp.Vector3(1008.521, -3108.612, -35.67), new mp.Vector3(0, 0, 87.0007), false, false);
    object.create(307713837, new mp.Vector3(1006.058, -3108.577, -35.67), new mp.Vector3(0, 0, 93.00066), false, false);
    object.create(1243328051, new mp.Vector3(1003.715, -3091.801, -39.99989), new mp.Vector3(0, 0, -17.99997), false, false);
    object.create(1243328051, new mp.Vector3(1005.913, -3096.815, -39.99989), new mp.Vector3(0, 0, 4.000031), false, false);
    object.create(1243328051, new mp.Vector3(1015.74, -3096.783, -39.99989), new mp.Vector3(0, 0, -179.0002), false, false);
    object.create(1243328051, new mp.Vector3(1018.026, -3096.77, -39.99989), new mp.Vector3(0, 0, 174.9997), false, false);
    object.create(1243328051, new mp.Vector3(1006.05, -3096.689, -37.79123), new mp.Vector3(0, 0, -92.00012), false, false);
    object.create(1243328051, new mp.Vector3(1003.587, -3096.716, -37.79123), new mp.Vector3(0, 0, -176.9997), false, false);
    object.create(1243328051, new mp.Vector3(1013.316, -3096.786, -37.79123), new mp.Vector3(0, 0, 3.000464), false, false);
    object.create(1243328051, new mp.Vector3(1013.32, -3096.836, -35.75834), new mp.Vector3(0, 0, 3.000463), false, false);
    object.create(1243328051, new mp.Vector3(1015.696, -3096.784, -35.75834), new mp.Vector3(0, 0, 87.00037), false, false);
    object.create(1243328051, new mp.Vector3(1018.091, -3096.979, -35.75834), new mp.Vector3(0, 0, 4.000481), false, false);
    object.create(1243328051, new mp.Vector3(1006.06, -3102.668, -37.79), new mp.Vector3(0, 0, 4.000481), false, false);
    object.create(1243328051, new mp.Vector3(1013.329, -3102.618, -37.79123), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(1243328051, new mp.Vector3(1015.598, -3102.559, -39.99989), new mp.Vector3(0, 0, -179.9998), false, false);
    object.create(1243328051, new mp.Vector3(1015.759, -3102.589, -37.79123), new mp.Vector3(0, 0, 10.00004), false, false);
    object.create(1243328051, new mp.Vector3(1018.152, -3103.019, -35.75834), new mp.Vector3(0, 0, 87.99994), false, false);
    object.create(1243328051, new mp.Vector3(1010.909, -3103.118, -35.75834), new mp.Vector3(0, 0, 4.999892), false, false);
    object.create(1243328051, new mp.Vector3(1003.6, -3108.222, -37.79123), new mp.Vector3(0, 0, 4.999893), false, false);
    object.create(1243328051, new mp.Vector3(1010.97, -3108.403, -39.99989), new mp.Vector3(0, 0, 4.999893), false, false);
    object.create(1243328051, new mp.Vector3(1015.624, -3108.527, -39.99989), new mp.Vector3(0, 0, -176.9998), false, false);
    object.create(1243328051, new mp.Vector3(1018.177, -3108.172, -37.79123), new mp.Vector3(0, 0, -176.9998), false, false);
    object.create(1243328051, new mp.Vector3(1018.038, -3108.594, -35.75834), new mp.Vector3(0, 0, -75.99966), false, false);
    object.create(1243328051, new mp.Vector3(1013.326, -3108.572, -35.75834), new mp.Vector3(0, 0, 0.0003687739), false, false);
    object.create(1243328051, new mp.Vector3(1010.829, -3108.622, -35.75834), new mp.Vector3(0, 0, -169.9994), false, false);
    object.create(1243328051, new mp.Vector3(1003.634, -3108.727, -35.75834), new mp.Vector3(0, 0, -88.99928), false, false);
    object.create(1243328051, new mp.Vector3(993.4555, -3106.426, -39.99989), new mp.Vector3(0, 0, 91.00082), false, false);
    object.create(1243328051, new mp.Vector3(993.4365, -3106.476, -37.79123), new mp.Vector3(0, 0, -178.999), false, false);
    object.create(1243328051, new mp.Vector3(993.5549, -3108.992, -35.75834), new mp.Vector3(0, 0, 98.00067), false, false);
    object.create(1243328051, new mp.Vector3(993.1431, -3111.318, -39.99989), new mp.Vector3(0, 0, 98.00067), false, false);
    object.create(307713837, new mp.Vector3(993.1874, -3108.882, -39.99989), new mp.Vector3(0, 0, 127.0012), false, false);
    object.create(307713837, new mp.Vector3(993.3561, -3108.926, -37.7), new mp.Vector3(0, 0, -179.9988), false, false);
    object.create(307713837, new mp.Vector3(993.4767, -3111.412, -37.7), new mp.Vector3(0, 0, 96.00095), false, false);
    object.create(307713837, new mp.Vector3(993.5084, -3111.31, -35.67), new mp.Vector3(0, 0, 96.00095), false, false);
    object.create(307713837, new mp.Vector3(993.3371, -3106.471, -35.67), new mp.Vector3(0, 0, 178.0008), false, false);
    object.create(307713837, new mp.Vector3(1026.579, -3106.327, -37.7), new mp.Vector3(0, 0, 110.0006), false, false);
    object.create(307713837, new mp.Vector3(1026.741, -3109.057, -39.99989), new mp.Vector3(0, 0, -175.9993), false, false);
    object.create(307713837, new mp.Vector3(1026.72, -3111.26, -39.99989), new mp.Vector3(0, 0, -175.9993), false, false);
    object.create(307713837, new mp.Vector3(1026.67, -3106.573, -35.67), new mp.Vector3(0, 0, 167.0006), false, false);
    object.create(307713837, new mp.Vector3(1026.599, -3108.937, -35.67), new mp.Vector3(0, 0, 96.00047), false, false);
    object.create(307713837, new mp.Vector3(1026.747, -3094.104, -39.99989), new mp.Vector3(0, 0, 69.00039), false, false);
    object.create(307713837, new mp.Vector3(1026.698, -3093.991, -37.7), new mp.Vector3(0, 0, 95.00034), false, false);
    object.create(307713837, new mp.Vector3(1026.615, -3091.677, -35.67), new mp.Vector3(0, 0, 87.00027), false, false);
    object.create(307713837, new mp.Vector3(1026.639, -3091.638, -37.7), new mp.Vector3(0, 0, 87.00024), false, false);
    object.create(307713837, new mp.Vector3(1026.772, -3096.449, -35.67), new mp.Vector3(0, 0, 0.0002923011), false, false);
    object.create(1243328051, new mp.Vector3(1026.568, -3108.603, -37.79123), new mp.Vector3(0, 0, -79.99997), false, false);
    object.create(1243328051, new mp.Vector3(1026.635, -3111.395, -37.7), new mp.Vector3(0, 0, -95.99987), false, false);
    object.create(1243328051, new mp.Vector3(1026.645, -3111.462, -35.75834), new mp.Vector3(0, 0, -9.999732), false, false);
    object.create(1243328051, new mp.Vector3(1026.442, -3096.436, -37.79123), new mp.Vector3(0, 0, -79.99967), false, false);
    object.create(1243328051, new mp.Vector3(1026.415, -3094.02, -35.75834), new mp.Vector3(0, 0, -103.9996), false, false);
    object.create(1243328051, new mp.Vector3(1026.714, -3091.51, -39.99989), new mp.Vector3(0, 0, -78.9996), false, false);
    object.create(1366469466, new mp.Vector3(1026.784, -3096.404, -39.99989), new mp.Vector3(0, 0, 0), false, false);
    object.create(1366469466, new mp.Vector3(1026.889, -3106.594, -39.99989), new mp.Vector3(0, 0, 0), false, false);
    object.create(307713837, new mp.Vector3(1008.408, -3108.406, -37.7), new mp.Vector3(0, 0, -6.99935), false, false);
    object.create(1243328051, new mp.Vector3(1013.325, -3108.185, -37.79123), new mp.Vector3(0, 0, -174.9994), false, false);
    object.create(-1202648266, new mp.Vector3(993.8662, -3100.065, -39.47), new mp.Vector3(4.07111e-13, -5.008956e-6, 91.24982), false, false);
    object.create(-957463636, new mp.Vector3(996.82, -3097.403, -39.99989), new mp.Vector3(1.384231e-12, -5.008955e-6, 89.99998), false, false);
    object.create(1102407831, new mp.Vector3(998.5453, -3097.382, -39.99989), new mp.Vector3(1.384231e-12, -5.008955e-6, 89.99998), false, false);
    object.create(-218195159, new mp.Vector3(1002.29, -3096.97, -38.94742), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(1881864012, new mp.Vector3(998.4337, -3097.302, -39.54), new mp.Vector3(0, 0, 136.9998), false, false);
    object.create(144995201, new mp.Vector3(998.3326, -3097.895, -39.55208), new mp.Vector3(0, 0, -49.99997), false, false);
    object.create(144995201, new mp.Vector3(998.4748, -3097.912, -39.55208), new mp.Vector3(0, 0, -4.999959), false, false);
    object.create(144995201, new mp.Vector3(998.4149, -3097.812, -39.55208), new mp.Vector3(0, 0, -34.99995), false, false);
    object.create(-1122944124, new mp.Vector3(998.4667, -3097.685, -39.55208), new mp.Vector3(0, 0, 52.99993), false, false);
    object.create(2003032008, new mp.Vector3(998.4431, -3096.911, -39.55208), new mp.Vector3(0, 0, -149.9997), false, false);
    object.create(996113921, new mp.Vector3(998.5395, -3097.406, -39.54), new mp.Vector3(0, 0, -39.99998), false, false);
    object.create(-1842407088, new mp.Vector3(994.0392, -3102.682, -37.31281), new mp.Vector3(0, 0, 0), false, false);
    object.create(1613369486, new mp.Vector3(995.2896, -3099.912, -39.20055), new mp.Vector3(0, 0, -83.99989), false, false);
    object.create(-286280212, new mp.Vector3(995.1067, -3100.345, -39.20055), new mp.Vector3(0, 0, -89.99986), false, false);
    object.create(-1659828682, new mp.Vector3(1025.91, -3096.4, -39.25), new mp.Vector3(-1.384231e-12, -5.008955e-6, -89.99998), false, false);
    object.create(-1659828682, new mp.Vector3(1026.01, -3106.59, -39.25), new mp.Vector3(-2.564906e-12, -5.008952e-6, -89.99995), false, false);
    object.create(-1659828682, new mp.Vector3(1028.12, -3098.85, -38.53), new mp.Vector3(-2.564906e-12, -5.008952e-6, -89.99995), false, false);
    object.create(1385605940, new mp.Vector3(-158.1667, -950.2922, 268.45), new mp.Vector3(1.001791e-5, -5.008957e-6, 70.74991), false, false);
    object.create(1385605940, new mp.Vector3(-155.9283, -943.9648, 268.46), new mp.Vector3(1.001791e-5, 5.008956e-6, 69.49989), false, false);
    object.create(1385605940, new mp.Vector3(-154.2837, -939.4352, 268.46), new mp.Vector3(1.001787e-5, -5.008956e-6, -10.25009), false, false);
    object.create(1385605940, new mp.Vector3(-149.6382, -940.228, 268.46), new mp.Vector3(1.001787e-5, -5.008954e-6, -19.95006), false, false);
    object.create(-304627501, new mp.Vector3(-656.9363, 857.6995, 224.1475), new mp.Vector3(0, 0, -93.29977), false, false);
    object.create(-1660391290, new mp.Vector3(-656.7857, 857.7164, 225.0692), new mp.Vector3(0, 0, -4.999998), false, false);
    object.create(-1296547421, new mp.Vector3(-656.8954, 857.2643, 225.0692), new mp.Vector3(0, 0, -44.99998), false, false);
    object.create(-1863407086, new mp.Vector3(-656.9692, 858.1694, 225.0692), new mp.Vector3(0, 0, 0), false, false);
    object.create(-23214081, new mp.Vector3(-656.7669, 857.9216, 225.0692), new mp.Vector3(0, 0, -120.0001), false, false);
    object.create(-1756838334, new mp.Vector3(-656.7501, 857.5406, 225.0692), new mp.Vector3(0, 0, -55.99997), false, false);
    object.create(-200410159, new mp.Vector3(-670.1353, 878.8281, 232.6595), new mp.Vector3(33.74997, 6.574057e-5, -57.5998), false, false);
    object.create(-200410159, new mp.Vector3(-660.4288, 853.853, 232.6921), new mp.Vector3(16.24995, -5.229364e-6, -93.09954), false, false);
    object.create(1457658556, new mp.Vector3(-662.0896, 873.0837, 231.3), new mp.Vector3(0, 0, -56.19514), false, false);
    object.create(1457658556, new mp.Vector3(-656.9432, 865.4567, 231.3), new mp.Vector3(0, 0, -56.19514), false, false);
    object.create(1457658556, new mp.Vector3(-650.1976, 855.9483, 231.3), new mp.Vector3(0, 0, -3.89511), false, false);
    object.create(1457658556, new mp.Vector3(-656.2874, 856.8635, 231.3), new mp.Vector3(0, 0, -3.895109), false, false);
    object.create(1457658556, new mp.Vector3(-655.82, 856.84, 227.1), new mp.Vector3(0, 0, -3.895109), false, false);
    object.create(1457658556, new mp.Vector3(-650.5297, 855.9602, 227.1), new mp.Vector3(0, 0, -56.59491), false, false);
    object.create(1457658556, new mp.Vector3(-665.7134, 880.9805, 227.1), new mp.Vector3(0, 0, -55.69457), false, false);
    object.create(1457658556, new mp.Vector3(-659.244, 890.8285, 231.8), new mp.Vector3(0, 0, -163.9936), false, false);
    object.create(1457658556, new mp.Vector3(-652.8525, 892.7276, 231.8), new mp.Vector3(0, 0, -163.6936), false, false);
    object.create(1457658556, new mp.Vector3(-673.8336, 907.6039, 233.1171), new mp.Vector3(0, 0, 147.006), false, false);
    object.create(1457658556, new mp.Vector3(-682.2459, 916.0604, 234.784), new mp.Vector3(0, 0, 147.006), false, false);
    object.create(1457658556, new mp.Vector3(-665.7068, 880.9703, 231.3), new mp.Vector3(0, 0, -56.19514), false, false);
    object.create(286252949, new mp.Vector3(-658.5034, 850.2386, 224.1475), new mp.Vector3(0, 0, -145.8996), false, false);
    object.create(1715961520, new mp.Vector3(-675.2576, 862.0917, 223.98), new mp.Vector3(0, 0, 53.49993), false, false);
    object.create(-1675793829, new mp.Vector3(-670.8497, 871.1564, 223.98), new mp.Vector3(1.00179e-5, 5.008955e-6, 114.9997), false, false);
    object.create(758202391, new mp.Vector3(-669.3771, 858.337, 225.0477), new mp.Vector3(0, 0, 11.99999), false, false);
    object.create(411094673, new mp.Vector3(-668.767, 858.14, 225.1), new mp.Vector3(0, 0, -10.89997), false, false);
    object.create(-634182963, new mp.Vector3(-668.3967, 858.324, 224.1475), new mp.Vector3(0, 0, -11.09999), false, false);
    object.create(175309727, new mp.Vector3(-671.0432, 858.7298, 224.1475), new mp.Vector3(0, 0, 78.81249), true, false);
    object.create(1609525816, new mp.Vector3(-667.7618, 858.0909, 224.1475), new mp.Vector3(0, 0, -29.99999), false, false);
    object.create(992125567, new mp.Vector3(-667.5822, 857.896, 225.0477), new mp.Vector3(0, 0, -23.09999), false, false);
    object.create(-1847674591, new mp.Vector3(-669.0656, 858.3388, 224.1475), new mp.Vector3(0, 0, -6.999993), false, false);
    object.create(-12643427, new mp.Vector3(-667.67, 858.32, 225.0477), new mp.Vector3(0, 0, -12.99999), false, false);
    object.create(292009966, new mp.Vector3(-668.02, 858.5, 225.0477), new mp.Vector3(1.001786e-5, -5.008956e-6, -13.25), false, false);
    object.create(-20442477, new mp.Vector3(-669.05, 858.66, 225.0477), new mp.Vector3(0, 0, -6.999997), false, false);
    object.create(277657116, new mp.Vector3(-668.8, 858.65, 225.0477), new mp.Vector3(1.00179e-5, -5.008956e-6, -4.24997), false, false);
    object.create(1655528056, new mp.Vector3(-668.43, 858.47, 225.0477), new mp.Vector3(1.001791e-5, -5.008957e-6, -12.15), false, false);
    object.create(-1817949198, new mp.Vector3(-668.38, 858.51, 225.05), new mp.Vector3(0, 0, -11.79999), false, false);
    object.create(370253355, new mp.Vector3(-663.4633, 860.3721, 224.0524), new mp.Vector3(0, 0, -101.0997), false, false);
    object.create(1618060855, new mp.Vector3(-663.926, 860.7893, 224.0524), new mp.Vector3(0, 0, -11.49999), false, false);
    object.create(866201454, new mp.Vector3(-664.1265, 860.7982, 224.5024), new mp.Vector3(0, 0, 19.99999), true, false);
    object.create(175309727, new mp.Vector3(-664.1363, 857.6174, 224.1475), new mp.Vector3(0, 0, 169.112), true, false);
    object.create(-2049115744, new mp.Vector3(-656.7372, 857.3754, 225.0692), new mp.Vector3(0, 0, -50.99998), false, false);
    object.create(-821834539, new mp.Vector3(-666.7961, 857.9799, 224.1475), new mp.Vector3(0, 0, 169.0997), false, false);
    object.create(-821834539, new mp.Vector3(-670.0118, 858.5937, 224.1475), new mp.Vector3(0, 0, 169.0997), false, false);
    object.create(579578786, new mp.Vector3(-659.03, 870.0364, 224.34), new mp.Vector3(1.001791e-5, -5.008956e-6, -146.0244), false, false);
    object.create(1998517203, new mp.Vector3(-668.8875, 867.587, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-667.6892, 873.6196, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-663.9899, 870.2151, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-670.1184, 861.5554, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-661.3776, 866.2827, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-659.3862, 862.1257, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(1998517203, new mp.Vector3(-666.3326, 858.9564, 224.12), new mp.Vector3(0, 0, 0), false, false);
    object.create(-845118873, new mp.Vector3(-663.7, 859.7, 227.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(-845118873, new mp.Vector3(-668.95, 858.35, 227.16), new mp.Vector3(0, 0, 0), false, false);
    object.create(241167444, new mp.Vector3(-1830.85, 321.1704, 92.57976), new mp.Vector3(6.106665e-13, -5.008956e-6, 103.6746), false, false);
    object.create(-2008643115, new mp.Vector3(-1830.06, 319.0793, 92.60175), new mp.Vector3(1.001791e-5, -5.008957e-6, 103.5741), false, false);
    object.create(-304627501, new mp.Vector3(-1772.628, 449.6092, 126.45), new mp.Vector3(0, 0, -0.0002360046), false, false);
    object.create(-1863407086, new mp.Vector3(-1772.199, 449.4892, 127.3783), new mp.Vector3(0, 0, -21.99999), false, false);
    object.create(-1081236305, new mp.Vector3(-1772.908, 449.5205, 127.3783), new mp.Vector3(0, 0, -16.99999), false, false);
    object.create(211213803, new mp.Vector3(-1772.456, 449.76, 127.51), new mp.Vector3(0, 0, 28.00011), false, false);
    object.create(-1756838334, new mp.Vector3(-1772.713, 449.746, 127.3717), new mp.Vector3(0, 0, -25), false, false);
    object.create(-748864306, new mp.Vector3(-1772.207, 449.7922, 127.3717), new mp.Vector3(0, 0, -19.99999), false, false);
    object.create(-573707493, new mp.Vector3(-3066.752, 553.8232, 1.28), new mp.Vector3(0, 0, -108.2996), false, false);
    object.create(-573707493, new mp.Vector3(-3066.653, 555.3763, 1.26), new mp.Vector3(0, 0, -79.99965), false, false);
    object.create(-1682596365, new mp.Vector3(-3066.823, 554.6428, 1.45), new mp.Vector3(0, 0, 0), false, false);
    object.create(2057223314, new mp.Vector3(-3066.7, 554.5794, 1.7), new mp.Vector3(0, 0, -110.9999), false, false);
    object.create(144995201, new mp.Vector3(-3066.831, 554.7399, 1.639878), new mp.Vector3(0, 0, -20.99998), false, false);
    object.create(-2042781782, new mp.Vector3(-3066.908, 554.6555, 1.608359), new mp.Vector3(0, 0, -21), false, false);
    object.create(1054627099, new mp.Vector3(-3066.469, 554.8379, 0.9861619), new mp.Vector3(-22.50002, -4.268868e-6, -76.24998), false, false);
    object.create(687012144, new mp.Vector3(-3066.665, 556.3949, 2.23), new mp.Vector3(0, 0, -51.99968), false, false);
    object.create(1296557055, new mp.Vector3(-3032.9, 552.47, 7.440644), new mp.Vector3(2.149959, -0.2499389, -177.7503), false, false);
    object.create(858596542, new mp.Vector3(-3032.584, 552.1843, 8.643021), new mp.Vector3(0, 0, 176.3997), false, false);
    object.create(858596542, new mp.Vector3(-3034.193, 552.1168, 8.643021), new mp.Vector3(0, 0, 176.3997), false, false);
    object.create(1181350742, new mp.Vector3(-3067.556, 555.6832, 1.41), new mp.Vector3(0, 0, -91.59966), false, false);
    object.create(mp.game.joaat("prop_atm_02"), new mp.Vector3(1101.526, 205.4781, -50.1), new mp.Vector3(0, 0, 141.59966), false, false);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -1937.323, 2840.169, 31.8106);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -1941.569, 2832.723, 31.8106);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -1945.74, 2825.22, 31.8106);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -1949.681, 2817.65, 31.8106);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -1954.007, 2810.361, 31.8106);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -2491.606, 3286.52, 31.85303);
    object.delete(mp.game.joaat("prop_air_blastfence_01"), -2484.508, 3281.592, 31.85356);
    object.delete(mp.game.joaat("prop_mb_ordnance_02"), -1785.706, 2996.543, 31.82312);
    object.delete(mp.game.joaat("prop_lrggate_02"), -875.4845, 18.12612, 44.4434);
    const end = new Date().getTime();

    _methods.methods.debug('Count Objects Loaded: ' + objectList.length + '  | ' + (end - start) + 'ms');

    object.process();
  },
  create: (model, pos, rotation, dynamic, placeOnGround, spriteText) => {
    objectList.push({
      model: model,
      pos: pos,
      rotation: rotation,
      dynamic: dynamic,
      placeOnGround: placeOnGround,
      isCreate: false,
      handle: null,
      spriteText: spriteText
    });
  },
  createIpl: (ipl, pos, radius) => {
    mp.game.streaming.removeIpl(ipl);
    iplList.push({
      ipl: ipl,
      pos: pos,
      radius: radius,
      isLoad: false
    });
  },
  delete: (model, x, y, z) => {
    objectDelList.push({
      model: model,
      x: x,
      y: y,
      z: z
    });
  },
  process: () => {
    let playerPos = mp.players.local.position;
    objectDelList.forEach(function (item) {
      if (_methods.methods.distanceToPos(playerPos, new mp.Vector3(item.x, item.y, item.z)) < loadDist) mp.game.entity.createModelHide(item.x, item.y, item.z, 2, item.model, true);
    });
    iplList.forEach(item => {
      let dist = _methods.methods.distanceToPos(playerPos, item.pos);

      let radius = item.radius;

      if (dist < radius && !item.isLoad) {
        mp.game.streaming.requestIpl(item.ipl);
        item.isLoad = true;
      } else if (dist > radius + 50 && item.isLoad) {
        mp.game.streaming.removeIpl(item.ipl);
        item.isLoad = false;
      }
    });
    objectList.forEach(async function (item) {
      let dist = _methods.methods.distanceToPos(playerPos, item.pos);

      if (dist < loadDist && !item.isCreate) {
        try {
          if (mp.game.streaming.hasModelLoaded(item.model)) {
            item.handle = mp.objects.new(item.model, item.pos, {
              rotation: item.rotation,
              alpha: 255,
              dimension: -1
            });

            _methods.methods.debug(`Execute: objectList.forEach.create`);

            item.isCreate = true;
            mp.game.streaming.setModelAsNoLongerNeeded(item.model);
          } else if (item.didRequest !== true) {
            item.didRequest = true;
            mp.game.streaming.requestModel(item.model);
          }
        } catch (e) {
          _methods.methods.debug(`Exeption: objectList.forEach.create`);

          _methods.methods.debug(e);
        }
      } else if (dist > loadDist + 50 && item.isCreate) {
        try {
          if (mp.objects.exists(item.handle)) {
            item.handle.destroy();
            item.handle = null;
            item.isCreate = false;
          }

          if (item.didRequest === true) {
            item.didRequest = false;
            mp.game.streaming.setModelAsNoLongerNeeded(item.model);
          }
        } catch (e) {
          _methods.methods.debug(`Exeption: objectList.forEach.destroy`);

          _methods.methods.debug(e);
        }
      }
    });
    setTimeout(object.process, 4000);
  },
  openDoor: (hash, x, y, z, isClose = false) => {
    if (isClose == undefined) isClose = false;
    doorListForAutoOpen.push({
      x,
      y,
      z,
      hash,
      isClose
    });
  }
};
exports.object = object;
setInterval(() => {
  let pos = mp.players.local.position;
  doorListForAutoOpenCurrent = [];
  doorListForAutoOpen.forEach(item => {
    if (_methods.methods.distanceToPos(pos, new mp.Vector3(item.x, item.y, item.z)) < loadDist) doorListForAutoOpenCurrent.push(item);
  });
}, 6000);
setInterval(() => {
  doorListForAutoOpenCurrent.forEach(item => {
    const {
      hash,
      x,
      y,
      z,
      isClose
    } = item;
    mp.game.object.doorControl(hash, x, y, z, isClose, 0.0, 50.0, 0);
    if (isClose == true) mp.game.invoke(_methods.methods.FREEZE_ENTITY_POSITION, mp.game.object.getClosestObjectOfType(x, y, z, 1, hash, false, false, false));
  });
}, 4000);
},{"../modules/methods":"qXSp"}],"nEWc":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.breakLight = void 0;

var _user = require("../user");

let pedInSameVehicleLast = false;
let vehicle = null;
let vehicleClass = 0;
let fBrakeForce = 1.0;
let isBrakingForward = false;
let isBrakingReverse = false;
let smoothDriving = true;
let stopWithoutReversing = true;
let smoothAcceleratorCurve = 7.5;
let smoothBrakeCurve = 5.0;
const breakLight = {
  isPedDrivingAVehicle: () => {
    if (mp.players.local.isInAnyVehicle(false)) {
      let veh = mp.players.local.vehicle;

      if (veh.getPedInSeat(-1) == mp.players.local.handle) {
        let classType = mp.game.vehicle.getVehicleClassFromName(veh.model);
        if (classType != 15 && classType != 16 && classType != 21 && classType != 13 && classType != 14) return true;
      }
    }

    return false;
  },
  fscale: (inputValue, originalMin, originalMax, newBegin, newEnd, curve) => {
    let OriginalRange = 0.0;
    let NewRange = 0.0;
    let zeroRefCurVal = 0.0;
    let normalizedCurVal = 0.0;
    let rangedValue = 0.0;
    let invFlag = 0;
    if (curve > 10.0) curve = 10.0;
    if (curve < -10.0) curve = -10.0;
    curve = curve * -0.1;
    curve = 10.0 ^ curve;
    if (inputValue < originalMin) inputValue = originalMin;
    if (inputValue > originalMax) inputValue = originalMax;
    OriginalRange = originalMax - originalMin;
    if (newEnd > newBegin) NewRange = newEnd - newBegin;else {
      NewRange = newBegin - newEnd;
      invFlag = 1;
    }
    zeroRefCurVal = inputValue - originalMin;
    normalizedCurVal = zeroRefCurVal / OriginalRange;
    if (originalMin > originalMax) return 0;
    if (invFlag == 0) rangedValue = (normalizedCurVal ^ curve) * NewRange + newBegin;else rangedValue = newBegin - (normalizedCurVal ^ curve) * NewRange;
    return rangedValue;
  },
  smoothDriving: () => {
    if (vehicle && mp.vehicles.exists(vehicle)) {
      let torqueFactor = 1.0;
      let accelerator = mp.game.controls.getControlValue(2, 71);
      let brake = mp.game.controls.getControlValue(2, 72);
      let speedVector = vehicle.getSpeedVector(true).y;
      let brk = fBrakeForce;

      if (speedVector >= 1.0) {
        if (accelerator > 127) {
          let acc = breakLight.fscale(accelerator, 127.0, 254.0, 0.1, 1.0, 10.0 - smoothAcceleratorCurve * 2.0);
          torqueFactor = torqueFactor * acc;
        }

        if (brake > 127) {
          isBrakingForward = true;
          brk = breakLight.fscale(brake, 127.0, 254.0, 0.01, fBrakeForce, 10.0 - smoothBrakeCurve * 2.0);
        }
      } else if (speedVector <= -1.0) {
        if (accelerator > 127) {
          let rev = breakLight.fscale(brake, 127.0, 254.0, 0.1, 1.0, 10.0 - smoothAcceleratorCurve * 2.0);
          torqueFactor = torqueFactor * rev;
        }

        if (brake > 127) {
          isBrakingReverse = true;
          brk = breakLight.fscale(brake, 127.0, 254.0, 0.01, fBrakeForce, 10.0 - smoothBrakeCurve * 2.0);
        }
      } else {
        let entitySpeed = vehicle.getSpeed();

        if (stopWithoutReversing && entitySpeed < 1) {
          if (isBrakingForward == true) {
            mp.game.controls.disableControlAction(2, 72, true);
            vehicle.setForwardSpeed(speedVector * 0.98);
            vehicle.setBrakeLights(true);
          }

          if (isBrakingReverse == true) {
            mp.game.controls.disableControlAction(2, 71, true);
            vehicle.setForwardSpeed(speedVector * 0.98);
            vehicle.setBrakeLights(true);
          }

          if (isBrakingForward == true && mp.game.controls.getDisabledControlNormal(2, 72) == 0) {
            isBrakingForward = false;
          }

          if (isBrakingReverse == true && mp.game.controls.getDisabledControlNormal(2, 71) == 0) {
            isBrakingReverse = false;
          }
        }
      }

      if (brk > fBrakeForce - 0.02) brk = fBrakeForce;
    }
  },
  timer: () => {
    if (mp.players.local.isInAnyVehicle(false) && !vehicle) {
      if (mp.vehicles.exists(mp.players.local.vehicle)) {
        vehicle = mp.players.local.vehicle;
        vehicleClass = mp.game.vehicle.getVehicleClassFromName(vehicle.model);
      }
    } else {
      vehicle = null;
    }

    setTimeout(breakLight.timer, 300);
  }
};
exports.breakLight = breakLight;
mp.events.add('render', () => {
  if (_user.user.isLogin() && smoothDriving) breakLight.smoothDriving();
});
},{"../user":"QE3B"}],"Lsp6":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveZone = void 0;

var _gui = require("./modules/gui");

var _user = require("./user");

var _methods = require("./modules/methods");

var _fractions = require("../util/fractions");

var _autosalon = require("./business/autosalon");

var bigmap = {
  status: 0,
  timer: null
};
bigmap.status = 0;
bigmap.timer = null;
mp.game.ui.setRadarZoom(1.0);
mp.game.ui.setRadarBigmapEnabled(false, false);
let gangWarPos;
let gangWarData;
let ingangWarZone = false;
mp.events.add('gangWarPos', pos => {
  gangWarPos = JSON.parse(pos);
});
mp.events.add('gangWarStop', () => {
  gangWarPos = null;
});
mp.events.add('gangTerData', data => {
  gangWarData = JSON.parse(data);
});
setInterval(() => {
  if (!_user.user.isLogin()) return;

  if (gangWarData) {
    let fnd = false;
    gangWarData.forEach(item => {
      let polygon = [];
      const r = item.position.d / 2;
      polygon.push([item.position.x - r, item.position.y - r], [item.position.x - r, item.position.y + r], [item.position.x + r, item.position.y - r], [item.position.x + r, item.position.y + r]);

      let ins = _methods.methods.pointInBox([mp.players.local.position.x, mp.players.local.position.y], polygon);

      if (ins) {
        fnd = true;

        _gui.gui.browser.execute(`CEF.hud.setGangZone("${item.name}", "${_fractions.fractionUtil.getFractionColor(item.ownerid)}", "${_fractions.fractionUtil.getFractionName(item.ownerid)}");`);
      }
    });
    if (!fnd) _gui.gui.browser.execute(`CEF.hud.setGangZone(null, null, null)`);
  }

  if (!gangWarPos) {
    if (ingangWarZone) {
      _gui.gui.browser.execute(`CEF.hud.setGangWar(false)`);

      ingangWarZone = false;
    }

    return;
  }

  if (_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(gangWarPos.x, gangWarPos.y, gangWarPos.z)) < 150) {
    if (!ingangWarZone) {
      _gui.gui.browser.execute(`CEF.hud.setGangWar(true)`);

      ingangWarZone = true;
    }
  } else {
    if (ingangWarZone) {
      _gui.gui.browser.execute(`CEF.hud.setGangWar(false)`);

      ingangWarZone = false;
    }
  }
}, 1000);
mp.events.add("render", () => {
  if (mp.game.controls.isControlJustPressed(0, 48)) {
    bigmap.status++;

    if (bigmap.status == 1) {
      setTimeout(() => {
        if (bigmap.status == 1) bigmap.status = 0;
      }, 2000);
    }

    if (bigmap.status == 3) bigmap.status = 0;

    if (bigmap.status >= 2) {
      toggleBigMap = true;
    } else {
      toggleBigMap = false;
    }

    updateSavezone();
    setHudInfoLinePos();
  }

  if (bigmap.status == 2) {
    mp.game.ui.setRadarBigmapEnabled(true, false);
    mp.game.ui.setRadarZoom(0.0);
  } else {
    mp.game.ui.setRadarBigmapEnabled(false, false);
  }
});
let toggleBigMap = false;

const GetMinimapAnchor = () => {
  let safezone = mp.game.graphics.getSafeZoneSize();
  let safezone_x = 1.0 / 20.0;
  let safezone_y = 1.0 / 20.0;
  let aspect_ratio = mp.game.graphics.getScreenAspectRatio(false);
  let objectRes = mp.game.graphics.getScreenActiveResolution(1, 1);
  let res_x = objectRes.x;
  let res_y = objectRes.y;
  let xscale = 1.0 / res_x;
  let yscale = 1.0 / res_y;
  let bigMapMultipler = 1;
  if (toggleBigMap) xscale = xscale * 1.45, bigMapMultipler = 2.3;
  let left_x = xscale * (res_x * (safezone_x * (Math.abs(safezone - 1.0) * 10)));
  let bottom_y = yscale * (res_y * (safezone_y * (Math.abs(safezone - 1.0) * 10)));
  let height = yscale * (res_y / 5.674) * bigMapMultipler;
  let width = xscale * (res_x / (4 * aspect_ratio));
  let height_px = height * res_y;
  let width_px = width * res_x;
  let left_px = left_x * res_x;
  let bottom_px = bottom_y * res_y;
  let Minimap = {
    width: width,
    height: yscale * (res_y / 5.674),
    left_x: left_x,
    bottom_y: bottom_y,
    right_x: left_x + width,
    top_y: bottom_y - height,
    x: left_x,
    y: bottom_y - height,
    xunit: xscale,
    yunit: yscale,
    res_x: res_x,
    res_y: res_y,
    height_px,
    width_px,
    left_px,
    bottom_px
  };
  return Minimap;
};

let saveZone = GetMinimapAnchor();
exports.saveZone = saveZone;

const updateSavezone = () => {
  exports.saveZone = saveZone = GetMinimapAnchor();

  if (_gui.gui.browser) {
    const {
      width_px,
      height_px,
      left_px,
      bottom_px
    } = saveZone;

    _gui.gui.browser.execute(`CEF.alert.setSafezoneInfo(${width_px}, ${height_px}, ${left_px}, ${bottom_px})`);
  }
};

setInterval(updateSavezone, 3000);
updateSavezone();

const setHudInfoLinePos = () => {
  const {
    width_px,
    left_px,
    bottom_px
  } = saveZone;
  if (_user.user.isLogin()) _gui.gui.browser.execute(`CEF.hud.setInfoLinePos(${left_px + width_px}, ${bottom_px})`);
  setTimeout(setHudInfoLinePos, 5000);
};

mp.events.add('client:hud:load', () => {
  _gui.gui.hudLoaded = true;

  _gui.gui.browser.execute(`CEF.hud.setMoney(${_user.user.get('money')});
  CEF.hud.setHasBankCard(${!!(_user.user.get('bank_prefix') > 0)});
  CEF.hud.setMoneyBank(${_user.user.get('money_bank')});
  CEF.hud.setHasWatch(${!!_user.user.get('item_clock')});
  CEF.hud.updateHelpToggle(${!!mp.storage.data.help_toggle})`);

  setHudInfoLinePos();
});
mp.events.add('client:hud:updateHelpToggle', toggle => {
  mp.storage.data.help_toggle = toggle;
  mp.storage.flush();
});
const bmxhash = mp.game.joaat("bmx");
let lowFuelNotify = false;
mp.events.add('renderHalf', () => {
  if (_gui.gui.hudLoaded && _user.user.isLogin()) {
    if (mp.players.local.vehicle && !mp.players.local.isDead() && mp.players.local.vehicle.model != bmxhash) {
      const vehicle = mp.players.local.vehicle;

      if (vehicle.getPedInSeat(-1) == mp.players.local.handle) {
        if (!_gui.gui.showSpeedometer) {
          _gui.gui.showSpeedometer = true;
          if (_gui.gui.browser) _gui.gui.browser.execute(`CEF.speedometer.setSpeedometer(true)`);
        }

        const vehInfo = _methods.methods.getVehicleInfo(vehicle.model);

        let fuel = -1;

        if (vehInfo.fuel_full > 1) {
          if (!_autosalon.testDriveMode) {
            fuel = _methods.methods.parseInt(vehicle.getVariable('fuel'));

            if (!lowFuelNotify) {
              if (vehicle.getIsEngineRunning()) {
                if (vehInfo.fuel_full / 20 >= fuel) {
                  mp.game.ui.notifications.show('~r~Осталось менее 5% топлива');
                } else if (vehInfo.fuel_full / 10 >= fuel) {
                  mp.game.ui.notifications.show('~r~Осталось менее 10% топлива');
                }

                lowFuelNotify = true;
                setTimeout(() => {
                  lowFuelNotify = false;
                }, 60000);
              }
            }
          }
        }

        let lightState = vehicle.getLightsState(1, 1);
        if (_gui.gui.browser) _gui.gui.browser.execute(`CEF.speedometer.setSpeed(${_methods.methods.getCurrentSpeed()});
        CEF.speedometer.setFuel(${fuel});
        CEF.speedometer.setLights(${lightState.lightsOn || lightState.highbeamsOn});
        CEF.speedometer.setEngine(${vehicle.getIsEngineRunning() ? 'true' : 'false'});
        `);
      }
    } else if (_gui.gui.showSpeedometer) {
      _gui.gui.showSpeedometer = false;
      if (_gui.gui.browser) _gui.gui.browser.execute(`CEF.speedometer.setSpeedometer(false)`);
    }
  }
});
},{"./modules/gui":"bk91","./user":"QE3B","./modules/methods":"qXSp","../util/fractions":"Zeqt","./business/autosalon":"V6sO"}],"Sf2B":[function(require,module,exports) {
const player = mp.players.local;
let targetSpectate = null;
mp.events.add('admin:spectate:stop', () => {
  if (!targetSpectate) return;
  targetSpectate = null;
  mp.players.local.freezePosition(true);
  setTimeout(() => {
    mp.players.local.freezePosition(false);
  }, 5000);
});
mp.events.add('admin:spectate', target => {
  targetSpectate = target;
});
mp.events.add('render', () => {
  if (!targetSpectate) return;
  if (!mp.players.exists(targetSpectate)) return mp.events.callSocket('client:spectate:revive'), targetSpectate = null;
  if (!targetSpectate.handle) return mp.events.callSocket('client:spectate:revive'), targetSpectate = null;
  player.position = new mp.Vector3(targetSpectate.position.x, targetSpectate.position.y, targetSpectate.position.z + 2);
});
},{}],"ukAm":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.doorsData = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let doorsData = {
  '1': {
    offset: -1.2,
    mystatus: false,
    hash: 1557126584,
    x: 449.69815063477,
    y: -986.46911621094,
    z: 30.689594268799,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '3': {
    offset: -1.2,
    mystatus: false,
    hash: -1320876379,
    x: 447.23818969727,
    y: -980.63006591797,
    z: 30.689598083496,
    locked: true,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'кабинета начальника LSPD'
  },
  '4': {
    offset: -1.2,
    mystatus: false,
    hash: 185711165,
    x: 443.97,
    y: -989.033,
    z: 30.6896,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 5
  },
  '5': {
    offset: -1.2,
    mystatus: false,
    hash: 185711165,
    x: 445.37,
    y: -989.705,
    z: 30.6896,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 4
  },
  '6': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 464.4,
    y: -992.265,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '7': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.381,
    y: -993.651,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '8': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.331,
    y: -998.152,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '9': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.704,
    y: -1001.92,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 21
  },
  '14': {
    offset: -1.2,
    mystatus: false,
    hash: 320433149,
    x: 434.7479,
    y: -982.2151,
    z: 30.83926,
    locked: false,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'LSPD',
    pair: 15
  },
  '15': {
    offset: 1.2,
    mystatus: false,
    hash: -1215222675,
    x: 434.7479,
    y: -981.6184,
    z: 30.83926,
    locked: false,
    key: 'key_pd_boss',
    permission: '2.leader',
    name: 'LSPD',
    pair: 14
  },
  '17': {
    offset: -1.2,
    mystatus: false,
    hash: -131296141,
    x: 443.0298,
    y: -992.941,
    z: 30.8393,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 16
  },
  '16': {
    offset: -1.2,
    mystatus: false,
    hash: -131296141,
    x: 443.0298,
    y: -993.5412,
    z: 30.8393,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 17
  },
  '19': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 468.9679,
    y: -1014.452,
    z: 26.53623,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '18': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 468.3716,
    y: -1014.452,
    z: 26.53623,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '21': {
    offset: -1.2,
    mystatus: false,
    hash: 749848321,
    x: 461.2865,
    y: -985.3206,
    z: 30.83926,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD',
    pair: 9
  },
  '20': {
    offset: 1.2,
    mystatus: false,
    hash: -2023754432,
    x: 452.6248,
    y: -987.3626,
    z: 30.83926,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '22': {
    offset: -1.2,
    mystatus: false,
    hash: 631614199,
    x: 462.504,
    y: -1001.92,
    z: 24.9149,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'LSPD'
  },
  '38': {
    offset: -1.2,
    mystatus: false,
    hash: 2529918806,
    x: 1855.01,
    y: 3684.03,
    z: 34.27,
    locked: false,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  },
  '39': {
    offset: -1.2,
    mystatus: false,
    hash: -2023754432,
    x: 1856.7093505859375,
    y: 3689.539794921875,
    z: 34.26708221435547,
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  },
  '40': {
    offset: -1.2,
    mystatus: false,
    hash: 507213820,
    x: 463.29,
    y: -1011.78,
    z: 32.9,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD'
  },
  '41': {
    offset: -1.2,
    mystatus: false,
    hash: -1033001619,
    x: 445.2249,
    y: -999.6013,
    z: 30.91112,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD',
    pair: 42
  },
  '42': {
    offset: -1.2,
    mystatus: false,
    hash: -1033001619,
    x: 446.2249,
    y: -999.6013,
    z: 30.91112,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD',
    pair: 41
  },
  '43': {
    offset: -1.2,
    mystatus: false,
    hash: -340230128,
    x: 463.79,
    y: -983.95,
    z: 43.69,
    locked: true,
    key: 'key_lspd',
    permission: '2',
    name: 'Двери LSPD'
  },
  '44': {
    offset: -1.2,
    mystatus: false,
    hash: 2873385136,
    x: -2343.559,
    y: 3265.387,
    z: 32.95998,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Двери',
    pair: 45
  },
  '45': {
    offset: -1.2,
    mystatus: false,
    hash: 1248599813,
    x: -2342.559,
    y: 3267.387,
    z: 32.95998,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Двери',
    pair: 44
  },
  '46': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -1612.00300000,
    y: 2809.32100000,
    z: 16.47038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 47,
    unlock: true,
    alert: true
  },
  '47': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -1600.47900000,
    y: 2818.01900000,
    z: 16.57139000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 46,
    unlock: true,
    alert: true
  },
  '48': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -2285.70300000,
    y: 3382.92100000,
    z: 31.27038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 49,
    unlock: true,
    alert: true
  },
  '49': {
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01",
    x: -2294.50300000,
    y: 3372.16100000,
    z: 31.27038000,
    locked: true,
    key: 'key_usmc',
    permission: '4',
    name: 'Ворота',
    pair: 48,
    unlock: true,
    alert: true
  },
  '50': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 82.08012000,
    y: -697.96660000,
    z: 31.59820000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB',
    pair: 51
  },
  '51': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 85.73377000,
    y: -688.88400000,
    z: 31.59820000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB',
    pair: 50
  },
  '52': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door2",
    x: 138.5112,
    y: -768.8054,
    z: 242.3022,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Двери FIB 49-1'
  },
  '53': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door1",
    x: 127.8489,
    y: -760.4548,
    z: 45.90111,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Дверь FIB 1'
  },
  '54': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_door2",
    x: 127.2092,
    y: -764.6935,
    z: 242.302,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Дверь FIB 49-2'
  },
  '55': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 184.75660000,
    y: -722.41490000,
    z: 33.92741000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB 2',
    pair: 56
  },
  '56': {
    offset: -1.2,
    mystatus: false,
    hash: "Prop_Sec_barrier_LD_02a",
    x: 183.48580000,
    y: -726.46100000,
    z: 33.88072000,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'Шлакбаум FIB 2',
    pair: 55
  },
  '57': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoor",
    x: 251.1092,
    y: -1365.284,
    z: 24.55147,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 1',
    pair: 58
  },
  '58': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoor",
    x: 252.8711,
    y: -1366.762,
    z: 24.55147,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 1',
    pair: 57
  },
  '59': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassa",
    x: 267.4241,
    y: -1343.9,
    z: 24.68181,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 2',
    pair: 60
  },
  '60': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassb",
    x: 265.7706,
    y: -1345.871,
    z: 24.68181,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 2',
    pair: 59
  },
  '61': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassa",
    x: 254.3432,
    y: -1359.49,
    z: 24.68168,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 3',
    pair: 62
  },
  '62': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_doorglassb",
    x: 252.688,
    y: -1361.462,
    z: 24.68168,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 3',
    pair: 61
  },
  '63': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoorwide",
    x: 272.2175,
    y: -1361.566,
    z: 24.55153,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 5'
  },
  '64': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cor_firedoorwide",
    x: 265.0614,
    y: -1363.312,
    z: 24.55153,
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больница 6'
  },
  '65': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_l",
    x: 134.9403,
    y: -762.9027,
    z: 44.75291,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB LIFT',
    pair: 66
  },
  '66': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_r",
    x: 136.3499,
    y: -763.4158,
    z: 44.75182,
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB LIFT',
    pair: 65
  },
  '68': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(333.7885, -593.4055, 28.80277)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 69
  }),
  '69': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(334.5754, -591.2445, 28.80277)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 68
  }),
  '70': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(337.2274, -584.0469, 28.81494)), {}, {
    hash: "v_ilev_cor_firedoorwide",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы'
  }),
  '71': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(341.392, -572.5071, 28.81897)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 72
  }),
  '72': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(342.1784, -570.3473, 28.81897)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 71
  }),
  '73': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(321.0088, -559.9609, 28.88031)), {}, {
    hash: "hei_prop_heist_cutscene_doorc_r",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 74
  }),
  '74': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(318.7677, -561.0198, 28.88031)), {}, {
    hash: "hei_prop_heist_cutscene_doorc_r",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 73
  }),
  '75': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(345.0586, -567.9648, 28.82051)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 76
  }),
  '76': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(347.2267, -568.7333, 28.82051)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 75
  }),
  '77': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(346.8181, -572.0256, 28.7973)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 78
  }),
  '78': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false
  }, new mp.Vector3(346.031, -574.1888, 28.7973)), {}, {
    hash: "v_ilev_cor_firedoor",
    locked: true,
    key: 'key_emc',
    permission: '16',
    name: 'Больницы',
    pair: 77
  }),
  '79': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1851.132568359375, 3682.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 80
  }),
  '80': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1850.132568359375, 3684.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 79
  }),
  '81': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1847.132568359375, 3690.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 82
  }),
  '82': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(1849.132568359375, 3690.4052734375, 34.26708984375)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 81
  }),
  '83': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-441.48, 6012.84, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 84
  }),
  '84': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-442.92, 6011.26, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 83
  }),
  '85': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-447.81, 6006.98, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 86
  }),
  '86': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-448.98, 6008.60, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 85
  }),
  '87': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-450.12, 6016.01, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '88': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-451.26, 6006.95, 31.83)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '89': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-446.65, 6001.78, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа'
  }),
  '90': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-440.91, 6008.02, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 91
  }),
  '91': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: -2023754432
  }, new mp.Vector3(-442.31, 6009.10, 31.72)), {}, {
    locked: true,
    key: 'key_lspd',
    permission: '7',
    name: 'Офис шерифа',
    pair: 90
  }),
  '92': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-556.3757, -207.3055, 38.54186)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 93
  }),
  '93': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-557.6763, -205.053, 38.54773)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 92
  }),
  '94': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-560.6801, -199.826, 38.54251)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 95
  }),
  '95': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-559.3853, -202.0843, 38.53995)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 94
  }),
  '96': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_l"
  }, new mp.Vector3(-562.6736, -196.3704, 37.37849)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 97
  }),
  '97': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fib_doore_r"
  }, new mp.Vector3(-563.4216, -195.0782, 37.38001)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 96
  }),
  '98': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-541.8019, -187.353, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 99
  }),
  '99': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-543.1104, -185.1008, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 98
  }),
  '100': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-540.6802, -189.3759, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 101
  }),
  '101': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-539.3868, -191.6297, 38.38026)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии',
    pair: 100
  }),
  '102': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-537.7949, -192.7626, 38.3283)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии'
  }),
  '103': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ra_door2"
  }, new mp.Vector3(-543.4396, -182.9641, 38.32299)), {}, {
    locked: true,
    key: 'key_meria',
    permission: '1',
    name: 'Мэрии'
  }),
  '104': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(79.33016, -689.0258, 30.5788)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '105': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(191.0169, -727.006, 33.5188)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '106': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_gate_prison_01"
  }, new mp.Vector3(399.8277, -551.13960000, 27.5677)), {}, {
    locked: true,
    key: 'key_ems',
    permission: '16',
    name: 'EMS'
  }),
  '107': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fibl_door01"
  }, new mp.Vector3(2521.207, -416.6346, 94.5519)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 108
  }),
  '108': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_fibl_door02"
  }, new mp.Vector3(2518.207, -413.6346, 94.5519)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 107
  }),
  '109': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_05_r"
  }, new mp.Vector3(2569.207, -325.6346, 94.12363)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 110
  }),
  '110': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_05_r"
  }, new mp.Vector3(2559.207, -325.6346, 94.12363)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB',
    pair: 109
  }),
  '111': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1518.028, 851.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 112
  }),
  '112': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1515.028, 850.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 111
  }),
  '113': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1490.028, 851.5502, 181.7178)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 114
  }),
  '114': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1491.461, 853.1818, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства',
    pair: 113
  }),
  '115': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1520.761, 848.3218, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства'
  }),
  '116': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_doormaf"
  }, new mp.Vector3(-1500.631, 856.6718, 181.718)), {}, {
    locked: true,
    key: 'key_ukr',
    permission: '11',
    name: 'Украинского посольства'
  }),
  '117': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2499.446, -413.6485, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '118': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2496.587, -410.7944, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '119': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2493.942, -408.1546, 90.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '120': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_ph_cellgate"
  }, new mp.Vector3(2490.966, -405.1835, 94.25725)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '121': _objectSpread(_objectSpread({
    offset: -1.2,
    mystatus: false,
    hash: "prop_facgate_01"
  }, new mp.Vector3(2491.868, -303.4783, 91.99238)), {}, {
    locked: true,
    key: 'key_fib',
    permission: '3',
    name: 'FIB'
  }),
  '122': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn2",
    x: -1881.205,
    y: 2072.079,
    z: 141.2808,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 123
  },
  '123': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn2",
    x: -1879.324,
    y: 2071.383,
    z: 141.2808,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 122
  },
  '124': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1885.243,
    y: 2050.305,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 125
  },
  '125': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1887.559,
    y: 2051.167,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 124
  },
  '126': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1890.253,
    y: 2052.163,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 127
  },
  '127': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1887.935,
    y: 2051.317,
    z: 141.2882,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 126
  },
  '128': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1859.294,
    y: 2054.07,
    z: 141.2927,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 129
  },
  '129': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_lcn1",
    x: -1861.764,
    y: 2054.073,
    z: 141.2902,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN',
    pair: 128
  },
  '130': {
    offset: -1.2,
    mystatus: false,
    hash: "v_ilev_cm_door1",
    x: -1929.544,
    y: 2059.405,
    z: 140.9689,
    locked: true,
    key: 'key_fib',
    permission: '9',
    name: 'LCN'
  },
  '131': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1365.486,
    y: 55.81825,
    z: 54.44424,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 132
  },
  '132': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1365.654,
    y: 57.70167,
    z: 54.44412,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 131
  },
  '133': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1346.607,
    y: 59.33243,
    z: 55.69039,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 134
  },
  '134': {
    offset: -1.2,
    mystatus: false,
    hash: "door_prop_rm1",
    x: -1346.442,
    y: 57.44766,
    z: 55.69039,
    locked: true,
    key: 'key_fib',
    permission: '8',
    name: 'RM',
    pair: 133
  }
};
exports.doorsData = doorsData;
},{}],"H2nx":[function(require,module,exports) {
"use strict";

var _doors = require("../../util/doors");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let doors = _objectSpread({}, _doors.doorsData);

let pashaDoebalsyaDoImeni = false;
const player = mp.players.local;
mp.events.add({
  sendDoorsList: list => {
    if (pashaDoebalsyaDoImeni) return;
    let data = JSON.parse(list);
    data.map(item => {
      doors[item[0]].locked = item[1];
    });
    pashaDoebalsyaDoImeni = true;
  },
  sendDoorState: (id, status) => {
    if (!pashaDoebalsyaDoImeni) return;
    if (!doors[id]) return;
    doors[id].locked = status;
  }
});

function doorSync() {
  if (!pashaDoebalsyaDoImeni) return;
  let pos = player.position;

  for (let id in doors) {
    let data = doors[id];
    if (!data) return;
    if (typeof data.hash == "string") data.hash = mp.game.joaat(data.hash);

    if (data && mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, data.x, data.y, data.z, true) < 100) {
      if (mp.game.object.getClosestObjectOfType(data.x, data.y, data.z, 20.0, data.hash, false, false, false) == 0) return;
      let door = mp.game.object.getStateOfClosestDoorOfType(data.hash, data.x, data.y, data.z, 0, 0);
      if (!door) return;
      let locked = door.locked ? true : false;

      if (locked != data.locked && (locked || !locked && door.heading > -0.15 && door.heading < 0.15)) {
        mp.game.object.setStateOfClosestDoorOfType(data.hash, data.x, data.y, data.z, data.locked, 0, false);
      }
    }
  }
}

function explodeSync() {
  let pos = player.position;
  models.forEach(([x, y, z, hash, exploded, ent], index) => {
    if (hash == 3309500160) {
      if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, x, y, z, true) < 100) {
        if (exploded) {
          if (mp.objects.exists(models[index][5])) {
            models[index][5].rotation.z = 115;
            models[index][5].setRotation(models[index][5].rotation.x, models[index][5].rotation.y, 115, 2, true);
          } else {
            models[index][5] = mp.objects.new(mp.game.joaat('p_fin_vaultdoor_s'), new mp.Vector3(997.4622, 29.38926, 73.29401), {
              rotation: new mp.Vector3(0.000, 0.000, 115)
            });
          }
        } else {
          if (!mp.objects.exists(models[index][5])) {
            models[index][5] = mp.objects.new(mp.game.joaat('p_fin_vaultdoor_s'), new mp.Vector3(997.4622, 29.38926, 73.29401), {
              rotation: new mp.Vector3(0.000, 0.000, 335.000)
            });
          } else {
            models[index][5].rotation.z = 335;
            models[index][5].setRotation(models[index][5].rotation.x, models[index][5].rotation.y, 335, 2, true);
          }
        }
      } else {
        if (mp.objects.exists(models[index][5])) models[index][5].destroy();
      }
    } else if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, x, y, z, true) < 100) {
      if (hash == 2121050683) {
        let obj = mp.game.object.getClosestObjectOfType(x, y, z, 20.0, hash, false, false, false);

        if (exploded) {
          mp.game.invoke("0x1A9205C1B9EE827F", obj, false, false);
          mp.game.invoke("0xEA1C610A04DB6BBB", obj, false, 0);
        } else {
          mp.game.invoke("0x1A9205C1B9EE827F", obj, true, true);
          mp.game.invoke("0xEA1C610A04DB6BBB", obj, true, 0);
        }

        mp.game.object.deleteObject(obj);
      } else {
        mp.game.object.setStateOfClosestDoorOfType(hash, x, y, z, true, exploded ? 90 : 0, false);
      }
    }
  });
}

setInterval(function () {
  doorSync();
  explodeSync();
}, 1000);
let models = [];
mp.events.add('client:openDoorExplode', (x, y, z, hash) => {
  const itm = models.find(itm => mp.game.gameplay.getDistanceBetweenCoords(itm[0], itm[1], itm[2], x, y, z, true) < 10 && itm[3] == hash);
  if (!itm) return;
  itm[4] = true;
  if (mp.game.gameplay.getDistanceBetweenCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, x, y, z, true) > 150) return;
  mp.game.fire.addExplosion(x, y, z, 2, 20, false, false, 0);
  mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", x, y, z, "exile_1", false, 0, false);
  explodeSync();
});
mp.events.add('client:openDoorRestore', (x, y, z, hash) => {
  const itm = models.find(itm => mp.game.gameplay.getDistanceBetweenCoords(itm[0], itm[1], itm[2], x, y, z, true) < 10 && itm[3] == hash);
  if (!itm) return;
  itm[4] = false;
  explodeSync();
});
mp.events.add('client:explodeDoorsAll', data => {
  models = JSON.parse(data);
  models.forEach(itm => {
    if (itm[3] == 3309500160) {
      mp.game.entity.createModelHide(itm[0], itm[1], itm[2], 20, mp.game.joaat('p_fin_vaultdoor_s'), true);
    }

    itm[4] = false;
  });
});
},{"../../util/doors":"ukAm"}],"jKJb":[function(require,module,exports) {
"use strict";

var _gui = require("./gui");

var _methods = require("./methods");

let npcDialogList = new Map();
mp.events.add("dialog:sendlist:npc", data => {
  data.forEach(item => npcDialogList.set(item.id, item));
  const position = mp.players.local.position;
  npcDialogList.forEach(item => {
    item.ped = mp.peds.new(mp.game.joaat(item.model), item.position, item.heading, item.dimension);
    item.ped.npcDialog = item.id;
  });
});
mp.events.add("dialog:sendnew:npc", item => npcDialogList.set(item.id, item));
mp.events.add("dialog:delete:npc", id => {
  if (!npcDialogList.has(id)) return;
  let npc = npcDialogList.get(id);
  if (npc.ped) npc.ped.destroy();
  npcDialogList.delete(id);
});
let distanceForCreate = 500;
mp.events.add("npc:close", () => _gui.gui.setGui(null));
setTimeout(() => {
  mp.events.register('npc:vehicle:road', (modelped, modelveh, startpos, heading, endpos) => {
    return new Promise(resolve => {
      let vehicle = mp.vehicles.new(mp.game.joaat(modelveh), startpos, {
        heading
      });
      let q = setInterval(() => {
        if (vehicle.getHeading() - _methods.methods.parseFloat(heading) < -3 || vehicle.getHeading() - _methods.methods.parseFloat(heading) > 3) vehicle.setHeading(_methods.methods.parseFloat(heading));
      }, 100);
      let ped = mp.peds.new(mp.game.joaat(modelped), startpos, 0);
      ped.setCollision(false, false);
      let a = setInterval(() => {
        if (!ped) {
          ped = mp.peds.new(mp.game.joaat(modelped), vehicle.position, 0);
          ped.setCollision(false, false);
        }

        if (vehicle.getSpeed() < 3) {
          mp.game.invoke(_methods.methods.TASK_ENTER_VEHICLE, ped.handle, vehicle.handle, 3, -1, 0, 16);
          mp.game.invoke("0x158BB33F920D360C", ped.handle, vehicle.handle, endpos.x, endpos.y, endpos.z, 30 / 2.2, 786603, 5);
        }

        let distance = mp.game.gameplay.getDistanceBetweenCoords(endpos.x, endpos.y, endpos.z, vehicle.position.x, vehicle.position.y, vehicle.position.z, false);

        if (distance < 5) {
          clearInterval(q);
          clearInterval(a);
          resolve(true);
        }
      }, 1000);
    });
  });
}, 1000);
},{"./gui":"bk91","./methods":"qXSp"}],"GLPL":[function(require,module,exports) {
"use strict";

var _methods = require("../modules/methods");

var _methods2 = require("../../util/methods");

let checkPointsVeh = [{
  "x": -749.3578491210938,
  "y": -1288.264404296875,
  "z": 4.588924407958984,
  "h": 302.64276123046875
}, {
  "x": -685.7508544921875,
  "y": -1253.7322998046875,
  "z": 10.083617210388184,
  "h": 212.77566528320312
}, {
  "x": -656.7947387695312,
  "y": -1326.065673828125,
  "z": 10.040692329406738,
  "h": 194.47869873046875
}, {
  "x": -662.9129638671875,
  "y": -1493.6549072265625,
  "z": 10.238850593566895,
  "h": 173.14862060546875
}, {
  "x": -744.84228515625,
  "y": -1614.1146240234375,
  "z": 23.970813751220703,
  "h": 136.8641357421875
}, {
  "x": -768.5723876953125,
  "y": -1732.2086181640625,
  "z": 28.741559982299805,
  "h": 184.89529418945312
}, {
  "x": -723.853759765625,
  "y": -1874.55126953125,
  "z": 26.775035858154297,
  "h": 211.02972412109375
}, {
  "x": -121.97946166992188,
  "y": -2090.040771484375,
  "z": 25.006683349609375,
  "h": 288.79815673828125
}, {
  "x": 166.97406005859375,
  "y": -2016.370361328125,
  "z": 17.66499137878418,
  "h": 337.7317810058594
}, {
  "x": 187.1753387451172,
  "y": -1898.2216796875,
  "z": 23.1441593170166,
  "h": 64.40127563476562
}, {
  "x": 113.22127532958984,
  "y": -1845.48388671875,
  "z": 24.97246551513672,
  "h": 318.924072265625
}, {
  "x": 154.04776000976562,
  "y": -1796.0770263671875,
  "z": 28.378293991088867,
  "h": 320.28326416015625
}, {
  "x": 151.24176025390625,
  "y": -1744.63916015625,
  "z": 28.635051727294922,
  "h": 52.21820068359375
}, {
  "x": 19.214492797851562,
  "y": -1684.413330078125,
  "z": 28.82182502746582,
  "h": 110.56121826171875
}, {
  "x": -85.97415924072266,
  "y": -1722.755615234375,
  "z": 28.764490127563477,
  "h": 110.75201416015625
}, {
  "x": -193.7579345703125,
  "y": -1785.603515625,
  "z": 29.34210205078125,
  "h": 120.503662109375
}, {
  "x": -278.6326599121094,
  "y": -1826.10107421875,
  "z": 26.722946166992188,
  "h": 98.38095092773438
}, {
  "x": -419.0188293457031,
  "y": -1844.848388671875,
  "z": 19.641315460205078,
  "h": 120.04681396484375
}, {
  "x": -536.0509033203125,
  "y": -1936.068603515625,
  "z": 16.82436180114746,
  "h": 132.5162353515625
}, {
  "x": -733.7822265625,
  "y": -2144.3388671875,
  "z": 13.058256149291992,
  "h": 138.20819091796875
}, {
  "x": -835.6460571289062,
  "y": -2234.491455078125,
  "z": 17.01238441467285,
  "h": 131.35504150390625
}, {
  "x": -1079.2132568359375,
  "y": -2598.714599609375,
  "z": 19.637514114379883,
  "h": 150.81170654296875
}, {
  "x": -873.34765625,
  "y": -2656.264404296875,
  "z": 18.584218978881836,
  "h": 330.3602294921875
}, {
  "x": -760.8343505859375,
  "y": -2454.803466796875,
  "z": 13.837701797485352,
  "h": 330.9873962402344
}, {
  "x": -751.4306030273438,
  "y": -2356.884765625,
  "z": 14.38237476348877,
  "h": 44.60247802734375
}, {
  "x": -1055.8800048828125,
  "y": -2053.769287109375,
  "z": 12.69527816772461,
  "h": 42.631744384765625
}, {
  "x": -1049.700439453125,
  "y": -1912.8948974609375,
  "z": 12.554359436035156,
  "h": 312.24212646484375
}, {
  "x": -891.6286010742188,
  "y": -1754.207275390625,
  "z": 18.43243980407715,
  "h": 317.7900695800781
}, {
  "x": -775.2499389648438,
  "y": -1621.519775390625,
  "z": 14.207222938537598,
  "h": 316.5755920410156
}, {
  "x": -690.2277221679688,
  "y": -1484.5469970703125,
  "z": 10.508066177368164,
  "h": 318.98162841796875
}, {
  "x": -646.954345703125,
  "y": -1423.4423828125,
  "z": 10.153457641601562,
  "h": 355.9153137207031
}, {
  "x": -637.8133544921875,
  "y": -1331.9056396484375,
  "z": 10.147852897644043,
  "h": 345.2146301269531
}, {
  "x": -639.60791015625,
  "y": -1276.3304443359375,
  "z": 10.095355033874512,
  "h": 42.226104736328125
}, {
  "x": -698.9639892578125,
  "y": -1205.3673095703125,
  "z": 10.154378890991211,
  "h": 39.1715087890625
}, {
  "x": -754.9605712890625,
  "y": -1132.5950927734375,
  "z": 10.15291690826416,
  "h": 27.468505859375
}, {
  "x": -764.9371337890625,
  "y": -1137.3414306640625,
  "z": 10.15848445892334,
  "h": 212.17034912109375
}, {
  "x": -721.1774291992188,
  "y": -1203.6444091796875,
  "z": 10.087433815002441,
  "h": 220.8531951904297
}, {
  "x": -716.4222412109375,
  "y": -1247.6685791015625,
  "z": 9.023406028747559,
  "h": 135.54803466796875
}, {
  "x": -743.7610473632812,
  "y": -1310.8988037109375,
  "z": 4.496565818786621,
  "h": 228.7469482421875
}];
let checkPointsBoat = [{
  "x": -843.4854736328125,
  "y": -1525.5740966796875,
  "z": 0.14268499612808228,
  "h": 149.4349365234375
}, {
  "x": -910.327880859375,
  "y": -1590.6705322265625,
  "z": 0.2897007167339325,
  "h": 142.54510498046875
}, {
  "x": -945.2551879882812,
  "y": -1655.6744384765625,
  "z": 0.42398345470428467,
  "h": 148.66656494140625
}, {
  "x": -1069.0557861328125,
  "y": -1738.7752685546875,
  "z": 0.7066565155982971,
  "h": 133.9583740234375
}, {
  "x": -1138.7001953125,
  "y": -1840.8330078125,
  "z": 0.5839182138442993,
  "h": 133.80059814453125
}, {
  "x": -1273.7037353515625,
  "y": -1934.2825927734375,
  "z": 0.48002395033836365,
  "h": 131.02435302734375
}, {
  "x": -1347.0452880859375,
  "y": -1981.590576171875,
  "z": 0.39958667755126953,
  "h": 84.1041259765625
}, {
  "x": -1331.4422607421875,
  "y": -1941.0928955078125,
  "z": 0.876524031162262,
  "h": 317.1410827636719
}, {
  "x": -1297.8284912109375,
  "y": -1828.7623291015625,
  "z": 0.3042279779911041,
  "h": 26.982208251953125
}, {
  "x": -1488.599853515625,
  "y": -1530.3350830078125,
  "z": 1.1708121299743652,
  "h": 33.75445556640625
}, {
  "x": -1579.4810791015625,
  "y": -1374.201416015625,
  "z": 0.540318489074707,
  "h": 21.793609619140625
}, {
  "x": -1642.2646484375,
  "y": -1334.3758544921875,
  "z": 0.12250995635986328,
  "h": 88.20648193359375
}, {
  "x": -1787.58544921875,
  "y": -1242.0020751953125,
  "z": 1.7767339944839478,
  "h": 145.7451171875
}, {
  "x": -1860.76220703125,
  "y": -1251.474609375,
  "z": 0.8389815092086792,
  "h": 38.118316650390625
}, {
  "x": -1872.7811279296875,
  "y": -1190.86474609375,
  "z": 0.06787723302841187,
  "h": 302.6362609863281
}, {
  "x": -1819.4521484375,
  "y": -1144.7135009765625,
  "z": 0.10543298721313477,
  "h": 285.0888671875
}, {
  "x": -1909.3984375,
  "y": -1014.6152954101562,
  "z": 0.22540009021759033,
  "h": 83.5159912109375
}, {
  "x": -1963.3167724609375,
  "y": -1010.8145751953125,
  "z": 0.728124737739563,
  "h": 84.966064453125
}, {
  "x": -2056.3095703125,
  "y": -997.489013671875,
  "z": 0.7308205962181091,
  "h": 83.14068603515625
}, {
  "x": -2145.070068359375,
  "y": -1018.1329345703125,
  "z": 1.0653363466262817,
  "h": 220.34530639648438
}, {
  "x": -2048.479736328125,
  "y": -1083.657958984375,
  "z": 0.4945491552352905,
  "h": 240.57412719726562
}, {
  "x": -1905.312744140625,
  "y": -1217.4757080078125,
  "z": 1.4702568054199219,
  "h": 233.70278930664062
}, {
  "x": -1791.9149169921875,
  "y": -1315.755859375,
  "z": 0.41349953413009644,
  "h": 225.87460327148438
}, {
  "x": -1610.325439453125,
  "y": -1529.8668212890625,
  "z": 0.7556361556053162,
  "h": 212.25265502929688
}, {
  "x": -1407.2708740234375,
  "y": -1766.2147216796875,
  "z": 0.707631528377533,
  "h": 227.9028778076172
}, {
  "x": -1383.4404296875,
  "y": -1882.4132080078125,
  "z": 0.49478545784950256,
  "h": 160.4173583984375
}, {
  "x": -1292.3243408203125,
  "y": -1940.3057861328125,
  "z": 1.5613842010498047,
  "h": 271.4537353515625
}, {
  "x": -1079.470947265625,
  "y": -1824.29345703125,
  "z": 0.4594196081161499,
  "h": 300.7666320800781
}, {
  "x": -857.6038818359375,
  "y": -1646.7486572265625,
  "z": 0.24289369583129883,
  "h": 315.9606628417969
}, {
  "x": -658.09228515625,
  "y": -1519.93701171875,
  "z": 0.370772123336792,
  "h": 282.79644775390625
}, {
  "x": -404.38238525390625,
  "y": -1624.2164306640625,
  "z": 0.5839635729789734,
  "h": 223.41331481933594
}, {
  "x": 5.129403591156006,
  "y": -1981.1763916015625,
  "z": 0.23585781455039978,
  "h": 231.17868041992188
}, {
  "x": 59.980796813964844,
  "y": -2203.306396484375,
  "z": 0.5828214287757874,
  "h": 182.37872314453125
}, {
  "x": 74.32376861572266,
  "y": -2271.56982421875,
  "z": 0.44910043478012085,
  "h": 230.08953857421875
}, {
  "x": 91.84414672851562,
  "y": -2302.098388671875,
  "z": 0.1356964111328125,
  "h": 153.3046875
}, {
  "x": 31.358816146850586,
  "y": -2299.589599609375,
  "z": 0.2615305185317993,
  "h": 5.3900146484375
}, {
  "x": 49.35862731933594,
  "y": -2245.15234375,
  "z": 1.007447600364685,
  "h": 336.53192138671875
}, {
  "x": 64.1595230102539,
  "y": -2084.87109375,
  "z": 0.37403929233551025,
  "h": 1.132293701171875
}, {
  "x": -32.22599792480469,
  "y": -1947.6419677734375,
  "z": 0.26210033893585205,
  "h": 50.1851806640625
}, {
  "x": -262.205322265625,
  "y": -1779.0849609375,
  "z": 0.32993799448013306,
  "h": 56.8291015625
}, {
  "x": -353.4410095214844,
  "y": -1691.70703125,
  "z": 0.6339148879051208,
  "h": 37.145263671875
}, {
  "x": -515.240478515625,
  "y": -1550.9334716796875,
  "z": 0.28418678045272827,
  "h": 60.285430908203125
}, {
  "x": -705.6392822265625,
  "y": -1539.8148193359375,
  "z": 0.2484455108642578,
  "h": 111.89794921875
}, {
  "x": -833.3319091796875,
  "y": -1623.6920166015625,
  "z": 0.14159917831420898,
  "h": 134.74014282226562
}, {
  "x": -969.6650390625,
  "y": -1752.978759765625,
  "z": 0.4106626808643341,
  "h": 130.94903564453125
}, {
  "x": -1036.0318603515625,
  "y": -1785.013427734375,
  "z": 0.15810370445251465,
  "h": 31.146209716796875
}, {
  "x": -1038.7412109375,
  "y": -1758.1181640625,
  "z": 0.4534118175506592,
  "h": 321.387451171875
}, {
  "x": -994.380126953125,
  "y": -1705.566162109375,
  "z": 0.5613038539886475,
  "h": 317.3875732421875
}, {
  "x": -861.7073974609375,
  "y": -1591.4722900390625,
  "z": 0.3108821213245392,
  "h": 311.67974853515625
}, {
  "x": -789.2890625,
  "y": -1494.1170654296875,
  "z": 0.12122973799705505,
  "h": 291.6692810058594
}];
let checkPointsAir = [{
  "x": -1020.3011474609375,
  "y": -1714.4189453125,
  "z": 68.43486785888672,
  "h": 129.24566650390625
}, {
  "x": -1333.97900390625,
  "y": -1712.8111572265625,
  "z": 129.5446014404297,
  "h": 77.43316650390625
}, {
  "x": -2086.46044921875,
  "y": -1190.4715576171875,
  "z": 112.83696746826172,
  "h": 49.431610107421875
}, {
  "x": -2609.74609375,
  "y": -659.0928344726562,
  "z": 131.489013671875,
  "h": 45.40313720703125
}, {
  "x": -3068.503173828125,
  "y": -185.5432891845703,
  "z": 163.61529541015625,
  "h": 15.978790283203125
}, {
  "x": -3145.443603515625,
  "y": 760.2889404296875,
  "z": 182.3647918701172,
  "h": 359.3790588378906
}, {
  "x": -2794.921630859375,
  "y": 1334.16455078125,
  "z": 194.7210235595703,
  "h": 292.7320556640625
}, {
  "x": -2292.435302734375,
  "y": 1522.615478515625,
  "z": 324.81591796875,
  "h": 288.28350830078125
}, {
  "x": -1856.1224365234375,
  "y": 1312.503662109375,
  "z": 409.8414611816406,
  "h": 210.72532653808594
}, {
  "x": -1645.6126708984375,
  "y": 424.9974365234375,
  "z": 409.12030029296875,
  "h": 199.3463592529297
}, {
  "x": -1335.18994140625,
  "y": -536.740966796875,
  "z": 441.5110168457031,
  "h": 206.50570678710938
}, {
  "x": -779.4417724609375,
  "y": -1246.5718994140625,
  "z": 402.1397399902344,
  "h": 253.79261779785156
}, {
  "x": -566.6782836914062,
  "y": -1494.886474609375,
  "z": 227.82302856445312,
  "h": 140.40606689453125
}, {
  "x": -674.5396728515625,
  "y": -1549.279052734375,
  "z": 164.90036010742188,
  "h": 51.26031494140625
}, {
  "x": -723.500732421875,
  "y": -1472.4066162109375,
  "z": 4.9044084548950195,
  "h": 229.59410095214844
}];
let vehSpeedLimit = 100;
let vehWarning = 3;
let checkSize = 5;
let end = true;
let vehid = 0;
let cdexitVeh = 30;
setTimeout(() => {
  mp.events.register("server:autoschool:practice", (type, vehicleid, auto = false) => {
    return new Promise(async resolve => {
      vehid = vehicleid;
      let player = mp.players.local;
      let checkpoints = [];
      let check;
      let blip;
      let currentCheckID = 0;
      let checkBlip = 2;
      let checkBlipFinish = 4;
      vehWarning = 3;
      mp.game.ui.notifications.show("Приступайте к выполнению");
      mp.game.ui.notifications.show("Не забудьте пристегнутся [X]");

      if (type.length == 1) {
        checkpoints = checkPointsVeh;
      } else if (type == "ship") {
        checkpoints = checkPointsBoat;
      } else if (type == "air") {
        checkpoints = checkPointsAir;
      }

      end = false;
      let interval = setInterval(() => {
        if (end) {
          cdexitVeh = 30;
          clearInterval(interval);
        } else if (mp.players.local.vehicle && mp.players.local.vehicle.remoteId == vehid) {
          cdexitVeh = 30;
        } else {
          cdexitVeh--;
          mp.game.ui.notifications.show("Вернитесь в учебный ТС (" + (cdexitVeh + 1) + ")");

          if (cdexitVeh == 0) {
            resolve(false);
            end = true;
            clearInterval(interval);
          }
        }
      }, 1000);

      while (!end) {
        let checkdata = {
          x: _methods.methods.parseFloat(checkpoints[currentCheckID].x),
          y: _methods.methods.parseFloat(checkpoints[currentCheckID].y),
          z: _methods.methods.parseFloat(checkpoints[currentCheckID].z)
        };
        let checkdataNext = {
          x: _methods.methods.parseFloat(checkpoints[currentCheckID].x),
          y: _methods.methods.parseFloat(checkpoints[currentCheckID].y),
          z: _methods.methods.parseFloat(checkpoints[currentCheckID].z)
        };

        if (currentCheckID != checkpoints.length - 1) {
          checkdataNext = {
            x: _methods.methods.parseFloat(checkpoints[currentCheckID + 1].x),
            y: _methods.methods.parseFloat(checkpoints[currentCheckID + 1].y),
            z: _methods.methods.parseFloat(checkpoints[currentCheckID + 1].z)
          };
        }

        check = mp.checkpoints.new(currentCheckID == checkpoints.length - 1 ? checkBlipFinish : checkBlip, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z - 1), checkSize + 0.0001, {
          direction: currentCheckID == checkpoints.length - 1 ? new mp.Vector3(0, 0, 75) : new mp.Vector3(checkdataNext.x, checkdataNext.y, checkdataNext.z),
          color: [255, 255, 0, 60],
          visible: true,
          dimension: player.dimension
        });
        blip = mp.blips.new(currentCheckID == checkpoints.length - 1 ? 611 : 1, new mp.Vector3(checkdata.x, checkdata.y, checkdata.z), {
          name: !checkdataNext ? 'Финишная точка' : 'Контрольная точка',
          color: 5,
          shortRange: false,
          dimension: player.dimension
        });
        blip.setRoute(true);
        let reached = false;

        while (!reached) {
          let distance = mp.game.gameplay.getDistanceBetweenCoords(checkdata.x, checkdata.y, checkdata.z, player.position.x, player.position.y, player.position.z, false);

          if (distance < checkSize + 0.8) {
            if (player.vehicle && player.vehicle.remoteId == vehicleid) {
              reached = true;
              mp.game.audio.playSound(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false, 0, true);
            } else {
              await (0, _methods2.wait)(10);
            }
          } else {
            await (0, _methods2.wait)(10);
          }

          if (end) {
            if (blip) blip.destroy(), blip = null;
            if (check) check.destroy(), check = null;
            reached = true;
          }
        }

        if (blip) blip.destroy(), blip = null;
        if (check) check.destroy(), check = null;

        if (currentCheckID == checkpoints.length - 1) {
          end = true;
          resolve(true);
        } else {
          currentCheckID++;
        }
      }
    });
  });
}, 100);
},{"../modules/methods":"qXSp","../../util/methods":"Z5QB"}],"YrmO":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const CamerasManagerInfo = {
  gameplayCamera: null,
  activeCamera: null,
  interpCamera: null,
  interpActive: false,
  _events: new Map(),
  cameras: new Map([['testCamera', mp.cameras.new('default', new mp.Vector3(0, 0, 0), new mp.Vector3(0, 0, 0), 50.0)]])
};
mp.events.add('render', () => {
  if (CamerasManagerInfo.interpCamera && CamerasManager.doesExist(CamerasManagerInfo.interpCamera) && !CamerasManagerInfo.activeCamera.isInterpolating()) {
    CamerasManager.fireEvent('stopInterp', CamerasManagerInfo.activeCamera);
    CamerasManagerInfo.interpCamera.setActive(false);
    CamerasManagerInfo.interpCamera.destroy();
    CamerasManagerInfo.interpCamera = null;
  }
});

const cameraSerialize = camera => {
  camera.setActiveCamera = toggle => {
    CamerasManager.setActiveCamera(camera, toggle);
  };

  camera.setActiveCameraWithInterp = (position, rotation, duration, easeLocation, easeRotation) => {
    CamerasManager.setActiveCameraWithInterp(camera, position, rotation, duration, easeLocation, easeRotation);
  };
};

class CamerasManager {
  static on(eventName, eventFunction) {
    if (CamerasManagerInfo._events.has(eventName)) {
      const event = CamerasManagerInfo._events.get(eventName);

      if (!event.has(eventFunction)) {
        event.add(eventFunction);
      }
    } else {
      CamerasManagerInfo._events.set(eventName, new Set([eventFunction]));
    }
  }

  static fireEvent(eventName, ...args) {
    if (CamerasManagerInfo._events.has(eventName)) {
      const event = CamerasManagerInfo._events.get(eventName);

      event.forEach(eventFunction => {
        eventFunction(...args);
      });
    }
  }

  static getCamera(name) {
    const camera = CamerasManagerInfo.cameras.get(name);

    if (typeof camera.setActiveCamera !== 'function') {
      cameraSerialize(camera);
    }

    return camera;
  }

  static setCamera(name, camera) {
    CamerasManagerInfo.cameras.set(name, camera);
  }

  static hasCamera(name) {
    return CamerasManagerInfo.cameras.has(name);
  }

  static destroyCamera(camera) {
    if (this.doesExist(camera)) {
      if (camera === this.activeCamera) {
        this.activeCamera.setActive(false);
      }

      camera.destroy();
    }
  }

  static createCamera(name, type, position, rotation, fov, target, mode, time) {
    const cam = mp.cameras.new(type, position, target ? new mp.Vector3(0, 0, 0) : rotation, fov);

    if (target) {
      let int = setInterval(() => {
        let targetEnt;
        if (mode == "Смотреть на ТС") targetEnt = mp.vehicles.atRemoteId(target);
        if (mode == "Смотреть на игрока") targetEnt = mp.players.atRemoteId(target);
        if (targetEnt) cam.pointAt(targetEnt.handle, 0, 0, 0, true);
      }, 10);
      setTimeout(() => {
        clearInterval(int);
      }, time);
    }

    cameraSerialize(cam);
    CamerasManagerInfo.cameras.set(name, cam);
    return cam;
  }

  static setActiveCamera(activeCamera, toggle) {
    if (!toggle) {
      if (this.doesExist(CamerasManagerInfo.activeCamera)) {
        CamerasManagerInfo.activeCamera = null;
        activeCamera.setActive(false);
        mp.game.cam.renderScriptCams(false, false, 0, false, false);
      }

      if (this.doesExist(CamerasManagerInfo.interpCamera)) {
        CamerasManagerInfo.interpCamera.setActive(false);
        CamerasManagerInfo.interpCamera.destroy();
        CamerasManagerInfo.interpCamera = null;
      }
    } else {
      if (this.doesExist(CamerasManagerInfo.activeCamera)) {
        CamerasManagerInfo.activeCamera.setActive(false);
      }

      CamerasManagerInfo.activeCamera = activeCamera;
      activeCamera.setActive(true);
      mp.game.cam.renderScriptCams(true, false, 0, false, false);
    }
  }

  static setActiveCameraWithInterp(activeCamera, position, rotationOrTarget, duration, easeLocation, easeRotation, target, mode, time) {
    if (this.doesExist(CamerasManagerInfo.activeCamera)) {
      CamerasManagerInfo.activeCamera.setActive(false);
    }

    if (this.doesExist(CamerasManagerInfo.interpCamera)) {
      CamerasManager.fireEvent('stopInterp', CamerasManagerInfo.interpCamera);
      CamerasManagerInfo.interpCamera.setActive(false);
      CamerasManagerInfo.interpCamera.destroy();
      CamerasManagerInfo.interpCamera = null;
    }

    const interpCamera = mp.cameras.new('default', activeCamera.getCoord(), activeCamera.getRot(2), activeCamera.getFov());
    activeCamera.setCoord(position.x, position.y, position.z);

    if (target) {
      let int = setInterval(() => {
        let targetEnt;
        if (mode == "Смотреть на ТС") targetEnt = mp.vehicles.atRemoteId(target);
        if (mode == "Смотреть на игрока") targetEnt = mp.players.atRemoteId(target);
        if (targetEnt) activeCamera.pointAt(targetEnt.handle, 0, 0, 0, true);
      }, 10);
      setTimeout(() => {
        clearInterval(int);
      }, time);
    } else activeCamera.setRot(rotationOrTarget.x, rotationOrTarget.y, rotationOrTarget.z, 2);

    activeCamera.stopPointing();
    CamerasManagerInfo.activeCamera = activeCamera;
    CamerasManagerInfo.interpCamera = interpCamera;
    activeCamera.setActiveWithInterp(interpCamera.handle, duration, easeLocation, easeRotation);
    mp.game.cam.renderScriptCams(true, false, 0, false, false);
    CamerasManager.fireEvent('startInterp', CamerasManagerInfo.interpCamera);
  }

  static doesExist(camera) {
    return mp.cameras.exists(camera) && camera.doesExist();
  }

  static get activeCamera() {
    return CamerasManagerInfo.activeCamera;
  }

  static get gameplayCam() {
    if (!CamerasManagerInfo.gameplayCamera) {
      CamerasManagerInfo.gameplayCamera = mp.cameras.new("gameplay");
    }

    return CamerasManagerInfo.gameplayCamera;
  }

}

var _default = CamerasManager;
exports.default = _default;
},{}],"zg97":[function(require,module,exports) {
"use strict";

var _cameraManager = _interopRequireDefault(require("./cameraManager"));

var _ui = require("../modules/ui");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

setTimeout(() => {
  mp.events.register("camera:rotationCamera", () => {
    return new Promise(resolve => {
      resolve(_cameraManager.default.gameplayCam.getRot(2));
    });
  });
  mp.events.register("camera:start", settings => {
    return new Promise(resolve => {
      _ui.ui.hideHud();

      mp.game.ui.displayHud(false);

      let camera = _cameraManager.default.createCamera('recordCamera', 'default', settings.pos1, settings.rot1 ? settings.rot1 : new mp.Vector3(0, 0, 0), settings.fov, settings.target, settings.mode, settings.duration * 1000);

      _cameraManager.default.setActiveCameraWithInterp(camera, settings.pos2, settings.rot2 ? settings.rot2 : new mp.Vector3(0, 0, 0), settings.duration * 1000, 0, 0, settings.target, settings.mode, settings.duration * 1000);

      setTimeout(() => {
        mp.game.cam.renderScriptCams(false, false, 0, false, false);

        _cameraManager.default.destroyCamera(camera);

        resolve(true);

        _ui.ui.showHud();

        mp.game.ui.displayHud(true);
      }, settings.duration * 1000 + 1000);
    });
  });
}, 1000);
},{"./cameraManager":"YrmO","../modules/ui":"zOnK"}],"VXTb":[function(require,module,exports) {
const player = mp.players.local;
let regs = false;
mp.events.add('renderHalf', () => {
  if (regs) return;
  if (!player.vehicle) return;
  const veh = player.vehicle;
  let obj = mp.game.object.getClosestObjectOfType(player.vehicle.position.x, player.vehicle.position.y, player.vehicle.position.z, 10.0, -596599738, false, false, false);
  if (!obj) return;

  if (veh.isTouching(obj)) {
    regs = true;
    veh.setTyreBurst(0, false, 1000);
    veh.setTyreBurst(1, false, 1000);
    veh.setTyreBurst(4, false, 1000);
    veh.setTyreBurst(5, false, 1000);
    veh.setBurnout(true);
    setTimeout(_ => {
      veh.setBurnout(false);
      setTimeout(_ => {
        regs = false;
      }, 2000);
    }, 2000);
  }
});
},{}],"Dmc2":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesMeta = exports.slotMachinesMeta = void 0;
const slotMachinesMeta = [{
  type: 4,
  position: new mp.Vector3(1100.483, 230.4082, -50.8409),
  heading: 45
}, {
  type: 5,
  position: new mp.Vector3(1100.939, 231.0017, -50.8409),
  heading: 60
}, {
  type: 6,
  position: new mp.Vector3(1101.221, 231.6943, -50.8409),
  heading: 75
}, {
  type: 7,
  position: new mp.Vector3(1101.323, 232.4321, -50.8409),
  heading: 90
}, {
  type: 8,
  position: new mp.Vector3(1101.229, 233.1719, -50.8409),
  heading: 105
}, {
  type: 1,
  position: new mp.Vector3(1108.938, 239.4797, -50.8409),
  heading: -45
}, {
  type: 2,
  position: new mp.Vector3(1109.536, 239.0278, -50.8409),
  heading: -30
}, {
  type: 3,
  position: new mp.Vector3(1110.229, 238.7428, -50.8409),
  heading: -15
}, {
  type: 4,
  position: new mp.Vector3(1110.974, 238.642, -50.8409),
  heading: 0
}, {
  type: 5,
  position: new mp.Vector3(1111.716, 238.7384, -50.8409),
  heading: 15
}, {
  type: 6,
  position: new mp.Vector3(1112.407, 239.0216, -50.8409),
  heading: 30
}, {
  type: 7,
  position: new mp.Vector3(1112.999, 239.4742, -50.8409),
  heading: 45
}, {
  type: 1,
  position: new mp.Vector3(1120.853, 233.1621, -50.8409),
  heading: -105
}, {
  type: 2,
  position: new mp.Vector3(1120.753, 232.4272, -50.8409),
  heading: -90
}, {
  type: 3,
  position: new mp.Vector3(1120.853, 231.6886, -50.8409),
  heading: -75
}, {
  type: 4,
  position: new mp.Vector3(1121.135, 230.9999, -50.8409),
  heading: -60
}, {
  type: 5,
  position: new mp.Vector3(1121.592, 230.4106, -50.8409),
  heading: -45
}, {
  type: 4,
  position: new mp.Vector3(1104.572, 229.4451, -50.8409),
  heading: -36
}, {
  type: 5,
  position: new mp.Vector3(1104.302, 230.3183, -50.8409),
  heading: -108
}, {
  type: 1,
  position: new mp.Vector3(1105.049, 230.845, -50.8409),
  heading: 180
}, {
  type: 2,
  position: new mp.Vector3(1105.781, 230.2973, -50.8409),
  heading: 108
}, {
  type: 3,
  position: new mp.Vector3(1105.486, 229.4322, -50.8409),
  heading: 36
}, {
  type: 7,
  position: new mp.Vector3(1108.005, 233.9177, -50.8409),
  heading: -36
}, {
  type: 8,
  position: new mp.Vector3(1107.735, 234.7909, -50.8409),
  heading: -108
}, {
  type: 4,
  position: new mp.Vector3(1108.482, 235.3176, -50.8409),
  heading: 180
}, {
  type: 5,
  position: new mp.Vector3(1109.214, 234.7699, -50.8409),
  heading: 108
}, {
  type: 6,
  position: new mp.Vector3(1108.919, 233.9048, -50.8409),
  heading: 36
}, {
  type: 4,
  position: new mp.Vector3(1113.64, 233.6755, -50.8409),
  heading: -36
}, {
  type: 5,
  position: new mp.Vector3(1113.37, 234.5486, -50.8409),
  heading: -108
}, {
  type: 1,
  position: new mp.Vector3(1114.117, 235.0753, -50.8409),
  heading: 180
}, {
  type: 2,
  position: new mp.Vector3(1114.848, 234.5277, -50.8409),
  heading: 108
}, {
  type: 3,
  position: new mp.Vector3(1114.554, 233.6625, -50.8409),
  heading: 36
}, {
  type: 7,
  position: new mp.Vector3(1116.662, 228.8896, -50.8409),
  heading: -36
}, {
  type: 8,
  position: new mp.Vector3(1116.392, 229.7628, -50.8409),
  heading: -108
}, {
  type: 4,
  position: new mp.Vector3(1117.139, 230.2895, -50.8409),
  heading: 180
}, {
  type: 5,
  position: new mp.Vector3(1117.871, 229.7419, -50.8409),
  heading: 108
}, {
  type: 6,
  position: new mp.Vector3(1117.576, 228.8767, -50.8409),
  heading: 36
}, {
  type: 8,
  position: new mp.Vector3(1129.64, 250.451, -52.0409),
  heading: 180
}, {
  type: 7,
  position: new mp.Vector3(1130.376, 250.3577, -52.0409),
  heading: 165
}, {
  type: 6,
  position: new mp.Vector3(1131.062, 250.0776, -52.0409),
  heading: 150
}, {
  type: 5,
  position: new mp.Vector3(1131.655, 249.6264, -52.0409),
  heading: 135
}, {
  type: 4,
  position: new mp.Vector3(1132.109, 249.0355, -52.0409),
  heading: 120
}, {
  type: 3,
  position: new mp.Vector3(1132.396, 248.3382, -52.0409),
  heading: 105
}, {
  type: 2,
  position: new mp.Vector3(1132.492, 247.5984, -52.0409),
  heading: 90
}, {
  type: 3,
  position: new mp.Vector3(1133.952, 256.1037, -52.0409),
  heading: -45
}, {
  type: 4,
  position: new mp.Vector3(1133.827, 256.9098, -52.0409),
  heading: -117
}, {
  type: 5,
  position: new mp.Vector3(1134.556, 257.2778, -52.0409),
  heading: 171
}, {
  type: 1,
  position: new mp.Vector3(1135.132, 256.699, -52.0409),
  heading: 99
}, {
  type: 2,
  position: new mp.Vector3(1134.759, 255.9734, -52.0409),
  heading: 27
}, {
  type: 6,
  position: new mp.Vector3(1138.195, 251.8611, -52.0409),
  heading: -45
}, {
  type: 7,
  position: new mp.Vector3(1138.07, 252.6677, -52.0409),
  heading: -117
}, {
  type: 8,
  position: new mp.Vector3(1138.799, 253.0363, -52.0409),
  heading: 171
}, {
  type: 4,
  position: new mp.Vector3(1139.372, 252.4563, -52.0409),
  heading: 99
}, {
  type: 5,
  position: new mp.Vector3(1139, 251.7306, -52.0409),
  heading: 27
}];
exports.slotMachinesMeta = slotMachinesMeta;
const typesMeta = {
  [1]: {
    bet: 100,
    model: 'vw_prop_casino_slot_01a'
  },
  [2]: {
    bet: 25,
    model: 'vw_prop_casino_slot_02a'
  },
  [3]: {
    bet: 25,
    model: 'vw_prop_casino_slot_03a'
  },
  [4]: {
    bet: 5,
    model: 'vw_prop_casino_slot_04a'
  },
  [5]: {
    bet: 500,
    model: 'vw_prop_casino_slot_05a'
  },
  [6]: {
    bet: 100,
    model: 'vw_prop_casino_slot_06a'
  },
  [7]: {
    bet: 500,
    model: 'vw_prop_casino_slot_07a'
  },
  [8]: {
    bet: 5,
    model: 'vw_prop_casino_slot_08a'
  }
};
exports.typesMeta = typesMeta;
},{}],"Ikcx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
const mapWinMultiplier = {
  'number': 35,
  'trio': 11,
  'dozen': 2,
  'small': 1,
  'even': 1,
  'red': 1,
  'black': 1,
  'odd': 1,
  'big': 1,
  'column': 2,
  'split': 17,
  'five-numbers': 6,
  'six-numbers': 5,
  'square': 8,
  'straight': 11
};

const createRulesObject = (title, type, winNumbers) => ({
  multiplier: mapWinMultiplier[type],
  title,
  type,
  winNumbers
});

const rules = {
  '0-1-37': createRulesObject('Трио', 'trio', [0, 1, 37]),
  '1-36-37': createRulesObject('Трио', 'trio', [1, 36, 37]),
  '1-2-36': createRulesObject('Трио', 'trio', [1, 2, 36]),
  '0-37': createRulesObject('Сплит', 'split', [0, 37]),
  '1-37': createRulesObject('Сплит', 'split', [1, 37]),
  '1-36': createRulesObject('Сплит', 'split', [1, 36]),
  '2-36': createRulesObject('Сплит', 'split', [2, 36]),
  '50': createRulesObject('Сплит', 'split', [36, 37]),
  '36-37': createRulesObject('Сплит', 'split', [36, 37]),
  '36': createRulesObject('Double zero', 'split', [36]),
  '37': createRulesObject('Zero', 'split', [37]),
  '38': createRulesObject('Дюжина 1', 'dozen', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),
  '39': createRulesObject('Дюжина 2', 'dozen', [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]),
  '40': createRulesObject('Дюжина 3', 'dozen', [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '41': createRulesObject('Малые', 'small', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]),
  '42': createRulesObject('Четные', 'even', [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]),
  '43': createRulesObject('Красные', 'red', [0, 2, 4, 6, 8, 11, 13, 15, 17, 18, 20, 22, 24, 26, 29, 31, 33, 35]),
  '44': createRulesObject('Черные', 'black', [1, 3, 5, 7, 9, 10, 12, 14, 16, 19, 21, 23, 25, 27, 28, 30, 32, 34]),
  '45': createRulesObject('Нечетные', 'odd', [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]),
  '46': createRulesObject('Большие', 'big', [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]),
  '47': createRulesObject('Колонна 1', 'column', [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]),
  '48': createRulesObject('Колонна 2', 'column', [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34]),
  '49': createRulesObject('Колонна 3', 'column', [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]),
  '50-51': createRulesObject('5 номеров', 'five-numbers', [37, 38, 0, 1, 2])
};

for (let i = 0; i < 36; i++) {
  rules[i] = createRulesObject(`${i + 1} ${redNumbers.includes(i + 1) ? 'красное' : 'черное'}`, 'number', [i]);
}

for (let i = 0; i < 11; i++) {
  const ix3 = i * 3;
  const rulesSquareFirst = [ix3, ix3 + 1, ix3 + 3, ix3 + 4];
  const rulesSquareSecond = [ix3 + 1, ix3 + 2, ix3 + 4, ix3 + 5];
  rules[rulesSquareFirst.join('-')] = createRulesObject('Каре', 'square', rulesSquareFirst);
  rules[rulesSquareSecond.join('-')] = createRulesObject('Каре', 'square', rulesSquareSecond);
  const splitFirst = [ix3, ix3 + 3];
  const splitSecond = [ix3 + 1, ix3 + 4];
  const splitThree = [ix3 + 2, ix3 + 5];
  rules[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  rules[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
  rules[splitThree.join('-')] = createRulesObject('Сплит', 'split', splitThree);
}

for (let i = 0; i < 12; i++) {
  const ix3 = i * 3;
  const splitFirst = [ix3, ix3 + 1];
  const splitSecond = [ix3 + 1, ix3 + 2];
  rules[splitFirst.join('-')] = createRulesObject('Сплит', 'split', splitFirst);
  rules[splitSecond.join('-')] = createRulesObject('Сплит', 'split', splitSecond);
}

for (let i = 51; i < 63; i++) {
  const j = i - 51;
  const jx3 = j * 3;
  rules[i] = createRulesObject('Стрит', 'straight', [jx3, jx3 + 1, jx3 + 2]);

  if (i !== 62) {
    const nextJ = (i - 50) * 3;
    rules[`${i}-${i + 1}`] = createRulesObject('6 номеров', 'six-numbers', [jx3, jx3 + 1, jx3 + 2, nextJ, nextJ + 1, nextJ + 2]);
  }
}

const getChipTypeByBalance = (table, balance) => {
  for (let i = table.chipTypePrices.length - 1; i >= 0; i--) {
    const chipPrice = table.chipTypePrices[i];

    if (balance >= chipPrice) {
      return i;
    }
  }
};

const mapAnims = {
  [36]: 1,
  [26]: 2,
  [9]: 3,
  [24]: 4,
  [28]: 5,
  [11]: 6,
  [7]: 7,
  [18]: 8,
  [12]: 37,
  [17]: 10,
  [5]: 11,
  [20]: 12,
  [32]: 13,
  [15]: 14,
  [3]: 15,
  [22]: 16,
  [34]: 17,
  [13]: 18,
  [1]: 19,
  [37]: 20,
  [27]: 21,
  [8]: 22,
  [25]: 23,
  [29]: 24,
  [10]: 25,
  [6]: 26,
  [19]: 27,
  [31]: 28,
  [16]: 29,
  [4]: 30,
  [21]: 31,
  [33]: 32,
  [14]: 33,
  [2]: 34,
  [23]: 35,
  [35]: 36,
  [30]: 9,
  [0]: 38
};
const positions = [{
  position: new mp.Vector3(1146.247802734375, 267.0387268066406, -52.84086990356445),
  heading: 228,
  chipTypePrices: [100, 250, 750, 1000],
  isVip: false
}, {
  position: new mp.Vector3(1149.006103515625, 264.03985595703125, -52.84086990356445),
  heading: 45,
  chipTypePrices: [10, 25, 75, 100],
  isVip: false
}];

const insidePolygon = (point, vs) => {
  var x = point[0],
      y = point[1];
  var inside = false;

  for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {
    var xi = vs[i][0],
        yi = vs[i][1];
    var xj = vs[j][0],
        yj = vs[j][1];
    var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) inside = !inside;
  }

  return inside;
};

const lerp = (v1, v2, deltaTime) => (1 - deltaTime) * v1 + deltaTime * v2;

var _default = {
  getChipTypeByBalance,
  insidePolygon,
  lerp,
  redNumbers,
  mapWinMultiplier,
  rules,
  mapAnims,
  positions
};
exports.default = _default;
},{}],"XMgA":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inCasino = void 0;

var _helpers = _interopRequireDefault(require("../../../shared/casino_roulette/helpers"));

var _cameraManager = _interopRequireDefault(require("../../managers/cameraManager"));

var _gui = require("../gui");

var _user = require("../../user");

var _methods = require("../methods");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const camera = _cameraManager.default.hasCamera('casino_roulette') ? _cameraManager.default.getCamera('casino_roulette') : _cameraManager.default.createCamera('casino', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
let inCasino = false;
exports.inCasino = inCasino;
const interiors = [274689, 275201];
setInterval(() => {
  if (!_user.user.isLogin()) return;
  let inint = interiors.indexOf(mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z)) > -1;

  if (inint != inCasino) {
    exports.inCasino = inCasino = inint;

    _gui.gui.browser.execute(`CEF.hud.setCasinoInt(${inCasino ? 'true' : 'false'});`);
  }
}, 500);
const GRID_START_X = -0.057;
const GRID_START_Y = -0.192;
const GRID_START_Z = 0.9448;
const CELL_SIZE_X = 0.081;
const CELL_SIZE_X_05 = 0.081 / 2;
const CELL_SIZE_Y = 0.167;
const CELL_SIZE_Y_05 = 0.167 / 2;
const CELL_SIZE_Y_07 = CELL_SIZE_Y * 0.7;
const CELL_OFFSET_X = 0.015;
const CELL_OFFSET_Y = 0.02;
const GRID_CENTER_X = 0.39;
const GRID_CENTER_Y = -0.02;
const RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36];
const MAX_BETS = 10;
const chipTypeModels = ['vw_prop_chip_10dollar_x1', 'vw_prop_chip_50dollar_x1', 'vw_prop_chip_100dollar_x1', 'vw_prop_chip_500dollar_x1', 'vw_prop_chip_1kdollar_x1', 'vw_prop_chip_5kdollar_x1', 'vw_prop_chip_10kdollar_x1'];
const stateNames = ['Ожидание', 'Ставки сделаны', 'Запуск...'];
const thisInfo = {
  isActive: false,
  ballObject: null,
  currentTable: null,
  tables: [],
  chipObject: null,
  markerObjects: new Map(),
  chipPosition: new mp.Vector3(0, 0, 0),
  cellsData: [],
  selectedIds: [],
  otherBets: new Map(),
  myBets: new Map(),
  currentChipType: 0,
  cameraOnWheel: false,
  waitBet: false,
  lastSelectedBetKey: '',
  lastCurrentBet: 0,
  endActionTime: null,
  lastActionTimeSeconds: 0,
  lastPosition: new mp.Vector3(0, 0, 0)
};
const SITS_POSITIONS = {
  [0]: [-0.22, -0.9, 0.7, 0],
  [1]: [0.76, -0.9, 0.7, 0],
  [2]: [1.4, -0.13, 0.7, 90],
  [3]: [0.76, 0.65, 0.7, 180]
};
mp.keys.bind(0x45, true, () => {
  if (_gui.gui.chatActive) return;
  if (!_user.user.isLogin()) return;

  if (!_methods.methods.isBlockKeys() && _gui.gui.currentGui !== 'casino') {
    mp.events.callRemote('onPressKeyCasino:e');
  }
});
const timerLoadAnimDict = setInterval(() => {
  if (!mp.game.streaming.hasAnimDictLoaded('anim_casino_b@amb@casino@games@roulette@table')) {
    mp.game.streaming.requestAnimDict('anim_casino_b@amb@casino@games@roulette@table');
    return;
  }

  clearInterval(timerLoadAnimDict);
}, 500);

const createTable = (color, position, heading, chipTypePrices) => {
  const model = 'vw_prop_casino_roulette_01';
  const tableObject = mp.objects.new(mp.game.joaat(model), position, {
    dimension: -1,
    rotation: new mp.Vector3(0, 0, heading)
  });
  mp.game.invoke('0x971DA0055324D033', tableObject.handle, color);
  thisInfo.tables.push({
    tableObject,
    position,
    heading,
    model,
    chipTypePrices
  });
};

for (let i = 0; i < _helpers.default.positions.length; i++) {
  const positionInfo = _helpers.default.positions[i];
  createTable(1, positionInfo.position, positionInfo.heading, positionInfo.chipTypePrices);
}

const generateTableCells = entity => {
  const cells = [];

  for (let i = 0; i < 12; i++) {
    for (let j = 0; j < 3; j++) {
      const id = cells.length;
      const bottomOffset = i === 11 ? -CELL_OFFSET_X : 0;
      const leftOffset = j === 0 ? CELL_OFFSET_Y * 2 : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X - CELL_SIZE_X_05) - CELL_OFFSET_X, GRID_START_Y + (j * CELL_SIZE_Y - CELL_SIZE_Y_05) - CELL_OFFSET_Y + leftOffset, GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X - CELL_SIZE_X_05) - CELL_OFFSET_X, GRID_START_Y + (j * CELL_SIZE_Y + CELL_SIZE_Y_05) + CELL_OFFSET_Y, GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X + bottomOffset, GRID_START_Y + (j * CELL_SIZE_Y - CELL_SIZE_Y_05) - CELL_OFFSET_Y + leftOffset, GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (i * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X + bottomOffset, GRID_START_Y + (j * CELL_SIZE_Y + CELL_SIZE_Y_05) + CELL_OFFSET_Y, GRID_START_Z);
      const markerPos = entity.getOffsetFromInWorldCoords(GRID_START_X + i * CELL_SIZE_X, GRID_START_Y + j * CELL_SIZE_Y, GRID_START_Z);
      cells.push({
        id,
        coloredId: RED_NUMBERS.includes(id + 1) ? `~r~${id + 1}` : `~c~${id + 1}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        markerPos,
        isActive: false
      });
    }
  }

  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, 0.107 - CELL_SIZE_Y_07 - CELL_OFFSET_Y, GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, 0.107 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, 0.107 - CELL_SIZE_Y_07 - CELL_OFFSET_Y, GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, 0.107 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, GRID_START_Z);
    const markerPos = entity.getOffsetFromInWorldCoords(-0.137, 0.107, GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~g~Double zero`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      markerPos,
      isActive: false
    });
  })();

  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, -0.148 - CELL_SIZE_Y_07 + CELL_OFFSET_Y * 0.5, GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, -0.148 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, -0.148 - CELL_SIZE_Y_07 + CELL_OFFSET_Y * 0.5, GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, -0.148 + CELL_SIZE_Y_07 + CELL_OFFSET_Y, GRID_START_Z);
    const markerPos = entity.getOffsetFromInWorldCoords(-0.137, -0.148, GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~g~zero`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      markerPos,
      isActive: false
    });
  })();

  (() => {
    for (let i = 0; i < 3; i++) {
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y * 0.8 - CELL_OFFSET_Y * 0.2, GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 4, GRID_START_Y - CELL_SIZE_Y * 0.8 - CELL_OFFSET_Y * 0.2, GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 4 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 4, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
      const hoverItems = [];

      for (let j = i * 12; j < (i + 1) * 12; j++) {
        hoverItems.push(j);
      }

      cells.push({
        id: cells.length,
        coloredId: `~c~${i * 12}-${(i + 1) * 12}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();

  (() => {
    for (let i = 0; i < 6; i++) {
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y - CELL_SIZE_Y * 0.4, GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y * 0.6 - CELL_SIZE_Y * 0.4, GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 2, GRID_START_Y - CELL_SIZE_Y - CELL_SIZE_Y * 0.4, GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * 2 * i - CELL_SIZE_X_05 + CELL_SIZE_X * 2, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y * 0.6 - CELL_SIZE_Y * 0.4, GRID_START_Z);
      const hoverItems = [];

      if (i === 0) {
        for (let j = 0; j < 18; j++) {
          hoverItems.push(j);
        }
      } else if (i === 1) {
        for (let j = 0; j < 36; j++) {
          if ((cells[j].id + 1) % 2 === 0) {
            hoverItems.push(j);
          }
        }
      } else if (i === 2) {
        for (let j = 0; j < 36; j++) {
          if (RED_NUMBERS.includes(cells[j].id + 1)) {
            hoverItems.push(j);
          }
        }
      } else if (i === 3) {
        for (let j = 0; j < 36; j++) {
          if (!RED_NUMBERS.includes(cells[j].id + 1)) {
            hoverItems.push(j);
          }
        }
      } else if (i === 4) {
        for (let j = 0; j < 36; j++) {
          if ((cells[j].id + 1) % 2 !== 0) {
            hoverItems.push(j);
          }
        }
      } else if (i === 5) {
        for (let j = 18; j < 36; j++) {
          hoverItems.push(j);
        }
      }

      cells.push({
        id: cells.length,
        coloredId: `~c~down_${i}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();

  (() => {
    for (let i = 0; i < 3; i++) {
      const rightOffset = i === 2 ? CELL_OFFSET_Y : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X - CELL_SIZE_X_05), GRID_START_Y + (i * CELL_SIZE_Y - CELL_SIZE_Y_05) + 0.0005, GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X - CELL_SIZE_X_05), GRID_START_Y + (i * CELL_SIZE_Y + CELL_SIZE_Y_05) + rightOffset - 0.0005, GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X * 0.4, GRID_START_Y + (i * CELL_SIZE_Y - CELL_SIZE_Y_05) + 0.0005, GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + (12 * CELL_SIZE_X + CELL_SIZE_X_05) + CELL_OFFSET_X * 0.4, GRID_START_Y + (i * CELL_SIZE_Y + CELL_SIZE_Y_05) + rightOffset - 0.0005, GRID_START_Z);
      const hoverItems = [];

      for (let j = 0; j < 12; j++) {
        hoverItems.push(j * 3 + i);
      }

      cells.push({
        id: cells.length,
        coloredId: `~c~Колонка: ${i + 1}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();

  (() => {
    const firstPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
    const secondPoint = entity.getOffsetFromInWorldCoords(-0.137 - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, GRID_START_Z);
    const threePoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
    const fourPoint = entity.getOffsetFromInWorldCoords(-0.137 + CELL_SIZE_X_05 + CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, GRID_START_Z);
    cells.push({
      id: cells.length,
      coloredId: `~c~Ряд: 1`,
      firstPoint,
      secondPoint,
      threePoint,
      fourPoint,
      isActive: false,
      hoverItems: [36, 37]
    });
  })();

  (() => {
    for (let i = 0; i < 12; i++) {
      const bottomOffset = i === 11 ? -CELL_OFFSET_X : 0;
      const firstPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
      const secondPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 - CELL_OFFSET_X, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, GRID_START_Z);
      const threePoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 + CELL_SIZE_X + CELL_OFFSET_X + bottomOffset, GRID_START_Y - CELL_SIZE_Y_05, GRID_START_Z);
      const fourPoint = entity.getOffsetFromInWorldCoords(GRID_START_X + CELL_SIZE_X * i - CELL_SIZE_X_05 + CELL_SIZE_X + CELL_OFFSET_X + bottomOffset, GRID_START_Y - CELL_SIZE_Y_05 + CELL_OFFSET_Y, GRID_START_Z);
      const hoverItems = [];

      for (let j = i * 3; j < (i + 1) * 3; j++) {
        hoverItems.push(j);
      }

      cells.push({
        id: cells.length,
        coloredId: `~c~Ряд: ${i + 2}`,
        firstPoint,
        secondPoint,
        threePoint,
        fourPoint,
        isActive: false,
        hoverItems
      });
    }
  })();

  return cells;
};

const area = (x1, y1, x2, y2, x3, y3) => Math.abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0);

const check = (x1, y1, x2, y2, x3, y3, x4, y4, x, y) => area(x1, y1, x2, y2, x3, y3) + area(x1, y1, x4, y4, x3, y3) === area(x, y, x1, y1, x2, y2) + area(x, y, x2, y2, x3, y3) + area(x, y, x3, y3, x4, y4) + area(x, y, x1, y1, x4, y4);

const onActiveAction = ({
  id,
  hoverItems
}) => {
  if (!Array.isArray(hoverItems)) {
    return;
  }

  for (let i = 0; i < hoverItems.length; i++) {
    thisInfo.currentTable.cellsData[hoverItems[i]].isHovered = true;
  }
};

const onDeActiveAction = ({
  id,
  hoverItems
}) => {
  if (!Array.isArray(hoverItems)) {
    return;
  }

  for (let i = 0; i < hoverItems.length; i++) {
    thisInfo.currentTable.cellsData[hoverItems[i]].isHovered = false;
  }
};

const playAnimForCurrentTable = (winNumber, animTime = 0) => {
  if (typeof thisInfo.currentTable === 'undefined' || !thisInfo.currentTable.tableObject || !mp.objects.exists(thisInfo.currentTable.tableObject)) {
    return;
  }

  const animId = _helpers.default.mapAnims[winNumber];
  thisInfo.currentTable.tableObject.playAnim(`exit_${animId}_wheel`, 'anim_casino_b@amb@casino@games@roulette@table', 1000, false, true, false, 0, 131072);
  thisInfo.currentTable.tableObject.forceAiAndAnimationUpdate();

  if (animTime !== 0) {
    const animDurationWheel = mp.game.entity.getEntityAnimDuration('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_wheel`);
    const timerUpdateCurrentTime = setInterval(() => {
      if (thisInfo.currentTable && mp.objects.exists(thisInfo.currentTable.tableObject) && thisInfo.currentTable.tableObject.isPlayingAnim('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_wheel`, 3)) {
        thisInfo.currentTable.tableObject.setAnimCurrentTime('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_wheel`, animTime / animDurationWheel);
        clearInterval(timerUpdateCurrentTime);
      }
    }, 50);
  }

  thisInfo.currentTable.currentAnimName = `exit_${animId}_wheel`;

  if (!thisInfo.ballObject || !mp.objects.exists(thisInfo.ballObject)) {
    return;
  }

  const ballPosition = thisInfo.currentTable.tableObject.getWorldPositionOfBone(thisInfo.currentTable.tableObject.getBoneIndexByName('Roulette_Wheel'));
  thisInfo.ballObject.setCoordsNoOffset(ballPosition.x, ballPosition.y, ballPosition.z, false, false, false);
  const tableRotation = thisInfo.currentTable.tableObject.getRotation(2);
  thisInfo.ballObject.setRotation(tableRotation.x, tableRotation.y, tableRotation.z + 90, 2, false);
  mp.game.invoke('0xEA1C610A04DB6BBB', thisInfo.ballObject.handle, true);
  thisInfo.ballObject.playAnim(`exit_${animId}_ball`, 'anim_casino_b@amb@casino@games@roulette@table', 1000, false, true, false, 0, 136704);

  if (animTime !== 0) {
    const animDurationBall = mp.game.entity.getEntityAnimDuration('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_ball`);
    const timerUpdateCurrentTime = setInterval(() => {
      if (mp.objects.exists(thisInfo.ballObject) && thisInfo.ballObject.isPlayingAnim('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_ball`, 3)) {
        thisInfo.ballObject.setAnimCurrentTime('anim_casino_b@amb@casino@games@roulette@table', `exit_${animId}_ball`, animTime / animDurationBall);
        clearInterval(timerUpdateCurrentTime);
      }
    }, 50);
  }

  thisInfo.currentTable.currentAnimId = animId;
};

const changeCurrentTableState = (state, winNumber, animTime, endActionTime) => {
  if (!thisInfo.currentTable || !thisInfo.isActive) {
    return false;
  }

  thisInfo.currentState = state;
  thisInfo.currentStateName = stateNames[state];

  if (state !== 0) {
    _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({selected: '', currentBet: ''})`);
  }

  if (state === 0) {
    thisInfo.endActionTime = Date.now() + (typeof endActionTime === 'number' ? endActionTime : 30000);
    changeChipState(true);

    for (const [playerKey, bets] of thisInfo.otherBets) {
      for (const [betKey, bet] of bets) {
        if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
          bet.chipObject.destroy();
          bets.delete(betKey);
        }
      }

      thisInfo.otherBets.delete(playerKey);
    }

    for (const [betKey, bet] of thisInfo.myBets) {
      if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
        bet.chipObject.destroy();
      }

      thisInfo.myBets.delete(betKey);
    }
  } else if (state === 1) {
    thisInfo.endActionTime = null;
    changeMarkersActive(false);
    changeChipState(false);

    if (typeof thisInfo.currentTable.currentAnimName !== 'undefined') {
      thisInfo.currentTable.tableObject.stopAnim(thisInfo.currentTable.currentAnimName, 'anim_casino_b@amb@casino@games@roulette@table', 0);
    }

    if (!thisInfo.ballObject || !mp.objects.exists(thisInfo.ballObject)) {
      return;
    }

    mp.game.invoke('0xEA1C610A04DB6BBB', thisInfo.ballObject.handle, false);
    mp.gui.chat.push('Ставки сделаны');
  } else if (state === 2) {
    thisInfo.endActionTime = null;
    changeChipState(false);
    mp.gui.chat.push('Запуск...');
    playAnimForCurrentTable(winNumber, animTime);
  }

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentBets: ${getBetsCount()}, currentState: '${thisInfo.currentStateName}'});`);
};

const changeMarkersActive = state => {
  if (!thisInfo.currentTable || !thisInfo.isActive) {
    return false;
  }

  for (let i = 0; i < 38; i++) {
    const cellData = thisInfo.currentTable.cellsData[i];

    if (typeof cellData.markerObject !== 'undefined' && mp.objects.exists(cellData.markerObject)) {
      mp.game.invoke('0xEA1C610A04DB6BBB', cellData.markerObject.handle, state);
    }
  }
};

const changeChipState = state => {
  if (!thisInfo.chipObject || !mp.objects.exists(thisInfo.chipObject)) {
    return false;
  }

  mp.game.invoke('0xEA1C610A04DB6BBB', thisInfo.chipObject.handle, state);
};

const changeCameraMode = onWheel => {
  if (!thisInfo.currentTable || !thisInfo.isActive) {
    return false;
  }

  const pointPosition = onWheel ? thisInfo.currentTable.centerGridPosition : thisInfo.currentTable.wheelCenterPosition;
  mp.game.cam.doScreenFadeOut(50);
  setTimeout(() => {
    camera.pointAtCoord(pointPosition.x, pointPosition.y, pointPosition.z);
  }, 80);
  setTimeout(() => {
    mp.game.cam.doScreenFadeIn(50);
  }, 100);
};

const changeChipType = direction => {
  if (!thisInfo.currentTable || !thisInfo.isActive || thisInfo.currentState !== 0) {
    return false;
  }

  const nextChipType = Math.min(Math.max(thisInfo.currentChipType + direction, 0), thisInfo.currentTable.chipTypePrices.length - 1);
  const nextChipModel = mp.game.joaat(chipTypeModels[nextChipType]);
  const chipExists = thisInfo.chipObject && mp.objects.exists(thisInfo.chipObject);

  if (chipExists && thisInfo.chipObject.model === nextChipModel) {
    return;
  }

  if (chipExists) {
    thisInfo.chipObject.destroy();
  }

  const chipPosition = thisInfo.currentTable.tableObject.getOffsetFromInWorldCoords(thisInfo.chipPosition.x, thisInfo.chipPosition.y, GRID_START_Z);
  thisInfo.chipObject = mp.objects.new(nextChipModel, chipPosition, {
    dimension: -1
  });
  changeChipState(thisInfo.currentState === 0);
  thisInfo.currentChipType = nextChipType;

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentTable.chipTypePrices[nextChipType]});`);
};

mp.keys.bind(0x27, true, () => {
  changeChipType(1);
});
mp.keys.bind(0x25, true, () => {
  changeChipType(-1);
});
mp.keys.bind(0x22, false, () => {
  changeCameraMode(true);
});
mp.keys.bind(0x22, true, () => {
  changeCameraMode(false);
});
let timerSit = 0;
mp.events.add('casino.client.start', (tableId, currentState, currentWinNumber, currentAnimTime, initedBets, endActionTime, currentSitIndex) => {
  if (!thisInfo.tables[tableId] || thisInfo.isActive) {
    return;
  }

  const tableInfo = thisInfo.tables[tableId];

  if (!tableInfo.tableObject || !mp.objects.exists(tableInfo.tableObject)) {
    return;
  }

  if (typeof tableInfo.centerGridPosition === 'undefined') {
    tableInfo.centerGridPosition = tableInfo.tableObject.getOffsetFromInWorldCoords(GRID_CENTER_X, GRID_CENTER_Y, GRID_START_Z);
  }

  if (typeof tableInfo.wheelCenterPosition === 'undefined') {
    tableInfo.wheelCenterPosition = tableInfo.tableObject.getOffsetFromInWorldCoords(-0.73, GRID_CENTER_Y - 0.15, GRID_START_Z + 0.1);
  }

  if (typeof tableInfo.cameraPosition === 'undefined') {
    tableInfo.cameraPosition = tableInfo.tableObject.getOffsetFromInWorldCoords(GRID_CENTER_X, -0.2, 2.5);
  }

  if (typeof tableInfo.gridFirstPoint === 'undefined') {
    tableInfo.gridFirstPoint = tableInfo.tableObject.getOffsetFromInWorldCoords(-0.14, -0.39, GRID_START_Z);
  }

  if (typeof tableInfo.gridSecondPoint === 'undefined') {
    tableInfo.gridSecondPoint = tableInfo.tableObject.getOffsetFromInWorldCoords(-0.14, 0.21, GRID_START_Z);
  }

  if (typeof tableInfo.gridThreePoint === 'undefined') {
    tableInfo.gridThreePoint = tableInfo.tableObject.getOffsetFromInWorldCoords(0.91, 0.21, GRID_START_Z);
  }

  if (typeof tableInfo.gridFourPoint === 'undefined') {
    tableInfo.gridFourPoint = tableInfo.tableObject.getOffsetFromInWorldCoords(0.91, -0.39, GRID_START_Z);
  }

  camera.setCoord(tableInfo.cameraPosition.x, tableInfo.cameraPosition.y, tableInfo.cameraPosition.z);
  camera.pointAtCoord(tableInfo.centerGridPosition.x, tableInfo.centerGridPosition.y, tableInfo.centerGridPosition.z);
  thisInfo.currentChipType = 0;
  thisInfo.chipObject = mp.objects.new(mp.game.joaat(chipTypeModels[thisInfo.currentChipType]), tableInfo.centerGridPosition, {
    dimension: -1
  });
  thisInfo.chipPosition.x = GRID_CENTER_X;
  thisInfo.chipPosition.y = GRID_CENTER_Y;
  changeChipState(currentState === 0);
  thisInfo.ballObject = mp.objects.new(mp.game.joaat('vw_prop_roulette_ball'), tableInfo.tableObject.getWorldPositionOfBone(tableInfo.tableObject.getBoneIndexByName('Roulette_Wheel')), {
    dimension: -1
  });
  mp.game.invoke('0xEA1C610A04DB6BBB', thisInfo.ballObject.handle, false);
  const tableRotation = tableInfo.tableObject.getRotation(2);

  if (typeof tableInfo.cellsData === 'undefined') {
    tableInfo.cellsData = generateTableCells(tableInfo.tableObject);
  }

  for (let i = 0; i < 38; i++) {
    const cellData = tableInfo.cellsData[i];
    const markerPos = cellData.markerPos;

    if (typeof cellData.markerObject === 'undefined' || !mp.objects.exists(cellData.markerObject)) {
      cellData.markerObject = mp.objects.new(mp.game.joaat(i >= 36 ? 'vw_prop_vw_marker_01a' : 'vw_prop_vw_marker_02a'), markerPos, {
        dimension: -1,
        rotation: tableRotation
      });
    }

    mp.game.invoke('0xEA1C610A04DB6BBB', cellData.markerObject.handle, false);
    mp.game.invoke('0x971DA0055324D033', cellData.markerObject.handle, 3);
  }

  thisInfo.waitBet = false;
  thisInfo.isActive = true;
  thisInfo.currentTable = tableInfo;
  changeCurrentTableState(currentState, currentWinNumber, currentAnimTime, endActionTime);
  const sitPosition = tableInfo.tableObject.getOffsetFromInWorldCoords(SITS_POSITIONS[currentSitIndex][0], SITS_POSITIONS[currentSitIndex][1], SITS_POSITIONS[currentSitIndex][2]);
  const obj = mp.game.object.getClosestObjectOfType(tableInfo.position.x, tableInfo.position.y, tableInfo.position.z, 2.0, mp.game.joaat(tableInfo.model), false, false, false);

  if (obj !== 0) {
    mp.game.invoke("0x1A9205C1B9EE827F", obj, false, false);
    setTimeout(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", obj, true, true);
    }, 5000);
  }

  thisInfo.lastPosition = mp.players.local.position;

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, tableInfo.heading + SITS_POSITIONS[currentSitIndex][3] - 90, false);

  timerSit = setTimeout(() => {
    _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, tableInfo.heading + SITS_POSITIONS[currentSitIndex][3]);

    _cameraManager.default.setActiveCamera(camera, true);

    mp.game.ui.displayRadar(false);

    _gui.gui.browser.execute(`CEF.casino.show('roulette', {minBet: ${thisInfo.currentTable.chipTypePrices[0]}, maxBet: ${thisInfo.currentTable.chipTypePrices[thisInfo.currentTable.chipTypePrices.length - 1]}, currentBets: ${getBetsCount()}, currentState: '${stateNames[currentState]}'});`);

    _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentTable.chipTypePrices[0]});`);

    if (!initedBets.length) {
      return;
    }

    const parsedInitedBets = initedBets.split('|');

    for (let i = 0; i < parsedInitedBets.length; i++) {
      const [playerId, betKey, x, y, balance] = parsedInitedBets[i].split(',');
      const player = mp.players.at(parseInt(playerId));

      if (player && mp.players.exists(player)) {
        updateBet(player, betKey, parseFloat(x), parseFloat(y), parseInt(balance));
      }
    }

    _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentBets: ${getBetsCount()}, currentState: '${stateNames[currentState]}'});`);
  }, 4000);
});
mp.events.add('casino.client.stop', playerId => {
  clearTimeout(timerSit);

  if (!thisInfo.isActive) {
    return false;
  }

  if (playerId !== mp.players.local.remoteId) {
    if (thisInfo.otherBets.has(playerId)) {
      const bets = thisInfo.otherBets.get(playerId);

      for (const [betKey, bet] of bets) {
        if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
          bet.chipObject.destroy();
          bets.delete(betKey);
        }
      }

      thisInfo.otherBets.delete(playerId);
    }

    return;
  }

  thisInfo.isActive = false;

  _gui.gui.browser.execute(`CEF.casino.hide();`);

  mp.players.local.setVisible(true, true);

  _cameraManager.default.setActiveCamera(camera, false);

  mp.game.ui.displayRadar(true);

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, mp.players.local.getHeading() - 90);

  setTimeout(() => {
    _user.user.stopScenario();
  }, 200);

  if (typeof thisInfo.chipObject !== 'undefined' && mp.objects.exists(thisInfo.chipObject)) {
    thisInfo.chipObject.destroy();
  }

  if (typeof thisInfo.ballObject !== 'undefined' && mp.objects.exists(thisInfo.ballObject)) {
    thisInfo.ballObject.destroy();
  }

  if (thisInfo.currentTable.currentAnimName) {
    thisInfo.currentTable.tableObject.stopAnim(thisInfo.currentTable.currentAnimName, 'anim_casino_b@amb@casino@games@roulette@table', -1000);
  }

  for (let i = 0; i < 38; i++) {
    const cellData = thisInfo.currentTable.cellsData[i];

    if (typeof cellData.markerObject !== 'undefined' && mp.objects.exists(cellData.markerObject)) {
      cellData.markerObject.destroy();
    }
  }

  for (const [betKey, bet] of thisInfo.myBets) {
    if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
      bet.chipObject.destroy();
    }

    thisInfo.myBets.delete(betKey);
  }

  for (const [playerKey, bets] of thisInfo.otherBets) {
    for (const [betKey, bet] of bets) {
      if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
        bet.chipObject.destroy();
        bets.delete(betKey);
      }
    }

    thisInfo.otherBets.delete(playerKey);
  }

  delete thisInfo.currentTable;
});
mp.events.add('casino.client.updateState', (state, winNumber) => {
  changeCurrentTableState(state, winNumber);
});

const getChipModelTypeByBalance = balance => {
  for (let i = thisInfo.currentTable.chipTypePrices.length - 1; i >= 0; i--) {
    const chipPrice = thisInfo.currentTable.chipTypePrices[i];

    if (balance >= chipPrice) {
      return chipTypeModels[i];
    }
  }
};

const updateChipModelForBet = bet => {
  const model = mp.game.joaat(getChipModelTypeByBalance(bet.balance));

  if (!bet.chipObject || !mp.objects.exists(bet.chipObject)) {
    bet.chipObject = mp.objects.new(model, thisInfo.currentTable.tableObject.getOffsetFromInWorldCoords(bet.x, bet.y, GRID_START_Z), {
      dimension: -1
    });
  } else if (bet.chipObject.model !== model && bet.balance > 0) {
    const chipPosition = bet.chipObject.getCoords(true);
    bet.chipObject.destroy();
    bet.chipObject = mp.objects.new(model, chipPosition, {
      dimension: -1
    });
  }
};

const updateBet = (player, betKey, x, y, balance) => {
  if (!thisInfo.isActive || !thisInfo.currentTable) {
    return;
  }

  if (player === mp.players.local) {
    thisInfo.waitBet = false;

    if (thisInfo.myBets.has(betKey)) {
      const bet = thisInfo.myBets.get(betKey);
      bet.balance = balance;
    } else {
      const betInfo = {
        balance,
        x,
        y
      };
      thisInfo.myBets.set(betKey, betInfo);
    }

    const bet = thisInfo.myBets.get(betKey);
    updateChipModelForBet(bet);

    if (bet.balance <= 0) {
      if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
        bet.chipObject.destroy();
      }

      thisInfo.myBets.delete(betKey);
    }
  } else {
    if (!thisInfo.otherBets.has(player.remoteId)) {
      thisInfo.otherBets.set(player.remoteId, new Map());
    }

    const playerBets = thisInfo.otherBets.get(player.remoteId);

    if (playerBets.has(betKey)) {
      const bet = playerBets.get(betKey);
      bet.balance = balance;
    } else {
      const betInfo = {
        balance,
        x,
        y
      };
      playerBets.set(betKey, betInfo);
    }

    const bet = playerBets.get(betKey);
    updateChipModelForBet(bet);

    if (bet.balance <= 0) {
      if (bet.chipObject && mp.objects.exists(bet.chipObject)) {
        bet.chipObject.destroy();
      }

      playerBets.delete(betKey);
    }

    if (!playerBets.size) {
      thisInfo.otherBets.delete(player.remoteId);
    }
  }

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentBets: ${getBetsCount()}});`);
};

const getBetsCount = () => {
  let betsCount = thisInfo.myBets.size;
  return betsCount;
};

const hasBetByBetKey = betKey => thisInfo.myBets.has(betKey);

mp.events.add('casino.client.updateBetFailure', () => {
  thisInfo.waitBet = false;
});
mp.events.add('casino.client.updateBet', updateBet);
mp.events.add('casino.client.interfaceAction', (action, ...data) => {
  if (!thisInfo.isActive) {
    return;
  }

  if (action === 'changeDirection') {
    const [direction] = data;
    changeChipType(direction);
  }
});
const resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
mp.events.add('click', (x, y, upOrDown, leftOrRight) => {
  if (!thisInfo.isActive || thisInfo.waitBet || upOrDown === 'down' || thisInfo.currentState !== 0 || !thisInfo.currentTable || !_helpers.default.insidePolygon([mp.gui.cursor.position[0] / resolution.x, mp.gui.cursor.position[1] / resolution.y], [[thisInfo.currentTable.screenGridFirstPoint.x, thisInfo.currentTable.screenGridFirstPoint.y], [thisInfo.currentTable.screenGridSecondPoint.x, thisInfo.currentTable.screenGridSecondPoint.y], [thisInfo.currentTable.screenGridThreePoint.x, thisInfo.currentTable.screenGridThreePoint.y], [thisInfo.currentTable.screenGridFourPoint.x, thisInfo.currentTable.screenGridFourPoint.y]])) {
    return;
  }

  const betKey = thisInfo.selectedIds.join('-');

  if (leftOrRight === 'left') {
    if (getBetsCount() >= MAX_BETS) {
      mp.gui.chat.push(`Сделано максимальное количество ставок`);
      return;
    }

    mp.events.callRemote('casino.setBet', betKey, thisInfo.chipPosition.x, thisInfo.chipPosition.y, thisInfo.currentChipType);
    thisInfo.waitBet = true;
  }

  if (leftOrRight === 'right') {
    if (hasBetByBetKey(betKey)) {
      mp.events.callRemote('casino.removeBet', betKey, thisInfo.currentChipType);
      thisInfo.waitBet = true;
    }
  }
});
mp.events.add('render', () => {
  if (!inCasino) return;

  if (thisInfo.isActive && thisInfo.currentTable && thisInfo.currentTable.tableObject && mp.objects.exists(thisInfo.currentTable.tableObject)) {
    mp.game.controls.disableAllControlActions(0);
    const tableInfo = thisInfo.currentTable;
    let endActionSeconds = 0;

    if (thisInfo.endActionTime) {
      endActionSeconds = Math.floor((thisInfo.endActionTime - Date.now()) / 1000);
    } else {
      thisInfo.lastActionTimeSeconds = 0;
    }

    if (thisInfo.lastActionTimeSeconds !== endActionSeconds) {
      if (endActionSeconds >= 0) {
        _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({
          currentState: 'Ожидание - 00:${endActionSeconds.toString().padStart(2, '0')}'
        });`);
      }

      thisInfo.lastActionTimeSeconds = endActionSeconds;
    }

    if (thisInfo.currentState === 0) {
      tableInfo.screenGridFirstPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridFirstPoint.x, tableInfo.gridFirstPoint.y, tableInfo.gridFirstPoint.z);
      tableInfo.screenGridSecondPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridSecondPoint.x, tableInfo.gridSecondPoint.y, tableInfo.gridSecondPoint.z);
      tableInfo.screenGridThreePoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridThreePoint.x, tableInfo.gridThreePoint.y, tableInfo.gridThreePoint.z);
      tableInfo.screenGridFourPoint = mp.game.graphics.world3dToScreen2d(tableInfo.gridFourPoint.x, tableInfo.gridFourPoint.y, tableInfo.gridFourPoint.z);
      const mousePosition = [mp.gui.cursor.position[0] / resolution.x, mp.gui.cursor.position[1] / resolution.y];
      const gridStartY = mousePosition[1] - tableInfo.screenGridSecondPoint.y;
      const gridEndY = tableInfo.screenGridFourPoint.y - tableInfo.screenGridSecondPoint.y;
      const yRelativePos = gridStartY / gridEndY;

      const screenGridX = _helpers.default.lerp(tableInfo.screenGridSecondPoint.x, tableInfo.screenGridFirstPoint.x, yRelativePos);

      const gridStartX = mousePosition[0] - screenGridX;
      const gridEndX = tableInfo.screenGridThreePoint.x - screenGridX;
      const xRelativePos = gridStartX / gridEndX;
      thisInfo.chipPosition.x = Math.min(Math.max(_helpers.default.lerp(-0.191, 0.96, xRelativePos), -0.191), 0.96);
      thisInfo.chipPosition.y = Math.min(Math.max(_helpers.default.lerp(0.23, -0.426, yRelativePos), -0.426), 0.23);
      const chipPosition = thisInfo.currentTable.tableObject.getOffsetFromInWorldCoords(thisInfo.chipPosition.x, thisInfo.chipPosition.y, GRID_START_Z);
      thisInfo.chipObject.setCoordsNoOffset(chipPosition.x, chipPosition.y, chipPosition.z, false, false, false);
      const selectedIds = [];
      const selectedColoredIds = [];

      for (let i = 0; i < thisInfo.currentTable.cellsData.length; i++) {
        const {
          id,
          coloredId,
          firstPoint,
          secondPoint,
          threePoint,
          fourPoint
        } = thisInfo.currentTable.cellsData[i];

        if (check(firstPoint.x, firstPoint.y, threePoint.x, threePoint.y, fourPoint.x, fourPoint.y, secondPoint.x, secondPoint.y, chipPosition.x, chipPosition.y)) {
          selectedIds.push(id);
          selectedColoredIds.push(coloredId);
        } else {
          if (thisInfo.currentTable.cellsData[i].isActive) {
            onDeActiveAction(thisInfo.currentTable.cellsData[i]);
            thisInfo.currentTable.cellsData[i].isActive = false;
          }
        }
      }

      thisInfo.selectedIds = selectedIds;
      const betKey = selectedIds.join('-');

      if (thisInfo.lastSelectedBetKey !== betKey) {
        thisInfo.lastSelectedBetKey = betKey;
        const selected = _helpers.default.rules[betKey] ? _helpers.default.rules[betKey].title || betKey : '';

        _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({selected: '${selected}'})`);
      }

      let currentBet = 0;

      if (thisInfo.myBets.has(betKey)) {
        currentBet = thisInfo.myBets.get(betKey).balance;
      }

      if (thisInfo.lastCurrentBet !== currentBet) {
        thisInfo.lastCurrentBet = currentBet;

        _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentBet: ${currentBet}})`);
      }

      for (let cellId = 0; cellId < thisInfo.currentTable.cellsData.length; cellId++) {
        const {
          id,
          markerObject
        } = thisInfo.currentTable.cellsData[cellId];

        if (selectedIds.includes(id)) {
          if (!thisInfo.currentTable.cellsData[cellId].isActive) {
            onActiveAction(thisInfo.currentTable.cellsData[cellId]);
            thisInfo.currentTable.cellsData[cellId].isActive = true;
          }
        }

        if (markerObject && mp.objects.exists(markerObject)) {
          mp.game.invoke('0xEA1C610A04DB6BBB', markerObject.handle, thisInfo.currentTable.cellsData[cellId].isHovered || thisInfo.currentTable.cellsData[cellId].isActive);
        }
      }
    }
  }
});
},{"../../../shared/casino_roulette/helpers":"Ikcx","../../managers/cameraManager":"YrmO","../gui":"bk91","../../user":"QE3B","../methods":"qXSp"}],"Rr1D":[function(require,module,exports) {
"use strict";

var _cameraManager = _interopRequireDefault(require("../../managers/cameraManager"));

var _slotMachineData = require("./slotMachineData");

var _gui = require("../gui");

var _user = require("../../user");

var _casino_roulette = require("../casino_roulette");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const camera = _cameraManager.default.hasCamera('casino') ? _cameraManager.default.getCamera('casino') : _cameraManager.default.createCamera('casino', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
const STEP = 22.5;
const thisInfo = {
  isActive: false,
  currentBet: 1,
  currentState: 0,
  currentChips: 0,
  spinRotation: 0,
  waitSpinResponse: false,
  reels: []
};

const createReels = (meta, metaLocal, offset) => {
  const reels = mp.objects.new(mp.game.joaat(`${metaLocal.model}_reels`), mp.game.object.getObjectOffsetFromCoords(meta.position.x, meta.position.y, meta.position.z, meta.heading, offset.x, offset.y, offset.z), {
    dimension: -1
  });
  reels.freezePosition(true);
  reels.setCollision(false, false);
  reels.setRotation(0, 0, meta.heading, 2, true);
  reels.heading = meta.heading;
  reels.active = false;
  reels.activeWin = false;
  reels.winNumber = -1;
  return reels;
};

let timerSit = 0;
mp.events.add('casino.slots.client.start', (slotMachineId, chipsBalance) => {
  const slotMachineMeta = _slotMachineData.slotMachinesMeta[slotMachineId];
  thisInfo.currentSlotMachineId = slotMachineId;
  thisInfo.currentSlotMachineMeta = slotMachineMeta;
  thisInfo.currentSlotMachineLocalMeta = _slotMachineData.typesMeta[slotMachineMeta.type];
  thisInfo.currentChips = chipsBalance;
  thisInfo.reels[0] = createReels(slotMachineMeta, thisInfo.currentSlotMachineLocalMeta, new mp.Vector3(-0.115, 0.047, 1.1));
  thisInfo.reels[1] = createReels(slotMachineMeta, thisInfo.currentSlotMachineLocalMeta, new mp.Vector3(0.005, 0.047, 1.1));
  thisInfo.reels[2] = createReels(slotMachineMeta, thisInfo.currentSlotMachineLocalMeta, new mp.Vector3(0.125, 0.047, 1.1));
  thisInfo.waitSpinResponse = false;
  thisInfo.currentState = 0;
  thisInfo.currentBet = 1;
  thisInfo.spinRotation = 0;
  thisInfo.cameraPosition = mp.game.object.getObjectOffsetFromCoords(slotMachineMeta.position.x, slotMachineMeta.position.y, slotMachineMeta.position.z, slotMachineMeta.heading, 0, -1, 1.5);
  thisInfo.cameraPoint = mp.game.object.getObjectOffsetFromCoords(slotMachineMeta.position.x, slotMachineMeta.position.y, slotMachineMeta.position.z, slotMachineMeta.heading, 0, 0, 1.2);
  camera.setCoord(thisInfo.cameraPosition.x, thisInfo.cameraPosition.y, thisInfo.cameraPosition.z);
  camera.pointAtCoord(thisInfo.cameraPoint.x, thisInfo.cameraPoint.y, thisInfo.cameraPoint.z);
  const sitPosition = mp.game.object.getObjectOffsetFromCoords(slotMachineMeta.position.x, slotMachineMeta.position.y, slotMachineMeta.position.z, slotMachineMeta.heading, 0, -0.8, 0.7);

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, slotMachineMeta.heading - 90, false);

  mp.game.ui.displayRadar(false);
  thisInfo.isActive = true;
  timerSit = setTimeout(() => {
    _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, slotMachineMeta.heading);

    _cameraManager.default.setActiveCamera(camera, true);

    mp.players.local.setVisible(false, true);

    _gui.gui.browser.execute(`CEF.casino.show('slots', {minBet: ${thisInfo.currentSlotMachineLocalMeta.bet}, maxBet: ${thisInfo.currentSlotMachineLocalMeta.bet * 5}});`);

    _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentSlotMachineLocalMeta.bet});`);
  }, 4000);
});
mp.events.add('casino.slots.client.stop', () => {
  thisInfo.isActive = false;
  clearTimeout(timerSit);

  for (let i = 0; i < thisInfo.reels.length; i++) {
    const reels = thisInfo.reels[i];

    if (reels && mp.objects.exists(reels)) {
      reels.destroy();
    }
  }

  const sitPosition = mp.game.object.getObjectOffsetFromCoords(thisInfo.currentSlotMachineMeta.position.x, thisInfo.currentSlotMachineMeta.position.y, thisInfo.currentSlotMachineMeta.position.z, thisInfo.currentSlotMachineMeta.heading, 0.5, -0.9, 0.7);
  const sitPosition2 = mp.game.object.getObjectOffsetFromCoords(thisInfo.currentSlotMachineMeta.position.x, thisInfo.currentSlotMachineMeta.position.y, thisInfo.currentSlotMachineMeta.position.z, thisInfo.currentSlotMachineMeta.heading, 0, -0.8, 0.7);

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition2.x, sitPosition2.y, sitPosition2.z, thisInfo.currentSlotMachineMeta.heading - 90);

  setTimeout(() => {
    _user.user.stopScenario();

    setTimeout(() => {
      mp.players.local.setCoordsNoOffset(sitPosition.x, sitPosition.y, sitPosition.z, false, false, false);
      mp.players.local.setHeading(thisInfo.currentSlotMachineMeta.heading - 90);
    }, 2000);
  }, 200);
  mp.game.ui.displayRadar(true);

  _cameraManager.default.setActiveCamera(camera, false);

  mp.players.local.setVisible(true, true);

  _gui.gui.browser.execute(`CEF.casino.hide();`);
});

const changeBet = direction => {
  if (!thisInfo.isActive) {
    return false;
  }

  let nextBet = thisInfo.currentBet + direction;

  if (nextBet > 5) {
    nextBet = 1;
  } else if (nextBet <= 0) {
    nextBet = 5;
  }

  thisInfo.currentBet = nextBet;

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(${nextBet * thisInfo.currentSlotMachineLocalMeta.bet});`);
};

mp.events.add('casino.client.interfaceAction', (action, ...data) => {
  if (thisInfo.isActive) {
    if (action === 'changeDirection') {
      const [direction] = data;
      changeBet(direction);
    } else if (action === 'clickButton') {
      const [type] = data;

      if (type === 'spin') {
        spinRequest();
      }
    }
  }
});
mp.keys.bind(0x27, true, () => {
  changeBet(1);
});
mp.keys.bind(0x25, true, () => {
  changeBet(-1);
});
mp.events.add('casino.slots.client.responseWin', (winBalance, chipsBalance) => {
  thisInfo.currentChips = chipsBalance;
  mp.game.ui.notifications.show(`~g~Ты выиграл ${winBalance}`);
});
mp.events.add('casino.slots.client.spin.response', (success, winNumbers, chipsBalance) => {
  if (!thisInfo.waitSpinResponse) {
    return;
  }

  thisInfo.currentChips = chipsBalance;

  if (success) {
    for (let i = 0; i < thisInfo.reels.length; i++) {
      thisInfo.reels[i].winNumber = -1;
      thisInfo.reels[i].active = true;
    }

    const [first, second, three] = winNumbers.split('-').map(winNumber => parseInt(winNumber));
    setTimeout(() => {
      thisInfo.reels[0].winNumber = first;
      thisInfo.reels[0].activeWin = true;
      thisInfo.currentState = 2;
      setTimeout(() => {
        thisInfo.reels[1].winNumber = second;
        thisInfo.reels[1].activeWin = true;
        thisInfo.currentState = 3;
      }, 1000);
      setTimeout(() => {
        thisInfo.reels[2].winNumber = three;
        thisInfo.reels[2].activeWin = true;
        thisInfo.currentState = 0;
      }, 2000);
    }, 3000);
    thisInfo.currentState = 1;
    thisInfo.waitSpinResponse = false;
    return;
  } else {
    mp.game.ui.notifications.show('~r~Недостаточно средств');
  }

  thisInfo.currentState = 0;
  thisInfo.waitSpinResponse = false;
});

const spinRequest = () => {
  if (!thisInfo.isActive || thisInfo.waitSpinResponse || thisInfo.currentState !== 0) {
    return false;
  }

  thisInfo.waitSpinResponse = true;
  mp.events.callRemote('casino.slots.server.spin.request', thisInfo.currentBet);
};

mp.keys.bind(0x20, false, spinRequest);
mp.events.add('render', () => {
  if (!_casino_roulette.inCasino) return;

  if (!thisInfo.isActive) {
    return;
  }

  thisInfo.spinRotation += 10;

  for (let i = 0; i < thisInfo.reels.length; i++) {
    const reels = thisInfo.reels[i];

    if (reels && mp.objects.exists(reels) && reels.active) {
      reels.setRotation(thisInfo.spinRotation, 0, reels.heading, 2, true);

      if (typeof reels.winNumber === 'number' && reels.winNumber !== -1 && reels.activeWin) {
        const winRotation = reels.winNumber * STEP;
        const reelsRotation = reels.getRotation(1);

        if (reelsRotation.x >= winRotation) {
          reels.active = false;
          reels.setRotation(winRotation, 0, reels.heading, 2, true);
        }
      }
    }
  }

  mp.game.controls.disableAllControlActions(0);
});
},{"../../managers/cameraManager":"YrmO","./slotMachineData":"Dmc2","../gui":"bk91","../../user":"QE3B","../casino_roulette":"XMgA"}],"A84v":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bezier;
var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;
var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}

function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}

function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;

  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;

    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);

    if (currentSlope === 0.0) {
      return aGuessT;
    }

    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }

  return aGuessT;
}

function LinearEasing(x) {
  return x;
}

function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

  for (var i = 0; i < kSplineTableSize; ++i) {
    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }

    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);

    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (x === 0 || x === 1) {
      return x;
    }

    return calcBezier(getTForX(x), mY1, mY2);
  };
}

;
},{}],"qncG":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toRad = exports.normalizeAngle = exports.lerpVector3 = exports.getObjectOffsetFromCoords = void 0;

const lerpVector3 = (vector1, vector2, deltaTime) => {
  return new mp.Vector3((1 - deltaTime) * vector1.x + deltaTime * vector2.x, (1 - deltaTime) * vector1.y + deltaTime * vector2.y, (1 - deltaTime) * vector1.z + deltaTime * vector2.z);
};

exports.lerpVector3 = lerpVector3;

const toRad = value => value / 180 * Math.PI;

exports.toRad = toRad;

const normalizeAngle = angle => {
  let newAngle = angle;

  while (newAngle <= -180) {
    newAngle += 360;
  }

  while (newAngle > 180) {
    newAngle -= 360;
  }

  return newAngle;
};

exports.normalizeAngle = normalizeAngle;

const getObjectOffsetFromCoords = (v, heading, offset) => mp.game.object.getObjectOffsetFromCoords(v.x, v.y, v.z, heading, offset.x, offset.y, offset.z);

exports.getObjectOffsetFromCoords = getObjectOffsetFromCoords;
},{}],"RICX":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var helpers = _interopRequireWildcard(require("./index"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class Quaternion {
  constructor(x, y, z, w) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;

    if (typeof x === 'object') {
      this.x = x.x || 0;
      this.y = x.y || 0;
      this.z = x.z || 0;
      this.w = x.w || 0;
    } else {
      this.x = x || 0;
      this.y = y || 0;
      this.z = z || 0;
      this.w = w || 0;
    }
  }

  slerp(qb, t) {
    return Quaternion.slerp(this, qb, t);
  }

  static slerp(qa, qb, t) {
    const qm = new Quaternion();
    const cosHalfTheta = qa.w * qb.w + qa.x * qb.x + qa.y * qb.y + qa.z * qb.z;

    if (Math.abs(cosHalfTheta) >= 1.0) {
      qm.w = qa.w;
      qm.x = qa.x;
      qm.y = qa.y;
      qm.z = qa.z;
      return qm;
    }

    const halfTheta = Math.acos(cosHalfTheta);
    const sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
      qm.w = qa.w * 0.5 + qb.w * 0.5;
      qm.x = qa.x * 0.5 + qb.x * 0.5;
      qm.y = qa.y * 0.5 + qb.y * 0.5;
      qm.z = qa.z * 0.5 + qb.z * 0.5;
      return qm;
    }

    const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
    qm.w = qa.w * ratioA + qb.w * ratioB;
    qm.x = qa.x * ratioA + qb.x * ratioB;
    qm.y = qa.y * ratioA + qb.y * ratioB;
    qm.z = qa.z * ratioA + qb.z * ratioB;
    return qm;
  }

  fromEuler(vector) {
    const qa = Quaternion.fromEuler(vector);
    this.x = qa.x;
    this.y = qa.y;
    this.z = qa.z;
    this.w = qa.w;
    return this;
  }

  static fromEuler(vector) {
    const qm = new Quaternion();
    let {
      x: roll,
      y: pitch,
      z: yaw
    } = vector;
    pitch = helpers.toRad(helpers.normalizeAngle(pitch));
    roll = helpers.toRad(helpers.normalizeAngle(roll));
    yaw = helpers.toRad(helpers.normalizeAngle(yaw));
    qm.x = Math.sin(roll / 2) * Math.cos(pitch / 2) * Math.cos(yaw / 2) - Math.cos(roll / 2) * Math.sin(pitch / 2) * Math.sin(yaw / 2);
    qm.y = Math.cos(roll / 2) * Math.sin(pitch / 2) * Math.cos(yaw / 2) + Math.sin(roll / 2) * Math.cos(pitch / 2) * Math.sin(yaw / 2);
    qm.z = Math.cos(roll / 2) * Math.cos(pitch / 2) * Math.sin(yaw / 2) - Math.sin(roll / 2) * Math.sin(pitch / 2) * Math.cos(yaw / 2);
    qm.w = Math.cos(roll / 2) * Math.cos(pitch / 2) * Math.cos(yaw / 2) + Math.sin(roll / 2) * Math.sin(pitch / 2) * Math.sin(yaw / 2);
    return qm;
  }

  toEuler() {
    const Rx = Math.atan2(2 * (this.x * this.y + this.z * this.w), 1 - 2 * (this.y * this.y + this.z * this.z));
    const Ry = Math.asin(2 * (this.x * this.y - this.w * this.y));
    const Rz = Math.atan2(2 * (this.x * this.w + this.y * this.z), 1 - 2 * (this.z * this.z + this.w * this.w));
    return new mp.Vector3(Rx, Ry, Rz);
  }

}

var _default = Quaternion;
exports.default = _default;
},{"./index":"qncG"}],"hevW":[function(require,module,exports) {
"use strict";

var _cameraManager = _interopRequireDefault(require("../../managers/cameraManager"));

var _bezierEasing = _interopRequireDefault(require("./helpers/bezierEasing"));

var helpers = _interopRequireWildcard(require("./helpers"));

var _Quaternion = _interopRequireDefault(require("./helpers/Quaternion"));

var _gui = require("../gui");

var _user = require("../../user");

var _casino_roulette = require("../casino_roulette");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const camera = _cameraManager.default.hasCamera('casino') ? _cameraManager.default.getCamera('casino') : _cameraManager.default.createCamera('casino', 'default', new mp.Vector3(0, 0, 0), new mp.Vector3(-90, 0, 0), 50);
const thisInfo = {
  x: 0,
  y: 0,
  dealerCards: [],
  playerCards: [],
  playersCards: new Map(),
  currentSitIndex: 0,
  currentState: 0,
  currentAnimationState: 0,
  isActive: false,
  currentBetStatus: 0,
  betBalance: 0,
  secondBetBalance: 0,
  awaitSetBet: false,
  lastEndTimeSecconds: 0,
  lastCurrentBetName: '',
  lastPosition: new mp.Vector3(0, 0, 0)
};
const CARDS_POSITIONS = {
  spawn: [[0, 0.55, -1], [0, 0.55, 1.2]],
  dealer: [[-0.1371, 0.14, -20], [0, 0.115, 0], [0.1421, 0.14, 22]],
  [0]: [[-0.7, 0.215, 0.9479, 113], [-0.7 + 0.01, 0.215 - 0.015, 0.9479 + 0.00055, 113], [-0.7 + 0.02, 0.215 - 0.03, 0.9479 + 0.0011, 113]],
  [1]: [[-0.31, -0.2, 0.9479, -17], [-0.31 + 0.02, -0.2 + 0.0005, 0.9479 + 0.00055, -17], [-0.31 + 0.04, -0.2 + 0.001, 0.9479 + 0.0011, -17]],
  [2]: [[0.288, -0.21, 0.9479, 23], [0.288 + 0.015, -0.21 + 0.015, 0.9479 + 0.00055, 23], [0.288 + 0.03, -0.21 + 0.03, 0.9479 + 0.0011, 23]],
  [3]: [[0.682, 0.176, 0.9479, -108], [0.682 - 0.001, 0.176 + 0.02, 0.9479 + 0.00055, -108], [0.682 - 0.002, 0.176 + 0.04, 0.9479 + 0.0011, -108]]
};
const CAMERAS_SIT_POSITIONS = {
  [0]: [-1.3, 0, 1.5],
  [1]: [-0.4877952745, -0.7133464511, 1.5],
  [2]: [0.480708, -0.721220, 1.5],
  [3]: [1.2153543, -0.0042913, 1.5]
};
const CARDS_SHOW_SIT_POSITION = {
  [0]: [[-1.0248031495, 0.173267716, 1.1, 108.5], [-1, 0.1, 1.1, 108.5], [-0.9766929, 0.0284251, 1.1, 108.5]],
  [1]: [[-0.47125984, -0.4409055, 1.1, 160.72], [-0.400787403, -0.46452755, 1.1, 160.72], [-0.33267716, -0.48854329, 1.1, 160.72]],
  [2]: [[0.305511807, -0.48421258, 1.1, -158.44998168945312], [0.37637794, -0.45704723, 1.1, -158.44998168945312], [0.44685038, -0.42909447, 1.1, -158.44998168945312]],
  [3]: [[0.93149605, 0.00909449, 1.1, 252.03], [0.95433068, 0.080354335, 1.1, 252.03], [0.9775590481, 0.15240158, 1.1, 252.03]]
};
const BETS_BALANCE = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 150, 200, 250, 300, 350, 400, 450, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000];
const SITS_POSITIONS = {
  [0]: [-1.3, 0, 0.7, -60],
  [1]: [-0.4877952745, -0.7133464511, 0.7, -20],
  [2]: [0.480708, -0.721220, 0.7, 30],
  [3]: [1.2153543, -0.0042913, 0.7, 70]
};
const coordsTable = [[new mp.Vector3(1143.338, 264.2453, -52.84094), -134.9999614, 'vw_prop_casino_3cardpoker_01'], [new mp.Vector3(1146.329, 261.2543, -52.84094), 44.9999372, 'vw_prop_casino_3cardpoker_01'], [new mp.Vector3(1133.74, 266.6947, -52.04094), -44.9999372, 'vw_prop_casino_3cardpoker_01b'], [new mp.Vector3(1148.74, 251.6947, -52.04094), -44.9999372, 'vw_prop_casino_3cardpoker_01b']];
const interpolationPipelines = new Map();
const defaultOptions = {
  object: null,
  objectModel: '',
  bezier: [0.42, 0.13, 0.06, 0.89],
  onComplete: () => {}
};

const startCardAnimation = (pipeline, options = {}) => {
  options = _objectSpread(_objectSpread({}, defaultOptions), options);
  const animatedCard = mp.objects.exists(options.object) ? options.object : mp.objects.new(mp.game.joaat(options.objectModel), helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(0, 0.55, -1)), {
    dimension: -1,
    rotation: new mp.Vector3(90, 0, 0)
  });
  let id = 0;

  for (const pipe of pipeline) {
    pipe.id = id;
    id++;
  }

  const currentAction = pipeline.shift();
  let prevPos = currentAction.from;

  if (typeof currentAction.from === 'function') {
    prevPos = currentAction.from();
  }

  let prevRot = currentAction.fromRotation;

  if (typeof currentAction.fromRotation === 'function') {
    prevRot = currentAction.fromRotation();
  }

  if (typeof currentAction.to === 'function') {
    currentAction.to = currentAction.to();
  }

  if (typeof currentAction.rotation === 'function') {
    currentAction.rotation = currentAction.rotation();
  }

  const bezier = (0, _bezierEasing.default)(options.bezier[0], options.bezier[1], options.bezier[2], options.bezier[3]);
  interpolationPipelines.set(animatedCard, {
    pipeline,
    startTime: Date.now(),
    percentage: 0,
    percentageRotation: 0,
    prevPos,
    prevRot,
    percentageCompleted: false,
    percentageRotationCompleted: false,
    bezier,
    delayActive: false,
    currentAction,
    onComplete: options.onComplete
  });
  return animatedCard;
};

const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];
const suits = [{
  type: 'd',
  label: 'Бубны',
  name: 'diamonds',
  nameModel: 'dia'
}, {
  type: 'c',
  label: 'Трефы',
  name: 'clubs',
  nameModel: 'club'
}, {
  type: 'h',
  label: 'Черви',
  name: 'hearts',
  nameModel: 'hrt'
}, {
  type: 's',
  label: 'Пики',
  name: 'spades',
  nameModel: 'spd'
}];
const cardsArray = [];
const cardsModelArray = new Map();
const valuesMap = {
  '2': '02',
  '3': '03',
  '4': '04',
  '5': '05',
  '6': '06',
  '7': '07',
  '8': '08',
  '9': '09',
  'T': '10',
  'J': 'jack',
  'Q': 'queen',
  'K': 'king',
  'A': 'ace'
};

for (let i = 0; i < suits.length; i++) {
  for (let j = 0; j < values.length; j++) {
    cardsArray.push(`${values[j]}${suits[i].type}`);
    cardsModelArray.set(`${values[j]}${suits[i].type}`, `vw_prop_cas_card_${suits[i].nameModel}_${valuesMap[values[j]]}`);
    cardsModelArray.set(`${valuesMap[values[j]]}${suits[i].type}`, `vw_prop_cas_card_${suits[i].nameModel}_${valuesMap[values[j]]}`);
  }
}

const waitMs = [0, 100, 200];
const waitMsReverse = [200, 100, 0];
let timerSit = 0;
mp.events.add('casino.poker.client.stop', () => {
  thisInfo.isActive = false;
  clearTimeout(timerSit);

  for (let i = 0; i < 3; i++) {
    if (mp.objects.exists(thisInfo.dealerCards[i])) {
      thisInfo.dealerCards[i].destroy();
    }

    if (mp.objects.exists(thisInfo.playerCards[i])) {
      thisInfo.playerCards[i].destroy();
    }
  }

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, mp.players.local.getHeading() - 90);

  setTimeout(() => {
    _user.user.stopScenario();
  }, 200);
  mp.players.local.setVisible(true, true);

  _cameraManager.default.setActiveCamera(camera, false);

  mp.game.ui.displayRadar(true);

  _gui.gui.browser.execute(`CEF.casino.hide();`);
});
const CURRENT_STATE_NAMES = ['Ожидание игроков', 'Ожидаются ставки', 'Раздача карт', 'Раздача карт', 'Ожидание поддержки первоначальной ставки', 'Вскрытие рук', 'Вскрытие рук'];
mp.events.add('casino.poker.client.start', (currentSitIndex, tableIndex) => {
  thisInfo.isActive = true;
  thisInfo.isShowsCards = false;
  thisInfo.currentBetStatus = 0;
  thisInfo.currentSitIndex = currentSitIndex;
  thisInfo.currentTableIndex = tableIndex;
  thisInfo.currentTableHeading = coordsTable[tableIndex][1];
  thisInfo.currentTablePosition = coordsTable[tableIndex][0];
  thisInfo.currentTableModel = coordsTable[tableIndex][2];
  const cameraPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CAMERAS_SIT_POSITIONS[thisInfo.currentSitIndex][0], CAMERAS_SIT_POSITIONS[thisInfo.currentSitIndex][1], CAMERAS_SIT_POSITIONS[thisInfo.currentSitIndex][2]));
  const cameraPointPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS[thisInfo.currentSitIndex][0][0], CARDS_POSITIONS[thisInfo.currentSitIndex][0][1], CARDS_POSITIONS[thisInfo.currentSitIndex][0][2]));
  thisInfo.mainCameraPosition = cameraPosition;
  thisInfo.mainCameraPointPosition = cameraPointPosition;
  thisInfo.dealerCameraPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS.dealer[1][0], CARDS_POSITIONS.dealer[1][1] - 0.1, 1.4));
  thisInfo.dealerCameraPointPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS.dealer[1][0], CARDS_POSITIONS.dealer[1][1], 0.9479));
  camera.setCoord(cameraPosition.x, cameraPosition.y, cameraPosition.z);
  camera.pointAtCoord(cameraPointPosition.x, cameraPointPosition.y, cameraPointPosition.z);
  const sitPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(SITS_POSITIONS[currentSitIndex][0], SITS_POSITIONS[currentSitIndex][1], SITS_POSITIONS[currentSitIndex][2]));
  const obj = mp.game.object.getClosestObjectOfType(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, 2.0, mp.game.joaat(thisInfo.currentTableModel), false, false, false);

  if (obj !== 0) {
    mp.game.invoke("0x1A9205C1B9EE827F", obj, false, false);
    setTimeout(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", obj, true, true);
    }, 5000);
  }

  thisInfo.lastPosition = mp.players.local.position;

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, thisInfo.currentTableHeading + SITS_POSITIONS[currentSitIndex][3] - 90, false);

  timerSit = setTimeout(() => {
    _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, thisInfo.currentTableHeading + SITS_POSITIONS[currentSitIndex][3]);

    mp.players.local.setVisible(false, false);

    _cameraManager.default.setActiveCamera(camera, true);

    mp.game.ui.displayRadar(false);

    _gui.gui.browser.execute(`CEF.casino.show('poker', {
      currentState: '${CURRENT_STATE_NAMES[thisInfo.currentState]}',
      maxBet: 5000,
      minBet: 10,
      betActive: ${thisInfo.currentBetStatus < 2 && (thisInfo.currentState === 0 || thisInfo.currentState === 1)},
      currentBet: '${thisInfo.currentBetStatus === 0 ? 'Начальная ставка' : thisInfo.currentBetStatus === 1 ? 'Ставка "ПАРА ПЛЮС"' : ''}'
    });`);

    _gui.gui.browser.execute(`CEF.casino.changeBetValue(${BETS_BALANCE[thisInfo.betBalance]});`);
  }, 4000);
});

const updateInterfaceInfo = () => {
  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({
    currentState: '${CURRENT_STATE_NAMES[thisInfo.currentState]}',
    betActive: ${thisInfo.currentBetStatus < 2 && (thisInfo.currentState === 0 || thisInfo.currentState === 1)},
    applyActive: ${thisInfo.currentBetStatus < 3 && thisInfo.currentState === 4 && (typeof thisInfo.firstBet === 'undefined' ? -1 : thisInfo.firstBet) !== -1},
    currentBet: '${thisInfo.currentState !== 0 && thisInfo.currentState !== 1 ? '' : thisInfo.currentBetStatus === 0 ? 'Начальная ставка' : thisInfo.currentBetStatus === 1 ? 'Ставка "ПАРА ПЛЮС"' : ''}'
  });`);

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentState === 4 && (typeof thisInfo.firstBet === 'undefined' ? -1 : thisInfo.firstBet) !== -1 ? BETS_BALANCE[thisInfo.firstBet] : BETS_BALANCE[thisInfo.betBalance]});`);
};

const safeGetPositionPlayerCard = index => {
  if (mp.objects.exists(thisInfo.playerCards[index])) {
    return thisInfo.playerCards[index].getCoords(true);
  } else {
    return new mp.Vector3(0, 0, 0);
  }
};

const safeGetQuaternionPlayerCard = index => {
  if (mp.objects.exists(thisInfo.playerCards[index])) {
    return new _Quaternion.default(thisInfo.playerCards[index].getQuaternion(0, 0, 0, 0));
  } else {
    return new mp.Vector3(0, 0, 0);
  }
};

const safeGetPositionDealerCard = index => {
  if (mp.objects.exists(thisInfo.dealerCards[index])) {
    return thisInfo.dealerCards[index].getCoords(true);
  } else {
    return new mp.Vector3(0, 0, 0);
  }
};

const safeGetQuaternionDealerCard = index => {
  if (mp.objects.exists(thisInfo.dealerCards[index])) {
    return new _Quaternion.default(thisInfo.dealerCards[index].getQuaternion(0, 0, 0, 0));
  } else {
    return new mp.Vector3(0, 0, 0);
  }
};

mp.events.add('casino.poker.client.changeTableState', (state, data) => {
  thisInfo.currentState = state;

  if (state === 0) {
    const [spawnCoordsFrom, spawnCoordsTo] = CARDS_POSITIONS.spawn;

    for (let i = 0; i < 3; i++) {
      if (mp.objects.exists(thisInfo.dealerCards[i])) {
        startCardAnimation([{
          delay: i * 100,
          from: () => safeGetPositionPlayerCard(i),
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsTo),
          duration: 500,
          fromRotation: () => safeGetQuaternionDealerCard(i),
          rotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading))
        }, {
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsFrom),
          duration: 500
        }], {
          object: thisInfo.dealerCards[i],

          onComplete() {
            if (mp.objects.exists(thisInfo.dealerCards[i])) {
              thisInfo.dealerCards[i].destroy();
            }
          }

        });
      }

      if (mp.objects.exists(thisInfo.playerCards[i])) {
        startCardAnimation([{
          delay: i * 100,
          from: () => safeGetPositionPlayerCard(i),
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsTo),
          duration: 500,
          fromRotation: () => safeGetQuaternionPlayerCard(i),
          rotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading))
        }, {
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsFrom),
          duration: 500
        }], {
          object: thisInfo.playerCards[i],

          onComplete() {
            if (mp.objects.exists(thisInfo.playerCards[i])) {
              thisInfo.playerCards[i].destroy();
            }
          }

        });
      }
    }

    thisInfo.firstBet = -1;
    thisInfo.secondBet = -1;
    thisInfo.currentBetStatus = 0;
    thisInfo.isShowsCards = false;
  } else if (state === 1) {
    thisInfo.endBetTime = Date.now() + 30000;
  } else if (state === 2) {
    thisInfo.endBetTime = null;

    _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({
      endBetTime: '0'
    });`);

    for (let i = 0; i < 3; i++) {
      const [spawnCoordsFrom, spawnCoordsTo] = CARDS_POSITIONS.spawn;

      if (mp.objects.exists(thisInfo.dealerCards[i])) {
        thisInfo.dealerCards[i].destroy();
      }

      if (mp.objects.exists(thisInfo.playerCards[i])) {
        thisInfo.playerCards[i].destroy();
      }

      thisInfo.dealerCards[i] = startCardAnimation([{
        delay: i * 100,
        from: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsFrom),
        to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsTo),
        duration: 1000,
        fromRotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading)),
        rotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading))
      }, {
        to: helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS.dealer[i][0], CARDS_POSITIONS.dealer[i][1], 0.9479)),
        duration: 750,
        rotationDuration: 650,
        rotation: _Quaternion.default.fromEuler(new mp.Vector3(-180, 0, CARDS_POSITIONS.dealer[i][2] + thisInfo.currentTableHeading))
      }], {
        objectModel: cardsModelArray.get(data[i])
      });
    }
  } else if (state === 3) {
    if (!data) {
      return;
    }

    for (let i = 0; i < 3; i++) {
      const [spawnCoordsFrom, spawnCoordsTo] = CARDS_POSITIONS.spawn;
      thisInfo.playerCards[i] = startCardAnimation([{
        delay: i * 100,
        from: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsFrom),
        to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, ...spawnCoordsTo),
        duration: 1000,
        fromRotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading)),
        rotation: _Quaternion.default.fromEuler(new mp.Vector3(-90, 0, thisInfo.currentTableHeading))
      }, {
        to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, CARDS_POSITIONS[thisInfo.currentSitIndex][i][0], CARDS_POSITIONS[thisInfo.currentSitIndex][i][1], CARDS_POSITIONS[thisInfo.currentSitIndex][i][2]),
        duration: 750,
        rotationDuration: 650,
        rotation: _Quaternion.default.fromEuler(new mp.Vector3(0, 180, CARDS_POSITIONS[thisInfo.currentSitIndex][i][3] + thisInfo.currentTableHeading))
      }], {
        objectModel: cardsModelArray.get(data[i])
      });
    }
  } else if (state === 4) {
    thisInfo.endBetTime = Date.now() + 10000;
  } else if (state === 5) {
    thisInfo.endBetTime = null;

    _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({
      endBetTime: '0'
    });`);

    for (let i = 0; i < 3; i++) {
      const pipeline = [];

      if (thisInfo.isShowsCards) {
        pipeline.push({
          delay: waitMsReverse[i],
          from: safeGetPositionPlayerCard(i),
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, CARDS_POSITIONS[thisInfo.currentSitIndex][i][0], CARDS_POSITIONS[thisInfo.currentSitIndex][i][1], CARDS_POSITIONS[thisInfo.currentSitIndex][i][2]),
          duration: 150,
          fromRotation: () => safeGetQuaternionPlayerCard(i),
          rotation: () => _Quaternion.default.fromEuler(new mp.Vector3(0, 0, helpers.normalizeAngle(CARDS_POSITIONS[thisInfo.currentSitIndex][i][3] + thisInfo.currentTableHeading)))
        });
      } else {
        pipeline.push({
          delay: waitMsReverse[i],
          from: safeGetPositionPlayerCard(i),
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, CARDS_POSITIONS[thisInfo.currentSitIndex][i][0], CARDS_POSITIONS[thisInfo.currentSitIndex][i][1], 0.96 + i * 0.01),
          duration: 150
        });
        pipeline.push({
          delay: waitMsReverse[i],
          duration: 300,
          fromRotation: () => safeGetQuaternionPlayerCard(i),
          rotation: () => _Quaternion.default.fromEuler(new mp.Vector3(0, 0, helpers.normalizeAngle(CARDS_POSITIONS[thisInfo.currentSitIndex][i][3] + thisInfo.currentTableHeading)))
        });
        pipeline.push({
          delay: i * 300,
          duration: 150,
          from: () => safeGetPositionPlayerCard(i),
          to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, CARDS_POSITIONS[thisInfo.currentSitIndex][i][0], CARDS_POSITIONS[thisInfo.currentSitIndex][i][1], CARDS_POSITIONS[thisInfo.currentSitIndex][i][2])
        });
      }

      startCardAnimation(pipeline, {
        object: thisInfo.playerCards[i]
      });
      startCardAnimation([{
        delay: waitMsReverse[i],
        from: safeGetPositionDealerCard(i),
        to: helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS.dealer[i][0], CARDS_POSITIONS.dealer[i][1], 0.97)),
        duration: 150
      }, {
        delay: waitMsReverse[i],
        duration: 300,
        fromRotation: () => safeGetQuaternionDealerCard(i),
        rotation: () => _Quaternion.default.fromEuler(new mp.Vector3(0, 0, CARDS_POSITIONS.dealer[i][2] + thisInfo.currentTableHeading))
      }, {
        delay: i * 300,
        duration: 150,
        from: () => safeGetPositionDealerCard(i),
        to: helpers.getObjectOffsetFromCoords(thisInfo.currentTablePosition, thisInfo.currentTableHeading, new mp.Vector3(CARDS_POSITIONS.dealer[i][0], CARDS_POSITIONS.dealer[i][1], 0.9479))
      }], {
        object: thisInfo.dealerCards[i]
      });
    }
  } else if (state === 6) {}

  updateInterfaceInfo();
});

const cancelBet = () => {
  if (!thisInfo.isActive) {
    return;
  }

  mp.events.callRemote('casino.poker.server.setBet', -1);
};

mp.keys.bind(0x20, false, cancelBet);

const decreaseBetBalance = () => {
  if (!thisInfo.isActive || thisInfo.currentState !== 0 && thisInfo.currentState !== 1 || thisInfo.currentBetStatus >= 2) {
    return;
  }

  if (thisInfo.betBalance - 1 <= 0) {
    thisInfo.betBalance = 0;
  } else {
    thisInfo.betBalance -= 1;
  }

  updateInterfaceInfo();
};

mp.keys.bind(0x25, true, decreaseBetBalance);

const incrementBetBalance = () => {
  if (!thisInfo.isActive || thisInfo.currentState !== 0 && thisInfo.currentState !== 1 || thisInfo.currentBetStatus >= 2) {
    return;
  }

  if (thisInfo.betBalance + 1 >= BETS_BALANCE.length - 1) {
    thisInfo.betBalance = BETS_BALANCE.length - 1;
  } else {
    thisInfo.betBalance += 1;
  }

  updateInterfaceInfo();
};

mp.keys.bind(0x27, true, incrementBetBalance);

const showMyCards = () => {
  if (!thisInfo.isActive || thisInfo.currentState !== 4 || thisInfo.isShowsCards) {
    return;
  }

  thisInfo.isShowsCards = true;
  const cardsPositions = CARDS_SHOW_SIT_POSITION[thisInfo.currentSitIndex];

  for (let i = 0; i < 3; i++) {
    startCardAnimation([{
      delay: waitMsReverse[i],
      from: safeGetPositionPlayerCard(i),
      to: mp.game.object.getObjectOffsetFromCoords(thisInfo.currentTablePosition.x, thisInfo.currentTablePosition.y, thisInfo.currentTablePosition.z, thisInfo.currentTableHeading, cardsPositions[i][0], cardsPositions[i][1], cardsPositions[i][2]),
      duration: 500,
      fromRotation: () => safeGetQuaternionPlayerCard(i),
      rotation: _Quaternion.default.fromEuler(new mp.Vector3(-45, 0, helpers.normalizeAngle(cardsPositions[2][3] + thisInfo.currentTableHeading)))
    }], {
      object: thisInfo.playerCards[i]
    });
  }
};

mp.keys.bind(0x22, true, showMyCards);

const showDealerCards = () => {
  if (!thisInfo.isActive) {
    return;
  }

  camera.setCoord(thisInfo.dealerCameraPosition.x, thisInfo.dealerCameraPosition.y, thisInfo.dealerCameraPosition.z);
  camera.pointAtCoord(thisInfo.dealerCameraPointPosition.x, thisInfo.dealerCameraPointPosition.y, thisInfo.dealerCameraPointPosition.z);
};

mp.keys.bind(0x21, true, showDealerCards);

const hideDealerCards = () => {
  if (!thisInfo.isActive) {
    return;
  }

  camera.setCoord(thisInfo.mainCameraPosition.x, thisInfo.mainCameraPosition.y, thisInfo.mainCameraPosition.z);
  camera.pointAtCoord(thisInfo.mainCameraPointPosition.x, thisInfo.mainCameraPointPosition.y, thisInfo.mainCameraPointPosition.z);
};

mp.keys.bind(0x21, false, hideDealerCards);
mp.events.add('casino.poker.client.setBet.response', (status, balance) => {
  if (status) {
    if (thisInfo.currentBetStatus === 0) {
      thisInfo.firstBet = balance;
    } else if (thisInfo.currentBetStatus === 1) {
      thisInfo.secondBet = balance;
    }

    thisInfo.currentBetStatus++;
    thisInfo.betBalance = 0;
  }

  updateInterfaceInfo();
  thisInfo.awaitSetBet = false;
});

const sendBetRequest = () => {
  if (!thisInfo.isActive) {
    return;
  }

  if (thisInfo.awaitSetBet) {
    return;
  }

  if (thisInfo.currentState === 1 && thisInfo.currentBetStatus >= 2 || thisInfo.currentState === 4 && thisInfo.currentBetStatus >= 3 || thisInfo.currentState === 2 || thisInfo.currentState === 3 || thisInfo.currentState === 5 || thisInfo.currentState === 6) {
    return;
  }

  thisInfo.awaitSetBet = true;
  mp.events.callRemote('casino.poker.server.setBet', thisInfo.betBalance);
};

mp.keys.bind(0x0D, true, sendBetRequest);
mp.events.add('casino.client.interfaceAction', (action, ...data) => {
  if (thisInfo.isActive) {
    if (action === 'changeDirection') {
      const [direction] = data;

      if (direction === -1) {
        decreaseBetBalance();
      } else {
        incrementBetBalance();
      }
    } else if (action === 'clickButton') {
      const [buttonName] = data;

      if (buttonName === 'setBet') {
        sendBetRequest();
      } else if (buttonName === 'cancelBet') {
        cancelBet();
      } else if (buttonName === 'applyBet') {
        sendBetRequest();
      } else if (buttonName === 'showMyCards') {
        showMyCards();
      } else if (buttonName === 'dealerCardsHide') {
        hideDealerCards();
      } else if (buttonName === 'dealerCardsShow') {
        showDealerCards();
      }
    }
  }
});
mp.events.add('render', () => {
  if (!_casino_roulette.inCasino) return;

  if (thisInfo.isActive) {
    mp.game.controls.disableAllControlActions(0);
    let endBetSeconds = 0;

    if (thisInfo.endBetTime) {
      endBetSeconds = Math.floor((thisInfo.endBetTime - Date.now()) / 1000);
    } else {
      thisInfo.lastEndTimeSecconds = 0;
    }

    if (thisInfo.lastEndTimeSecconds !== endBetSeconds) {
      if (endBetSeconds >= 0) {
        _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({
          endBetTime: '${endBetSeconds.toString().padStart(2, '0')}'
        });`);
      }

      thisInfo.lastEndTimeSecconds = endBetSeconds;
    }
  }

  for (const [object, objectInfo] of interpolationPipelines) {
    if (!mp.objects.exists(object)) {
      interpolationPipelines.delete(object);
      return;
    }

    if (!objectInfo.delayActive && objectInfo.currentAction.delay !== 0 && typeof objectInfo.currentAction.delay === 'number') {
      objectInfo.delayActive = true;
    }

    if (objectInfo.delayActive) {
      if (Date.now() - objectInfo.startTime >= objectInfo.currentAction.delay) {
        objectInfo.startTime = Date.now();
        objectInfo.currentAction.delay = 0;
        objectInfo.delayActive = false;
      }

      continue;
    }

    objectInfo.percentage = (Date.now() - objectInfo.startTime) / objectInfo.currentAction.duration;
    objectInfo.percentageRotation = (Date.now() - objectInfo.startTime) / (objectInfo.currentAction.rotationDuration || objectInfo.currentAction.duration);

    if (objectInfo.percentage > 1) {
      objectInfo.percentageCompleted = true;
      objectInfo.percentage = 1;
    }

    if (objectInfo.percentageRotation > 1) {
      objectInfo.percentageRotationCompleted = true;
      objectInfo.percentageRotation = 1;
    }

    if (objectInfo.prevPos && objectInfo.currentAction.to && !objectInfo.currentAction.disablePosition) {
      const coords = helpers.lerpVector3(objectInfo.prevPos, objectInfo.currentAction.to, objectInfo.bezier(objectInfo.percentage));
      object.setCoordsNoOffset(coords.x, coords.y, coords.z, false, false, false);
    }

    if (objectInfo.prevRot && objectInfo.currentAction.rotation && !objectInfo.currentAction.disableRotation) {
      if (objectInfo.prevRot instanceof _Quaternion.default && objectInfo.currentAction.rotation instanceof _Quaternion.default) {
        const quat = objectInfo.prevRot.slerp(objectInfo.currentAction.rotation, objectInfo.bezier(objectInfo.percentageRotation));
        object.setQuaternion(quat.x, quat.y, quat.z, quat.w);
      } else {
        const rot = helpers.lerpVector3(objectInfo.prevRot, objectInfo.currentAction.rotation, objectInfo.bezier(objectInfo.percentageRotation));
        object.setRotation(rot.x, rot.y, rot.z, 2, false);
      }
    }

    if (objectInfo.percentageCompleted && objectInfo.percentageRotationCompleted) {
      const nextAction = objectInfo.pipeline.shift();

      if (typeof nextAction === 'undefined') {
        interpolationPipelines.delete(object);

        if (typeof objectInfo.currentAction.onComplete === 'function') {
          objectInfo.currentAction.onComplete();
        }

        objectInfo.onComplete();
      } else {
        if (typeof objectInfo.currentAction.onComplete === 'function') {
          objectInfo.currentAction.onComplete();
        }

        objectInfo.percentage = 0;
        objectInfo.percentageRotation = 0;
        objectInfo.percentageCompleted = false;
        objectInfo.percentageRotationCompleted = false;
        objectInfo.startTime = Date.now();
        const lastAction = objectInfo.currentAction;
        objectInfo.currentAction = nextAction;

        if (typeof lastAction.from === 'function') {
          lastAction.from = lastAction.from();
        }

        if (typeof lastAction.to === 'function') {
          lastAction.to = lastAction.rotation();
        }

        if (typeof nextAction.from === 'function') {
          nextAction.from = nextAction.from();
        }

        if (typeof nextAction.to === 'function') {
          nextAction.to = nextAction.to();
        }

        objectInfo.prevPos = nextAction.from || lastAction.to;

        if (typeof lastAction.fromRotation === 'function') {
          lastAction.fromRotation = lastAction.fromRotation();
        }

        if (typeof lastAction.rotation === 'function') {
          lastAction.rotation = lastAction.rotation();
        }

        if (typeof nextAction.fromRotation === 'function') {
          nextAction.fromRotation = nextAction.fromRotation();
        }

        if (typeof nextAction.rotation === 'function') {
          nextAction.rotation = nextAction.rotation();
        }

        objectInfo.prevRot = nextAction.fromRotation || lastAction.rotation;
        objectInfo.delayActive = false;

        if (objectInfo.currentAction.delay !== 0 && typeof objectInfo.currentAction.delay === 'number') {
          objectInfo.delayActive = true;
          continue;
        }
      }
    }
  }
});
},{"../../managers/cameraManager":"YrmO","./helpers/bezierEasing":"A84v","./helpers":"qncG","./helpers/Quaternion":"RICX","../gui":"bk91","../../user":"QE3B","../casino_roulette":"XMgA"}],"JvB6":[function(require,module,exports) {
"use strict";

var _gui = require("../gui");

var helpers = _interopRequireWildcard(require("../casino_threecard_poker/helpers"));

var _user = require("../../user");

var _casino_roulette = require("../casino_roulette");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const thisInfo = {
  dealerActive: false,
  isActive: false,
  currentTable: null,
  players: new Set(),
  currentBet: 0,
  spinActive: false,
  onInterfaceHovered: false
};
const SITS_POSITIONS = {
  [0]: [-1.3, 0, 0.7, -60],
  [1]: [-0.4877952745, -0.7133464511, 0.7, -20],
  [2]: [0.480708, -0.721220, 0.7, 30],
  [3]: [1.2153543, -0.0042913, 0.7, 70]
};
const diceTables = [];

const createTable = (position, heading, model) => {
  const table = {
    position,
    heading,
    model
  };
  diceTables.push(table);
  return table;
};

createTable(new mp.Vector3(1148.837, 269.747, -52.84095), -134.6906604, 'vw_prop_casino_blckjack_01');
createTable(new mp.Vector3(1151.84, 266.747, -52.84095), 45.3093566, 'vw_prop_casino_blckjack_01');
createTable(new mp.Vector3(1144.429, 247.3352, -52.041), 135.3094387, 'vw_prop_casino_blckjack_01b');
createTable(new mp.Vector3(1129.406, 262.3578, -52.041), 135.3094387, 'vw_prop_casino_blckjack_01b');

const getStateName = () => {
  return thisInfo.spinActive ? 'Идет игра' : 'Ожидание';
};

const getPlayersNames = () => {
  return [...thisInfo.players].map((player, playerIndex) => `${playerIndex + 1}) ${player === mp.players.local ? 'Вы' : `Игрок ${playerIndex + 1}`}`);
};

mp.events.add('casino.dice.client.startDealer', (tableId, ...players) => {
  thisInfo.players = new Set(players);
  thisInfo.currentTable = diceTables[tableId];
  thisInfo.dealerActive = true;
  thisInfo.currentBet = 0;
  thisInfo.awaitChangeBet = false;
  thisInfo.awaitSetBet = false;
  thisInfo.awaitSpin = false;
  thisInfo.spinActive = false;

  _gui.gui.browser.execute(`CEF.casino.show('dice-dealer', {currentState: '${getStateName()}', currentBet: 0, players: ${JSON.stringify(getPlayersNames())}, disabledChangeBet: false})`);

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(0);`);

  mp.game.ui.displayRadar(false);
});
mp.events.add('casino.dice.client.stopDealer', () => {
  thisInfo.dealerActive = false;
  thisInfo.players = new Set();
  thisInfo.currentTable = null;

  _gui.gui.browser.execute(`CEF.casino.hide()`);

  mp.game.ui.displayRadar(true);
});
let sitTimer = 0;
mp.events.add('casino.dice.client.start', (tableId, sitIndex, currentBet, currentState, endSpinTime, ...players) => {
  thisInfo.players = new Set(players);
  thisInfo.currentTable = diceTables[tableId];
  thisInfo.currentBet = currentBet;
  thisInfo.spinActive = currentState === 1;

  if (currentState === 1) {
    thisInfo.endSpinTime = endSpinTime;
  }

  thisInfo.isActive = true;
  thisInfo.awaitChangeBet = false;
  thisInfo.awaitSetBet = false;
  thisInfo.awaitSpin = false;
  const sitPosition = helpers.getObjectOffsetFromCoords(thisInfo.currentTable.position, thisInfo.currentTable.heading, new mp.Vector3(SITS_POSITIONS[sitIndex][0], SITS_POSITIONS[sitIndex][1], SITS_POSITIONS[sitIndex][2]));
  const obj = mp.game.object.getClosestObjectOfType(thisInfo.currentTable.position.x, thisInfo.currentTable.position.y, thisInfo.currentTable.position.z, 2.0, mp.game.joaat(thisInfo.currentTable.model), false, false, false);

  if (obj !== 0) {
    mp.game.invoke("0x1A9205C1B9EE827F", obj, false, false);
    setTimeout(() => {
      mp.game.invoke("0x1A9205C1B9EE827F", obj, true, true);
    }, 5000);
  }

  thisInfo.sitPosition = sitPosition;
  thisInfo.lastPosition = mp.players.local.position;

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, thisInfo.currentTable.heading + SITS_POSITIONS[sitIndex][3] - 90, false);

  sitTimer = setTimeout(() => {
    _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", sitPosition.x, sitPosition.y, sitPosition.z, thisInfo.currentTable.heading + SITS_POSITIONS[sitIndex][3]);

    mp.game.ui.displayRadar(false);

    _gui.gui.browser.execute(`CEF.casino.show('dice', {currentState: '${getStateName()}', currentBet: ${currentBet}, players: ${JSON.stringify(getPlayersNames())}, disabledChangeBet: false})`);

    _gui.gui.browser.execute(`CEF.casino.changeBetValue(${currentBet});`);
  }, 4000);
});
mp.events.add('casino.dice.client.stop', () => {
  clearTimeout(sitTimer);
  thisInfo.isActive = false;
  thisInfo.players = new Set();
  thisInfo.currentTable = null;
  thisInfo.currentBet = 0;

  _gui.gui.browser.execute(`CEF.casino.hide()`);

  mp.game.ui.displayRadar(true);

  _user.user.playScenario("PROP_HUMAN_SEAT_BENCH", mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, mp.players.local.getHeading() - 90);

  setTimeout(() => {
    _user.user.stopScenario();

    setTimeout(() => {
      mp.players.local.setCoordsNoOffset(thisInfo.lastPosition.x, thisInfo.lastPosition.y, thisInfo.lastPosition.z, false, false, false);
    }, 2000);
  }, 200);
});
mp.events.add('casino.client.interfaceAction', (action, ...data) => {
  if (thisInfo.isActive) {
    if (action === 'clickButton') {
      const [buttonName] = data;

      if (buttonName === 'bet') {
        requestBet();
      }
    }
  } else if (thisInfo.dealerActive) {
    if (action === 'changeBetValue') {
      const [newValue] = data;
      requestChangeBet(parseInt(newValue));
    } else if (action === 'clickButton') {
      const [buttonName] = data;

      if (buttonName === 'spin') {
        requestSpin(true);
      }
    } else if (action === 'onHoverInterface') {
      const [state] = data;
      thisInfo.onInterfaceHovered = state;
    }
  }
});

const requestChangeBet = value => {
  if (value > 10000 || value <= 0) {
    _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentBet})`);

    return;
  }

  thisInfo.nextBet = value;
  mp.events.callRemote('casino.dice.server.changeBet', thisInfo.nextBet);
  thisInfo.awaitChangeBet = true;

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({disabledChangeBet: true, players: ${JSON.stringify(getPlayersNames())}})`);
};

mp.keys.bind(0x25, true, () => {
  if (!thisInfo.dealerActive || thisInfo.awaitChangeBet || thisInfo.spinActive) {
    return;
  }

  const prevBet = thisInfo.currentBet;
  let newBet = thisInfo.currentBet;

  if (thisInfo.currentBet - 50 <= 0) {
    mp.gui.chat.push(`Сумма ставки не может быть равна 0`);
    return;
  } else {
    newBet = thisInfo.currentBet - 50;
  }

  if (prevBet === thisInfo.currentBet) {
    return;
  }

  requestChangeBet(newBet);
});
mp.keys.bind(0x27, true, () => {
  if (!thisInfo.dealerActive || thisInfo.awaitChangeBet || thisInfo.spinActive) {
    return;
  }

  requestChangeBet(thisInfo.currentBet + 50);
});

const requestBet = () => {
  if (thisInfo.isActive && !thisInfo.awaitSetBet) {
    if (thisInfo.players.size >= 4) {
      mp.gui.chat.push(`Ставки сделаны!`);
      return;
    }

    mp.events.callRemote('casino.dice.server.setBet');
    thisInfo.awaitSetBet = true;
  }
};

const requestSpin = (skipHovered = false) => {
  if (thisInfo.dealerActive && !thisInfo.awaitSpin && (skipHovered ? true : !thisInfo.onInterfaceHovered)) {
    if (thisInfo.players.size < 2) {
      mp.gui.chat.push(`Слишком мало участников для запуска игры!`);
      return;
    }

    mp.events.callRemote('casino.dice.server.spin');
    thisInfo.awaitSpin = true;
  }
};

mp.keys.bind(0x0D, true, () => {
  if (thisInfo.spinActive) {
    return;
  }

  requestSpin();
  requestBet();
});
mp.events.add('casino.dice.client.setBet.response', () => {
  thisInfo.awaitSetBet = false;
});
mp.events.add('casino.dice.client.spin.response', success => {
  thisInfo.awaitSpin = false;

  if (success) {
    thisInfo.spinActive = true;
    thisInfo.endSpinTime = Date.now() + 10000;

    _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentState: '${getStateName()}', players: ${JSON.stringify(getPlayersNames())}})`);
  }
});
mp.events.add('casino.dice.client.spin', success => {
  if (!thisInfo.isActive) {
    return;
  }

  thisInfo.spinActive = true;
  thisInfo.endSpinTime = Date.now() + 10000;

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentState: '${getStateName()}', players: ${JSON.stringify(getPlayersNames())}})`);
});
mp.events.add('casino.dice.client.clear', () => {
  thisInfo.spinActive = false;
  thisInfo.currentBet = 0;
  thisInfo.endSpinTime = null;
  thisInfo.players.clear();

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentState: '${getStateName()}', players: [], bet: 0, currentBet: 0})`);

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(0)`);
});
mp.events.add('casino.dice.client.changeBet.response', success => {
  thisInfo.awaitChangeBet = false;

  if (success) {
    thisInfo.currentBet = thisInfo.nextBet;
  }

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({disabledChangeBet: false, players: ${JSON.stringify(getPlayersNames())}})`);

  _gui.gui.browser.execute(`CEF.casino.changeBetValue(${thisInfo.currentBet})`);
});
mp.events.add('casino.dice.client.changeBet', changedBet => {
  thisInfo.currentBet = changedBet;

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({currentBet: ${changedBet}, players: ${JSON.stringify(getPlayersNames())}})`);
});
mp.events.add('casino.dice.client.addPlayer', player => {
  thisInfo.players.add(player);

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({players: ${JSON.stringify(getPlayersNames())}})`);
});
mp.events.add('casino.dice.client.removePlayer', player => {
  thisInfo.players.delete(player);

  _gui.gui.browser.execute(`CEF.casino.updateAdditionalData({players: ${JSON.stringify(getPlayersNames())}})`);
});
mp.events.add('render', () => {
  if (!_casino_roulette.inCasino) return;

  if (thisInfo.sitPosition) {
    mp.game.graphics.drawMarker(25, thisInfo.sitPosition.x, thisInfo.sitPosition.y, thisInfo.sitPosition.z, 0, 0, 0, 0, 0, 0, 0.1, 0.1, 0.1, 255, 255, 255, 255, false, false, 2, false, "", "", false);
  }

  if (thisInfo.dealerActive || thisInfo.isActive) {
    mp.game.controls.disableAllControlActions(0);

    if (thisInfo.endSpinTime) {
      const endBetSeconds = Math.floor((thisInfo.endSpinTime - Date.now()) / 1000);

      if (endBetSeconds > 0) {
        mp.game.graphics.drawText(`Осталось времени: 00:${endBetSeconds.toString().padStart(2, '0')}`, [0.5, 0.1], {
          font: 4,
          color: [255, 255, 255, 255],
          scale: [0, 0.7],
          outline: true,
          centre: true
        });
      }
    }
  }
});
},{"../gui":"bk91","../casino_threecard_poker/helpers":"qncG","../../user":"QE3B","../casino_roulette":"XMgA"}],"LKpP":[function(require,module,exports) {
"use strict";

var _methods = require("../../util/methods");

var _savezone = require("./savezone");

const boardprop = mp.game.joaat("p_defilied_ragdoll_01_s");

async function attach(player, first = true) {
  if (first) player.skate = {}, await (0, _methods.sleep)(500);
  if (!player.skate.obj) player.skate.obj = mp.objects.new(boardprop, new mp.Vector3(player.position.x, player.position.y, player.position.z - 1), {
    dimension: player.dimension
  });
  await (0, _methods.sleep)(100);
  player.vehicle.setAlpha(0);
  player.skate.objveh = player.vehicle;
  if (!player.skate.objped) player.skate.objped = mp.peds.new(player.model, player.position, 0, player.dimension);
  if (first) player.skate.objped.setVisible(false, false);
  player.skate.objveh.setNoCollision(player.skate.objped.handle, false);
  await (0, _methods.sleep)(500);
  player.skate.objped.setInvincible(true);
  player.skate.obj.attachTo(player.skate.objveh.handle, 20, 0.0, 0.0, -0.48, 0.0, 0.0, 90.0, true, true, true, true, 1, true);
  player.skate.obj.setCollision(true, true);

  for (let id = 0; id < 12; id++) {
    let texture = player.getTextureVariation(id);
    let drawable = player.getDrawableVariation(id);
    let pallete = player.getPaletteVariation(id);
    mp.game.invoke("0x262B14F48D29DE80", player.skate.objped.handle, id, drawable, texture, pallete);
  }

  for (let id = 0; id < 3 || id == 6 || id == 7; id++) {
    let texture = player.getPropTextureIndex(id);
    let index = player.getPropIndex(id);
    mp.game.invoke("0x93376B65A266EB5F", player.skate.objped.handle, id, index, texture, true);
  }

  mp.game.invoke("0x262B14F48D29DE80", player.skate.objped.handle, 1, 8, 0);
  player.skate.objped.taskPlayAnim("move_strafe@stealth", "idle", 8.0, -8, -1, 9, 0, false, false, false);
  player.skate.objped.setCollision(true, true);
  player.skate.objped.attachTo(player.skate.obj.handle, 20, 0.0, 0.0, 1.1, 0.0, 0.0, -90.0, true, true, true, true, 1, true);
  player.skate.objped.setVisible(true, true);
  if (!first) return;
  setTimeout(() => {
    attach(player, false);
  }, 1000);

  while (player.handle && player.skate && player.skate.objped) {
    await (0, _methods.sleep)(1000);
    if (!player.skate.objped.isPlayingAnim("move_strafe@stealth", "idle", 3)) player.skate.objped.taskPlayAnim("move_strafe@stealth", "idle", 8.0, -8, -1, 9, 0, false, false, false);
  }
}

function dettach(player) {
  if (!player.skate) return;
  if (player.skate.obj) player.skate.obj.destroy();
  player.skate.obj = null;
  if (player.skate.objped) player.skate.objped.destroy();
  player.skate = null;
}

mp.events.add("render", () => {
  if (!mp.players.local.skate) return;

  if (mp.game.controls.isDisabledControlJustPressed(0, 75)) {
    mp.events.callRemote('unskate');
    dettach(mp.players.local);
    return;
  }

  if (!mp.players.local.vehicle) {
    mp.events.callRemote('unskate');
    dettach(mp.players.local);
    return;
  }

  if ((0, _savezone.inGreenZone)()) {
    mp.events.callRemote('unskate');
    dettach(mp.players.local);
    return;
  }
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "player") return;
  if (entity.getVariable('skate')) attach(entity);
});
mp.events.add('entityStreamOut', entity => {
  if (entity.type != "player") return;
  if (entity.getVariable('skate')) dettach(entity);
});
mp.events.addDataHandler("skate", (entity, value) => {
  if (!value) dettach(entity);else attach(entity);
});
mp.events.add('entityStreamIn', entity => {
  if (entity.type != "player" && entity.type != "vehicle") return;
  if (entity.getVariable('skate')) entity.setAlpha(0);
});
mp.events.addDataHandler("skate", (entity, value) => {
  if (entity.type != "player" && entity.type != "vehicle") return;
  if (!value) return;
  entity.setAlpha(0);
});
},{"../../util/methods":"Z5QB","./savezone":"ehdN"}],"GXij":[function(require,module,exports) {
"use strict";

var _newrage = require("../../util/newrage");

var _user = require("../user");

const localPlayer = mp.players.local;
const maxSpeed = 10.0;
const minHeight = 15.0;
const maxHeight = 60.0;
const maxAngle = 15.0;
let timePressKey = 0;
mp.events.add('rappelSync', id => {
  let target = mp.players.atRemoteId(id);
  if (!target.handle) return;
  target.clearTasks();
  target.taskRappelFromHeli(10.0);
});
setInterval(() => {
  if (mp.keys.isDown(69)) {
    const vehicle = localPlayer.vehicle;
    if (!vehicle) return timePressKey = 0;
    if (!mp.game.invoke("0x4E417C547182C84D", vehicle.handle)) return timePressKey = 0;

    if (vehicle.getSpeed() > maxSpeed) {
      _user.user.notify("~r~Вертолёт летит слишком быстро для спуска на тросе");

      return timePressKey = 0;
    }

    if (vehicle.getPedInSeat(-1) === localPlayer.handle || vehicle.getPedInSeat(0) === localPlayer.handle) {
      _user.user.notify("~r~С данного места спуск на тросе невозможен");

      return timePressKey = 0;
    }

    const taskStatus = localPlayer.getScriptTaskStatus(-275944640);

    if (taskStatus === 0 || taskStatus === 1) {
      _user.user.notify("~r~Вы уже спускаетесь на тросе");

      return timePressKey = 0;
    }

    const curHeight = vehicle.getHeightAboveGround();

    if (curHeight < minHeight || curHeight > maxHeight) {
      _user.user.notify("~r~Вертолёт слишком высоко/низко для спуска на тросе");

      return timePressKey = 0;
    }

    if (!vehicle.isUpright(maxAngle) || vehicle.isUpsidedown()) {
      _user.user.notify("~r~Стабилизируйте вертолёт для спуска на тросе");

      return timePressKey = 0;
    }

    if (!_user.user.isGos()) {
      _user.user.notify("~r~Доступно только сотрудникам гос.организаций");

      return timePressKey = 0;
    }

    timePressKey++;
    if (timePressKey < 2) return;
    timePressKey = 0;

    if (_newrage.RAGE_BETA) {
      localPlayer.clearTasks();
      localPlayer.taskRappelFromHeli(10.0);
    } else {
      mp.events.callRemote('rappel');
    }
  } else {
    timePressKey = 0;
  }
}, 1000);
},{"../../util/newrage":"mgLX","../user":"QE3B"}],"Sogq":[function(require,module,exports) {
let giftpos;
let pickupedData;
mp.events.add("holidayPickups", datas => {
  pickupedData = JSON.parse(datas);
});
mp.events.add("3vv", datas => {
  giftpos = JSON.parse(datas);
});
setInterval(() => {
  if (!pickupedData) return;
  if (!giftpos) return;
  const mypos = mp.players.local.position;
  giftpos.map((item, index) => {
    if (pickupedData.indexOf(index) != -1) return remove(item);
    if (mp.game.gameplay.getDistanceBetweenCoords(mypos.x, mypos.y, mypos.z, item.x, item.y, item.z, true) > 300) return remove(item);
    if (!item.object) return create(item);
  });
}, 5000);
setInterval(() => {
  if (!pickupedData) return;
  giftpos.map((item, index) => {
    if (!item.object) return;
    if (item.object && mp.game.invoke("0x80EC48E6679313F9", item.object)) return collect(item, index);
  });
}, 1000);

function create(item) {
  if (item.object) remove(item);
  item.object = mp.game.invoke("0x891804727E0A98B7", 79909481, item.x, item.y, item.z - 1, 0.0, 0.0, 0.0, 0, 1, 2, 0);
}

function remove(item) {
  if (!item.object) return;
  mp.game.invoke("0x3288D8ACAECD2AB2", item.object);
  item.object = undefined;
}

function collect(item, index) {
  if (!item.object) return;
  remove(item);
  if (pickupedData.indexOf(index) != -1) return;
  pickupedData.push(index);
  mp.events.callRemote('holidayPickups:server', index);
}
},{}],"vGK9":[function(require,module,exports) {
"use strict";

var _ui = require("../modules/ui");

var _methods = require("../modules/methods");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let rulletPos = null;
mp.events.add('server:rullet', () => {
  rulletPos = _objectSpread({}, mp.players.local.position);
});
mp.events.add('server:rullet:stop', () => {
  rulletPos = null;
});
mp.events.add("render", () => {
  if (!rulletPos) return;

  _ui.ui.drawText3D(_methods.methods.distanceToPos(mp.players.local.position, new mp.Vector3(rulletPos.x, rulletPos.y, rulletPos.z)).toFixed(2) + "m.", rulletPos.x, rulletPos.y, rulletPos.z);

  mp.game.graphics.drawLine(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, rulletPos.x, rulletPos.y, rulletPos.z, 255, 0, 0, 255);
});
},{"../modules/ui":"zOnK","../modules/methods":"qXSp"}],"QCba":[function(require,module,exports) {
"use strict";

var _newrage = require("../util/newrage");

var _customEvent = require("./customEvent");

var _gui = require("./modules/gui");

require("./modules/data");

require("./modules/afk");

require("./modules/pickups");

require("./modules/test");

require("./modules/events");

require("./managers/sync");

require("./managers/shooting");

require("./managers/fingerpoint");

require("./managers/anticheat");

require("./managers/attach_system");

require("./managers/anim_auto");

require("./managers/npc");

require("./managers/menu");

require("./managers/custom_sound");

require("./modules/race2");

require("./modules/socket");

require("./modules/savezone");

require("./ragevoice");

require("./fly");

require("./control");

var _enums = require("./enums");

var _items = require("./items");

var _user = require("./user");

var _methods = require("./modules/methods");

require("./betternotifs");

var _object = require("./managers/object");

var _weapons = require("./weapons");

var _trucker = require("./jobs/trucker");

var _breakLight = require("./managers/breakLight");

require("./auth");

require("./hud");

require("./modules/spectate");

require("./modules/doors");

require("./modules/minigame");

require("./modules/npc");

require("./managers/autoschool");

require("./managers/cameraRecord");

require("./managers/sync.elements");

require("./business/autosalon");

require("./modules/spikes");

require("./modules/casino_slot_machines");

require("./modules/casino_roulette");

require("./modules/casino_threecard_poker");

require("./modules/casino_dice");

require("./modules/skate");

require("./modules/rappel");

require("./managers/pickup.gift");

require("./managers/admin");

mp.events.add('web:browsers:urls', q => {
  let url = q[0];
  if (url.includes('ragebeta')) (0, _newrage.SET_RAGE_BETA)();
});

if (!mp.console) {
  Object.defineProperty(mp, "console", {
    writable: true
  });
  mp.console = {
    clear: console.clear,
    reset: console.clear,
    logInfo: console.info,
    logWarning: console.warn,
    logError: console.error,
    logFatal: console.error
  };
  mp.console.clear();
  mp.console.logInfo('ENABLE NEW RAGE MOD def');
} else {
  mp.console.clear();
}

mp.events.container = _customEvent.ClientEvent.container;
mp.events.eventRemoteRequestId = _customEvent.ClientEvent.eventRemoteRequestId;
mp.events.eventRemoteRequestData = _customEvent.ClientEvent.eventRemoteRequestData;
mp.events.eventID = _customEvent.ClientEvent.eventID;
mp.events.containerLocal = _customEvent.ClientEvent.containerLocal;
mp.events.register = _customEvent.ClientEvent.register.bind(mp.events);
mp.events.registerLocal = _customEvent.ClientEvent.registerLocal.bind(mp.events);
mp.events.triggerLocal = _customEvent.ClientEvent.triggerLocal.bind(mp.events);
mp.events.triggerServer = _customEvent.ClientEvent.triggerServer.bind(mp.events);
mp.events.triggerBrowser = _customEvent.ClientEvent.triggerBrowser.bind(mp.events);
mp.events.callLocal = _customEvent.ClientEvent.callLocal.bind(mp.events);
mp.events.callServer = _customEvent.ClientEvent.callServer.bind(mp.events);
mp.events.callBrowser = _customEvent.ClientEvent.callBrowser.bind(mp.events);
mp.events.callRemote('setSocial', mp.game.invoke('0x198D161F458ECC7F'));
const player = mp.players.local;

try {
  _user.user.showLoadDisplay(500);

  mp.gui.chat.show(false);

  for (let i = 0; i < _weapons.weapons.hashesMap.length; i++) _weapons.weapons.hashesMap[i][1] *= 2;

  _enums.enums.customIpl.forEach(item => {
    _object.object.createIpl(item[0], new mp.Vector3(item[1], item[2], item[3]), item[4]);
  });

  _methods.methods.debug('Execute: index');

  _items.items.loadItems();

  _object.object.load();

  _trucker.trucker.loadAll();

  _breakLight.breakLight.timer();

  _methods.methods.requestIpls();
} catch (e) {
  _methods.methods.debug('Exception: index');

  _methods.methods.debug(e);

  console.error(e);
}

mp.events.add('guiStarted', () => {
  mp.gui.chat.show(true);
});
mp.events.add('setChatActiveInput', active => {
  _gui.gui.chatActive = active;
});
setInterval(() => {
  mp.game.invoke('0xF4F2C0D4EE209E20');
}, 25000);
let halfBlockStep = false;
mp.events.add('render', () => {
  halfBlockStep = !halfBlockStep;
  if (!halfBlockStep) return;
  mp.events.call('renderHalf');
});
setTimeout(() => {
  if (!mp.game.dlc2.isDlcPresent(mp.game.joaat("fluorine4305_deadmoroz"))) {}

  mp.events.register("models:checkValid", models => {
    return new Promise(resolve => {
      let status = true;
      models.map(model => {
        mp.game.streaming.requestModel2(typeof model == "string" ? mp.game.joaat(model) : model);
        mp.game.streaming.requestModel(typeof model == "string" ? mp.game.joaat(model) : model);
        setTimeout(() => {
          if (!mp.game.streaming.isModelValid(typeof model == "string" ? mp.game.joaat(model) : model)) status = false;
        }, 800);
      });
      setTimeout(() => {
        return resolve(status);
      }, 1000);
    });
  });
}, 5000);
},{"../util/newrage":"mgLX","./customEvent":"ARQI","./modules/gui":"bk91","./modules/data":"Edcz","./modules/afk":"X2Af","./modules/pickups":"xTdX","./modules/test":"ce6v","./modules/events":"d3wo","./managers/sync":"ia7M","./managers/shooting":"R6P3","./managers/fingerpoint":"Tpi6","./managers/anticheat":"Klt7","./managers/attach_system":"uwcG","./managers/anim_auto":"ufbL","./managers/npc":"pqyY","./managers/menu":"BkU5","./managers/custom_sound":"FPvd","./modules/race2":"n1sh","./modules/socket":"WcPp","./modules/savezone":"ehdN","./ragevoice":"VUJK","./fly":"p3bl","./control":"E081","./enums":"ZRYf","./items":"nuVl","./user":"QE3B","./modules/methods":"qXSp","./betternotifs":"zMA7","./managers/object":"o1IG","./weapons":"YeMF","./jobs/trucker":"kruA","./managers/breakLight":"nEWc","./auth":"yieC","./hud":"Lsp6","./modules/spectate":"Sf2B","./modules/doors":"H2nx","./modules/minigame":"KnNo","./modules/npc":"jKJb","./managers/autoschool":"GLPL","./managers/cameraRecord":"zg97","./managers/sync.elements":"fsEp","./business/autosalon":"V6sO","./modules/spikes":"VXTb","./modules/casino_slot_machines":"Rr1D","./modules/casino_roulette":"XMgA","./modules/casino_threecard_poker":"hevW","./modules/casino_dice":"JvB6","./modules/skate":"LKpP","./modules/rappel":"GXij","./managers/pickup.gift":"Sogq","./managers/admin":"vGK9"}]},{},["QCba"], null)
//# sourceMappingURL=/index.js.map